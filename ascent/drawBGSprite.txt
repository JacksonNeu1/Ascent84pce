

BGMaxSpriteHeight .equ 120


draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
	call move_bg
	ld hl,$d52c00;BG_buffer_end
	ld bc,(BG_draw_buffer)
	scf 
	ccf 
	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
	push hl 
	pop bc	;put into bc for ldir 
	ld hl,(BG_draw_buffer)
	ld de,(draw_buffer)
	ldir
	ld hl,(BG_draw_buffer) ;loop point in buffer
	ld bc,BG_buffer ;start of buffer
	scf 
	ccf 
	sbc hl,bc ;number of bytes from start to loop point 
	ret z ;if bg buffer line is at top of buffer, no second ldir
	push hl 
	pop bc
	ld hl,BG_buffer 
	ldir 
	ret 
	
	
;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
move_bg:
	ld hl,(cam_pos);load cam pos 
	;call write_hl_to_ram
	srl h
	rr l
	srl h
	rr l
	srl h
	rr l	;div by 8 to get location of BG layer
	;hl holds bg cam pos, lowest visible line of bg layer 
	ld bc,(bg_cam_pos);previous BG cam location 
	scf
	ccf
	sbc hl,bc ;compare to the updated location
	ret z ;if 0, the bg buffer does not need to be moved 
	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
	jp move_bg ;repeat until bg is in correct pos
move_bg_down:
	call dec_bg
	jp move_bg ;repeat until bg is in correct pos


dec_bg:;move bg cam down 1px 

	
	;Testibng
	;ld a,$AD
	;call write_a_to_ram
	

	;write on draw buffer line 
	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
	ld (dbgl_vram_line_start),hl 
	
	ld hl,(bg_cam_pos)
	dec hl ;dec bg cam pos by 1 
	ld (bg_cam_pos),hl 
	
	ld bc,0 ;clear bc reg
	ld c,h;bottom y value msb 
	ld a,l ;bottom y value lsb 
	ld hl,BG_Data_frame_table
	inc c 
	add hl,bc 
	add hl,bc 
	add hl,bc ;add 3*frame number to get to correct frame pointer
	ld hl,(hl) ;hl now points to bg frame data 
	call draw_bg_line
	

	;move buffer pos
	ld hl,(BG_draw_buffer)
	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
	scf 
	ccf 
	sbc hl,bc ;compare to current line 
	ld hl,(BG_draw_buffer)
	jp nz,dec_bg_bottom_skip
	ld hl,$d49560;1 row above top of bg buffer 
dec_bg_bottom_skip:
	ld bc,160 
	add hl,bc
	ld (BG_draw_buffer),hl 
	ret


inc_bg:;move cam up 

	
	;Testibng
	;ld a,$00
	;call write_a_to_ram
	;call prgmpause

	ld hl,(BG_draw_buffer)
	ld bc,BG_buffer
	scf 
	ccf 
	sbc hl,bc ;compare current drawing line to top of bg buffer 
	ld hl,(BG_draw_buffer)
	jp nz,inc_bg_top_skip ;if they are not equal, continue
	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
inc_bg_top_skip:
	ld bc,160 
	scf
	ccf 
	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
	ld (BG_draw_buffer),hl 
	ld (dbgl_vram_line_start),hl 
	ld hl,(bg_cam_pos)
	inc hl 
	ld (bg_cam_pos),hl ;incremnet cam pos 
	;call write_hl_to_ram
	ld bc,239
	add hl,bc ;gets uppermost visible line y value in bg layer
	ld c,h;cam pos msb 
	ld a,l ;a holds line number in target frame 
	ld hl,BG_Data_frame_table
	inc c ;inc to get to upper frame 
	add hl,bc 
	add hl,bc 
	add hl,bc 
	ld hl,(hl)
	call draw_bg_line
	ret
	




setup_bg: ;Draws entire BG buffer when loading game 
	ld hl,(cam_pos)
	srl h
	rr l
	srl h
	rr l ;div by 4
	;hl holds bg cam pos 
	ld (bg_cam_pos),hl
	
	ld bc,239
	add hl,bc;hl holds y position of uppermost visible line in bg layer 
	
	inc hl;to be dec in loop
	push hl ;save uppermost line y val
	ld hl,BG_buffer ;start of bg drawing buffer 
	ld (BG_draw_buffer),hl ;set current bg line drawing location 
	push hl 
	
	ld a,240 ;num loops
	ld (setup_bg_loop_count),a
setup_bg_loop:

	pop hl;vram draw pos, next line of bg drawn here 
	ld (dbgl_vram_line_start),hl ;set drawing pos 
	ld bc,160
	add hl,bc 
	ex de,hl ;put next vram pos in de 
	pop hl;uppermost line y val
	dec hl ;dec line y value (move to next lowest line)
	push hl;push uppermost line y val
	push de ;push vram pos 
	ld bc,0
	ld c,h;cam pos msb 
	ld a,l ;a holds line number in current frame 
	ld hl,BG_Data_frame_table
	inc c ;add 1 to get to upper frame
	add hl,bc 
	add hl,bc 
	add hl,bc 
	ld hl,(hl) ;hl now points to upper frame data 
	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
	
setup_bg_loop_count .equ $ + 1
	ld a,0
	dec a ;dec loop counter
	ld (setup_bg_loop_count),a
	jp nz,setup_bg_loop 
	pop hl ;pop vram pos 
	pop hl ;pop current line number 
	ret 






;hl = upper data frame, a = line number in target frame
;for drawing BG, only 1 line is drawn at a time.
;therefore only check sprites in the above frame that may extend downwards, 
;and the sprites in the target frame which contains the y position of the line being drawn
;set dbgl_vram_line_start before calling 
draw_bg_line:
	
	
	ld (dbgl_line_num),a ;write line num to required positions 
	ld (dfgs_cam_height_1), a ;Used to check if upper frame should be considered
	neg 
	ld (dbgl_lines_to_top_of_target_frame),a 
	
	push hl ;upper frame sprite table pointer 
	ld a,$FF ;Set all of line to FF to clear it with color 16
	ld bc,160
	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
	call _MemSet ;Clear all of line 
	pop hl ;return upper frame ptr 

	
	ld a,%11011010;jp c
	ld (dfgs_bg_mode_1),a 
	ld (dfgs_bg_mode_2),a 
	
	ld a,255;
	ld (dfgs_cam_height_3),a ;Will skip drawing of lower frame
	ld (dfgs_cam_height_4),a
	

	
	call draw_fg_sprites
	
	ret
	


	;a = y value of sprite in upper frame, hl pts to height
dbgl_draw_upper_sprite:	

	;push af 
	;call write_a_to_ram
	;ld a,(hl)
	;call write_a_to_ram
	;ld a,$BC
	;call write_a_to_ram
	;pop af
	
	;call write_hl_to_ram
	
	;call prgmpause

dbgl_lines_to_top_of_target_frame .equ $ + 1
	add a,0 ;a holds line number in sprite to draw (0 indexed)
	;call write_a_to_ram
	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
	cp (hl) ;compare to sprite height 
	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
	;Sprite is to be drawn, a holds line number 
	call dbgl_setup_and_draw ;draw sprite line 
	;hl pts to next sprite y
	ret
	
dbgl_upper_skip_sprite:
	inc hl ;to x 
	inc hl ;to index 
	inc hl ;to next y
	ret
	

	;a holds y in frame, (hl) = height
dbgl_draw_lower_sprite:
	
	;call write_a_to_ram
	;call prgmpause
	;call write_hl_to_ram
	
	;call prgmpause
	
dbgl_line_num .equ $ + 1
	sub 0;subtract line num 
	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
	cp (hl) ;compare to sprite height
	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
	
	;Sprite is to be drawn, a holds line number 
	call dbgl_setup_and_draw ;draw sprite line 
	;hl pts to next y
	ret
	
dbgl_lower_skip_sprite:

	;ld a,$AA 
	;call write_a_to_ram
	;call prgmpause
	
	inc hl ;to x 
	inc hl ;to index 
	inc hl ;to y
	ret




;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
;returns hl holds next y val
dbgl_setup_and_draw:

	;push af 
	;ld a,$AB 
	;call write_a_to_ram
	;call write_hl_to_ram
	;pop af 
	;call write_a_to_ram
	
	;call prgmpause

	ld bc,0
	ld de,0
	
	inc hl;to x pos
	ld e,(hl);e holds x pos 
	inc hl 
	ld c,(hl);sprite index 
	inc hl ;next y
	push hl ;save location in data 
dbgl_vram_line_start .equ $ + 1	
	ld hl,0
	add hl,de;add x pos
dbgl_sg_x_origin .equ $ + 1
	ld e,0 
	add hl,de;add x pos
	
	ex de,hl;put vram pos into de 
	
	ld h,160
	ld l,a ;number of lines to subtract 
	mlt hl;bytes to subtract from vram
	scf 
	ccf
	ex de,hl;hl holds initial vram pos, de is lines to subtract  
	sbc hl,de ;subtract to get sprite draw start line 
	ex de,hl;put in de
	
dbgl_sprite_pointers .equ $ + 1
	ld hl,0
	add hl,bc
	add hl,bc 
	add hl,bc ;hl points to sprite data pointer 
	ld hl,(hl);hl holds sprite data


	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dbgl_fast_sprite ;if even address, fast sprite 
	call draw_slow_sprite_single_line
	jp dbgl_slow_sprite
dbgl_fast_sprite:
	call draw_fast_sprite_single_line
dbgl_slow_sprite:
	
	ld de,0;clear de 
	ld bc,0
	pop hl;back to data
	ret
	


















