
;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
setup_sprite_bottom_cut:
	dec de
	ld bc,0 ;clear bc
	ld c,a;c = lines to draw
	push hl ;save data 
	add hl,bc
	ld a,(hl);num loops to draw
	pop hl ;return to start of data
	ld c,(hl) ;height
	add hl,bc ;hl now points to 1 before first gap length
	ret 

setup_sprite_top_cut:
	dec de ;move to correct vram pos 
	ld bc,0
	ld c,a ;lines to skip (1 indexed)
	push de
	ld de,0
	push hl
	ld e,(hl);height
	add hl,bc;hl points to num skip loops 
	ld c,(hl);c holds num skip loops
	pop hl;start of data
	add hl,de
	ld b,(hl);total number of loops
	inc hl;hl is pixel data
	pop de;back to vram
	ld a,c;loops to skip
	ret 

;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
setup_sprite_single_line: ;sets up for single line drawing mode 
	dec de
	ld bc,0
	ld c,a ;line to draw
	push de ;save vram 
	ld de,0
	push hl
	ld e,(hl);height
	add hl,bc;hl points to num skip loops 
	ld c,(hl);c holds num skip loops
	inc hl 
	ld b,(hl);b holds num loops after drawn line 
	pop hl;start of data
	add hl,de
	inc hl;hl is pixel data points to gap length 
	pop de;back to vram
	ld a,c;loops to skip
	ret 



draw_fast_sprite_bottom_cut_from_line:
	inc a 
;de = vram , hl = data, a = number lines to draw
draw_fast_sprite_bottom_cut:
	call setup_sprite_bottom_cut
	inc hl ;hl points to gap length 
	ld c,(hl);load alpha length
	ex de,hl;hl is vram, de is data
	jp dfgs_loop


;de = vram , hl = data, a = line to draw (starting from 0)
draw_fast_sprite_single_line:
	or a 
	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
	;we know a is not 0 here 
	call setup_sprite_single_line
	
	push bc;save total and skipped loops
	ld bc,0
	
	jp draw_fast_sprite_top_loop 



;de = vram , hl = data, a = top lines to skip (1 indexed)
draw_fast_sprite_top_cut:
	call setup_sprite_top_cut
	push bc ;save total and skipped loops 
	ld bc,0 
	
draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
	ld c,(hl);load with first gap length	
	ex de,hl;hl is vram
	add hl,bc
	ex de,hl;hl is data
	inc hl
	ld c,(hl);ldir length
	add hl,bc;add ldir length
	ex de,hl;hl is vram
	add hl,bc;add ldir length
	inc de
	ex de,hl;hl is data
	dec a
	jp nz,draw_fast_sprite_top_loop
	
	
	pop bc ;b is total loops, c is skipped loops 
	ld a,b
	sub a,c;subtract skipped from total, a holds remaining number of loops
		
	ld bc,0
	ld c,(hl);load c with gap length
	ex de,hl ;setup for loop 
	jp dfgs_loop


;de = vram , hl = data
draw_fast_sprite_full:
	dec de
	ld bc,0
	ld c,(hl);height
	add hl,bc
	ld a,(hl);total loops
	inc hl
	ld c,(hl);first gap length
	ex de,hl
;a = num loops, c = alphaLength,hl = vram
dfgs_loop:;gap, colors
	add hl,bc;add alpha length
	ex de,hl;swap, hl is data, de is vram
	inc hl
	ld c,(hl);get ldir length
	inc hl
	ldir
	ld c,(hl);load c with next alpha length
	ex de,hl;swap, hl is vram
	dec a
	jp nz,dfgs_loop
	ret
	
	
	
	


;hl = data, de = vram
draw_slow_sprite_full:
	ld bc,0
	ld c,(hl);height
	add hl,bc
	ld a,(hl);num loops
	dec de ;correct vram pos 
	exx;into shadow 
	ld b,a ;number of loops
	;hl = (gap length) -1 de = vram-1 b' = loops
dsfgs_line_loop:
	exx;out of shadow
	inc hl;gap length
	ld c,(hl);gap length
	ex de,hl;hl is vram
	add hl,bc;add aplha gap
	ex de,hl;hl is data
	inc hl;hl points to single pix mask
	ld a,(de);vram data
	and (hl)
	inc hl;pixel data
	or (hl)
	ld (de),a
	inc hl;ldir length
	
	inc de;move to next pixel
	
	ld a,(hl);ldir length
	inc hl;data
	ld c,a
	or a
	jp z,dsfgs_ldir_skip
	ldir
dsfgs_ldir_skip:
	ld a,(de);vram data
	and (hl)
	inc hl;pixel data
	or (hl)
	ld (de),a
	
	exx ;into shadow
	djnz dsfgs_line_loop
	exx ;out 
	ret



;de = vram , hl = data, a = line to draw (from 0)
draw_slow_sprite_single_line:

	or a 
	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
	;we know a is not 0 here
	call setup_sprite_single_line
	push bc;save total and skipped loops
	ld bc,0
	
	jp slow_sprite_data_traverse 
	

;de = vram , hl = data, a = top lines to skip (from 1)
draw_slow_sprite_top_cut:
	call setup_sprite_top_cut
	push bc;save total and skipped loops
	ld bc,0
;hl = data start, a = num loops to skip, bc = 0
slow_sprite_data_traverse:
	ld c,(hl);gap length
	ex de,hl;hl is vram
	add hl,bc
	ex de,hl
	
	inc hl ;inc past leading pixels
	inc hl
	inc hl;ldir length
	ld c,(hl)
	add hl,bc
	ex de,hl
	add hl,bc
	ex de,hl
	inc de;inc for leading pix 
	inc hl;inc past ending pixels
	inc hl
	inc hl;gap length
	
	dec a 
	jp nz,slow_sprite_data_traverse


	pop bc ;b is total loops, c is skipped loops 
	ld a,b
	sub a,c;subtract skipped from total, a holds remaining number of loops
	ld bc,0;clear bc 
	dec hl	;hl points to 1 before gaplength
	exx ;toshadow
	ld b,a 
	jp dsfgs_line_loop
	
	
	
draw_slow_sprite_bottom_cut_from_line:
	inc a 
;de = vram , hl = data, a = number lines to draw
draw_slow_sprite_bottom_cut:

	call setup_sprite_bottom_cut
	;a = loops to draw, hl = 1 before gap length 
	exx ;toshadow
	ld b,a
	jp dsfgs_line_loop




































 























































	
	