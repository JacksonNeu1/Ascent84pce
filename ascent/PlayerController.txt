


charge_jump_left:
	;Decrease jump right strength
	;Increase jump up strength 
	;Do nothing if jump left timer is above max value 
	ld a,(player_flags)
	set 7, a 
	ld (player_flags),a 
	ld a,(jump_charge_timer)
	cp timer_max_val
	ret nc
	ld a,(jump_strength_left)
	ld b,4
	add a,b 
	ld (jump_strength_left),a
jump_add_up_strength:
	ld a,(jump_strength_up)
	inc a 
	inc a 
	inc a 
	ld (jump_strength_up),a
	ret


charge_jump_right:
	;Increase jump right strength 
	;Increase jump up strength 
	;Do nothing if jump  timer is above max value 
	ld a,(player_flags)
	set 7, a 
	ld (player_flags),a 
	ld a,(jump_charge_timer)
	cp timer_max_val
	ret nc
	ld a,(jump_strength_right)
	ld b,4
	add a,b 
	ld (jump_strength_right),a
	jp jump_add_up_strength


try_tongue: ;called from getinput

	;check if player in air 
	ld a,(player_flags)
	bit 6,a ;on ground flag 
	ret nz 
	bit 2,a 
	ret nz ;already in tongue state
	bit 3,a 
	ret nz ;falling
	;ld a,$A0
	;call write_a_to_ram

	ld de,0 
	ld bc,0
	ld hl,0
	ld a, (player_y_pos + 2) ;player y frame 
	ld h,a 
	ld a, (player_y_pos + 1);player y pixel 
	ld l,a
	dec hl ;Offset y pos to mouth origin
	dec hl 
	dec hl 
	dec hl 
	dec hl 
	dec hl 
	dec hl ;hl holds y poos of mouth
	
	ld de, Tongue_Rings
	ex af,af' ;'
	ld a,(de) ; a' is counter 
	;call write_a_to_ram
	inc de ;to first element 
try_tongue_loop:
	ex af,af' ;' 
	;hl holds player y ,de holds data
	ld a ,(de)
	ld b,a ;frame num 
	inc de
	ld a,(de)
	inc de
	ld c,a ;pixel
	;call write_a_to_ram
	push hl ;hl holds player y 
	;call write_hl_to_ram
	push bc ;bc holds ring y 
	scf 
	ccf 
	sbc hl,bc ;compare to ring y 
	jp nc, tongue_loop_continue ;ring below player 
	;call write_hl_to_ram
	;otherwise ring above player, hl holds -dist 
	ld bc,10 ; min dist threshold 
	add hl,bc 
	jp c, tongue_loop_continue ; ring less than min dist above player 
	ld bc,tongue_max_length ;ring max dist threshold - min dist threshold
	add hl,bc 
	jp nc,tongue_loop_continue ;ring above max distance threshold
	;jp nc,test_1	
	
	;Ring has valid y pos 
	pop hl ;ring y 
	ld (tongue_ring_y_pos),hl
	pop bc ;player y  
	push bc
	scf 
	ccf 
	sbc hl,bc ;hl holds distance ring is above player  
	;ld a,$AA
	;call write_a_to_ram
	ld a,(de) ;ring x pos 
	;call write_a_to_ram
	ld c,a 
	ld (tongue_ring_x_pos),a 
	call player_x_half ;a holds player x in pairs  (destroys b)
	;call write_a_to_ram
	ld b,3;x offset from collider to center of player collider
	add a,b 
	sub a,c ;player x - ring x 
	;call write_a_to_ram
	jp nc, tongue_ring_to_left
	neg 
tongue_ring_to_left:
	;player sprite will be flipped 
	;a holds abs(xdistance) to ring in pair pixels 
	; l holds y dist in single px
	cp 30
	jp nc,tongue_loop_continue_2 ;x dist > 20
	dec l ;safety factor
	sub a,l
	;call write_a_to_ram
	jp nc, tongue_loop_continue_2 ;x dist > y dist 
	;jp nc, test_2
	;Valid ring found 
	
	;call prgmpause;
	
	pop hl ;player y 
	ld a,(player_flags)
	set 2,a 
	ld (player_flags),a 
	ld a,0 
	ld (tongue_extend_timer),a
	;call write_a_to_ram
	;ld a,$AA
	;call write_a_to_ram
	ret 


tongue_loop_continue:
	pop bc ;ring y 
	inc de ;to next
tongue_loop_continue_2:
	pop hl ;player y
	ex af,af' ;' 
	dec a 
	jp nz,try_tongue_loop
	
	ret 




player_update: ;Should be called after inputs

	ld a,(player_flags)
	bit 2,a ;tongue flag 
	jp nz, pu_tongue_update	
	bit 7,a ;jump key  flag 
	jp z, pu_try_jump
	
	;Jump key is held, charge jump
	ld a,(jump_charge_timer)
	inc a 
	ld (jump_charge_timer),a
	;Jumps can be charged in air, for immediate jump
	
	jp pu_physics

pu_tongue_update:
	
	;ld a,$AB
	;call write_a_to_ram
	
	;compute y dist to ring, and angle to check cancel 
	call y_length_to_tongue_ring
	ld a,l
	cp tongue_max_length
	jp nc, pu_tongue_release 
	;call write_hl_to_ram
	;hl holds line y length 
	;ld a,l 
	;call write_a_to_ram
	ld a,(tongue_extend_timer)
	;call write_a_to_ram
	;compare timer to y dist / 8 
	srl l 
	srl l 
	srl l 
	cp l 
	jp c, pu_tongue_extend
	
	cp 127 ;if > 127 go to contract
	jp nc, pu_tongue_contract
	;ld a,$AC
	;call write_a_to_ram
	;otherwise tongue is full length, set timer to 128 to start contract phase 
	ld a,128 
	ld (tongue_extend_timer),a 
	ld hl,0 
	ld (player_y_vel),hl 
	ld (player_x_vel),hl

pu_tongue_contract:

	;ld a,$AD 
	;call write_a_to_ram
	;Add distance to ring to player velocity until reach ring
	call y_length_to_tongue_ring ;l holds y dist in px 
	ld a,l 
	;call write_a_to_ram
	cp 3 
	jp c, pu_tongue_release
	bit 7,h 
	jp nz,pu_tongue_release
	;div by ~6
	srl l
	srl l
	srl l
	ld a,l 
	srl l 
	add a,l 
  	ld l,a 
	;call write_a_to_ram
	;call prgmpause
	;call write_hl_to_ram
	ld de,20
	add hl,de 
	ex de,hl 
	ld hl,(player_y_vel)
	add hl,de 
	ld (player_y_vel),hl 
	;call write_hl_to_ram
	;call prgmpause
	
	call x_length_to_tongue_ring
	;a holds x dist in pairs
	bit 7,a ;check sign 
	jp nz, pu_tongue_contract_left
	ld de,0 
	ld e,3 
	add a,e 
	ld e,a
	srl e ;div by 2
	jp pu_tongue_contract_right
pu_tongue_contract_left:
	ld de, $ffffff
	ld e,-3 
	add a,e
	ld e,a 
	sra e ;div 2
pu_tongue_contract_right:
	
	ld hl,(player_x_vel)
	add hl,de 
	ld (player_x_vel),hl 
	
	jp pu_physics
	
	;tongue extends 8px per frame until max length 
	;then set timer to 128 for contract phase 
pu_tongue_extend:
	;Extend tongue and do normal air physics
	inc a 
	inc a 
	;call write_a_to_ram
	ld (tongue_extend_timer),a 
	jp pu_physics


pu_tongue_release:
	ld a,(player_flags)
	res 2,a 
	ld (player_flags),a 
	jp pu_physics


pu_try_jump:
	;no jump keys held this frame. If jump timer > 0 and on ground, then jump 
	
	bit 6,a ;ground check 
	jp z, pu_no_jump ;if not on ground, cant jump
	ld a,(jump_charge_timer)
	or a 
	jp z,pu_no_jump ;jump timers are 0 = no jump
	
	cp 8;if timer < 8 no jump
	jp c, pu_no_jump
	
	;This is the minimum jump player can do 
	;ld a,(jump_strength_right)
	;bit 7,a 
	;;jp nz, pu_min_jump_left 
	;or a 
	;jp z, pu_min_jump_up 
	;ld a,20 
	;jp pu_min_jump_up
;pu_min_jump_left:
	;ld a, -20
;pu_min_jump_up:
	;ld (jump_strength_right),a 
	
	;ld a,15 
	;ld (jump_strength_up),a 
	
	;ld a,$55
	;call write_a_to_ram
	
	;Player is on ground and should execute a jump 
pu_jump_notmin:
	
	ld hl,0 
	ld a,(jump_strength_up)
	ld l,a
	;call write_a_to_ram

	ld (player_y_vel),hl 
	;call write_hl_to_ram
	
	ld a,(jump_strength_left)
	ld b,a 
	ld a,(jump_strength_right)
	sub a,b ;subtract left jump from right
	jp c, pu_left_jump 
	;right jump 
	ld hl,0
	jp pu_jump_cont
pu_left_jump:	
	ld hl, $ffffff ;makes x vel negative 
pu_jump_cont:
	ld l,a 
	;call write_a_to_ram
	ld (player_x_vel),hl 
	;call write_hl_to_ram
	;Clear ground flag 
	ld a,(player_flags)
	res 6, a 
	ld (player_flags),a 
	
pu_no_jump:	
	;reset jump timers 
	ld a,0 
	ld (jump_charge_timer),a 
	ld (jump_strength_right),a 
	ld (jump_strength_left),a 
	ld (jump_strength_up),a	
	
pu_physics:

	;Execute player physics update and check for collisions 
	;Run multiple times, 16 steps per frame? 
	;Move up first, then check collision, then move side and check again 
	ld a,(player_flags)
	bit 6,a 
	call nz,pu_check_on_ground ;check if player still on ground 


	ld a,16 ;num physics loops 
	ld (pu_physics_count),a 
	
pu_physics_loop:

pu_physics_count .equ $ + 1
	ld a,0
	dec a 
	jp z, pu_physics_end
	ld (pu_physics_count),a
	
	ld a,(player_flags)
	
	res 5,a ;reset in semisolid flag 
	ld (player_flags),a 
	bit 6,a 
	jp nz,pu_physics_loop ;If on ground, no need to do physics 
	
	

;Y POS UPDATE

	ld hl, (player_y_vel) 	
	ex de,hl 
	ld hl, (player_y_pos) 
	add hl,de ;add y vel to y pos 
	ld (player_y_pos),hl 
	
	;check for vertical collisions here 
	ld a,%11011010;jp c
	ld (collision_check_vertical),a
	call check_collisions

pu_update_x_pos:

;X POS UPDATE
	ld hl, (player_x_vel) 
	ex de,hl 
	ld hl, (player_x_pos) 
	add hl,de ;add x vel to x pos 
	ld (player_x_pos),hl 
	
	ld de,$000900
	sbc hl,de 
	call c, reverse_x_vel ;If xpos < 2px
	ld hl, (player_x_pos) 
	ld de,$012300; if xpos > 300px
	sbc hl,de 
	call nc,reverse_x_vel
	
	;TODO check horizontal collisoins 
	ld a, %11010010 ;jp nc 
	ld (collision_check_vertical),a
	call check_collisions
	
	;Set previous position 
	ld hl, (player_y_pos)
	ld (player_y_pos_prev), hl 
	;call write_hl_to_ram
	ld hl, (player_x_pos)
	ld (player_x_pos_prev), hl 
	
	;ld a,$CC
	;call write_a_to_ram
	
	
	ld a,(player_flags)
	bit 5,a ;in semisolid flag 
	jp z, pu_no_semisolid
	set 4,a	
	jp pu_prev_semisolid
pu_no_semisolid:
	res 4,a 
pu_prev_semisolid:
	ld (player_flags),a 
	
	jp pu_physics_loop
	;Apply gravity and terminal v check after loop 

pu_check_on_ground:
	;checks if player is still on ground or platform has dissapeared 
	ld a,(player_flags)
	res 6,a 
	ld (player_flags),a 
	ld hl, (player_y_pos)
	ld de,-256
	add hl,de ;dec by 1 full pixel
	ld (player_y_pos),hl 
	;check for vertical collisions here 
	ld a,%11011010;jp c
	ld (collision_check_vertical),a
	call check_collisions	
	ret 


pu_physics_end:
	;Apply gravity 
	ld hl,(player_y_vel)
	bit 7,h  ;Check if vel is negative
	jp z,pu_apply_gravity ;if moving up apply gravity
	
	push hl 
	;check foor terminal vel 
	ld de, $000080 ;8px per frame
	add hl,de ;terminal V is negative
	pop hl 
	jp nc, pu_terminal_vel
pu_apply_gravity:
	ld de,11 ;GRAVITY CONSTANT
	scf 
	ccf ;reset carry flag 
	sbc hl,de 
	ld (player_y_vel),hl

	ret 
pu_terminal_vel:
	ld hl, $ffff80 ;-8 px per frame
	ld (player_y_vel),hl
	;call write_hl_to_ram
	ret 



check_collisions:
	ld a,(player_y_pos+2) ;Frame Number
	ld bc,0 
	ld hl, Collision_Data_frame_table
	ld c,a 
	add hl,bc ;add frame num 
	add hl,bc ;add frame num 
	add hl,bc ;add frame num 
	ld hl,(hl)
	
	;call write_a_to_ram
	
	;ld a,$20 
	;call write_a_to_ram
	
	ld a,%11011010;jp c
	ld(check_col_lower_jump),a 
	ld (colis_semisolid_down_lower_frame),a 
	
	;hl points to collision data for this frame 
	ex af,af' ;' 
	ld a,(hl) ;ld number of elements 
	inc a ;for 0 case
	ex af,af' ;' 
	inc hl ;to first element

check_collisions_same_loop:
	;hl pts to ymin of collider 
	ex af,af' ;'
	dec a 
	jp z, check_collisions_lower
	ex af,af';' 
	;Collider bottom is in same frame as player 
	ld a,(player_y_pos + 1)
	sub a,(hl); sub y pos of collider 
	;call write_a_to_ram
	jp c, check_col_skip_4 
	inc hl; to height 
	;Player top is above bottom of collider 
	;a holds # pixels above bottom of collider (0 indexed)	
	ld c,player_collider_height
	;call write_a_to_ram
	sub a,c
	jp c, check_col_y_collision
	sub (hl); cokmpare to collider height -1 
	jp c,check_col_y_collision
	;Otherwise no collision 	
	jp check_col_skip_3

check_collisions_lower:
	;hl pts to start of lower frame collisoin data 
	ex af,af' ;' 
	ld a,(hl) ;ld number of elements 
	inc a ;for 0 case
	;call write_a_to_ram
	ex af,af' ;'

	;ld a,$21 
	;call write_a_to_ram
	
	inc hl ;to first element
	ld a, %11010010 ;jp nc 
	ld (check_col_lower_jump),a 
	ld (colis_semisolid_down_lower_frame),a 
check_collisions_lower_loop:
;hl pts to ymin of collider 
	ex af,af' ;'
	dec a 
	ret z 
	ex af,af';' 
	;collider y min is in frame below player
	;we already know player is above collider bottom 
	ld a,(player_y_pos + 1)
	sub a,(hl)
	jp nc,check_col_skip_4
	;call write_a_to_ram
	inc hl ;to height 
	;a holds px from player top to collider bottom 
	ld c,player_collider_height
	;call write_a_to_ram
	sub a,c
	jp c, check_col_y_collision

	;call write_a_to_ram
	sub (hl); cokmpare to collider height -1 
	jp c,check_col_y_collision
	;Otherwise no collision 	
	jp check_col_skip_3
	
check_col_y_collision:
	;call write_a_to_ram

	;Player is within Y range of collider 
	;ld a,$AA 
	;call write_a_to_ram;TESTIng
	
	inc hl ;to x max 
	call player_x_half
	;A holds x pos / 2 (paired pixels) 
	
	cp (hl) ;compare to x max 
	;zero or carry = collison 
	jp z, check_col_x_collision
	jp c, check_col_x_collision
	
	jp check_col_skip_2
	
check_col_x_collision:

	;ld a,$BB
	;call write_a_to_ram
	;Need to find x pos of right of player, then div by 2 
	ld a,(player_x_pos+1);Fullpixels
	add a, player_collider_width ;Will set carry flag if right side of player > 255 and left of player < 255 
	rra ;div by 2 and move carry flag to bit 7. 
	ld b,a 
	ld a,(player_x_pos +2 ); MSB pixel 
	rrca ;move bit 0 to bit 7
	or b ;a holds right pos of player / 2 
	inc hl ;to x min 
	cp (hl) 
 
	jp c, check_col_skip_1 


collision_found: ;A collision has been detected
	
	;TESTing 
	;ld a,$AB 
	;call write_a_to_ram
	
	inc hl ;to flags 
	
	;ld a,(hl)
	;call write_a_to_ram
	
	scf 
collision_check_vertical .equ $
	jp c, collision_check_vert 
	

	ld a,(player_flags)
	bit 3,a 
	jp z,colis_horiz_not_fall
	;player is falling 
	set 5,a ;set semisolid flag 
	ld (player_flags),a 
	jp check_col_skip_0
	
colis_horiz_not_fall:
	;Player is moving horizontal 
	ld a,(hl) ;flags 
	bit 7,a ;semisolid 
	jp nz,vert_col_up_semisolid ;skips semisolid 

	bit 6,a 
	jp nz, collision_spikes
	
	;TODO breakaway platforms 
	
	;player has moved horiz and hit a solid wall 
	;Reverse x velocity 
	push hl 
	call reverse_x_vel
	pop hl 
	
	jp check_col_skip_0

collision_check_vert:
	;Player is moving in vertical direction 

	ld a,(player_y_vel + 2) ;MSB of y vel 
	bit 7,a ;check if moving up or down 
	jp nz, vert_col_down
	
	
	ld a,(player_flags)
	bit 3,a 
	jp z,colis_vert_up_not_fall
	set 5,a ;set semisolid flag. All colliders act semisolid while in fall
	ld (player_flags),a 
	jp check_col_skip_0
	
	
colis_vert_up_not_fall:
	;player is moving up 
	ld a,(hl) ;flags 
	bit 7,a ;semisolid 
	jp nz,vert_col_up_semisolid ;semisolid and moving up

	bit 6,a 
	jp nz, collision_spikes

	;TODO breakaway platforms 
	
	;Plyaer has moved up and hit non spike object 
	;Set velocity to 0 
	push hl 
	ld hl,0
	ld (player_y_vel),hl 
	ld hl, (player_y_pos_prev) ;revert to previous y pos 
	ld (player_y_pos),hl 
	pop hl 
	
	jp check_col_skip_0
	
vert_col_up_semisolid:
	ld a,(player_flags)
	set 5,a ;set semisolid flag 
	ld (player_flags),a 
	jp check_col_skip_0
	
	
	
vert_col_down:
	ld a,(player_flags)
	bit 3,a 
	jp z,colis_vert_down_not_fall
	
	;PLayer is falling
	set 5,a ;set semisolid flag. All colliders act semisolid while in fall
	ld (player_flags),a 
	push hl ;save collider flags 
	
	
	;push af 
	;ld a,$B0
	;call write_a_to_ram
	;pop af
	
	;check if we are below spike hit height 
	ld hl,(spike_hit_height)
	ex de,hl 
	ld hl,(player_y_pos) 
	sbc hl,de 
	jp c,check_end_fall
	;Player is above threshold 
	pop hl ;return collider flags 
	jp check_col_skip_0 ;continue 
	

check_end_fall:
	;push af 
	;ld a,$B1
	;call write_a_to_ram
	;pop af
	;call write_a_to_ram
	
	pop hl ;return collider flags 
	;Player has hit ground below fall threshold 
	bit 4,a ;check we were not in semisolid last update (cant stop fall if player is clipping into a collider)
	jp nz, check_col_skip_0; player currently in collider 
	
	;ld a,$B2
	;call write_a_to_ram
	;player can land 
	;check for unlucky bounce 
	res 3,a 
	ld (player_flags),a ;reset fall flag 
	
	ld a,$B1
	call write_a_to_ram
	
	;pop hl 
	ld a, (fall_num_bounces)
	ld b,a 
	;call write_a_to_ram
	call random_val
	ld e,a 
	call write_a_to_ram
	ld c,%00000001 ;can set to 11 for hard mode
unlucky_bounce_loop: ;number of bounces determines num loops = more chances to land successfully
	ld a,e ;restore random val
	and a,c 
	jp z,colis_vert_down_not_fall ;player lands
	rlc c 
	jp c,colis_vert_down_not_fall ;break loop after 8 shifts (incase rand val is all 0)
	djnz unlucky_bounce_loop
	
;Player has hit unlucky bounce 
	push hl 
	call spike_hit_bounce
	pop hl
	
	;show unlucky indicator
	ld a,80
	ld (pd_unlucky_display_timer),a 
	
	jp check_col_skip_0 ;continue 
	
	
colis_vert_down_not_fall:
	;player is moving down 
	ld a,(hl) ;flags 
	bit 7,a ;semisolid 
	jp z,vert_col_down_solid 
	
	;semisolid and moving down
	;ld a,(player_flags)
	;set 5,a ;set semisolid flag 
	;ld (player_flags),a 
	
	;ld a,$AC 
	;call write_a_to_ram
	;call write_hl_to_ram
	
	;check if previos y pos was in frame above, if so treat collider as in lower frame 
	ld a,(player_y_pos+2);current pos frame 
	ld b,a 
	ld a,(player_y_pos_prev + 2);last pos frame#
	cp b 
	jp z,colis_semi_same_frame
	ld a,%11010010 ;jp nc 
	ld (colis_semisolid_down_lower_frame),a 
colis_semi_same_frame:
	
	ld a,(player_y_pos_prev + 1) ;last y pos in frame 
	
	dec hl; to xmin 
	dec hl 
	dec hl ;height 
	dec hl ;ymin 
	sub a,(hl) ;player y - collider bottom 
colis_semisolid_down_lower_frame .equ $
	jp nc,check_col_skip_4 ;nc for lower frame, c for same frame 
	push af
	;ld a,$A0 
	;call write_a_to_ram
	pop af
	;call write_a_to_ram
	inc hl ;height
	ld c, player_collider_height
	sub a,c ;player bottom to collider bottom 
	jp c,check_col_skip_3
	;ld a,$A1 
	;call write_a_to_ram
	;call write_a_to_ram
	sub a,(hl) ;compare to height 
	jp c,check_col_skip_3 ;we were already within semisolid collider 
	inc hl
	inc hl 
	inc hl;flags 
	;ld a,$A2
	;call write_a_to_ram
	;otherwise, hit the collider 
	ld a,(hl)

vert_col_down_solid:
	bit 6,a 
	jp nz, collision_spikes

	push hl ;save flags
	;TODO breakaway platforms 
	and a,%00001111 ;breakaway index 1-16
	jp z, not_breakaway
	
	;Player has hit breakaway platform, check timer 
	ld hl,breakaway_timers
	ld bc,0 
	ld c,a ;index 
	add hl,bc 
	;hl pts to correct timer
	ld a,(hl)
	or a 
	jp nz, start_breakaway_skip
	;if timer is zero, set to 1 
	ld a,1 
	ld (hl),a 
	jp not_breakaway ;platform is solid 
start_breakaway_skip:
	pop hl 
	and %11100000 ;check if >32 
	jp nz, check_col_skip_0
	;otherwise platform still solid 
	push hl 
not_breakaway:

	;Plyaer has moved down and hit non spike object 
	;Set velocity to 0 
	ld hl,0
	ld (player_x_vel),hl 
	ld (player_y_vel),hl 
	ld hl, (player_y_pos_prev) ;revert to previous y pos 
	ld (player_y_pos),hl 
	ld (player_last_ground_pos),hl
	;call write_hl_to_ram
	pop hl 
	
	ld a,(player_flags)
	set 6,a  ;set ground flag 
	res 2,a ;reset tongue flag (cancel tongue if landed)
	ld (player_flags),a
	jp check_col_skip_0 ;continue 





collision_spikes:
	push hl
	;player has collided with spikes 
	call spike_hit_bounce
	ld a,1
	ld (fall_num_bounces),a 
	pop hl 
	jp check_col_skip_0


spike_hit_bounce:
	ld hl,$000080
	ld (player_y_vel),hl 
	call random_val
	bit 0, a 
	jp nz, spike_negative_bounce
	ld hl,0
	and %11000000 ;pull 2 bits of a for velocity
	or  %00110000
	ld l,a 
	ld (player_x_vel),hl
	jp spike_pos_bounce
spike_negative_bounce:
	ld hl,$ffffff
	and %11000000 ;pull 2 bits of a for velocity
	or  %00001111
	ld l,a 
	ld (player_x_vel),hl
spike_pos_bounce:
	ld a,(player_flags)
	set 3,a  ;set fall flag 
	res 2,a ;reset tongue flag
	ld (player_flags),a 
	;Set spike hit height 
	ld hl, (player_y_pos)
	ld de, $00ff00 ;fall minimum of 256px 
	sbc hl,de 
	jp nc, spike_bounce_min_height_threshold
	ld hl,0
spike_bounce_min_height_threshold:
	ld de, $004300  ;minimum spike height threshold (bottom of map)
	add hl,de 
	ld (spike_hit_height),hl 
	;call write_hl_to_ram
	ret 


check_col_skip_4:
	inc hl ;to height
check_col_skip_3:
	inc hl ;to xmax
check_col_skip_2:	
	inc hl ;to xmin
check_col_skip_1:	
	inc hl ;to flags
check_col_skip_0:
	inc hl ;to next element
	
	scf 
check_col_lower_jump .equ $
	jp c, check_collisions_same_loop
	jp check_collisions_lower_loop



reverse_x_vel:;bounce player off wall
	ld hl,(player_x_vel)
	ex de,hl 
	ld hl,0
	sbc hl, de  
	
	ld a,h
	and %10000000
	srl h ;div by 2 
	rr l 
	or h ;keeps bit 7 the same 
	ld h,a 

	ld (player_x_vel),hl 
	ld hl, (player_x_pos_prev) ;revert to previous x pos 
	ld (player_x_pos),hl 
	ret 



random_val:
	ld a, (player_y_pos)
	ld c,a 
	ld a,($F20000) ;fast timer 
	xor c
	ret 

player_x_half:
	ld a,(player_x_pos+1);Fullpixels
	srl a ;div by 2 
	ld b,a 
	ld a,(player_x_pos+2);MSB fullpixel 
	rrca ;Move bit 0 to bit 7
	or b 
	ret 


jump_strength_up:
	.db 0 
jump_strength_right:
	.db 0 
jump_strength_left:
	.db 0
jump_charge_timer:
	.db 0 

	
timer_max_val .equ 32

player_collider_height .equ 18
player_collider_width .equ 20 ;width -1 


player_x_pos:
	.dl 0 ; (MSB fullpixel, Fullpixels, subpixels)
	
player_y_pos:
	.dl 0 ; (Frame #, Fullpixels, subpixels)

player_x_vel:
	.dl 0 ; (Unused, Fullpixels, subpixels)
	
player_y_vel:
	.dl 0 ; (Unused, Fullpixels, subpixels)


player_x_pos_prev: ;x position before update, revert to this if collision 
	.dl 0 ; (MSB fullpixel, Fullpixels, subpixels)
	
player_y_pos_prev: ;y position before update, revert to this if collision :
	.dl 0 ; (Frame #, Fullpixels, subpixels)

player_last_ground_pos:
	.dl 0

tongue_ring_y_pos:
	.dl 0
tongue_ring_x_pos:
	.db 0	
tongue_max_length .equ 90

player_flags:
	.db %00000000 ; (7 = Any jump button held, 6 = on ground,5 = within semisolid, 4 = in semisolid last update, 3= isfalling, 2 = tongueActive, 1 = lastDirection(1=right))
	.db %00000000 ; 7= cam move up, 6 = cam move down
spike_hit_height:
	.dl 0 ;Height where player can land after hitting spike
fall_num_bounces:
	.db 0 ;Number of times player has had unlucky bounce
tongue_extend_timer:
	.db 0 ;Timer for extend tongue anim


breakaway_timer_update:
	ld hl, breakaway_timers + 1
	exx 
	ld hl, breakaway_sprite_data_table
	exx 
	ld b, 15 
breakaway_timer_update_loop:
	ld a,(hl)
	;call write_a_to_ram
	;call prgmpause
	or a 
	jp z, breakaway_timer_update_loop_skip ;not being stood on
	inc a 
	ld (hl),a 
breakaway_timer_update_loop_skip:

	;a holds timer val 
	cp 10 
	jp c, breakaway_platform_set_sprite_0
	cp 20 
	jp c, breakaway_platform_set_sprite_1
	cp 32
	jp c, breakaway_platform_set_sprite_2
	inc a 
	ld (hl),a 
	jp breakaway_platform_set_sprite_3

breakaway_platform_set_sprite_0:
	ld a,3 
	ld (breakaway_set_sprite_number),a 
	ld a,4
	ld (breakaway_set_sprite_number_2),a 
	jp breakaway_platform_set_sprites

breakaway_platform_set_sprite_1:
	ld a,4 
	ld (breakaway_set_sprite_number),a 
	ld a,3
	ld (breakaway_set_sprite_number_2),a 
	jp breakaway_platform_set_sprites

breakaway_platform_set_sprite_2:
	ld a,5 
	ld (breakaway_set_sprite_number),a 
	ld a,2
	ld (breakaway_set_sprite_number_2),a 
	jp breakaway_platform_set_sprites

breakaway_platform_set_sprite_3:
	ld a,6 
	ld (breakaway_set_sprite_number),a 
	ld a,1
	ld (breakaway_set_sprite_number_2),a 
	jp breakaway_platform_set_sprites	
	
breakaway_platform_set_sprites:	
	exx ;in shadow
	push hl 
	ld hl,(hl) ;hl pts to number of platforms with this index 
	ld b,(hl) ;num platforms
	dec hl 
	dec hl 
	inc b 
breakaway_platform_set_sprites_loop:
	ld de,0
	dec b 
	jp z,breakaway_platform_return_timer_loop
breakaway_set_sprite_number .equ $ + 1
	ld e,0
	add hl,de 
	ld a,(hl) ; sprite index 
	;call write_a_to_ram
breakaway_set_sprite_number_2 .equ $ + 1
	ld e,0
	add hl,de ;data location 
	ld de,(hl)
	ld (de),a ;set sprite value in level data 
	;call prgmpause
	jp breakaway_platform_set_sprites_loop
	

breakaway_platform_return_timer_loop:
	pop hl 
	inc hl 
	inc hl 
	inc hl
	exx ;out
	inc hl 
	dec b 
	jp nz,breakaway_timer_update_loop
	
	ret 

	
breakaway_timers: ;If not zero, count up by 1 every frame, solid when timer btwn 0-32
	.db 0 ;Unused
	.db 0
	.db 1
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0
	.db 0

breakaway_sprite_data_table:
	.dl breakaway_platform_data_0
	.dl breakaway_platform_data_1
	.dl breakaway_platform_data_2
	.dl breakaway_platform_data_3
	.dl breakaway_platform_data_4
	.dl breakaway_platform_data_5
	.dl breakaway_platform_data_6
	.dl breakaway_platform_data_7
	.dl breakaway_platform_data_8
	.dl breakaway_platform_data_9
	.dl breakaway_platform_data_10
	.dl breakaway_platform_data_11
	.dl breakaway_platform_data_12
	.dl breakaway_platform_data_13
	.dl breakaway_platform_data_14
	
	
	
	
player_move_debug:
;DEBUG MODE ============================================================================= 
	ld	hl,DI_Mode		; register for keypad mode
	ld	(hl),2			; set single scan mode
	xor	a,a
dbg_scan_wait:
	cp	a,(hl)			; wait for keypad idle mode
	jr	nz,dbg_scan_wait
	
	ld a,(kbdG5)
	bit kbit6,a 
	jp nz, player_move_debug_right
	
	ld a,(kbdG3)
	bit kbit4,a 
	jp nz, player_move_debug_left
	
	ld a,(kbdG4)
	bit kbit2,a 
	jp nz, player_move_debug_down 
	
	ld a,(kbdG4)
	bit kbit8,a 
	jp nz, player_move_debug_up
	
	ret 
	
	


player_move_debug_left:
	ld hl,(player_x_pos)
	ld bc, 128
	sbc hl,bc 
	ld (player_x_pos),hl 
	call check_collisions
	ret 

player_move_debug_right:
	ld hl,(player_x_pos)
	ld bc, 128
	add hl,bc 
	ld (player_x_pos),hl 
	call check_collisions
	ret 

player_move_debug_up:
	ld hl,(player_y_pos)
	ld bc, 128
	add hl,bc 
	ld (player_y_pos),hl 
	call check_collisions
	ret 

player_move_debug_down:
	ld hl,(player_y_pos)
	ld bc, 128
	sbc hl,bc 
	ld (player_y_pos),hl 
	call check_collisions
	ret
