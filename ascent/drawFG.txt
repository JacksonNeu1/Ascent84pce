
FGMaxSpriteHeight .equ 120

draw_mg:

	ld a, %11010010 ;jp nc
	ld (dfgs_bg_mode_1),a 
	ld (dfgs_bg_mode_2),a 
	ld (dfgs_bg_mode_3),a 

	ld hl,(draw_buffer)
	ld (dfgs_vram_top_1),hl
	ld (dfgs_vram_top_2),hl
	ld bc,160*240
	add hl,bc
	ld (dfgs_vram_bottom_1),hl 
	ld (dfgs_vram_bottom_2),hl 
	ld (dfgs_vram_bottom_3),hl 
	ld (dfgs_vram_bottom_4),hl 
	
	ld hl,(cam_pos)
	srl h ;div by 2
	rr l 
	
	ld bc,239
	add hl,bc ;y-value of uppermost visible line of fg layer
	ld a,l ;lsb cam pos, = line number in middle frame
	ld (dfgs_cam_height_1),a
	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
	ld (dfgs_cam_height_3),a
	ld (dfgs_cam_height_4),a	
	neg 
	ld (dfgs_viewport_to_upper_frame),a ;1 = top line of VP is top line of middle frame
	neg 
	sub 239
	ld (dfgs_viewport_bottom_y),a
	
	ld bc,0
	ld c,h;msb ccam pos 
	inc c 
	ld hl,MG_Data_frame_table
	add hl,bc
	add hl,bc 
	add hl,bc 	
	ld hl,(hl);upper frame 
	
	
	call draw_fg_sprites
	ret



draw_fg:

	ld a, %11010010 ;jp nc
	ld (dfgs_bg_mode_1),a 
	ld (dfgs_bg_mode_2),a 
	ld (dfgs_bg_mode_3),a
	
	ld hl,(draw_buffer)
	ld (dfgs_vram_top_1),hl
	ld (dfgs_vram_top_2),hl
	ld bc,160*240
	add hl,bc
	ld (dfgs_vram_bottom_1),hl 
	ld (dfgs_vram_bottom_2),hl 
	ld (dfgs_vram_bottom_3),hl 
	ld (dfgs_vram_bottom_4),hl 
	
	ld hl,(cam_pos)
	ld bc,239
	add hl,bc ;y-value of uppermost visible line of fg layer
	ld a,l ;lsb cam pos, = line number in middle frame
	ld (dfgs_cam_height_1),a ;SET with line# for bg
	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
	ld (dfgs_cam_height_3),a ;Set to 255 for BG (Skips drawing lower frame)
	ld (dfgs_cam_height_4),a
	neg 
	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
	neg 
	sub 239
	ld (dfgs_viewport_bottom_y),a
	
	ld bc,0
	ld c,h;msb ccam pos 
	inc c 
	ld hl,FG_Data_frame_table
	add hl,bc
	add hl,bc 
	add hl,bc 	

	ld hl,(hl);upper frame 

	call draw_fg_sprites
	ret


; Upper Frame =======================================================================================================
; Upper Frame =======================================================================================================
;hl = upper frame data
 
;load cam height 123,vram top 12 vram bottom 1234
draw_fg_sprites:
	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
	ld de,(hl)
	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
	ld (dfgs_sprite_pointers_2),de 
	
	ld de,0
	inc hl 
	inc hl
	inc hl;past data table 
	;hl is number of elements
	
	
	;if cam is far below upper frame, can skip upper frame 
dfgs_cam_height_1 .equ $ + 1
	ld a,0 
	cp FGMaxSpriteHeight
	jp nc, dfgs_do_upper_loop
	;cam too low for upper frame sprites to be drawn
	ld bc,0
	ld c,(hl) ;bc holds number of elements
	add hl,bc 
	add hl,bc 
	add hl,bc 
	add hl,bc;hl points to end of current frame data 
	inc hl;start of next frame
	jp dfgs_mid_start ;skip upper loop
	
	
dfgs_do_upper_loop:	
	ex af,af' ;'
	
	ld a,(hl);number of elements
	;TESTING
	;call write_a_to_ram
	;call prgmpause
	;TESTING
	
	inc a ;to be decd later
	ex af,af' ;'
	inc hl;hl points to first sprite in upper frame  

dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 

	ex af,af';'
	dec a ;dec number of elements
	;call write_a_to_ram
	jp z,dfgs_mid_start 
	ex af,af';'

	ld a,(hl);sprite y value 
	inc hl ;to height
	
	;call write_a_to_ram
	;call prgmpause
	bit 7, (hl) ;Check for sprite group
	jp nz, dfgs_sg_upper ;goto group loop 
	
	;otherwise single sprite, call draw routine 
	call dfgs_draw_upper_sprite
	
	jp dfgs_upper_loop
	

;Can be used for normal sprites and in sprite groups 
;a holds y pos in upper frame, hl pts to sprite height 
dfgs_draw_upper_sprite:

	scf 
dfgs_bg_mode_1 .equ $ 
	jp nc, dbgl_draw_upper_sprite ;if bg mode go to bg draw routine


dfgs_viewport_to_upper_frame .equ $ + 1
	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
	;call write_a_to_ram
	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
	cp (hl) ;compare to sprite height 
	jp nc, dfgs_upper_skip ;skips drawing too many lines, sprite is not on screen
	;a holds number of lines to skip drawing

dfgs_vram_top_1 .equ $ + 1 
	ld de,0;load top of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_upper_fast
	call draw_slow_sprite_top_cut
	jp dfgs_upper_skip_2
dfgs_upper_fast:
	call draw_fast_sprite_top_cut
dfgs_upper_skip_2:
	pop hl ;hl holds (height)
	

dfgs_upper_skip:

	inc hl ;to x
	inc hl ;to index 
	inc hl;to y 
	
	ret ;end of dfgs_draw_upper_sprite
	
	;ld a,$AA
	;call write_a_to_ram
	;call prgmpause
	

;MIDDLE FRAME ====================================================================================================
	
dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
	
	;call prgmpause
	
	ld de,(hl) ;load sprite table ptr 
	ld (dfgs_sprite_pointers_1),de
	ld (dfgs_sprite_pointers_3),de 
	ld de,0
	inc hl 
	inc hl
	inc hl;past sprite table ptr
	ex af,af' ;'
	ld a,(hl);number of elements
	inc a 
	ex af,af' ;'
	
	inc hl ;to first y val 
dfgs_mid_loop:
	
	ex af,af';'
	dec a 
	;call write_a_to_ram
	jp z,dfgs_lower_start ;check for end of data
	
	ex af,af';'

	;ld a, $AB
	;call write_a_to_ram

	ld a,(hl);y val of sprite in dataframe
	;call write_a_to_ram
	inc hl ;to height
	
	bit 7, (hl) ;Check for sprite group
	jp nz, dfgs_sg_mid ;goto group loop 
	
	
	
	;otherwise, draw single sprite 
	call dfgs_draw_mid_sprite

	
	jp dfgs_mid_loop
	
	
	
	;a = ypos in mid frame, hl pts to height
dfgs_draw_mid_sprite:	
	
	scf 
dfgs_bg_mode_2 .equ $ 
	jp nc, dbgl_draw_mid_sprite ;if bg mode go to bg draw routine

	;call write_a_to_ram
	
dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
	sub 0;subtract cam pos
	;call write_a_to_ram

	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
dfgs_mid_sprite_topline:

	;Sprite is below viewport bound, either full or bottom cut 
	
	;a = sprite y - cam pos 
	dec a ;for case where sprite pos = cam pos
	add a,240 

	jp nc, dfgs_mid_skip
	;a holds y pos above bottom of vp (0 indexed )
	inc a 
	
	
	
	cp (hl) ;compare to sprite height 
	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
	;otherwise, draw full sprite 
	
dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
	ld de,0;load bottom of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_mid_full_fast
	call draw_slow_sprite_full
	jp dfgs_mid_skip_1
dfgs_mid_full_fast:
	call draw_fast_sprite_full
dfgs_mid_skip_1:
	pop hl ;hl holds (height)
	
	
dfgs_mid_skip:;sprite is entirely above or below cam pos 
	inc hl ;x
	inc hl ;index 
	inc hl;to y 
	
	
	
	ret
	

dfgs_mid_bottom_cut:
dfgs_vram_bottom_2 .equ $ + 1  ;Bottom Cut SPRITE, a = lines above bottom of viewport
	ld de,0;load bottom of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_mid_bcut_fast
	call draw_slow_sprite_bottom_cut
	jp dfgs_mid_skip_2
dfgs_mid_bcut_fast:
	call draw_fast_sprite_bottom_cut
dfgs_mid_skip_2:
	pop hl ;hl holds (height)
	jp dfgs_mid_skip

dfgs_mid_sprite_above:
	
	;a holds lines to skip 
	cp (hl) ;compare to height
	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport

dfgs_vram_top_2 .equ $ + 1
	ld de,0;top of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_mid_tcut_fast
	call draw_slow_sprite_top_cut
	jp dfgs_mid_skip_3
dfgs_mid_tcut_fast:
	call draw_fast_sprite_top_cut
dfgs_mid_skip_3:
	pop hl ;hl holds (height)
	jp dfgs_mid_skip
	
	
;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================		
;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
dfgs_lower_start:
	
	ld de,(hl) ;load sprite table ptr
	ld (dfgs_sprite_pointers_1),de
	ld (dfgs_sprite_pointers_4),de
	ld de,0
	inc hl 
	inc hl
	inc hl;past data table 
	
	ex af,af' ;'
	ld a,(hl);number of elements
	inc a 
	ex af,af' ;'
	inc hl
	

dfgs_cam_height_3 .equ $ + 1 
	ld a, 0
	sub 239
	ret nc;if bottom frame is offscreen 

	;a holds y value of viewport bottom line in lower frame 
	

dfgs_lower_loop:

	ex af,af';'
	dec a 
	ret z
	ex af,af';'
	
	ld a,(hl);y
	;call write_a_to_ram
	inc hl ;inc to height
	
	bit 7, (hl) ;Check for sprite group
	jp nz, dfgs_sg_lower ;goto group loop 
	
	;otherwise, draw single sprite 
	call dfgs_draw_lower_sprite
	
	jp dfgs_lower_loop

	
dfgs_draw_lower_sprite: ;a = ypos, hl pts to height
	
	scf 
dfgs_bg_mode_3 .equ $ 
	jp nc, dbgl_draw_lower_sprite ;if bg mode go to bg draw routine


	;call write_a_to_ram
	ld b,a ;save
dfgs_cam_height_4 .equ $ + 1 
	ld a, 0 ;check if bottom frame is in VP at all
	sub 239
	jp nc,dfgs_lower_skip
	ld a,b
dfgs_viewport_bottom_y .equ $ + 1
	sub 0;subtract y val of viewport bottom

	jp c,dfgs_lower_skip;sprite below screen
	
	;push af 
	;ld a,$A0
	;call write_a_to_ram
	;pop af
	
	
	inc a
	;a holds number of lines to draw 
	cp (hl) ;compare to sprite height 
	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
	
	;draw full sprite 
dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
	ld de,0;load bottom of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_lower_full_fast
	call draw_slow_sprite_full
	jp dfgs_lower_skip_1
dfgs_lower_full_fast:
	call draw_fast_sprite_full
dfgs_lower_skip_1:
	pop hl ;hl holds (height)

	
dfgs_lower_skip:;sprite offscreen
	inc hl ;x 
	inc hl ;index 
	inc hl;to y 
	;call write_a_to_ram
	;ld a,$AD
	;call write_a_to_ram
	ret
	
dfgs_lower_bottom_cut: 
dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
	ld de,0;load bottom of vram 
	push hl ;save height ptr
	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
	
	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
	jp z,dfgs_lower_bcut_fast ;even= fast
	call draw_slow_sprite_bottom_cut
	jp dfgs_lower_skip_2
dfgs_lower_bcut_fast:
	call draw_fast_sprite_bottom_cut
dfgs_lower_skip_2:
	pop hl ;hl holds (height)
	jp dfgs_lower_skip
	

;===================================================================================================================
;SPRITE GROUPS =====================================================================================================

dfgs_sg_setup:
	inc hl ;hl points to xPos of sprite group 
	ld a,(hl)
	ld (dfgs_sg_x_origin),a 
	
	;call write_a_to_ram
	ld bc,0
	inc hl ; index 
	ld c,(hl) ;sprite group index 
		
	ld hl, Sprite_Groups_Table
	add hl,bc 
	add hl,bc 
	add hl,bc 
	;hl now points to correct sprite group ptr 
	ld hl, (hl)
	;hl pts to sprite table for this group 
	ld de,(hl)
	ld (dfgs_sprite_pointers_1), de ;NEed to undo after loop is done 

	inc hl
	inc hl 	
	inc hl ;to num sprites 

	ld a,(hl) ;num sprites in group
	inc hl;first sprite y 
	ret
	
	;Sprite group in upper frame. a holds y pos of sprite group. HL points to height (unused)
dfgs_sg_upper:	
	ld (dfgs_sg_upper_y_origin),a
	push hl ;save frame data location (height ptr)
	call dfgs_sg_setup ;returns with a = num sprites
 
	ld (dfgs_sg_upper_count),a 
	
dfgs_sg_upper_loop:
	;take y pos of group origin, subtract y offset of sprite 
	;if no carry, sprite is still in upper frame, a holds pos in upper frame 
	;if carry sprite is entirely in mid frame, a holds y pos in mid frame 
dfgs_sg_upper_y_origin .equ $ + 1 
	ld a, 0
	sub a,(hl)
	;call write_a_to_ram
	inc hl ;to height
	jp nc, dfgs_sg_upper_draw_upper
	
	call dfgs_draw_mid_sprite
	jp dfgs_sg_upper_continue
	;otherwise, sprite is entirely in mid frame, a holds y pos in mid frame
	
	
dfgs_sg_upper_draw_upper:
	call dfgs_draw_upper_sprite
dfgs_sg_upper_continue:
dfgs_sg_upper_count .equ $ + 1
	ld a, 0
	dec a 
	ld (dfgs_sg_upper_count),a 
	jp nz, dfgs_sg_upper_loop 
	;otherwise, end of sprite group 
	ld (dfgs_sg_x_origin),a  ;already 0 
	pop hl ;return to height ptr of data frame obj
	inc hl
	inc hl
	inc hl ;to y pos of next sprite
dfgs_sprite_pointers_2 .equ $ + 1
	ld de, 0
	ld (dfgs_sprite_pointers_1),de 

	jp dfgs_upper_loop
	


;SG MID =========================================================================================================
	;Sprite group in middle frame. a holds y pos of sprite group. HL points to height (unused)
dfgs_sg_mid:	
	push hl
	ld (dfgs_sg_mid_y_origin),a
	call dfgs_sg_setup 
	
	ld (dfgs_sg_mid_count),a
	
dfgs_sg_mid_loop:
	;take y pos of group origin, subtract y offset of sprite 
	;if no carry, sprite is still in mid frame, a holds pos in mid frame 
	;if carry sprite is entirely in lower frame, a holds y pos in lower frame 
dfgs_sg_mid_y_origin .equ $ + 1 
	ld a, 0
	sub a,(hl)
	inc hl ;to height
	jp nc, dfgs_sg_mid_draw_mid
	
	call dfgs_draw_lower_sprite
	jp dfgs_sg_mid_continue

		
dfgs_sg_mid_draw_mid:
	call dfgs_draw_mid_sprite
dfgs_sg_mid_continue:
dfgs_sg_mid_count .equ $ + 1
	ld a, 0
	dec a 
	ld (dfgs_sg_mid_count),a 
	jp nz, dfgs_sg_mid_loop 
	;otherwise, end of sprite group 
	ld (dfgs_sg_x_origin),a  ;already 0 
	pop hl ;return to height ptr of data frame obj
	inc hl
	inc hl
	inc hl ;to y pos of next sprite
dfgs_sprite_pointers_3 .equ $ + 1
	ld de, 0
	ld (dfgs_sprite_pointers_1),de 

	jp dfgs_mid_loop
	
	
;SG Lower =========================================================================================================
	;Sprite group in lower frame. a holds y pos of sprite group. HL points to height (unused)
dfgs_sg_lower:	
	ld (dfgs_sg_lower_y_origin),a
	push hl
	call dfgs_sg_setup 
	ld (dfgs_sg_lower_count),a
	;call write_a_to_ram
dfgs_sg_lower_loop:

	;call prgmpause

	;take y pos of group origin, subtract y offset of sprite 
	;if no carry, sprite is still in lower frame, a holds pos in lower frame 
	;if carry sprite is offscreen
dfgs_sg_lower_y_origin .equ $ + 1 
	ld a, 0
	sub a,(hl)
	;call write_a_to_ram
	inc hl ;to height
	jp nc, dfgs_sg_lower_draw_lower
	
	inc hl 
	inc hl
	inc hl 
	jp dfgs_sg_lower_continue
	;otherwise, sprite is entirely below lower frame, skip
	
	
dfgs_sg_lower_draw_lower:
	call dfgs_draw_lower_sprite
dfgs_sg_lower_continue:
dfgs_sg_lower_count .equ $ + 1
	ld a, 0
	;call write_a_to_ram
	dec a 
	ld (dfgs_sg_lower_count),a 
	jp nz, dfgs_sg_lower_loop 
	;otherwise, end of sprite group 
	ld (dfgs_sg_x_origin),a  ;already 0 
	pop hl ;return to height ptr of data frame obj
	inc hl
	inc hl
	inc hl ;to y pos of next sprite
dfgs_sprite_pointers_4 .equ $ + 1
	ld de, 0
	ld (dfgs_sprite_pointers_1),de 

	jp dfgs_lower_loop
	
	
	
	
;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
;(hl) = height 	
;de = initial vram, top for top cut, otherwise bottom

;Subtracts a lines from de (initial vram pos),
;returns hl = sprite data, de = new vram position
dfgs_setup_draw:
	inc hl ;x pos 
	ld bc,0
	ld c,(hl); x pos
	inc hl;to index
	push hl;save sprite index 
	ld h,160
	ld l,a ;number of lines to subtract 
	mlt hl;subtract from vram
	scf 
	ccf
	ex de,hl;hl holds initial vram pos, de is lines to subtract  
	sbc hl,de ;subtract to get sprite draw start line 
	add hl,bc;add x pos ;hl now holds sprite draw start pos 
dfgs_sg_x_origin .equ $ + 1 ;
	ld c, 0
	add hl,bc;add sprite group x pos offset (if applicable)
	ex de,hl;put in de
	pop hl;back to frame data 
	ld c,(hl);sprite index
dfgs_sprite_pointers_1 .equ $ + 1	
	ld hl,0 ;load sprite table 
	add hl,bc
	add hl,bc 
	add hl,bc;move to sprite ptr
	;call prgmpause
	ld hl,(hl);hl holds sprite data, if even = fast sprite 

	ret

	
dfgs_test:
	jp dfgs_test
	
	
	
	
	
	
	
	
	
	