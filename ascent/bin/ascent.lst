    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD B6 D1 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C -  -  -  -  	;call sdcomp_set_offset
   26 D1:A89C CD 30 B3 D1 	call sdcomp_set_flip
   27 D1:A8A0 CD 57 B3 D1 	call sdcomp_set_fast
   28 D1:A8A4 21 F6 B7 D1 	ld hl, Test_sprite_fast
   29 D1:A8A8 11 00 00 D4 	ld de,vRam 
   30 D1:A8AC -  -  -  -  	
   31 D1:A8AC CD 26 B0 D1 	call sprite_decompress
   32 D1:A8B0 -  -  -  -  	
   33 D1:A8B0 21 00 00 D4 	ld hl,vRam
   34 D1:A8B4 11 40 01 D4 	ld de, vram+(160* 2)	
   35 D1:A8B8 3E 01 -  -  	ld a,1
   36 D1:A8BA CD 0B AD D1 	call draw_fast_sprite_single_line
   37 D1:A8BE -  -  -  -  	
   38 D1:A8BE CD 49 AA D1 	call prgmpause
   39 D1:A8C2 -  -  -  -  
   40 D1:A8C2 -  -  -  -  ;	call decompress_calls
   41 D1:A8C2 -  -  -  -  	
   42 D1:A8C2 -  -  -  -  	;gen purp timers
   43 D1:A8C2 -  -  -  -  		; 76543210	
   44 D1:A8C2 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   45 D1:A8C4 32 30 00 F2 	ld ($F20030),a
   46 D1:A8C8 -  -  -  -  	;	  fedcba98
   47 D1:A8C8 3E 02 -  -  	ld a,%00000010;count up
   48 D1:A8CA 32 31 00 F2 	ld ($F20031),a
   49 D1:A8CE -  -  -  -  	
   50 D1:A8CE 21 00 2C D5 	ld hl,vRam + (160*240*2)
   51 D1:A8D2 22 5A AA D1 	ld (draw_buffer),hl
   52 D1:A8D6 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   53 D1:A8DA 22 10 00 E3 	ld (mpLcdBase),hl
   54 D1:A8DE -  -  -  -  	
   55 D1:A8DE 21 00 00 00 	ld hl,0
   56 D1:A8E2 22 54 AA D1 	ld (cam_pos),hl
   57 D1:A8E6 -  -  -  -  
   58 D1:A8E6 CD A5 AB D1 	call setup_bg
   59 D1:A8EA -  -  -  -  
   60 D1:A8EA -  -  -  -  	;call draw_bg
   61 D1:A8EA -  -  -  -  	
   62 D1:A8EA -  -  -  -  	
   63 D1:A8EA -  -  -  -  main_loop:
   64 D1:A8EA -  -  -  -  	;clear timer
   65 D1:A8EA 3E 00 -  -  	ld a,0
   66 D1:A8EC 32 00 00 F2 	ld ($F20000),a;32768hz
   67 D1:A8F0 32 01 00 F2 	ld ($F20001),a;128hz
   68 D1:A8F4 32 02 00 F2 	ld ($F20002),a;0.5hz
   69 D1:A8F8 32 03 00 F2 	ld ($F20003),a
   70 D1:A8FC -  -  -  -  	
   71 D1:A8FC -  -  -  -  	;Instructions here 
   72 D1:A8FC CD B5 AA D1 	call draw_bg
   73 D1:A900 -  -  -  -  	
   74 D1:A900 CD 66 B3 D1 	call draw_mg
   75 D1:A904 -  -  -  -  	
   76 D1:A904 CD B5 B3 D1 	call draw_fg
   77 D1:A908 -  -  -  -  	
   78 D1:A908 21 00 00 00 	ld hl,0
   79 D1:A90C -  -  -  -  	
   80 D1:A90C -  -  -  -  	; for debug longest frame draw time
   81 D1:A90C 3A 00 00 F2 	ld a,($F20000)
   82 D1:A910 6F -  -  -  	ld l,a
   83 D1:A911 3A 01 00 F2 	ld a,($F20001);128hz 
   84 D1:A915 67 -  -  -  	ld h,a
   85 D1:A916 E5 -  -  -  	push hl
   86 D1:A917 ED 4B 60 AA 
              D1 -  -  -  	ld bc,(longestFrame)
   87 D1:A91C ED 42 -  -  	sbc hl,bc 
   88 D1:A91E DA 30 A9 D1 	jp c,longest_frame_skip
   89 D1:A922 -  -  -  -  	
   90 D1:A922 E1 -  -  -  	pop hl 
   91 D1:A923 E5 -  -  -  	push hl 
   92 D1:A924 22 60 AA D1 	ld (longestFrame),hl 
   93 D1:A928 2A 54 AA D1 	ld hl,(cam_pos)
   94 D1:A92C 22 63 AA D1 	ld (longestFramePos),hl
   95 D1:A930 -  -  -  -  longest_frame_skip:
   96 D1:A930 E1 -  -  -  	pop hl 
   97 D1:A931 -  -  -  -  	
   98 D1:A931 -  -  -  -  		
   99 D1:A931 2A 69 AA D1 	ld hl,(frameCount)
  100 D1:A935 23 -  -  -  	inc hl
  101 D1:A936 22 69 AA D1 	ld (frameCount),hl
  102 D1:A93A -  -  -  -  	
  103 D1:A93A -  -  -  -  	;swap draw buffers
  104 D1:A93A 2A 10 00 E3 	ld hl,(mpLcdBase)
  105 D1:A93E ED 5B 5A AA 
              D1 -  -  -  	ld de,(draw_buffer)
  106 D1:A943 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  107 D1:A948 22 5A AA D1 	ld (draw_buffer),hl
  108 D1:A94C -  -  -  -  	
  109 D1:A94C -  -  -  -  	;check if lcd has drawn first frame
  110 D1:A94C -  -  -  -  clock_check_loop:
  111 D1:A94C -  -  -  -  
  112 D1:A94C -  -  -  -  
  113 D1:A94C -  -  -  -  	;Sprite decompression will occur here
  114 D1:A94C -  -  -  -  
  115 D1:A94C 3A 01 00 F2 	ld a,($F20001);128hz clock
  116 D1:A950 FE 03 -  -  	cp 3;check if reached 3 
  117 D1:A952 DA 4C A9 D1 	jp c,clock_check_loop
  118 D1:A956 -  -  -  -  	
  119 D1:A956 -  -  -  -  	;wait until finished drawing second frame
  120 D1:A956 -  -  -  -  
  121 D1:A956 -  -  -  -  clear_int:      
  122 D1:A956 21 28 00 E3     ld hl, mpLcdIcr
  123 D1:A95A CB D6 -  -      set 2, (hl)            ; clear interrupt
  124 D1:A95C 21 20 00 E3     ld hl, mpLcdRis
  125 D1:A960 -  -  -  -  wait_int:
  126 D1:A960 CB 56 -  -      bit 2, (hl)
  127 D1:A962 28 FC -  -      jr z, wait_int  
  128 D1:A964 -  -  -  -  
  129 D1:A964 -  -  -  -  
  130 D1:A964 21 00 00 00 	ld hl,0
  131 D1:A968 -  -  -  -  	
  132 D1:A968 3A 02 00 F2 	ld a,($F20002)
  133 D1:A96C 67 -  -  -  	ld h,a
  134 D1:A96D 3A 01 00 F2 	ld a,($F20001)
  135 D1:A971 6F -  -  -  	ld l,a
  136 D1:A972 ED 4B 66 AA 
              D1 -  -  -  	ld bc,(totalTime)
  137 D1:A977 09 -  -  -  	add hl,bc 
  138 D1:A978 22 66 AA D1 	ld (totalTime),hl 
  139 D1:A97C -  -  -  -  	
  140 D1:A97C -  -  -  -  	;Move cam
  141 D1:A97C 2A 54 AA D1 	ld hl,(cam_pos)
  142 D1:A980 23 -  -  -  	inc hl
  143 D1:A981 23 -  -  -  	inc hl
  144 D1:A982 23 -  -  -  	inc hl
  145 D1:A983 23 -  -  -  	inc hl
  146 D1:A984 23 -  -  -  	inc hl
  147 D1:A985 23 -  -  -  	inc hl
  148 D1:A986 23 -  -  -  	inc hl
  149 D1:A987 23 -  -  -  	inc hl
  150 D1:A988 22 54 AA D1 	ld (cam_pos),hl
  151 D1:A98C 01 EF 00 00 	ld bc,239
  152 D1:A990 09 -  -  -  	add hl,bc 
  153 D1:A991 7C -  -  -  	ld a,h ;msb 
  154 D1:A992 FE 23 -  -  	cp 35
  155 D1:A994 C2 EA A8 D1 	jp nz,main_loop
  156 D1:A998 -  -  -  -  		
  157 D1:A998 -  -  -  -  	;print debug times 
  158 D1:A998 21 00 00 D4 	ld hl,vRam
  159 D1:A99C 22 10 00 E3 	ld (mpLcdBase),hl
  160 D1:A9A0 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  161 D1:A9A4 3E 2D -  -  	ld	a,lcdBpp16
  162 D1:A9A6 32 18 00 E3 	ld (mpLcdCtrl),a
  163 D1:A9AA -  -  -  -  	
  164 D1:A9AA 3E 00 -  -  	ld a,0
  165 D1:A9AC 32 95 05 D0 	ld (curRow),a
  166 D1:A9B0 32 96 05 D0 	ld (curCol),a
  167 D1:A9B4 2A 60 AA D1 	ld hl,(longestFrame)
  168 D1:A9B8 CD E0 1E 02 	call _DispHL
  169 D1:A9BC 3E 01 -  -  	ld a,1
  170 D1:A9BE 32 95 05 D0 	ld (curRow),a
  171 D1:A9C2 3E 00 -  -  	ld a,0
  172 D1:A9C4 32 96 05 D0 	ld (curCol),a
  173 D1:A9C8 2A 63 AA D1 	ld hl,(longestFramePos)
  174 D1:A9CC CD E0 1E 02 	call _DispHL
  175 D1:A9D0 3E 02 -  -  	ld a,2
  176 D1:A9D2 32 95 05 D0 	ld (curRow),a
  177 D1:A9D6 3E 00 -  -  	ld a,0
  178 D1:A9D8 32 96 05 D0 	ld (curCol),a
  179 D1:A9DC 2A 66 AA D1 	ld hl,(totalTime)
  180 D1:A9E0 CD E0 1E 02 	call _DispHL
  181 D1:A9E4 3E 03 -  -  	ld a,3
  182 D1:A9E6 32 95 05 D0 	ld (curRow),a
  183 D1:A9EA 3E 00 -  -  	ld a,0
  184 D1:A9EC 32 96 05 D0 	ld (curCol),a
  185 D1:A9F0 2A 69 AA D1 	ld hl,(frameCount)
  186 D1:A9F4 CD E0 1E 02 	call _DispHL
  187 D1:A9F8 -  -  -  -  	
  188 D1:A9F8 CD 49 AA D1 	call prgmpause
  189 D1:A9FC CD 49 AA D1 	call prgmpause
  190 D1:AA00 -  -  -  -  	
  191 D1:AA00 -  -  -  -  	
  192 D1:AA00 -  -  -  -  exit_prgm:
  193 D1:AA00 21 00 00 D4 	ld hl,vRam
  194 D1:AA04 22 10 00 E3 	ld (mpLcdBase),hl
  195 D1:AA08 CD 10 08 02 	call _ClrScrnFull
  196 D1:AA0C 3E 2D -  -  	ld	a,lcdBpp16
  197 D1:AA0E 32 18 00 E3 	ld	(mpLcdCtrl),a
  198 D1:AA12 CD 3C 1A 02 	call _DrawStatusBar
  199 D1:AA16 -  -  -  -  	
  200 D1:AA16 FB -  -  -  	ei				; reset screen back to normal
  201 D1:AA17 C9 -  -  -  	ret			; return to os
  202 D1:AA18 -  -  -  -  
  203 D1:AA18 -  -  -  -  
  204 D1:AA18 -  -  -  -  printHL:;=================REMOVE
  205 D1:AA18 E5 -  -  -  	push hl
  206 D1:AA19 21 00 00 D4 	ld hl,vRam
  207 D1:AA1D 22 10 00 E3 	ld (mpLcdBase),hl
  208 D1:AA21 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  209 D1:AA25 3E 2D -  -  	ld	a,lcdBpp16
  210 D1:AA27 32 18 00 E3 	ld (mpLcdCtrl),a
  211 D1:AA2B E1 -  -  -  	pop hl
  212 D1:AA2C CD E0 1E 02 	call _DispHL
  213 D1:AA30 FB -  -  -  	ei
  214 D1:AA31 CD 8C 0D 02 	call _GetKey
  215 D1:AA35 F3 -  -  -  	di
  216 D1:AA36 C3 00 AA D1 	jp exit_prgm
  217 D1:AA3A -  -  -  -  
  218 D1:AA3A -  -  -  -  
  219 D1:AA3A -  -  -  -  write_a_to_ram:
  220 D1:AA3A F5 -  -  -  	push af 
  221 D1:AA3B E5 -  -  -  	push hl 
  222 D1:AA3C -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  223 D1:AA3C 21 00 10 D4 	ld hl, $d41000
  224 D1:AA40 77 -  -  -  	ld (hl),a 
  225 D1:AA41 23 -  -  -  	inc hl 
  226 D1:AA42 22 3D AA D1 	ld (write_a_to_ram_addr),hl 
  227 D1:AA46 E1 -  -  -  	pop hl 
  228 D1:AA47 F1 -  -  -  	pop af 
  229 D1:AA48 C9 -  -  -  	ret 
  230 D1:AA49 -  -  -  -  
  231 D1:AA49 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  232 D1:AA49 D5 -  -  -  	push de 
  233 D1:AA4A E5 -  -  -  	push hl 
  234 D1:AA4B FB -  -  -  	ei
  235 D1:AA4C CD 8C 0D 02 	call _GetKey
  236 D1:AA50 F3 -  -  -  	di
  237 D1:AA51 E1 -  -  -  	pop hl 
  238 D1:AA52 D1 -  -  -  	pop de 
  239 D1:AA53 C9 -  -  -  	ret
  240 D1:AA54 -  -  -  -  
  241 D1:AA54 -  -  -  -  cam_pos:;bottom of cam
  242 D1:AA54 00 00 00 -  	.dl 0
  243 D1:AA57 -  -  -  -  bg_cam_pos:
  244 D1:AA57 00 00 00 -  	.dl 0
  245 D1:AA5A -  -  -  -  
  246 D1:AA5A -  -  -  -  
  247 D1:AA5A -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  248 D1:AA5A 00 00 00 -  	.dl 0
  249 D1:AA5D -  -  -  -  	
  250 D1:AA5D -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  251 D1:AA5D 00 00 00 -  	.dl 0
  252 D1:AA60 -  -  -  -  BG_buffer .equ vram + (160*240)
  253 D1:AA60 -  -  -  -  
  254 D1:AA60 -  -  -  -  
  255 D1:AA60 -  -  -  -  longestFrame:
  256 D1:AA60 00 00 00 -  	.dl 0
  257 D1:AA63 -  -  -  -  longestFramePos:
  258 D1:AA63 00 00 00 -  	.dl 0
  259 D1:AA66 -  -  -  -  totalTime:
  260 D1:AA66 00 00 00 -  	.dl 0
  261 D1:AA69 -  -  -  -  frameCount:
  262 D1:AA69 00 00 00 -  	.dl 0
  263 D1:AA6C -  -  -  -  hasLagged:
  264 D1:AA6C 00 00 00 -  	.dl 0
  265 D1:AA6F -  -  -  -  
  266 D1:AA6F -  -  -  -  
  267 D1:AA6F -  -  -  -  
  268 D1:AA6F -  -  -  -  
  269 D1:AA6F -  -  -  -  
  270 D1:AA6F -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA6F -  -  -  -  
    2 D1:AA6F -  -  -  -  
    3 D1:AA6F -  -  -  -  
    4 D1:AA6F -  -  -  -  time_test_start:
    5 D1:AA6F -  -  -  -  
    6 D1:AA6F -  -  -  -  		; 76543210	
    7 D1:AA6F 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AA71 32 30 00 F2 	ld ($F20030),a
    9 D1:AA75 -  -  -  -  	;	  fedcba98
   10 D1:AA75 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AA77 32 31 00 F2 	ld ($F20031),a
   12 D1:AA7B 3E 00 -  -  	ld a,0
   13 D1:AA7D 32 00 00 F2 	ld ($F20000),a
   14 D1:AA81 32 01 00 F2 	ld ($F20001),a
   15 D1:AA85 32 02 00 F2 	ld ($F20002),a
   16 D1:AA89 32 03 00 F2 	ld ($F20003),a
   17 D1:AA8D -  -  -  -  	
   18 D1:AA8D 21 2C 01 00 	ld hl,300
   19 D1:AA91 -  -  -  -  	
   20 D1:AA91 -  -  -  -  time_testing_loop:
   21 D1:AA91 E5 -  -  -  	push hl
   22 D1:AA92 01 E8 03 00 	ld bc,1000
   23 D1:AA96 -  -  -  -  time_testing_loop_2:
   24 D1:AA96 C5 -  -  -  	push bc
   25 D1:AA97 -  -  -  -  	;instruction here
   26 D1:AA97 -  -  -  -  	
   27 D1:AA97 -  -  -  -  	
   28 D1:AA97 -  -  -  -  	;Instruction end
   29 D1:AA97 C1 -  -  -  	pop bc
   30 D1:AA98 0B -  -  -  	dec bc
   31 D1:AA99 79 -  -  -  	ld a,c
   32 D1:AA9A B0 -  -  -  	or b
   33 D1:AA9B C2 96 AA D1 	jp nz,time_testing_loop_2
   34 D1:AA9F E1 -  -  -  	pop hl
   35 D1:AAA0 2B -  -  -  	dec hl
   36 D1:AAA1 7D -  -  -  	ld a,l
   37 D1:AAA2 B4 -  -  -  	or h
   38 D1:AAA3 C2 91 AA D1 	jp nz,time_testing_loop
   39 D1:AAA7 -  -  -  -  	
   40 D1:AAA7 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AAAB 6F -  -  -  	ld l,a
   42 D1:AAAC 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AAB0 67 -  -  -  	ld h,a
   44 D1:AAB1 C3 18 AA D1 	jp printHL;div by 128 for time
   45 D1:AAB5 -  -  -  -  	
   46 D1:AAB5 -  -  -  -  
   47 D1:AAB5 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AAB5 -  -  -  -  
   49 D1:AAB5 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AAB5 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AAB5 -  -  -  -  
   52 D1:AAB5 -  -  -  -  
   53 D1:AAB5 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AAB5 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AAB5 -  -  -  -  
   56 D1:AAB5 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AAB5 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AAB5 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AAB5 -  -  -  -  ;.24 screens/frame
   60 D1:AAB5 -  -  -  -  
   61 D1:AAB5 -  -  -  -  
   62 D1:AAB5 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AAB5 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AAB5 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AAB5 -  -  -  -  ;.446 screens/frame
   66 D1:AAB5 -  -  -  -  
   67 D1:AAB5 -  -  -  -  
   68 D1:AAB5 -  -  -  -  
   69 D1:AAB5 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AAB5 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AAB5 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AAB5 -  -  -  -  ;.78 screens/frame
   73 D1:AAB5 -  -  -  -  
   74 D1:AAB5 -  -  -  -  
   75 D1:AAB5 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AAB5 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AAB5 -  -  -  -  ;.47 = FAST
   78 D1:AAB5 -  -  -  -  
   79 D1:AAB5 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AAB5 -  -  -  -  
   81 D1:AAB5 -  -  -  -  
   82 D1:AAB5 -  -  -  -  
   83 D1:AAB5 -  -  -  -  
   84 D1:AAB5 -  -  -  -  
   85 D1:AAB5 -  -  -  -  
   86 D1:AAB5 -  -  -  -  
   87 D1:AAB5 -  -  -  -  
   88 D1:AAB5 -  -  -  -  
Listing for file "ascent.asm"
  271 D1:AAB5 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AAB5 -  -  -  -  
    2 D1:AAB5 -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    3 D1:AAB5 CD E9 AA D1 	call move_bg
    4 D1:AAB9 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    5 D1:AABD ED 4B 5D AA 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
    6 D1:AAC2 37 -  -  -  	scf 
    7 D1:AAC3 3F -  -  -  	ccf 
    8 D1:AAC4 ED 42 -  -  	sbc hl,bc
    9 D1:AAC6 E5 -  -  -  	push hl 
   10 D1:AAC7 C1 -  -  -  	pop bc
   11 D1:AAC8 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   12 D1:AACC ED 5B 5A AA 
              D1 -  -  -  	ld de,(draw_buffer)
   13 D1:AAD1 ED B0 -  -  	ldir
   14 D1:AAD3 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   15 D1:AAD7 01 00 96 D4 	ld bc,BG_buffer
   16 D1:AADB 37 -  -  -  	scf 
   17 D1:AADC 3F -  -  -  	ccf 
   18 D1:AADD ED 42 -  -  	sbc hl,bc
   19 D1:AADF C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   20 D1:AAE0 E5 -  -  -  	push hl 
   21 D1:AAE1 C1 -  -  -  	pop bc
   22 D1:AAE2 21 00 96 D4 	ld hl,BG_buffer 
   23 D1:AAE6 ED B0 -  -  	ldir 
   24 D1:AAE8 C9 -  -  -  	ret 
   25 D1:AAE9 -  -  -  -  	
   26 D1:AAE9 -  -  -  -  	
   27 D1:AAE9 -  -  -  -  ;function for "moving' the backgrond buffer. checks if camera has moved since the buffer was last updated.
   28 D1:AAE9 -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   29 D1:AAE9 -  -  -  -  move_bg:
   30 D1:AAE9 2A 54 AA D1 	ld hl,(cam_pos);load cam pos 
   31 D1:AAED CB 3C -  -  	srl h
   32 D1:AAEF CB 1D -  -  	rr l
   33 D1:AAF1 CB 3C -  -  	srl h
   34 D1:AAF3 CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   35 D1:AAF5 -  -  -  -  	;hl holds bg cam pos 
   36 D1:AAF5 01 EF 00 00 	ld bc,239 ;get y value of topmost line of BG 
   37 D1:AAF9 09 -  -  -  	add hl,bc ;hl holds updated bg camera pos 
   38 D1:AAFA ED 4B 57 AA 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   39 D1:AAFF ED 42 -  -  	sbc hl,bc ;compare to the updated location
   40 D1:AB01 C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   41 D1:AB02 DA 0E AB D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   42 D1:AB06 CD 5F AB D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   43 D1:AB0A C3 E9 AA D1 	jp move_bg ;repeat until bg is in correct pos
   44 D1:AB0E -  -  -  -  move_bg_down:
   45 D1:AB0E CD 16 AB D1 	call dec_bg
   46 D1:AB12 C3 E9 AA D1 	jp move_bg ;repeat until bg is in correct pos
   47 D1:AB16 -  -  -  -  
   48 D1:AB16 -  -  -  -  
   49 D1:AB16 -  -  -  -  dec_bg:;move bg cam down 1px 
   50 D1:AB16 -  -  -  -  	;write on draw buffer line 
   51 D1:AB16 2A 5D AA D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   52 D1:AB1A 22 93 AC D1 	ld (dbgl_vram_line_start),hl 
   53 D1:AB1E -  -  -  -  	
   54 D1:AB1E 2A 57 AA D1 	ld hl,(bg_cam_pos)
   55 D1:AB22 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   56 D1:AB23 22 57 AA D1 	ld (bg_cam_pos),hl 
   57 D1:AB27 01 EF 00 00 	ld bc,239 ;subtract 239 from cam pos to get y value of bottom of bg
   58 D1:AB2B ED 42 -  -  	sbc hl,bc;bottom row of bg 
   59 D1:AB2D 4C -  -  -  	ld c,h;bottom y value msb 
   60 D1:AB2E 7D -  -  -  	ld a,l ;bottom y value lsb 
   61 D1:AB2F 21 73 CE D1 	ld hl,BG_Data_frame_table
   62 D1:AB33 0C -  -  -  	inc c 
   63 D1:AB34 09 -  -  -  	add hl,bc 
   64 D1:AB35 09 -  -  -  	add hl,bc 
   65 D1:AB36 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   66 D1:AB37 ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   67 D1:AB39 CD F2 AB D1 	call draw_bg_line
   68 D1:AB3D -  -  -  -  	;move buffer pos
   69 D1:AB3D 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   70 D1:AB41 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end
   71 D1:AB45 37 -  -  -  	scf 
   72 D1:AB46 3F -  -  -  	ccf 
   73 D1:AB47 ED 42 -  -  	sbc hl,bc
   74 D1:AB49 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   75 D1:AB4D C2 55 AB D1 	jp nz,dec_bg_bottom_skip
   76 D1:AB51 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   77 D1:AB55 -  -  -  -  dec_bg_bottom_skip:
   78 D1:AB55 01 A0 00 00 	ld bc,160 
   79 D1:AB59 09 -  -  -  	add hl,bc
   80 D1:AB5A 22 5D AA D1 	ld (BG_draw_buffer),hl 
   81 D1:AB5E C9 -  -  -  	ret
   82 D1:AB5F -  -  -  -  
   83 D1:AB5F -  -  -  -  
   84 D1:AB5F -  -  -  -  inc_bg:;move cam up 
   85 D1:AB5F 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   86 D1:AB63 01 00 96 D4 	ld bc,$d49600;BG_buffer_start
   87 D1:AB67 37 -  -  -  	scf 
   88 D1:AB68 3F -  -  -  	ccf 
   89 D1:AB69 ED 42 -  -  	sbc hl,bc
   90 D1:AB6B 2A 5D AA D1 	ld hl,(BG_draw_buffer)
   91 D1:AB6F C2 77 AB D1 	jp nz,inc_bg_top_skip
   92 D1:AB73 21 00 2C D5 	ld hl,$d52c00;1 below bottom of bg buffer 
   93 D1:AB77 -  -  -  -  inc_bg_top_skip:
   94 D1:AB77 01 A0 00 00 	ld bc,160 
   95 D1:AB7B 37 -  -  -  	scf
   96 D1:AB7C 3F -  -  -  	ccf 
   97 D1:AB7D ED 42 -  -  	sbc hl,bc ;move up line 
   98 D1:AB7F 22 5D AA D1 	ld (BG_draw_buffer),hl 
   99 D1:AB83 22 93 AC D1 	ld (dbgl_vram_line_start),hl 
  100 D1:AB87 2A 57 AA D1 	ld hl,(bg_cam_pos)
  101 D1:AB8B 23 -  -  -  	inc hl 
  102 D1:AB8C 22 57 AA D1 	ld (bg_cam_pos),hl 
  103 D1:AB90 01 00 00 00 	ld bc,0
  104 D1:AB94 4C -  -  -  	ld c,h;cam pos msb 
  105 D1:AB95 7D -  -  -  	ld a,l 
  106 D1:AB96 21 73 CE D1 	ld hl,BG_Data_frame_table
  107 D1:AB9A 0C -  -  -  	inc c 
  108 D1:AB9B 09 -  -  -  	add hl,bc 
  109 D1:AB9C 09 -  -  -  	add hl,bc 
  110 D1:AB9D 09 -  -  -  	add hl,bc 
  111 D1:AB9E ED 27 -  -  	ld hl,(hl)
  112 D1:ABA0 CD F2 AB D1 	call draw_bg_line
  113 D1:ABA4 C9 -  -  -  	ret
  114 D1:ABA5 -  -  -  -  	
  115 D1:ABA5 -  -  -  -  
  116 D1:ABA5 -  -  -  -  
  117 D1:ABA5 -  -  -  -  
  118 D1:ABA5 -  -  -  -  
  119 D1:ABA5 -  -  -  -  setup_bg:
  120 D1:ABA5 2A 54 AA D1 	ld hl,(cam_pos)
  121 D1:ABA9 CB 3C -  -  	srl h
  122 D1:ABAB CB 1D -  -  	rr l
  123 D1:ABAD CB 3C -  -  	srl h
  124 D1:ABAF CB 1D -  -  	rr l ;div by 4
  125 D1:ABB1 -  -  -  -  	;hl holds bg cam pos 
  126 D1:ABB1 01 EF 00 00 	ld bc,239
  127 D1:ABB5 09 -  -  -  	add hl,bc;add 0 pos  
  128 D1:ABB6 22 57 AA D1 	ld (bg_cam_pos),hl
  129 D1:ABBA 23 -  -  -  	inc hl;to be dec in loop
  130 D1:ABBB E5 -  -  -  	push hl 
  131 D1:ABBC 21 00 96 D4 	ld hl,BG_buffer 
  132 D1:ABC0 22 5D AA D1 	ld (BG_draw_buffer),hl
  133 D1:ABC4 E5 -  -  -  	push hl 
  134 D1:ABC5 D9 -  -  -  	exx
  135 D1:ABC6 06 F0 -  -  	ld b,240
  136 D1:ABC8 -  -  -  -  	
  137 D1:ABC8 -  -  -  -  setup_bg_loop:
  138 D1:ABC8 D9 -  -  -  	exx
  139 D1:ABC9 E1 -  -  -  	pop hl;vram draw pos 
  140 D1:ABCA 22 93 AC D1 	ld (dbgl_vram_line_start),hl 
  141 D1:ABCE 01 A0 00 00 	ld bc,160
  142 D1:ABD2 09 -  -  -  	add hl,bc 
  143 D1:ABD3 EB -  -  -  	ex de,hl ;put vram pos in de 
  144 D1:ABD4 E1 -  -  -  	pop hl;cam pos
  145 D1:ABD5 2B -  -  -  	dec hl 
  146 D1:ABD6 E5 -  -  -  	push hl;push cam pos 
  147 D1:ABD7 D5 -  -  -  	push de ;push vram pos 
  148 D1:ABD8 01 00 00 00 	ld bc,0
  149 D1:ABDC 4C -  -  -  	ld c,h;cam pos msb 
  150 D1:ABDD 7D -  -  -  	ld a,l 
  151 D1:ABDE 21 73 CE D1 	ld hl,BG_Data_frame_table
  152 D1:ABE2 0C -  -  -  	inc c 
  153 D1:ABE3 09 -  -  -  	add hl,bc 
  154 D1:ABE4 09 -  -  -  	add hl,bc 
  155 D1:ABE5 09 -  -  -  	add hl,bc 
  156 D1:ABE6 ED 27 -  -  	ld hl,(hl)
  157 D1:ABE8 CD F2 AB D1 	call draw_bg_line
  158 D1:ABEC D9 -  -  -  	exx 
  159 D1:ABED 10 D9 -  -  	djnz setup_bg_loop
  160 D1:ABEF E1 -  -  -  	pop hl 
  161 D1:ABF0 E1 -  -  -  	pop hl 
  162 D1:ABF1 C9 -  -  -  	ret 
  163 D1:ABF2 -  -  -  -  
  164 D1:ABF2 -  -  -  -  
  165 D1:ABF2 -  -  -  -  
  166 D1:ABF2 -  -  -  -  
  167 D1:ABF2 -  -  -  -  
  168 D1:ABF2 -  -  -  -  
  169 D1:ABF2 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  170 D1:ABF2 -  -  -  -  ;set dbgl_vram_line_start 
  171 D1:ABF2 -  -  -  -  draw_bg_line:
  172 D1:ABF2 E5 -  -  -  	push hl 
  173 D1:ABF3 F5 -  -  -  	push af 
  174 D1:ABF4 3E FF -  -  	ld a,$ff
  175 D1:ABF6 01 A0 00 00 	ld bc,160
  176 D1:ABFA 2A 93 AC D1 	ld hl,(dbgl_vram_line_start)
  177 D1:ABFE CD E0 10 02 	call _MemSet 
  178 D1:AC02 F1 -  -  -  	pop af 
  179 D1:AC03 E1 -  -  -  	pop hl
  180 D1:AC04 -  -  -  -  
  181 D1:AC04 32 2A AC D1 	ld (dbgl_line_num),a
  182 D1:AC08 32 67 AC D1 	ld (dbgl_line_num_2),a
  183 D1:AC0C ED 17 -  -  	ld de,(hl)
  184 D1:AC0E ED 53 99 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
  185 D1:AC13 23 -  -  -  	inc hl
  186 D1:AC14 23 -  -  -  	inc hl
  187 D1:AC15 23 -  -  -  	inc hl ;to frame data start 
  188 D1:AC16 08 -  -  -  	ex af,af' ;'
  189 D1:AC17 7E -  -  -  	ld a,(hl);number of elements
  190 D1:AC18 08 -  -  -  	ex af,af' ;'
  191 D1:AC19 23 -  -  -  	inc hl 
  192 D1:AC1A -  -  -  -  	
  193 D1:AC1A 11 00 00 00 	ld de,0
  194 D1:AC1E 01 00 00 00 	ld bc,0
  195 D1:AC22 -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
  196 D1:AC22 -  -  -  -  dbgl_upper_loop:
  197 D1:AC22 7E -  -  -  	ld a,(hl);y
  198 D1:AC23 23 -  -  -  	inc hl;to height
  199 D1:AC24 96 -  -  -  	sub (hl);subtract height
  200 D1:AC25 -  -  -  -  	;a is y value of bottom row of sprite
  201 D1:AC25 D2 33 AC D1 	jp nc,dbgl_upper_skip;if no carry into next frame
  202 D1:AC29 -  -  -  -  	;sprite extends into target frame
  203 D1:AC29 -  -  -  -  dbgl_line_num .equ $ + 1
  204 D1:AC29 D6 00 -  -  	sub 0 ;compare to line number in target frame
  205 D1:AC2B DA 41 AC D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
  206 D1:AC2F CA 41 AC D1 	jp z,dbgl_upper_cont;if = bottom row
  207 D1:AC33 -  -  -  -  dbgl_upper_skip:
  208 D1:AC33 23 -  -  -  	inc hl;to x
  209 D1:AC34 23 -  -  -  	inc hl;to index 
  210 D1:AC35 23 -  -  -  	inc hl;to y
  211 D1:AC36 08 -  -  -  	ex af,af';'
  212 D1:AC37 3D -  -  -  	dec a 
  213 D1:AC38 CA 52 AC D1 	jp z,dbgl_lower_start 
  214 D1:AC3C 08 -  -  -  	ex af,af';'
  215 D1:AC3D C3 22 AC D1 	jp dbgl_upper_loop
  216 D1:AC41 -  -  -  -  	
  217 D1:AC41 -  -  -  -  dbgl_upper_cont:
  218 D1:AC41 -  -  -  -  	;a = bottom row - linenum
  219 D1:AC41 86 -  -  -  	add a,(hl);add height-1 
  220 D1:AC42 -  -  -  -  	;a holds 0 indexed line num within sprite
  221 D1:AC42 CD 8D AC D1 	call dbgl_setup_and_draw
  222 D1:AC46 23 -  -  -  	inc hl;to y
  223 D1:AC47 08 -  -  -  	ex af,af';'
  224 D1:AC48 3D -  -  -  	dec a 
  225 D1:AC49 CA 52 AC D1 	jp z,dbgl_lower_start 
  226 D1:AC4D 08 -  -  -  	ex af,af';'
  227 D1:AC4E C3 22 AC D1 	jp dbgl_upper_loop
  228 D1:AC52 -  -  -  -  	
  229 D1:AC52 -  -  -  -  dbgl_lower_start:
  230 D1:AC52 -  -  -  -  ;LOWER FRAME START 
  231 D1:AC52 -  -  -  -  	;hl pointing to sprite data table 
  232 D1:AC52 ED 17 -  -  	ld de,(hl)
  233 D1:AC54 ED 53 99 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
  234 D1:AC59 11 00 00 00 	ld de,0
  235 D1:AC5D 23 -  -  -  	inc hl
  236 D1:AC5E 23 -  -  -  	inc hl
  237 D1:AC5F 23 -  -  -  	inc hl;to num elements
  238 D1:AC60 -  -  -  -  	
  239 D1:AC60 08 -  -  -  	ex af,af' ;'
  240 D1:AC61 7E -  -  -  	ld a,(hl);number of elements
  241 D1:AC62 08 -  -  -  	ex af,af' ;'
  242 D1:AC63 23 -  -  -  	inc hl ;to y
  243 D1:AC64 -  -  -  -  	
  244 D1:AC64 -  -  -  -  dbgl_lower_loop:
  245 D1:AC64 7E -  -  -  	ld a,(hl)
  246 D1:AC65 23 -  -  -  	inc hl;to height-1
  247 D1:AC66 -  -  -  -  dbgl_line_num_2 .equ $ + 1
  248 D1:AC66 D6 00 -  -  	sub 0;subtract line num 
  249 D1:AC68 DA 75 AC D1 	jp c,dbgl_lower_skip;target line num is above sprite 
  250 D1:AC6C -  -  -  -  	;target is below or = sprite y value 
  251 D1:AC6C -  -  -  -  	;a holds 0 indexed sprite row 
  252 D1:AC6C BE -  -  -  	cp (hl);compare to height
  253 D1:AC6D DA 80 AC D1 	jp c,dbgl_lower_cont ;if height >= a 
  254 D1:AC71 CA 80 AC D1 	jp z,dbgl_lower_cont
  255 D1:AC75 -  -  -  -  dbgl_lower_skip:
  256 D1:AC75 23 -  -  -  	inc hl;to x  
  257 D1:AC76 23 -  -  -  	inc hl; to index
  258 D1:AC77 23 -  -  -  	inc hl;to y
  259 D1:AC78 08 -  -  -  	ex af,af';'
  260 D1:AC79 3D -  -  -  	dec a 
  261 D1:AC7A C8 -  -  -  	ret z 
  262 D1:AC7B 08 -  -  -  	ex af,af';'
  263 D1:AC7C C3 64 AC D1 	jp dbgl_lower_loop
  264 D1:AC80 -  -  -  -  dbgl_lower_cont:
  265 D1:AC80 -  -  -  -  
  266 D1:AC80 CD 8D AC D1 	call dbgl_setup_and_draw
  267 D1:AC84 23 -  -  -  	inc hl;to y
  268 D1:AC85 08 -  -  -  	ex af,af';'
  269 D1:AC86 3D -  -  -  	dec a 
  270 D1:AC87 C8 -  -  -  	ret z 
  271 D1:AC88 08 -  -  -  	ex af,af';'
  272 D1:AC89 C3 64 AC D1 	jp dbgl_lower_loop
  273 D1:AC8D -  -  -  -  
  274 D1:AC8D -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
  275 D1:AC8D -  -  -  -  dbgl_setup_and_draw:
  276 D1:AC8D 23 -  -  -  	inc hl;to x pos
  277 D1:AC8E 5E -  -  -  	ld e,(hl)
  278 D1:AC8F 23 -  -  -  	inc hl 
  279 D1:AC90 4E -  -  -  	ld c,(hl);sprite index 
  280 D1:AC91 E5 -  -  -  	push hl
  281 D1:AC92 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  282 D1:AC92 21 00 00 00 	ld hl,0
  283 D1:AC96 19 -  -  -  	add hl,de;add x pos 
  284 D1:AC97 EB -  -  -  	ex de,hl;put vram pos into de 
  285 D1:AC98 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  286 D1:AC98 21 00 00 00 	ld hl,0
  287 D1:AC9C 09 -  -  -  	add hl,bc
  288 D1:AC9D 09 -  -  -  	add hl,bc 
  289 D1:AC9E 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  290 D1:AC9F ED 27 -  -  	ld hl,(hl);hl holds sprite data
  291 D1:ACA1 -  -  -  -  
  292 D1:ACA1 CD AF AC D1 	call draw_bg_sprite_line;draw sprite line 
  293 D1:ACA5 11 00 00 00 	ld de,0;clear de 
  294 D1:ACA9 01 00 00 00 	ld bc,0
  295 D1:ACAD E1 -  -  -  	pop hl;back to data
  296 D1:ACAE C9 -  -  -  	ret
  297 D1:ACAF -  -  -  -  	
  298 D1:ACAF -  -  -  -  
  299 D1:ACAF -  -  -  -  
  300 D1:ACAF -  -  -  -  
  301 D1:ACAF -  -  -  -  
  302 D1:ACAF -  -  -  -  
  303 D1:ACAF -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  304 D1:ACAF -  -  -  -  draw_bg_sprite_line:
  305 D1:ACAF E5 -  -  -  	push hl;save 
  306 D1:ACB0 6E -  -  -  	ld l,(hl);sprite width in px
  307 D1:ACB1 67 -  -  -  	ld h,a ;lines to skip
  308 D1:ACB2 7D -  -  -  	ld a,l;width 
  309 D1:ACB3 ED 6C -  -  	mlt hl;widt*lines skipped 
  310 D1:ACB5 C1 -  -  -  	pop bc 
  311 D1:ACB6 09 -  -  -  	add hl,bc;skip to target line data 
  312 D1:ACB7 23 -  -  -  	inc hl 
  313 D1:ACB8 -  -  -  -  	;hl is pointing to start of line data 
  314 D1:ACB8 CB 2F -  -  	sra a;divide width by 2 
  315 D1:ACBA 47 -  -  -  	ld b,a;b holds number of loops 
  316 D1:ACBB -  -  -  -  dbgsl_loop:
  317 D1:ACBB 1A -  -  -  	ld a,(de); load vram data 
  318 D1:ACBC A6 -  -  -  	and (hl);and with mask 
  319 D1:ACBD 23 -  -  -  	inc hl ;to color data 
  320 D1:ACBE B6 -  -  -  	or (hl);or w color data 
  321 D1:ACBF 12 -  -  -  	ld (de),a;write to vram  
  322 D1:ACC0 13 -  -  -  	inc de
  323 D1:ACC1 23 -  -  -  	inc hl;to mask data
  324 D1:ACC2 10 F7 -  -  	djnz dbgsl_loop
  325 D1:ACC4 C9 -  -  -  	ret 
  326 D1:ACC5 -  -  -  -  	
  327 D1:ACC5 -  -  -  -  
  328 D1:ACC5 -  -  -  -  
  329 D1:ACC5 -  -  -  -  
  330 D1:ACC5 -  -  -  -  
  331 D1:ACC5 -  -  -  -  
  332 D1:ACC5 -  -  -  -  
  333 D1:ACC5 -  -  -  -  
  334 D1:ACC5 -  -  -  -  
  335 D1:ACC5 -  -  -  -  
  336 D1:ACC5 -  -  -  -  
  337 D1:ACC5 -  -  -  -  
  338 D1:ACC5 -  -  -  -  
Listing for file "ascent.asm"
  272 D1:ACC5 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ACC5 -  -  -  -  
    2 D1:ACC5 -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:ACC5 -  -  -  -  setup_sprite_bottom_cut:
    4 D1:ACC5 1B -  -  -  	dec de
    5 D1:ACC6 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:ACCA 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:ACCB E5 -  -  -  	push hl ;save data 
    8 D1:ACCC 09 -  -  -  	add hl,bc
    9 D1:ACCD 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:ACCE E1 -  -  -  	pop hl ;return to start of data
   11 D1:ACCF 4E -  -  -  	ld c,(hl) ;height
   12 D1:ACD0 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:ACD1 C9 -  -  -  	ret 
   14 D1:ACD2 -  -  -  -  
   15 D1:ACD2 -  -  -  -  setup_sprite_top_cut:
   16 D1:ACD2 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:ACD3 01 00 00 00 	ld bc,0
   18 D1:ACD7 4F -  -  -  	ld c,a
   19 D1:ACD8 D5 -  -  -  	push de
   20 D1:ACD9 11 00 00 00 	ld de,0
   21 D1:ACDD E5 -  -  -  	push hl
   22 D1:ACDE 5E -  -  -  	ld e,(hl);height
   23 D1:ACDF 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:ACE0 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:ACE1 E1 -  -  -  	pop hl;start of data
   26 D1:ACE2 19 -  -  -  	add hl,de
   27 D1:ACE3 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:ACE4 23 -  -  -  	inc hl;hl is pixel data
   29 D1:ACE5 D1 -  -  -  	pop de;back to vram
   30 D1:ACE6 79 -  -  -  	ld a,c;loops to skip
   31 D1:ACE7 C9 -  -  -  	ret 
   32 D1:ACE8 -  -  -  -  
   33 D1:ACE8 -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:ACE8 -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:ACE8 1B -  -  -  	dec de
   36 D1:ACE9 01 00 00 00 	ld bc,0
   37 D1:ACED 4F -  -  -  	ld c,a ;line to draw
   38 D1:ACEE D5 -  -  -  	push de ;save vram 
   39 D1:ACEF 11 00 00 00 	ld de,0
   40 D1:ACF3 E5 -  -  -  	push hl
   41 D1:ACF4 5E -  -  -  	ld e,(hl);height
   42 D1:ACF5 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:ACF6 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:ACF7 23 -  -  -  	inc hl 
   45 D1:ACF8 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:ACF9 E1 -  -  -  	pop hl;start of data
   47 D1:ACFA 19 -  -  -  	add hl,de
   48 D1:ACFB 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:ACFC D1 -  -  -  	pop de;back to vram
   50 D1:ACFD 79 -  -  -  	ld a,c;loops to skip
   51 D1:ACFE C9 -  -  -  	ret 
   52 D1:ACFF -  -  -  -  
   53 D1:ACFF -  -  -  -  
   54 D1:ACFF -  -  -  -  
   55 D1:ACFF -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:ACFF 3C -  -  -  	inc a 
   57 D1:AD00 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:AD00 -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:AD00 CD C5 AC D1 	call setup_sprite_bottom_cut
   60 D1:AD04 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:AD05 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:AD06 EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:AD07 C3 4E AD D1 	jp dfgs_loop
   64 D1:AD0B -  -  -  -  
   65 D1:AD0B -  -  -  -  
   66 D1:AD0B -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:AD0B -  -  -  -  draw_fast_sprite_single_line:
   68 D1:AD0B B7 -  -  -  	or a 
   69 D1:AD0C CA FF AC D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:AD10 -  -  -  -  	;we know a is not 0 here 
   71 D1:AD10 CD E8 AC D1 	call setup_sprite_single_line
   72 D1:AD14 -  -  -  -  	
   73 D1:AD14 C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AD15 01 00 00 00 	ld bc,0
   75 D1:AD19 -  -  -  -  	
   76 D1:AD19 C3 26 AD D1 	jp draw_fast_sprite_top_loop 
   77 D1:AD1D -  -  -  -  
   78 D1:AD1D -  -  -  -  
   79 D1:AD1D -  -  -  -  
   80 D1:AD1D -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
   81 D1:AD1D -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AD1D CD D2 AC D1 	call setup_sprite_top_cut
   83 D1:AD21 C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AD22 01 00 00 00 	ld bc,0 
   85 D1:AD26 -  -  -  -  	
   86 D1:AD26 -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AD26 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AD27 EB -  -  -  	ex de,hl;hl is vram
   89 D1:AD28 09 -  -  -  	add hl,bc
   90 D1:AD29 EB -  -  -  	ex de,hl;hl is data
   91 D1:AD2A 23 -  -  -  	inc hl
   92 D1:AD2B 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AD2C 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AD2D EB -  -  -  	ex de,hl;hl is vram
   95 D1:AD2E 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AD2F 13 -  -  -  	inc de
   97 D1:AD30 EB -  -  -  	ex de,hl;hl is data
   98 D1:AD31 3D -  -  -  	dec a
   99 D1:AD32 C2 26 AD D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AD36 -  -  -  -  	
  101 D1:AD36 -  -  -  -  	
  102 D1:AD36 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AD37 78 -  -  -  	ld a,b
  104 D1:AD38 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AD39 -  -  -  -  		
  106 D1:AD39 01 00 00 00 	ld bc,0
  107 D1:AD3D 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AD3E EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AD3F C3 4E AD D1 	jp dfgs_loop
  110 D1:AD43 -  -  -  -  
  111 D1:AD43 -  -  -  -  
  112 D1:AD43 -  -  -  -  ;de = vram , hl = data
  113 D1:AD43 -  -  -  -  draw_fast_sprite_full:
  114 D1:AD43 1B -  -  -  	dec de
  115 D1:AD44 01 00 00 00 	ld bc,0
  116 D1:AD48 4E -  -  -  	ld c,(hl);height
  117 D1:AD49 09 -  -  -  	add hl,bc
  118 D1:AD4A 7E -  -  -  	ld a,(hl);total loops
  119 D1:AD4B 23 -  -  -  	inc hl
  120 D1:AD4C 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AD4D EB -  -  -  	ex de,hl
  122 D1:AD4E -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AD4E -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AD4E 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AD4F EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AD50 23 -  -  -  	inc hl
  127 D1:AD51 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AD52 23 -  -  -  	inc hl
  129 D1:AD53 ED B0 -  -  	ldir
  130 D1:AD55 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AD56 EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AD57 3D -  -  -  	dec a
  133 D1:AD58 C2 4E AD D1 	jp nz,dfgs_loop
  134 D1:AD5C C9 -  -  -  	ret
  135 D1:AD5D -  -  -  -  	
  136 D1:AD5D -  -  -  -  	
  137 D1:AD5D -  -  -  -  	
  138 D1:AD5D -  -  -  -  	
  139 D1:AD5D -  -  -  -  
  140 D1:AD5D -  -  -  -  
  141 D1:AD5D -  -  -  -  ;hl = data, de = vram
  142 D1:AD5D -  -  -  -  draw_slow_sprite_full:
  143 D1:AD5D 01 00 00 00 	ld bc,0
  144 D1:AD61 4E -  -  -  	ld c,(hl);height
  145 D1:AD62 09 -  -  -  	add hl,bc
  146 D1:AD63 7E -  -  -  	ld a,(hl);num loops
  147 D1:AD64 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AD65 D9 -  -  -  	exx;into shadow 
  149 D1:AD66 47 -  -  -  	ld b,a ;number of loops
  150 D1:AD67 -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AD67 -  -  -  -  dsfgs_line_loop:
  152 D1:AD67 D9 -  -  -  	exx;out of shadow
  153 D1:AD68 23 -  -  -  	inc hl;gap length
  154 D1:AD69 4E -  -  -  	ld c,(hl);gap length
  155 D1:AD6A EB -  -  -  	ex de,hl;hl is vram
  156 D1:AD6B 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AD6C EB -  -  -  	ex de,hl;hl is data
  158 D1:AD6D 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AD6E 1A -  -  -  	ld a,(de);vram data
  160 D1:AD6F A6 -  -  -  	and (hl)
  161 D1:AD70 23 -  -  -  	inc hl;pixel data
  162 D1:AD71 B6 -  -  -  	or (hl)
  163 D1:AD72 12 -  -  -  	ld (de),a
  164 D1:AD73 23 -  -  -  	inc hl;ldir length
  165 D1:AD74 -  -  -  -  	
  166 D1:AD74 13 -  -  -  	inc de;move to next pixel
  167 D1:AD75 -  -  -  -  	
  168 D1:AD75 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AD76 23 -  -  -  	inc hl;data
  170 D1:AD77 4F -  -  -  	ld c,a
  171 D1:AD78 B7 -  -  -  	or a
  172 D1:AD79 CA 7F AD D1 	jp z,dsfgs_ldir_skip
  173 D1:AD7D ED B0 -  -  	ldir
  174 D1:AD7F -  -  -  -  dsfgs_ldir_skip:
  175 D1:AD7F 1A -  -  -  	ld a,(de);vram data
  176 D1:AD80 A6 -  -  -  	and (hl)
  177 D1:AD81 23 -  -  -  	inc hl;pixel data
  178 D1:AD82 B6 -  -  -  	or (hl)
  179 D1:AD83 12 -  -  -  	ld (de),a
  180 D1:AD84 -  -  -  -  	
  181 D1:AD84 D9 -  -  -  	exx ;into shadow
  182 D1:AD85 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AD87 D9 -  -  -  	exx ;out 
  184 D1:AD88 C9 -  -  -  	ret
  185 D1:AD89 -  -  -  -  
  186 D1:AD89 -  -  -  -  
  187 D1:AD89 -  -  -  -  
  188 D1:AD89 -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AD89 -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AD89 -  -  -  -  
  191 D1:AD89 B7 -  -  -  	or a 
  192 D1:AD8A CA C7 AD D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AD8E -  -  -  -  	;we know a is not 0 here
  194 D1:AD8E CD E8 AC D1 	call setup_sprite_single_line
  195 D1:AD92 C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AD93 01 00 00 00 	ld bc,0
  197 D1:AD97 -  -  -  -  	
  198 D1:AD97 C3 A4 AD D1 	jp slow_sprite_data_traverse 
  199 D1:AD9B -  -  -  -  	
  200 D1:AD9B -  -  -  -  
  201 D1:AD9B -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:AD9B -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:AD9B CD D2 AC D1 	call setup_sprite_top_cut
  204 D1:AD9F C5 -  -  -  	push bc;save total and skipped loops
  205 D1:ADA0 01 00 00 00 	ld bc,0
  206 D1:ADA4 -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:ADA4 -  -  -  -  slow_sprite_data_traverse:
  208 D1:ADA4 4E -  -  -  	ld c,(hl);gap length
  209 D1:ADA5 EB -  -  -  	ex de,hl;hl is vram
  210 D1:ADA6 09 -  -  -  	add hl,bc
  211 D1:ADA7 EB -  -  -  	ex de,hl
  212 D1:ADA8 -  -  -  -  	
  213 D1:ADA8 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:ADA9 23 -  -  -  	inc hl
  215 D1:ADAA 23 -  -  -  	inc hl;ldir length
  216 D1:ADAB 4E -  -  -  	ld c,(hl)
  217 D1:ADAC 09 -  -  -  	add hl,bc
  218 D1:ADAD EB -  -  -  	ex de,hl
  219 D1:ADAE 09 -  -  -  	add hl,bc
  220 D1:ADAF EB -  -  -  	ex de,hl
  221 D1:ADB0 13 -  -  -  	inc de;inc for leading pix 
  222 D1:ADB1 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:ADB2 23 -  -  -  	inc hl
  224 D1:ADB3 23 -  -  -  	inc hl;gap length
  225 D1:ADB4 -  -  -  -  	
  226 D1:ADB4 3D -  -  -  	dec a 
  227 D1:ADB5 C2 A4 AD D1 	jp nz,slow_sprite_data_traverse
  228 D1:ADB9 -  -  -  -  
  229 D1:ADB9 -  -  -  -  
  230 D1:ADB9 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:ADBA 78 -  -  -  	ld a,b
  232 D1:ADBB 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:ADBC 01 00 00 00 	ld bc,0;clear bc 
  234 D1:ADC0 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:ADC1 D9 -  -  -  	exx ;toshadow
  236 D1:ADC2 47 -  -  -  	ld b,a 
  237 D1:ADC3 C3 67 AD D1 	jp dsfgs_line_loop
  238 D1:ADC7 -  -  -  -  	
  239 D1:ADC7 -  -  -  -  	
  240 D1:ADC7 -  -  -  -  	
  241 D1:ADC7 -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:ADC7 3C -  -  -  	inc a 
  243 D1:ADC8 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:ADC8 -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:ADC8 -  -  -  -  
  246 D1:ADC8 CD C5 AC D1 	call setup_sprite_bottom_cut
  247 D1:ADCC -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:ADCC D9 -  -  -  	exx ;toshadow
  249 D1:ADCD 47 -  -  -  	ld b,a
  250 D1:ADCE C3 67 AD D1 	jp dsfgs_line_loop
  251 D1:ADD2 -  -  -  -  
  252 D1:ADD2 -  -  -  -  
  253 D1:ADD2 -  -  -  -  
  254 D1:ADD2 -  -  -  -  
  255 D1:ADD2 -  -  -  -  
  256 D1:ADD2 -  -  -  -  
  257 D1:ADD2 -  -  -  -  
  258 D1:ADD2 -  -  -  -  
  259 D1:ADD2 -  -  -  -  
  260 D1:ADD2 -  -  -  -  
  261 D1:ADD2 -  -  -  -  
  262 D1:ADD2 -  -  -  -  
  263 D1:ADD2 -  -  -  -  
  264 D1:ADD2 -  -  -  -  
  265 D1:ADD2 -  -  -  -  
  266 D1:ADD2 -  -  -  -  
  267 D1:ADD2 -  -  -  -  
  268 D1:ADD2 -  -  -  -  
  269 D1:ADD2 -  -  -  -  
  270 D1:ADD2 -  -  -  -  
  271 D1:ADD2 -  -  -  -  
  272 D1:ADD2 -  -  -  -  
  273 D1:ADD2 -  -  -  -  
  274 D1:ADD2 -  -  -  -  
  275 D1:ADD2 -  -  -  -  
  276 D1:ADD2 -  -  -  -  
  277 D1:ADD2 -  -  -  -  
  278 D1:ADD2 -  -  -  -  
  279 D1:ADD2 -  -  -  -  
  280 D1:ADD2 -  -  -  -  
  281 D1:ADD2 -  -  -  -  
  282 D1:ADD2 -  -  -  -  
  283 D1:ADD2 -  -  -  -  
  284 D1:ADD2 -  -  -  -  
  285 D1:ADD2 -  -  -  -  
  286 D1:ADD2 -  -  -  -  
  287 D1:ADD2 -  -  -  -   
  288 D1:ADD2 -  -  -  -  
  289 D1:ADD2 -  -  -  -  
  290 D1:ADD2 -  -  -  -  
  291 D1:ADD2 -  -  -  -  
  292 D1:ADD2 -  -  -  -  
  293 D1:ADD2 -  -  -  -  
  294 D1:ADD2 -  -  -  -  
  295 D1:ADD2 -  -  -  -  
  296 D1:ADD2 -  -  -  -  
  297 D1:ADD2 -  -  -  -  
  298 D1:ADD2 -  -  -  -  
  299 D1:ADD2 -  -  -  -  
  300 D1:ADD2 -  -  -  -  
  301 D1:ADD2 -  -  -  -  
  302 D1:ADD2 -  -  -  -  
  303 D1:ADD2 -  -  -  -  
  304 D1:ADD2 -  -  -  -  
  305 D1:ADD2 -  -  -  -  
  306 D1:ADD2 -  -  -  -  
  307 D1:ADD2 -  -  -  -  
  308 D1:ADD2 -  -  -  -  
  309 D1:ADD2 -  -  -  -  
  310 D1:ADD2 -  -  -  -  
  311 D1:ADD2 -  -  -  -  
  312 D1:ADD2 -  -  -  -  
  313 D1:ADD2 -  -  -  -  
  314 D1:ADD2 -  -  -  -  
  315 D1:ADD2 -  -  -  -  
  316 D1:ADD2 -  -  -  -  
  317 D1:ADD2 -  -  -  -  
  318 D1:ADD2 -  -  -  -  
  319 D1:ADD2 -  -  -  -  
  320 D1:ADD2 -  -  -  -  
  321 D1:ADD2 -  -  -  -  
  322 D1:ADD2 -  -  -  -  
  323 D1:ADD2 -  -  -  -  
  324 D1:ADD2 -  -  -  -  
  325 D1:ADD2 -  -  -  -  
  326 D1:ADD2 -  -  -  -  
  327 D1:ADD2 -  -  -  -  
  328 D1:ADD2 -  -  -  -  
  329 D1:ADD2 -  -  -  -  
  330 D1:ADD2 -  -  -  -  
  331 D1:ADD2 -  -  -  -  
  332 D1:ADD2 -  -  -  -  
  333 D1:ADD2 -  -  -  -  
  334 D1:ADD2 -  -  -  -  
  335 D1:ADD2 -  -  -  -  
  336 D1:ADD2 -  -  -  -  
  337 D1:ADD2 -  -  -  -  
  338 D1:ADD2 -  -  -  -  
  339 D1:ADD2 -  -  -  -  
  340 D1:ADD2 -  -  -  -  
  341 D1:ADD2 -  -  -  -  
  342 D1:ADD2 -  -  -  -  
  343 D1:ADD2 -  -  -  -  	
  344 D1:ADD2 -  -  -  -  	
Listing for file "ascent.asm"
  273 D1:ADD2 -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:ADD2 -  -  -  -  
    2 D1:ADD2 -  -  -  -  
    3 D1:ADD2 -  -  -  -  
    4 D1:ADD2 -  -  -  -  
    5 D1:ADD2 -  -  -  -  
    6 D1:ADD2 -  -  -  -  
    7 D1:ADD2 -  -  -  -  
    8 D1:ADD2 -  -  -  -  
    9 D1:ADD2 -  -  -  -  ;REGISTER USEAGE
   10 D1:ADD2 -  -  -  -  ;HL = sprite color data byte
   11 D1:ADD2 -  -  -  -  ;C = bit selector for color data 
   12 D1:ADD2 -  -  -  -  ;HL' = alpha data byte
   13 D1:ADD2 -  -  -  -  ;C' = bit selector for alpha data
   14 D1:ADD2 -  -  -  -  ;DE = output sprite data location
   15 D1:ADD2 -  -  -  -  ;DE' = loops/line write location 
   16 D1:ADD2 -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:ADD2 -  -  -  -  
   18 D1:ADD2 -  -  -  -  ;SETUP ----------------
   19 D1:ADD2 -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:ADD2 -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:ADD2 -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:ADD2 -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:ADD2 -  -  -  -  ;------------
   24 D1:ADD2 -  -  -  -  
   25 D1:ADD2 -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:ADD2 -  -  -  -  
   27 D1:ADD2 -  -  -  -  
   28 D1:ADD2 -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:ADD2 -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:ADD2 -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:ADD2 -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:ADD2 -  -  -  -  ;write pixel mask and color data
   33 D1:ADD2 -  -  -  -  
   34 D1:ADD2 -  -  -  -  ;LDIR ROUTINE
   35 D1:ADD2 -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:ADD2 -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:ADD2 -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:ADD2 -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:ADD2 -  -  -  -  ;IF FAST, GOTO END
   40 D1:ADD2 -  -  -  -  
   41 D1:ADD2 -  -  -  -  ;trailing pixels
   42 D1:ADD2 -  -  -  -  ;11,10,01 in alpha data 
   43 D1:ADD2 -  -  -  -  
   44 D1:ADD2 -  -  -  -  ;END AND RESTART
   45 D1:ADD2 -  -  -  -  ;Increment loops/line counter
   46 D1:ADD2 -  -  -  -  ;check if end of line and write loops/line
   47 D1:ADD2 -  -  -  -  
   48 D1:ADD2 -  -  -  -  ;store registers and check if interrupt is required
   49 D1:ADD2 -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:ADD2 -  -  -  -  ;otherwise return to start of loop
   51 D1:ADD2 -  -  -  -  
   52 D1:ADD2 -  -  -  -  ;
   53 D1:ADD2 -  -  -  -  
   54 D1:ADD2 -  -  -  -  
   55 D1:ADD2 -  -  -  -  
   56 D1:ADD2 -  -  -  -  
   57 D1:ADD2 -  -  -  -  
   58 D1:ADD2 -  -  -  -  
   59 D1:ADD2 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:ADD2 -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:ADD2 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:ADD2 CB 09 -  -  	rrc c;rlc flip
   63 D1:ADD4 D0 -  -  -  	ret nc
   64 D1:ADD5 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:ADD5 23 -  -  -  	inc hl;dec hl flip
   66 D1:ADD6 C9 -  -  -  	ret
   67 D1:ADD7 -  -  -  -  
   68 D1:ADD7 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:ADD7 -  -  -  -  
   70 D1:ADD7 -  -  -  -  ;IN SHADOW
   71 D1:ADD7 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:ADD7 -  -  -  -  ;C IS BITMASK
   73 D1:ADD7 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:ADD7 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:ADD7 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:ADD7 -  -  -  -  ; next call returns first bit in next row  
   77 D1:ADD7 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:ADD7 3E A2 -  -  	ld a,$A2;test 
   79 D1:ADD9 CD 3A AA D1 	call write_a_to_ram
   80 D1:ADDD 79 -  -  -  	ld a,c 
   81 D1:ADDE CD 3A AA D1 	call write_a_to_ram 
   82 D1:ADE2 7E -  -  -  	ld a,(hl)
   83 D1:ADE3 CD 3A AA D1 	call write_a_to_ram
   84 D1:ADE7 -  -  -  -  	
   85 D1:ADE7 37 -  -  -  	scf 
   86 D1:ADE8 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:ADE8 DA FB AD D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:ADEC -  -  -  -  
   89 D1:ADEC 3E A3 -  -  	ld a,$A3
   90 D1:ADEE CD 3A AA D1 	call write_a_to_ram 
   91 D1:ADF2 -  -  -  -  	
   92 D1:ADF2 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:ADF4 32 98 AE D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:ADF8 -  -  -  -  	
   95 D1:ADF8 3E 00 -  -  	ld a,0
   96 D1:ADFA C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:ADFB -  -  -  -  
   98 D1:ADFB -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:ADFB -  -  -  -  	
  100 D1:ADFB -  -  -  -  	
  101 D1:ADFB -  -  -  -  	
  102 D1:ADFB -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:ADFB 37 -  -  -  	scf
  104 D1:ADFC -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:ADFC DA 0F AE D1 	jp c,sdcomp_bit_offset_skip
  106 D1:AE00 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:AE02 32 FC AD D1 	ld (sdcomp_bit_offset),a
  108 D1:AE06 3E A9 -  -  	ld a,$A9
  109 D1:AE08 CD 3A AA D1 	call write_a_to_ram
  110 D1:AE0C 3E 00 -  -  	ld a,0
  111 D1:AE0E C9 -  -  -  	ret ;return 0 first bit
  112 D1:AE0F -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:AE0F -  -  -  -  		
  114 D1:AE0F -  -  -  -  	;ld a,$EF
  115 D1:AE0F -  -  -  -  	;call write_a_to_ram
  116 D1:AE0F 7E -  -  -  	ld a,(hl)
  117 D1:AE10 -  -  -  -  	;push af 
  118 D1:AE10 -  -  -  -  	;call write_a_to_ram
  119 D1:AE10 -  -  -  -  	;ld a,c
  120 D1:AE10 -  -  -  -  	;call write_a_to_ram
  121 D1:AE10 -  -  -  -  	;pop af 
  122 D1:AE10 -  -  -  -  	
  123 D1:AE10 -  -  -  -  	
  124 D1:AE10 A1 -  -  -  	and c 
  125 D1:AE11 CD D2 AD D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AE15 -  -  -  -  	;a holds data to return
  127 D1:AE15 CD 3A AA D1 	call write_a_to_ram
  128 D1:AE19 37 -  -  -  	scf 
  129 D1:AE1A -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AE1A DA 20 AE D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AE1E 3E 01 -  -  	ld a,1
  132 D1:AE20 -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AE20 -  -  -  -  	
  134 D1:AE20 -  -  -  -  	
  135 D1:AE20 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AE21 3D -  -  -  	dec a 
  137 D1:AE22 -  -  -  -  	;call write_a_to_ram
  138 D1:AE22 C2 5E AE D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AE26 -  -  -  -  	
  140 D1:AE26 -  -  -  -  	;HAve read last bit in line  
  141 D1:AE26 -  -  -  -  	
  142 D1:AE26 3E AC -  -  	ld a,$AC;Test
  143 D1:AE28 CD 3A AA D1 	call write_a_to_ram;Test
  144 D1:AE2C -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AE2C -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AE2C 3E 00 -  -  	ld a,0
  147 D1:AE2E 3D -  -  -  	dec a 
  148 D1:AE2F 32 2D AE D1 	ld (sdcomp_lines_remaining),a
  149 D1:AE33 -  -  -  -  	;call write_a_to_ram
  150 D1:AE33 C2 43 AE D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AE37 -  -  -  -  	;end of last line reached 
  152 D1:AE37 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AE39 32 1E B1 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AE3D 3E E9 -  -  	ld a,$E9
  155 D1:AE3F CD 3A AA D1 	call write_a_to_ram;TEST 
  156 D1:AE43 -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AE43 -  -  -  -  	
  158 D1:AE43 -  -  -  -  
  159 D1:AE43 -  -  -  -  	
  160 D1:AE43 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AE45 32 F9 B0 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AE49 32 E8 AD D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AE4D -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AE4D 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AE4E -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AE4E DA 58 AE D1 	jp c,sdcomp_offset_1_skip
  167 D1:AE52 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AE54 32 FC AD D1 	ld (sdcomp_bit_offset),a
  169 D1:AE58 -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AE58 -  -  -  -  	
  171 D1:AE58 -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AE58 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AE5A -  -  -  -  	
  174 D1:AE5A CD 3A AA D1 	call write_a_to_ram
  175 D1:AE5E -  -  -  -  	
  176 D1:AE5E -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AE5E 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AE5F -  -  -  -  	
  179 D1:AE5F F5 -  -  -  	push af ;testing
  180 D1:AE60 3E A0 -  -  	ld a,$A0
  181 D1:AE62 CD 3A AA D1 	call write_a_to_ram
  182 D1:AE66 F1 -  -  -  	pop af 
  183 D1:AE67 CD 3A AA D1 	call write_a_to_ram
  184 D1:AE6B -  -  -  -  	
  185 D1:AE6B C9 -  -  -  	ret 
  186 D1:AE6C -  -  -  -  	
  187 D1:AE6C -  -  -  -  
  188 D1:AE6C -  -  -  -  
  189 D1:AE6C -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AE6C -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AE6C 3E A1 -  -  	ld a,$A1
  192 D1:AE6E CD 3A AA D1 	call write_a_to_ram
  193 D1:AE72 -  -  -  -  	
  194 D1:AE72 79 -  -  -  	ld a,c 
  195 D1:AE73 CD 3A AA D1 	call write_a_to_ram 
  196 D1:AE77 7E -  -  -  	ld a,(hl)
  197 D1:AE78 CD 3A AA D1 	call write_a_to_ram
  198 D1:AE7C -  -  -  -  	
  199 D1:AE7C 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AE7E 32 98 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AE82 -  -  -  -  	
  202 D1:AE82 CD D7 AD D1 	call sdcomp_get_next_alpha
  203 D1:AE86 B7 -  -  -  	or a 
  204 D1:AE87 CA 95 AE D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AE8B 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AE8D CD 3A AA D1 	call write_a_to_ram
  207 D1:AE91 C3 AA AE D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AE95 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AE95 3E 00 -  -  	ld a,0
  210 D1:AE97 -  -  -  -  	
  211 D1:AE97 37 -  -  -  	scf 
  212 D1:AE98 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AE98 DA AA AE D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AE9C F5 -  -  -  	push af 
  215 D1:AE9D -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AE9D -  -  -  -  	
  217 D1:AE9D 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AE9F 32 00 B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AEA3 -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AEA3 3E A4 -  -  	ld a,$A4
  221 D1:AEA5 CD 3A AA D1 	call write_a_to_ram
  222 D1:AEA9 F1 -  -  -  	pop af 
  223 D1:AEAA -  -  -  -  	
  224 D1:AEAA -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AEAA -  -  -  -  
  226 D1:AEAA -  -  -  -  	
  227 D1:AEAA 32 C0 AE D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AEAE -  -  -  -  	
  229 D1:AEAE CD D7 AD D1 	call sdcomp_get_next_alpha
  230 D1:AEB2 B7 -  -  -  	or a 
  231 D1:AEB3 CA BD AE D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AEB7 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AEB9 C3 BF AE D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AEBD -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AEBD 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AEBF -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AEBF -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AEBF F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AEC1 -  -  -  -  	
  240 D1:AEC1 C9 -  -  -  	ret 
  241 D1:AEC2 -  -  -  -  	
  242 D1:AEC2 -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AEC2 -  -  -  -  
  244 D1:AEC2 -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AEC2 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AEC2 CD CB AE D1 	call sdcomp_get_next_color
  247 D1:AEC6 0F -  -  -  	rrca 
  248 D1:AEC7 0F -  -  -  	rrca 
  249 D1:AEC8 0F -  -  -  	rrca 
  250 D1:AEC9 0F -  -  -  	rrca
  251 D1:AECA C9 -  -  -  	ret 
  252 D1:AECB -  -  -  -  
  253 D1:AECB -  -  -  -  
  254 D1:AECB -  -  -  -  
  255 D1:AECB -  -  -  -  ;bit orders
  256 D1:AECB -  -  -  -  ;	noflip   flip 
  257 D1:AECB -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AECB -  -  -  -  ;3bpp 210	 012
  259 D1:AECB -  -  -  -  ;2bpp 10	 01
  260 D1:AECB -  -  -  -  ;1bpp 0		 0
  261 D1:AECB -  -  -  -  
  262 D1:AECB -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AECB -  -  -  -  sdcomp_get_next_color:
  264 D1:AECB D5 -  -  -  	push de ;save data write location
  265 D1:AECC 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AECE -  -  -  -  	
  267 D1:AECE 37 -  -  -  	scf
  268 D1:AECF -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AECF D2 19 AF D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AED3 -  -  -  -  	
  271 D1:AED3 -  -  -  -  	;ld a,$C1
  272 D1:AED3 -  -  -  -  	;call write_a_to_ram
  273 D1:AED3 -  -  -  -  	
  274 D1:AED3 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AED4 -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AED4 A1 -  -  -  	and c
  277 D1:AED5 -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AED5 CD D2 AD D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:AED9 B7 -  -  -  	or a
  280 D1:AEDA CA E0 AE D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:AEDE -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:AEDE CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:AEE0 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:AEE0 -  -  -  -  	
  285 D1:AEE0 37 -  -  -  	scf
  286 D1:AEE1 -  -  -  -  sdcomp_1bpc .equ $
  287 D1:AEE1 D2 19 AF D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:AEE5 -  -  -  -  
  289 D1:AEE5 -  -  -  -  	;ld a,$C2
  290 D1:AEE5 -  -  -  -  	;call write_a_to_ram
  291 D1:AEE5 -  -  -  -  	
  292 D1:AEE5 7E -  -  -  	ld a,(hl)
  293 D1:AEE6 -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:AEE6 A1 -  -  -  	and c 
  295 D1:AEE7 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:AEE7 CD D2 AD D1 	call sdcomp_next_in_bitstream
  297 D1:AEEB B7 -  -  -  	or a
  298 D1:AEEC CA F2 AE D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:AEF0 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:AEF0 CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:AEF2 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:AEF2 -  -  -  -  	
  303 D1:AEF2 37 -  -  -  	scf
  304 D1:AEF3 -  -  -  -  sdcomp_2bpc .equ $
  305 D1:AEF3 D2 19 AF D1 	jp nc,sdcomp_get_color_from_index
  306 D1:AEF7 -  -  -  -  	
  307 D1:AEF7 7E -  -  -  	ld a,(hl)
  308 D1:AEF8 A1 -  -  -  	and c 
  309 D1:AEF9 CD D2 AD D1 	call sdcomp_next_in_bitstream
  310 D1:AEFD B7 -  -  -  	or a
  311 D1:AEFE CA 04 AF D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:AF02 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:AF02 CB D3 -  -  	set 2,e 
  314 D1:AF04 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:AF04 -  -  -  -  	
  316 D1:AF04 37 -  -  -  	scf
  317 D1:AF05 -  -  -  -  sdcomp_3bpc .equ $
  318 D1:AF05 D2 19 AF D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:AF09 -  -  -  -  
  320 D1:AF09 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:AF09 7E -  -  -  	ld a,(hl)
  322 D1:AF0A A1 -  -  -  	and c 
  323 D1:AF0B CD D2 AD D1 	call sdcomp_next_in_bitstream
  324 D1:AF0F B7 -  -  -  	or a
  325 D1:AF10 CA 16 AF D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:AF14 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:AF14 CB DB -  -  	set 3,e 
  328 D1:AF16 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:AF16 -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:AF16 7B -  -  -  	ld a,e 
  331 D1:AF17 D1 -  -  -  	pop de 
  332 D1:AF18 C9 -  -  -  	ret 
  333 D1:AF19 -  -  -  -  
  334 D1:AF19 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:AF19 -  -  -  -  	
  336 D1:AF19 -  -  -  -  	;ld a,$DD
  337 D1:AF19 -  -  -  -  	;call write_a_to_ram
  338 D1:AF19 -  -  -  -  	;ld a,e 
  339 D1:AF19 -  -  -  -  	;call write_a_to_ram
  340 D1:AF19 -  -  -  -  	
  341 D1:AF19 -  -  -  -  	
  342 D1:AF19 CB 53 -  -  	bit 2,e 
  343 D1:AF1B CA 3D AF D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:AF1F -  -  -  -  	
  345 D1:AF1F -  -  -  -  	;Bit 2 = 1 
  346 D1:AF1F CB 4B -  -  	bit 1,e 
  347 D1:AF21 CA 31 AF D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:AF25 -  -  -  -  
  349 D1:AF25 -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:AF25 -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:AF25 3E 00 -  -  	ld a,0
  352 D1:AF27 CB 43 -  -  	bit 0,e 
  353 D1:AF29 CA 6B AF D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:AF2D C3 5B AF D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:AF31 -  -  -  -  
  356 D1:AF31 -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:AF31 -  -  -  -  	;2 = 1 1 = 0 
  358 D1:AF31 -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:AF31 3E 00 -  -  	ld a,0
  360 D1:AF33 CB 43 -  -  	bit 0,e 
  361 D1:AF35 CA 6B AF D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:AF39 C3 5B AF D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:AF3D -  -  -  -  	
  364 D1:AF3D -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:AF3D -  -  -  -  	;bit 2 was 0 
  366 D1:AF3D CB 4B -  -  	bit 1,e 
  367 D1:AF3F CA 4F AF D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:AF43 -  -  -  -  	
  369 D1:AF43 -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:AF43 -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:AF43 3E 00 -  -  	ld a,0
  372 D1:AF45 CB 43 -  -  	bit 0,e 
  373 D1:AF47 CA 6B AF D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:AF4B C3 5B AF D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:AF4F -  -  -  -  	
  376 D1:AF4F -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:AF4F -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:AF4F -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:AF4F 3E 00 -  -  	ld a,0
  380 D1:AF51 -  -  -  -  	
  381 D1:AF51 CB 43 -  -  	bit 0,e 
  382 D1:AF53 CA 6B AF D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:AF57 C3 5B AF D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:AF5B -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:AF5B E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:AF5D D1 -  -  -  	pop de 
  387 D1:AF5E -  -  -  -  	
  388 D1:AF5E F5 -  -  -  	push af 
  389 D1:AF5F 3E C0 -  -  	ld a,$C0
  390 D1:AF61 CD 3A AA D1 	call write_a_to_ram
  391 D1:AF65 F1 -  -  -  	pop af 
  392 D1:AF66 CD 3A AA D1 	call write_a_to_ram
  393 D1:AF6A -  -  -  -  	
  394 D1:AF6A C9 -  -  -  	ret 
  395 D1:AF6B -  -  -  -  	
  396 D1:AF6B -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:AF6B E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:AF6D 0F -  -  -  	rrca 
  399 D1:AF6E 0F -  -  -  	rrca 
  400 D1:AF6F 0F -  -  -  	rrca 
  401 D1:AF70 0F -  -  -  	rrca 
  402 D1:AF71 D1 -  -  -  	pop de 
  403 D1:AF72 -  -  -  -  	
  404 D1:AF72 F5 -  -  -  	push af 
  405 D1:AF73 3E C0 -  -  	ld a,$C0
  406 D1:AF75 CD 3A AA D1 	call write_a_to_ram
  407 D1:AF79 F1 -  -  -  	pop af 
  408 D1:AF7A CD 3A AA D1 	call write_a_to_ram
  409 D1:AF7E -  -  -  -  	
  410 D1:AF7E C9 -  -  -  	ret 
  411 D1:AF7F -  -  -  -  
  412 D1:AF7F -  -  -  -  
  413 D1:AF7F -  -  -  -  
  414 D1:AF7F -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:AF7F -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:AF7F -  -  -  -  ;in shadow ,destroys a
  417 D1:AF7F -  -  -  -  sdcomp_traverse_line_data:
  418 D1:AF7F D9 -  -  -  	exx ;OUT 
  419 D1:AF80 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:AF80 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:AF84 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:AF84 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:AF86 D9 -  -  -  	exx;toshadow 
  424 D1:AF87 -  -  -  -  	
  425 D1:AF87 -  -  -  -  	;load end of previous alpha data line 
  426 D1:AF87 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:AF87 21 00 00 00 	ld hl,0
  428 D1:AF8B -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:AF8B 0E 00 -  -  	ld c,0
  430 D1:AF8D -  -  -  -  sdcomp_traverse_initial:
  431 D1:AF8D D5 -  -  -  	push de
  432 D1:AF8E -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:AF8E 1E 00 -  -  	ld e, 0
  434 D1:AF90 -  -  -  -  	;e holds sprite width 
  435 D1:AF90 -  -  -  -  	
  436 D1:AF90 -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:AF90 -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:AF90 CB 09 -  -  	rrc c 
  439 D1:AF92 D2 97 AF D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:AF96 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:AF97 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:AF97 7E -  -  -  	ld a,(hl)
  443 D1:AF98 A1 -  -  -  	and c ;read alpha data 
  444 D1:AF99 -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:AF99 CA AF AF D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:AF9D D9 -  -  -  	exx;out of shadow 
  447 D1:AF9E -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  448 D1:AF9E CB 09 -  -  	rrc c ;rotate mask
  449 D1:AFA0 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:AFA0 CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:AFA2 -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:AFA2 CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:AFA4 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:AFA4 CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:AFA6 -  -  -  -  	
  456 D1:AFA6 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:AFA6 79 -  -  -  	ld a,c
  458 D1:AFA7 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:AFA7 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:AFA9 CA AE AF D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:AFAD 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:AFAE -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:AFAE D9 -  -  -  	exx ;toshadow
  464 D1:AFAF -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:AFAF 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:AFB0 C2 90 AF D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:AFB4 D1 -  -  -  	pop de  ;back to write location 
  468 D1:AFB5 -  -  -  -  	;set new end of line pointers 
  469 D1:AFB5 -  -  -  -  	
  470 D1:AFB5 3E BB -  -  	ld a,$BB 
  471 D1:AFB7 CD 3A AA D1 	call write_a_to_ram 
  472 D1:AFBB 7E -  -  -  	ld a,(hl) 
  473 D1:AFBC CD 3A AA D1 	call write_a_to_ram 
  474 D1:AFC0 79 -  -  -  	ld a,c 
  475 D1:AFC1 CD 3A AA D1 	call write_a_to_ram 
  476 D1:AFC5 -  -  -  -  	
  477 D1:AFC5 -  -  -  -  	
  478 D1:AFC5 22 88 AF D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:AFC9 79 -  -  -  	ld a,c
  480 D1:AFCA 32 8C AF D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:AFCE D9 -  -  -  	exx ;out
  482 D1:AFCF 22 81 AF D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:AFD3 79 -  -  -  	ld a,c 
  484 D1:AFD4 32 85 AF D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:AFD8 -  -  -  -  	
  486 D1:AFD8 7E -  -  -  	ld a,(hl) 
  487 D1:AFD9 CD 3A AA D1 	call write_a_to_ram 
  488 D1:AFDD 79 -  -  -  	ld a,c 
  489 D1:AFDE CD 3A AA D1 	call write_a_to_ram 
  490 D1:AFE2 D9 -  -  -  	exx;to shadow 
  491 D1:AFE3 C9 -  -  -  	ret
  492 D1:AFE4 -  -  -  -  
  493 D1:AFE4 -  -  -  -  
  494 D1:AFE4 -  -  -  -  
  495 D1:AFE4 -  -  -  -  
  496 D1:AFE4 -  -  -  -  
  497 D1:AFE4 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  498 D1:AFE4 -  -  -  -  sdcomp_write_ldir_data_loop:
  499 D1:AFE4 CD CB AE D1 	call sdcomp_get_next_color
  500 D1:AFE8 47 -  -  -  	ld b,a;first pixel
  501 D1:AFE9 CD C2 AE D1 	call sdcomp_get_next_color_leading_nibble
  502 D1:AFED B0 -  -  -  	or b
  503 D1:AFEE -  -  -  -  	
  504 D1:AFEE -  -  -  -  	
  505 D1:AFEE 12 -  -  -  	ld (de),a;write color data
  506 D1:AFEF 13 -  -  -  	inc de
  507 D1:AFF0 D9 -  -  -  	exx;to shadow
  508 D1:AFF1 05 -  -  -  	dec b;ldir length counter
  509 D1:AFF2 D9 -  -  -  	exx
  510 D1:AFF3 C2 E4 AF D1 	jp nz,sdcomp_write_ldir_data_loop
  511 D1:AFF7 C9 -  -  -  	ret
  512 D1:AFF8 -  -  -  -  	
  513 D1:AFF8 -  -  -  -  
  514 D1:AFF8 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  515 D1:AFF8 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  516 D1:AFF8 D5 -  -  -  	push de ;output location	
  517 D1:AFF9 47 -  -  -  	ld b,a;save for later
  518 D1:AFFA CB 67 -  -  	bit 4,a ;check if first pixel has color 
  519 D1:AFFC 3E 00 -  -  	ld a,0
  520 D1:AFFE 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  521 D1:B000 CA 0A B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  522 D1:B004 -  -  -  -  	;has first color
  523 D1:B004 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  524 D1:B006 CD CB AE D1 	call sdcomp_get_next_color
  525 D1:B00A -  -  -  -  sdcomp_leading_pixel_first_skip:
  526 D1:B00A -  -  -  -  	;a is either $00 or $0color1
  527 D1:B00A -  -  -  -  	
  528 D1:B00A 1E FF -  -  	ld e,%11111111;assuming no colors
  529 D1:B00C -  -  -  -  	
  530 D1:B00C CB 40 -  -  	bit 0,b;check second pixel alpha
  531 D1:B00E 47 -  -  -  	ld b,a;save for later 
  532 D1:B00F 3E 00 -  -  	ld a,0
  533 D1:B011 CA 1B B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  534 D1:B015 -  -  -  -  	;has second color 
  535 D1:B015 CD C2 AE D1 	call sdcomp_get_next_color_leading_nibble
  536 D1:B019 -  -  -  -  	;a = color2 0 
  537 D1:B019 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  538 D1:B01B -  -  -  -  	
  539 D1:B01B -  -  -  -  sdcomp_leading_pixel_second_skip:
  540 D1:B01B -  -  -  -  	;a is either 00 or c2 0 
  541 D1:B01B -  -  -  -  	;b is either 00 or 0 c1 
  542 D1:B01B B0 -  -  -  	or b 
  543 D1:B01C 47 -  -  -  	ld b,a;final color data
  544 D1:B01D 7A -  -  -  	ld a,d 
  545 D1:B01E A3 -  -  -  	and e ;final mask data 
  546 D1:B01F -  -  -  -  	
  547 D1:B01F D1 -  -  -  	pop de;return to pointer 
  548 D1:B020 -  -  -  -  	
  549 D1:B020 12 -  -  -  	ld (de),a;write mask data 
  550 D1:B021 13 -  -  -  	inc de 
  551 D1:B022 78 -  -  -  	ld a,b;color data 
  552 D1:B023 12 -  -  -  	ld (de),a;write color data 
  553 D1:B024 -  -  -  -  	
  554 D1:B024 -  -  -  -  	
  555 D1:B024 -  -  -  -  	
  556 D1:B024 -  -  -  -  	;call write_a_to_ram
  557 D1:B024 -  -  -  -  	
  558 D1:B024 13 -  -  -  	inc de 
  559 D1:B025 C9 -  -  -  	ret 
  560 D1:B026 -  -  -  -  
  561 D1:B026 -  -  -  -  
  562 D1:B026 -  -  -  -  
  563 D1:B026 -  -  -  -  ;ENTRY POINT 
  564 D1:B026 -  -  -  -  
  565 D1:B026 -  -  -  -  
  566 D1:B026 -  -  -  -  ;hl = sprite data start, de = main data decompress location
  567 D1:B026 -  -  -  -  sprite_decompress:
  568 D1:B026 -  -  -  -  
  569 D1:B026 -  -  -  -  
  570 D1:B026 -  -  -  -  	;SETUP ===========================================================================================================
  571 D1:B026 -  -  -  -  
  572 D1:B026 -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  573 D1:B026 -  -  -  -  
  574 D1:B026 -  -  -  -  	;HL pointing to flags registers
  575 D1:B026 -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  576 D1:B026 -  -  -  -  	;set bpc mode 
  577 D1:B026 CB 7E -  -  	bit 7,(hl)
  578 D1:B028 C4 B5 B2 D1 	call nz,sdcomp_set_4bpc
  579 D1:B02C CB 76 -  -  	bit 6,(hl)
  580 D1:B02E C4 66 B2 D1 	call nz,sdcomp_set_3bpc 
  581 D1:B032 CB 6E -  -  	bit 5,(hl)
  582 D1:B034 C4 27 B2 D1 	call nz,sdcomp_set_2bpc 
  583 D1:B038 CB 66 -  -  	bit 4,(hl)
  584 D1:B03A C4 06 B2 D1 	call nz,sdcomp_set_1bpc 
  585 D1:B03E CB 5E -  -  	bit 3,(hl)
  586 D1:B040 C4 EB B1 D1 	call nz,sdcomp_set_0bpc 
  587 D1:B044 CB 56 -  -  	bit 2,(hl)
  588 D1:B046 C4 0E B3 D1 	call nz,sdcomp_set_noalpha
  589 D1:B04A -  -  -  -  	
  590 D1:B04A -  -  -  -  	
  591 D1:B04A -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  592 D1:B04A -  -  -  -  	
  593 D1:B04A 23 -  -  -  	inc hl ;hl points to width in px 
  594 D1:B04B -  -  -  -  	
  595 D1:B04B -  -  -  -  	
  596 D1:B04B 7E -  -  -  	ld a,(hl) 
  597 D1:B04C 32 8F AF D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  598 D1:B050 32 59 AE D1 	ld (sdcomp_sprite_width_2),a
  599 D1:B054 47 -  -  -  	ld b,a;width
  600 D1:B055 08 -  -  -  	ex af,af' ;'
  601 D1:B056 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  602 D1:B057 08 -  -  -  	ex af,af' ;' 
  603 D1:B058 -  -  -  -  
  604 D1:B058 -  -  -  -  
  605 D1:B058 -  -  -  -  sdcomp_offset_2 .equ $ 
  606 D1:B058 00 -  -  -  	nop ;replace with inc b for offset 
  607 D1:B059 -  -  -  -  
  608 D1:B059 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  609 D1:B059 04 -  -  -  	inc b ;round up on odd sprites
  610 D1:B05A CB 38 -  -  	srl b;divide by 2
  611 D1:B05C -  -  -  -  	
  612 D1:B05C -  -  -  -  	
  613 D1:B05C 3E A0 -  -  	ld a,160
  614 D1:B05E 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  615 D1:B05F 32 FE B0 D1 	ld (sdcomp_gap_btwn_rows),a 
  616 D1:B063 -  -  -  -  	
  617 D1:B063 CD 3A AA D1 	call write_a_to_ram
  618 D1:B067 3E BE -  -  	ld a,$BE
  619 D1:B069 CD 3A AA D1 	call write_a_to_ram
  620 D1:B06D 78 -  -  -  	ld a,b 
  621 D1:B06E CD 3A AA D1 	call write_a_to_ram
  622 D1:B072 -  -  -  -  	
  623 D1:B072 -  -  -  -  	
  624 D1:B072 7E -  -  -  	ld a,(hl);load width again
  625 D1:B073 -  -  -  -  	
  626 D1:B073 47 -  -  -  	ld b,a 
  627 D1:B074 -  -  -  -  	
  628 D1:B074 37 -  -  -  	scf
  629 D1:B075 -  -  -  -  sdcomp_bg_1 .equ $
  630 D1:B075 DA 7B B0 D1 	jp c,sdcomp_bg_1_skip ;if not BG then skip
  631 D1:B079 -  -  -  -  	
  632 D1:B079 -  -  -  -  	;TODO calculate correct width data , add offset and rounded to even number
  633 D1:B079 -  -  -  -  	
  634 D1:B079 -  -  -  -  	;write width data to de
  635 D1:B079 12 -  -  -  	ld (de), a 
  636 D1:B07A 13 -  -  -  	inc de 
  637 D1:B07B -  -  -  -  sdcomp_bg_1_skip:
  638 D1:B07B -  -  -  -  
  639 D1:B07B 23 -  -  -  	inc hl ;hl points to height 
  640 D1:B07C 7E -  -  -  	ld a,(hl);height
  641 D1:B07D 32 2D AE D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  642 D1:B081 -  -  -  -  	
  643 D1:B081 -  -  -  -  	
  644 D1:B081 37 -  -  -  	scf
  645 D1:B082 -  -  -  -  sdcomp_bg_2 .equ $
  646 D1:B082 D2 88 B0 D1 	jp nc,sdcomp_bg_2_skip ; skip if BG
  647 D1:B086 -  -  -  -  	
  648 D1:B086 -  -  -  -  	
  649 D1:B086 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  650 D1:B087 13 -  -  -  	inc de 
  651 D1:B088 -  -  -  -  	
  652 D1:B088 -  -  -  -  sdcomp_bg_2_skip:
  653 D1:B088 -  -  -  -  	
  654 D1:B088 23 -  -  -  	inc hl ;HL points to start of alpha data 
  655 D1:B089 -  -  -  -  
  656 D1:B089 E5 -  -  -  	push hl ;Save alpha data 
  657 D1:B08A -  -  -  -  	
  658 D1:B08A -  -  -  -  	
  659 D1:B08A -  -  -  -  	;Need to find start of color data
  660 D1:B08A -  -  -  -  	;at this point a = height, b = width 
  661 D1:B08A -  -  -  -  	
  662 D1:B08A 37 -  -  -  	scf
  663 D1:B08B -  -  -  -  	
  664 D1:B08B -  -  -  -  sdcomp_no_alpha_2 .equ $
  665 D1:B08B D2 A4 B0 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  666 D1:B08F -  -  -  -  	
  667 D1:B08F -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  668 D1:B08F -  -  -  -  	
  669 D1:B08F E5 -  -  -  	push hl
  670 D1:B090 67 -  -  -  	ld h,a;height
  671 D1:B091 68 -  -  -  	ld l,b;width
  672 D1:B092 ED 6C -  -  	mlt hl;number of pixels
  673 D1:B094 -  -  -  -  	;rounds up to nearest multiple of 8
  674 D1:B094 2B -  -  -  	dec hl
  675 D1:B095 CB 3C -  -  	srl h
  676 D1:B097 CB 1D -  -  	rr l
  677 D1:B099 CB 3C -  -  	srl h
  678 D1:B09B CB 1D -  -  	rr l 
  679 D1:B09D CB 3C -  -  	srl h 
  680 D1:B09F CB 1D -  -  	rr l 
  681 D1:B0A1 23 -  -  -  	inc hl 
  682 D1:B0A2 C1 -  -  -  	pop bc ;initial hl location
  683 D1:B0A3 -  -  -  -  	;add number of bytes to skip 
  684 D1:B0A3 09 -  -  -  	add hl,bc ;HL points to start of color data 
  685 D1:B0A4 -  -  -  -  	
  686 D1:B0A4 -  -  -  -  	
  687 D1:B0A4 -  -  -  -  	
  688 D1:B0A4 -  -  -  -  sdcomp_no_alpha_2_skip:
  689 D1:B0A4 -  -  -  -  
  690 D1:B0A4 -  -  -  -  	
  691 D1:B0A4 -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  692 D1:B0A4 -  -  -  -  
  693 D1:B0A4 -  -  -  -  	
  694 D1:B0A4 47 -  -  -  	ld b,a ;save for after
  695 D1:B0A5 -  -  -  -  	;GET LOCAL PALETTE DATA
  696 D1:B0A5 -  -  -  -  	
  697 D1:B0A5 37 -  -  -  	scf 
  698 D1:B0A6 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  699 D1:B0A6 D2 B0 B0 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  700 D1:B0AA -  -  -  -  	
  701 D1:B0AA 7E -  -  -  	ld a,(hl);color data 
  702 D1:B0AB 32 50 AF D1 	ld (sdcomp_indexed_color_data_1),a 
  703 D1:B0AF 23 -  -  -  	inc hl 
  704 D1:B0B0 -  -  -  -  	
  705 D1:B0B0 -  -  -  -  sdcomp_1bpc_1_skip:	
  706 D1:B0B0 -  -  -  -  
  707 D1:B0B0 -  -  -  -  
  708 D1:B0B0 37 -  -  -  	scf 
  709 D1:B0B1 -  -  -  -  sdcomp_2bpc_1 .equ $ 
  710 D1:B0B1 D2 BB B0 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  711 D1:B0B5 -  -  -  -  	
  712 D1:B0B5 7E -  -  -  	ld a,(hl);color data 
  713 D1:B0B6 32 44 AF D1 	ld (sdcomp_indexed_color_data_2),a 
  714 D1:B0BA 23 -  -  -  	inc hl 
  715 D1:B0BB -  -  -  -  	
  716 D1:B0BB -  -  -  -  sdcomp_2bpc_1_skip:	
  717 D1:B0BB -  -  -  -  
  718 D1:B0BB -  -  -  -  
  719 D1:B0BB 37 -  -  -  	scf 
  720 D1:B0BC -  -  -  -  sdcomp_3bpc_1 .equ $ 
  721 D1:B0BC DA CC B0 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  722 D1:B0C0 -  -  -  -  	
  723 D1:B0C0 7E -  -  -  	ld a,(hl);color data 
  724 D1:B0C1 32 32 AF D1 	ld (sdcomp_indexed_color_data_3),a 
  725 D1:B0C5 23 -  -  -  	inc hl 
  726 D1:B0C6 7E -  -  -  	ld a,(hl);color data 
  727 D1:B0C7 32 26 AF D1 	ld (sdcomp_indexed_color_data_4),a 
  728 D1:B0CB 23 -  -  -  	inc hl 
  729 D1:B0CC -  -  -  -  	
  730 D1:B0CC -  -  -  -  sdcomp_3bpc_1_skip:	
  731 D1:B0CC -  -  -  -  
  732 D1:B0CC -  -  -  -  	
  733 D1:B0CC D5 -  -  -  	push de ;loops/line data location
  734 D1:B0CD EB -  -  -  	ex de,hl
  735 D1:B0CE 78 -  -  -  	ld a,b
  736 D1:B0CF 01 00 00 00 	ld bc,0
  737 D1:B0D3 4F -  -  -  	ld c,a;height 
  738 D1:B0D4 09 -  -  -  	add hl,bc
  739 D1:B0D5 EB -  -  -  	ex de,hl;de points to data write location
  740 D1:B0D6 -  -  -  -  	
  741 D1:B0D6 -  -  -  -  	
  742 D1:B0D6 D9 -  -  -  	exx;in to shadow
  743 D1:B0D7 D1 -  -  -  	pop de 
  744 D1:B0D8 E1 -  -  -  	pop hl ;alpha data stored from earlier
  745 D1:B0D9 0E 80 -  -  	ld c,%10000000;alpha mask
  746 D1:B0DB D9 -  -  -  	exx;out 
  747 D1:B0DC 0E 80 -  -  	ld c,%10000000;color mask
  748 D1:B0DE -  -  -  -  	
  749 D1:B0DE -  -  -  -  	;HL now points to pixel color data 
  750 D1:B0DE -  -  -  -  	;HL' points to pixel alpha data 
  751 D1:B0DE -  -  -  -  	;C holds color mask
  752 D1:B0DE -  -  -  -  	;C' holds alpha mask
  753 D1:B0DE -  -  -  -  	;DE' holds loops/line output data location
  754 D1:B0DE -  -  -  -  	;DE holds main data output location
  755 D1:B0DE -  -  -  -  	;A holds height
  756 D1:B0DE -  -  -  -  	;A' holds bits remaining in row
  757 D1:B0DE -  -  -  -  
  758 D1:B0DE -  -  -  -  
  759 D1:B0DE 37 -  -  -  	scf 
  760 D1:B0DF -  -  -  -  sdcomp_flip_setup .equ $
  761 D1:B0DF DA EF B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  762 D1:B0E3 -  -  -  -  
  763 D1:B0E3 -  -  -  -  	
  764 D1:B0E3 2B -  -  -  	dec hl;dec color pointer
  765 D1:B0E4 0E 01 -  -  	ld c, %00000001
  766 D1:B0E6 D9 -  -  -  	exx;to shadow 
  767 D1:B0E7 2B -  -  -  	dec hl;dec alpha pointer
  768 D1:B0E8 0E 01 -  -  	ld c, %00000001;alpha mask
  769 D1:B0EA CD 8D AF D1 	call sdcomp_traverse_initial
  770 D1:B0EE D9 -  -  -  	exx ;out of shadow 
  771 D1:B0EF -  -  -  -  	
  772 D1:B0EF -  -  -  -  	
  773 D1:B0EF -  -  -  -  
  774 D1:B0EF -  -  -  -  	;TODO jump to BG routine here
  775 D1:B0EF -  -  -  -  	;END SETUP ======================================================================================================
  776 D1:B0EF -  -  -  -  	
  777 D1:B0EF -  -  -  -  	
  778 D1:B0EF -  -  -  -  sdcomp_find_gap_length:
  779 D1:B0EF -  -  -  -  	
  780 D1:B0EF -  -  -  -  	
  781 D1:B0EF -  -  -  -  	
  782 D1:B0EF -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  783 D1:B0EF -  -  -  -  ;this will occur if:
  784 D1:B0EF -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  785 D1:B0EF -  -  -  -  ;
  786 D1:B0EF -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  787 D1:B0EF -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  788 D1:B0EF -  -  -  -  	
  789 D1:B0EF D9 -  -  -  	exx ;to shadow
  790 D1:B0F0 -  -  -  -  	
  791 D1:B0F0 -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  792 D1:B0F0 06 00 -  -  	ld b,0;00 pairs found 
  793 D1:B0F2 3E 00 -  -  	ld a,0 ;reset
  794 D1:B0F4 32 F1 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  795 D1:B0F8 -  -  -  -  
  796 D1:B0F8 -  -  -  -  sdcomp_find_gap_length_loop:
  797 D1:B0F8 -  -  -  -  
  798 D1:B0F8 37 -  -  -  	scf 
  799 D1:B0F9 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  800 D1:B0F9 DA 22 B1 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  801 D1:B0FD -  -  -  -  	
  802 D1:B0FD -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  803 D1:B0FD -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  804 D1:B0FD 3E 00 -  -  	ld a,0
  805 D1:B0FF 80 -  -  -  	add a,b 
  806 D1:B100 -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  807 D1:B100 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  808 D1:B101 47 -  -  -  	ld b,a 
  809 D1:B102 3E 00 -  -  	ld a,%00000000 ;nop 
  810 D1:B104 32 00 B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  811 D1:B108 3E DA -  -  	ld a,%11011010;jp c
  812 D1:B10A 32 E8 AD D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  813 D1:B10E 32 F9 B0 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  814 D1:B112 -  -  -  -  	
  815 D1:B112 37 -  -  -  	scf
  816 D1:B113 -  -  -  -  sdcomp_flip_traverse .equ $
  817 D1:B113 D4 7F AF D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  818 D1:B117 -  -  -  -  		
  819 D1:B117 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  820 D1:B117 3A CE B1 D1 	ld a,(sdcomp_loops_per_line_counter)
  821 D1:B11B 12 -  -  -  	ld (de),a ;write loops/line data 
  822 D1:B11C 13 -  -  -  	inc de
  823 D1:B11D -  -  -  -  	
  824 D1:B11D -  -  -  -  	
  825 D1:B11D 37 -  -  -  	scf 
  826 D1:B11E -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached TODO move to after gap length check to avoid writing useless pixels at end of sprite 
  827 D1:B11E D2 DE B1 D1 	jp nc,sdcomp_end
  828 D1:B122 -  -  -  -  
  829 D1:B122 -  -  -  -  	
  830 D1:B122 -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  831 D1:B122 CD 6C AE D1 	call sdcomp_get_next_alpha_pair
  832 D1:B126 -  -  -  -  	;call write_a_to_ram
  833 D1:B126 04 -  -  -  	inc b 
  834 D1:B127 -  -  -  -  
  835 D1:B127 F5 -  -  -  	push af ;TEST
  836 D1:B128 3E AB -  -  	ld a,$AB;TEST
  837 D1:B12A CD 3A AA D1 	call write_a_to_ram
  838 D1:B12E -  -  -  -  	
  839 D1:B12E -  -  -  -  	;call write_a_to_ram
  840 D1:B12E F1 -  -  -  	pop af ;TEST
  841 D1:B12F -  -  -  -  	
  842 D1:B12F B7 -  -  -  	or a
  843 D1:B130 CA F8 B0 D1 	jp z,sdcomp_find_gap_length_loop
  844 D1:B134 -  -  -  -  	
  845 D1:B134 -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  846 D1:B134 -  -  -  -  	
  847 D1:B134 F5 -  -  -  	push af; save leading pixel alpha data 
  848 D1:B135 -  -  -  -  	;B holds number of 00 pairs + 1
  849 D1:B135 -  -  -  -  	
  850 D1:B135 3E AA -  -  	ld a,$AA ;test
  851 D1:B137 CD 3A AA D1 	call write_a_to_ram
  852 D1:B13B 78 -  -  -  	ld a,b ;test
  853 D1:B13C CD 3A AA D1 	call write_a_to_ram
  854 D1:B140 -  -  -  -  	
  855 D1:B140 -  -  -  -  	
  856 D1:B140 -  -  -  -  	
  857 D1:B140 -  -  -  -  	;Write gap length data to output
  858 D1:B140 78 -  -  -  	ld a,b 
  859 D1:B141 D9 -  -  -  	exx;out of shadow 
  860 D1:B142 12 -  -  -  	ld (de),a;GAP LENGTH 
  861 D1:B143 13 -  -  -  	inc de 
  862 D1:B144 D9 -  -  -  	exx;into shadow 	
  863 D1:B145 -  -  -  -  	
  864 D1:B145 -  -  -  -  	
  865 D1:B145 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  866 D1:B145 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  867 D1:B146 -  -  -  -  	
  868 D1:B146 37 -  -  -  	scf 
  869 D1:B147 -  -  -  -  sdcomp_fast_1 .equ $ 
  870 D1:B147 D2 51 B1 D1 	jp nc, sdcomp_ldir_start 
  871 D1:B14B -  -  -  -  	
  872 D1:B14B D9 -  -  -  	exx;out of shadow
  873 D1:B14C CD F8 AF D1 	call sdcomp_write_leading_or_end_pixels
  874 D1:B150 D9 -  -  -  	exx;into shadow 
  875 D1:B151 -  -  -  -  	
  876 D1:B151 -  -  -  -  
  877 D1:B151 -  -  -  -  	
  878 D1:B151 -  -  -  -  ;LDIR ==============================================================================================================	
  879 D1:B151 -  -  -  -  	;Count number of 11 pairs for LDIR section
  880 D1:B151 -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  881 D1:B151 -  -  -  -  	;
  882 D1:B151 -  -  -  -  	
  883 D1:B151 -  -  -  -  	;If ending is 11 -> 00 
  884 D1:B151 -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  885 D1:B151 -  -  -  -  	;Will need to reduce b by 1 
  886 D1:B151 -  -  -  -  	
  887 D1:B151 -  -  -  -  	;If ending is 11 ->01/10
  888 D1:B151 -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  889 D1:B151 -  -  -  -  	
  890 D1:B151 -  -  -  -  sdcomp_ldir_start:
  891 D1:B151 -  -  -  -  
  892 D1:B151 -  -  -  -  ;	ld a, %11010010 ;jp nc 
  893 D1:B151 -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  894 D1:B151 -  -  -  -  
  895 D1:B151 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  896 D1:B153 -  -  -  -  sdcomp_ldir_loop:
  897 D1:B153 CD 6C AE D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  898 D1:B157 04 -  -  -  	inc b 
  899 D1:B158 -  -  -  -  	
  900 D1:B158 F5 -  -  -  	push af 
  901 D1:B159 3E DE -  -  	ld a,$DE 
  902 D1:B15B CD 3A AA D1 	call write_a_to_ram
  903 D1:B15F F1 -  -  -  	pop af
  904 D1:B160 CD 3A AA D1 	call write_a_to_ram
  905 D1:B164 -  -  -  -  	
  906 D1:B164 -  -  -  -  ;	scf 
  907 D1:B164 -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  908 D1:B164 -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  909 D1:B164 -  -  -  -  	
  910 D1:B164 EE FF -  -  	xor %11111111;flip all bits 
  911 D1:B166 CA 53 B1 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  912 D1:B16A EE FF -  -  	xor %11111111 ; flip back 
  913 D1:B16C -  -  -  -  sdcomp_ldir_loop_end:
  914 D1:B16C -  -  -  -  
  915 D1:B16C -  -  -  -  	
  916 D1:B16C -  -  -  -  	;at this point b holds # 11 pairs +1 
  917 D1:B16C 37 -  -  -  	scf 
  918 D1:B16D -  -  -  -  sdcomp_fast_2 .equ $ 
  919 D1:B16D D2 8E B1 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  920 D1:B171 -  -  -  -  
  921 D1:B171 -  -  -  -  	
  922 D1:B171 -  -  -  -  	
  923 D1:B171 05 -  -  -  	dec b ;b holds # 11 pairs 
  924 D1:B172 CA AE B1 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  925 D1:B176 B7 -  -  -  	or a
  926 D1:B177 C2 8E B1 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  927 D1:B17B -  -  -  -  	
  928 D1:B17B -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  929 D1:B17B -  -  -  -  	
  930 D1:B17B 3E DF -  -  	ld a,$DF
  931 D1:B17D CD 3A AA D1 	call write_a_to_ram
  932 D1:B181 -  -  -  -  	
  933 D1:B181 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  934 D1:B181 -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  935 D1:B181 3E 01 -  -  	ld a,1;start w 1 gap len
  936 D1:B183 32 F1 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  937 D1:B187 3E FF -  -  	ld a,$ff;ending pixels 11
  938 D1:B189 -  -  -  -  	
  939 D1:B189 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  940 D1:B18A CA AE B1 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  941 D1:B18E -  -  -  -  	;b holds ldir length 
  942 D1:B18E -  -  -  -  	
  943 D1:B18E -  -  -  -  
  944 D1:B18E -  -  -  -  ;b holds ldir length, a holds ending pixels
  945 D1:B18E -  -  -  -  sdcomp_ldir_write:
  946 D1:B18E -  -  -  -  
  947 D1:B18E -  -  -  -  	;b holds 11 pairs found 
  948 D1:B18E F5 -  -  -  	push af;TEST
  949 D1:B18F 3E DA -  -  	ld a,$DA 
  950 D1:B191 CD 3A AA D1 	call write_a_to_ram
  951 D1:B195 78 -  -  -  	ld a,b 
  952 D1:B196 CD 3A AA D1 	call write_a_to_ram
  953 D1:B19A F1 -  -  -  	pop af ;TEST
  954 D1:B19B -  -  -  -  
  955 D1:B19B F5 -  -  -  	push af;save ending pixels
  956 D1:B19C 78 -  -  -  	ld a,b
  957 D1:B19D D9 -  -  -  	exx ;out 
  958 D1:B19E 12 -  -  -  	ld (de),a;write ldir length
  959 D1:B19F 13 -  -  -  	inc de 
  960 D1:B1A0 CD E4 AF D1 	call sdcomp_write_ldir_data_loop
  961 D1:B1A4 -  -  -  -  
  962 D1:B1A4 F1 -  -  -  	pop af;return ending pixels
  963 D1:B1A5 -  -  -  -  	
  964 D1:B1A5 37 -  -  -  	scf
  965 D1:B1A6 -  -  -  -  sdcomp_fast_3 .equ $ 
  966 D1:B1A6 D2 CD B1 D1 	jp nc,sdcomp_inc_loops_per_line
  967 D1:B1AA -  -  -  -  	
  968 D1:B1AA C3 C1 B1 D1 	jp sdcomp_write_end_pixels
  969 D1:B1AE -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  970 D1:B1AE -  -  -  -  
  971 D1:B1AE F5 -  -  -  	push af ;TEST
  972 D1:B1AF -  -  -  -  
  973 D1:B1AF 3E DB -  -  	ld a,$DB
  974 D1:B1B1 CD 3A AA D1 	call write_a_to_ram
  975 D1:B1B5 F1 -  -  -  	pop af ;TEST
  976 D1:B1B6 CD 3A AA D1 	call write_a_to_ram
  977 D1:B1BA -  -  -  -  
  978 D1:B1BA F5 -  -  -  	push af;save end pixels
  979 D1:B1BB -  -  -  -  	
  980 D1:B1BB D9 -  -  -  	exx;out of shadow
  981 D1:B1BC 3E 00 -  -  	ld a,0
  982 D1:B1BE 12 -  -  -  	ld (de),a ;write 0 as ldir length
  983 D1:B1BF 13 -  -  -  	inc de 
  984 D1:B1C0 F1 -  -  -  	pop af;return ending pixels
  985 D1:B1C1 -  -  -  -  
  986 D1:B1C1 -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  987 D1:B1C1 -  -  -  -  
  988 D1:B1C1 -  -  -  -  sdcomp_write_end_pixels:
  989 D1:B1C1 -  -  -  -  ;not in shadow
  990 D1:B1C1 -  -  -  -  	
  991 D1:B1C1 -  -  -  -  	;test
  992 D1:B1C1 F5 -  -  -  	push af 
  993 D1:B1C2 3E E0 -  -  	ld a,$E0
  994 D1:B1C4 CD 3A AA D1 	call write_a_to_ram
  995 D1:B1C8 F1 -  -  -  	pop af 
  996 D1:B1C9 -  -  -  -  	
  997 D1:B1C9 -  -  -  -  
  998 D1:B1C9 CD F8 AF D1 	call sdcomp_write_leading_or_end_pixels
  999 D1:B1CD -  -  -  -  	
 1000 D1:B1CD -  -  -  -  	
 1001 D1:B1CD -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
 1002 D1:B1CD -  -  -  -  	;ld a,2
 1003 D1:B1CD -  -  -  -  	;dec a 
 1004 D1:B1CD -  -  -  -  	;jp z,sdcomp_end
 1005 D1:B1CD -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
 1006 D1:B1CD -  -  -  -  
 1007 D1:B1CD -  -  -  -  sdcomp_inc_loops_per_line:	
 1008 D1:B1CD -  -  -  -  	;INC LOOP/LINE count
 1009 D1:B1CD -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
 1010 D1:B1CD 3E 00 -  -  	ld a,0;inc number of loops
 1011 D1:B1CF 3C -  -  -  	inc a 
 1012 D1:B1D0 32 CE B1 D1 	ld (sdcomp_loops_per_line_counter),a
 1013 D1:B1D4 -  -  -  -  
 1014 D1:B1D4 -  -  -  -  	; scf 
 1015 D1:B1D4 -  -  -  -  ; sdcomp_write_loops_per_line_flag .equ $
 1016 D1:B1D4 -  -  -  -  	; jp c, sdcomp_write_loops_per_line_skip
 1017 D1:B1D4 -  -  -  -  	; exx 
 1018 D1:B1D4 -  -  -  -  	; ld a,(sdcomp_loops_per_line_counter)
 1019 D1:B1D4 -  -  -  -  	; ld (de),a ;write loops/line data 
 1020 D1:B1D4 -  -  -  -  	; inc de
 1021 D1:B1D4 -  -  -  -  	; exx 
 1022 D1:B1D4 -  -  -  -  	; ld a,%11011010;jp c
 1023 D1:B1D4 -  -  -  -  	; ld (sdcomp_write_loops_per_line_flag),a
 1024 D1:B1D4 -  -  -  -  
 1025 D1:B1D4 -  -  -  -  ; sdcomp_write_loops_per_line_skip:
 1026 D1:B1D4 -  -  -  -  
 1027 D1:B1D4 -  -  -  -  	
 1028 D1:B1D4 3E EA -  -  	ld a,$EA
 1029 D1:B1D6 CD 3A AA D1 	call write_a_to_ram
 1030 D1:B1DA -  -  -  -  	
 1031 D1:B1DA -  -  -  -  	
 1032 D1:B1DA C3 EF B0 D1 	jp sdcomp_find_gap_length
 1033 D1:B1DE -  -  -  -  
 1034 D1:B1DE -  -  -  -  sdcomp_end:
 1035 D1:B1DE -  -  -  -  	
 1036 D1:B1DE 3E 69 -  -  	ld a,$69
 1037 D1:B1E0 CD 3A AA D1 	call write_a_to_ram
 1038 D1:B1E4 -  -  -  -  	
 1039 D1:B1E4 3E DA -  -  	ld a,%11011010;jp c
 1040 D1:B1E6 32 1E B1 D1 	ld (sdcomp_end_reached_flag),a 
 1041 D1:B1EA C9 -  -  -  	ret 
 1042 D1:B1EB -  -  -  -  
 1043 D1:B1EB -  -  -  -  
 1044 D1:B1EB -  -  -  -  ;bit orders
 1045 D1:B1EB -  -  -  -  ;	noflip   flip 
 1046 D1:B1EB -  -  -  -  ;4bpp 3210 	 0123
 1047 D1:B1EB -  -  -  -  ;3bpp 210	 012
 1048 D1:B1EB -  -  -  -  ;2bpp 10	 01
 1049 D1:B1EB -  -  -  -  ;1bpp 0		 0
 1050 D1:B1EB -  -  -  -  
 1051 D1:B1EB -  -  -  -  
 1052 D1:B1EB -  -  -  -  sdcomp_set_0bpc:
 1053 D1:B1EB 3E DA -  -  	ld a,%11011010;jp c
 1054 D1:B1ED 32 CF AE D1 	ld (sdcomp_0bpc),a
 1055 D1:B1F1 -  -  -  -  	
 1056 D1:B1F1 32 B1 B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1057 D1:B1F5 32 BC B0 D1 	ld (sdcomp_3bpc_1),a 
 1058 D1:B1F9 -  -  -  -  	
 1059 D1:B1F9 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1060 D1:B1FB 32 A6 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1061 D1:B1FF 3E 00 -  -  	ld a,%00000000
 1062 D1:B201 32 A8 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1063 D1:B205 C9 -  -  -  	ret 
 1064 D1:B206 -  -  -  -  	
 1065 D1:B206 -  -  -  -  sdcomp_set_1bpc:
 1066 D1:B206 3E DA -  -  	ld a,%11011010;jp c
 1067 D1:B208 32 E1 AE D1 	ld (sdcomp_1bpc),a
 1068 D1:B20C -  -  -  -  	
 1069 D1:B20C 32 B1 B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1070 D1:B210 32 BC B0 D1 	ld (sdcomp_3bpc_1),a 
 1071 D1:B214 -  -  -  -  	
 1072 D1:B214 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1073 D1:B216 32 A6 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1074 D1:B21A -  -  -  -  	
 1075 D1:B21A -  -  -  -  	
 1076 D1:B21A 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1077 D1:B21C 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1078 D1:B220 -  -  -  -  	
 1079 D1:B220 3E 80 -  -  	ld a,%10000000
 1080 D1:B222 32 A8 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1081 D1:B226 -  -  -  -  	
 1082 D1:B226 C9 -  -  -  	ret 
 1083 D1:B227 -  -  -  -  
 1084 D1:B227 -  -  -  -  sdcomp_set_2bpc:
 1085 D1:B227 3E DA -  -  	ld a,%11011010;jp c
 1086 D1:B229 32 F3 AE D1 	ld (sdcomp_2bpc),a
 1087 D1:B22D 32 BC B0 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1088 D1:B231 -  -  -  -  	
 1089 D1:B231 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1090 D1:B233 32 A6 B0 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1091 D1:B237 32 B1 B0 D1 	ld (sdcomp_2bpc_1),a 
 1092 D1:B23B -  -  -  -  	
 1093 D1:B23B 37 -  -  -  	scf 
 1094 D1:B23C -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1095 D1:B23C D2 4D B2 D1 	jp nc, sdcomp_2bpc_flip
 1096 D1:B240 -  -  -  -  	
 1097 D1:B240 3E CB -  -  	ld a,%11001011 ;set 1,e
 1098 D1:B242 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1099 D1:B246 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1100 D1:B248 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1101 D1:B24C C9 -  -  -  	ret 
 1102 D1:B24D -  -  -  -  	
 1103 D1:B24D -  -  -  -  sdcomp_2bpc_flip:
 1104 D1:B24D 3E CB -  -  	ld a,%11001011 ;set 1,e
 1105 D1:B24F 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1106 D1:B253 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1107 D1:B255 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1108 D1:B259 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1109 D1:B25B 32 A1 AF D1 	ld (sdcomp_traverse_2bpp),a 
 1110 D1:B25F 3E C0 -  -  	ld a,%11000000
 1111 D1:B261 32 A8 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1112 D1:B265 C9 -  -  -  	ret 
 1113 D1:B266 -  -  -  -  
 1114 D1:B266 -  -  -  -  
 1115 D1:B266 -  -  -  -  sdcomp_set_3bpc:
 1116 D1:B266 3E DA -  -  	ld a,%11011010;jp c
 1117 D1:B268 32 05 AF D1 	ld (sdcomp_3bpc),a
 1118 D1:B26C -  -  -  -  	
 1119 D1:B26C 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1120 D1:B26E 32 A6 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1121 D1:B272 32 B1 B0 D1 	ld (sdcomp_2bpc_1),a 
 1122 D1:B276 32 BC B0 D1 	ld (sdcomp_3bpc_1),a 
 1123 D1:B27A -  -  -  -  	
 1124 D1:B27A 37 -  -  -  	scf 
 1125 D1:B27B -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1126 D1:B27B D2 92 B2 D1 	jp nc, sdcomp_3bpc_flip	
 1127 D1:B27F -  -  -  -  	
 1128 D1:B27F 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1129 D1:B281 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1130 D1:B285 3E CB -  -  	ld a,%11001011 ;set 1,e
 1131 D1:B287 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1132 D1:B28B 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1133 D1:B28D 32 03 AF D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1134 D1:B291 C9 -  -  -  	ret 
 1135 D1:B292 -  -  -  -  	
 1136 D1:B292 -  -  -  -  sdcomp_3bpc_flip:
 1137 D1:B292 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1138 D1:B294 32 03 AF D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1139 D1:B298 3E CB -  -  	ld a,%11001011 ;set 1,e
 1140 D1:B29A 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1141 D1:B29E 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1142 D1:B2A0 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1143 D1:B2A4 -  -  -  -  	
 1144 D1:B2A4 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1145 D1:B2A6 32 A1 AF D1 	ld (sdcomp_traverse_2bpp),a 
 1146 D1:B2AA 32 A3 AF D1 	ld (sdcomp_traverse_3bpp),a 
 1147 D1:B2AE 3E E0 -  -  	ld a,%11100000
 1148 D1:B2B0 32 A8 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1149 D1:B2B4 -  -  -  -  	
 1150 D1:B2B4 C9 -  -  -  	ret 
 1151 D1:B2B5 -  -  -  -  
 1152 D1:B2B5 -  -  -  -  sdcomp_set_4bpc:
 1153 D1:B2B5 3E DA -  -  	ld a,%11011010;jp c
 1154 D1:B2B7 -  -  -  -  
 1155 D1:B2B7 32 A6 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1156 D1:B2BB 32 B1 B0 D1 	ld (sdcomp_2bpc_1),a 
 1157 D1:B2BF 32 BC B0 D1 	ld (sdcomp_3bpc_1),a 
 1158 D1:B2C3 -  -  -  -  	
 1159 D1:B2C3 37 -  -  -  	scf 
 1160 D1:B2C4 -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1161 D1:B2C4 D2 E1 B2 D1 	jp nc, sdcomp_4bpc_flip	
 1162 D1:B2C8 3E DB -  -  	ld a,%11011011 ;set 3,e
 1163 D1:B2CA 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1164 D1:B2CE 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1165 D1:B2D0 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1166 D1:B2D4 3E CB -  -  	ld a,%11001011 ;set 1,e
 1167 D1:B2D6 32 03 AF D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1168 D1:B2DA 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1169 D1:B2DC 32 15 AF D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1170 D1:B2E0 C9 -  -  -  	ret 
 1171 D1:B2E1 -  -  -  -  sdcomp_4bpc_flip:
 1172 D1:B2E1 3E DB -  -  	ld a,%11011011 ;set 3,e
 1173 D1:B2E3 32 15 AF D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1174 D1:B2E7 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1175 D1:B2E9 32 03 AF D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1176 D1:B2ED 3E CB -  -  	ld a,%11001011 ;set 1,e
 1177 D1:B2EF 32 F1 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1178 D1:B2F3 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1179 D1:B2F5 32 DF AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1180 D1:B2F9 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1181 D1:B2FB 32 A1 AF D1 	ld (sdcomp_traverse_2bpp),a 
 1182 D1:B2FF 32 A3 AF D1 	ld (sdcomp_traverse_3bpp),a 
 1183 D1:B303 32 A5 AF D1 	ld (sdcomp_traverse_4bpp),a 
 1184 D1:B307 -  -  -  -  	
 1185 D1:B307 3E F0 -  -  	ld a,%11110000
 1186 D1:B309 32 A8 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1187 D1:B30D -  -  -  -  	
 1188 D1:B30D C9 -  -  -  	ret 
 1189 D1:B30E -  -  -  -  	
 1190 D1:B30E -  -  -  -  	
 1191 D1:B30E -  -  -  -  sdcomp_set_noalpha:
 1192 D1:B30E 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1193 D1:B310 32 1A AE D1 	ld (sdcomp_no_alpha_1),a 
 1194 D1:B314 3E DA -  -  	ld a,%11011010;jp c
 1195 D1:B316 32 8B B0 D1 	ld (sdcomp_no_alpha_2),a 
 1196 D1:B31A 32 99 AF D1 	ld (sdcomp_no_alpha_3),a 
 1197 D1:B31E C9 -  -  -  	ret
 1198 D1:B31F -  -  -  -  
 1199 D1:B31F -  -  -  -  
 1200 D1:B31F -  -  -  -  sdcomp_set_offset:
 1201 D1:B31F 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1202 D1:B321 32 4E AE D1 	ld (sdcomp_offset_1),a 
 1203 D1:B325 32 FC AD D1 	ld (sdcomp_bit_offset),a 
 1204 D1:B329 3E 04 -  -  	ld a,%00000100 ;inc b 
 1205 D1:B32B 32 58 B0 D1 	ld (sdcomp_offset_2),a 
 1206 D1:B32F -  -  -  -  	
 1207 D1:B32F C9 -  -  -  	ret 
 1208 D1:B330 -  -  -  -  	
 1209 D1:B330 -  -  -  -  sdcomp_set_flip:
 1210 D1:B330 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1211 D1:B332 32 D3 AD D1 	ld (sdcomp_flip_bitstream),a
 1212 D1:B336 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1213 D1:B338 32 D5 AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1214 D1:B33C 3E DC -  -  	ld a, %11011100 ;call c 
 1215 D1:B33E 32 13 B1 D1 	ld (sdcomp_flip_traverse),a 
 1216 D1:B342 -  -  -  -  	
 1217 D1:B342 3E DA -  -  	ld a,%11011010;jp c
 1218 D1:B344 32 3C B2 D1 	ld (sdcomp_flip_2bpc),a
 1219 D1:B348 32 7B B2 D1 	ld (sdcomp_flip_3bpc),a
 1220 D1:B34C 32 C4 B2 D1 	ld (sdcomp_flip_4bpc),a
 1221 D1:B350 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1222 D1:B352 32 DF B0 D1 	ld (sdcomp_flip_setup),a 
 1223 D1:B356 -  -  -  -  	
 1224 D1:B356 C9 -  -  -  	ret 
 1225 D1:B357 -  -  -  -  	
 1226 D1:B357 -  -  -  -  
 1227 D1:B357 -  -  -  -  
 1228 D1:B357 -  -  -  -  sdcomp_set_fast:
 1229 D1:B357 3E DA -  -  	ld a,%11011010;jp c
 1230 D1:B359 32 47 B1 D1 	ld(sdcomp_fast_1),a 
 1231 D1:B35D 32 6D B1 D1 	ld(sdcomp_fast_2),a 
 1232 D1:B361 32 A6 B1 D1 	ld(sdcomp_fast_3),a 
 1233 D1:B365 -  -  -  -  	
 1234 D1:B365 C9 -  -  -  	ret 
 1235 D1:B366 -  -  -  -  
 1236 D1:B366 -  -  -  -  
 1237 D1:B366 -  -  -  -  
 1238 D1:B366 -  -  -  -  
 1239 D1:B366 -  -  -  -  
 1240 D1:B366 -  -  -  -  
 1241 D1:B366 -  -  -  -  
Listing for file "ascent.asm"
  274 D1:B366 -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B366 -  -  -  -  
    2 D1:B366 -  -  -  -  
    3 D1:B366 -  -  -  -  draw_mg:
    4 D1:B366 2A 5A AA D1 	ld hl,(draw_buffer)
    5 D1:B36A 22 34 B4 D1 	ld (dfgs_vram_top_1),hl
    6 D1:B36E 22 9A B4 D1 	ld (dfgs_vram_top_2),hl
    7 D1:B372 01 60 95 00 	ld bc,160*239
    8 D1:B376 09 -  -  -  	add hl,bc
    9 D1:B377 22 08 B5 D1 	ld (dfgs_vram_bottom_1),hl 
   10 D1:B37B 22 D7 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   11 D1:B37F 22 6E B5 D1 	ld (dfgs_vram_bottom_3),hl 
   12 D1:B383 22 9C B5 D1 	ld (dfgs_vram_bottom_4),hl 
   13 D1:B387 -  -  -  -  	
   14 D1:B387 2A 54 AA D1 	ld hl,(cam_pos)
   15 D1:B38B CB 3C -  -  	srl h
   16 D1:B38D CB 1D -  -  	rr l;div by 2
   17 D1:B38F 01 EF 00 00 	ld bc,239
   18 D1:B393 09 -  -  -  	add hl,bc 
   19 D1:B394 7D -  -  -  	ld a,l ;lsb cam pos 
   20 D1:B395 32 1A B4 D1 	ld (dfgs_cam_height_1),a
   21 D1:B399 32 78 B4 D1 	ld (dfgs_cam_height_2),a
   22 D1:B39D 32 4D B5 D1 	ld (dfgs_cam_height_3),a
   23 D1:B3A1 -  -  -  -  	
   24 D1:B3A1 01 00 00 00 	ld bc,0
   25 D1:B3A5 4C -  -  -  	ld c,h;msb ccam pos 
   26 D1:B3A6 0C -  -  -  	inc c 
   27 D1:B3A7 21 9B C9 D1 	ld hl,MG_Data_frame_table
   28 D1:B3AB 09 -  -  -  	add hl,bc
   29 D1:B3AC 09 -  -  -  	add hl,bc 
   30 D1:B3AD 09 -  -  -  	add hl,bc 	
   31 D1:B3AE ED 27 -  -  	ld hl,(hl);upper frame 
   32 D1:B3B0 -  -  -  -  	
   33 D1:B3B0 CD 00 B4 D1 	call draw_fg_sprites
   34 D1:B3B4 C9 -  -  -  	ret
   35 D1:B3B5 -  -  -  -  
   36 D1:B3B5 -  -  -  -  
   37 D1:B3B5 -  -  -  -  draw_fg:
   38 D1:B3B5 2A 5A AA D1 	ld hl,(draw_buffer)
   39 D1:B3B9 22 34 B4 D1 	ld (dfgs_vram_top_1),hl
   40 D1:B3BD 22 9A B4 D1 	ld (dfgs_vram_top_2),hl
   41 D1:B3C1 01 60 95 00 	ld bc,160*239
   42 D1:B3C5 09 -  -  -  	add hl,bc
   43 D1:B3C6 22 08 B5 D1 	ld (dfgs_vram_bottom_1),hl 
   44 D1:B3CA 22 D7 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   45 D1:B3CE 22 6E B5 D1 	ld (dfgs_vram_bottom_3),hl 
   46 D1:B3D2 22 9C B5 D1 	ld (dfgs_vram_bottom_4),hl 
   47 D1:B3D6 -  -  -  -  	
   48 D1:B3D6 2A 54 AA D1 	ld hl,(cam_pos)
   49 D1:B3DA 01 EF 00 00 	ld bc,239
   50 D1:B3DE 09 -  -  -  	add hl,bc 
   51 D1:B3DF 7D -  -  -  	ld a,l ;lsb cam pos 
   52 D1:B3E0 32 1A B4 D1 	ld (dfgs_cam_height_1),a
   53 D1:B3E4 32 78 B4 D1 	ld (dfgs_cam_height_2),a
   54 D1:B3E8 32 4D B5 D1 	ld (dfgs_cam_height_3),a
   55 D1:B3EC -  -  -  -  	
   56 D1:B3EC 01 00 00 00 	ld bc,0
   57 D1:B3F0 4C -  -  -  	ld c,h;msb ccam pos 
   58 D1:B3F1 0C -  -  -  	inc c 
   59 D1:B3F2 21 BB C0 D1 	ld hl,FG_Data_frame_table
   60 D1:B3F6 09 -  -  -  	add hl,bc
   61 D1:B3F7 09 -  -  -  	add hl,bc 
   62 D1:B3F8 09 -  -  -  	add hl,bc 	
   63 D1:B3F9 ED 27 -  -  	ld hl,(hl);upper frame 
   64 D1:B3FB -  -  -  -  	
   65 D1:B3FB CD 00 B4 D1 	call draw_fg_sprites
   66 D1:B3FF C9 -  -  -  	ret
   67 D1:B400 -  -  -  -  
   68 D1:B400 -  -  -  -  
   69 D1:B400 -  -  -  -  
   70 D1:B400 -  -  -  -  
   71 D1:B400 -  -  -  -  ;hl = upper frame data
   72 D1:B400 -  -  -  -   
   73 D1:B400 -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   74 D1:B400 -  -  -  -  draw_fg_sprites:
   75 D1:B400 -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   76 D1:B400 ED 17 -  -  	ld de,(hl)
   77 D1:B402 ED 53 E3 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
   78 D1:B407 -  -  -  -  	
   79 D1:B407 11 00 00 00 	ld de,0
   80 D1:B40B 23 -  -  -  	inc hl 
   81 D1:B40C 23 -  -  -  	inc hl
   82 D1:B40D 23 -  -  -  	inc hl;past data table 
   83 D1:B40E -  -  -  -  	;hl is number of elements
   84 D1:B40E 08 -  -  -  	ex af,af' ;'
   85 D1:B40F 7E -  -  -  	ld a,(hl);number of elements
   86 D1:B410 08 -  -  -  	ex af,af' ;'
   87 D1:B411 23 -  -  -  	inc hl 
   88 D1:B412 -  -  -  -  	
   89 D1:B412 -  -  -  -  	
   90 D1:B412 -  -  -  -  dfgs_upper_loop:
   91 D1:B412 7E -  -  -  	ld a,(hl);sprite y value 
   92 D1:B413 23 -  -  -  	inc hl 
   93 D1:B414 96 -  -  -  	sub (hl);subtract height
   94 D1:B415 D2 23 B4 D1 	jp nc,dfgs_upper_skip;if no carry,skip
   95 D1:B419 -  -  -  -  	
   96 D1:B419 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   97 D1:B419 D6 00 -  -  	sub 0 ;subtract camera height lsb 
   98 D1:B41B DA 31 B4 D1 	jp c,dfgs_upper_cont
   99 D1:B41F CA 31 B4 D1 	jp z,dfgs_upper_cont 
  100 D1:B423 -  -  -  -  dfgs_upper_skip:
  101 D1:B423 23 -  -  -  	inc hl 
  102 D1:B424 23 -  -  -  	inc hl
  103 D1:B425 23 -  -  -  	inc hl;to y 
  104 D1:B426 08 -  -  -  	ex af,af';'
  105 D1:B427 3D -  -  -  	dec a 
  106 D1:B428 CA 63 B4 D1 	jp z,dfgs_mid_start 
  107 D1:B42C 08 -  -  -  	ex af,af';'
  108 D1:B42D C3 12 B4 D1 	jp dfgs_upper_loop
  109 D1:B431 -  -  -  -  	
  110 D1:B431 -  -  -  -  dfgs_upper_cont:
  111 D1:B431 -  -  -  -  	
  112 D1:B431 86 -  -  -  	add a,(hl);add height
  113 D1:B432 -  -  -  -  	;a now holds 0 indexed row, number of lines to skip drawing
  114 D1:B432 D9 -  -  -  	exx
  115 D1:B433 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  116 D1:B433 11 00 00 00 	ld de,0;load top of vram 
  117 D1:B437 D9 -  -  -  	exx;out shadow
  118 D1:B438 -  -  -  -  	
  119 D1:B438 CD C9 B5 D1 	call dfgs_setup_draw;toshadow	
  120 D1:B43C -  -  -  -  	
  121 D1:B43C CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  122 D1:B43E CA 4A B4 D1 	jp z,dfgs_upper_fast
  123 D1:B442 CD 9B AD D1 	call draw_slow_sprite_top_cut
  124 D1:B446 C3 4E B4 D1 	jp dfgs_upper_skip_2
  125 D1:B44A -  -  -  -  dfgs_upper_fast:
  126 D1:B44A CD 1D AD D1 	call draw_fast_sprite_top_cut
  127 D1:B44E -  -  -  -  dfgs_upper_skip_2:
  128 D1:B44E D9 -  -  -  	exx ;out of shadow, hl holds index
  129 D1:B44F -  -  -  -  	
  130 D1:B44F 11 00 00 00 	ld de,0 
  131 D1:B453 01 00 00 00 	ld bc,0
  132 D1:B457 23 -  -  -  	inc hl;to y 
  133 D1:B458 08 -  -  -  	ex af,af';'
  134 D1:B459 3D -  -  -  	dec a 
  135 D1:B45A CA 63 B4 D1 	jp z,dfgs_mid_start 
  136 D1:B45E 08 -  -  -  	ex af,af';'
  137 D1:B45F C3 12 B4 D1 	jp dfgs_upper_loop
  138 D1:B463 -  -  -  -  	
  139 D1:B463 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  140 D1:B463 -  -  -  -  	
  141 D1:B463 ED 17 -  -  	ld de,(hl)
  142 D1:B465 ED 53 E3 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  143 D1:B46A 11 00 00 00 	ld de,0
  144 D1:B46E 23 -  -  -  	inc hl 
  145 D1:B46F 23 -  -  -  	inc hl
  146 D1:B470 23 -  -  -  	inc hl;past data table 
  147 D1:B471 08 -  -  -  	ex af,af' ;'
  148 D1:B472 7E -  -  -  	ld a,(hl);number of elements
  149 D1:B473 08 -  -  -  	ex af,af' ;'
  150 D1:B474 23 -  -  -  	inc hl 
  151 D1:B475 -  -  -  -  dfgs_mid_loop:
  152 D1:B475 7E -  -  -  	ld a,(hl);y val 
  153 D1:B476 23 -  -  -  	inc hl ;to height
  154 D1:B477 -  -  -  -  dfgs_cam_height_2 .equ $ + 1
  155 D1:B477 D6 00 -  -  	sub 0;subtract cam pos
  156 D1:B479 DA C9 B4 D1 	jp c,dfgs_mid_sprite_below ;sprite is below camera pos, either full or bottom cut 
  157 D1:B47D CA C9 B4 D1 	jp z,dfgs_mid_sprite_below 
  158 D1:B481 -  -  -  -  	;sprite start is above camera pos, top cut 
  159 D1:B481 BE -  -  -  	cp (hl);a holds numb lines below sprite y , compare to height
  160 D1:B482 DA 98 B4 D1 	jp c,dfgs_mid_above_cont
  161 D1:B486 CA 98 B4 D1 	jp z,dfgs_mid_above_cont
  162 D1:B48A -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  163 D1:B48A 23 -  -  -  	inc hl 
  164 D1:B48B 23 -  -  -  	inc hl
  165 D1:B48C 23 -  -  -  	inc hl;to y 
  166 D1:B48D 08 -  -  -  	ex af,af';'
  167 D1:B48E 3D -  -  -  	dec a 
  168 D1:B48F CA 38 B5 D1 	jp z,dfgs_lower_start 
  169 D1:B493 08 -  -  -  	ex af,af';'
  170 D1:B494 C3 75 B4 D1 	jp dfgs_mid_loop
  171 D1:B498 -  -  -  -  	
  172 D1:B498 -  -  -  -  dfgs_mid_above_cont:
  173 D1:B498 -  -  -  -  	;a = lines to skip 
  174 D1:B498 D9 -  -  -  	exx
  175 D1:B499 -  -  -  -  dfgs_vram_top_2 .equ $ + 1 
  176 D1:B499 11 00 00 00 	ld de,0
  177 D1:B49D D9 -  -  -  	exx
  178 D1:B49E -  -  -  -  	
  179 D1:B49E CD C9 B5 D1 	call dfgs_setup_draw;toshadow
  180 D1:B4A2 -  -  -  -  	
  181 D1:B4A2 CB 45 -  -  	bit 0,l 
  182 D1:B4A4 CA B0 B4 D1 	jp z,dfgs_mid_top_fast
  183 D1:B4A8 CD 9B AD D1 	call draw_slow_sprite_top_cut
  184 D1:B4AC C3 B4 B4 D1 	jp dfgs_mid_top_slow
  185 D1:B4B0 -  -  -  -  dfgs_mid_top_fast:
  186 D1:B4B0 CD 1D AD D1 	call draw_fast_sprite_top_cut
  187 D1:B4B4 -  -  -  -  dfgs_mid_top_slow:
  188 D1:B4B4 D9 -  -  -  	exx;out shadwo
  189 D1:B4B5 11 00 00 00 	ld de,0 
  190 D1:B4B9 01 00 00 00 	ld bc,0
  191 D1:B4BD 23 -  -  -  	inc hl;to y 
  192 D1:B4BE 08 -  -  -  	ex af,af';'
  193 D1:B4BF 3D -  -  -  	dec a 
  194 D1:B4C0 CA 38 B5 D1 	jp z,dfgs_lower_start 
  195 D1:B4C4 08 -  -  -  	ex af,af';'
  196 D1:B4C5 C3 75 B4 D1 	jp dfgs_mid_loop
  197 D1:B4C9 -  -  -  -  
  198 D1:B4C9 -  -  -  -  dfgs_mid_sprite_below:;sprite start is = or below top of screen 
  199 D1:B4C9 -  -  -  -  	;can be full or bottom cut
  200 D1:B4C9 -  -  -  -  	;a holds distance of sprite below top of screen
  201 D1:B4C9 -  -  -  -  	;0 = top of screen 255 = 1 below ,254 = 2 below ... 17 = bottom of screen
  202 D1:B4C9 3D -  -  -  	dec a 
  203 D1:B4CA D6 10 -  -  	sub 16;a holds dist from bottom
  204 D1:B4CC DA 8A B4 D1 	jp c,dfgs_mid_skip
  205 D1:B4D0 BE -  -  -  	cp (hl);compare to height
  206 D1:B4D1 DA 06 B5 D1 	jp c,dfgs_mid_bottom_cut
  207 D1:B4D5 -  -  -  -  	
  208 D1:B4D5 -  -  -  -  	;full sprite
  209 D1:B4D5 D9 -  -  -  	exx
  210 D1:B4D6 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1
  211 D1:B4D6 11 00 00 00 	ld de,0
  212 D1:B4DA D9 -  -  -  	exx
  213 D1:B4DB CD C9 B5 D1 	call dfgs_setup_draw;toshadow
  214 D1:B4DF CB 45 -  -  	bit 0,l
  215 D1:B4E1 CA ED B4 D1 	jp z,dfgs_mid_full_fast
  216 D1:B4E5 CD 5D AD D1 	call draw_slow_sprite_full
  217 D1:B4E9 C3 F1 B4 D1 	jp dfgs_mid_full_slow
  218 D1:B4ED -  -  -  -  dfgs_mid_full_fast:
  219 D1:B4ED CD 43 AD D1 	call draw_fast_sprite_full
  220 D1:B4F1 -  -  -  -  dfgs_mid_full_slow:
  221 D1:B4F1 D9 -  -  -  	exx
  222 D1:B4F2 11 00 00 00 	ld de,0 
  223 D1:B4F6 01 00 00 00 	ld bc,0
  224 D1:B4FA 23 -  -  -  	inc hl;to y 
  225 D1:B4FB 08 -  -  -  	ex af,af';'
  226 D1:B4FC 3D -  -  -  	dec a 
  227 D1:B4FD CA 38 B5 D1 	jp z,dfgs_lower_start 
  228 D1:B501 08 -  -  -  	ex af,af';'
  229 D1:B502 C3 75 B4 D1 	jp dfgs_mid_loop
  230 D1:B506 -  -  -  -  	
  231 D1:B506 -  -  -  -  	
  232 D1:B506 -  -  -  -  dfgs_mid_bottom_cut:
  233 D1:B506 D9 -  -  -  	exx
  234 D1:B507 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1
  235 D1:B507 11 00 00 00 	ld de,0
  236 D1:B50B D9 -  -  -  	exx
  237 D1:B50C CD C9 B5 D1 	call dfgs_setup_draw
  238 D1:B510 3C -  -  -  	inc a;for bottom cuts
  239 D1:B511 CB 45 -  -  	bit 0,l 
  240 D1:B513 CA 1F B5 D1 	jp z,dfgs_mid_bottom_fast
  241 D1:B517 CD C8 AD D1 	call draw_slow_sprite_bottom_cut
  242 D1:B51B C3 23 B5 D1 	jp dfgs_mid_bottom_slow
  243 D1:B51F -  -  -  -  dfgs_mid_bottom_fast:
  244 D1:B51F CD 00 AD D1 	call draw_fast_sprite_bottom_cut
  245 D1:B523 -  -  -  -  dfgs_mid_bottom_slow:
  246 D1:B523 D9 -  -  -  	exx
  247 D1:B524 11 00 00 00 	ld de,0 
  248 D1:B528 01 00 00 00 	ld bc,0
  249 D1:B52C 23 -  -  -  	inc hl;to y 
  250 D1:B52D 08 -  -  -  	ex af,af';'
  251 D1:B52E 3D -  -  -  	dec a 
  252 D1:B52F CA 38 B5 D1 	jp z,dfgs_lower_start 
  253 D1:B533 08 -  -  -  	ex af,af';'
  254 D1:B534 C3 75 B4 D1 	jp dfgs_mid_loop
  255 D1:B538 -  -  -  -  	
  256 D1:B538 -  -  -  -  	
  257 D1:B538 -  -  -  -  	
  258 D1:B538 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  259 D1:B538 -  -  -  -  dfgs_lower_start:
  260 D1:B538 -  -  -  -  	
  261 D1:B538 ED 17 -  -  	ld de,(hl)
  262 D1:B53A ED 53 E3 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  263 D1:B53F 11 00 00 00 	ld de,0
  264 D1:B543 23 -  -  -  	inc hl 
  265 D1:B544 23 -  -  -  	inc hl
  266 D1:B545 23 -  -  -  	inc hl;past data table 
  267 D1:B546 -  -  -  -  	
  268 D1:B546 08 -  -  -  	ex af,af' ;'
  269 D1:B547 7E -  -  -  	ld a,(hl);number of elements
  270 D1:B548 08 -  -  -  	ex af,af' ;'
  271 D1:B549 23 -  -  -  	inc hl
  272 D1:B54A -  -  -  -  	
  273 D1:B54A 3E EF -  -  	ld a,239
  274 D1:B54C -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  275 D1:B54C D6 00 -  -  	sub 0;cam pos 
  276 D1:B54E D8 -  -  -  	ret c;if bottom frame is offscreen 
  277 D1:B54F C8 -  -  -  	ret z 
  278 D1:B550 -  -  -  -  	;a holds distance of top line of lower frame from bottom of screen starting from 1
  279 D1:B550 32 57 B5 D1 	ld (dfgs_lower_frame_height),a
  280 D1:B554 -  -  -  -  
  281 D1:B554 -  -  -  -  dfgs_lower_loop:
  282 D1:B554 7E -  -  -  	ld a,(hl);y
  283 D1:B555 23 -  -  -  	inc hl
  284 D1:B556 -  -  -  -  dfgs_lower_frame_height .equ $ + 1
  285 D1:B556 C6 00 -  -  	add a,0;add frame height 
  286 D1:B558 DA 67 B5 D1 	jp c,dfgs_lower_cont;sprite onscreen
  287 D1:B55C -  -  -  -  dfgs_lower_skip:;sprite offscreen
  288 D1:B55C 23 -  -  -  	inc hl
  289 D1:B55D 23 -  -  -  	inc hl
  290 D1:B55E 23 -  -  -  	inc hl;to y 
  291 D1:B55F 08 -  -  -  	ex af,af';'
  292 D1:B560 3D -  -  -  	dec a 
  293 D1:B561 C8 -  -  -  	ret z
  294 D1:B562 08 -  -  -  	ex af,af';'
  295 D1:B563 C3 54 B5 D1 	jp dfgs_lower_loop
  296 D1:B567 -  -  -  -  	
  297 D1:B567 -  -  -  -  dfgs_lower_cont:
  298 D1:B567 -  -  -  -  	;a holds sprite dist from bottom of screen, from 0
  299 D1:B567 BE -  -  -  	cp (hl);compare to height
  300 D1:B568 DA 9A B5 D1 	jp c,dfgs_lower_bottom_cut
  301 D1:B56C -  -  -  -  	
  302 D1:B56C -  -  -  -  	;full sprite 
  303 D1:B56C D9 -  -  -  	exx
  304 D1:B56D -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1
  305 D1:B56D 11 00 00 00 	ld de,0
  306 D1:B571 D9 -  -  -  	exx
  307 D1:B572 CD C9 B5 D1 	call dfgs_setup_draw
  308 D1:B576 CB 45 -  -  	bit 0,l
  309 D1:B578 CA 84 B5 D1 	jp z,dfgs_lower_full_fast
  310 D1:B57C CD 5D AD D1 	call draw_slow_sprite_full
  311 D1:B580 C3 88 B5 D1 	jp dfgs_lower_full_slow
  312 D1:B584 -  -  -  -  dfgs_lower_full_fast:
  313 D1:B584 CD 43 AD D1 	call draw_fast_sprite_full
  314 D1:B588 -  -  -  -  dfgs_lower_full_slow:
  315 D1:B588 D9 -  -  -  	exx
  316 D1:B589 11 00 00 00 	ld de,0 
  317 D1:B58D 01 00 00 00 	ld bc,0
  318 D1:B591 23 -  -  -  	inc hl;to y 
  319 D1:B592 08 -  -  -  	ex af,af';'
  320 D1:B593 3D -  -  -  	dec a 
  321 D1:B594 C8 -  -  -  	ret z
  322 D1:B595 08 -  -  -  	ex af,af';'
  323 D1:B596 C3 54 B5 D1 	jp dfgs_lower_loop
  324 D1:B59A -  -  -  -  	
  325 D1:B59A -  -  -  -  	
  326 D1:B59A -  -  -  -  dfgs_lower_bottom_cut:
  327 D1:B59A D9 -  -  -  	exx
  328 D1:B59B -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1
  329 D1:B59B 11 00 00 00 	ld de,0
  330 D1:B59F D9 -  -  -  	exx
  331 D1:B5A0 CD C9 B5 D1 	call dfgs_setup_draw
  332 D1:B5A4 3C -  -  -  	inc a;for bottom cuts
  333 D1:B5A5 CB 45 -  -  	bit 0,l 
  334 D1:B5A7 CA B3 B5 D1 	jp z,dfgs_lower_bottom_fast
  335 D1:B5AB CD C8 AD D1 	call draw_slow_sprite_bottom_cut
  336 D1:B5AF C3 B7 B5 D1 	jp dfgs_lower_bottom_slow
  337 D1:B5B3 -  -  -  -  dfgs_lower_bottom_fast:
  338 D1:B5B3 CD 00 AD D1 	call draw_fast_sprite_bottom_cut
  339 D1:B5B7 -  -  -  -  dfgs_lower_bottom_slow:
  340 D1:B5B7 D9 -  -  -  	exx
  341 D1:B5B8 11 00 00 00 	ld de,0 
  342 D1:B5BC 01 00 00 00 	ld bc,0
  343 D1:B5C0 23 -  -  -  	inc hl;to y 
  344 D1:B5C1 08 -  -  -  	ex af,af';'
  345 D1:B5C2 3D -  -  -  	dec a 
  346 D1:B5C3 C8 -  -  -  	ret z
  347 D1:B5C4 08 -  -  -  	ex af,af';'
  348 D1:B5C5 C3 54 B5 D1 	jp dfgs_lower_loop
  349 D1:B5C9 -  -  -  -  	
  350 D1:B5C9 -  -  -  -  	
  351 D1:B5C9 -  -  -  -  	
  352 D1:B5C9 -  -  -  -  	
  353 D1:B5C9 -  -  -  -  	
  354 D1:B5C9 -  -  -  -  	
  355 D1:B5C9 -  -  -  -  	
  356 D1:B5C9 -  -  -  -  	
  357 D1:B5C9 -  -  -  -  	
  358 D1:B5C9 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  359 D1:B5C9 -  -  -  -  ;(hl) = height 	
  360 D1:B5C9 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  361 D1:B5C9 -  -  -  -  ;returns hl = sprite data, de = vram position
  362 D1:B5C9 -  -  -  -  dfgs_setup_draw:
  363 D1:B5C9 23 -  -  -  	inc hl
  364 D1:B5CA 01 00 00 00 	ld bc,0
  365 D1:B5CE 4E -  -  -  	ld c,(hl); x pos
  366 D1:B5CF 23 -  -  -  	inc hl;to index
  367 D1:B5D0 E5 -  -  -  	push hl
  368 D1:B5D1 C5 -  -  -  	push bc
  369 D1:B5D2 D9 -  -  -  	exx;toshadow
  370 D1:B5D3 C1 -  -  -  	pop bc
  371 D1:B5D4 26 A0 -  -  	ld h,160
  372 D1:B5D6 6F -  -  -  	ld l,a
  373 D1:B5D7 ED 6C -  -  	mlt hl;subtract from vram
  374 D1:B5D9 37 -  -  -  	scf 
  375 D1:B5DA 3F -  -  -  	ccf
  376 D1:B5DB EB -  -  -  	ex de,hl;hl holds vram
  377 D1:B5DC ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  378 D1:B5DE 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  379 D1:B5DF EB -  -  -  	ex de,hl;put in de
  380 D1:B5E0 E1 -  -  -  	pop hl;back to frame data 
  381 D1:B5E1 4E -  -  -  	ld c,(hl);sprite index
  382 D1:B5E2 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  383 D1:B5E2 21 00 00 00 	ld hl,0 ;load sprite table 
  384 D1:B5E6 09 -  -  -  	add hl,bc
  385 D1:B5E7 09 -  -  -  	add hl,bc 
  386 D1:B5E8 09 -  -  -  	add hl,bc;move to sprite ptr
  387 D1:B5E9 -  -  -  -  	;call prgmpause
  388 D1:B5E9 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  389 D1:B5EB -  -  -  -  
  390 D1:B5EB C9 -  -  -  	ret
  391 D1:B5EC -  -  -  -  
  392 D1:B5EC -  -  -  -  	
  393 D1:B5EC -  -  -  -  	
  394 D1:B5EC -  -  -  -  	
  395 D1:B5EC -  -  -  -  	
  396 D1:B5EC -  -  -  -  	
  397 D1:B5EC -  -  -  -  	
  398 D1:B5EC -  -  -  -  	
  399 D1:B5EC -  -  -  -  	
  400 D1:B5EC -  -  -  -  	
  401 D1:B5EC -  -  -  -  	
  402 D1:B5EC -  -  -  -  	
  403 D1:B5EC -  -  -  -  	
Listing for file "ascent.asm"
  275 D1:B5EC -  -  -  -  
  276 D1:B5EC -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:B5EC -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:B5EC -  -  -  -  	;.dl lastSprite
    3 D1:B5EC -  -  -  -  	;.dl lastSpritecopy
    4 D1:B5EC -  -  -  -  	;.dl sprite2
    5 D1:B5EC -  -  -  -  	;.dl sprite3
    6 D1:B5EC -  -  -  -  
    7 D1:B5EC -  -  -  -  
    8 D1:B5EC -  -  -  -  
    9 D1:B5EC -  -  -  -  
   10 D1:B5EC -  -  -  -  bg_data_frame:
   11 D1:B5EC -  -  -  -  	;.db sprite data table pointer
   12 D1:B5EC -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:B5EC -  -  -  -  	
   14 D1:B5EC -  -  -  -  
   15 D1:B5EC -  -  -  -  bg_sprite_pointers_1:
   16 D1:B5EC -  -  -  -  	;.dl testBG1
   17 D1:B5EC -  -  -  -  	;.dl testBG1;h = 7
   18 D1:B5EC -  -  -  -  	;.dl testBG2;h = 5
   19 D1:B5EC -  -  -  -  	;.dl testBG3;h = 0
   20 D1:B5EC -  -  -  -  	;.dl testBG4
   21 D1:B5EC -  -  -  -  
   22 D1:B5EC -  -  -  -  bg_data_frame_0:
   23 D1:B5EC EC B5 D1 -  	.dl bg_sprite_pointers_1 
   24 D1:B5EF C8 07 05 00 	.db 200,7,5,0
   25 D1:B5F3 -  -  -  -  	;upper 
   26 D1:B5F3 -  -  -  -  bg_data_frame_1:
   27 D1:B5F3 EC B5 D1 -  	.dl bg_sprite_pointers_1
   28 D1:B5F6 C8 07 05 01 	.db 200,7,5,1
   29 D1:B5FA 64 07 05 01 	.db 100,7,5,1
   30 D1:B5FE 08 07 05 01 	.db 8,7,5,1
   31 D1:B602 07 07 0A 01 	.db 7,7,10,1
   32 D1:B606 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:B60A 05 07 14 01 	.db 5,7,20,1;X
   34 D1:B60E 05 05 19 02 	.db 5,5,25,2
   35 D1:B612 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:B616 03 05 23 02 	.db 3,5,35,2;X
   37 D1:B61A 00 05 28 02 	.db 0,5,40,2;X
   38 D1:B61E 00 00 2D 03 	.db 0,0,45,3
   39 D1:B622 0A 00 32 03 	.db 10,0,50,3
   40 D1:B626 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:B62A -  -  -  -  	
   42 D1:B62A -  -  -  -  bg_data_frame_2:
   43 D1:B62A EC B5 D1 -  	.dl bg_sprite_pointers_1
   44 D1:B62D FF 07 3C 01 	.db 255,7,60,1
   45 D1:B631 FE 07 41 01 	.db 254,7,65,1
   46 D1:B635 64 05 46 02 	.db 100,5,70,2
   47 D1:B639 64 00 4B 03 	.db 100,0,75,3
   48 D1:B63D 32 07 50 00 	.db 50,7,80,0
   49 D1:B641 -  -  -  -  	
   50 D1:B641 -  -  -  -  	
Listing for file "ascent.asm"
  277 D1:B641 -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B641 -  -  -  -  
    2 D1:B641 -  -  -  -  FG_sprite_table_1:
    3 D1:B641 -  -  -  -  	;.dl fg_sprite_1;9*4
    4 D1:B641 -  -  -  -  	;.dl fg_sprite_1
    5 D1:B641 -  -  -  -  	;.dl fg_sprite_2;8*8
    6 D1:B641 -  -  -  -  	;.dl fg_sprite_3;8*8 fast
    7 D1:B641 -  -  -  -  	;.dl fg_sprite_4;8*8 fast 
    8 D1:B641 -  -  -  -  	
    9 D1:B641 -  -  -  -  
   10 D1:B641 -  -  -  -  
   11 D1:B641 -  -  -  -  
   12 D1:B641 -  -  -  -  
   13 D1:B641 -  -  -  -  FG_Frame_2:
   14 D1:B641 41 B6 D1 -  	.dl FG_sprite_table_1
   15 D1:B644 03 03 00 01 	.db 3,3,0,1
   16 D1:B648 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B64C 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B650 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B654 32 07 14 02 	.db 50,7,20,2
   20 D1:B658 1E 07 19 03 	.db 30,7,25,3
   21 D1:B65C 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B660 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B664 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B668 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B66C -  -  -  -  
   26 D1:B66C -  -  -  -  
   27 D1:B66C -  -  -  -  FG_Frame_1:
   28 D1:B66C -  -  -  -  	;.dl sprite table ptr
   29 D1:B66C -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B66C 41 B6 D1 -  	.dl FG_sprite_table_1
   31 D1:B66F FF 03 3C 01 	.db 255,3,60,1
   32 D1:B673 FF 07 46 02 	.db 255,7,70,2
   33 D1:B677 FF 07 4B 03 	.db 255,7,75,3
   34 D1:B67B FF 07 50 04 	.db 255,7,80,4
   35 D1:B67F FE 03 55 01 	.db 254,3,85,1
   36 D1:B683 FE 07 5A 04 	.db 254,7,90,4
   37 D1:B687 C8 03 0A 01 	.db 200,3,10,1
   38 D1:B68B C8 07 0F 02 	.db 200,7,15,2
   39 D1:B68F C8 07 14 03 	.db 200,7,20,3
   40 D1:B693 32 07 0A 02 	.db 50,7,10,2
   41 D1:B697 0F 07 50 03 	.db 15,7,80,3
   42 D1:B69B 10 07 41 03 	.db 16,7,65,3
   43 D1:B69F 11 03 46 01 	.db 17,3,70,1
   44 D1:B6A3 09 07 0A 02 	.db 9,7,10,2
   45 D1:B6A7 08 07 14 02 	.db 8,7,20,2
   46 D1:B6AB 08 07 1E 03 	.db 8,7,30,3
   47 D1:B6AF 07 07 23 02 	.db 7,7,35,2
   48 D1:B6B3 06 07 28 02 	.db 6,7,40,2
   49 D1:B6B7 05 07 2D 02 	.db 5,7,45,2
   50 D1:B6BB 00 07 32 02 	.db 0,7,50,2
   51 D1:B6BF 04 07 37 03 	.db 4,7,55,3
   52 D1:B6C3 02 07 3C 04 	.db 2,7,60,4
   53 D1:B6C7 01 03 41 00 	.db 1,3,65,0
   54 D1:B6CB -  -  -  -  	
   55 D1:B6CB -  -  -  -  
   56 D1:B6CB -  -  -  -  FG_Frame_0:
   57 D1:B6CB 41 B6 D1 -  	.dl FG_sprite_table_1
   58 D1:B6CE FF 03 46 01 	.db 255,3,70,1
   59 D1:B6D2 FF 07 4B 02 	.db 255,7,75,2
   60 D1:B6D6 FF 07 5F 03 	.db 255,7,95,3
   61 D1:B6DA FF 07 50 04 	.db 255,7,80,4
   62 D1:B6DE FE 03 78 01 	.db 254,3,120,1
   63 D1:B6E2 FE 07 7D 04 	.db 254,7,125,4
   64 D1:B6E6 C8 03 0A 01 	.db 200,3,10,1
   65 D1:B6EA C8 07 0F 02 	.db 200,7,15,2
   66 D1:B6EE C8 07 14 03 	.db 200,7,20,3
   67 D1:B6F2 C8 03 00 00 	.db 200,3,0,0
   68 D1:B6F6 -  -  -  -  	
   69 D1:B6F6 -  -  -  -  	
   70 D1:B6F6 -  -  -  -  	
   71 D1:B6F6 -  -  -  -  
   72 D1:B6F6 -  -  -  -  	
   73 D1:B6F6 -  -  -  -  	
   74 D1:B6F6 -  -  -  -  	
   75 D1:B6F6 -  -  -  -  	
   76 D1:B6F6 -  -  -  -  	
   77 D1:B6F6 -  -  -  -  	
   78 D1:B6F6 -  -  -  -  	
Listing for file "ascent.asm"
  278 D1:B6F6 -  -  -  -  
  279 D1:B6F6 -  -  -  -  #include "TestingSpriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingSpriteData.txt"
    1 D1:B6F6 -  -  -  -  
    2 D1:B6F6 -  -  -  -  
    3 D1:B6F6 -  -  -  -  
    4 D1:B6F6 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
    5 D1:B6F6 -  -  -  -  Test_Sprite_1:
    6 D1:B6F6 10 -  -  -  	.db %00010000
    7 D1:B6F7 09 06 -  -  	.db 9,6
    8 D1:B6F9 7C 86 -  -  	.db %01111100, %10000110
    9 D1:B6FB F3 BF -  -  	.db %11110011, %10111111
   10 D1:B6FD F0 E0 -  -  	.db %11110000, %11100000
   11 D1:B6FF A8 -  -  -  	.db %10101000
   12 D1:B700 -  -  -  -  	
   13 D1:B700 64 -  -  -  	.db $64
   14 D1:B701 -  -  -  -  	
   15 D1:B701 AA -  -  -  	.db %10101010
   16 D1:B702 AA -  -  -  	.db %10101010
   17 D1:B703 AA -  -  -  	.db %10101010
   18 D1:B704 AA -  -  -  	.db %10101010
   19 D1:B705 AA -  -  -  	.db %10101010
   20 D1:B706 AA -  -  -  	.db %10101010
   21 D1:B707 AA -  -  -  	.db %10101010
   22 D1:B708 AA -  -  -  	.db %10101010
   23 D1:B709 AA -  -  -  	.db %10101010
   24 D1:B70A AA -  -  -  	.db %10101010
   25 D1:B70B -  -  -  -  	
   26 D1:B70B -  -  -  -  	
   27 D1:B70B -  -  -  -  ;0XXXXX00X
   28 D1:B70B -  -  -  -  ;0000XX0XX
   29 D1:B70B -  -  -  -  ;XX00XXX0X
   30 D1:B70B -  -  -  -  ;XXXXXXXXX
   31 D1:B70B -  -  -  -  ;0000XXX00
   32 D1:B70B -  -  -  -  ;000X0X0X0
   33 D1:B70B -  -  -  -  
   34 D1:B70B -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
   35 D1:B70B -  -  -  -  Test_Sprite_2:
   36 D1:B70B 10 -  -  -  	.db %00010000
   37 D1:B70C 09 06 -  -  	.db 9,6
   38 D1:B70E FF FF -  -  	.db %11111111, %11111111
   39 D1:B710 FF FF -  -  	.db %11111111, %11111111
   40 D1:B712 FF FF -  -  	.db %11111111, %11111111
   41 D1:B714 FC -  -  -  	.db %11111100
   42 D1:B715 -  -  -  -  	
   43 D1:B715 01 -  -  -  	.db $01
   44 D1:B716 -  -  -  -  	
   45 D1:B716 AA -  -  -  	.db %10101010
   46 D1:B717 AA -  -  -  	.db %10101010
   47 D1:B718 AA -  -  -  	.db %10101010
   48 D1:B719 AA -  -  -  	.db %10101010
   49 D1:B71A AA -  -  -  	.db %10101010
   50 D1:B71B AA -  -  -  	.db %10101010
   51 D1:B71C AA -  -  -  	.db %10101010
   52 D1:B71D AA -  -  -  	.db %10101010
   53 D1:B71E AA -  -  -  	.db %10101010
   54 D1:B71F AA -  -  -  	.db %10101010
   55 D1:B720 AA -  -  -  	.db %10101010
   56 D1:B721 -  -  -  -  	
   57 D1:B721 -  -  -  -  	
   58 D1:B721 -  -  -  -  ;XXXXXXXXX
   59 D1:B721 -  -  -  -  ;XXXXXXXXX
   60 D1:B721 -  -  -  -  ;XXXXXXXXX
   61 D1:B721 -  -  -  -  ;XXXXXXXXX
   62 D1:B721 -  -  -  -  
   63 D1:B721 -  -  -  -  
   64 D1:B721 -  -  -  -  
   65 D1:B721 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 8 h = 7
   66 D1:B721 -  -  -  -  Test_Sprite_3:
   67 D1:B721 10 -  -  -  	.db %00010000
   68 D1:B722 08 07 -  -  	.db 8,7
   69 D1:B724 FF FF -  -  	.db %11111111, %11111111
   70 D1:B726 FF 83 -  -  	.db %11111111, %10000011
   71 D1:B728 FB 01 -  -  	.db %11111011, %00000001
   72 D1:B72A 80 -  -  -  	.db %10000000
   73 D1:B72B -  -  -  -  	
   74 D1:B72B 64 -  -  -  	.db $64
   75 D1:B72C -  -  -  -  	
   76 D1:B72C AA -  -  -  	.db %10101010
   77 D1:B72D AA -  -  -  	.db %10101010
   78 D1:B72E AA -  -  -  	.db %10101010
   79 D1:B72F AA -  -  -  	.db %10101010
   80 D1:B730 AA -  -  -  	.db %10101010
   81 D1:B731 AA -  -  -  	.db %10101010
   82 D1:B732 AA -  -  -  	.db %10101010
   83 D1:B733 AA -  -  -  	.db %10101010
   84 D1:B734 AA -  -  -  	.db %10101010
   85 D1:B735 AA -  -  -  	.db %10101010
   86 D1:B736 AA -  -  -  	.db %10101010
   87 D1:B737 AA -  -  -  	.db %10101010
   88 D1:B738 -  -  -  -  	
   89 D1:B738 -  -  -  -  	
   90 D1:B738 -  -  -  -  
   91 D1:B738 -  -  -  -  ;slow, 3bpc, alpha, w = 16 h = 6
   92 D1:B738 -  -  -  -  Test_Sprite_4:
   93 D1:B738 40 -  -  -  	.db %01000000
   94 D1:B739 10 06 -  -  	.db 16,6
   95 D1:B73B 3F F4 -  -  	.db %00111111, %11110100
   96 D1:B73D FF 00 -  -  	.db %11111111, %00000000
   97 D1:B73F 55 55 -  -  	.db %01010101, %01010101
   98 D1:B741 03 8C -  -  	.db %00000011, %10001100
   99 D1:B743 20 F3 -  -  	.db %00100000, %11110011
  100 D1:B745 FC 4D -  -  	.db %11111100, %01001101
  101 D1:B747 -  -  -  -  	
  102 D1:B747 13 68 AE -  	.db $13,$68,$AE
  103 D1:B74A -  -  -  -  	
  104 D1:B74A 05 39 -  -  	.db %00000101,%00111001
  105 D1:B74C 77 05 -  -  	.db %01110111,%00000101
  106 D1:B74E 39 77 -  -  	.db %00111001,%01110111
  107 D1:B750 05 39 -  -  	.db %00000101,%00111001
  108 D1:B752 77 05 -  -  	.db %01110111,%00000101
  109 D1:B754 39 77 -  -  	.db %00111001,%01110111
  110 D1:B756 05 39 -  -  	.db %00000101,%00111001
  111 D1:B758 77 05 -  -  	.db %01110111,%00000101
  112 D1:B75A 39 77 -  -  	.db %00111001,%01110111
  113 D1:B75C 05 39 -  -  	.db %00000101,%00111001
  114 D1:B75E 77 05 -  -  	.db %01110111,%00000101
  115 D1:B760 39 77 -  -  	.db %00111001,%01110111
  116 D1:B762 05 39 -  -  	.db %00000101,%00111001
  117 D1:B764 77 05 -  -  	.db %01110111,%00000101
  118 D1:B766 39 77 -  -  	.db %00111001,%01110111
  119 D1:B768 05 39 -  -  	.db %00000101,%00111001
  120 D1:B76A 77 05 -  -  	.db %01110111,%00000101
  121 D1:B76C 39 77 -  -  	.db %00111001,%01110111
  122 D1:B76E 05 39 -  -  	.db %00000101,%00111001
  123 D1:B770 77 05 -  -  	.db %01110111,%00000101
  124 D1:B772 39 77 -  -  	.db %00111001,%01110111
  125 D1:B774 05 39 -  -  	.db %00000101,%00111001
  126 D1:B776 77 05 -  -  	.db %01110111,%00000101
  127 D1:B778 39 77 -  -  	.db %00111001,%01110111
  128 D1:B77A 05 39 -  -  	.db %00000101,%00111001
  129 D1:B77C 77 05 -  -  	.db %01110111,%00000101
  130 D1:B77E 39 77 -  -  	.db %00111001,%01110111
  131 D1:B780 05 39 -  -  	.db %00000101,%00111001
  132 D1:B782 77 05 -  -  	.db %01110111,%00000101
  133 D1:B784 39 77 -  -  	.db %00111001,%01110111
  134 D1:B786 05 39 -  -  	.db %00000101,%00111001
  135 D1:B788 77 05 -  -  	.db %01110111,%00000101
  136 D1:B78A 39 77 -  -  	.db %00111001,%01110111
  137 D1:B78C 05 39 -  -  	.db %00000101,%00111001
  138 D1:B78E 77 05 -  -  	.db %01110111,%00000101
  139 D1:B790 39 77 -  -  	.db %00111001,%01110111
  140 D1:B792 05 39 -  -  	.db %00000101,%00111001
  141 D1:B794 77 05 -  -  	.db %01110111,%00000101
  142 D1:B796 39 77 -  -  	.db %00111001,%01110111
  143 D1:B798 -  -  -  -  
  144 D1:B798 -  -  -  -  
  145 D1:B798 -  -  -  -  
  146 D1:B798 -  -  -  -  Test_sprite_5: ;W = 11 h = 6, 2bpc 
  147 D1:B798 20 -  -  -  	.db %00100000
  148 D1:B799 0B 06 -  -  	.db 11,6
  149 D1:B79B 1B -  -  -  	.db %00011011
  150 D1:B79C FA -  -  -  	.db %11111010
  151 D1:B79D AB -  -  -  	.db %10101011
  152 D1:B79E E0 -  -  -  	.db %11100000
  153 D1:B79F 78 -  -  -  	.db %01111000
  154 D1:B7A0 00 -  -  -  	.db %00000000
  155 D1:B7A1 03 -  -  -  	.db %00000011
  156 D1:B7A2 07 -  -  -  	.db %00000111
  157 D1:B7A3 40 -  -  -  	.db %01000000
  158 D1:B7A4 -  -  -  -  	
  159 D1:B7A4 67 59 -  -  	.db $67,89
  160 D1:B7A6 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  161 D1:B7A9 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  162 D1:B7AC 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  163 D1:B7AF 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  164 D1:B7B2 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  165 D1:B7B5 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  166 D1:B7B8 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  167 D1:B7BB 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  168 D1:B7BE 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  169 D1:B7C1 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  170 D1:B7C4 -  -  -  -  	
  171 D1:B7C4 -  -  -  -  	
  172 D1:B7C4 -  -  -  -  	
  173 D1:B7C4 -  -  -  -  ;000xx0xxxxx
  174 D1:B7C4 -  -  -  -  ;xx0x0x0x0x0
  175 D1:B7C4 -  -  -  -  ;xxxxx000000
  176 D1:B7C4 -  -  -  -  ;xxxx0000000
  177 D1:B7C4 -  -  -  -  ;0000000000x
  178 D1:B7C4 -  -  -  -  ;x00000xxx0x
  179 D1:B7C4 -  -  -  -  	
  180 D1:B7C4 -  -  -  -  	
  181 D1:B7C4 -  -  -  -  	
  182 D1:B7C4 -  -  -  -  	
  183 D1:B7C4 -  -  -  -  	
  184 D1:B7C4 -  -  -  -  	
  185 D1:B7C4 -  -  -  -  
  186 D1:B7C4 -  -  -  -  Test_sprite_6: ;w = 6 h = 6, noalpha, 4bpc 
  187 D1:B7C4 84 -  -  -  	.db %10000100
  188 D1:B7C5 06 06 -  -  	.db 6,6
  189 D1:B7C7 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  190 D1:B7CC 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  191 D1:B7D1 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  192 D1:B7D6 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  193 D1:B7DB 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  194 D1:B7E0 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  195 D1:B7E5 -  -  -  -  	
  196 D1:B7E5 -  -  -  -  
  197 D1:B7E5 -  -  -  -  Test_sprite_7: ;w=3 h=6 , 0bpc 
  198 D1:B7E5 08 -  -  -  	.db %00001000
  199 D1:B7E6 03 06 -  -  	.db 3,6
  200 D1:B7E8 E6 2B 80 -  	.db %11100110, %00101011,%10000000
  201 D1:B7EB -  -  -  -  	
  202 D1:B7EB 33 -  -  -  	.db $33
  203 D1:B7EC -  -  -  -  ;XXX
  204 D1:B7EC -  -  -  -  ;00x
  205 D1:B7EC -  -  -  -  ;x00
  206 D1:B7EC -  -  -  -  ;0x0
  207 D1:B7EC -  -  -  -  ;x0x
  208 D1:B7EC -  -  -  -  ;xx0
  209 D1:B7EC -  -  -  -  
  210 D1:B7EC -  -  -  -  Test_sprite_8: ;w=2 h=6 , 0bpc 
  211 D1:B7EC 08 -  -  -  	.db %00001000
  212 D1:B7ED 02 08 -  -  	.db 2,8
  213 D1:B7EF DB F5 -  -  	.db %11011011,%11110101
  214 D1:B7F1 -  -  -  -  	
  215 D1:B7F1 33 -  -  -  	.db $33
  216 D1:B7F2 -  -  -  -  
  217 D1:B7F2 -  -  -  -  ;XX
  218 D1:B7F2 -  -  -  -  ;0x 
  219 D1:B7F2 -  -  -  -  ;x0 
  220 D1:B7F2 -  -  -  -  ;xx 
  221 D1:B7F2 -  -  -  -  ;xx 
  222 D1:B7F2 -  -  -  -  ;xx 
  223 D1:B7F2 -  -  -  -  ;0x 
  224 D1:B7F2 -  -  -  -  ;0x
  225 D1:B7F2 -  -  -  -  
  226 D1:B7F2 -  -  -  -  Test_sprite_9: ;w=2 h=6 , 0bpc 
  227 D1:B7F2 0C -  -  -  	.db %00001100
  228 D1:B7F3 01 09 -  -  	.db 1,9
  229 D1:B7F5 33 -  -  -  	.db $33
  230 D1:B7F6 -  -  -  -  
  231 D1:B7F6 -  -  -  -  
  232 D1:B7F6 -  -  -  -  
  233 D1:B7F6 -  -  -  -  
  234 D1:B7F6 -  -  -  -  
  235 D1:B7F6 -  -  -  -  
  236 D1:B7F6 -  -  -  -  
  237 D1:B7F6 -  -  -  -  
  238 D1:B7F6 -  -  -  -  
  239 D1:B7F6 -  -  -  -  
  240 D1:B7F6 -  -  -  -  
  241 D1:B7F6 -  -  -  -  
  242 D1:B7F6 -  -  -  -  
  243 D1:B7F6 -  -  -  -  
  244 D1:B7F6 -  -  -  -  Test_sprite_fast: ;w = 16, h = 8
  245 D1:B7F6 10 -  -  -  	.db %00010000
  246 D1:B7F7 10 08 -  -  	.db 16 , 8
  247 D1:B7F9 0F FF -  -  	.db %00001111,%11111111
  248 D1:B7FB 3C F3 -  -  	.db %00111100,%11110011
  249 D1:B7FD F0 3F -  -  	.db %11110000,%00111111
  250 D1:B7FF FF FF -  -  	.db %11111111,%11111111
  251 D1:B801 CC CC -  -  	.db %11001100,%11001100
  252 D1:B803 33 33 -  -  	.db %00110011,%00110011
  253 D1:B805 C0 00 -  -  	.db %11000000,%00000000
  254 D1:B807 03 C3 -  -  	.db %00000011,%11000011
  255 D1:B809 -  -  -  -  
  256 D1:B809 64 -  -  -  	.db $64
  257 D1:B80A -  -  -  -  	
  258 D1:B80A AA -  -  -  	.db %10101010
  259 D1:B80B AA -  -  -  	.db %10101010
  260 D1:B80C AA -  -  -  	.db %10101010
  261 D1:B80D AA -  -  -  	.db %10101010
  262 D1:B80E AA -  -  -  	.db %10101010
  263 D1:B80F AA -  -  -  	.db %10101010
  264 D1:B810 AA -  -  -  	.db %10101010
  265 D1:B811 AA -  -  -  	.db %10101010
  266 D1:B812 AA -  -  -  	.db %10101010
  267 D1:B813 AA -  -  -  	.db %10101010
  268 D1:B814 AA -  -  -  	.db %10101010
  269 D1:B815 AA -  -  -  	.db %10101010
  270 D1:B816 AA -  -  -  	.db %10101010
  271 D1:B817 AA -  -  -  	.db %10101010
  272 D1:B818 AA -  -  -  	.db %10101010
  273 D1:B819 AA -  -  -  	.db %10101010
  274 D1:B81A AA -  -  -  	.db %10101010
  275 D1:B81B AA -  -  -  	.db %10101010
  276 D1:B81C AA -  -  -  	.db %10101010
  277 D1:B81D AA -  -  -  	.db %10101010
  278 D1:B81E AA -  -  -  	.db %10101010
  279 D1:B81F AA -  -  -  	.db %10101010
  280 D1:B820 -  -  -  -  
  281 D1:B820 -  -  -  -  
  282 D1:B820 -  -  -  -  
  283 D1:B820 -  -  -  -  
  284 D1:B820 -  -  -  -  
  285 D1:B820 -  -  -  -  
  286 D1:B820 -  -  -  -  
  287 D1:B820 -  -  -  -  
  288 D1:B820 -  -  -  -  
  289 D1:B820 -  -  -  -  
Listing for file "ascent.asm"
  280 D1:B820 -  -  -  -  #include "Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Data.txt"
    1 D1:B820 -  -  -  -  Banana1:
    2 D1:B820 20 -  -  -  	.db %00100000
    3 D1:B821 18 18 -  -  	.db 24, 24
    4 D1:B823 E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:B82B 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:B833 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:B83B 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:B843 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:B84B FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:B853 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:B85B FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:B863 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:B86B -  -  -  -  
   14 D1:B86B 01 20 -  -  	.db %00000001, %00100000
   15 D1:B86D -  -  -  -  
   16 D1:B86D 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:B875 AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:B87D 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:B885 A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:B88D 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:B895 A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:B89D AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:B8A5 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:B8AD AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:B8B5 55 40 -  -  	.db %01010101, %01000000
   26 D1:B8B7 -  -  -  -  
   27 D1:B8B7 -  -  -  -  
   28 D1:B8B7 -  -  -  -  Banana1Large:
   29 D1:B8B7 20 -  -  -  	.db %00100000
   30 D1:B8B8 2E 2E -  -  	.db 46, 46
   31 D1:B8BA FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:B8C2 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:B8CA 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:B8D2 F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:B8DA 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:B8E2 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:B8EA 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:B8F2 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:B8FA FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:B902 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:B90A 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:B912 F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:B91A 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:B922 FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:B92A 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:B932 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:B93A FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:B942 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:B94A 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:B952 FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:B95A 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:B962 FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:B96A FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:B972 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:B97A FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:B982 FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:B98A 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:B992 FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:B99A C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:B9A2 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:B9AA FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:B9B2 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:B9BA FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:B9C2 C0 -  -  -  	.db %11000000
   65 D1:B9C3 -  -  -  -  
   66 D1:B9C3 01 20 -  -  	.db %00000001, %00100000
   67 D1:B9C5 -  -  -  -  
   68 D1:B9C5 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:B9CD 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:B9D5 A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:B9DD AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:B9E5 AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:B9ED A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:B9F5 A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:B9FD AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:BA05 AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:BA0D A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:BA15 AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:BA1D 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:BA25 AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:BA2D AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:BA35 A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:BA3D AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:BA45 AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:BA4D AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:BA55 AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:BA5D AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:BA65 AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:BA6D AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:BA75 AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:BA7D AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:BA85 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:BA8D 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:BA95 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:BA9D 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:BAA5 A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:BAAD 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:BAB5 A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:BABD 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:BAC5 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:BAC8 -  -  -  -  
  102 D1:BAC8 -  -  -  -  
  103 D1:BAC8 -  -  -  -  Shittlogo:
  104 D1:BAC8 20 -  -  -  	.db %00100000
  105 D1:BAC9 30 30 -  -  	.db 48, 48
  106 D1:BACB 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  107 D1:BAD3 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  108 D1:BADB 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  109 D1:BAE3 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  110 D1:BAEB FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  111 D1:BAF3 FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  112 D1:BAFB 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  113 D1:BB03 FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  114 D1:BB0B FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  115 D1:BB13 F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  116 D1:BB1B FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  117 D1:BB23 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  118 D1:BB2B 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  119 D1:BB33 FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  120 D1:BB3B FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  121 D1:BB43 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  122 D1:BB4B FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  123 D1:BB53 FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  124 D1:BB5B 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  125 D1:BB63 FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  126 D1:BB6B FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  127 D1:BB73 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  128 D1:BB7B FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  129 D1:BB83 FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  130 D1:BB8B 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  131 D1:BB93 FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  132 D1:BB9B FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  133 D1:BBA3 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  134 D1:BBAB FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  135 D1:BBB3 FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  136 D1:BBBB 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  137 D1:BBC3 FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  138 D1:BBCB FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  139 D1:BBD3 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  140 D1:BBDB 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  141 D1:BBE3 E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  142 D1:BBEB -  -  -  -  
  143 D1:BBEB 95 D0 -  -  	.db %10010101, %11010000
  144 D1:BBED -  -  -  -  
  145 D1:BBED 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  146 D1:BBF5 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  147 D1:BBFD 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  148 D1:BC05 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  149 D1:BC0D 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  150 D1:BC15 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  151 D1:BC1D 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  152 D1:BC25 A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  153 D1:BC2D 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  154 D1:BC35 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  155 D1:BC3D 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  156 D1:BC45 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  157 D1:BC4D AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  158 D1:BC55 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  159 D1:BC5D 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  160 D1:BC65 AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  161 D1:BC6D AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  162 D1:BC75 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  163 D1:BC7D AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  164 D1:BC85 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  165 D1:BC8D AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  166 D1:BC95 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  167 D1:BC9D 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  168 D1:BCA5 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  169 D1:BCAD AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  170 D1:BCB5 A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  171 D1:BCBD 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  172 D1:BCC5 AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  173 D1:BCCD 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  174 D1:BCD5 AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  175 D1:BCDD A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  176 D1:BCE5 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  177 D1:BCED 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  178 D1:BCF5 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  179 D1:BCFD 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  180 D1:BD05 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  181 D1:BD0D 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  182 D1:BD15 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  183 D1:BD1D 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  184 D1:BD25 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  185 D1:BD2D 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  186 D1:BD35 A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  187 D1:BD3D AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  188 D1:BD45 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  189 D1:BD4D 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  190 D1:BD55 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  191 D1:BD5D 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  192 D1:BD65 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  193 D1:BD6D 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  194 D1:BD75 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  195 D1:BD7D 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  196 D1:BD85 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  197 D1:BD8D 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  198 D1:BD92 -  -  -  -  
  199 D1:BD92 -  -  -  -  
  200 D1:BD92 -  -  -  -  OrangeDot:
  201 D1:BD92 08 -  -  -  	.db %00001000
  202 D1:BD93 0F 0F -  -  	.db 15, 15
  203 D1:BD95 03 C0 0F C0 
              7F E1 FF E7 	.db %00000011, %11000000, %00001111, %11000000, %01111111, %11100001, %11111111, %11100111
  204 D1:BD9D FF DF FF FF 
              FF FF FF FF 	.db %11111111, %11011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  205 D1:BDA5 FF FF FF FF 
              FB FF E3 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111011, %11111111, %11100011, %11111111
  206 D1:BDAD C3 FF 01 F8 
              00 -  -  -  	.db %11000011, %11111111, %00000001, %11111000, %00000000
  207 D1:BDB2 -  -  -  -  
  208 D1:BDB2 B0 -  -  -  	.db %10110000
  209 D1:BDB3 -  -  -  -  
  210 D1:BDB3 -  -  -  -  
  211 D1:BDB3 -  -  -  -  
  212 D1:BDB3 -  -  -  -  SquiggleL:
  213 D1:BDB3 08 -  -  -  	.db %00001000
  214 D1:BDB4 26 18 -  -  	.db 38, 24
  215 D1:BDB6 00 00 07 FF 
              80 00 00 1F 	.db %00000000, %00000000, %00000111, %11111111, %10000000, %00000000, %00000000, %00011111
  216 D1:BDBE FE 00 00 00 
              7F FF C0 00 	.db %11111110, %00000000, %00000000, %00000000, %01111111, %11111111, %11000000, %00000000
  217 D1:BDC6 01 FF FF 00 
              00 07 FF FC 	.db %00000001, %11111111, %11111111, %00000000, %00000000, %00000111, %11111111, %11111100
  218 D1:BDCE 00 00 1F 1F 
              F0 00 00 7C 	.db %00000000, %00000000, %00011111, %00011111, %11110000, %00000000, %00000000, %01111100
  219 D1:BDD6 7F C1 FC 01 
              F0 1F 07 F0 	.db %01111111, %11000001, %11111100, %00000001, %11110000, %00011111, %00000111, %11110000
  220 D1:BDDE 07 C0 7C 1F 
              C0 1F 01 F3 	.db %00000111, %11000000, %01111100, %00011111, %11000000, %00011111, %00000001, %11110011
  221 D1:BDE6 FF F8 7C 07 
              CF FF E1 F0 	.db %11111111, %11111000, %01111100, %00000111, %11001111, %11111111, %11100001, %11110000
  222 D1:BDEE 1F 3F FF FF 
              C0 00 FF FF 	.db %00011111, %00111111, %11111111, %11111111, %11000000, %00000000, %11111111, %11111111
  223 D1:BDF6 FF 00 0F E0 
              FF F0 00 3F 	.db %11111111, %00000000, %00001111, %11100000, %11111111, %11110000, %00000000, %00111111
  224 D1:BDFE 83 FF C0 00 
              FE 0F FF 00 	.db %10000011, %11111111, %11000000, %00000000, %11111110, %00001111, %11111111, %00000000
  225 D1:BE06 03 F8 0F FC 
              00 0F E0 3F 	.db %00000011, %11111000, %00001111, %11111100, %00000000, %00001111, %11100000, %00111111
  226 D1:BE0E F0 00 3E 00 
              1F C0 00 F8 	.db %11110000, %00000000, %00111110, %00000000, %00011111, %11000000, %00000000, %11111000
  227 D1:BE16 00 7F 00 03 
              E0 01 FC 00 	.db %00000000, %01111111, %00000000, %00000011, %11100000, %00000001, %11111100, %00000000
  228 D1:BE1E 0F 80 00 00 
              00 3E 00 00 	.db %00001111, %10000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000000
  229 D1:BE26 00 00 -  -  	.db %00000000, %00000000
  230 D1:BE28 -  -  -  -  
  231 D1:BE28 50 -  -  -  	.db %01010000
  232 D1:BE29 -  -  -  -  
  233 D1:BE29 -  -  -  -  
  234 D1:BE29 -  -  -  -  
  235 D1:BE29 -  -  -  -  Banana5:
  236 D1:BE29 20 -  -  -  	.db %00100000
  237 D1:BE2A 20 20 -  -  	.db 32, 32
  238 D1:BE2C 00 00 00 3C 
              00 00 00 FC 	.db %00000000, %00000000, %00000000, %00111100, %00000000, %00000000, %00000000, %11111100
  239 D1:BE34 00 00 03 FC 
              00 00 07 FC 	.db %00000000, %00000000, %00000011, %11111100, %00000000, %00000000, %00000111, %11111100
  240 D1:BE3C 00 00 0F FC 
              00 00 3F FC 	.db %00000000, %00000000, %00001111, %11111100, %00000000, %00000000, %00111111, %11111100
  241 D1:BE44 00 00 7F FC 
              00 00 FF F8 	.db %00000000, %00000000, %01111111, %11111100, %00000000, %00000000, %11111111, %11111000
  242 D1:BE4C 00 03 FF F0 
              00 07 FF F0 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000111, %11111111, %11110000
  243 D1:BE54 00 1F FF E0 
              00 3F FF E0 	.db %00000000, %00011111, %11111111, %11100000, %00000000, %00111111, %11111111, %11100000
  244 D1:BE5C 00 7F FF C0 
              01 FF FF 80 	.db %00000000, %01111111, %11111111, %11000000, %00000001, %11111111, %11111111, %10000000
  245 D1:BE64 01 FF FF 00 
              03 FF FE 00 	.db %00000001, %11111111, %11111111, %00000000, %00000011, %11111111, %11111110, %00000000
  246 D1:BE6C 07 FF FE 00 
              0F FF FC 00 	.db %00000111, %11111111, %11111110, %00000000, %00001111, %11111111, %11111100, %00000000
  247 D1:BE74 1F FF F8 00 
              1F FF F0 00 	.db %00011111, %11111111, %11111000, %00000000, %00011111, %11111111, %11110000, %00000000
  248 D1:BE7C 3F FF C0 00 
              3F FF 80 00 	.db %00111111, %11111111, %11000000, %00000000, %00111111, %11111111, %10000000, %00000000
  249 D1:BE84 7F FF 00 00 
              7F FC 00 00 	.db %01111111, %11111111, %00000000, %00000000, %01111111, %11111100, %00000000, %00000000
  250 D1:BE8C FF F8 00 00 
              FF E0 00 00 	.db %11111111, %11111000, %00000000, %00000000, %11111111, %11100000, %00000000, %00000000
  251 D1:BE94 FF C0 00 00 
              FF 80 00 00 	.db %11111111, %11000000, %00000000, %00000000, %11111111, %10000000, %00000000, %00000000
  252 D1:BE9C FF 00 00 00 
              FC 00 00 00 	.db %11111111, %00000000, %00000000, %00000000, %11111100, %00000000, %00000000, %00000000
  253 D1:BEA4 F8 00 00 00 
              F8 00 00 00 	.db %11111000, %00000000, %00000000, %00000000, %11111000, %00000000, %00000000, %00000000
  254 D1:BEAC -  -  -  -  
  255 D1:BEAC 01 20 -  -  	.db %00000001, %00100000
  256 D1:BEAE -  -  -  -  
  257 D1:BEAE 00 50 05 A0 
              05 A8 01 6A 	.db %00000000, %01010000, %00000101, %10100000, %00000101, %10101000, %00000001, %01101010
  258 D1:BEB6 6A 55 A9 AA 
              56 A9 AA 55 	.db %01101010, %01010101, %10101001, %10101010, %01010110, %10101001, %10101010, %01010101
  259 D1:BEBE AA 66 A5 5A 
              A6 6A 56 AA 	.db %10101010, %01100110, %10100101, %01011010, %10100110, %01101010, %01010110, %10101010
  260 D1:BEC6 66 A5 5A AA 
              A6 A9 5A AA 	.db %01100110, %10100101, %01011010, %10101010, %10100110, %10101001, %01011010, %10101010
  261 D1:BECE 66 A9 56 AA 
              99 9A 55 6A 	.db %01100110, %10101001, %01010110, %10101010, %10011001, %10011010, %01010101, %01101010
  262 D1:BED6 AA 99 A9 6A 
              AA AA 6A 5A 	.db %10101010, %10011001, %10101001, %01101010, %10101010, %10101010, %01101010, %01011010
  263 D1:BEDE AA AA 9A 96 
              AA AA A6 65 	.db %10101010, %10101010, %10011010, %10010110, %10101010, %10101010, %10100110, %01100101
  264 D1:BEE6 6A AA AA 66 
              55 AA AA A6 	.db %01101010, %10101010, %10101010, %01100110, %01010101, %10101010, %10101010, %10100110
  265 D1:BEEE 65 6A AA A9 
              99 56 AA A6 	.db %01100101, %01101010, %10101010, %10101001, %10011001, %01010110, %10101010, %10100110
  266 D1:BEF6 66 5A AA 99 
              95 5A A6 66 	.db %01100110, %01011010, %10101010, %10011001, %10010101, %01011010, %10100110, %01100110
  267 D1:BEFE 95 AA 66 A5 
              6A 99 A5 5A 	.db %10010101, %10101010, %01100110, %10100101, %01101010, %10011001, %10100101, %01011010
  268 D1:BF06 99 A5 59 9A 
              56 66 55 02 	.db %10011001, %10100101, %01011001, %10011010, %01010110, %01100110, %01010101, %00000010
  269 D1:BF0E 55 00 60 04 
              00 -  -  -  	.db %01010101, %00000000, %01100000, %00000100, %00000000
  270 D1:BF13 -  -  -  -  
  271 D1:BF13 -  -  -  -  
  272 D1:BF13 -  -  -  -  GreenCurl1:
  273 D1:BF13 08 -  -  -  	.db %00001000
  274 D1:BF14 20 20 -  -  	.db 32, 32
  275 D1:BF16 00 0F E0 00 
              00 1F E0 00 	.db %00000000, %00001111, %11100000, %00000000, %00000000, %00011111, %11100000, %00000000
  276 D1:BF1E 00 FF E0 00 
              03 FE 00 00 	.db %00000000, %11111111, %11100000, %00000000, %00000011, %11111110, %00000000, %00000000
  277 D1:BF26 07 F8 00 00 
              07 E0 00 00 	.db %00000111, %11111000, %00000000, %00000000, %00000111, %11100000, %00000000, %00000000
  278 D1:BF2E 1F 80 00 00 
              3F 00 00 00 	.db %00011111, %10000000, %00000000, %00000000, %00111111, %00000000, %00000000, %00000000
  279 D1:BF36 3E 07 FE 00 
              7C 0F FF F8 	.db %00111110, %00000111, %11111110, %00000000, %01111100, %00001111, %11111111, %11111000
  280 D1:BF3E 78 1F FF FC 
              F0 3F 07 FE 	.db %01111000, %00011111, %11111111, %11111100, %11110000, %00111111, %00000111, %11111110
  281 D1:BF46 F0 3C 00 3F 
              E0 78 00 1F 	.db %11110000, %00111100, %00000000, %00111111, %11100000, %01111000, %00000000, %00011111
  282 D1:BF4E E0 78 00 07 
              E0 78 0E 07 	.db %11100000, %01111000, %00000000, %00000111, %11100000, %01111000, %00001110, %00000111
  283 D1:BF56 E0 78 0E 07 
              E0 38 0E 03 	.db %11100000, %01111000, %00001110, %00000111, %11100000, %00111000, %00001110, %00000011
  284 D1:BF5E F0 3C 1E 03 
              F8 3E 3E 07 	.db %11110000, %00111100, %00011110, %00000011, %11111000, %00111110, %00111110, %00000111
  285 D1:BF66 F8 1F FE 07 
              78 1F FC 07 	.db %11111000, %00011111, %11111110, %00000111, %01111000, %00011111, %11111100, %00000111
  286 D1:BF6E 3C 0F F8 0F 
              3E 00 70 1F 	.db %00111100, %00001111, %11111000, %00001111, %00111110, %00000000, %01110000, %00011111
  287 D1:BF76 1F 00 00 3E 
              0F 80 00 FE 	.db %00011111, %00000000, %00000000, %00111110, %00001111, %10000000, %00000000, %11111110
  288 D1:BF7E 0F C0 01 FC 
              07 C0 03 F8 	.db %00001111, %11000000, %00000001, %11111100, %00000111, %11000000, %00000011, %11111000
  289 D1:BF86 03 E0 0F E0 
              01 FF FF C0 	.db %00000011, %11100000, %00001111, %11100000, %00000001, %11111111, %11111111, %11000000
  290 D1:BF8E 00 FF FF 00 
              00 7F FE 00 	.db %00000000, %11111111, %11111111, %00000000, %00000000, %01111111, %11111110, %00000000
  291 D1:BF96 -  -  -  -  
  292 D1:BF96 50 -  -  -  	.db %01010000
  293 D1:BF97 -  -  -  -  
  294 D1:BF97 -  -  -  -  
  295 D1:BF97 -  -  -  -  
  296 D1:BF97 -  -  -  -  Bluecurl:
  297 D1:BF97 08 -  -  -  	.db %00001000
  298 D1:BF98 30 30 -  -  	.db 48, 48
  299 D1:BF9A 00 00 FF C0 
              00 00 00 01 	.db %00000000, %00000000, %11111111, %11000000, %00000000, %00000000, %00000000, %00000001
  300 D1:BFA2 FF FE 00 00 
              00 07 C0 7F 	.db %11111111, %11111110, %00000000, %00000000, %00000000, %00000111, %11000000, %01111111
  301 D1:BFAA 00 00 00 1F 
              00 07 C0 00 	.db %00000000, %00000000, %00000000, %00011111, %00000000, %00000111, %11000000, %00000000
  302 D1:BFB2 00 3E 00 01 
              F0 00 00 78 	.db %00000000, %00111110, %00000000, %00000001, %11110000, %00000000, %00000000, %01111000
  303 D1:BFBA 00 00 78 00 
              00 F0 00 00 	.db %00000000, %00000000, %01111000, %00000000, %00000000, %11110000, %00000000, %00000000
  304 D1:BFC2 1C 00 01 E0 
              00 00 0C 00 	.db %00011100, %00000000, %00000001, %11100000, %00000000, %00000000, %00001100, %00000000
  305 D1:BFCA 01 C0 00 00 
              0E 00 01 80 	.db %00000001, %11000000, %00000000, %00000000, %00001110, %00000000, %00000001, %10000000
  306 D1:BFD2 00 00 07 00 
              03 80 00 00 	.db %00000000, %00000000, %00000111, %00000000, %00000011, %10000000, %00000000, %00000000
  307 D1:BFDA 03 80 03 03 
              FF 80 01 C0 	.db %00000011, %10000000, %00000011, %00000011, %11111111, %10000000, %00000001, %11000000
  308 D1:BFE2 03 0F FF C0 
              00 E0 07 1F 	.db %00000011, %00001111, %11111111, %11000000, %00000000, %11100000, %00000111, %00011111
  309 D1:BFEA 00 F0 00 F0 
              0E 18 00 78 	.db %00000000, %11110000, %00000000, %11110000, %00001110, %00011000, %00000000, %01111000
  310 D1:BFF2 00 30 0E 38 
              00 1C 00 38 	.db %00000000, %00110000, %00001110, %00111000, %00000000, %00011100, %00000000, %00111000
  311 D1:BFFA 1C 30 00 0E 
              00 38 1C 30 	.db %00011100, %00110000, %00000000, %00001110, %00000000, %00111000, %00011100, %00110000
  312 D1:C002 00 0E 00 1C 
              18 30 00 06 	.db %00000000, %00001110, %00000000, %00011100, %00011000, %00110000, %00000000, %00000110
  313 D1:C00A 00 0C 38 30 
              00 07 00 0E 	.db %00000000, %00001100, %00111000, %00110000, %00000000, %00000111, %00000000, %00001110
  314 D1:C012 70 30 1F 03 
              80 0E 60 30 	.db %01110000, %00110000, %00011111, %00000011, %10000000, %00001110, %01100000, %00110000
  315 D1:C01A 1F 01 C0 06 
              E0 30 18 00 	.db %00011111, %00000001, %11000000, %00000110, %11100000, %00110000, %00011000, %00000000
  316 D1:C022 C0 06 E0 30 
              18 00 C0 07 	.db %11000000, %00000110, %11100000, %00110000, %00011000, %00000000, %11000000, %00000111
  317 D1:C02A C0 30 18 00 
              C0 07 C0 30 	.db %11000000, %00110000, %00011000, %00000000, %11000000, %00000111, %11000000, %00110000
  318 D1:C032 18 00 C0 03 
              C0 30 1C 00 	.db %00011000, %00000000, %11000000, %00000011, %11000000, %00110000, %00011100, %00000000
  319 D1:C03A C0 03 C0 30 
              0C 00 C0 03 	.db %11000000, %00000011, %11000000, %00110000, %00001100, %00000000, %11000000, %00000011
  320 D1:C042 C0 30 0E 00 
              C0 07 C0 38 	.db %11000000, %00110000, %00001110, %00000000, %11000000, %00000111, %11000000, %00111000
  321 D1:C04A 07 00 C0 07 
              00 18 07 81 	.db %00000111, %00000000, %11000000, %00000111, %00000000, %00011000, %00000111, %10000001
  322 D1:C052 C0 06 00 18 
              01 E7 80 06 	.db %11000000, %00000110, %00000000, %00011000, %00000001, %11100111, %10000000, %00000110
  323 D1:C05A 00 1C 01 FF 
              80 06 00 0C 	.db %00000000, %00011100, %00000001, %11111111, %10000000, %00000110, %00000000, %00001100
  324 D1:C062 00 3C 00 0E 
              00 0E 00 00 	.db %00000000, %00111100, %00000000, %00001110, %00000000, %00001110, %00000000, %00000000
  325 D1:C06A 00 0E 00 06 
              00 00 00 0C 	.db %00000000, %00001110, %00000000, %00000110, %00000000, %00000000, %00000000, %00001100
  326 D1:C072 00 07 00 00 
              00 1C 00 03 	.db %00000000, %00000111, %00000000, %00000000, %00000000, %00011100, %00000000, %00000011
  327 D1:C07A 80 00 00 38 
              00 01 80 00 	.db %10000000, %00000000, %00000000, %00111000, %00000000, %00000001, %10000000, %00000000
  328 D1:C082 00 78 00 01 
              C0 00 00 F0 	.db %00000000, %01111000, %00000000, %00000001, %11000000, %00000000, %00000000, %11110000
  329 D1:C08A 00 00 E0 00 
              01 E0 00 00 	.db %00000000, %00000000, %11100000, %00000000, %00000001, %11100000, %00000000, %00000000
  330 D1:C092 70 00 03 80 
              00 00 78 00 	.db %01110000, %00000000, %00000011, %10000000, %00000000, %00000000, %01111000, %00000000
  331 D1:C09A 07 80 00 00 
              18 00 1F 00 	.db %00000111, %10000000, %00000000, %00000000, %00011000, %00000000, %00011111, %00000000
  332 D1:C0A2 00 00 1C 00 
              7C 00 00 00 	.db %00000000, %00000000, %00011100, %00000000, %01111100, %00000000, %00000000, %00000000
  333 D1:C0AA 1E 01 F8 00 
              00 00 07 F7 	.db %00011110, %00000001, %11111000, %00000000, %00000000, %00000000, %00000111, %11110111
  334 D1:C0B2 E0 00 00 00 
              03 FF 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000011, %11111111, %00000000, %00000000
  335 D1:C0BA -  -  -  -  
  336 D1:C0BA 60 -  -  -  	.db %01100000
  337 D1:C0BB -  -  -  -  
  338 D1:C0BB -  -  -  -  
  339 D1:C0BB -  -  -  -  
Listing for file "ascent.asm"
  281 D1:C0BB -  -  -  -  #include "FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FG_Data.txt"
    1 D1:C0BB -  -  -  -  FG_Data_frame_table:
    2 D1:C0BB 73 C9 D1 -  	.dl FG_Data_0
    3 D1:C0BE 4F C9 D1 -  	.dl FG_Data_1
    4 D1:C0C1 2B C9 D1 -  	.dl FG_Data_2
    5 D1:C0C4 03 C9 D1 -  	.dl FG_Data_3
    6 D1:C0C7 C3 C8 D1 -  	.dl FG_Data_4
    7 D1:C0CA 9B C8 D1 -  	.dl FG_Data_5
    8 D1:C0CD 77 C8 D1 -  	.dl FG_Data_6
    9 D1:C0D0 4F C8 D1 -  	.dl FG_Data_7
   10 D1:C0D3 27 C8 D1 -  	.dl FG_Data_8
   11 D1:C0D6 FF C7 D1 -  	.dl FG_Data_9
   12 D1:C0D9 D7 C7 D1 -  	.dl FG_Data_10
   13 D1:C0DC B3 C7 D1 -  	.dl FG_Data_11
   14 D1:C0DF 6F C7 D1 -  	.dl FG_Data_12
   15 D1:C0E2 4B C7 D1 -  	.dl FG_Data_13
   16 D1:C0E5 27 C7 D1 -  	.dl FG_Data_14
   17 D1:C0E8 FF C6 D1 -  	.dl FG_Data_15
   18 D1:C0EB D7 C6 D1 -  	.dl FG_Data_16
   19 D1:C0EE AF C6 D1 -  	.dl FG_Data_17
   20 D1:C0F1 7F C6 D1 -  	.dl FG_Data_18
   21 D1:C0F4 63 C6 D1 -  	.dl FG_Data_19
   22 D1:C0F7 3B C6 D1 -  	.dl FG_Data_20
   23 D1:C0FA C3 C5 D1 -  	.dl FG_Data_21
   24 D1:C0FD 2F C5 D1 -  	.dl FG_Data_22
   25 D1:C100 C3 C4 D1 -  	.dl FG_Data_23
   26 D1:C103 23 C4 D1 -  	.dl FG_Data_24
   27 D1:C106 8B C3 D1 -  	.dl FG_Data_25
   28 D1:C109 5F C3 D1 -  	.dl FG_Data_26
   29 D1:C10C 37 C3 D1 -  	.dl FG_Data_27
   30 D1:C10F 13 C3 D1 -  	.dl FG_Data_28
   31 D1:C112 CF C2 D1 -  	.dl FG_Data_29
   32 D1:C115 A7 C2 D1 -  	.dl FG_Data_30
   33 D1:C118 87 C2 D1 -  	.dl FG_Data_31
   34 D1:C11B 63 C2 D1 -  	.dl FG_Data_32
   35 D1:C11E 37 C2 D1 -  	.dl FG_Data_33
   36 D1:C121 03 C2 D1 -  	.dl FG_Data_34
   37 D1:C124 DF C1 D1 -  	.dl FG_Data_35
   38 D1:C127 A7 C1 D1 -  	.dl FG_Data_36
   39 D1:C12A 6F C1 D1 -  	.dl FG_Data_37
   40 D1:C12D 4F C1 D1 -  	.dl FG_Data_38
   41 D1:C130 33 C1 D1 -  	.dl FG_Data_39
   42 D1:C133 -  -  -  -  
   43 D1:C133 -  -  -  -  
   44 D1:C133 -  -  -  -  
   45 D1:C133 -  -  -  -  FG_Data_39:
   46 D1:C133 3B D2 D1 -  	.dl Sprite_Table_0
   47 D1:C136 06 -  -  -  	.db 6
   48 D1:C137 31 2D 77 01 	.db 49, 45, 119, 1
   49 D1:C13B 57 2D 28 01 	.db 87, 45, 40, 1
   50 D1:C13F 92 2D 51 01 	.db 146, 45, 81, 1
   51 D1:C143 A0 2D 1D 03 	.db 160, 45, 29, 3
   52 D1:C147 3A 17 50 07 	.db 58, 23, 80, 7
   53 D1:C14B 98 17 77 00 	.db 152, 23, 119, 0
   54 D1:C14F -  -  -  -  
   55 D1:C14F -  -  -  -  FG_Data_38:
   56 D1:C14F 3B D2 D1 -  	.dl Sprite_Table_0
   57 D1:C152 07 -  -  -  	.db 7
   58 D1:C153 1D 2D 22 02 	.db 29, 45, 34, 2
   59 D1:C157 62 2D 47 02 	.db 98, 45, 71, 2
   60 D1:C15B B0 2D 67 06 	.db 176, 45, 103, 6
   61 D1:C15F EF 2D 4F 03 	.db 239, 45, 79, 3
   62 D1:C163 34 2D 6B 03 	.db 52, 45, 107, 3
   63 D1:C167 D3 17 72 05 	.db 211, 23, 114, 5
   64 D1:C16B 94 17 40 05 	.db 148, 23, 64, 5
   65 D1:C16F -  -  -  -  
   66 D1:C16F -  -  -  -  FG_Data_37:
   67 D1:C16F 3B D2 D1 -  	.dl Sprite_Table_0
   68 D1:C172 0D -  -  -  	.db 13
   69 D1:C173 58 2D 6D 01 	.db 88, 45, 109, 1
   70 D1:C177 7E 2D 1E 01 	.db 126, 45, 30, 1
   71 D1:C17B B9 2D 47 01 	.db 185, 45, 71, 1
   72 D1:C17F C7 2D 13 03 	.db 199, 45, 19, 3
   73 D1:C183 16 2D 45 03 	.db 22, 45, 69, 3
   74 D1:C187 61 17 46 07 	.db 97, 23, 70, 7
   75 D1:C18B BF 17 6D 00 	.db 191, 23, 109, 0
   76 D1:C18F 6C 2D 2A 01 	.db 108, 45, 42, 1
   77 D1:C193 C2 2D 68 01 	.db 194, 45, 104, 1
   78 D1:C197 99 2D 27 03 	.db 153, 45, 39, 3
   79 D1:C19B 59 2D 5B 03 	.db 89, 45, 91, 3
   80 D1:C19F EF 17 4A 00 	.db 239, 23, 74, 0
   81 D1:C1A3 7F 2F 47 09 	.db 127, 47, 71, 9
   82 D1:C1A7 -  -  -  -  
   83 D1:C1A7 -  -  -  -  FG_Data_36:
   84 D1:C1A7 3B D2 D1 -  	.dl Sprite_Table_0
   85 D1:C1AA 0D -  -  -  	.db 13
   86 D1:C1AB 44 2D 18 02 	.db 68, 45, 24, 2
   87 D1:C1AF 89 2D 3D 02 	.db 137, 45, 61, 2
   88 D1:C1B3 D7 2D 5D 06 	.db 215, 45, 93, 6
   89 D1:C1B7 5B 2D 61 03 	.db 91, 45, 97, 3
   90 D1:C1BB FA 17 69 00 	.db 250, 23, 105, 0
   91 D1:C1BF BB 17 37 00 	.db 187, 23, 55, 0
   92 D1:C1C3 16 17 40 05 	.db 22, 23, 64, 5
   93 D1:C1C7 97 2D 24 01 	.db 151, 45, 36, 1
   94 D1:C1CB 8A 2D 5F 02 	.db 138, 45, 95, 2
   95 D1:C1CF DA 2D 49 03 	.db 218, 45, 73, 3
   96 D1:C1D3 2E 17 48 07 	.db 46, 23, 72, 7
   97 D1:C1D7 CE 17 74 04 	.db 206, 23, 116, 4
   98 D1:C1DB 68 17 3D 00 	.db 104, 23, 61, 0
   99 D1:C1DF -  -  -  -  
  100 D1:C1DF -  -  -  -  FG_Data_35:
  101 D1:C1DF 3B D2 D1 -  	.dl Sprite_Table_0
  102 D1:C1E2 08 -  -  -  	.db 8
  103 D1:C1E3 93 2D 20 01 	.db 147, 45, 32, 1
  104 D1:C1E7 E9 2D 5E 01 	.db 233, 45, 94, 1
  105 D1:C1EB C0 2D 1D 03 	.db 192, 45, 29, 3
  106 D1:C1EF 80 2D 51 03 	.db 128, 45, 81, 3
  107 D1:C1F3 01 2D 3F 03 	.db 1, 45, 63, 3
  108 D1:C1F7 A6 2F 3D 09 	.db 166, 47, 61, 9
  109 D1:C1FB E4 2D 37 03 	.db 228, 45, 55, 3
  110 D1:C1FF FB 17 6C 00 	.db 251, 23, 108, 0
  111 D1:C203 -  -  -  -  
  112 D1:C203 -  -  -  -  FG_Data_34:
  113 D1:C203 3B D2 D1 -  	.dl Sprite_Table_0
  114 D1:C206 0C -  -  -  	.db 12
  115 D1:C207 23 2D 2C 02 	.db 35, 45, 44, 2
  116 D1:C20B 5E 2D 55 02 	.db 94, 45, 85, 2
  117 D1:C20F 6C 2D 21 06 	.db 108, 45, 33, 6
  118 D1:C213 06 17 54 07 	.db 6, 23, 84, 7
  119 D1:C217 64 17 7A 05 	.db 100, 23, 122, 5
  120 D1:C21B BE 2D 1A 01 	.db 190, 45, 26, 1
  121 D1:C21F B1 2D 55 02 	.db 177, 45, 85, 2
  122 D1:C223 0B 2D 2D 03 	.db 11, 45, 45, 3
  123 D1:C227 55 17 3E 07 	.db 85, 23, 62, 7
  124 D1:C22B F5 17 6A 04 	.db 245, 23, 106, 4
  125 D1:C22F 8F 17 33 00 	.db 143, 23, 51, 0
  126 D1:C233 22 17 62 00 	.db 34, 23, 98, 0
  127 D1:C237 -  -  -  -  
  128 D1:C237 -  -  -  -  FG_Data_33:
  129 D1:C237 3B D2 D1 -  	.dl Sprite_Table_0
  130 D1:C23A 0A -  -  -  	.db 10
  131 D1:C23B 87 2D 1A 02 	.db 135, 45, 26, 2
  132 D1:C23F 2E 2D 4A 01 	.db 46, 45, 74, 1
  133 D1:C243 FD 2D 7B 02 	.db 253, 45, 123, 2
  134 D1:C247 7C 2D 6A 03 	.db 124, 45, 106, 3
  135 D1:C24B DE 2D 13 03 	.db 222, 45, 19, 3
  136 D1:C24F BB 2D 53 06 	.db 187, 45, 83, 6
  137 D1:C253 00 2D 6F 06 	.db 0, 45, 111, 6
  138 D1:C257 2E 17 15 04 	.db 46, 23, 21, 4
  139 D1:C25B 9F 17 76 05 	.db 159, 23, 118, 5
  140 D1:C25F 60 17 44 05 	.db 96, 23, 68, 5
  141 D1:C263 -  -  -  -  
  142 D1:C263 -  -  -  -  FG_Data_32:
  143 D1:C263 3B D2 D1 -  	.dl Sprite_Table_0
  144 D1:C266 08 -  -  -  	.db 8
  145 D1:C267 38 2D 2E 02 	.db 56, 45, 46, 2
  146 D1:C26B 8E 2D 6C 02 	.db 142, 45, 108, 2
  147 D1:C26F E9 2D 25 01 	.db 233, 45, 37, 1
  148 D1:C273 65 2D 2B 06 	.db 101, 45, 43, 6
  149 D1:C277 25 2D 5F 06 	.db 37, 45, 95, 6
  150 D1:C27B 93 17 15 04 	.db 147, 23, 21, 4
  151 D1:C27F BB 17 4E 00 	.db 187, 23, 78, 0
  152 D1:C283 4B 2F 4A 08 	.db 75, 47, 74, 8
  153 D1:C287 -  -  -  -  
  154 D1:C287 -  -  -  -  FG_Data_31:
  155 D1:C287 3B D2 D1 -  	.dl Sprite_Table_0
  156 D1:C28A 07 -  -  -  	.db 7
  157 D1:C28B 63 2D 28 02 	.db 99, 45, 40, 2
  158 D1:C28F 56 2D 62 01 	.db 86, 45, 98, 1
  159 D1:C293 A6 2D 4D 06 	.db 166, 45, 77, 6
  160 D1:C297 D6 2D 11 03 	.db 214, 45, 17, 3
  161 D1:C29B 9A 17 78 04 	.db 154, 23, 120, 4
  162 D1:C29F FE 17 09 00 	.db 254, 23, 9, 0
  163 D1:C2A3 34 17 40 05 	.db 52, 23, 64, 5
  164 D1:C2A7 -  -  -  -  
  165 D1:C2A7 -  -  -  -  FG_Data_30:
  166 D1:C2A7 3B D2 D1 -  	.dl Sprite_Table_0
  167 D1:C2AA 09 -  -  -  	.db 9
  168 D1:C2AB 49 2D 51 02 	.db 73, 45, 81, 2
  169 D1:C2AF 35 2D 26 01 	.db 53, 45, 38, 1
  170 D1:C2B3 9E 2D 76 01 	.db 158, 45, 118, 1
  171 D1:C2B7 F7 2D 07 03 	.db 247, 45, 7, 3
  172 D1:C2BB B0 2D 3B 06 	.db 176, 45, 59, 6
  173 D1:C2BF FA 17 4C 04 	.db 250, 23, 76, 4
  174 D1:C2C3 C7 17 6F 05 	.db 199, 23, 111, 5
  175 D1:C2C7 66 17 1C 00 	.db 102, 23, 28, 0
  176 D1:C2CB 6D 2F 30 08 	.db 109, 47, 48, 8
  177 D1:C2CF -  -  -  -  
  178 D1:C2CF -  -  -  -  FG_Data_29:
  179 D1:C2CF 3B D2 D1 -  	.dl Sprite_Table_0
  180 D1:C2D2 10 -  -  -  	.db 16
  181 D1:C2D3 E1 2D 20 01 	.db 225, 45, 32, 1
  182 D1:C2D7 DB 2D 2C 02 	.db 219, 45, 44, 2
  183 D1:C2DB B9 2D 3B 01 	.db 185, 45, 59, 1
  184 D1:C2DF A2 2D 40 02 	.db 162, 45, 64, 2
  185 D1:C2E3 B6 2D 4A 02 	.db 182, 45, 74, 2
  186 D1:C2E7 8B 2D 4F 02 	.db 139, 45, 79, 2
  187 D1:C2EB 8B 2D 4F 02 	.db 139, 45, 79, 2
  188 D1:C2EF A7 2D 66 02 	.db 167, 45, 102, 2
  189 D1:C2F3 80 2D 54 02 	.db 128, 45, 84, 2
  190 D1:C2F7 81 2D 24 01 	.db 129, 45, 36, 1
  191 D1:C2FB 50 2D 15 01 	.db 80, 45, 21, 1
  192 D1:C2FF D1 2D 0F 03 	.db 209, 45, 15, 3
  193 D1:C303 14 17 38 04 	.db 20, 23, 56, 4
  194 D1:C307 FA 17 7D 04 	.db 250, 23, 125, 4
  195 D1:C30B D9 17 44 05 	.db 217, 23, 68, 5
  196 D1:C30F 21 17 67 05 	.db 33, 23, 103, 5
  197 D1:C313 -  -  -  -  
  198 D1:C313 -  -  -  -  FG_Data_28:
  199 D1:C313 3B D2 D1 -  	.dl Sprite_Table_0
  200 D1:C316 08 -  -  -  	.db 8
  201 D1:C317 98 2D 3F 01 	.db 152, 45, 63, 1
  202 D1:C31B C9 2D 60 01 	.db 201, 45, 96, 1
  203 D1:C31F 6B 2D 83 01 	.db 107, 45, 131, 1
  204 D1:C323 D3 2D 13 03 	.db 211, 45, 19, 3
  205 D1:C327 59 17 1A 04 	.db 89, 23, 26, 4
  206 D1:C32B 64 17 6A 05 	.db 100, 23, 106, 5
  207 D1:C32F 05 17 41 05 	.db 5, 23, 65, 5
  208 D1:C333 F1 2F 4A 09 	.db 241, 47, 74, 9
  209 D1:C337 -  -  -  -  
  210 D1:C337 -  -  -  -  FG_Data_27:
  211 D1:C337 3B D2 D1 -  	.dl Sprite_Table_0
  212 D1:C33A 09 -  -  -  	.db 9
  213 D1:C33B 64 2D 3F 02 	.db 100, 45, 63, 2
  214 D1:C33F 79 2D 73 02 	.db 121, 45, 115, 2
  215 D1:C343 DA 2D 2A 01 	.db 218, 45, 42, 1
  216 D1:C347 F7 2D 54 03 	.db 247, 45, 84, 3
  217 D1:C34B 0D 2D 11 06 	.db 13, 45, 17, 6
  218 D1:C34F 81 17 5E 04 	.db 129, 23, 94, 4
  219 D1:C353 83 17 1E 05 	.db 131, 23, 30, 5
  220 D1:C357 14 17 34 00 	.db 20, 23, 52, 0
  221 D1:C35B 5C 2F 18 09 	.db 92, 47, 24, 9
  222 D1:C35F -  -  -  -  
  223 D1:C35F -  -  -  -  FG_Data_26:
  224 D1:C35F 3B D2 D1 -  	.dl Sprite_Table_0
  225 D1:C362 0A -  -  -  	.db 10
  226 D1:C363 78 2D 7F 02 	.db 120, 45, 127, 2
  227 D1:C367 5F 2D 20 02 	.db 95, 45, 32, 2
  228 D1:C36B D0 2D 4F 02 	.db 208, 45, 79, 2
  229 D1:C36F F9 2D 68 03 	.db 249, 45, 104, 3
  230 D1:C373 52 2D 52 03 	.db 82, 45, 82, 3
  231 D1:C377 8D 17 1F 04 	.db 141, 23, 31, 4
  232 D1:C37B 9A 17 43 00 	.db 154, 23, 67, 0
  233 D1:C37F 33 2D 7E 02 	.db 51, 45, 126, 2
  234 D1:C383 45 2D 42 03 	.db 69, 45, 66, 3
  235 D1:C387 02 2F 38 09 	.db 2, 47, 56, 9
  236 D1:C38B -  -  -  -  
  237 D1:C38B -  -  -  -  FG_Data_25:
  238 D1:C38B 3B D2 D1 -  	.dl Sprite_Table_0
  239 D1:C38E 25 -  -  -  	.db 37
  240 D1:C38F 00 2D 23 01 	.db 0, 45, 35, 1
  241 D1:C393 76 2D 28 02 	.db 118, 45, 40, 2
  242 D1:C397 70 2D 33 01 	.db 112, 45, 51, 1
  243 D1:C39B 4E 2D 43 02 	.db 78, 45, 67, 2
  244 D1:C39F 38 2D 47 01 	.db 56, 45, 71, 1
  245 D1:C3A3 4B 2D 51 01 	.db 75, 45, 81, 1
  246 D1:C3A7 20 2D 56 01 	.db 32, 45, 86, 1
  247 D1:C3AB 20 2D 56 01 	.db 32, 45, 86, 1
  248 D1:C3AF 6E 17 4C 00 	.db 110, 23, 76, 0
  249 D1:C3B3 FB 17 23 05 	.db 251, 23, 35, 5
  250 D1:C3B7 8F 17 84 04 	.db 143, 23, 132, 4
  251 D1:C3BB 16 2D 2C 02 	.db 22, 45, 44, 2
  252 D1:C3BF 15 2D 5B 01 	.db 21, 45, 91, 1
  253 D1:C3C3 CA 2D 2E 02 	.db 202, 45, 46, 2
  254 D1:C3C7 DE 2D 58 01 	.db 222, 45, 88, 1
  255 D1:C3CB 3C 2D 6D 01 	.db 60, 45, 109, 1
  256 D1:C3CF 8C 2F 33 08 	.db 140, 47, 51, 8
  257 D1:C3D3 66 2D 17 06 	.db 102, 45, 23, 6
  258 D1:C3D7 85 17 1F 00 	.db 133, 23, 31, 0
  259 D1:C3DB CF 2D 3E 06 	.db 207, 45, 62, 6
  260 D1:C3DF 98 2D 26 02 	.db 152, 45, 38, 2
  261 D1:C3E3 D3 2D 4F 02 	.db 211, 45, 79, 2
  262 D1:C3E7 53 2D 0D 06 	.db 83, 45, 13, 6
  263 D1:C3EB E1 2D 1B 06 	.db 225, 45, 27, 6
  264 D1:C3EF 30 2D 4D 06 	.db 48, 45, 77, 6
  265 D1:C3F3 7B 17 4E 04 	.db 123, 23, 78, 4
  266 D1:C3F7 D9 17 74 05 	.db 217, 23, 116, 5
  267 D1:C3FB 14 17 70 00 	.db 20, 23, 112, 0
  268 D1:C3FF 52 2D 7A 01 	.db 82, 45, 122, 1
  269 D1:C403 64 2D 3F 06 	.db 100, 45, 63, 6
  270 D1:C407 1A 17 20 00 	.db 26, 23, 32, 0
  271 D1:C40B 21 2F 34 08 	.db 33, 47, 52, 8
  272 D1:C40F 68 2D 54 02 	.db 104, 45, 84, 2
  273 D1:C413 54 2D 29 01 	.db 84, 45, 41, 1
  274 D1:C417 BD 2D 79 01 	.db 189, 45, 121, 1
  275 D1:C41B 19 17 80 04 	.db 25, 23, 128, 4
  276 D1:C41F 72 2D 75 02 	.db 114, 45, 117, 2
  277 D1:C423 -  -  -  -  
  278 D1:C423 -  -  -  -  FG_Data_24:
  279 D1:C423 3B D2 D1 -  	.dl Sprite_Table_0
  280 D1:C426 27 -  -  -  	.db 39
  281 D1:C427 95 2D 24 02 	.db 149, 45, 36, 2
  282 D1:C42B FA 2D 2F 02 	.db 250, 45, 47, 2
  283 D1:C42F 8F 2D 30 02 	.db 143, 45, 48, 2
  284 D1:C433 D8 2D 3E 01 	.db 216, 45, 62, 1
  285 D1:C437 6D 2D 3F 01 	.db 109, 45, 63, 1
  286 D1:C43B D5 2D 4D 02 	.db 213, 45, 77, 2
  287 D1:C43F C2 2D 43 02 	.db 194, 45, 67, 2
  288 D1:C443 57 2D 44 02 	.db 87, 45, 68, 2
  289 D1:C447 6A 2D 4E 02 	.db 106, 45, 78, 2
  290 D1:C44B AA 2D 52 02 	.db 170, 45, 82, 2
  291 D1:C44F 3F 2D 53 02 	.db 63, 45, 83, 2
  292 D1:C453 3F 2D 53 02 	.db 63, 45, 83, 2
  293 D1:C457 AA 2D 52 02 	.db 170, 45, 82, 2
  294 D1:C45B A0 2D 27 01 	.db 160, 45, 39, 1
  295 D1:C45F 9F 2D 57 02 	.db 159, 45, 87, 2
  296 D1:C463 6F 2D 18 01 	.db 111, 45, 24, 1
  297 D1:C467 F0 2D 12 03 	.db 240, 45, 18, 3
  298 D1:C46B F8 17 47 05 	.db 248, 23, 71, 5
  299 D1:C46F C6 2D 69 02 	.db 198, 45, 105, 2
  300 D1:C473 FC 2D 14 02 	.db 252, 45, 20, 2
  301 D1:C477 8D 17 48 05 	.db 141, 23, 72, 5
  302 D1:C47B 85 2D 13 03 	.db 133, 45, 19, 3
  303 D1:C47F 03 2D 66 02 	.db 3, 45, 102, 2
  304 D1:C483 5E 2D 1F 01 	.db 94, 45, 31, 1
  305 D1:C487 A3 2D 44 01 	.db 163, 45, 68, 1
  306 D1:C48B F1 2D 64 03 	.db 241, 45, 100, 3
  307 D1:C48F 75 2D 68 03 	.db 117, 45, 104, 3
  308 D1:C493 08 17 0E 07 	.db 8, 23, 14, 7
  309 D1:C497 A3 17 0F 04 	.db 163, 23, 15, 4
  310 D1:C49B D5 17 3E 00 	.db 213, 23, 62, 0
  311 D1:C49F 30 17 47 05 	.db 48, 23, 71, 5
  312 D1:C4A3 5B 2D 6A 02 	.db 91, 45, 106, 2
  313 D1:C4A7 FD 2D 55 02 	.db 253, 45, 85, 2
  314 D1:C4AB E9 2D 2A 01 	.db 233, 45, 42, 1
  315 D1:C4AF 34 2D 58 02 	.db 52, 45, 88, 2
  316 D1:C4B3 35 2D 28 01 	.db 53, 45, 40, 1
  317 D1:C4B7 04 2D 19 01 	.db 4, 45, 25, 1
  318 D1:C4BB AE 17 80 07 	.db 174, 23, 128, 7
  319 D1:C4BF E5 2D 1D 02 	.db 229, 45, 29, 2
  320 D1:C4C3 -  -  -  -  
  321 D1:C4C3 -  -  -  -  FG_Data_23:
  322 D1:C4C3 3B D2 D1 -  	.dl Sprite_Table_0
  323 D1:C4C6 1A -  -  -  	.db 26
  324 D1:C4C7 2D 2D 1A 02 	.db 45, 45, 26, 2
  325 D1:C4CB 27 2D 26 02 	.db 39, 45, 38, 2
  326 D1:C4CF 05 2D 35 01 	.db 5, 45, 53, 1
  327 D1:C4D3 02 2D 44 02 	.db 2, 45, 68, 2
  328 D1:C4D7 AD 2D 28 02 	.db 173, 45, 40, 2
  329 D1:C4DB 25 17 3E 05 	.db 37, 23, 62, 5
  330 D1:C4DF B2 17 16 00 	.db 178, 23, 22, 0
  331 D1:C4E3 46 17 76 07 	.db 70, 23, 118, 7
  332 D1:C4E7 1D 2D 09 03 	.db 29, 45, 9, 3
  333 D1:C4EB FC 2D 35 06 	.db 252, 45, 53, 6
  334 D1:C4EF EA 2D 70 01 	.db 234, 45, 112, 1
  335 D1:C4F3 81 2D 20 01 	.db 129, 45, 32, 1
  336 D1:C4F7 95 2D 4B 02 	.db 149, 45, 75, 2
  337 D1:C4FB 24 2F 3F 08 	.db 36, 47, 63, 8
  338 D1:C4FF 67 2D 4A 06 	.db 103, 45, 74, 6
  339 D1:C503 55 2D 85 01 	.db 85, 45, 133, 1
  340 D1:C507 00 2D 60 02 	.db 0, 45, 96, 2
  341 D1:C50B C0 2F 44 08 	.db 192, 47, 68, 8
  342 D1:C50F 73 17 03 00 	.db 115, 23, 3, 0
  343 D1:C513 0F 17 71 07 	.db 15, 23, 113, 7
  344 D1:C517 4B 2D 0B 06 	.db 75, 45, 11, 6
  345 D1:C51B 1B 2D 46 03 	.db 27, 45, 70, 3
  346 D1:C51F 9A 2D 59 06 	.db 154, 45, 89, 6
  347 D1:C523 DA 2D 25 06 	.db 218, 45, 37, 6
  348 D1:C527 1D 17 2B 00 	.db 29, 23, 43, 0
  349 D1:C52B B9 2F 2A 08 	.db 185, 47, 42, 8
  350 D1:C52F -  -  -  -  
  351 D1:C52F -  -  -  -  FG_Data_22:
  352 D1:C52F 3B D2 D1 -  	.dl Sprite_Table_0
  353 D1:C532 24 -  -  -  	.db 36
  354 D1:C533 98 2D 2F 01 	.db 152, 45, 47, 1
  355 D1:C537 92 2D 3B 02 	.db 146, 45, 59, 2
  356 D1:C53B 70 2D 4A 01 	.db 112, 45, 74, 1
  357 D1:C53F EF 2D 3A 02 	.db 239, 45, 58, 2
  358 D1:C543 5A 2D 4F 02 	.db 90, 45, 79, 2
  359 D1:C547 6D 2D 59 02 	.db 109, 45, 89, 2
  360 D1:C54B 42 2D 5E 02 	.db 66, 45, 94, 2
  361 D1:C54F D7 2D 48 01 	.db 215, 45, 72, 1
  362 D1:C553 42 2D 5E 02 	.db 66, 45, 94, 2
  363 D1:C557 D7 2D 48 01 	.db 215, 45, 72, 1
  364 D1:C55B CC 2D 4E 02 	.db 204, 45, 78, 2
  365 D1:C55F CD 2D 1E 01 	.db 205, 45, 30, 1
  366 D1:C563 07 2D 24 01 	.db 7, 45, 36, 1
  367 D1:C567 9C 2D 0F 01 	.db 156, 45, 15, 1
  368 D1:C56B 90 17 53 05 	.db 144, 23, 83, 5
  369 D1:C56F B1 17 8B 07 	.db 177, 23, 139, 7
  370 D1:C573 88 2D 1E 03 	.db 136, 45, 30, 3
  371 D1:C577 F3 2D 60 02 	.db 243, 45, 96, 2
  372 D1:C57B 38 2D 33 01 	.db 56, 45, 51, 1
  373 D1:C57F EC 2D 35 01 	.db 236, 45, 53, 1
  374 D1:C583 D8 2D 22 02 	.db 216, 45, 34, 2
  375 D1:C587 CB 2D 5C 01 	.db 203, 45, 92, 1
  376 D1:C58B 6C 2D 01 06 	.db 108, 45, 1, 6
  377 D1:C58F 25 2D 35 06 	.db 37, 45, 53, 6
  378 D1:C593 6F 17 46 04 	.db 111, 23, 70, 4
  379 D1:C597 A9 17 3A 05 	.db 169, 23, 58, 5
  380 D1:C59B 37 2D 63 02 	.db 55, 45, 99, 2
  381 D1:C59F 3C 17 69 05 	.db 60, 23, 105, 5
  382 D1:C5A3 08 2D 2E 02 	.db 8, 45, 46, 2
  383 D1:C5A7 71 2D 7E 02 	.db 113, 45, 126, 2
  384 D1:C5AB 83 2D 42 03 	.db 131, 45, 66, 3
  385 D1:C5AF 39 17 23 05 	.db 57, 23, 35, 5
  386 D1:C5B3 40 2F 38 09 	.db 64, 47, 56, 9
  387 D1:C5B7 5E 2D 75 02 	.db 94, 45, 117, 2
  388 D1:C5BB 1C 2D 58 01 	.db 28, 45, 88, 1
  389 D1:C5BF 13 2D 70 01 	.db 19, 45, 112, 1
  390 D1:C5C3 -  -  -  -  
  391 D1:C5C3 -  -  -  -  FG_Data_21:
  392 D1:C5C3 3B D2 D1 -  	.dl Sprite_Table_0
  393 D1:C5C6 1D -  -  -  	.db 29
  394 D1:C5C7 56 2D 1A 02 	.db 86, 45, 26, 2
  395 D1:C5CB B4 2D 28 02 	.db 180, 45, 40, 2
  396 D1:C5CF 50 2D 26 02 	.db 80, 45, 38, 2
  397 D1:C5D3 AE 2D 33 01 	.db 174, 45, 51, 1
  398 D1:C5D7 2E 2D 35 01 	.db 46, 45, 53, 1
  399 D1:C5DB 8C 2D 43 02 	.db 140, 45, 67, 2
  400 D1:C5DF 76 2D 47 01 	.db 118, 45, 71, 1
  401 D1:C5E3 18 2D 3A 02 	.db 24, 45, 58, 2
  402 D1:C5E7 2B 2D 44 02 	.db 43, 45, 68, 2
  403 D1:C5EB 89 2D 51 01 	.db 137, 45, 81, 1
  404 D1:C5EF 5E 2D 56 01 	.db 94, 45, 86, 1
  405 D1:C5F3 5E 2D 56 01 	.db 94, 45, 86, 1
  406 D1:C5F7 00 2D 48 01 	.db 0, 45, 72, 1
  407 D1:C5FB 00 2D 48 01 	.db 0, 45, 72, 1
  408 D1:C5FF AC 17 4C 00 	.db 172, 23, 76, 0
  409 D1:C603 CD 17 84 04 	.db 205, 23, 132, 4
  410 D1:C607 A4 2D 17 06 	.db 164, 45, 23, 6
  411 D1:C60B 23 2D 1D 02 	.db 35, 45, 29, 2
  412 D1:C60F E2 2F 2A 08 	.db 226, 47, 42, 8
  413 D1:C613 53 2D 5B 01 	.db 83, 45, 91, 1
  414 D1:C617 7A 2D 6D 01 	.db 122, 45, 109, 1
  415 D1:C61B 4E 17 3E 05 	.db 78, 23, 62, 5
  416 D1:C61F DB 17 16 00 	.db 219, 23, 22, 0
  417 D1:C623 6F 17 76 07 	.db 111, 23, 118, 7
  418 D1:C627 46 2D 09 03 	.db 70, 45, 9, 3
  419 D1:C62B AA 2D 20 01 	.db 170, 45, 32, 1
  420 D1:C62F BE 2D 4B 02 	.db 190, 45, 75, 2
  421 D1:C633 54 2D 2C 02 	.db 84, 45, 44, 2
  422 D1:C637 1C 2D 60 02 	.db 28, 45, 96, 2
  423 D1:C63B -  -  -  -  
  424 D1:C63B -  -  -  -  FG_Data_20:
  425 D1:C63B 3B D2 D1 -  	.dl Sprite_Table_0
  426 D1:C63E 09 -  -  -  	.db 9
  427 D1:C63F 0D 2D 39 01 	.db 13, 45, 57, 1
  428 D1:C643 F5 2D 4E 02 	.db 245, 45, 78, 2
  429 D1:C647 F6 2D 1E 01 	.db 246, 45, 30, 1
  430 D1:C64B C5 2D 0F 01 	.db 197, 45, 15, 1
  431 D1:C64F 3E 2D 5A 01 	.db 62, 45, 90, 1
  432 D1:C653 48 2D 0D 06 	.db 72, 45, 13, 6
  433 D1:C657 89 17 32 04 	.db 137, 23, 50, 4
  434 D1:C65B 96 17 61 05 	.db 150, 23, 97, 5
  435 D1:C65F 66 2F 44 09 	.db 102, 47, 68, 9
  436 D1:C663 -  -  -  -  
  437 D1:C663 -  -  -  -  FG_Data_19:
  438 D1:C663 3B D2 D1 -  	.dl Sprite_Table_0
  439 D1:C666 06 -  -  -  	.db 6
  440 D1:C667 4F 2D 24 01 	.db 79, 45, 36, 1
  441 D1:C66B E0 2D 7D 01 	.db 224, 45, 125, 1
  442 D1:C66F 6C 2D 4E 06 	.db 108, 45, 78, 6
  443 D1:C673 CE 17 14 04 	.db 206, 23, 20, 4
  444 D1:C677 D9 17 64 05 	.db 217, 23, 100, 5
  445 D1:C67B 7A 17 3B 05 	.db 122, 23, 59, 5
  446 D1:C67F -  -  -  -  
  447 D1:C67F -  -  -  -  FG_Data_18:
  448 D1:C67F 3B D2 D1 -  	.dl Sprite_Table_0
  449 D1:C682 0B -  -  -  	.db 11
  450 D1:C683 45 2D 49 02 	.db 69, 45, 73, 2
  451 D1:C687 D9 2D 39 02 	.db 217, 45, 57, 2
  452 D1:C68B EE 2D 6D 02 	.db 238, 45, 109, 2
  453 D1:C68F 82 2D 0A 03 	.db 130, 45, 10, 3
  454 D1:C693 6E 2D 62 06 	.db 110, 45, 98, 6
  455 D1:C697 02 17 19 04 	.db 2, 23, 25, 4
  456 D1:C69B F6 17 57 07 	.db 246, 23, 87, 7
  457 D1:C69F F8 17 18 05 	.db 248, 23, 24, 5
  458 D1:C6A3 89 17 2E 00 	.db 137, 23, 46, 0
  459 D1:C6A7 0F 17 3D 00 	.db 15, 23, 61, 0
  460 D1:C6AB D1 2F 12 09 	.db 209, 47, 18, 9
  461 D1:C6AF -  -  -  -  
  462 D1:C6AF -  -  -  -  FG_Data_17:
  463 D1:C6AF 3B D2 D1 -  	.dl Sprite_Table_0
  464 D1:C6B2 09 -  -  -  	.db 9
  465 D1:C6B3 12 2D 77 01 	.db 18, 45, 119, 1
  466 D1:C6B7 38 2D 28 01 	.db 56, 45, 40, 1
  467 D1:C6BB 73 2D 51 01 	.db 115, 45, 81, 1
  468 D1:C6BF 81 2D 1D 03 	.db 129, 45, 29, 3
  469 D1:C6C3 1B 17 50 07 	.db 27, 23, 80, 7
  470 D1:C6C7 79 17 77 00 	.db 121, 23, 119, 0
  471 D1:C6CB ED 2D 79 02 	.db 237, 45, 121, 2
  472 D1:C6CF D4 2D 1A 02 	.db 212, 45, 26, 2
  473 D1:C6D3 C7 2D 4C 06 	.db 199, 45, 76, 6
  474 D1:C6D7 -  -  -  -  
  475 D1:C6D7 -  -  -  -  FG_Data_16:
  476 D1:C6D7 3B D2 D1 -  	.dl Sprite_Table_0
  477 D1:C6DA 09 -  -  -  	.db 9
  478 D1:C6DB 9C 2D 16 01 	.db 156, 45, 22, 1
  479 D1:C6DF 43 2D 47 02 	.db 67, 45, 71, 2
  480 D1:C6E3 91 2D 67 06 	.db 145, 45, 103, 6
  481 D1:C6E7 F3 2D 10 06 	.db 243, 45, 16, 6
  482 D1:C6EB D0 2D 4F 03 	.db 208, 45, 79, 3
  483 D1:C6EF 15 2D 6B 03 	.db 21, 45, 107, 3
  484 D1:C6F3 43 17 11 07 	.db 67, 23, 17, 7
  485 D1:C6F7 B4 17 73 00 	.db 180, 23, 115, 0
  486 D1:C6FB 75 17 41 00 	.db 117, 23, 65, 0
  487 D1:C6FF -  -  -  -  
  488 D1:C6FF -  -  -  -  FG_Data_15:
  489 D1:C6FF 3B D2 D1 -  	.dl Sprite_Table_0
  490 D1:C702 09 -  -  -  	.db 9
  491 D1:C703 4D 2D 2A 01 	.db 77, 45, 42, 1
  492 D1:C707 A3 2D 68 01 	.db 163, 45, 104, 1
  493 D1:C70B FE 2D 22 02 	.db 254, 45, 34, 2
  494 D1:C70F 7A 2D 27 03 	.db 122, 45, 39, 3
  495 D1:C713 3A 2D 5B 03 	.db 58, 45, 91, 3
  496 D1:C717 A8 17 11 04 	.db 168, 23, 17, 4
  497 D1:C71B D0 17 4A 05 	.db 208, 23, 74, 5
  498 D1:C71F 13 17 05 05 	.db 19, 23, 5, 5
  499 D1:C723 60 2F 47 09 	.db 96, 47, 71, 9
  500 D1:C727 -  -  -  -  
  501 D1:C727 -  -  -  -  FG_Data_14:
  502 D1:C727 3B D2 D1 -  	.dl Sprite_Table_0
  503 D1:C72A 08 -  -  -  	.db 8
  504 D1:C72B 78 2D 24 01 	.db 120, 45, 36, 1
  505 D1:C72F 6B 2D 5F 02 	.db 107, 45, 95, 2
  506 D1:C733 BB 2D 49 03 	.db 187, 45, 73, 3
  507 D1:C737 EB 2D 0E 06 	.db 235, 45, 14, 6
  508 D1:C73B 0C 2D 04 06 	.db 12, 45, 4, 6
  509 D1:C73F 0F 17 48 07 	.db 15, 23, 72, 7
  510 D1:C743 AF 17 74 04 	.db 175, 23, 116, 4
  511 D1:C747 49 17 3D 00 	.db 73, 23, 61, 0
  512 D1:C74B -  -  -  -  
  513 D1:C74B -  -  -  -  FG_Data_13:
  514 D1:C74B 3B D2 D1 -  	.dl Sprite_Table_0
  515 D1:C74E 08 -  -  -  	.db 8
  516 D1:C74F 5E 2D 4D 01 	.db 94, 45, 77, 1
  517 D1:C753 4A 2D 23 02 	.db 74, 45, 35, 2
  518 D1:C757 B3 2D 73 02 	.db 179, 45, 115, 2
  519 D1:C75B C5 2D 37 03 	.db 197, 45, 55, 3
  520 D1:C75F 0F 17 79 04 	.db 15, 23, 121, 4
  521 D1:C763 DC 17 6C 00 	.db 220, 23, 108, 0
  522 D1:C767 7B 17 18 05 	.db 123, 23, 24, 5
  523 D1:C76B 82 2F 2D 09 	.db 130, 47, 45, 9
  524 D1:C76F -  -  -  -  
  525 D1:C76F -  -  -  -  FG_Data_12:
  526 D1:C76F 3B D2 D1 -  	.dl Sprite_Table_0
  527 D1:C772 10 -  -  -  	.db 16
  528 D1:C773 F6 2D 1D 02 	.db 246, 45, 29, 2
  529 D1:C777 F0 2D 28 01 	.db 240, 45, 40, 1
  530 D1:C77B CE 2D 38 02 	.db 206, 45, 56, 2
  531 D1:C77F B8 2D 3C 01 	.db 184, 45, 60, 1
  532 D1:C783 CB 2D 46 01 	.db 203, 45, 70, 1
  533 D1:C787 A0 2D 4B 01 	.db 160, 45, 75, 1
  534 D1:C78B A0 2D 4B 01 	.db 160, 45, 75, 1
  535 D1:C78F BC 2D 62 01 	.db 188, 45, 98, 1
  536 D1:C793 95 2D 50 01 	.db 149, 45, 80, 1
  537 D1:C797 96 2D 21 02 	.db 150, 45, 33, 2
  538 D1:C79B 65 2D 12 02 	.db 101, 45, 18, 2
  539 D1:C79F E6 2D 0C 06 	.db 230, 45, 12, 6
  540 D1:C7A3 29 17 34 07 	.db 41, 23, 52, 7
  541 D1:C7A7 EE 17 41 00 	.db 238, 23, 65, 0
  542 D1:C7AB 36 17 64 00 	.db 54, 23, 100, 0
  543 D1:C7AF 06 2F 46 08 	.db 6, 47, 70, 8
  544 D1:C7B3 -  -  -  -  
  545 D1:C7B3 -  -  -  -  FG_Data_11:
  546 D1:C7B3 3B D2 D1 -  	.dl Sprite_Table_0
  547 D1:C7B6 08 -  -  -  	.db 8
  548 D1:C7B7 AD 2D 3C 02 	.db 173, 45, 60, 2
  549 D1:C7BB DE 2D 5D 02 	.db 222, 45, 93, 2
  550 D1:C7BF 80 2D 80 02 	.db 128, 45, 128, 2
  551 D1:C7C3 E8 2D 10 06 	.db 232, 45, 16, 6
  552 D1:C7C7 0C 2D 51 06 	.db 12, 45, 81, 6
  553 D1:C7CB 6E 17 16 07 	.db 110, 23, 22, 7
  554 D1:C7CF 79 17 67 00 	.db 121, 23, 103, 0
  555 D1:C7D3 1A 17 3E 00 	.db 26, 23, 62, 0
  556 D1:C7D7 -  -  -  -  
  557 D1:C7D7 -  -  -  -  FG_Data_10:
  558 D1:C7D7 3B D2 D1 -  	.dl Sprite_Table_0
  559 D1:C7DA 09 -  -  -  	.db 9
  560 D1:C7DB 79 2D 3B 01 	.db 121, 45, 59, 1
  561 D1:C7DF 8E 2D 6F 01 	.db 142, 45, 111, 1
  562 D1:C7E3 EF 2D 27 02 	.db 239, 45, 39, 2
  563 D1:C7E7 22 2D 0D 03 	.db 34, 45, 13, 3
  564 D1:C7EB 0E 2D 65 06 	.db 14, 45, 101, 6
  565 D1:C7EF 96 17 5A 07 	.db 150, 23, 90, 7
  566 D1:C7F3 98 17 1B 00 	.db 152, 23, 27, 0
  567 D1:C7F7 29 17 30 05 	.db 41, 23, 48, 5
  568 D1:C7FB 71 2F 14 08 	.db 113, 47, 20, 8
  569 D1:C7FF -  -  -  -  
  570 D1:C7FF -  -  -  -  FG_Data_9:
  571 D1:C7FF 3B D2 D1 -  	.dl Sprite_Table_0
  572 D1:C802 09 -  -  -  	.db 9
  573 D1:C803 18 2D 56 01 	.db 24, 45, 86, 1
  574 D1:C807 26 2D 22 03 	.db 38, 45, 34, 3
  575 D1:C80B 1E 17 7C 00 	.db 30, 23, 124, 0
  576 D1:C80F 8D 2D 7B 01 	.db 141, 45, 123, 1
  577 D1:C813 74 2D 1C 01 	.db 116, 45, 28, 1
  578 D1:C817 E5 2D 4B 01 	.db 229, 45, 75, 1
  579 D1:C81B 67 2D 4F 06 	.db 103, 45, 79, 6
  580 D1:C81F A2 17 1B 07 	.db 162, 23, 27, 7
  581 D1:C823 AF 17 3F 05 	.db 175, 23, 63, 5
  582 D1:C827 -  -  -  -  
  583 D1:C827 -  -  -  -  FG_Data_8:
  584 D1:C827 3B D2 D1 -  	.dl Sprite_Table_0
  585 D1:C82A 09 -  -  -  	.db 9
  586 D1:C82B 41 2D 1B 01 	.db 65, 45, 27, 1
  587 D1:C82F B7 2D 7C 01 	.db 183, 45, 124, 1
  588 D1:C833 DD 2D 2D 01 	.db 221, 45, 45, 1
  589 D1:C837 36 2D 6C 06 	.db 54, 45, 108, 6
  590 D1:C83B 98 2D 15 06 	.db 152, 45, 21, 6
  591 D1:C83F 75 2D 54 03 	.db 117, 45, 84, 3
  592 D1:C843 C0 17 55 07 	.db 192, 23, 85, 7
  593 D1:C847 59 17 78 00 	.db 89, 23, 120, 0
  594 D1:C84B 1A 17 46 00 	.db 26, 23, 70, 0
  595 D1:C84F -  -  -  -  
  596 D1:C84F -  -  -  -  FG_Data_7:
  597 D1:C84F 3B D2 D1 -  	.dl Sprite_Table_0
  598 D1:C852 09 -  -  -  	.db 9
  599 D1:C853 48 2D 6D 01 	.db 72, 45, 109, 1
  600 D1:C857 A3 2D 27 02 	.db 163, 45, 39, 2
  601 D1:C85B E8 2D 4C 02 	.db 232, 45, 76, 2
  602 D1:C85F BA 2D 70 03 	.db 186, 45, 112, 3
  603 D1:C863 1F 2D 2C 03 	.db 31, 45, 44, 3
  604 D1:C867 4D 17 16 04 	.db 77, 23, 22, 4
  605 D1:C86B E8 17 16 07 	.db 232, 23, 22, 7
  606 D1:C86F 75 17 4F 05 	.db 117, 23, 79, 5
  607 D1:C873 05 2F 4C 09 	.db 5, 47, 76, 9
  608 D1:C877 -  -  -  -  
  609 D1:C877 -  -  -  -  FG_Data_6:
  610 D1:C877 3B D2 D1 -  	.dl Sprite_Table_0
  611 D1:C87A 08 -  -  -  	.db 8
  612 D1:C87B 1D 2D 29 01 	.db 29, 45, 41, 1
  613 D1:C87F 10 2D 64 02 	.db 16, 45, 100, 2
  614 D1:C883 F2 2D 2F 01 	.db 242, 45, 47, 1
  615 D1:C887 DF 2D 60 03 	.db 223, 45, 96, 3
  616 D1:C88B 60 2D 4E 03 	.db 96, 45, 78, 3
  617 D1:C88F 90 2D 13 06 	.db 144, 45, 19, 6
  618 D1:C893 54 17 79 04 	.db 84, 23, 121, 4
  619 D1:C897 B8 17 0A 05 	.db 184, 23, 10, 5
  620 D1:C89B -  -  -  -  
  621 D1:C89B -  -  -  -  FG_Data_5:
  622 D1:C89B 3B D2 D1 -  	.dl Sprite_Table_0
  623 D1:C89E 09 -  -  -  	.db 9
  624 D1:C89F 03 2D 52 01 	.db 3, 45, 82, 1
  625 D1:C8A3 58 2D 78 02 	.db 88, 45, 120, 2
  626 D1:C8A7 B1 2D 09 06 	.db 177, 45, 9, 6
  627 D1:C8AB 6A 2D 3C 03 	.db 106, 45, 60, 3
  628 D1:C8AF B4 17 4D 07 	.db 180, 23, 77, 7
  629 D1:C8B3 EE 17 42 00 	.db 238, 23, 66, 0
  630 D1:C8B7 81 17 71 00 	.db 129, 23, 113, 0
  631 D1:C8BB 20 17 1D 05 	.db 32, 23, 29, 5
  632 D1:C8BF 27 2F 32 09 	.db 39, 47, 50, 9
  633 D1:C8C3 -  -  -  -  
  634 D1:C8C3 -  -  -  -  FG_Data_4:
  635 D1:C8C3 3B D2 D1 -  	.dl Sprite_Table_0
  636 D1:C8C6 0F -  -  -  	.db 15
  637 D1:C8C7 9B 2D 22 02 	.db 155, 45, 34, 2
  638 D1:C8CB 95 2D 2D 01 	.db 149, 45, 45, 1
  639 D1:C8CF 73 2D 3D 02 	.db 115, 45, 61, 2
  640 D1:C8D3 5D 2D 41 01 	.db 93, 45, 65, 1
  641 D1:C8D7 70 2D 4B 01 	.db 112, 45, 75, 1
  642 D1:C8DB 45 2D 50 01 	.db 69, 45, 80, 1
  643 D1:C8DF 45 2D 50 01 	.db 69, 45, 80, 1
  644 D1:C8E3 61 2D 67 01 	.db 97, 45, 103, 1
  645 D1:C8E7 EF 2D 28 02 	.db 239, 45, 40, 2
  646 D1:C8EB 3A 2D 55 01 	.db 58, 45, 85, 1
  647 D1:C8EF 3B 2D 26 02 	.db 59, 45, 38, 2
  648 D1:C8F3 0A 2D 17 02 	.db 10, 45, 23, 2
  649 D1:C8F7 8B 2D 11 06 	.db 139, 45, 17, 6
  650 D1:C8FB B4 17 7E 04 	.db 180, 23, 126, 4
  651 D1:C8FF 93 17 46 00 	.db 147, 23, 70, 0
  652 D1:C903 -  -  -  -  
  653 D1:C903 -  -  -  -  FG_Data_3:
  654 D1:C903 3B D2 D1 -  	.dl Sprite_Table_0
  655 D1:C906 09 -  -  -  	.db 9
  656 D1:C907 52 2D 41 02 	.db 82, 45, 65, 2
  657 D1:C90B 83 2D 62 02 	.db 131, 45, 98, 2
  658 D1:C90F 25 2D 85 02 	.db 37, 45, 133, 2
  659 D1:C913 8D 2D 15 06 	.db 141, 45, 21, 6
  660 D1:C917 13 17 1B 07 	.db 19, 23, 27, 7
  661 D1:C91B CE 17 39 07 	.db 206, 23, 57, 7
  662 D1:C91F DB 17 69 00 	.db 219, 23, 105, 0
  663 D1:C923 1E 17 6C 00 	.db 30, 23, 108, 0
  664 D1:C927 AB 2F 4B 08 	.db 171, 47, 75, 8
  665 D1:C92B -  -  -  -  
  666 D1:C92B -  -  -  -  FG_Data_2:
  667 D1:C92B 3B D2 D1 -  	.dl Sprite_Table_0
  668 D1:C92E 08 -  -  -  	.db 8
  669 D1:C92F 1E 2D 40 01 	.db 30, 45, 64, 1
  670 D1:C933 33 2D 74 01 	.db 51, 45, 116, 1
  671 D1:C937 94 2D 2C 02 	.db 148, 45, 44, 2
  672 D1:C93B B1 2D 56 06 	.db 177, 45, 86, 6
  673 D1:C93F 3B 17 5F 07 	.db 59, 23, 95, 7
  674 D1:C943 BF 17 43 00 	.db 191, 23, 67, 0
  675 D1:C947 3D 17 20 00 	.db 61, 23, 32, 0
  676 D1:C94B 16 2F 19 08 	.db 22, 47, 25, 8
  677 D1:C94F -  -  -  -  
  678 D1:C94F -  -  -  -  FG_Data_1:
  679 D1:C94F 3B D2 D1 -  	.dl Sprite_Table_0
  680 D1:C952 08 -  -  -  	.db 8
  681 D1:C953 15 2D 68 02 	.db 21, 45, 104, 2
  682 D1:C957 8A 2D 50 01 	.db 138, 45, 80, 1
  683 D1:C95B C7 2D 12 03 	.db 199, 45, 18, 3
  684 D1:C95F B3 2D 6A 06 	.db 179, 45, 106, 6
  685 D1:C963 0C 2D 54 06 	.db 12, 45, 84, 6
  686 D1:C967 47 17 20 07 	.db 71, 23, 32, 7
  687 D1:C96B CE 17 35 05 	.db 206, 23, 53, 5
  688 D1:C96F 54 17 44 05 	.db 84, 23, 68, 5
  689 D1:C973 -  -  -  -  
  690 D1:C973 -  -  -  -  FG_Data_0:
  691 D1:C973 3B D2 D1 -  	.dl Sprite_Table_0
  692 D1:C976 09 -  -  -  	.db 9
  693 D1:C977 36 17 66 00 	.db 54, 23, 102, 0
  694 D1:C97B 87 2D 2B 01 	.db 135, 45, 43, 1
  695 D1:C97F FC 2D 09 02 	.db 252, 45, 9, 2
  696 D1:C983 B2 2D 84 02 	.db 178, 45, 132, 2
  697 D1:C987 81 2D 0E 03 	.db 129, 45, 14, 3
  698 D1:C98B 2E 17 07 04 	.db 46, 23, 7, 4
  699 D1:C98F BD 17 61 04 	.db 189, 23, 97, 4
  700 D1:C993 C8 17 1A 05 	.db 200, 23, 26, 5
  701 D1:C997 36 17 47 00 	.db 54, 23, 71, 0
  702 D1:C99B -  -  -  -  
  703 D1:C99B -  -  -  -  
  704 D1:C99B -  -  -  -  
Listing for file "ascent.asm"
  282 D1:C99B -  -  -  -  #include "MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\MG_Data.txt"
    1 D1:C99B -  -  -  -  MG_Data_frame_table:
    2 D1:C99B 47 CE D1 -  	.dl MG_Data_0
    3 D1:C99E 13 CE D1 -  	.dl MG_Data_1
    4 D1:C9A1 EB CD D1 -  	.dl MG_Data_2
    5 D1:C9A4 BB CD D1 -  	.dl MG_Data_3
    6 D1:C9A7 7F CD D1 -  	.dl MG_Data_4
    7 D1:C9AA 4F CD D1 -  	.dl MG_Data_5
    8 D1:C9AD 1F CD D1 -  	.dl MG_Data_6
    9 D1:C9B0 F3 CC D1 -  	.dl MG_Data_7
   10 D1:C9B3 BB CC D1 -  	.dl MG_Data_8
   11 D1:C9B6 97 CC D1 -  	.dl MG_Data_9
   12 D1:C9B9 6B CC D1 -  	.dl MG_Data_10
   13 D1:C9BC 33 CC D1 -  	.dl MG_Data_11
   14 D1:C9BF D3 CB D1 -  	.dl MG_Data_12
   15 D1:C9C2 6F CB D1 -  	.dl MG_Data_13
   16 D1:C9C5 13 CB D1 -  	.dl MG_Data_14
   17 D1:C9C8 B7 CA D1 -  	.dl MG_Data_15
   18 D1:C9CB 5B CA D1 -  	.dl MG_Data_16
   19 D1:C9CE 2F CA D1 -  	.dl MG_Data_17
   20 D1:C9D1 03 CA D1 -  	.dl MG_Data_18
   21 D1:C9D4 D7 C9 D1 -  	.dl MG_Data_19
   22 D1:C9D7 -  -  -  -  
   23 D1:C9D7 -  -  -  -  
   24 D1:C9D7 -  -  -  -  
   25 D1:C9D7 -  -  -  -  MG_Data_19:
   26 D1:C9D7 3B D2 D1 -  	.dl Sprite_Table_0
   27 D1:C9DA 0A -  -  -  	.db 10
   28 D1:C9DB 9C 0E 5E 0A 	.db 156, 14, 94, 10
   29 D1:C9DF 0C 0E 2A 0B 	.db 12, 14, 42, 11
   30 D1:C9E3 45 0E 82 0A 	.db 69, 14, 130, 10
   31 D1:C9E7 72 0E 26 0A 	.db 114, 14, 38, 10
   32 D1:C9EB 0C 0E 57 0B 	.db 12, 14, 87, 11
   33 D1:C9EF 43 2F 3F 08 	.db 67, 47, 63, 8
   34 D1:C9F3 63 2D 1A 01 	.db 99, 45, 26, 1
   35 D1:C9F7 63 2D 79 02 	.db 99, 45, 121, 2
   36 D1:C9FB 28 17 6C 0E 	.db 40, 23, 108, 14
   37 D1:C9FF 90 17 36 0E 	.db 144, 23, 54, 14
   38 D1:CA03 -  -  -  -  
   39 D1:CA03 -  -  -  -  MG_Data_18:
   40 D1:CA03 3B D2 D1 -  	.dl Sprite_Table_0
   41 D1:CA06 0A -  -  -  	.db 10
   42 D1:CA07 02 0E 75 0A 	.db 2, 14, 117, 10
   43 D1:CA0B 89 0E 35 0A 	.db 137, 14, 53, 10
   44 D1:CA0F FE 0E 19 0B 	.db 254, 14, 25, 11
   45 D1:CA13 8D 0E 6F 0A 	.db 141, 14, 111, 10
   46 D1:CA17 2E 0E 3D 0B 	.db 46, 14, 61, 11
   47 D1:CA1B 03 2D 1F 02 	.db 3, 45, 31, 2
   48 D1:CA1F BC 2D 67 02 	.db 188, 45, 103, 2
   49 D1:CA23 AE 2D 2A 02 	.db 174, 45, 42, 2
   50 D1:CA27 39 2D 5D 03 	.db 57, 45, 93, 3
   51 D1:CA2B 4F 17 3F 0E 	.db 79, 23, 63, 14
   52 D1:CA2F -  -  -  -  
   53 D1:CA2F -  -  -  -  MG_Data_17:
   54 D1:CA2F 3B D2 D1 -  	.dl Sprite_Table_0
   55 D1:CA32 0A -  -  -  	.db 10
   56 D1:CA33 9F 0E 51 0A 	.db 159, 14, 81, 10
   57 D1:CA37 76 0E 2C 0B 	.db 118, 14, 44, 11
   58 D1:CA3B E7 0E 28 0B 	.db 231, 14, 40, 11
   59 D1:CA3F 6B 0E 64 0A 	.db 107, 14, 100, 10
   60 D1:CA43 CD 2F 78 09 	.db 205, 47, 120, 9
   61 D1:CA47 21 2D 74 01 	.db 33, 45, 116, 1
   62 D1:CA4B 8D 2D 30 03 	.db 141, 45, 48, 3
   63 D1:CA4F 5C 17 75 0E 	.db 92, 23, 117, 14
   64 D1:CA53 C7 17 40 0D 	.db 199, 23, 64, 13
   65 D1:CA57 13 17 3E 0D 	.db 19, 23, 62, 13
   66 D1:CA5B -  -  -  -  
   67 D1:CA5B -  -  -  -  MG_Data_16:
   68 D1:CA5B 3B D2 D1 -  	.dl Sprite_Table_0
   69 D1:CA5E 16 -  -  -  	.db 22
   70 D1:CA5F 52 0E 1B 0A 	.db 82, 14, 27, 10
   71 D1:CA63 7E 2D 42 03 	.db 126, 45, 66, 3
   72 D1:CA67 5B 2D 16 02 	.db 91, 45, 22, 2
   73 D1:CA6B D1 2F 7A 08 	.db 209, 47, 122, 8
   74 D1:CA6F DF 0E 42 0A 	.db 223, 14, 66, 10
   75 D1:CA73 58 0E 5E 0A 	.db 88, 14, 94, 10
   76 D1:CA77 A4 0E 64 0A 	.db 164, 14, 100, 10
   77 D1:CA7B A8 0E 22 0A 	.db 168, 14, 34, 10
   78 D1:CA7F E4 17 38 0C 	.db 228, 23, 56, 12
   79 D1:CA83 7C 17 6E 0C 	.db 124, 23, 110, 12
   80 D1:CA87 02 2D 2C 01 	.db 2, 45, 44, 1
   81 D1:CA8B B7 2D 7B 01 	.db 183, 45, 123, 1
   82 D1:CA8F B7 2D 1D 02 	.db 183, 45, 29, 2
   83 D1:CA93 10 2D 69 01 	.db 16, 45, 105, 1
   84 D1:CA97 97 2F 42 09 	.db 151, 47, 66, 9
   85 D1:CA9B 60 0E 59 0A 	.db 96, 14, 89, 10
   86 D1:CA9F C6 0E 29 0B 	.db 198, 14, 41, 11
   87 D1:CAA3 99 0E 85 0B 	.db 153, 14, 133, 11
   88 D1:CAA7 60 0E 2C 0A 	.db 96, 14, 44, 10
   89 D1:CAAB F0 0E 61 0B 	.db 240, 14, 97, 11
   90 D1:CAAF D9 17 36 0E 	.db 217, 23, 54, 14
   91 D1:CAB3 29 17 64 0F 	.db 41, 23, 100, 15
   92 D1:CAB7 -  -  -  -  
   93 D1:CAB7 -  -  -  -  MG_Data_15:
   94 D1:CAB7 3B D2 D1 -  	.dl Sprite_Table_0
   95 D1:CABA 16 -  -  -  	.db 22
   96 D1:CABB 56 0E 78 0B 	.db 86, 14, 120, 11
   97 D1:CABF 39 2D 15 03 	.db 57, 45, 21, 3
   98 D1:CAC3 C6 2D 57 01 	.db 198, 45, 87, 1
   99 D1:CAC7 CB 2F 27 08 	.db 203, 47, 39, 8
  100 D1:CACB A0 2F 72 08 	.db 160, 47, 114, 8
  101 D1:CACF 94 0E 8A 0B 	.db 148, 14, 138, 11
  102 D1:CAD3 64 0E 6F 0A 	.db 100, 14, 111, 10
  103 D1:CAD7 F3 0E 2E 0B 	.db 243, 14, 46, 11
  104 D1:CADB F3 0E 6A 0B 	.db 243, 14, 106, 11
  105 D1:CADF 82 0E 53 0A 	.db 130, 14, 83, 10
  106 D1:CAE3 55 0E 20 0A 	.db 85, 14, 32, 10
  107 D1:CAE7 1B 17 42 0F 	.db 27, 23, 66, 15
  108 D1:CAEB A3 17 41 0C 	.db 163, 23, 65, 12
  109 D1:CAEF 8D 2D 60 06 	.db 141, 45, 96, 6
  110 D1:CAF3 57 2D 21 01 	.db 87, 45, 33, 1
  111 D1:CAF7 21 2F 7A 08 	.db 33, 47, 122, 8
  112 D1:CAFB 82 0E 3F 0A 	.db 130, 14, 63, 10
  113 D1:CAFF 3B 0E 2A 0A 	.db 59, 14, 42, 10
  114 D1:CB03 E1 0E 72 0B 	.db 225, 14, 114, 11
  115 D1:CB07 DD 0E 38 0B 	.db 221, 14, 56, 11
  116 D1:CB0B 5E 17 36 0E 	.db 94, 23, 54, 14
  117 D1:CB0F EE 17 82 0C 	.db 238, 23, 130, 12
  118 D1:CB13 -  -  -  -  
  119 D1:CB13 -  -  -  -  MG_Data_14:
  120 D1:CB13 3B D2 D1 -  	.dl Sprite_Table_0
  121 D1:CB16 16 -  -  -  	.db 22
  122 D1:CB17 F3 0E 54 0B 	.db 243, 14, 84, 11
  123 D1:CB1B BB 2D 7B 06 	.db 187, 45, 123, 6
  124 D1:CB1F FF 2D 3C 01 	.db 255, 45, 60, 1
  125 D1:CB23 78 2D 60 01 	.db 120, 45, 96, 1
  126 D1:CB27 5A 2F 2A 08 	.db 90, 47, 42, 8
  127 D1:CB2B C9 0E 1B 0B 	.db 201, 14, 27, 11
  128 D1:CB2F 89 0E 62 0A 	.db 137, 14, 98, 10
  129 D1:CB33 8A 0E 1E 0A 	.db 138, 14, 30, 10
  130 D1:CB37 BB 0E 8A 0B 	.db 187, 14, 138, 11
  131 D1:CB3B CE 0E 4C 0B 	.db 206, 14, 76, 11
  132 D1:CB3F 3B 0E 60 0A 	.db 59, 14, 96, 10
  133 D1:CB43 67 17 40 0F 	.db 103, 23, 64, 15
  134 D1:CB47 B0 17 77 0C 	.db 176, 23, 119, 12
  135 D1:CB4B 2D 17 38 0C 	.db 45, 23, 56, 12
  136 D1:CB4F E1 2D 33 06 	.db 225, 45, 51, 6
  137 D1:CB53 75 2D 77 02 	.db 117, 45, 119, 2
  138 D1:CB57 25 2F 7D 09 	.db 37, 47, 125, 9
  139 D1:CB5B 33 0E 45 0B 	.db 51, 14, 69, 11
  140 D1:CB5F BF 0E 67 0B 	.db 191, 14, 103, 11
  141 D1:CB63 CA 0E 2E 0A 	.db 202, 14, 46, 10
  142 D1:CB67 97 17 23 0C 	.db 151, 23, 35, 12
  143 D1:CB6B F2 17 65 0E 	.db 242, 23, 101, 14
  144 D1:CB6F -  -  -  -  
  145 D1:CB6F -  -  -  -  MG_Data_13:
  146 D1:CB6F 3B D2 D1 -  	.dl Sprite_Table_0
  147 D1:CB72 18 -  -  -  	.db 24
  148 D1:CB73 47 0E 6C 0A 	.db 71, 14, 108, 10
  149 D1:CB77 01 17 5A 0E 	.db 1, 23, 90, 14
  150 D1:CB7B 1C 2D 1A 06 	.db 28, 45, 26, 6
  151 D1:CB7F D5 2D 4B 03 	.db 213, 45, 75, 3
  152 D1:CB83 E3 2D 1F 02 	.db 227, 45, 31, 2
  153 D1:CB87 01 2D 7B 01 	.db 1, 45, 123, 1
  154 D1:CB8B 7E 0E 4D 0A 	.db 126, 14, 77, 10
  155 D1:CB8F 7E 0E 2F 0A 	.db 126, 14, 47, 10
  156 D1:CB93 6B 0E 73 0A 	.db 107, 14, 115, 10
  157 D1:CB97 C9 0E 6F 0A 	.db 201, 14, 111, 10
  158 D1:CB9B D5 0E 48 0B 	.db 213, 14, 72, 11
  159 D1:CB9F D2 0E 2C 0B 	.db 210, 14, 44, 11
  160 D1:CBA3 7D 17 67 0D 	.db 125, 23, 103, 13
  161 D1:CBA7 42 17 85 0E 	.db 66, 23, 133, 14
  162 D1:CBAB D2 2D 45 06 	.db 210, 45, 69, 6
  163 D1:CBAF AF 2D 18 01 	.db 175, 45, 24, 1
  164 D1:CBB3 1A 2D 5A 02 	.db 26, 45, 90, 2
  165 D1:CBB7 1F 2F 2A 09 	.db 31, 47, 42, 9
  166 D1:CBBB AC 0E 61 0B 	.db 172, 14, 97, 11
  167 D1:CBBF 47 0E 30 0A 	.db 71, 14, 48, 10
  168 D1:CBC3 F8 0E 67 0B 	.db 248, 14, 103, 11
  169 D1:CBC7 FC 0E 25 0B 	.db 252, 14, 37, 11
  170 D1:CBCB B6 17 79 0C 	.db 182, 23, 121, 12
  171 D1:CBCF FE 17 29 0F 	.db 254, 23, 41, 15
  172 D1:CBD3 -  -  -  -  
  173 D1:CBD3 -  -  -  -  MG_Data_12:
  174 D1:CBD3 3B D2 D1 -  	.dl Sprite_Table_0
  175 D1:CBD6 17 -  -  -  	.db 23
  176 D1:CBD7 22 0E 4E 0A 	.db 34, 14, 78, 10
  177 D1:CBDB 63 2D 5D 03 	.db 99, 45, 93, 3
  178 D1:CBDF D3 2F 22 08 	.db 211, 47, 34, 8
  179 D1:CBE3 AF 0E 55 0B 	.db 175, 14, 85, 11
  180 D1:CBE7 94 0E 84 0B 	.db 148, 14, 132, 11
  181 D1:CBEB 76 0E 2D 0A 	.db 118, 14, 45, 10
  182 D1:CBEF EB 0E 73 0A 	.db 235, 14, 115, 10
  183 D1:CBF3 F4 0E 3B 0B 	.db 244, 14, 59, 11
  184 D1:CBF7 74 0E 59 0B 	.db 116, 14, 89, 11
  185 D1:CBFB B2 17 38 0C 	.db 178, 23, 56, 12
  186 D1:CBFF 3B 17 3F 0E 	.db 59, 23, 63, 14
  187 D1:CC03 46 17 67 0C 	.db 70, 23, 103, 12
  188 D1:CC07 0F 2D 7D 03 	.db 15, 45, 125, 3
  189 D1:CC0B 53 2D 3F 02 	.db 83, 45, 63, 2
  190 D1:CC0F F4 2F 75 09 	.db 244, 47, 117, 9
  191 D1:CC13 E8 0E 8C 0A 	.db 232, 14, 140, 10
  192 D1:CC17 1D 0E 1D 0A 	.db 29, 14, 29, 10
  193 D1:CC1B 0F 0E 8C 0A 	.db 15, 14, 140, 10
  194 D1:CC1F B8 0E 72 0B 	.db 184, 14, 114, 11
  195 D1:CC23 D6 0E 56 0B 	.db 214, 14, 86, 11
  196 D1:CC27 A9 0E 23 0B 	.db 169, 14, 35, 11
  197 D1:CC2B 8D 2D 18 06 	.db 141, 45, 24, 6
  198 D1:CC2F 3B 17 17 0F 	.db 59, 23, 23, 15
  199 D1:CC33 -  -  -  -  
  200 D1:CC33 -  -  -  -  MG_Data_11:
  201 D1:CC33 3B D2 D1 -  	.dl Sprite_Table_0
  202 D1:CC36 0D -  -  -  	.db 13
  203 D1:CC37 26 0E 2E 0A 	.db 38, 14, 46, 10
  204 D1:CC3B 8F 0E 63 0B 	.db 143, 14, 99, 11
  205 D1:CC3F DE 0E 21 0B 	.db 222, 14, 33, 11
  206 D1:CC43 29 0E 4A 0A 	.db 41, 14, 74, 10
  207 D1:CC47 1D 0E 72 0B 	.db 29, 14, 114, 11
  208 D1:CC4B DD 0E 65 0B 	.db 221, 14, 101, 11
  209 D1:CC4F AE 2F 2D 09 	.db 174, 47, 45, 9
  210 D1:CC53 37 2D 21 01 	.db 55, 45, 33, 1
  211 D1:CC57 CC 2D 63 02 	.db 204, 45, 99, 2
  212 D1:CC5B 29 2D 4E 06 	.db 41, 45, 78, 6
  213 D1:CC5F 0A 17 7C 0E 	.db 10, 23, 124, 14
  214 D1:CC63 EB 17 26 0E 	.db 235, 23, 38, 14
  215 D1:CC67 52 17 2C 0D 	.db 82, 23, 44, 13
  216 D1:CC6B -  -  -  -  
  217 D1:CC6B -  -  -  -  MG_Data_10:
  218 D1:CC6B 3B D2 D1 -  	.dl Sprite_Table_0
  219 D1:CC6E 0A -  -  -  	.db 10
  220 D1:CC6F 48 0E 3D 0A 	.db 72, 14, 61, 10
  221 D1:CC73 BF 0E 76 0B 	.db 191, 14, 118, 11
  222 D1:CC77 D2 0E 32 0B 	.db 210, 14, 50, 11
  223 D1:CC7B 3F 0E 76 0B 	.db 63, 14, 118, 11
  224 D1:CC7F 03 0E 57 0A 	.db 3, 14, 87, 10
  225 D1:CC83 D2 0E 50 0B 	.db 210, 14, 80, 11
  226 D1:CC87 27 2F 25 09 	.db 39, 47, 37, 9
  227 D1:CC8B 55 2D 7E 02 	.db 85, 45, 126, 2
  228 D1:CC8F 70 2D 1C 03 	.db 112, 45, 28, 3
  229 D1:CC93 55 17 5C 0C 	.db 85, 23, 92, 12
  230 D1:CC97 -  -  -  -  
  231 D1:CC97 -  -  -  -  MG_Data_9:
  232 D1:CC97 3B D2 D1 -  	.dl Sprite_Table_0
  233 D1:CC9A 08 -  -  -  	.db 8
  234 D1:CC9B 24 0E 59 0B 	.db 36, 14, 89, 11
  235 D1:CC9F 18 17 30 0C 	.db 24, 23, 48, 12
  236 D1:CCA3 C8 0E 5B 0A 	.db 200, 14, 91, 10
  237 D1:CCA7 CA 0E 30 0B 	.db 202, 14, 48, 11
  238 D1:CCAB E8 0E 86 0A 	.db 232, 14, 134, 10
  239 D1:CCAF B7 2D 60 06 	.db 183, 45, 96, 6
  240 D1:CCB3 8F 17 41 0C 	.db 143, 23, 65, 12
  241 D1:CCB7 8F 17 1A 0D 	.db 143, 23, 26, 13
  242 D1:CCBB -  -  -  -  
  243 D1:CCBB -  -  -  -  MG_Data_8:
  244 D1:CCBB 3B D2 D1 -  	.dl Sprite_Table_0
  245 D1:CCBE 0D -  -  -  	.db 13
  246 D1:CCBF 11 0E 30 0B 	.db 17, 14, 48, 11
  247 D1:CCC3 86 0E 13 0A 	.db 134, 14, 19, 10
  248 D1:CCC7 15 0E 6A 0B 	.db 21, 14, 106, 11
  249 D1:CCCB 94 0E 24 0A 	.db 148, 14, 36, 10
  250 D1:CCCF CD 0E 7D 0B 	.db 205, 14, 125, 11
  251 D1:CCD3 FA 0E 21 0B 	.db 250, 14, 33, 11
  252 D1:CCD7 94 0E 51 0A 	.db 148, 14, 81, 10
  253 D1:CCDB CB 2F 3A 09 	.db 203, 47, 58, 9
  254 D1:CCDF 44 2D 61 01 	.db 68, 45, 97, 1
  255 D1:CCE3 EB 2D 15 02 	.db 235, 45, 21, 2
  256 D1:CCE7 EB 2D 73 01 	.db 235, 45, 115, 1
  257 D1:CCEB 36 2D 24 01 	.db 54, 45, 36, 1
  258 D1:CCEF B0 17 66 0C 	.db 176, 23, 102, 12
  259 D1:CCF3 -  -  -  -  
  260 D1:CCF3 -  -  -  -  MG_Data_7:
  261 D1:CCF3 3B D2 D1 -  	.dl Sprite_Table_0
  262 D1:CCF6 0A -  -  -  	.db 10
  263 D1:CCF7 27 0E 4C 0B 	.db 39, 14, 76, 11
  264 D1:CCFB 8A 0E 70 0B 	.db 138, 14, 112, 11
  265 D1:CCFF 6F 0E 22 0A 	.db 111, 14, 34, 10
  266 D1:CD03 B6 0E 37 0A 	.db 182, 14, 55, 10
  267 D1:CD07 55 2F 72 08 	.db 85, 47, 114, 8
  268 D1:CD0B 8B 2D 19 01 	.db 139, 45, 25, 1
  269 D1:CD0F C1 2D 58 06 	.db 193, 45, 88, 6
  270 D1:CD13 15 2D 2B 06 	.db 21, 45, 43, 6
  271 D1:CD17 D7 17 39 0C 	.db 215, 23, 57, 12
  272 D1:CD1B 4F 17 3A 0F 	.db 79, 23, 58, 15
  273 D1:CD1F -  -  -  -  
  274 D1:CD1F -  -  -  -  MG_Data_6:
  275 D1:CD1F 3B D2 D1 -  	.dl Sprite_Table_0
  276 D1:CD22 0B -  -  -  	.db 11
  277 D1:CD23 30 0E 1D 0B 	.db 48, 14, 29, 11
  278 D1:CD27 FE 0E 26 0A 	.db 254, 14, 38, 10
  279 D1:CD2B F3 0E 5F 0B 	.db 243, 14, 95, 11
  280 D1:CD2F 2C 0E 5F 0B 	.db 44, 14, 95, 11
  281 D1:CD33 67 0E 3D 0B 	.db 103, 14, 61, 11
  282 D1:CD37 59 2F 75 09 	.db 89, 47, 117, 9
  283 D1:CD3B A9 2D 6F 02 	.db 169, 45, 111, 2
  284 D1:CD3F 06 2D 3D 06 	.db 6, 45, 61, 6
  285 D1:CD43 61 17 30 0C 	.db 97, 23, 48, 12
  286 D1:CD47 E4 17 6F 0C 	.db 228, 23, 111, 12
  287 D1:CD4B 9B 17 38 0F 	.db 155, 23, 56, 15
  288 D1:CD4F -  -  -  -  
  289 D1:CD4F -  -  -  -  MG_Data_5:
  290 D1:CD4F 3B D2 D1 -  	.dl Sprite_Table_0
  291 D1:CD52 0B -  -  -  	.db 11
  292 D1:CD53 0A 0E 4E 0B 	.db 10, 14, 78, 11
  293 D1:CD57 7B 0E 64 0A 	.db 123, 14, 100, 10
  294 D1:CD5B 7B 0E 28 0A 	.db 123, 14, 40, 10
  295 D1:CD5F 1C 0E 84 0A 	.db 28, 14, 132, 10
  296 D1:CD63 E0 0E 59 0B 	.db 224, 14, 89, 11
  297 D1:CD67 28 2F 6D 09 	.db 40, 47, 109, 9
  298 D1:CD6B 53 2F 22 09 	.db 83, 47, 34, 9
  299 D1:CD6F 4E 2D 52 02 	.db 78, 45, 82, 2
  300 D1:CD73 E3 2D 10 01 	.db 227, 45, 16, 1
  301 D1:CD77 76 17 7D 0E 	.db 118, 23, 125, 14
  302 D1:CD7B B1 17 5F 0D 	.db 177, 23, 95, 13
  303 D1:CD7F -  -  -  -  
  304 D1:CD7F -  -  -  -  MG_Data_4:
  305 D1:CD7F 3B D2 D1 -  	.dl Sprite_Table_0
  306 D1:CD82 0E -  -  -  	.db 14
  307 D1:CD83 56 0E 46 0A 	.db 86, 14, 70, 10
  308 D1:CD87 DD 0E 1B 0B 	.db 221, 14, 27, 11
  309 D1:CD8B EC 0E 6A 0B 	.db 236, 14, 106, 11
  310 D1:CD8F 43 0E 84 0A 	.db 67, 14, 132, 10
  311 D1:CD93 12 0E 19 0B 	.db 18, 14, 25, 11
  312 D1:CD97 11 0E 5D 0B 	.db 17, 14, 93, 11
  313 D1:CD9B 51 0E 15 0A 	.db 81, 14, 21, 10
  314 D1:CD9F 00 2D 5B 02 	.db 0, 45, 91, 2
  315 D1:CDA3 87 2D 37 02 	.db 135, 45, 55, 2
  316 D1:CDA7 43 2D 75 03 	.db 67, 45, 117, 3
  317 D1:CDAB C1 2D 10 06 	.db 193, 45, 16, 6
  318 D1:CDAF 1F 17 1E 0E 	.db 31, 23, 30, 14
  319 D1:CDB3 7A 17 5F 0C 	.db 122, 23, 95, 12
  320 D1:CDB7 E6 17 30 0C 	.db 230, 23, 48, 12
  321 D1:CDBB -  -  -  -  
  322 D1:CDBB -  -  -  -  MG_Data_3:
  323 D1:CDBB 3B D2 D1 -  	.dl Sprite_Table_0
  324 D1:CDBE 0B -  -  -  	.db 11
  325 D1:CDBF 5A 0E 26 0A 	.db 90, 14, 38, 10
  326 D1:CDC3 C3 0E 5B 0B 	.db 195, 14, 91, 11
  327 D1:CDC7 5D 0E 42 0A 	.db 93, 14, 66, 10
  328 D1:CDCB 51 0E 6A 0B 	.db 81, 14, 106, 11
  329 D1:CDCF 06 0E 2A 0B 	.db 6, 14, 42, 11
  330 D1:CDD3 06 0E 48 0B 	.db 6, 14, 72, 11
  331 D1:CDD7 E2 2F 25 09 	.db 226, 47, 37, 9
  332 D1:CDDB 6B 2D 19 01 	.db 107, 45, 25, 1
  333 D1:CDDF 5D 2D 46 06 	.db 93, 45, 70, 6
  334 D1:CDE3 3E 17 74 0E 	.db 62, 23, 116, 14
  335 D1:CDE7 86 17 24 0D 	.db 134, 23, 36, 13
  336 D1:CDEB -  -  -  -  
  337 D1:CDEB -  -  -  -  MG_Data_2:
  338 D1:CDEB 3B D2 D1 -  	.dl Sprite_Table_0
  339 D1:CDEE 09 -  -  -  	.db 9
  340 D1:CDEF 7C 0E 35 0A 	.db 124, 14, 53, 10
  341 D1:CDF3 F3 0E 6E 0B 	.db 243, 14, 110, 11
  342 D1:CDF7 73 0E 6E 0B 	.db 115, 14, 110, 11
  343 D1:CDFB 1C 0E 7E 0A 	.db 28, 14, 126, 10
  344 D1:CDFF 37 0E 4F 0A 	.db 55, 14, 79, 10
  345 D1:CE03 5B 2F 1D 09 	.db 91, 47, 29, 9
  346 D1:CE07 89 2D 76 02 	.db 137, 45, 118, 2
  347 D1:CE0B A4 2D 14 03 	.db 164, 45, 20, 3
  348 D1:CE0F 89 17 54 0C 	.db 137, 23, 84, 12
  349 D1:CE13 -  -  -  -  
  350 D1:CE13 -  -  -  -  MG_Data_1:
  351 D1:CE13 3B D2 D1 -  	.dl Sprite_Table_0
  352 D1:CE16 0C -  -  -  	.db 12
  353 D1:CE17 4F 0E 31 0A 	.db 79, 14, 49, 10
  354 D1:CE1B FC 0E 53 0A 	.db 252, 14, 83, 10
  355 D1:CE1F FE 0E 28 0B 	.db 254, 14, 40, 11
  356 D1:CE23 77 0E 6A 0B 	.db 119, 14, 106, 11
  357 D1:CE27 95 0E 20 0A 	.db 149, 14, 32, 10
  358 D1:CE2B 3F 2F 52 08 	.db 63, 47, 82, 8
  359 D1:CE2F 7F 2D 3B 01 	.db 127, 45, 59, 1
  360 D1:CE33 EB 2D 58 06 	.db 235, 45, 88, 6
  361 D1:CE37 91 17 75 0D 	.db 145, 23, 117, 13
  362 D1:CE3B 37 17 81 0C 	.db 55, 23, 129, 12
  363 D1:CE3F C3 17 39 0C 	.db 195, 23, 57, 12
  364 D1:CE43 C3 17 12 0D 	.db 195, 23, 18, 13
  365 D1:CE47 -  -  -  -  
  366 D1:CE47 -  -  -  -  MG_Data_0:
  367 D1:CE47 3B D2 D1 -  	.dl Sprite_Table_0
  368 D1:CE4A 0A -  -  -  	.db 10
  369 D1:CE4B 5E 0E 15 0A 	.db 94, 14, 21, 10
  370 D1:CE4F 80 0E 40 0A 	.db 128, 14, 64, 10
  371 D1:CE53 AF 0E 64 0A 	.db 175, 14, 100, 10
  372 D1:CE57 46 0E 75 0A 	.db 70, 14, 117, 10
  373 D1:CE5B 37 0E 48 0B 	.db 55, 14, 72, 11
  374 D1:CE5F 95 0E 24 0A 	.db 149, 14, 36, 10
  375 D1:CE63 9E 2D 6E 03 	.db 158, 45, 110, 3
  376 D1:CE67 F8 2D 13 02 	.db 248, 45, 19, 2
  377 D1:CE6B 3A 17 22 0C 	.db 58, 23, 34, 12
  378 D1:CE6F D8 17 3F 0D 	.db 216, 23, 63, 13
  379 D1:CE73 -  -  -  -  
  380 D1:CE73 -  -  -  -  
  381 D1:CE73 -  -  -  -  
Listing for file "ascent.asm"
  283 D1:CE73 -  -  -  -  #include "BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BG_Data.txt"
    1 D1:CE73 -  -  -  -  BG_Data_frame_table:
    2 D1:CE73 7E D1 D1 -  	.dl BG_Data_0
    3 D1:CE76 46 D1 D1 -  	.dl BG_Data_1
    4 D1:CE79 FE D0 D1 -  	.dl BG_Data_2
    5 D1:CE7C AE D0 D1 -  	.dl BG_Data_3
    6 D1:CE7F 5E D0 D1 -  	.dl BG_Data_4
    7 D1:CE82 0E D0 D1 -  	.dl BG_Data_5
    8 D1:CE85 BE CF D1 -  	.dl BG_Data_6
    9 D1:CE88 6E CF D1 -  	.dl BG_Data_7
   10 D1:CE8B 16 CF D1 -  	.dl BG_Data_8
   11 D1:CE8E BE CE D1 -  	.dl BG_Data_9
   12 D1:CE91 B2 CE D1 -  	.dl BG_Data_10
   13 D1:CE94 AA CE D1 -  	.dl BG_Data_11
   14 D1:CE97 9A CE D1 -  	.dl BG_Data_12
   15 D1:CE9A -  -  -  -  
   16 D1:CE9A -  -  -  -  
   17 D1:CE9A -  -  -  -  
   18 D1:CE9A -  -  -  -  BG_Data_12:
   19 D1:CE9A 6B D2 D1 -  	.dl Sprite_Table_1
   20 D1:CE9D 03 -  -  -  	.db 3
   21 D1:CE9E D0 2D 2F 09 	.db 208, 45, 47, 9
   22 D1:CEA2 5E 2D 2F 09 	.db 94, 45, 47, 9
   23 D1:CEA6 D0 2D 2F 09 	.db 208, 45, 47, 9
   24 D1:CEAA -  -  -  -  
   25 D1:CEAA -  -  -  -  BG_Data_11:
   26 D1:CEAA 6B D2 D1 -  	.dl Sprite_Table_1
   27 D1:CEAD 01 -  -  -  	.db 1
   28 D1:CEAE D3 2D 2F 09 	.db 211, 45, 47, 9
   29 D1:CEB2 -  -  -  -  
   30 D1:CEB2 -  -  -  -  BG_Data_10:
   31 D1:CEB2 6B D2 D1 -  	.dl Sprite_Table_1
   32 D1:CEB5 02 -  -  -  	.db 2
   33 D1:CEB6 6B 2D 2F 09 	.db 107, 45, 47, 9
   34 D1:CEBA FE 2D 2F 09 	.db 254, 45, 47, 9
   35 D1:CEBE -  -  -  -  
   36 D1:CEBE -  -  -  -  BG_Data_9:
   37 D1:CEBE 6B D2 D1 -  	.dl Sprite_Table_1
   38 D1:CEC1 15 -  -  -  	.db 21
   39 D1:CEC2 4A 2D 49 09 	.db 74, 45, 73, 9
   40 D1:CEC6 A3 0E 86 0C 	.db 163, 14, 134, 12
   41 D1:CECA C1 0E 88 0C 	.db 193, 14, 136, 12
   42 D1:CECE C2 0E 92 0E 	.db 194, 14, 146, 14
   43 D1:CED2 D6 0E 93 0E 	.db 214, 14, 147, 14
   44 D1:CED6 D8 0E 88 0C 	.db 216, 14, 136, 12
   45 D1:CEDA ED 0E 89 0C 	.db 237, 14, 137, 12
   46 D1:CEDE F0 0E 93 0C 	.db 240, 14, 147, 12
   47 D1:CEE2 8C 0E 8E 0C 	.db 140, 14, 142, 12
   48 D1:CEE6 A6 0E 92 0E 	.db 166, 14, 146, 14
   49 D1:CEEA 43 2D 77 09 	.db 67, 45, 119, 9
   50 D1:CEEE 48 2D 55 00 	.db 72, 45, 85, 0
   51 D1:CEF2 56 2D 3C 09 	.db 86, 45, 60, 9
   52 D1:CEF6 52 2D 1F 09 	.db 82, 45, 31, 9
   53 D1:CEFA 54 2D 12 00 	.db 84, 45, 18, 0
   54 D1:CEFE 4A 2D 49 09 	.db 74, 45, 73, 9
   55 D1:CF02 43 2D 80 00 	.db 67, 45, 128, 0
   56 D1:CF06 23 1F 25 06 	.db 35, 31, 37, 6
   57 D1:CF0A 12 1F 22 04 	.db 18, 31, 34, 4
   58 D1:CF0E 49 2D 66 00 	.db 73, 45, 102, 0
   59 D1:CF12 8C 0E 8E 0C 	.db 140, 14, 142, 12
   60 D1:CF16 -  -  -  -  
   61 D1:CF16 -  -  -  -  BG_Data_8:
   62 D1:CF16 6B D2 D1 -  	.dl Sprite_Table_1
   63 D1:CF19 15 -  -  -  	.db 21
   64 D1:CF1A 34 2D 38 01 	.db 52, 45, 56, 1
   65 D1:CF1E CD 0E 8A 0E 	.db 205, 14, 138, 14
   66 D1:CF22 D1 0E 93 0C 	.db 209, 14, 147, 12
   67 D1:CF26 E4 0E 94 0C 	.db 228, 14, 148, 12
   68 D1:CF2A E2 0E 89 0C 	.db 226, 14, 137, 12
   69 D1:CF2E F9 0E 8A 0E 	.db 249, 14, 138, 14
   70 D1:CF32 FA 0E 93 0C 	.db 250, 14, 147, 12
   71 D1:CF36 02 1F 44 07 	.db 2, 31, 68, 7
   72 D1:CF3A 6F 1F 3A 0D 	.db 111, 31, 58, 13
   73 D1:CF3E BB 0E 8A 0E 	.db 187, 14, 138, 14
   74 D1:CF42 D3 1F 6D 06 	.db 211, 31, 109, 6
   75 D1:CF46 0F 1F 13 06 	.db 15, 31, 19, 6
   76 D1:CF4A 2A 1F 18 03 	.db 42, 31, 24, 3
   77 D1:CF4E 8D 1F 57 04 	.db 141, 31, 87, 4
   78 D1:CF52 08 1F 7F 04 	.db 8, 31, 127, 4
   79 D1:CF56 AE 2D 1F 00 	.db 174, 45, 31, 0
   80 D1:CF5A 2D 2D 5C 09 	.db 45, 45, 92, 9
   81 D1:CF5E FA 2D 6C 02 	.db 250, 45, 108, 2
   82 D1:CF62 FA 2D 3E 02 	.db 250, 45, 62, 2
   83 D1:CF66 19 1F 87 0D 	.db 25, 31, 135, 13
   84 D1:CF6A B6 0E 93 0E 	.db 182, 14, 147, 14
   85 D1:CF6E -  -  -  -  
   86 D1:CF6E -  -  -  -  BG_Data_7:
   87 D1:CF6E 6B D2 D1 -  	.dl Sprite_Table_1
   88 D1:CF71 13 -  -  -  	.db 19
   89 D1:CF72 08 2D 55 02 	.db 8, 45, 85, 2
   90 D1:CF76 D5 0E 95 0C 	.db 213, 14, 149, 12
   91 D1:CF7A E5 0E 95 0C 	.db 229, 14, 149, 12
   92 D1:CF7E E6 0E 8C 0C 	.db 230, 14, 140, 12
   93 D1:CF82 FA 0E 8F 0E 	.db 250, 14, 143, 14
   94 D1:CF86 F9 0E 96 0C 	.db 249, 14, 150, 12
   95 D1:CF8A A8 1F 14 07 	.db 168, 31, 20, 7
   96 D1:CF8E AF 1F 4D 06 	.db 175, 31, 77, 6
   97 D1:CF92 D0 0E 8A 0C 	.db 208, 14, 138, 12
   98 D1:CF96 3E 1F 2B 06 	.db 62, 31, 43, 6
   99 D1:CF9A 0D 1F 88 03 	.db 13, 31, 136, 3
  100 D1:CF9E 4A 1F 38 03 	.db 74, 31, 56, 3
  101 D1:CFA2 2C 1F 62 03 	.db 44, 31, 98, 3
  102 D1:CFA6 37 1F 0F 04 	.db 55, 31, 15, 4
  103 D1:CFAA A8 2D 4B 09 	.db 168, 45, 75, 9
  104 D1:CFAE D5 2D 7F 02 	.db 213, 45, 127, 2
  105 D1:CFB2 CA 2D 23 01 	.db 202, 45, 35, 1
  106 D1:CFB6 6D 1F 73 0F 	.db 109, 31, 115, 15
  107 D1:CFBA BB 0E 91 0E 	.db 187, 14, 145, 14
  108 D1:CFBE -  -  -  -  
  109 D1:CFBE -  -  -  -  BG_Data_6:
  110 D1:CFBE 6B D2 D1 -  	.dl Sprite_Table_1
  111 D1:CFC1 13 -  -  -  	.db 19
  112 D1:CFC2 0D 2D 22 02 	.db 13, 45, 34, 2
  113 D1:CFC6 E1 0E 93 0C 	.db 225, 14, 147, 12
  114 D1:CFCA E0 0E 8B 0C 	.db 224, 14, 139, 12
  115 D1:CFCE F5 0E 8C 0E 	.db 245, 14, 140, 14
  116 D1:CFD2 F8 0E 95 0C 	.db 248, 14, 149, 12
  117 D1:CFD6 8D 1F 2A 05 	.db 141, 31, 42, 5
  118 D1:CFDA 00 1F 77 05 	.db 0, 31, 119, 5
  119 D1:CFDE FB 1F 72 06 	.db 251, 31, 114, 6
  120 D1:CFE2 CF 0E 92 0C 	.db 207, 14, 146, 12
  121 D1:CFE6 94 1F 54 0D 	.db 148, 31, 84, 13
  122 D1:CFEA A2 1F 54 0A 	.db 162, 31, 84, 10
  123 D1:CFEE 40 1F 24 04 	.db 64, 31, 36, 4
  124 D1:CFF2 1A 1F 79 03 	.db 26, 31, 121, 3
  125 D1:CFF6 80 2D 32 00 	.db 128, 45, 50, 0
  126 D1:CFFA 9E 2D 80 09 	.db 158, 45, 128, 9
  127 D1:CFFE F1 2D 18 01 	.db 241, 45, 24, 1
  128 D1:D002 2B 2D 4F 01 	.db 43, 45, 79, 1
  129 D1:D006 88 1F 0F 0A 	.db 136, 31, 15, 10
  130 D1:D00A CD 0E 8A 0C 	.db 205, 14, 138, 12
  131 D1:D00E -  -  -  -  
  132 D1:D00E -  -  -  -  BG_Data_5:
  133 D1:D00E 6B D2 D1 -  	.dl Sprite_Table_1
  134 D1:D011 13 -  -  -  	.db 19
  135 D1:D012 1E 2D 46 02 	.db 30, 45, 70, 2
  136 D1:D016 D6 0E 8B 0E 	.db 214, 14, 139, 14
  137 D1:D01A ED 0E 8B 0C 	.db 237, 14, 139, 12
  138 D1:D01E F1 0E 96 0C 	.db 241, 14, 150, 12
  139 D1:D022 59 2F 42 0B 	.db 89, 47, 66, 11
  140 D1:D026 BD 2F 40 08 	.db 189, 47, 64, 8
  141 D1:D02A 5F 1F 25 05 	.db 95, 31, 37, 5
  142 D1:D02E 19 1F 6A 05 	.db 25, 31, 106, 5
  143 D1:D032 D7 0E 95 0E 	.db 215, 14, 149, 14
  144 D1:D036 E7 1F 32 0D 	.db 231, 31, 50, 13
  145 D1:D03A DE 1F 67 0A 	.db 222, 31, 103, 10
  146 D1:D03E 90 1F 1F 04 	.db 144, 31, 31, 4
  147 D1:D042 5C 1F 18 03 	.db 92, 31, 24, 3
  148 D1:D046 9C 2D 5A 00 	.db 156, 45, 90, 0
  149 D1:D04A 07 2D 0C 00 	.db 7, 45, 12, 0
  150 D1:D04E 94 2D 34 09 	.db 148, 45, 52, 9
  151 D1:D052 47 2D 75 01 	.db 71, 45, 117, 1
  152 D1:D056 97 1F 64 0D 	.db 151, 31, 100, 13
  153 D1:D05A BC 0E 8F 0E 	.db 188, 14, 143, 14
  154 D1:D05E -  -  -  -  
  155 D1:D05E -  -  -  -  BG_Data_4:
  156 D1:D05E 6B D2 D1 -  	.dl Sprite_Table_1
  157 D1:D061 13 -  -  -  	.db 19
  158 D1:D062 17 2D 4D 01 	.db 23, 45, 77, 1
  159 D1:D066 FB 0E 8A 0C 	.db 251, 14, 138, 12
  160 D1:D06A FA 0E 95 0E 	.db 250, 14, 149, 14
  161 D1:D06E D9 2F 77 0B 	.db 217, 47, 119, 11
  162 D1:D072 48 1F 2C 07 	.db 72, 31, 44, 7
  163 D1:D076 D3 1F 2D 06 	.db 211, 31, 45, 6
  164 D1:D07A 45 1F 5C 0D 	.db 69, 31, 92, 13
  165 D1:D07E CD 1F 54 0F 	.db 205, 31, 84, 15
  166 D1:D082 E3 0E 8A 0E 	.db 227, 14, 138, 14
  167 D1:D086 0C 1F 07 0A 	.db 12, 31, 7, 10
  168 D1:D08A 8F 1F 74 0A 	.db 143, 31, 116, 10
  169 D1:D08E 0E 1F 86 03 	.db 14, 31, 134, 3
  170 D1:D092 C3 1F 3B 04 	.db 195, 31, 59, 4
  171 D1:D096 C9 1F 7F 04 	.db 201, 31, 127, 4
  172 D1:D09A 8B 1F 4C 04 	.db 139, 31, 76, 4
  173 D1:D09E 5D 2D 64 09 	.db 93, 45, 100, 9
  174 D1:D0A2 67 2D 20 02 	.db 103, 45, 32, 2
  175 D1:D0A6 A2 1F 09 0F 	.db 162, 31, 9, 15
  176 D1:D0AA E6 0E 93 0C 	.db 230, 14, 147, 12
  177 D1:D0AE -  -  -  -  
  178 D1:D0AE -  -  -  -  BG_Data_3:
  179 D1:D0AE 6B D2 D1 -  	.dl Sprite_Table_1
  180 D1:D0B1 13 -  -  -  	.db 19
  181 D1:D0B2 37 2D 42 02 	.db 55, 45, 66, 2
  182 D1:D0B6 F9 0E 95 0E 	.db 249, 14, 149, 14
  183 D1:D0BA E5 2F 37 0B 	.db 229, 47, 55, 11
  184 D1:D0BE 41 2F 43 08 	.db 65, 47, 67, 8
  185 D1:D0C2 6E 1F 14 07 	.db 110, 31, 20, 7
  186 D1:D0C6 17 1F 22 05 	.db 23, 31, 34, 5
  187 D1:D0CA 47 1F 72 05 	.db 71, 31, 114, 5
  188 D1:D0CE DB 1F 7E 07 	.db 219, 31, 126, 7
  189 D1:D0D2 F9 0E 8B 0E 	.db 249, 14, 139, 14
  190 D1:D0D6 F5 1F 1D 06 	.db 245, 31, 29, 6
  191 D1:D0DA 2D 1F 16 0F 	.db 45, 31, 22, 15
  192 D1:D0DE 7C 1F 7B 0F 	.db 124, 31, 123, 15
  193 D1:D0E2 AF 1F 6E 04 	.db 175, 31, 110, 4
  194 D1:D0E6 8C 2D 51 09 	.db 140, 45, 81, 9
  195 D1:D0EA D4 2D 1A 09 	.db 212, 45, 26, 9
  196 D1:D0EE 87 2D 29 01 	.db 135, 45, 41, 1
  197 D1:D0F2 56 2D 66 01 	.db 86, 45, 102, 1
  198 D1:D0F6 82 1F 59 0D 	.db 130, 31, 89, 13
  199 D1:D0FA F9 0E 7F 0E 	.db 249, 14, 127, 14
  200 D1:D0FE -  -  -  -  
  201 D1:D0FE -  -  -  -  BG_Data_2:
  202 D1:D0FE 6B D2 D1 -  	.dl Sprite_Table_1
  203 D1:D101 11 -  -  -  	.db 17
  204 D1:D102 7D 2D 20 02 	.db 125, 45, 32, 2
  205 D1:D106 9D 2F 7D 08 	.db 157, 47, 125, 8
  206 D1:D10A 91 2F 40 08 	.db 145, 47, 64, 8
  207 D1:D10E 56 1F 67 05 	.db 86, 31, 103, 5
  208 D1:D112 80 1F 1C 05 	.db 128, 31, 28, 5
  209 D1:D116 F1 1F 6C 0D 	.db 241, 31, 108, 13
  210 D1:D11A 2D 1F 37 0D 	.db 45, 31, 55, 13
  211 D1:D11E FB 0E 95 0C 	.db 251, 14, 149, 12
  212 D1:D122 34 1F 19 0A 	.db 52, 31, 25, 10
  213 D1:D126 CF 1F 3B 04 	.db 207, 31, 59, 4
  214 D1:D12A 11 1F 59 04 	.db 17, 31, 89, 4
  215 D1:D12E 04 2D 23 00 	.db 4, 45, 35, 0
  216 D1:D132 E1 2D 14 09 	.db 225, 45, 20, 9
  217 D1:D136 AC 2D 67 00 	.db 172, 45, 103, 0
  218 D1:D13A 72 2D 59 02 	.db 114, 45, 89, 2
  219 D1:D13E 2C 1F 82 0A 	.db 44, 31, 130, 10
  220 D1:D142 FB 0E 8B 0E 	.db 251, 14, 139, 14
  221 D1:D146 -  -  -  -  
  222 D1:D146 -  -  -  -  BG_Data_1:
  223 D1:D146 6B D2 D1 -  	.dl Sprite_Table_1
  224 D1:D149 0D -  -  -  	.db 13
  225 D1:D14A 43 2D 1F 02 	.db 67, 45, 31, 2
  226 D1:D14E 61 2D 5C 02 	.db 97, 45, 92, 2
  227 D1:D152 8A 2D 33 02 	.db 138, 45, 51, 2
  228 D1:D156 C7 2D 46 02 	.db 199, 45, 70, 2
  229 D1:D15A C0 2D 73 09 	.db 192, 45, 115, 9
  230 D1:D15E 6A 1F 79 0A 	.db 106, 31, 121, 10
  231 D1:D162 90 1F 0B 06 	.db 144, 31, 11, 6
  232 D1:D166 93 1F 4E 07 	.db 147, 31, 78, 7
  233 D1:D16A 1F 1F 76 07 	.db 31, 31, 118, 7
  234 D1:D16E 13 2F 34 0B 	.db 19, 47, 52, 11
  235 D1:D172 CD 2F 1F 0B 	.db 205, 47, 31, 11
  236 D1:D176 EA 2F 59 0B 	.db 234, 47, 89, 11
  237 D1:D17A F2 0E 94 0C 	.db 242, 14, 148, 12
  238 D1:D17E -  -  -  -  
  239 D1:D17E -  -  -  -  BG_Data_0:
  240 D1:D17E 6B D2 D1 -  	.dl Sprite_Table_1
  241 D1:D181 0D -  -  -  	.db 13
  242 D1:D182 C9 2D 14 00 	.db 201, 45, 20, 0
  243 D1:D186 4C 2D 14 01 	.db 76, 45, 20, 1
  244 D1:D18A B5 2D 41 02 	.db 181, 45, 65, 2
  245 D1:D18E 7D 2D 73 00 	.db 125, 45, 115, 0
  246 D1:D192 3E 1F 3C 03 	.db 62, 31, 60, 3
  247 D1:D196 E5 1F 5F 04 	.db 229, 31, 95, 4
  248 D1:D19A EC 1F 47 05 	.db 236, 31, 71, 5
  249 D1:D19E F6 1F 08 06 	.db 246, 31, 8, 6
  250 D1:D1A2 3E 1F 67 05 	.db 62, 31, 103, 5
  251 D1:D1A6 A8 1F 71 05 	.db 168, 31, 113, 5
  252 D1:D1AA 62 1F 31 07 	.db 98, 31, 49, 7
  253 D1:D1AE EC 1F 47 05 	.db 236, 31, 71, 5
  254 D1:D1B2 79 2F 0D 08 	.db 121, 47, 13, 8
  255 D1:D1B6 -  -  -  -  
  256 D1:D1B6 -  -  -  -  
  257 D1:D1B6 -  -  -  -  
Listing for file "ascent.asm"
  284 D1:D1B6 -  -  -  -  #include "Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Palette_Setup.txt"
    1 D1:D1B6 -  -  -  -  setup_palette_1:
    2 D1:D1B6 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:D1BA 3E 80 -  -  	ld a,%10000000
    4 D1:D1BC 77 -  -  -  	ld (hl),a 
    5 D1:D1BD 23 -  -  -  	inc hl
    6 D1:D1BE 3E 10 -  -  	ld a,%00010000
    7 D1:D1C0 77 -  -  -  	ld (hl),a 
    8 D1:D1C1 23 -  -  -  	inc hl
    9 D1:D1C2 3E 61 -  -  	ld a,%01100001
   10 D1:D1C4 77 -  -  -  	ld (hl),a 
   11 D1:D1C5 23 -  -  -  	inc hl
   12 D1:D1C6 3E 4E -  -  	ld a,%01001110
   13 D1:D1C8 77 -  -  -  	ld (hl),a 
   14 D1:D1C9 23 -  -  -  	inc hl
   15 D1:D1CA 3E 65 -  -  	ld a,%01100101
   16 D1:D1CC 77 -  -  -  	ld (hl),a 
   17 D1:D1CD 23 -  -  -  	inc hl
   18 D1:D1CE 3E 6B -  -  	ld a,%01101011
   19 D1:D1D0 77 -  -  -  	ld (hl),a 
   20 D1:D1D1 23 -  -  -  	inc hl
   21 D1:D1D2 3E A0 -  -  	ld a,%10100000
   22 D1:D1D4 77 -  -  -  	ld (hl),a 
   23 D1:D1D5 23 -  -  -  	inc hl
   24 D1:D1D6 3E 5F -  -  	ld a,%01011111
   25 D1:D1D8 77 -  -  -  	ld (hl),a 
   26 D1:D1D9 23 -  -  -  	inc hl
   27 D1:D1DA 3E E0 -  -  	ld a,%11100000
   28 D1:D1DC 77 -  -  -  	ld (hl),a 
   29 D1:D1DD 23 -  -  -  	inc hl
   30 D1:D1DE 3E D3 -  -  	ld a,%11010011
   31 D1:D1E0 77 -  -  -  	ld (hl),a 
   32 D1:D1E1 23 -  -  -  	inc hl
   33 D1:D1E2 3E A2 -  -  	ld a,%10100010
   34 D1:D1E4 77 -  -  -  	ld (hl),a 
   35 D1:D1E5 23 -  -  -  	inc hl
   36 D1:D1E6 3E 12 -  -  	ld a,%00010010
   37 D1:D1E8 77 -  -  -  	ld (hl),a 
   38 D1:D1E9 23 -  -  -  	inc hl
   39 D1:D1EA 3E F9 -  -  	ld a,%11111001
   40 D1:D1EC 77 -  -  -  	ld (hl),a 
   41 D1:D1ED 23 -  -  -  	inc hl
   42 D1:D1EE 3E 0A -  -  	ld a,%00001010
   43 D1:D1F0 77 -  -  -  	ld (hl),a 
   44 D1:D1F1 23 -  -  -  	inc hl
   45 D1:D1F2 3E 1A -  -  	ld a,%00011010
   46 D1:D1F4 77 -  -  -  	ld (hl),a 
   47 D1:D1F5 23 -  -  -  	inc hl
   48 D1:D1F6 3E 31 -  -  	ld a,%00110001
   49 D1:D1F8 77 -  -  -  	ld (hl),a 
   50 D1:D1F9 23 -  -  -  	inc hl
   51 D1:D1FA 3E FF -  -  	ld a,%11111111
   52 D1:D1FC 77 -  -  -  	ld (hl),a 
   53 D1:D1FD 23 -  -  -  	inc hl
   54 D1:D1FE 3E FF -  -  	ld a,%11111111
   55 D1:D200 77 -  -  -  	ld (hl),a 
   56 D1:D201 23 -  -  -  	inc hl
   57 D1:D202 3E 1F -  -  	ld a,%00011111
   58 D1:D204 77 -  -  -  	ld (hl),a 
   59 D1:D205 23 -  -  -  	inc hl
   60 D1:D206 3E 81 -  -  	ld a,%10000001
   61 D1:D208 77 -  -  -  	ld (hl),a 
   62 D1:D209 23 -  -  -  	inc hl
   63 D1:D20A 3E 00 -  -  	ld a,%00000000
   64 D1:D20C 77 -  -  -  	ld (hl),a 
   65 D1:D20D 23 -  -  -  	inc hl
   66 D1:D20E 3E 68 -  -  	ld a,%01101000
   67 D1:D210 77 -  -  -  	ld (hl),a 
   68 D1:D211 23 -  -  -  	inc hl
   69 D1:D212 3E 20 -  -  	ld a,%00100000
   70 D1:D214 77 -  -  -  	ld (hl),a 
   71 D1:D215 23 -  -  -  	inc hl
   72 D1:D216 3E 6A -  -  	ld a,%01101010
   73 D1:D218 77 -  -  -  	ld (hl),a 
   74 D1:D219 23 -  -  -  	inc hl
   75 D1:D21A 3E 28 -  -  	ld a,%00101000
   76 D1:D21C 77 -  -  -  	ld (hl),a 
   77 D1:D21D 23 -  -  -  	inc hl
   78 D1:D21E 3E 21 -  -  	ld a,%00100001
   79 D1:D220 77 -  -  -  	ld (hl),a 
   80 D1:D221 23 -  -  -  	inc hl
   81 D1:D222 3E 00 -  -  	ld a,%00000000
   82 D1:D224 77 -  -  -  	ld (hl),a 
   83 D1:D225 23 -  -  -  	inc hl
   84 D1:D226 3E 00 -  -  	ld a,%00000000
   85 D1:D228 77 -  -  -  	ld (hl),a 
   86 D1:D229 23 -  -  -  	inc hl
   87 D1:D22A 3E 23 -  -  	ld a,%00100011
   88 D1:D22C 77 -  -  -  	ld (hl),a 
   89 D1:D22D 23 -  -  -  	inc hl
   90 D1:D22E 3E B1 -  -  	ld a,%10110001
   91 D1:D230 77 -  -  -  	ld (hl),a 
   92 D1:D231 23 -  -  -  	inc hl
   93 D1:D232 3E 1F -  -  	ld a,%00011111
   94 D1:D234 77 -  -  -  	ld (hl),a 
   95 D1:D235 23 -  -  -  	inc hl
   96 D1:D236 3E 68 -  -  	ld a,%01101000
   97 D1:D238 77 -  -  -  	ld (hl),a 
   98 D1:D239 23 -  -  -  	inc hl
   99 D1:D23A C9 -  -  -  	ret 
Listing for file "ascent.asm"
  285 D1:D23B -  -  -  -  #include "Equates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Equates.txt"
    1 D1:D23B -  -  -  -  Banana1_Slow .equ $d40001
    2 D1:D23B -  -  -  -  Banana1_Slow_F .equ $d40119
    3 D1:D23B -  -  -  -  Banana1_Slow_O .equ $d40231
    4 D1:D23B -  -  -  -  Banana1_Slow_O_F .equ $d40349
    5 D1:D23B -  -  -  -  Banana1Large_Slow_O .equ $d40461
    6 D1:D23B -  -  -  -  Banana1Large_Slow_O_F .equ $d4077d
    7 D1:D23B -  -  -  -  Banana1Large_Fast .equ $d40a98
    8 D1:D23B -  -  -  -  Banana1Large_Fast_F .equ $d40d2a
    9 D1:D23B -  -  -  -  Banana1Large_BG .equ $d40fbb
   10 D1:D23B -  -  -  -  Banana1Large_BG_O .equ $d41800
   11 D1:D23B -  -  -  -  Banana1Large_BG_F .equ $d420a1
   12 D1:D23B -  -  -  -  Banana1Large_BG_O_F .equ $d428e6
   13 D1:D23B -  -  -  -  Shittlogo_Slow .equ $d43187
   14 D1:D23B -  -  -  -  Shittlogo_Slow_O .equ $d436b7
   15 D1:D23B -  -  -  -  OrangeDot_Slow .equ $d43bd3
   16 D1:D23B -  -  -  -  OrangeDot_Slow_O .equ $d43c7f
   17 D1:D23B -  -  -  -  OrangeDot_BG .equ $d43d2a
   18 D1:D23B -  -  -  -  OrangeDot_BG_O .equ $d43e1b
   19 D1:D23B -  -  -  -  SquiggleL_Slow .equ $d43f0d
   20 D1:D23B -  -  -  -  SquiggleL_Slow_F .equ $d440ad
   21 D1:D23B -  -  -  -  SquiggleL_Slow_O .equ $d4424d
   22 D1:D23B -  -  -  -  SquiggleL_Slow_O_F .equ $d443f1
   23 D1:D23B -  -  -  -  Banana5_BG .equ $d44595
   24 D1:D23B -  -  -  -  Banana5_BG_O .equ $d44996
   25 D1:D23B -  -  -  -  Banana5_BG_F .equ $d44dd7
   26 D1:D23B -  -  -  -  Banana5_BG_O_F .equ $d451d8
   27 D1:D23B -  -  -  -  GreenCurl1_BG .equ $d45619
   28 D1:D23B -  -  -  -  GreenCurl1_BG_O .equ $d45a1a
   29 D1:D23B -  -  -  -  GreenCurl1_BG_F .equ $d45e5b
   30 D1:D23B -  -  -  -  GreenCurl1_BG_O_F .equ $d4625c
   31 D1:D23B -  -  -  -  Bluecurl_BG .equ $d4669d
   32 D1:D23B -  -  -  -  Bluecurl_BG_O .equ $d46f9e
Listing for file "ascent.asm"
  286 D1:D23B -  -  -  -  ;#include "Decompress_Calls.txt"
  287 D1:D23B -  -  -  -  #include "Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Tables.txt"
    1 D1:D23B -  -  -  -  Sprite_Table_0:
    2 D1:D23B 19 01 D4 -  	.dl Banana1_Slow_F
    3 D1:D23E 61 04 D4 -  	.dl Banana1Large_Slow_O
    4 D1:D241 98 0A D4 -  	.dl Banana1Large_Fast
    5 D1:D244 7D 07 D4 -  	.dl Banana1Large_Slow_O_F
    6 D1:D247 01 00 D4 -  	.dl Banana1_Slow
    7 D1:D24A 49 03 D4 -  	.dl Banana1_Slow_O_F
    8 D1:D24D 2A 0D D4 -  	.dl Banana1Large_Fast_F
    9 D1:D250 31 02 D4 -  	.dl Banana1_Slow_O
   10 D1:D253 B7 36 D4 -  	.dl Shittlogo_Slow_O
   11 D1:D256 87 31 D4 -  	.dl Shittlogo_Slow
   12 D1:D259 7F 3C D4 -  	.dl OrangeDot_Slow_O
   13 D1:D25C D3 3B D4 -  	.dl OrangeDot_Slow
   14 D1:D25F 4D 42 D4 -  	.dl SquiggleL_Slow_O
   15 D1:D262 AD 40 D4 -  	.dl SquiggleL_Slow_F
   16 D1:D265 0D 3F D4 -  	.dl SquiggleL_Slow
   17 D1:D268 F1 43 D4 -  	.dl SquiggleL_Slow_O_F
   18 D1:D26B -  -  -  -  
   19 D1:D26B -  -  -  -  Sprite_Table_1:
   20 D1:D26B E6 28 D4 -  	.dl Banana1Large_BG_O_F
   21 D1:D26E 00 18 D4 -  	.dl Banana1Large_BG_O
   22 D1:D271 BB 0F D4 -  	.dl Banana1Large_BG
   23 D1:D274 96 49 D4 -  	.dl Banana5_BG_O
   24 D1:D277 95 45 D4 -  	.dl Banana5_BG
   25 D1:D27A 5C 62 D4 -  	.dl GreenCurl1_BG_O_F
   26 D1:D27D 1A 5A D4 -  	.dl GreenCurl1_BG_O
   27 D1:D280 5B 5E D4 -  	.dl GreenCurl1_BG_F
   28 D1:D283 9E 6F D4 -  	.dl Bluecurl_BG_O
   29 D1:D286 A1 20 D4 -  	.dl Banana1Large_BG_F
   30 D1:D289 D7 4D D4 -  	.dl Banana5_BG_F
   31 D1:D28C 9D 66 D4 -  	.dl Bluecurl_BG
   32 D1:D28F 1B 3E D4 -  	.dl OrangeDot_BG_O
   33 D1:D292 19 56 D4 -  	.dl GreenCurl1_BG
   34 D1:D295 2A 3D D4 -  	.dl OrangeDot_BG
   35 D1:D298 D8 51 D4 -  	.dl Banana5_BG_O_F
   36 D1:D29B -  -  -  -  
   37 D1:D29B -  -  -  -  Sprite_Table_2:
   38 D1:D29B -  -  -  -  
Listing for file "ascent.asm"
  288 D1:D29B -  -  -  -  
  289 D1:D29B -  -  -  -  
