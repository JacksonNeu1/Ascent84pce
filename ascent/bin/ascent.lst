    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD 37 B9 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C CD 92 B5 D1 	call setup_decompress_queue
   26 D1:A8A0 -  -  -  -  	
   27 D1:A8A0 -  -  -  -  	
   28 D1:A8A0 -  -  -  -  	
   29 D1:A8A0 -  -  -  -  	;call draw_fg
   30 D1:A8A0 -  -  -  -  	
   31 D1:A8A0 3E 00 -  -  	ld a,0
   32 D1:A8A2 CD 73 B6 D1 	call cfdc_cam_move_up ;need to skip here for frame 0
   33 D1:A8A6 -  -  -  -  	
   34 D1:A8A6 CD 43 AA D1 	call prgmpause
   35 D1:A8AA -  -  -  -  
   36 D1:A8AA CD CD B5 D1 	call continue_decompressions
   37 D1:A8AE -  -  -  -  	
   38 D1:A8AE CD CD B5 D1 	call continue_decompressions
   39 D1:A8B2 -  -  -  -  	
   40 D1:A8B2 CD CD B5 D1 	call continue_decompressions
   41 D1:A8B6 -  -  -  -  
   42 D1:A8B6 CD CD B5 D1 	call continue_decompressions
   43 D1:A8BA -  -  -  -  	
   44 D1:A8BA CD 43 AA D1 	call prgmpause
   45 D1:A8BE CD CD B5 D1 	call continue_decompressions
   46 D1:A8C2 -  -  -  -  	
   47 D1:A8C2 -  -  -  -  	
   48 D1:A8C2 -  -  -  -  ;	call decompress_calls
   49 D1:A8C2 -  -  -  -  	
   50 D1:A8C2 -  -  -  -  	;gen purp timers
   51 D1:A8C2 -  -  -  -  		; 76543210	
   52 D1:A8C2 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   53 D1:A8C4 32 30 00 F2 	ld ($F20030),a
   54 D1:A8C8 -  -  -  -  	;	  fedcba98
   55 D1:A8C8 3E 02 -  -  	ld a,%00000010;count up
   56 D1:A8CA 32 31 00 F2 	ld ($F20031),a
   57 D1:A8CE -  -  -  -  	
   58 D1:A8CE 21 00 2C D5 	ld hl,vRam + (160*240*2)
   59 D1:A8D2 22 56 AA D1 	ld (draw_buffer),hl
   60 D1:A8D6 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   61 D1:A8DA 22 10 00 E3 	ld (mpLcdBase),hl
   62 D1:A8DE -  -  -  -  	
   63 D1:A8DE 21 00 00 00 	ld hl,0
   64 D1:A8E2 22 50 AA D1 	ld (cam_pos),hl
   65 D1:A8E6 -  -  -  -  
   66 D1:A8E6 -  -  -  -  	;call setup_bg
   67 D1:A8E6 -  -  -  -  
   68 D1:A8E6 -  -  -  -  	
   69 D1:A8E6 -  -  -  -  main_loop:
   70 D1:A8E6 -  -  -  -  	;clear timer
   71 D1:A8E6 3E 00 -  -  	ld a,0
   72 D1:A8E8 32 00 00 F2 	ld ($F20000),a;32768hz
   73 D1:A8EC 32 01 00 F2 	ld ($F20001),a;128hz
   74 D1:A8F0 32 02 00 F2 	ld ($F20002),a;0.5hz
   75 D1:A8F4 32 03 00 F2 	ld ($F20003),a
   76 D1:A8F8 -  -  -  -  	
   77 D1:A8F8 -  -  -  -  	;Instructions here 
   78 D1:A8F8 -  -  -  -  	;call draw_bg
   79 D1:A8F8 -  -  -  -  	
   80 D1:A8F8 -  -  -  -  	;TEST CLEAR BUFFER
   81 D1:A8F8 21 00 96 D4 	ld hl,BG_buffer
   82 D1:A8FC ED 5B 56 AA 
              D1 -  -  -  	ld de,(draw_buffer)
   83 D1:A901 01 00 96 00 	ld bc, 160*240
   84 D1:A905 ED B0 -  -  	ldir
   85 D1:A907 -  -  -  -  	
   86 D1:A907 -  -  -  -  	;call draw_mg
   87 D1:A907 -  -  -  -  	
   88 D1:A907 CD AE B3 D1 	call draw_fg
   89 D1:A90B -  -  -  -  	
   90 D1:A90B 21 00 00 00 	ld hl,0
   91 D1:A90F -  -  -  -  	
   92 D1:A90F -  -  -  -  	; for debug longest frame draw time
   93 D1:A90F 3A 00 00 F2 	ld a,($F20000)
   94 D1:A913 6F -  -  -  	ld l,a
   95 D1:A914 3A 01 00 F2 	ld a,($F20001);128hz 
   96 D1:A918 67 -  -  -  	ld h,a
   97 D1:A919 E5 -  -  -  	push hl
   98 D1:A91A ED 4B 5C AA 
              D1 -  -  -  	ld bc,(longestFrame)
   99 D1:A91F ED 42 -  -  	sbc hl,bc 
  100 D1:A921 DA 33 A9 D1 	jp c,longest_frame_skip
  101 D1:A925 -  -  -  -  	
  102 D1:A925 E1 -  -  -  	pop hl 
  103 D1:A926 E5 -  -  -  	push hl 
  104 D1:A927 22 5C AA D1 	ld (longestFrame),hl 
  105 D1:A92B 2A 50 AA D1 	ld hl,(cam_pos)
  106 D1:A92F 22 5F AA D1 	ld (longestFramePos),hl
  107 D1:A933 -  -  -  -  longest_frame_skip:
  108 D1:A933 E1 -  -  -  	pop hl 
  109 D1:A934 -  -  -  -  	
  110 D1:A934 -  -  -  -  		
  111 D1:A934 2A 65 AA D1 	ld hl,(frameCount)
  112 D1:A938 23 -  -  -  	inc hl
  113 D1:A939 22 65 AA D1 	ld (frameCount),hl
  114 D1:A93D -  -  -  -  	
  115 D1:A93D -  -  -  -  	;swap draw buffers
  116 D1:A93D 2A 10 00 E3 	ld hl,(mpLcdBase)
  117 D1:A941 ED 5B 56 AA 
              D1 -  -  -  	ld de,(draw_buffer)
  118 D1:A946 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  119 D1:A94B 22 56 AA D1 	ld (draw_buffer),hl
  120 D1:A94F -  -  -  -  	
  121 D1:A94F -  -  -  -  	;check if lcd has drawn first frame
  122 D1:A94F -  -  -  -  
  123 D1:A94F CD 58 B6 D1 	call check_for_decompress_calls
  124 D1:A953 -  -  -  -  	;Sprite decompression will occur here
  125 D1:A953 CD CD B5 D1 	call continue_decompressions
  126 D1:A957 -  -  -  -  	
  127 D1:A957 -  -  -  -  
  128 D1:A957 -  -  -  -  	;wait until finished drawing second frame
  129 D1:A957 -  -  -  -  
  130 D1:A957 -  -  -  -  clear_int:      
  131 D1:A957 21 28 00 E3     ld hl, mpLcdIcr
  132 D1:A95B CB D6 -  -      set 2, (hl)            ; clear interrupt
  133 D1:A95D 21 20 00 E3     ld hl, mpLcdRis
  134 D1:A961 -  -  -  -  wait_int:
  135 D1:A961 CB 56 -  -      bit 2, (hl)
  136 D1:A963 28 FC -  -      jr z, wait_int  
  137 D1:A965 -  -  -  -  
  138 D1:A965 -  -  -  -  
  139 D1:A965 21 00 00 00 	ld hl,0
  140 D1:A969 -  -  -  -  	
  141 D1:A969 3A 02 00 F2 	ld a,($F20002)
  142 D1:A96D 67 -  -  -  	ld h,a
  143 D1:A96E 3A 01 00 F2 	ld a,($F20001)
  144 D1:A972 6F -  -  -  	ld l,a
  145 D1:A973 ED 4B 62 AA 
              D1 -  -  -  	ld bc,(totalTime)
  146 D1:A978 09 -  -  -  	add hl,bc 
  147 D1:A979 22 62 AA D1 	ld (totalTime),hl 
  148 D1:A97D -  -  -  -  	
  149 D1:A97D -  -  -  -  	;Move cam
  150 D1:A97D 2A 50 AA D1 	ld hl,(cam_pos)
  151 D1:A981 23 -  -  -  	inc hl
  152 D1:A982 -  -  -  -  
  153 D1:A982 22 50 AA D1 	ld (cam_pos),hl
  154 D1:A986 -  -  -  -  	
  155 D1:A986 -  -  -  -  	;Check for end of demo
  156 D1:A986 01 EF 00 00 	ld bc,239
  157 D1:A98A 09 -  -  -  	add hl,bc 
  158 D1:A98B 7C -  -  -  	ld a,h ;msb 
  159 D1:A98C FE 23 -  -  	cp 35
  160 D1:A98E C2 E6 A8 D1 	jp nz,main_loop
  161 D1:A992 -  -  -  -  		
  162 D1:A992 -  -  -  -  	;print debug times 
  163 D1:A992 21 00 00 D4 	ld hl,vRam
  164 D1:A996 22 10 00 E3 	ld (mpLcdBase),hl
  165 D1:A99A CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  166 D1:A99E 3E 2D -  -  	ld	a,lcdBpp16
  167 D1:A9A0 32 18 00 E3 	ld (mpLcdCtrl),a
  168 D1:A9A4 -  -  -  -  	
  169 D1:A9A4 3E 00 -  -  	ld a,0
  170 D1:A9A6 32 95 05 D0 	ld (curRow),a
  171 D1:A9AA 32 96 05 D0 	ld (curCol),a
  172 D1:A9AE 2A 5C AA D1 	ld hl,(longestFrame)
  173 D1:A9B2 CD E0 1E 02 	call _DispHL
  174 D1:A9B6 3E 01 -  -  	ld a,1
  175 D1:A9B8 32 95 05 D0 	ld (curRow),a
  176 D1:A9BC 3E 00 -  -  	ld a,0
  177 D1:A9BE 32 96 05 D0 	ld (curCol),a
  178 D1:A9C2 2A 5F AA D1 	ld hl,(longestFramePos)
  179 D1:A9C6 CD E0 1E 02 	call _DispHL
  180 D1:A9CA 3E 02 -  -  	ld a,2
  181 D1:A9CC 32 95 05 D0 	ld (curRow),a
  182 D1:A9D0 3E 00 -  -  	ld a,0
  183 D1:A9D2 32 96 05 D0 	ld (curCol),a
  184 D1:A9D6 2A 62 AA D1 	ld hl,(totalTime)
  185 D1:A9DA CD E0 1E 02 	call _DispHL
  186 D1:A9DE 3E 03 -  -  	ld a,3
  187 D1:A9E0 32 95 05 D0 	ld (curRow),a
  188 D1:A9E4 3E 00 -  -  	ld a,0
  189 D1:A9E6 32 96 05 D0 	ld (curCol),a
  190 D1:A9EA 2A 65 AA D1 	ld hl,(frameCount)
  191 D1:A9EE CD E0 1E 02 	call _DispHL
  192 D1:A9F2 -  -  -  -  	
  193 D1:A9F2 CD 43 AA D1 	call prgmpause
  194 D1:A9F6 CD 43 AA D1 	call prgmpause
  195 D1:A9FA -  -  -  -  	
  196 D1:A9FA -  -  -  -  	
  197 D1:A9FA -  -  -  -  exit_prgm:
  198 D1:A9FA 21 00 00 D4 	ld hl,vRam
  199 D1:A9FE 22 10 00 E3 	ld (mpLcdBase),hl
  200 D1:AA02 CD 10 08 02 	call _ClrScrnFull
  201 D1:AA06 3E 2D -  -  	ld	a,lcdBpp16
  202 D1:AA08 32 18 00 E3 	ld	(mpLcdCtrl),a
  203 D1:AA0C CD 3C 1A 02 	call _DrawStatusBar
  204 D1:AA10 -  -  -  -  	
  205 D1:AA10 FB -  -  -  	ei				; reset screen back to normal
  206 D1:AA11 C9 -  -  -  	ret			; return to os
  207 D1:AA12 -  -  -  -  
  208 D1:AA12 -  -  -  -  
  209 D1:AA12 -  -  -  -  printHL:;=================REMOVE
  210 D1:AA12 E5 -  -  -  	push hl
  211 D1:AA13 21 00 00 D4 	ld hl,vRam
  212 D1:AA17 22 10 00 E3 	ld (mpLcdBase),hl
  213 D1:AA1B CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  214 D1:AA1F 3E 2D -  -  	ld	a,lcdBpp16
  215 D1:AA21 32 18 00 E3 	ld (mpLcdCtrl),a
  216 D1:AA25 E1 -  -  -  	pop hl
  217 D1:AA26 CD E0 1E 02 	call _DispHL
  218 D1:AA2A FB -  -  -  	ei
  219 D1:AA2B CD 8C 0D 02 	call _GetKey
  220 D1:AA2F F3 -  -  -  	di
  221 D1:AA30 C3 FA A9 D1 	jp exit_prgm
  222 D1:AA34 -  -  -  -  
  223 D1:AA34 -  -  -  -  
  224 D1:AA34 -  -  -  -  write_a_to_ram:
  225 D1:AA34 F5 -  -  -  	push af 
  226 D1:AA35 E5 -  -  -  	push hl 
  227 D1:AA36 -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  228 D1:AA36 21 00 30 D4 	ld hl, $d43000
  229 D1:AA3A 77 -  -  -  	ld (hl),a 
  230 D1:AA3B 23 -  -  -  	inc hl 
  231 D1:AA3C 22 37 AA D1 	ld (write_a_to_ram_addr),hl 
  232 D1:AA40 E1 -  -  -  	pop hl 
  233 D1:AA41 F1 -  -  -  	pop af 
  234 D1:AA42 C9 -  -  -  	ret 
  235 D1:AA43 -  -  -  -  
  236 D1:AA43 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  237 D1:AA43 F5 -  -  -  	push af
  238 D1:AA44 D5 -  -  -  	push de 
  239 D1:AA45 E5 -  -  -  	push hl 
  240 D1:AA46 FB -  -  -  	ei
  241 D1:AA47 CD 8C 0D 02 	call _GetKey
  242 D1:AA4B F3 -  -  -  	di
  243 D1:AA4C E1 -  -  -  	pop hl 
  244 D1:AA4D D1 -  -  -  	pop de 
  245 D1:AA4E F1 -  -  -  	pop af
  246 D1:AA4F C9 -  -  -  	ret
  247 D1:AA50 -  -  -  -  
  248 D1:AA50 -  -  -  -  cam_pos:;y position of lowest visible line in fg layer
  249 D1:AA50 4F 00 00 -  	.dl 79
  250 D1:AA53 -  -  -  -  bg_cam_pos: ;y position of lowest visible line in bg layer (= cam pos / 4)
  251 D1:AA53 00 00 00 -  	.dl 0
  252 D1:AA56 -  -  -  -  
  253 D1:AA56 -  -  -  -  
  254 D1:AA56 -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  255 D1:AA56 00 2C D5 -  	.dl $d52c00
  256 D1:AA59 -  -  -  -  	
  257 D1:AA59 -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  258 D1:AA59 00 00 00 -  	.dl 0
  259 D1:AA5C -  -  -  -  BG_buffer .equ vram + (160*240) ;Start of BG buffer 
  260 D1:AA5C -  -  -  -  
  261 D1:AA5C -  -  -  -  
  262 D1:AA5C -  -  -  -  ;d40000 = Decompressed sprite data
  263 D1:AA5C -  -  -  -  ;d49600 = BG buffer
  264 D1:AA5C -  -  -  -  ;d52c00 = Frame draw buffer 1 
  265 D1:AA5C -  -  -  -  ;d5c200 = frame draw buffer 2
  266 D1:AA5C -  -  -  -  
  267 D1:AA5C -  -  -  -  ;pixelShadow .equ $D031F6 
  268 D1:AA5C -  -  -  -  
  269 D1:AA5C -  -  -  -  
  270 D1:AA5C -  -  -  -  longestFrame:
  271 D1:AA5C 00 00 00 -  	.dl 0
  272 D1:AA5F -  -  -  -  longestFramePos:
  273 D1:AA5F 00 00 00 -  	.dl 0
  274 D1:AA62 -  -  -  -  totalTime:
  275 D1:AA62 00 00 00 -  	.dl 0
  276 D1:AA65 -  -  -  -  frameCount:
  277 D1:AA65 00 00 00 -  	.dl 0
  278 D1:AA68 -  -  -  -  hasLagged:
  279 D1:AA68 00 00 00 -  	.dl 0
  280 D1:AA6B -  -  -  -  
  281 D1:AA6B -  -  -  -  
  282 D1:AA6B -  -  -  -  
  283 D1:AA6B -  -  -  -  
  284 D1:AA6B -  -  -  -  
  285 D1:AA6B -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA6B -  -  -  -  
    2 D1:AA6B -  -  -  -  
    3 D1:AA6B -  -  -  -  
    4 D1:AA6B -  -  -  -  time_test_start:
    5 D1:AA6B -  -  -  -  
    6 D1:AA6B -  -  -  -  		; 76543210	
    7 D1:AA6B 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AA6D 32 30 00 F2 	ld ($F20030),a
    9 D1:AA71 -  -  -  -  	;	  fedcba98
   10 D1:AA71 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AA73 32 31 00 F2 	ld ($F20031),a
   12 D1:AA77 3E 00 -  -  	ld a,0
   13 D1:AA79 32 00 00 F2 	ld ($F20000),a
   14 D1:AA7D 32 01 00 F2 	ld ($F20001),a
   15 D1:AA81 32 02 00 F2 	ld ($F20002),a
   16 D1:AA85 32 03 00 F2 	ld ($F20003),a
   17 D1:AA89 -  -  -  -  	
   18 D1:AA89 21 2C 01 00 	ld hl,300
   19 D1:AA8D -  -  -  -  	
   20 D1:AA8D -  -  -  -  time_testing_loop:
   21 D1:AA8D E5 -  -  -  	push hl
   22 D1:AA8E 01 E8 03 00 	ld bc,1000
   23 D1:AA92 -  -  -  -  time_testing_loop_2:
   24 D1:AA92 C5 -  -  -  	push bc
   25 D1:AA93 -  -  -  -  	;instruction here
   26 D1:AA93 -  -  -  -  	
   27 D1:AA93 -  -  -  -  	
   28 D1:AA93 -  -  -  -  	;Instruction end
   29 D1:AA93 C1 -  -  -  	pop bc
   30 D1:AA94 0B -  -  -  	dec bc
   31 D1:AA95 79 -  -  -  	ld a,c
   32 D1:AA96 B0 -  -  -  	or b
   33 D1:AA97 C2 92 AA D1 	jp nz,time_testing_loop_2
   34 D1:AA9B E1 -  -  -  	pop hl
   35 D1:AA9C 2B -  -  -  	dec hl
   36 D1:AA9D 7D -  -  -  	ld a,l
   37 D1:AA9E B4 -  -  -  	or h
   38 D1:AA9F C2 8D AA D1 	jp nz,time_testing_loop
   39 D1:AAA3 -  -  -  -  	
   40 D1:AAA3 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AAA7 6F -  -  -  	ld l,a
   42 D1:AAA8 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AAAC 67 -  -  -  	ld h,a
   44 D1:AAAD C3 12 AA D1 	jp printHL;div by 128 for time
   45 D1:AAB1 -  -  -  -  	
   46 D1:AAB1 -  -  -  -  
   47 D1:AAB1 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AAB1 -  -  -  -  
   49 D1:AAB1 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AAB1 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AAB1 -  -  -  -  
   52 D1:AAB1 -  -  -  -  
   53 D1:AAB1 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AAB1 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AAB1 -  -  -  -  
   56 D1:AAB1 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AAB1 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AAB1 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AAB1 -  -  -  -  ;.24 screens/frame
   60 D1:AAB1 -  -  -  -  
   61 D1:AAB1 -  -  -  -  
   62 D1:AAB1 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AAB1 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AAB1 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AAB1 -  -  -  -  ;.446 screens/frame
   66 D1:AAB1 -  -  -  -  
   67 D1:AAB1 -  -  -  -  
   68 D1:AAB1 -  -  -  -  
   69 D1:AAB1 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AAB1 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AAB1 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AAB1 -  -  -  -  ;.78 screens/frame
   73 D1:AAB1 -  -  -  -  
   74 D1:AAB1 -  -  -  -  
   75 D1:AAB1 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AAB1 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AAB1 -  -  -  -  ;.47 = FAST
   78 D1:AAB1 -  -  -  -  
   79 D1:AAB1 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AAB1 -  -  -  -  
   81 D1:AAB1 -  -  -  -  
   82 D1:AAB1 -  -  -  -  
   83 D1:AAB1 -  -  -  -  
   84 D1:AAB1 -  -  -  -  
   85 D1:AAB1 -  -  -  -  
   86 D1:AAB1 -  -  -  -  
   87 D1:AAB1 -  -  -  -  
   88 D1:AAB1 -  -  -  -  
Listing for file "ascent.asm"
  286 D1:AAB1 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AAB1 -  -  -  -  
    2 D1:AAB1 -  -  -  -  
    3 D1:AAB1 -  -  -  -  BGMaxSpriteHeight .equ 120
    4 D1:AAB1 -  -  -  -  
    5 D1:AAB1 -  -  -  -  
    6 D1:AAB1 -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    7 D1:AAB1 CD E5 AA D1 	call move_bg
    8 D1:AAB5 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    9 D1:AAB9 ED 4B 59 AA 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
   10 D1:AABE 37 -  -  -  	scf 
   11 D1:AABF 3F -  -  -  	ccf 
   12 D1:AAC0 ED 42 -  -  	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
   13 D1:AAC2 E5 -  -  -  	push hl 
   14 D1:AAC3 C1 -  -  -  	pop bc	;put into bc for ldir 
   15 D1:AAC4 2A 59 AA D1 	ld hl,(BG_draw_buffer)
   16 D1:AAC8 ED 5B 56 AA 
              D1 -  -  -  	ld de,(draw_buffer)
   17 D1:AACD ED B0 -  -  	ldir
   18 D1:AACF 2A 59 AA D1 	ld hl,(BG_draw_buffer) ;loop point in buffer
   19 D1:AAD3 01 00 96 D4 	ld bc,BG_buffer ;start of buffer
   20 D1:AAD7 37 -  -  -  	scf 
   21 D1:AAD8 3F -  -  -  	ccf 
   22 D1:AAD9 ED 42 -  -  	sbc hl,bc ;number of bytes from start to loop point 
   23 D1:AADB C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   24 D1:AADC E5 -  -  -  	push hl 
   25 D1:AADD C1 -  -  -  	pop bc
   26 D1:AADE 21 00 96 D4 	ld hl,BG_buffer 
   27 D1:AAE2 ED B0 -  -  	ldir 
   28 D1:AAE4 C9 -  -  -  	ret 
   29 D1:AAE5 -  -  -  -  	
   30 D1:AAE5 -  -  -  -  	
   31 D1:AAE5 -  -  -  -  ;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
   32 D1:AAE5 -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   33 D1:AAE5 -  -  -  -  move_bg:
   34 D1:AAE5 2A 50 AA D1 	ld hl,(cam_pos);load cam pos 
   35 D1:AAE9 CB 3C -  -  	srl h
   36 D1:AAEB CB 1D -  -  	rr l
   37 D1:AAED CB 3C -  -  	srl h
   38 D1:AAEF CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   39 D1:AAF1 -  -  -  -  	;hl holds bg cam pos, lowest visible line of bg layer 
   40 D1:AAF1 ED 4B 53 AA 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   41 D1:AAF6 ED 42 -  -  	sbc hl,bc ;compare to the updated location
   42 D1:AAF8 C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   43 D1:AAF9 DA 05 AB D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   44 D1:AAFD CD 50 AB D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   45 D1:AB01 C3 E5 AA D1 	jp move_bg ;repeat until bg is in correct pos
   46 D1:AB05 -  -  -  -  move_bg_down:
   47 D1:AB05 CD 0D AB D1 	call dec_bg
   48 D1:AB09 C3 E5 AA D1 	jp move_bg ;repeat until bg is in correct pos
   49 D1:AB0D -  -  -  -  
   50 D1:AB0D -  -  -  -  
   51 D1:AB0D -  -  -  -  dec_bg:;move bg cam down 1px 
   52 D1:AB0D -  -  -  -  	;write on draw buffer line 
   53 D1:AB0D 2A 59 AA D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   54 D1:AB11 22 96 AC D1 	ld (dbgl_vram_line_start),hl 
   55 D1:AB15 -  -  -  -  	
   56 D1:AB15 2A 53 AA D1 	ld hl,(bg_cam_pos)
   57 D1:AB19 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   58 D1:AB1A 22 53 AA D1 	ld (bg_cam_pos),hl 
   59 D1:AB1E 4C -  -  -  	ld c,h;bottom y value msb 
   60 D1:AB1F 7D -  -  -  	ld a,l ;bottom y value lsb 
   61 D1:AB20 21 A1 B6 D1 	ld hl,BG_Data_frame_table
   62 D1:AB24 0C -  -  -  	inc c 
   63 D1:AB25 09 -  -  -  	add hl,bc 
   64 D1:AB26 09 -  -  -  	add hl,bc 
   65 D1:AB27 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   66 D1:AB28 ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   67 D1:AB2A CD EE AB D1 	call draw_bg_line
   68 D1:AB2E -  -  -  -  	;move buffer pos
   69 D1:AB2E 2A 59 AA D1 	ld hl,(BG_draw_buffer)
   70 D1:AB32 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
   71 D1:AB36 37 -  -  -  	scf 
   72 D1:AB37 3F -  -  -  	ccf 
   73 D1:AB38 ED 42 -  -  	sbc hl,bc ;compare to current line 
   74 D1:AB3A 2A 59 AA D1 	ld hl,(BG_draw_buffer)
   75 D1:AB3E C2 46 AB D1 	jp nz,dec_bg_bottom_skip
   76 D1:AB42 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   77 D1:AB46 -  -  -  -  dec_bg_bottom_skip:
   78 D1:AB46 01 A0 00 00 	ld bc,160 
   79 D1:AB4A 09 -  -  -  	add hl,bc
   80 D1:AB4B 22 59 AA D1 	ld (BG_draw_buffer),hl 
   81 D1:AB4F C9 -  -  -  	ret
   82 D1:AB50 -  -  -  -  
   83 D1:AB50 -  -  -  -  
   84 D1:AB50 -  -  -  -  inc_bg:;move cam up 
   85 D1:AB50 2A 59 AA D1 	ld hl,(BG_draw_buffer)
   86 D1:AB54 01 00 96 D4 	ld bc,BG_buffer
   87 D1:AB58 37 -  -  -  	scf 
   88 D1:AB59 3F -  -  -  	ccf 
   89 D1:AB5A ED 42 -  -  	sbc hl,bc ;compare current drawing line to top of bg buffer 
   90 D1:AB5C 2A 59 AA D1 	ld hl,(BG_draw_buffer)
   91 D1:AB60 C2 68 AB D1 	jp nz,inc_bg_top_skip ;if they are not equal, continue
   92 D1:AB64 21 00 2C D5 	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
   93 D1:AB68 -  -  -  -  inc_bg_top_skip:
   94 D1:AB68 01 A0 00 00 	ld bc,160 
   95 D1:AB6C 37 -  -  -  	scf
   96 D1:AB6D 3F -  -  -  	ccf 
   97 D1:AB6E ED 42 -  -  	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
   98 D1:AB70 22 59 AA D1 	ld (BG_draw_buffer),hl 
   99 D1:AB74 22 96 AC D1 	ld (dbgl_vram_line_start),hl 
  100 D1:AB78 2A 53 AA D1 	ld hl,(bg_cam_pos)
  101 D1:AB7C 23 -  -  -  	inc hl 
  102 D1:AB7D 22 53 AA D1 	ld (bg_cam_pos),hl ;incremnet cam pos 
  103 D1:AB81 01 EF 00 00 	ld bc,239
  104 D1:AB85 09 -  -  -  	add hl,bc ;gets uppermost visible line y value in bg layer
  105 D1:AB86 4C -  -  -  	ld c,h;cam pos msb 
  106 D1:AB87 7D -  -  -  	ld a,l ;a holds line number in target frame 
  107 D1:AB88 21 A1 B6 D1 	ld hl,BG_Data_frame_table
  108 D1:AB8C 0C -  -  -  	inc c ;inc to get to upper frame 
  109 D1:AB8D 09 -  -  -  	add hl,bc 
  110 D1:AB8E 09 -  -  -  	add hl,bc 
  111 D1:AB8F 09 -  -  -  	add hl,bc 
  112 D1:AB90 ED 27 -  -  	ld hl,(hl)
  113 D1:AB92 CD EE AB D1 	call draw_bg_line
  114 D1:AB96 C9 -  -  -  	ret
  115 D1:AB97 -  -  -  -  	
  116 D1:AB97 -  -  -  -  
  117 D1:AB97 -  -  -  -  
  118 D1:AB97 -  -  -  -  
  119 D1:AB97 -  -  -  -  
  120 D1:AB97 -  -  -  -  setup_bg: ;Draws entire BG buffer when loading game 
  121 D1:AB97 2A 50 AA D1 	ld hl,(cam_pos)
  122 D1:AB9B CB 3C -  -  	srl h
  123 D1:AB9D CB 1D -  -  	rr l
  124 D1:AB9F CB 3C -  -  	srl h
  125 D1:ABA1 CB 1D -  -  	rr l ;div by 4
  126 D1:ABA3 -  -  -  -  	;hl holds bg cam pos 
  127 D1:ABA3 22 53 AA D1 	ld (bg_cam_pos),hl
  128 D1:ABA7 -  -  -  -  	
  129 D1:ABA7 01 EF 00 00 	ld bc,239
  130 D1:ABAB 09 -  -  -  	add hl,bc;hl holds y position of uppermost visible line in bg layer 
  131 D1:ABAC -  -  -  -  	
  132 D1:ABAC 23 -  -  -  	inc hl;to be dec in loop
  133 D1:ABAD E5 -  -  -  	push hl ;save uppermost line y val
  134 D1:ABAE 21 00 96 D4 	ld hl,BG_buffer ;start of bg drawing buffer 
  135 D1:ABB2 22 59 AA D1 	ld (BG_draw_buffer),hl ;set current bg line drawing location 
  136 D1:ABB6 E5 -  -  -  	push hl 
  137 D1:ABB7 -  -  -  -  	
  138 D1:ABB7 3E F0 -  -  	ld a,240 ;num loops
  139 D1:ABB9 32 E1 AB D1 	ld (setup_bg_loop_count),a
  140 D1:ABBD -  -  -  -  setup_bg_loop:
  141 D1:ABBD -  -  -  -  
  142 D1:ABBD E1 -  -  -  	pop hl;vram draw pos, next line of bg drawn here 
  143 D1:ABBE 22 96 AC D1 	ld (dbgl_vram_line_start),hl ;set drawing pos 
  144 D1:ABC2 01 A0 00 00 	ld bc,160
  145 D1:ABC6 09 -  -  -  	add hl,bc 
  146 D1:ABC7 EB -  -  -  	ex de,hl ;put next vram pos in de 
  147 D1:ABC8 E1 -  -  -  	pop hl;uppermost line y val
  148 D1:ABC9 2B -  -  -  	dec hl ;dec line y value (move to next lowest line)
  149 D1:ABCA E5 -  -  -  	push hl;push uppermost line y val
  150 D1:ABCB D5 -  -  -  	push de ;push vram pos 
  151 D1:ABCC 01 00 00 00 	ld bc,0
  152 D1:ABD0 4C -  -  -  	ld c,h;cam pos msb 
  153 D1:ABD1 7D -  -  -  	ld a,l ;a holds line number in current frame 
  154 D1:ABD2 21 A1 B6 D1 	ld hl,BG_Data_frame_table
  155 D1:ABD6 0C -  -  -  	inc c ;add 1 to get to upper frame
  156 D1:ABD7 09 -  -  -  	add hl,bc 
  157 D1:ABD8 09 -  -  -  	add hl,bc 
  158 D1:ABD9 09 -  -  -  	add hl,bc 
  159 D1:ABDA ED 27 -  -  	ld hl,(hl) ;hl now points to upper frame data 
  160 D1:ABDC CD EE AB D1 	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
  161 D1:ABE0 -  -  -  -  	
  162 D1:ABE0 -  -  -  -  setup_bg_loop_count .equ $ + 1
  163 D1:ABE0 3E 00 -  -  	ld a,0
  164 D1:ABE2 3D -  -  -  	dec a ;dec loop counter
  165 D1:ABE3 32 E1 AB D1 	ld (setup_bg_loop_count),a
  166 D1:ABE7 C2 BD AB D1 	jp nz,setup_bg_loop 
  167 D1:ABEB E1 -  -  -  	pop hl ;pop vram pos 
  168 D1:ABEC E1 -  -  -  	pop hl ;pop current line number 
  169 D1:ABED C9 -  -  -  	ret 
  170 D1:ABEE -  -  -  -  
  171 D1:ABEE -  -  -  -  
  172 D1:ABEE -  -  -  -  
  173 D1:ABEE -  -  -  -  
  174 D1:ABEE -  -  -  -  
  175 D1:ABEE -  -  -  -  
  176 D1:ABEE -  -  -  -  ;hl = upper data frame, a = line number in target frame
  177 D1:ABEE -  -  -  -  ;for drawing BG, only 1 line is drawn at a time.
  178 D1:ABEE -  -  -  -  ;therefore only check sprites in the above frame that may extend downwards, 
  179 D1:ABEE -  -  -  -  ;and the sprites in the target frame which contains the y position of the line being drawn
  180 D1:ABEE -  -  -  -  ;set dbgl_vram_line_start before calling 
  181 D1:ABEE -  -  -  -  draw_bg_line:
  182 D1:ABEE E5 -  -  -  	push hl ;upper frame sprite table pointer 
  183 D1:ABEF F5 -  -  -  	push af ;save line number 
  184 D1:ABF0 3E 00 -  -  	ld a,$00 ;Set all of line to FF to clear it with color 16
  185 D1:ABF2 01 A0 00 00 	ld bc,160
  186 D1:ABF6 2A 96 AC D1 	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
  187 D1:ABFA CD E0 10 02 	call _MemSet ;Clear all of line 
  188 D1:ABFE F1 -  -  -  	pop af ;return line number 
  189 D1:ABFF E1 -  -  -  	pop hl ;return upper frame ptr 
  190 D1:AC00 -  -  -  -  
  191 D1:AC00 -  -  -  -  
  192 D1:AC00 -  -  -  -  
  193 D1:AC00 32 78 AC D1 	ld (dbgl_line_num),a ;write line num to required positions 
  194 D1:AC04 -  -  -  -  	
  195 D1:AC04 ED 44 -  -  	neg
  196 D1:AC06 CA 14 AC D1 	jp z, dbgl_skip_upper_loop ;need to check 0 case, negative 0 = 0
  197 D1:AC0A 32 45 AC D1 	ld (dbgl_lines_to_top_of_target_frame),a ;a holds lines from top of frame (1 indexed)
  198 D1:AC0E FE 78 -  -  	cp BGMaxSpriteHeight
  199 D1:AC10 DA 24 AC D1 	jp c, dbgl_do_upper_loop
  200 D1:AC14 -  -  -  -  dbgl_skip_upper_loop:
  201 D1:AC14 -  -  -  -  	;Upper sprites are too far to be seen in this line, skip upper loop 
  202 D1:AC14 23 -  -  -  	inc hl 
  203 D1:AC15 23 -  -  -  	inc hl
  204 D1:AC16 23 -  -  -  	inc hl ;hl points to number of elements 
  205 D1:AC17 01 00 00 00 	ld bc,0
  206 D1:AC1B 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  207 D1:AC1C 09 -  -  -  	add hl,bc 
  208 D1:AC1D 09 -  -  -  	add hl,bc 
  209 D1:AC1E 09 -  -  -  	add hl,bc 
  210 D1:AC1F 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  211 D1:AC20 C3 5D AC D1 	jp dbgl_lower_start ;skip upper loop
  212 D1:AC24 -  -  -  -  	
  213 D1:AC24 -  -  -  -  dbgl_do_upper_loop:
  214 D1:AC24 ED 17 -  -  	ld de,(hl) ;DE points to sprite table 
  215 D1:AC26 ED 53 A7 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr
  216 D1:AC2B 23 -  -  -  	inc hl
  217 D1:AC2C 23 -  -  -  	inc hl
  218 D1:AC2D 23 -  -  -  	inc hl ;to frame data start 
  219 D1:AC2E 08 -  -  -  	ex af,af' ;'
  220 D1:AC2F 7E -  -  -  	ld a,(hl);number of elements = num loops
  221 D1:AC30 3C -  -  -  	inc a ;add 1 bc termination is checked at start of loop 
  222 D1:AC31 08 -  -  -  	ex af,af' ;'
  223 D1:AC32 -  -  -  -  	
  224 D1:AC32 11 00 00 00 	ld de,0
  225 D1:AC36 01 00 00 00 	ld bc,0
  226 D1:AC3A -  -  -  -  	;upper frame, checking for sprites that carry into lower frame
  227 D1:AC3A -  -  -  -  dbgl_upper_loop:
  228 D1:AC3A 08 -  -  -  	ex af,af' ;'
  229 D1:AC3B 3D -  -  -  	dec a 
  230 D1:AC3C CA 5D AC D1 	jp z,dbgl_lower_start
  231 D1:AC40 08 -  -  -  	ex af,af' ;'
  232 D1:AC41 23 -  -  -  	inc hl ;to Y
  233 D1:AC42 7E -  -  -  	ld a,(hl); y value of sprite in upper frame 
  234 D1:AC43 23 -  -  -  	inc hl;to height
  235 D1:AC44 -  -  -  -  dbgl_lines_to_top_of_target_frame .equ $ + 1
  236 D1:AC44 C6 00 -  -  	add a,0 ;a holds line number in sprite to draw (0 indexed)
  237 D1:AC46 DA 57 AC D1 	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
  238 D1:AC4A BE -  -  -  	cp (hl) ;compare to sprite height 
  239 D1:AC4B D2 57 AC D1 	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
  240 D1:AC4F -  -  -  -  	;Sprite is to be drawn, a holds line number 
  241 D1:AC4F CD 90 AC D1 	call dbgl_setup_and_draw ;draw sprite line 
  242 D1:AC53 -  -  -  -  	;hl pts to sprite index
  243 D1:AC53 C3 3A AC D1 	jp dbgl_upper_loop
  244 D1:AC57 -  -  -  -  	
  245 D1:AC57 -  -  -  -  dbgl_upper_skip_sprite:
  246 D1:AC57 23 -  -  -  	inc hl ;to x 
  247 D1:AC58 23 -  -  -  	inc hl ;to index 
  248 D1:AC59 C3 3A AC D1 	jp dbgl_upper_loop
  249 D1:AC5D -  -  -  -  	
  250 D1:AC5D -  -  -  -  	
  251 D1:AC5D -  -  -  -  dbgl_lower_start:
  252 D1:AC5D -  -  -  -  ;LOWER FRAME START 
  253 D1:AC5D -  -  -  -  	;After breaking upper loop, hl is pointing to the sprite index of the last element in the upper frame 
  254 D1:AC5D 23 -  -  -  	inc hl ;hl now points to sprite table of the lower frame 
  255 D1:AC5E ED 17 -  -  	ld de,(hl)
  256 D1:AC60 ED 53 A7 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr 
  257 D1:AC65 11 00 00 00 	ld de,0;clear d upper 
  258 D1:AC69 23 -  -  -  	inc hl
  259 D1:AC6A 23 -  -  -  	inc hl
  260 D1:AC6B 23 -  -  -  	inc hl;to num elements
  261 D1:AC6C -  -  -  -  	
  262 D1:AC6C 08 -  -  -  	ex af,af' ;'
  263 D1:AC6D 7E -  -  -  	ld a,(hl);number of elements
  264 D1:AC6E 3C -  -  -  	inc a 
  265 D1:AC6F 08 -  -  -  	ex af,af' ;'
  266 D1:AC70 -  -  -  -  	
  267 D1:AC70 -  -  -  -  	
  268 D1:AC70 -  -  -  -  dbgl_lower_loop:
  269 D1:AC70 08 -  -  -  	ex af,af' ;'
  270 D1:AC71 3D -  -  -  	dec a 
  271 D1:AC72 C8 -  -  -  	ret z
  272 D1:AC73 08 -  -  -  	ex af,af' ;'
  273 D1:AC74 23 -  -  -  	inc hl ;to y
  274 D1:AC75 7E -  -  -  	ld a,(hl) ;y pos of sprite in lower frame 
  275 D1:AC76 23 -  -  -  	inc hl;to height
  276 D1:AC77 -  -  -  -  dbgl_line_num .equ $ + 1
  277 D1:AC77 D6 00 -  -  	sub 0;subtract line num 
  278 D1:AC79 DA 8A AC D1 	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
  279 D1:AC7D -  -  -  -  	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
  280 D1:AC7D BE -  -  -  	cp (hl) ;compare to sprite height -1
  281 D1:AC7E D2 8A AC D1 	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
  282 D1:AC82 -  -  -  -  	
  283 D1:AC82 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  284 D1:AC82 CD 90 AC D1 	call dbgl_setup_and_draw ;draw sprite line 
  285 D1:AC86 -  -  -  -  	;hl pts to sprite index
  286 D1:AC86 C3 70 AC D1 	jp dbgl_lower_loop
  287 D1:AC8A -  -  -  -  	
  288 D1:AC8A -  -  -  -  dbgl_lower_skip_sprite:
  289 D1:AC8A 23 -  -  -  	inc hl ;to x 
  290 D1:AC8B 23 -  -  -  	inc hl ;to index 
  291 D1:AC8C C3 70 AC D1 	jp dbgl_lower_loop
  292 D1:AC90 -  -  -  -  
  293 D1:AC90 -  -  -  -  ;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
  294 D1:AC90 -  -  -  -  dbgl_setup_and_draw:
  295 D1:AC90 23 -  -  -  	inc hl;to x pos
  296 D1:AC91 5E -  -  -  	ld e,(hl);e holds x pos 
  297 D1:AC92 23 -  -  -  	inc hl 
  298 D1:AC93 4E -  -  -  	ld c,(hl);sprite index 
  299 D1:AC94 E5 -  -  -  	push hl ;save location in data 
  300 D1:AC95 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  301 D1:AC95 21 00 00 00 	ld hl,0
  302 D1:AC99 19 -  -  -  	add hl,de;add x pos 
  303 D1:AC9A EB -  -  -  	ex de,hl;put vram pos into de 
  304 D1:AC9B -  -  -  -  	
  305 D1:AC9B 26 A0 -  -  	ld h,160
  306 D1:AC9D 6F -  -  -  	ld l,a ;number of lines to subtract 
  307 D1:AC9E ED 6C -  -  	mlt hl;bytes to subtract from vram
  308 D1:ACA0 37 -  -  -  	scf 
  309 D1:ACA1 3F -  -  -  	ccf
  310 D1:ACA2 EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  311 D1:ACA3 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  312 D1:ACA5 EB -  -  -  	ex de,hl;put in de
  313 D1:ACA6 -  -  -  -  	
  314 D1:ACA6 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  315 D1:ACA6 21 00 00 00 	ld hl,0
  316 D1:ACAA 09 -  -  -  	add hl,bc
  317 D1:ACAB 09 -  -  -  	add hl,bc 
  318 D1:ACAC 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  319 D1:ACAD ED 27 -  -  	ld hl,(hl);hl holds sprite data
  320 D1:ACAF -  -  -  -  
  321 D1:ACAF -  -  -  -  
  322 D1:ACAF CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  323 D1:ACB1 CA BD AC D1 	jp z,dbgl_fast_sprite ;if even address, fast sprite 
  324 D1:ACB5 CD 8F AD D1 	call draw_slow_sprite_single_line
  325 D1:ACB9 C3 C1 AC D1 	jp dbgl_slow_sprite
  326 D1:ACBD -  -  -  -  dbgl_fast_sprite:
  327 D1:ACBD CD 11 AD D1 	call draw_fast_sprite_single_line
  328 D1:ACC1 -  -  -  -  dbgl_slow_sprite:
  329 D1:ACC1 -  -  -  -  	
  330 D1:ACC1 11 00 00 00 	ld de,0;clear de 
  331 D1:ACC5 01 00 00 00 	ld bc,0
  332 D1:ACC9 E1 -  -  -  	pop hl;back to data
  333 D1:ACCA C9 -  -  -  	ret
  334 D1:ACCB -  -  -  -  	
  335 D1:ACCB -  -  -  -  
  336 D1:ACCB -  -  -  -  
  337 D1:ACCB -  -  -  -  
  338 D1:ACCB -  -  -  -  
  339 D1:ACCB -  -  -  -  
  340 D1:ACCB -  -  -  -  
  341 D1:ACCB -  -  -  -  
  342 D1:ACCB -  -  -  -  
  343 D1:ACCB -  -  -  -  
  344 D1:ACCB -  -  -  -  ; dbgl_upper_loop:
  345 D1:ACCB -  -  -  -  	; ld a,(hl);y
  346 D1:ACCB -  -  -  -  	; inc hl;to height
  347 D1:ACCB -  -  -  -  	; sub (hl);subtract height
  348 D1:ACCB -  -  -  -  	;a is y value of bottom row of sprite
  349 D1:ACCB -  -  -  -  	; jp nc,dbgl_upper_skip;if no carry into next frame (most sprites will do this so want this to be fast)
  350 D1:ACCB -  -  -  -  	
  351 D1:ACCB -  -  -  -  	;sprite extends into target frame
  352 D1:ACCB -  -  -  -  ; dbgl_line_num .equ $ + 1
  353 D1:ACCB -  -  -  -  	; sub 0 ;compare to line number in target frame
  354 D1:ACCB -  -  -  -  	; jp c,dbgl_upper_cont;if linenum is >  bottom row
  355 D1:ACCB -  -  -  -  	; jp z,dbgl_upper_cont;if = bottom row
  356 D1:ACCB -  -  -  -  ; dbgl_upper_skip:
  357 D1:ACCB -  -  -  -  	; inc hl;to x
  358 D1:ACCB -  -  -  -  	; inc hl;to index 
  359 D1:ACCB -  -  -  -  	; inc hl;to y
  360 D1:ACCB -  -  -  -  	; ex af,af';'
  361 D1:ACCB -  -  -  -  	; dec a ;dec number of loops 
  362 D1:ACCB -  -  -  -  	; jp z,dbgl_lower_start 
  363 D1:ACCB -  -  -  -  	; ex af,af';'
  364 D1:ACCB -  -  -  -  	; jp dbgl_upper_loop
  365 D1:ACCB -  -  -  -  	
  366 D1:ACCB -  -  -  -  ; dbgl_upper_cont:
  367 D1:ACCB -  -  -  -  	;a = bottom row - linenum
  368 D1:ACCB -  -  -  -  	; add a,(hl);add height-1 
  369 D1:ACCB -  -  -  -  	;a holds 0 indexed line num within sprite
  370 D1:ACCB -  -  -  -  	; call dbgl_setup_and_draw
  371 D1:ACCB -  -  -  -  	; inc hl;to y
  372 D1:ACCB -  -  -  -  	; ex af,af';'
  373 D1:ACCB -  -  -  -  	; dec a 
  374 D1:ACCB -  -  -  -  	; jp z,dbgl_lower_start 
  375 D1:ACCB -  -  -  -  	; ex af,af';'
  376 D1:ACCB -  -  -  -  	; jp dbgl_upper_loop
  377 D1:ACCB -  -  -  -  
  378 D1:ACCB -  -  -  -  
  379 D1:ACCB -  -  -  -  
  380 D1:ACCB -  -  -  -  
  381 D1:ACCB -  -  -  -  
  382 D1:ACCB -  -  -  -  
  383 D1:ACCB -  -  -  -  
  384 D1:ACCB -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  385 D1:ACCB -  -  -  -  ; draw_bg_sprite_line:
  386 D1:ACCB -  -  -  -  	; push hl;save 
  387 D1:ACCB -  -  -  -  	; ld l,(hl);sprite width in px
  388 D1:ACCB -  -  -  -  	; ld h,a ;lines to skip
  389 D1:ACCB -  -  -  -  	; ld a,l;width 
  390 D1:ACCB -  -  -  -  	; mlt hl;widt*lines skipped 
  391 D1:ACCB -  -  -  -  	; pop bc 
  392 D1:ACCB -  -  -  -  	; add hl,bc;skip to target line data 
  393 D1:ACCB -  -  -  -  	; inc hl 
  394 D1:ACCB -  -  -  -  	;hl is pointing to start of line data 
  395 D1:ACCB -  -  -  -  	; sra a;divide width by 2 
  396 D1:ACCB -  -  -  -  	; ld b,a;b holds number of loops 
  397 D1:ACCB -  -  -  -  ; dbgsl_loop:
  398 D1:ACCB -  -  -  -  	; ld a,(de); load vram data 
  399 D1:ACCB -  -  -  -  	; and (hl);and with mask 
  400 D1:ACCB -  -  -  -  	; inc hl ;to color data 
  401 D1:ACCB -  -  -  -  	; or (hl);or w color data 
  402 D1:ACCB -  -  -  -  	; ld (de),a;write to vram  
  403 D1:ACCB -  -  -  -  	; inc de
  404 D1:ACCB -  -  -  -  	; inc hl;to mask data
  405 D1:ACCB -  -  -  -  	; djnz dbgsl_loop
  406 D1:ACCB -  -  -  -  	; ret 
  407 D1:ACCB -  -  -  -  	
  408 D1:ACCB -  -  -  -  
  409 D1:ACCB -  -  -  -  
  410 D1:ACCB -  -  -  -  
  411 D1:ACCB -  -  -  -  
  412 D1:ACCB -  -  -  -  
  413 D1:ACCB -  -  -  -  
  414 D1:ACCB -  -  -  -  
  415 D1:ACCB -  -  -  -  
  416 D1:ACCB -  -  -  -  
  417 D1:ACCB -  -  -  -  
  418 D1:ACCB -  -  -  -  
  419 D1:ACCB -  -  -  -  
Listing for file "ascent.asm"
  287 D1:ACCB -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ACCB -  -  -  -  
    2 D1:ACCB -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:ACCB -  -  -  -  setup_sprite_bottom_cut:
    4 D1:ACCB 1B -  -  -  	dec de
    5 D1:ACCC 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:ACD0 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:ACD1 E5 -  -  -  	push hl ;save data 
    8 D1:ACD2 09 -  -  -  	add hl,bc
    9 D1:ACD3 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:ACD4 E1 -  -  -  	pop hl ;return to start of data
   11 D1:ACD5 4E -  -  -  	ld c,(hl) ;height
   12 D1:ACD6 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:ACD7 C9 -  -  -  	ret 
   14 D1:ACD8 -  -  -  -  
   15 D1:ACD8 -  -  -  -  setup_sprite_top_cut:
   16 D1:ACD8 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:ACD9 01 00 00 00 	ld bc,0
   18 D1:ACDD 4F -  -  -  	ld c,a ;lines to skip (1 indexed)
   19 D1:ACDE D5 -  -  -  	push de
   20 D1:ACDF 11 00 00 00 	ld de,0
   21 D1:ACE3 E5 -  -  -  	push hl
   22 D1:ACE4 5E -  -  -  	ld e,(hl);height
   23 D1:ACE5 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:ACE6 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:ACE7 E1 -  -  -  	pop hl;start of data
   26 D1:ACE8 19 -  -  -  	add hl,de
   27 D1:ACE9 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:ACEA 23 -  -  -  	inc hl;hl is pixel data
   29 D1:ACEB D1 -  -  -  	pop de;back to vram
   30 D1:ACEC 79 -  -  -  	ld a,c;loops to skip
   31 D1:ACED C9 -  -  -  	ret 
   32 D1:ACEE -  -  -  -  
   33 D1:ACEE -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:ACEE -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:ACEE 1B -  -  -  	dec de
   36 D1:ACEF 01 00 00 00 	ld bc,0
   37 D1:ACF3 4F -  -  -  	ld c,a ;line to draw
   38 D1:ACF4 D5 -  -  -  	push de ;save vram 
   39 D1:ACF5 11 00 00 00 	ld de,0
   40 D1:ACF9 E5 -  -  -  	push hl
   41 D1:ACFA 5E -  -  -  	ld e,(hl);height
   42 D1:ACFB 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:ACFC 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:ACFD 23 -  -  -  	inc hl 
   45 D1:ACFE 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:ACFF E1 -  -  -  	pop hl;start of data
   47 D1:AD00 19 -  -  -  	add hl,de
   48 D1:AD01 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:AD02 D1 -  -  -  	pop de;back to vram
   50 D1:AD03 79 -  -  -  	ld a,c;loops to skip
   51 D1:AD04 C9 -  -  -  	ret 
   52 D1:AD05 -  -  -  -  
   53 D1:AD05 -  -  -  -  
   54 D1:AD05 -  -  -  -  
   55 D1:AD05 -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:AD05 3C -  -  -  	inc a 
   57 D1:AD06 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:AD06 -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:AD06 CD CB AC D1 	call setup_sprite_bottom_cut
   60 D1:AD0A 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:AD0B 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:AD0C EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:AD0D C3 54 AD D1 	jp dfgs_loop
   64 D1:AD11 -  -  -  -  
   65 D1:AD11 -  -  -  -  
   66 D1:AD11 -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:AD11 -  -  -  -  draw_fast_sprite_single_line:
   68 D1:AD11 B7 -  -  -  	or a 
   69 D1:AD12 CA 05 AD D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:AD16 -  -  -  -  	;we know a is not 0 here 
   71 D1:AD16 CD EE AC D1 	call setup_sprite_single_line
   72 D1:AD1A -  -  -  -  	
   73 D1:AD1A C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AD1B 01 00 00 00 	ld bc,0
   75 D1:AD1F -  -  -  -  	
   76 D1:AD1F C3 2C AD D1 	jp draw_fast_sprite_top_loop 
   77 D1:AD23 -  -  -  -  
   78 D1:AD23 -  -  -  -  
   79 D1:AD23 -  -  -  -  
   80 D1:AD23 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (1 indexed)
   81 D1:AD23 -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AD23 CD D8 AC D1 	call setup_sprite_top_cut
   83 D1:AD27 C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AD28 01 00 00 00 	ld bc,0 
   85 D1:AD2C -  -  -  -  	
   86 D1:AD2C -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AD2C 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AD2D EB -  -  -  	ex de,hl;hl is vram
   89 D1:AD2E 09 -  -  -  	add hl,bc
   90 D1:AD2F EB -  -  -  	ex de,hl;hl is data
   91 D1:AD30 23 -  -  -  	inc hl
   92 D1:AD31 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AD32 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AD33 EB -  -  -  	ex de,hl;hl is vram
   95 D1:AD34 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AD35 13 -  -  -  	inc de
   97 D1:AD36 EB -  -  -  	ex de,hl;hl is data
   98 D1:AD37 3D -  -  -  	dec a
   99 D1:AD38 C2 2C AD D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AD3C -  -  -  -  	
  101 D1:AD3C -  -  -  -  	
  102 D1:AD3C C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AD3D 78 -  -  -  	ld a,b
  104 D1:AD3E 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AD3F -  -  -  -  		
  106 D1:AD3F 01 00 00 00 	ld bc,0
  107 D1:AD43 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AD44 EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AD45 C3 54 AD D1 	jp dfgs_loop
  110 D1:AD49 -  -  -  -  
  111 D1:AD49 -  -  -  -  
  112 D1:AD49 -  -  -  -  ;de = vram , hl = data
  113 D1:AD49 -  -  -  -  draw_fast_sprite_full:
  114 D1:AD49 1B -  -  -  	dec de
  115 D1:AD4A 01 00 00 00 	ld bc,0
  116 D1:AD4E 4E -  -  -  	ld c,(hl);height
  117 D1:AD4F 09 -  -  -  	add hl,bc
  118 D1:AD50 7E -  -  -  	ld a,(hl);total loops
  119 D1:AD51 23 -  -  -  	inc hl
  120 D1:AD52 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AD53 EB -  -  -  	ex de,hl
  122 D1:AD54 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AD54 -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AD54 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AD55 EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AD56 23 -  -  -  	inc hl
  127 D1:AD57 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AD58 23 -  -  -  	inc hl
  129 D1:AD59 ED B0 -  -  	ldir
  130 D1:AD5B 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AD5C EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AD5D 3D -  -  -  	dec a
  133 D1:AD5E C2 54 AD D1 	jp nz,dfgs_loop
  134 D1:AD62 C9 -  -  -  	ret
  135 D1:AD63 -  -  -  -  	
  136 D1:AD63 -  -  -  -  	
  137 D1:AD63 -  -  -  -  	
  138 D1:AD63 -  -  -  -  	
  139 D1:AD63 -  -  -  -  
  140 D1:AD63 -  -  -  -  
  141 D1:AD63 -  -  -  -  ;hl = data, de = vram
  142 D1:AD63 -  -  -  -  draw_slow_sprite_full:
  143 D1:AD63 01 00 00 00 	ld bc,0
  144 D1:AD67 4E -  -  -  	ld c,(hl);height
  145 D1:AD68 09 -  -  -  	add hl,bc
  146 D1:AD69 7E -  -  -  	ld a,(hl);num loops
  147 D1:AD6A 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AD6B D9 -  -  -  	exx;into shadow 
  149 D1:AD6C 47 -  -  -  	ld b,a ;number of loops
  150 D1:AD6D -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AD6D -  -  -  -  dsfgs_line_loop:
  152 D1:AD6D D9 -  -  -  	exx;out of shadow
  153 D1:AD6E 23 -  -  -  	inc hl;gap length
  154 D1:AD6F 4E -  -  -  	ld c,(hl);gap length
  155 D1:AD70 EB -  -  -  	ex de,hl;hl is vram
  156 D1:AD71 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AD72 EB -  -  -  	ex de,hl;hl is data
  158 D1:AD73 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AD74 1A -  -  -  	ld a,(de);vram data
  160 D1:AD75 A6 -  -  -  	and (hl)
  161 D1:AD76 23 -  -  -  	inc hl;pixel data
  162 D1:AD77 B6 -  -  -  	or (hl)
  163 D1:AD78 12 -  -  -  	ld (de),a
  164 D1:AD79 23 -  -  -  	inc hl;ldir length
  165 D1:AD7A -  -  -  -  	
  166 D1:AD7A 13 -  -  -  	inc de;move to next pixel
  167 D1:AD7B -  -  -  -  	
  168 D1:AD7B 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AD7C 23 -  -  -  	inc hl;data
  170 D1:AD7D 4F -  -  -  	ld c,a
  171 D1:AD7E B7 -  -  -  	or a
  172 D1:AD7F CA 85 AD D1 	jp z,dsfgs_ldir_skip
  173 D1:AD83 ED B0 -  -  	ldir
  174 D1:AD85 -  -  -  -  dsfgs_ldir_skip:
  175 D1:AD85 1A -  -  -  	ld a,(de);vram data
  176 D1:AD86 A6 -  -  -  	and (hl)
  177 D1:AD87 23 -  -  -  	inc hl;pixel data
  178 D1:AD88 B6 -  -  -  	or (hl)
  179 D1:AD89 12 -  -  -  	ld (de),a
  180 D1:AD8A -  -  -  -  	
  181 D1:AD8A D9 -  -  -  	exx ;into shadow
  182 D1:AD8B 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AD8D D9 -  -  -  	exx ;out 
  184 D1:AD8E C9 -  -  -  	ret
  185 D1:AD8F -  -  -  -  
  186 D1:AD8F -  -  -  -  
  187 D1:AD8F -  -  -  -  
  188 D1:AD8F -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AD8F -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AD8F -  -  -  -  
  191 D1:AD8F B7 -  -  -  	or a 
  192 D1:AD90 CA CD AD D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AD94 -  -  -  -  	;we know a is not 0 here
  194 D1:AD94 CD EE AC D1 	call setup_sprite_single_line
  195 D1:AD98 C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AD99 01 00 00 00 	ld bc,0
  197 D1:AD9D -  -  -  -  	
  198 D1:AD9D C3 AA AD D1 	jp slow_sprite_data_traverse 
  199 D1:ADA1 -  -  -  -  	
  200 D1:ADA1 -  -  -  -  
  201 D1:ADA1 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:ADA1 -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:ADA1 CD D8 AC D1 	call setup_sprite_top_cut
  204 D1:ADA5 C5 -  -  -  	push bc;save total and skipped loops
  205 D1:ADA6 01 00 00 00 	ld bc,0
  206 D1:ADAA -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:ADAA -  -  -  -  slow_sprite_data_traverse:
  208 D1:ADAA 4E -  -  -  	ld c,(hl);gap length
  209 D1:ADAB EB -  -  -  	ex de,hl;hl is vram
  210 D1:ADAC 09 -  -  -  	add hl,bc
  211 D1:ADAD EB -  -  -  	ex de,hl
  212 D1:ADAE -  -  -  -  	
  213 D1:ADAE 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:ADAF 23 -  -  -  	inc hl
  215 D1:ADB0 23 -  -  -  	inc hl;ldir length
  216 D1:ADB1 4E -  -  -  	ld c,(hl)
  217 D1:ADB2 09 -  -  -  	add hl,bc
  218 D1:ADB3 EB -  -  -  	ex de,hl
  219 D1:ADB4 09 -  -  -  	add hl,bc
  220 D1:ADB5 EB -  -  -  	ex de,hl
  221 D1:ADB6 13 -  -  -  	inc de;inc for leading pix 
  222 D1:ADB7 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:ADB8 23 -  -  -  	inc hl
  224 D1:ADB9 23 -  -  -  	inc hl;gap length
  225 D1:ADBA -  -  -  -  	
  226 D1:ADBA 3D -  -  -  	dec a 
  227 D1:ADBB C2 AA AD D1 	jp nz,slow_sprite_data_traverse
  228 D1:ADBF -  -  -  -  
  229 D1:ADBF -  -  -  -  
  230 D1:ADBF C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:ADC0 78 -  -  -  	ld a,b
  232 D1:ADC1 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:ADC2 01 00 00 00 	ld bc,0;clear bc 
  234 D1:ADC6 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:ADC7 D9 -  -  -  	exx ;toshadow
  236 D1:ADC8 47 -  -  -  	ld b,a 
  237 D1:ADC9 C3 6D AD D1 	jp dsfgs_line_loop
  238 D1:ADCD -  -  -  -  	
  239 D1:ADCD -  -  -  -  	
  240 D1:ADCD -  -  -  -  	
  241 D1:ADCD -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:ADCD 3C -  -  -  	inc a 
  243 D1:ADCE -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:ADCE -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:ADCE -  -  -  -  
  246 D1:ADCE CD CB AC D1 	call setup_sprite_bottom_cut
  247 D1:ADD2 -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:ADD2 D9 -  -  -  	exx ;toshadow
  249 D1:ADD3 47 -  -  -  	ld b,a
  250 D1:ADD4 C3 6D AD D1 	jp dsfgs_line_loop
  251 D1:ADD8 -  -  -  -  
  252 D1:ADD8 -  -  -  -  
  253 D1:ADD8 -  -  -  -  
  254 D1:ADD8 -  -  -  -  
  255 D1:ADD8 -  -  -  -  
  256 D1:ADD8 -  -  -  -  
  257 D1:ADD8 -  -  -  -  
  258 D1:ADD8 -  -  -  -  
  259 D1:ADD8 -  -  -  -  
  260 D1:ADD8 -  -  -  -  
  261 D1:ADD8 -  -  -  -  
  262 D1:ADD8 -  -  -  -  
  263 D1:ADD8 -  -  -  -  
  264 D1:ADD8 -  -  -  -  
  265 D1:ADD8 -  -  -  -  
  266 D1:ADD8 -  -  -  -  
  267 D1:ADD8 -  -  -  -  
  268 D1:ADD8 -  -  -  -  
  269 D1:ADD8 -  -  -  -  
  270 D1:ADD8 -  -  -  -  
  271 D1:ADD8 -  -  -  -  
  272 D1:ADD8 -  -  -  -  
  273 D1:ADD8 -  -  -  -  
  274 D1:ADD8 -  -  -  -  
  275 D1:ADD8 -  -  -  -  
  276 D1:ADD8 -  -  -  -  
  277 D1:ADD8 -  -  -  -  
  278 D1:ADD8 -  -  -  -  
  279 D1:ADD8 -  -  -  -  
  280 D1:ADD8 -  -  -  -  
  281 D1:ADD8 -  -  -  -  
  282 D1:ADD8 -  -  -  -  
  283 D1:ADD8 -  -  -  -  
  284 D1:ADD8 -  -  -  -  
  285 D1:ADD8 -  -  -  -  
  286 D1:ADD8 -  -  -  -  
  287 D1:ADD8 -  -  -  -   
  288 D1:ADD8 -  -  -  -  
  289 D1:ADD8 -  -  -  -  
  290 D1:ADD8 -  -  -  -  
  291 D1:ADD8 -  -  -  -  
  292 D1:ADD8 -  -  -  -  
  293 D1:ADD8 -  -  -  -  
  294 D1:ADD8 -  -  -  -  
  295 D1:ADD8 -  -  -  -  
  296 D1:ADD8 -  -  -  -  
  297 D1:ADD8 -  -  -  -  
  298 D1:ADD8 -  -  -  -  
  299 D1:ADD8 -  -  -  -  
  300 D1:ADD8 -  -  -  -  
  301 D1:ADD8 -  -  -  -  
  302 D1:ADD8 -  -  -  -  
  303 D1:ADD8 -  -  -  -  
  304 D1:ADD8 -  -  -  -  
  305 D1:ADD8 -  -  -  -  
  306 D1:ADD8 -  -  -  -  
  307 D1:ADD8 -  -  -  -  
  308 D1:ADD8 -  -  -  -  
  309 D1:ADD8 -  -  -  -  
  310 D1:ADD8 -  -  -  -  
  311 D1:ADD8 -  -  -  -  
  312 D1:ADD8 -  -  -  -  
  313 D1:ADD8 -  -  -  -  
  314 D1:ADD8 -  -  -  -  
  315 D1:ADD8 -  -  -  -  
  316 D1:ADD8 -  -  -  -  
  317 D1:ADD8 -  -  -  -  
  318 D1:ADD8 -  -  -  -  
  319 D1:ADD8 -  -  -  -  
  320 D1:ADD8 -  -  -  -  
  321 D1:ADD8 -  -  -  -  
  322 D1:ADD8 -  -  -  -  
  323 D1:ADD8 -  -  -  -  
  324 D1:ADD8 -  -  -  -  
  325 D1:ADD8 -  -  -  -  
  326 D1:ADD8 -  -  -  -  
  327 D1:ADD8 -  -  -  -  
  328 D1:ADD8 -  -  -  -  
  329 D1:ADD8 -  -  -  -  
  330 D1:ADD8 -  -  -  -  
  331 D1:ADD8 -  -  -  -  
  332 D1:ADD8 -  -  -  -  
  333 D1:ADD8 -  -  -  -  
  334 D1:ADD8 -  -  -  -  
  335 D1:ADD8 -  -  -  -  
  336 D1:ADD8 -  -  -  -  
  337 D1:ADD8 -  -  -  -  
  338 D1:ADD8 -  -  -  -  
  339 D1:ADD8 -  -  -  -  
  340 D1:ADD8 -  -  -  -  
  341 D1:ADD8 -  -  -  -  
  342 D1:ADD8 -  -  -  -  
  343 D1:ADD8 -  -  -  -  	
  344 D1:ADD8 -  -  -  -  	
Listing for file "ascent.asm"
  288 D1:ADD8 -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:ADD8 -  -  -  -  
    2 D1:ADD8 -  -  -  -  
    3 D1:ADD8 -  -  -  -  
    4 D1:ADD8 -  -  -  -  
    5 D1:ADD8 -  -  -  -  
    6 D1:ADD8 -  -  -  -  
    7 D1:ADD8 -  -  -  -  
    8 D1:ADD8 -  -  -  -  
    9 D1:ADD8 -  -  -  -  ;REGISTER USEAGE
   10 D1:ADD8 -  -  -  -  ;HL = sprite color data byte
   11 D1:ADD8 -  -  -  -  ;C = bit selector for color data 
   12 D1:ADD8 -  -  -  -  ;HL' = alpha data byte
   13 D1:ADD8 -  -  -  -  ;C' = bit selector for alpha data
   14 D1:ADD8 -  -  -  -  ;DE = output sprite data location
   15 D1:ADD8 -  -  -  -  ;DE' = loops/line write location 
   16 D1:ADD8 -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:ADD8 -  -  -  -  
   18 D1:ADD8 -  -  -  -  ;SETUP ----------------
   19 D1:ADD8 -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:ADD8 -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:ADD8 -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:ADD8 -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:ADD8 -  -  -  -  ;------------
   24 D1:ADD8 -  -  -  -  
   25 D1:ADD8 -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:ADD8 -  -  -  -  
   27 D1:ADD8 -  -  -  -  
   28 D1:ADD8 -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:ADD8 -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:ADD8 -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:ADD8 -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:ADD8 -  -  -  -  ;write pixel mask and color data
   33 D1:ADD8 -  -  -  -  
   34 D1:ADD8 -  -  -  -  ;LDIR ROUTINE
   35 D1:ADD8 -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:ADD8 -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:ADD8 -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:ADD8 -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:ADD8 -  -  -  -  ;IF FAST, GOTO END
   40 D1:ADD8 -  -  -  -  
   41 D1:ADD8 -  -  -  -  ;trailing pixels
   42 D1:ADD8 -  -  -  -  ;11,10,01 in alpha data 
   43 D1:ADD8 -  -  -  -  
   44 D1:ADD8 -  -  -  -  ;END AND RESTART
   45 D1:ADD8 -  -  -  -  ;Increment loops/line counter
   46 D1:ADD8 -  -  -  -  ;check if end of line and write loops/line
   47 D1:ADD8 -  -  -  -  
   48 D1:ADD8 -  -  -  -  ;store registers and check if interrupt is required
   49 D1:ADD8 -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:ADD8 -  -  -  -  ;otherwise return to start of loop
   51 D1:ADD8 -  -  -  -  
   52 D1:ADD8 -  -  -  -  ;
   53 D1:ADD8 -  -  -  -  
   54 D1:ADD8 -  -  -  -  
   55 D1:ADD8 -  -  -  -  
   56 D1:ADD8 -  -  -  -  
   57 D1:ADD8 -  -  -  -  
   58 D1:ADD8 -  -  -  -  
   59 D1:ADD8 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:ADD8 -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:ADD8 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:ADD8 CB 09 -  -  	rrc c;rlc flip
   63 D1:ADDA D0 -  -  -  	ret nc
   64 D1:ADDB -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:ADDB 23 -  -  -  	inc hl;dec hl flip
   66 D1:ADDC C9 -  -  -  	ret
   67 D1:ADDD -  -  -  -  
   68 D1:ADDD -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:ADDD -  -  -  -  
   70 D1:ADDD -  -  -  -  ;IN SHADOW
   71 D1:ADDD -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:ADDD -  -  -  -  ;C IS BITMASK
   73 D1:ADDD -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:ADDD -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:ADDD -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:ADDD -  -  -  -  ; next call returns first bit in next row  
   77 D1:ADDD -  -  -  -  sdcomp_get_next_alpha:
   78 D1:ADDD -  -  -  -  	;ld a,$A2;test 
   79 D1:ADDD -  -  -  -  	;call write_a_to_ram
   80 D1:ADDD 79 -  -  -  	ld a,c 
   81 D1:ADDE -  -  -  -  	;call write_a_to_ram 
   82 D1:ADDE 7E -  -  -  	ld a,(hl)
   83 D1:ADDF -  -  -  -  	;call write_a_to_ram
   84 D1:ADDF -  -  -  -  	
   85 D1:ADDF 37 -  -  -  	scf 
   86 D1:ADE0 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:ADE0 DA ED AD D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:ADE4 -  -  -  -  
   89 D1:ADE4 -  -  -  -  	;ld a,$A3
   90 D1:ADE4 -  -  -  -  	;call write_a_to_ram 
   91 D1:ADE4 -  -  -  -  	
   92 D1:ADE4 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:ADE6 32 50 AE D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:ADEA -  -  -  -  	
   95 D1:ADEA 3E 00 -  -  	ld a,0
   96 D1:ADEC C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:ADED -  -  -  -  
   98 D1:ADED -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:ADED -  -  -  -  	
  100 D1:ADED -  -  -  -  	
  101 D1:ADED -  -  -  -  	
  102 D1:ADED -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:ADED 37 -  -  -  	scf
  104 D1:ADEE -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:ADEE DA FB AD D1 	jp c,sdcomp_bit_offset_skip
  106 D1:ADF2 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:ADF4 32 EE AD D1 	ld (sdcomp_bit_offset),a
  108 D1:ADF8 -  -  -  -  	;ld a,$A9
  109 D1:ADF8 -  -  -  -  	;call write_a_to_ram
  110 D1:ADF8 3E 00 -  -  	ld a,0
  111 D1:ADFA C9 -  -  -  	ret ;return 0 first bit
  112 D1:ADFB -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:ADFB -  -  -  -  		
  114 D1:ADFB -  -  -  -  	;ld a,$EF
  115 D1:ADFB -  -  -  -  	;call write_a_to_ram
  116 D1:ADFB 7E -  -  -  	ld a,(hl)
  117 D1:ADFC -  -  -  -  	;push af 
  118 D1:ADFC -  -  -  -  	;call write_a_to_ram
  119 D1:ADFC -  -  -  -  	;ld a,c
  120 D1:ADFC -  -  -  -  	;call write_a_to_ram
  121 D1:ADFC -  -  -  -  	;pop af 
  122 D1:ADFC -  -  -  -  	
  123 D1:ADFC -  -  -  -  	
  124 D1:ADFC A1 -  -  -  	and c 
  125 D1:ADFD CD D8 AD D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AE01 -  -  -  -  	;a holds data to return
  127 D1:AE01 -  -  -  -  	;call write_a_to_ram
  128 D1:AE01 37 -  -  -  	scf 
  129 D1:AE02 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AE02 DA 08 AE D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AE06 3E 01 -  -  	ld a,1
  132 D1:AE08 -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AE08 -  -  -  -  	
  134 D1:AE08 -  -  -  -  	
  135 D1:AE08 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AE09 3D -  -  -  	dec a 
  137 D1:AE0A -  -  -  -  	;call write_a_to_ram
  138 D1:AE0A C2 36 AE D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AE0E -  -  -  -  	
  140 D1:AE0E -  -  -  -  	;HAve read last bit in line  
  141 D1:AE0E -  -  -  -  	
  142 D1:AE0E -  -  -  -  	;ld a,$AC;Test
  143 D1:AE0E -  -  -  -  	;call write_a_to_ram;Test
  144 D1:AE0E -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AE0E -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AE0E 3E 00 -  -  	ld a,0
  147 D1:AE10 3D -  -  -  	dec a 
  148 D1:AE11 32 0F AE D1 	ld (sdcomp_lines_remaining),a
  149 D1:AE15 -  -  -  -  	;call write_a_to_ram
  150 D1:AE15 C2 1F AE D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AE19 -  -  -  -  	;end of last line reached 
  152 D1:AE19 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AE1B 32 8F B0 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AE1F -  -  -  -  	;ld a,$E9
  155 D1:AE1F -  -  -  -  	;call write_a_to_ram;TEST 
  156 D1:AE1F -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AE1F -  -  -  -  	
  158 D1:AE1F -  -  -  -  
  159 D1:AE1F -  -  -  -  	
  160 D1:AE1F 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AE21 32 6A B0 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AE25 32 E0 AD D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AE29 -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AE29 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AE2A -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AE2A DA 34 AE D1 	jp c,sdcomp_offset_1_skip
  167 D1:AE2E 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AE30 32 EE AD D1 	ld (sdcomp_bit_offset),a
  169 D1:AE34 -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AE34 -  -  -  -  	
  171 D1:AE34 -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AE34 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AE36 -  -  -  -  	
  174 D1:AE36 -  -  -  -  	;call write_a_to_ram
  175 D1:AE36 -  -  -  -  	
  176 D1:AE36 -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AE36 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AE37 -  -  -  -  	
  179 D1:AE37 -  -  -  -  	;push af ;testing
  180 D1:AE37 -  -  -  -  	;ld a,$A0
  181 D1:AE37 -  -  -  -  	;call write_a_to_ram
  182 D1:AE37 -  -  -  -  	;pop af 
  183 D1:AE37 -  -  -  -  	;call write_a_to_ram
  184 D1:AE37 -  -  -  -  	
  185 D1:AE37 C9 -  -  -  	ret 
  186 D1:AE38 -  -  -  -  	
  187 D1:AE38 -  -  -  -  
  188 D1:AE38 -  -  -  -  
  189 D1:AE38 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AE38 -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AE38 -  -  -  -  	;ld a,$A1
  192 D1:AE38 -  -  -  -  	;call write_a_to_ram
  193 D1:AE38 -  -  -  -  	
  194 D1:AE38 -  -  -  -  	;ld a,c ;test
  195 D1:AE38 -  -  -  -  	;call write_a_to_ram 
  196 D1:AE38 -  -  -  -  	;ld a,(hl) ;test
  197 D1:AE38 -  -  -  -  	;call write_a_to_ram
  198 D1:AE38 -  -  -  -  	
  199 D1:AE38 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AE3A 32 50 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AE3E -  -  -  -  	
  202 D1:AE3E CD DD AD D1 	call sdcomp_get_next_alpha
  203 D1:AE42 B7 -  -  -  	or a 
  204 D1:AE43 CA 4D AE D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AE47 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AE49 -  -  -  -  	;call write_a_to_ram
  207 D1:AE49 C3 5C AE D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AE4D -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AE4D 3E 00 -  -  	ld a,0
  210 D1:AE4F -  -  -  -  	
  211 D1:AE4F 37 -  -  -  	scf 
  212 D1:AE50 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AE50 DA 5C AE D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AE54 F5 -  -  -  	push af 
  215 D1:AE55 -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AE55 -  -  -  -  	
  217 D1:AE55 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AE57 32 71 B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AE5B -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AE5B -  -  -  -  	;ld a,$A4
  221 D1:AE5B -  -  -  -  	;call write_a_to_ram
  222 D1:AE5B F1 -  -  -  	pop af 
  223 D1:AE5C -  -  -  -  	
  224 D1:AE5C -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AE5C -  -  -  -  
  226 D1:AE5C -  -  -  -  	
  227 D1:AE5C 32 72 AE D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AE60 -  -  -  -  	
  229 D1:AE60 CD DD AD D1 	call sdcomp_get_next_alpha
  230 D1:AE64 B7 -  -  -  	or a 
  231 D1:AE65 CA 6F AE D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AE69 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AE6B C3 71 AE D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AE6F -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AE6F 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AE71 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AE71 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AE71 F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AE73 -  -  -  -  	
  240 D1:AE73 C9 -  -  -  	ret 
  241 D1:AE74 -  -  -  -  	
  242 D1:AE74 -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AE74 -  -  -  -  
  244 D1:AE74 -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AE74 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AE74 CD 7D AE D1 	call sdcomp_get_next_color
  247 D1:AE78 0F -  -  -  	rrca 
  248 D1:AE79 0F -  -  -  	rrca 
  249 D1:AE7A 0F -  -  -  	rrca 
  250 D1:AE7B 0F -  -  -  	rrca
  251 D1:AE7C C9 -  -  -  	ret 
  252 D1:AE7D -  -  -  -  
  253 D1:AE7D -  -  -  -  
  254 D1:AE7D -  -  -  -  
  255 D1:AE7D -  -  -  -  ;bit orders
  256 D1:AE7D -  -  -  -  ;	noflip   flip 
  257 D1:AE7D -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AE7D -  -  -  -  ;3bpp 210	 012
  259 D1:AE7D -  -  -  -  ;2bpp 10	 01
  260 D1:AE7D -  -  -  -  ;1bpp 0		 0
  261 D1:AE7D -  -  -  -  
  262 D1:AE7D -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AE7D -  -  -  -  sdcomp_get_next_color:
  264 D1:AE7D D5 -  -  -  	push de ;save data write location
  265 D1:AE7E 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AE80 -  -  -  -  	
  267 D1:AE80 37 -  -  -  	scf
  268 D1:AE81 -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AE81 D2 CB AE D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AE85 -  -  -  -  	
  271 D1:AE85 -  -  -  -  	;ld a,$C1
  272 D1:AE85 -  -  -  -  	;call write_a_to_ram
  273 D1:AE85 -  -  -  -  	
  274 D1:AE85 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AE86 -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AE86 A1 -  -  -  	and c
  277 D1:AE87 -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AE87 CD D8 AD D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:AE8B B7 -  -  -  	or a
  280 D1:AE8C CA 92 AE D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:AE90 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:AE90 CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:AE92 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:AE92 -  -  -  -  	
  285 D1:AE92 37 -  -  -  	scf
  286 D1:AE93 -  -  -  -  sdcomp_1bpc .equ $
  287 D1:AE93 D2 CB AE D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:AE97 -  -  -  -  
  289 D1:AE97 -  -  -  -  	;ld a,$C2
  290 D1:AE97 -  -  -  -  	;call write_a_to_ram
  291 D1:AE97 -  -  -  -  	
  292 D1:AE97 7E -  -  -  	ld a,(hl)
  293 D1:AE98 -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:AE98 A1 -  -  -  	and c 
  295 D1:AE99 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:AE99 CD D8 AD D1 	call sdcomp_next_in_bitstream
  297 D1:AE9D B7 -  -  -  	or a
  298 D1:AE9E CA A4 AE D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:AEA2 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:AEA2 CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:AEA4 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:AEA4 -  -  -  -  	
  303 D1:AEA4 37 -  -  -  	scf
  304 D1:AEA5 -  -  -  -  sdcomp_2bpc .equ $ ;if 2bpc jump to end
  305 D1:AEA5 D2 CB AE D1 	jp nc,sdcomp_get_color_from_index
  306 D1:AEA9 -  -  -  -  	
  307 D1:AEA9 7E -  -  -  	ld a,(hl)
  308 D1:AEAA A1 -  -  -  	and c 
  309 D1:AEAB CD D8 AD D1 	call sdcomp_next_in_bitstream
  310 D1:AEAF B7 -  -  -  	or a
  311 D1:AEB0 CA B6 AE D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:AEB4 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:AEB4 CB D3 -  -  	set 2,e 
  314 D1:AEB6 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:AEB6 -  -  -  -  	
  316 D1:AEB6 37 -  -  -  	scf
  317 D1:AEB7 -  -  -  -  sdcomp_3bpc .equ $
  318 D1:AEB7 D2 CB AE D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:AEBB -  -  -  -  
  320 D1:AEBB -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:AEBB 7E -  -  -  	ld a,(hl)
  322 D1:AEBC A1 -  -  -  	and c 
  323 D1:AEBD CD D8 AD D1 	call sdcomp_next_in_bitstream
  324 D1:AEC1 B7 -  -  -  	or a
  325 D1:AEC2 CA C8 AE D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:AEC6 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:AEC6 CB DB -  -  	set 3,e 
  328 D1:AEC8 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:AEC8 -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:AEC8 7B -  -  -  	ld a,e 
  331 D1:AEC9 D1 -  -  -  	pop de 
  332 D1:AECA C9 -  -  -  	ret 
  333 D1:AECB -  -  -  -  
  334 D1:AECB -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:AECB -  -  -  -  	
  336 D1:AECB -  -  -  -  	;ld a,$DD
  337 D1:AECB -  -  -  -  	;call write_a_to_ram
  338 D1:AECB -  -  -  -  	;ld a,e 
  339 D1:AECB -  -  -  -  	;call write_a_to_ram
  340 D1:AECB -  -  -  -  	
  341 D1:AECB -  -  -  -  	
  342 D1:AECB CB 53 -  -  	bit 2,e 
  343 D1:AECD CA EF AE D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:AED1 -  -  -  -  	
  345 D1:AED1 -  -  -  -  	;Bit 2 = 1 
  346 D1:AED1 CB 4B -  -  	bit 1,e 
  347 D1:AED3 CA E3 AE D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:AED7 -  -  -  -  
  349 D1:AED7 -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:AED7 -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:AED7 3E 00 -  -  	ld a,0
  352 D1:AED9 CB 43 -  -  	bit 0,e 
  353 D1:AEDB CA 11 AF D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:AEDF C3 0D AF D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:AEE3 -  -  -  -  
  356 D1:AEE3 -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:AEE3 -  -  -  -  	;2 = 1 1 = 0 
  358 D1:AEE3 -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:AEE3 3E 00 -  -  	ld a,0
  360 D1:AEE5 CB 43 -  -  	bit 0,e 
  361 D1:AEE7 CA 11 AF D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:AEEB C3 0D AF D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:AEEF -  -  -  -  	
  364 D1:AEEF -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:AEEF -  -  -  -  	;bit 2 was 0 
  366 D1:AEEF CB 4B -  -  	bit 1,e 
  367 D1:AEF1 CA 01 AF D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:AEF5 -  -  -  -  	
  369 D1:AEF5 -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:AEF5 -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:AEF5 3E 00 -  -  	ld a,0
  372 D1:AEF7 CB 43 -  -  	bit 0,e 
  373 D1:AEF9 CA 11 AF D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:AEFD C3 0D AF D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:AF01 -  -  -  -  	
  376 D1:AF01 -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:AF01 -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:AF01 -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:AF01 3E 00 -  -  	ld a,0
  380 D1:AF03 -  -  -  -  	
  381 D1:AF03 CB 43 -  -  	bit 0,e 
  382 D1:AF05 CA 11 AF D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:AF09 C3 0D AF D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:AF0D -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:AF0D E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:AF0F D1 -  -  -  	pop de 
  387 D1:AF10 -  -  -  -  	
  388 D1:AF10 -  -  -  -  	;push af 
  389 D1:AF10 -  -  -  -  	;ld a,$C0
  390 D1:AF10 -  -  -  -  	;call write_a_to_ram
  391 D1:AF10 -  -  -  -  	;pop af 
  392 D1:AF10 -  -  -  -  	;call write_a_to_ram
  393 D1:AF10 -  -  -  -  	
  394 D1:AF10 C9 -  -  -  	ret 
  395 D1:AF11 -  -  -  -  	
  396 D1:AF11 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:AF11 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:AF13 0F -  -  -  	rrca 
  399 D1:AF14 0F -  -  -  	rrca 
  400 D1:AF15 0F -  -  -  	rrca 
  401 D1:AF16 0F -  -  -  	rrca 
  402 D1:AF17 D1 -  -  -  	pop de 
  403 D1:AF18 -  -  -  -  	
  404 D1:AF18 -  -  -  -  	;push af 
  405 D1:AF18 -  -  -  -  	;ld a,$C0
  406 D1:AF18 -  -  -  -  	;call write_a_to_ram
  407 D1:AF18 -  -  -  -  	;pop af 
  408 D1:AF18 -  -  -  -  	;call write_a_to_ram
  409 D1:AF18 -  -  -  -  	
  410 D1:AF18 C9 -  -  -  	ret 
  411 D1:AF19 -  -  -  -  
  412 D1:AF19 -  -  -  -  
  413 D1:AF19 -  -  -  -  
  414 D1:AF19 -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:AF19 -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:AF19 -  -  -  -  ;in shadow ,destroys a
  417 D1:AF19 -  -  -  -  sdcomp_traverse_line_data:
  418 D1:AF19 D9 -  -  -  	exx ;OUT 
  419 D1:AF1A -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:AF1A 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:AF1E -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:AF1E 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:AF20 D9 -  -  -  	exx;toshadow 
  424 D1:AF21 -  -  -  -  	
  425 D1:AF21 -  -  -  -  	;load end of previous alpha data line 
  426 D1:AF21 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:AF21 21 00 00 00 	ld hl,0
  428 D1:AF25 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:AF25 0E 00 -  -  	ld c,0
  430 D1:AF27 -  -  -  -  sdcomp_traverse_initial:
  431 D1:AF27 D5 -  -  -  	push de
  432 D1:AF28 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:AF28 1E 00 -  -  	ld e, 0
  434 D1:AF2A -  -  -  -  	;e holds sprite width 
  435 D1:AF2A -  -  -  -  	
  436 D1:AF2A -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:AF2A -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:AF2A CB 09 -  -  	rrc c 
  439 D1:AF2C D2 31 AF D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:AF30 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:AF31 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:AF31 7E -  -  -  	ld a,(hl)
  443 D1:AF32 A1 -  -  -  	and c ;read alpha data 
  444 D1:AF33 -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:AF33 CA 49 AF D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:AF37 D9 -  -  -  	exx;out of shadow 
  447 D1:AF38 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  448 D1:AF38 CB 09 -  -  	rrc c ;rotate mask
  449 D1:AF3A -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:AF3A CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:AF3C -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:AF3C CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:AF3E -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:AF3E CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:AF40 -  -  -  -  	
  456 D1:AF40 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:AF40 79 -  -  -  	ld a,c
  458 D1:AF41 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:AF41 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:AF43 CA 48 AF D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:AF47 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:AF48 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:AF48 D9 -  -  -  	exx ;toshadow
  464 D1:AF49 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:AF49 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:AF4A C2 2A AF D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:AF4E D1 -  -  -  	pop de  ;back to write location 
  468 D1:AF4F -  -  -  -  	;set new end of line pointers 
  469 D1:AF4F -  -  -  -  	
  470 D1:AF4F -  -  -  -  	;ld a,$BB 
  471 D1:AF4F -  -  -  -  	;call write_a_to_ram 
  472 D1:AF4F -  -  -  -  	;ld a,(hl) 
  473 D1:AF4F -  -  -  -  	;call write_a_to_ram 
  474 D1:AF4F -  -  -  -  	;ld a,c 
  475 D1:AF4F -  -  -  -  	;call write_a_to_ram 
  476 D1:AF4F -  -  -  -  	
  477 D1:AF4F -  -  -  -  	
  478 D1:AF4F 22 22 AF D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:AF53 79 -  -  -  	ld a,c
  480 D1:AF54 32 26 AF D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:AF58 D9 -  -  -  	exx ;out
  482 D1:AF59 22 1B AF D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:AF5D 79 -  -  -  	ld a,c 
  484 D1:AF5E 32 1F AF D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:AF62 -  -  -  -  	
  486 D1:AF62 -  -  -  -  	;ld a,(hl) 
  487 D1:AF62 -  -  -  -  	;call write_a_to_ram 
  488 D1:AF62 -  -  -  -  	;ld a,c 
  489 D1:AF62 -  -  -  -  	;call write_a_to_ram 
  490 D1:AF62 -  -  -  -  	
  491 D1:AF62 D9 -  -  -  	exx;to shadow 
  492 D1:AF63 C9 -  -  -  	ret
  493 D1:AF64 -  -  -  -  
  494 D1:AF64 -  -  -  -  
  495 D1:AF64 -  -  -  -  
  496 D1:AF64 -  -  -  -  
  497 D1:AF64 -  -  -  -  
  498 D1:AF64 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  499 D1:AF64 -  -  -  -  sdcomp_write_ldir_data_loop:
  500 D1:AF64 CD 7D AE D1 	call sdcomp_get_next_color
  501 D1:AF68 47 -  -  -  	ld b,a;first pixel
  502 D1:AF69 CD 74 AE D1 	call sdcomp_get_next_color_leading_nibble
  503 D1:AF6D B0 -  -  -  	or b
  504 D1:AF6E -  -  -  -  	
  505 D1:AF6E -  -  -  -  	
  506 D1:AF6E 12 -  -  -  	ld (de),a;write color data
  507 D1:AF6F 13 -  -  -  	inc de
  508 D1:AF70 D9 -  -  -  	exx;to shadow
  509 D1:AF71 05 -  -  -  	dec b;ldir length counter
  510 D1:AF72 D9 -  -  -  	exx
  511 D1:AF73 C2 64 AF D1 	jp nz,sdcomp_write_ldir_data_loop
  512 D1:AF77 C9 -  -  -  	ret
  513 D1:AF78 -  -  -  -  	
  514 D1:AF78 -  -  -  -  
  515 D1:AF78 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  516 D1:AF78 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  517 D1:AF78 D5 -  -  -  	push de ;output location	
  518 D1:AF79 47 -  -  -  	ld b,a;save for later
  519 D1:AF7A CB 67 -  -  	bit 4,a ;check if first pixel has color 
  520 D1:AF7C 3E 00 -  -  	ld a,0
  521 D1:AF7E 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  522 D1:AF80 CA 8A AF D1 	jp z,sdcomp_leading_pixel_first_skip
  523 D1:AF84 -  -  -  -  	;has first color
  524 D1:AF84 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  525 D1:AF86 CD 7D AE D1 	call sdcomp_get_next_color
  526 D1:AF8A -  -  -  -  sdcomp_leading_pixel_first_skip:
  527 D1:AF8A -  -  -  -  	;a is either $00 or $0color1
  528 D1:AF8A -  -  -  -  	
  529 D1:AF8A 1E FF -  -  	ld e,%11111111;assuming no colors
  530 D1:AF8C -  -  -  -  	
  531 D1:AF8C CB 40 -  -  	bit 0,b;check second pixel alpha
  532 D1:AF8E 47 -  -  -  	ld b,a;save for later 
  533 D1:AF8F 3E 00 -  -  	ld a,0
  534 D1:AF91 CA 9B AF D1 	jp z,sdcomp_leading_pixel_second_skip;
  535 D1:AF95 -  -  -  -  	;has second color 
  536 D1:AF95 CD 74 AE D1 	call sdcomp_get_next_color_leading_nibble
  537 D1:AF99 -  -  -  -  	;a = color2 0 
  538 D1:AF99 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  539 D1:AF9B -  -  -  -  	
  540 D1:AF9B -  -  -  -  sdcomp_leading_pixel_second_skip:
  541 D1:AF9B -  -  -  -  	;a is either 00 or c2 0 
  542 D1:AF9B -  -  -  -  	;b is either 00 or 0 c1 
  543 D1:AF9B B0 -  -  -  	or b 
  544 D1:AF9C 47 -  -  -  	ld b,a;final color data
  545 D1:AF9D 7A -  -  -  	ld a,d 
  546 D1:AF9E A3 -  -  -  	and e ;final mask data 
  547 D1:AF9F -  -  -  -  	
  548 D1:AF9F D1 -  -  -  	pop de;return to pointer 
  549 D1:AFA0 -  -  -  -  	
  550 D1:AFA0 12 -  -  -  	ld (de),a;write mask data 
  551 D1:AFA1 13 -  -  -  	inc de 
  552 D1:AFA2 78 -  -  -  	ld a,b;color data 
  553 D1:AFA3 12 -  -  -  	ld (de),a;write color data 
  554 D1:AFA4 -  -  -  -  	
  555 D1:AFA4 -  -  -  -  	
  556 D1:AFA4 -  -  -  -  	
  557 D1:AFA4 -  -  -  -  	;call write_a_to_ram
  558 D1:AFA4 -  -  -  -  	
  559 D1:AFA4 13 -  -  -  	inc de 
  560 D1:AFA5 C9 -  -  -  	ret 
  561 D1:AFA6 -  -  -  -  
  562 D1:AFA6 -  -  -  -  
  563 D1:AFA6 -  -  -  -  
  564 D1:AFA6 -  -  -  -  ;ENTRY POINT 
  565 D1:AFA6 -  -  -  -  
  566 D1:AFA6 -  -  -  -  
  567 D1:AFA6 -  -  -  -  ;hl = sprite data start, de = main data decompress location
  568 D1:AFA6 -  -  -  -  sprite_decompress:
  569 D1:AFA6 -  -  -  -  
  570 D1:AFA6 -  -  -  -  
  571 D1:AFA6 -  -  -  -  	;SETUP ===========================================================================================================
  572 D1:AFA6 -  -  -  -  
  573 D1:AFA6 -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  574 D1:AFA6 -  -  -  -  
  575 D1:AFA6 -  -  -  -  	;HL pointing to flags registers
  576 D1:AFA6 -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  577 D1:AFA6 -  -  -  -  	;set bpc mode 
  578 D1:AFA6 CB 7E -  -  	bit 7,(hl)
  579 D1:AFA8 C4 52 B2 D1 	call nz,sdcomp_set_4bpc
  580 D1:AFAC CB 76 -  -  	bit 6,(hl)
  581 D1:AFAE C4 F5 B1 D1 	call nz,sdcomp_set_3bpc 
  582 D1:AFB2 CB 6E -  -  	bit 5,(hl)
  583 D1:AFB4 C4 AC B1 D1 	call nz,sdcomp_set_2bpc 
  584 D1:AFB8 CB 66 -  -  	bit 4,(hl)
  585 D1:AFBA C4 85 B1 D1 	call nz,sdcomp_set_1bpc 
  586 D1:AFBE CB 5E -  -  	bit 3,(hl)
  587 D1:AFC0 C4 6A B1 D1 	call nz,sdcomp_set_0bpc 
  588 D1:AFC4 CB 56 -  -  	bit 2,(hl)
  589 D1:AFC6 C4 AB B2 D1 	call nz,sdcomp_set_noalpha
  590 D1:AFCA -  -  -  -  	
  591 D1:AFCA 3E 00 -  -  	ld a,0
  592 D1:AFCC 32 F8 B0 D1 	ld (sdcomp_loops_per_line_counter),a ;reset loops counter
  593 D1:AFD0 3E DA -  -  	ld a,%11011010;jp c 
  594 D1:AFD2 32 50 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  595 D1:AFD6 -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  596 D1:AFD6 -  -  -  -  	
  597 D1:AFD6 23 -  -  -  	inc hl ;hl points to width in px 
  598 D1:AFD7 -  -  -  -  	
  599 D1:AFD7 -  -  -  -  	
  600 D1:AFD7 7E -  -  -  	ld a,(hl) 
  601 D1:AFD8 32 29 AF D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  602 D1:AFDC 32 35 AE D1 	ld (sdcomp_sprite_width_2),a
  603 D1:AFE0 47 -  -  -  	ld b,a;width
  604 D1:AFE1 08 -  -  -  	ex af,af' ;'
  605 D1:AFE2 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  606 D1:AFE3 08 -  -  -  	ex af,af' ;' 
  607 D1:AFE4 -  -  -  -  
  608 D1:AFE4 -  -  -  -  
  609 D1:AFE4 -  -  -  -  sdcomp_offset_2 .equ $ 
  610 D1:AFE4 00 -  -  -  	nop ;replace with inc b for offset 
  611 D1:AFE5 -  -  -  -  
  612 D1:AFE5 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  613 D1:AFE5 04 -  -  -  	inc b ;round up on odd sprites
  614 D1:AFE6 CB 38 -  -  	srl b;divide by 2
  615 D1:AFE8 -  -  -  -  	
  616 D1:AFE8 -  -  -  -  	
  617 D1:AFE8 3E A0 -  -  	ld a,160
  618 D1:AFEA 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  619 D1:AFEB 32 6F B0 D1 	ld (sdcomp_gap_btwn_rows),a 
  620 D1:AFEF -  -  -  -  	
  621 D1:AFEF -  -  -  -  	;call write_a_to_ram
  622 D1:AFEF -  -  -  -  	;ld a,$BE
  623 D1:AFEF -  -  -  -  	;call write_a_to_ram
  624 D1:AFEF -  -  -  -  	;ld a,b 
  625 D1:AFEF -  -  -  -  	;call write_a_to_ram
  626 D1:AFEF -  -  -  -  	
  627 D1:AFEF -  -  -  -  	
  628 D1:AFEF 7E -  -  -  	ld a,(hl);load width again
  629 D1:AFF0 -  -  -  -  	
  630 D1:AFF0 47 -  -  -  	ld b,a 
  631 D1:AFF1 -  -  -  -  	
  632 D1:AFF1 -  -  -  -  
  633 D1:AFF1 23 -  -  -  	inc hl ;hl points to height 
  634 D1:AFF2 7E -  -  -  	ld a,(hl);height
  635 D1:AFF3 32 0F AE D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  636 D1:AFF7 -  -  -  -  	
  637 D1:AFF7 -  -  -  -  	
  638 D1:AFF7 -  -  -  -  
  639 D1:AFF7 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  640 D1:AFF8 13 -  -  -  	inc de 
  641 D1:AFF9 -  -  -  -  	
  642 D1:AFF9 23 -  -  -  	inc hl ;HL points to start of alpha data 
  643 D1:AFFA -  -  -  -  
  644 D1:AFFA E5 -  -  -  	push hl ;Save alpha data 
  645 D1:AFFB -  -  -  -  	
  646 D1:AFFB -  -  -  -  	
  647 D1:AFFB -  -  -  -  	;Need to find start of color data
  648 D1:AFFB -  -  -  -  	;at this point a = height, b = width 
  649 D1:AFFB -  -  -  -  	
  650 D1:AFFB 37 -  -  -  	scf
  651 D1:AFFC -  -  -  -  	
  652 D1:AFFC -  -  -  -  sdcomp_no_alpha_2 .equ $
  653 D1:AFFC D2 15 B0 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  654 D1:B000 -  -  -  -  	
  655 D1:B000 -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  656 D1:B000 -  -  -  -  	
  657 D1:B000 E5 -  -  -  	push hl
  658 D1:B001 67 -  -  -  	ld h,a;height
  659 D1:B002 68 -  -  -  	ld l,b;width
  660 D1:B003 ED 6C -  -  	mlt hl;number of pixels
  661 D1:B005 -  -  -  -  	;rounds up to nearest multiple of 8
  662 D1:B005 2B -  -  -  	dec hl
  663 D1:B006 CB 3C -  -  	srl h
  664 D1:B008 CB 1D -  -  	rr l
  665 D1:B00A CB 3C -  -  	srl h
  666 D1:B00C CB 1D -  -  	rr l 
  667 D1:B00E CB 3C -  -  	srl h 
  668 D1:B010 CB 1D -  -  	rr l 
  669 D1:B012 23 -  -  -  	inc hl 
  670 D1:B013 C1 -  -  -  	pop bc ;initial hl location
  671 D1:B014 -  -  -  -  	;add number of bytes to skip 
  672 D1:B014 09 -  -  -  	add hl,bc ;HL points to start of color data 
  673 D1:B015 -  -  -  -  	
  674 D1:B015 -  -  -  -  	
  675 D1:B015 -  -  -  -  	
  676 D1:B015 -  -  -  -  sdcomp_no_alpha_2_skip:
  677 D1:B015 -  -  -  -  
  678 D1:B015 -  -  -  -  	
  679 D1:B015 -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  680 D1:B015 -  -  -  -  
  681 D1:B015 -  -  -  -  	
  682 D1:B015 47 -  -  -  	ld b,a ;save for after
  683 D1:B016 -  -  -  -  	;GET LOCAL PALETTE DATA
  684 D1:B016 -  -  -  -  	
  685 D1:B016 37 -  -  -  	scf 
  686 D1:B017 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  687 D1:B017 D2 21 B0 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  688 D1:B01B -  -  -  -  	
  689 D1:B01B 7E -  -  -  	ld a,(hl);color data 
  690 D1:B01C 32 02 AF D1 	ld (sdcomp_indexed_color_data_1),a 
  691 D1:B020 23 -  -  -  	inc hl 
  692 D1:B021 -  -  -  -  	
  693 D1:B021 -  -  -  -  sdcomp_1bpc_1_skip:	
  694 D1:B021 -  -  -  -  
  695 D1:B021 -  -  -  -  
  696 D1:B021 37 -  -  -  	scf 
  697 D1:B022 -  -  -  -  sdcomp_2bpc_1 .equ $ 
  698 D1:B022 D2 2C B0 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  699 D1:B026 -  -  -  -  	
  700 D1:B026 7E -  -  -  	ld a,(hl);color data 
  701 D1:B027 32 F6 AE D1 	ld (sdcomp_indexed_color_data_2),a 
  702 D1:B02B 23 -  -  -  	inc hl 
  703 D1:B02C -  -  -  -  	
  704 D1:B02C -  -  -  -  sdcomp_2bpc_1_skip:	
  705 D1:B02C -  -  -  -  
  706 D1:B02C -  -  -  -  
  707 D1:B02C 37 -  -  -  	scf 
  708 D1:B02D -  -  -  -  sdcomp_3bpc_1 .equ $ 
  709 D1:B02D DA 3D B0 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  710 D1:B031 -  -  -  -  	
  711 D1:B031 7E -  -  -  	ld a,(hl);color data 
  712 D1:B032 32 E4 AE D1 	ld (sdcomp_indexed_color_data_3),a 
  713 D1:B036 23 -  -  -  	inc hl 
  714 D1:B037 7E -  -  -  	ld a,(hl);color data 
  715 D1:B038 32 D8 AE D1 	ld (sdcomp_indexed_color_data_4),a 
  716 D1:B03C 23 -  -  -  	inc hl 
  717 D1:B03D -  -  -  -  	
  718 D1:B03D -  -  -  -  sdcomp_3bpc_1_skip:	
  719 D1:B03D -  -  -  -  
  720 D1:B03D -  -  -  -  	
  721 D1:B03D D5 -  -  -  	push de ;loops/line data location
  722 D1:B03E EB -  -  -  	ex de,hl
  723 D1:B03F 78 -  -  -  	ld a,b
  724 D1:B040 01 00 00 00 	ld bc,0
  725 D1:B044 4F -  -  -  	ld c,a;height 
  726 D1:B045 09 -  -  -  	add hl,bc
  727 D1:B046 EB -  -  -  	ex de,hl;de points to data write location
  728 D1:B047 -  -  -  -  	
  729 D1:B047 -  -  -  -  	
  730 D1:B047 D9 -  -  -  	exx;in to shadow
  731 D1:B048 D1 -  -  -  	pop de 
  732 D1:B049 E1 -  -  -  	pop hl ;alpha data stored from earlier
  733 D1:B04A 0E 80 -  -  	ld c,%10000000;alpha mask
  734 D1:B04C D9 -  -  -  	exx;out 
  735 D1:B04D 0E 80 -  -  	ld c,%10000000;color mask
  736 D1:B04F -  -  -  -  	
  737 D1:B04F -  -  -  -  	;HL now points to pixel color data 
  738 D1:B04F -  -  -  -  	;HL' points to pixel alpha data 
  739 D1:B04F -  -  -  -  	;C holds color mask
  740 D1:B04F -  -  -  -  	;C' holds alpha mask
  741 D1:B04F -  -  -  -  	;DE' holds loops/line output data location
  742 D1:B04F -  -  -  -  	;DE holds main data output location
  743 D1:B04F -  -  -  -  	;A holds height
  744 D1:B04F -  -  -  -  	;A' holds bits remaining in row
  745 D1:B04F -  -  -  -  
  746 D1:B04F -  -  -  -  
  747 D1:B04F 37 -  -  -  	scf 
  748 D1:B050 -  -  -  -  sdcomp_flip_setup .equ $
  749 D1:B050 DA 60 B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  750 D1:B054 -  -  -  -  
  751 D1:B054 -  -  -  -  	
  752 D1:B054 2B -  -  -  	dec hl;dec color pointer
  753 D1:B055 0E 01 -  -  	ld c, %00000001
  754 D1:B057 D9 -  -  -  	exx;to shadow 
  755 D1:B058 2B -  -  -  	dec hl;dec alpha pointer
  756 D1:B059 0E 01 -  -  	ld c, %00000001;alpha mask
  757 D1:B05B CD 27 AF D1 	call sdcomp_traverse_initial
  758 D1:B05F D9 -  -  -  	exx ;out of shadow 
  759 D1:B060 -  -  -  -  	
  760 D1:B060 -  -  -  -  	
  761 D1:B060 -  -  -  -  
  762 D1:B060 -  -  -  -  	;TODO jump to BG routine here
  763 D1:B060 -  -  -  -  	;END SETUP ======================================================================================================
  764 D1:B060 -  -  -  -  	
  765 D1:B060 -  -  -  -  	
  766 D1:B060 -  -  -  -  sdcomp_find_gap_length:
  767 D1:B060 -  -  -  -  	
  768 D1:B060 -  -  -  -  	
  769 D1:B060 -  -  -  -  	
  770 D1:B060 -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  771 D1:B060 -  -  -  -  ;this will occur if:
  772 D1:B060 -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  773 D1:B060 -  -  -  -  ;
  774 D1:B060 -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  775 D1:B060 -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  776 D1:B060 -  -  -  -  	
  777 D1:B060 D9 -  -  -  	exx ;to shadow
  778 D1:B061 -  -  -  -  	
  779 D1:B061 -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  780 D1:B061 06 00 -  -  	ld b,0;00 pairs found 
  781 D1:B063 3E 00 -  -  	ld a,0 ;reset
  782 D1:B065 32 62 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  783 D1:B069 -  -  -  -  
  784 D1:B069 -  -  -  -  sdcomp_find_gap_length_loop:
  785 D1:B069 -  -  -  -  
  786 D1:B069 37 -  -  -  	scf 
  787 D1:B06A -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  788 D1:B06A DA 93 B0 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  789 D1:B06E -  -  -  -  	
  790 D1:B06E -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  791 D1:B06E -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  792 D1:B06E 3E 00 -  -  	ld a,0
  793 D1:B070 80 -  -  -  	add a,b 
  794 D1:B071 -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  795 D1:B071 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  796 D1:B072 47 -  -  -  	ld b,a 
  797 D1:B073 3E 00 -  -  	ld a,%00000000 ;nop 
  798 D1:B075 32 71 B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  799 D1:B079 3E DA -  -  	ld a,%11011010;jp c
  800 D1:B07B 32 E0 AD D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  801 D1:B07F 32 6A B0 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  802 D1:B083 -  -  -  -  	
  803 D1:B083 37 -  -  -  	scf
  804 D1:B084 -  -  -  -  sdcomp_flip_traverse .equ $
  805 D1:B084 D4 19 AF D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  806 D1:B088 -  -  -  -  		
  807 D1:B088 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  808 D1:B088 3A F8 B0 D1 	ld a,(sdcomp_loops_per_line_counter)
  809 D1:B08C 12 -  -  -  	ld (de),a ;write loops/line data 
  810 D1:B08D 13 -  -  -  	inc de
  811 D1:B08E -  -  -  -  	
  812 D1:B08E -  -  -  -  	
  813 D1:B08E 37 -  -  -  	scf 
  814 D1:B08F -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  815 D1:B08F D2 61 B1 D1 	jp nc,sdcomp_end
  816 D1:B093 -  -  -  -  
  817 D1:B093 -  -  -  -  	
  818 D1:B093 -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  819 D1:B093 CD 38 AE D1 	call sdcomp_get_next_alpha_pair
  820 D1:B097 -  -  -  -  	;call write_a_to_ram
  821 D1:B097 04 -  -  -  	inc b 
  822 D1:B098 -  -  -  -  
  823 D1:B098 -  -  -  -  	;push af ;TEST
  824 D1:B098 -  -  -  -  	;ld a,$AB;TEST
  825 D1:B098 -  -  -  -  	;call write_a_to_ram
  826 D1:B098 -  -  -  -  	
  827 D1:B098 -  -  -  -  	;call write_a_to_ram
  828 D1:B098 -  -  -  -  	;pop af ;TEST
  829 D1:B098 -  -  -  -  	
  830 D1:B098 B7 -  -  -  	or a
  831 D1:B099 CA 69 B0 D1 	jp z,sdcomp_find_gap_length_loop
  832 D1:B09D -  -  -  -  	
  833 D1:B09D -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  834 D1:B09D -  -  -  -  	
  835 D1:B09D F5 -  -  -  	push af; save leading pixel alpha data 
  836 D1:B09E -  -  -  -  	;B holds number of 00 pairs + 1
  837 D1:B09E -  -  -  -  	
  838 D1:B09E -  -  -  -  	;ld a,$AA ;test
  839 D1:B09E -  -  -  -  	;call write_a_to_ram
  840 D1:B09E -  -  -  -  	;ld a,b ;test
  841 D1:B09E -  -  -  -  	;call write_a_to_ram
  842 D1:B09E -  -  -  -  	
  843 D1:B09E -  -  -  -  	
  844 D1:B09E -  -  -  -  	
  845 D1:B09E -  -  -  -  	;Write gap length data to output
  846 D1:B09E 78 -  -  -  	ld a,b 
  847 D1:B09F D9 -  -  -  	exx;out of shadow 
  848 D1:B0A0 12 -  -  -  	ld (de),a;GAP LENGTH 
  849 D1:B0A1 13 -  -  -  	inc de 
  850 D1:B0A2 D9 -  -  -  	exx;into shadow 	
  851 D1:B0A3 -  -  -  -  	
  852 D1:B0A3 -  -  -  -  	
  853 D1:B0A3 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  854 D1:B0A3 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  855 D1:B0A4 -  -  -  -  	
  856 D1:B0A4 37 -  -  -  	scf 
  857 D1:B0A5 -  -  -  -  sdcomp_fast_1 .equ $ 
  858 D1:B0A5 D2 AF B0 D1 	jp nc, sdcomp_ldir_start 
  859 D1:B0A9 -  -  -  -  	
  860 D1:B0A9 D9 -  -  -  	exx;out of shadow
  861 D1:B0AA CD 78 AF D1 	call sdcomp_write_leading_or_end_pixels
  862 D1:B0AE D9 -  -  -  	exx;into shadow 
  863 D1:B0AF -  -  -  -  	
  864 D1:B0AF -  -  -  -  
  865 D1:B0AF -  -  -  -  	
  866 D1:B0AF -  -  -  -  ;LDIR ==============================================================================================================	
  867 D1:B0AF -  -  -  -  	;Count number of 11 pairs for LDIR section
  868 D1:B0AF -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  869 D1:B0AF -  -  -  -  	;
  870 D1:B0AF -  -  -  -  	
  871 D1:B0AF -  -  -  -  	;If ending is 11 -> 00 
  872 D1:B0AF -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  873 D1:B0AF -  -  -  -  	;Will need to reduce b by 1 
  874 D1:B0AF -  -  -  -  	
  875 D1:B0AF -  -  -  -  	;If ending is 11 ->01/10
  876 D1:B0AF -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  877 D1:B0AF -  -  -  -  	
  878 D1:B0AF -  -  -  -  sdcomp_ldir_start:
  879 D1:B0AF -  -  -  -  
  880 D1:B0AF -  -  -  -  ;	ld a, %11010010 ;jp nc 
  881 D1:B0AF -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  882 D1:B0AF -  -  -  -  
  883 D1:B0AF 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  884 D1:B0B1 -  -  -  -  sdcomp_ldir_loop:
  885 D1:B0B1 CD 38 AE D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  886 D1:B0B5 04 -  -  -  	inc b 
  887 D1:B0B6 -  -  -  -  	
  888 D1:B0B6 -  -  -  -  	;push af 
  889 D1:B0B6 -  -  -  -  	;ld a,$DE 
  890 D1:B0B6 -  -  -  -  	;call write_a_to_ram
  891 D1:B0B6 -  -  -  -  	;pop af
  892 D1:B0B6 -  -  -  -  	;call write_a_to_ram
  893 D1:B0B6 -  -  -  -  	
  894 D1:B0B6 -  -  -  -  ;	scf 
  895 D1:B0B6 -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  896 D1:B0B6 -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  897 D1:B0B6 -  -  -  -  	
  898 D1:B0B6 EE FF -  -  	xor %11111111 ;flip all bits  (CPL does not set flags :(  )
  899 D1:B0B8 CA B1 B0 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  900 D1:B0BC 2F -  -  -  	cpl ; flip back 
  901 D1:B0BD -  -  -  -  sdcomp_ldir_loop_end:
  902 D1:B0BD -  -  -  -  
  903 D1:B0BD -  -  -  -  	
  904 D1:B0BD -  -  -  -  	;at this point b holds # 11 pairs +1 
  905 D1:B0BD 37 -  -  -  	scf 
  906 D1:B0BE -  -  -  -  sdcomp_fast_2 .equ $ 
  907 D1:B0BE D2 D9 B0 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  908 D1:B0C2 -  -  -  -  
  909 D1:B0C2 -  -  -  -  	
  910 D1:B0C2 -  -  -  -  	
  911 D1:B0C2 05 -  -  -  	dec b ;b holds # 11 pairs 
  912 D1:B0C3 CA EC B0 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  913 D1:B0C7 B7 -  -  -  	or a
  914 D1:B0C8 C2 D9 B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  915 D1:B0CC -  -  -  -  	
  916 D1:B0CC -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  917 D1:B0CC -  -  -  -  	
  918 D1:B0CC -  -  -  -  	;ld a,$DF
  919 D1:B0CC -  -  -  -  	;call write_a_to_ram
  920 D1:B0CC -  -  -  -  	
  921 D1:B0CC -  -  -  -  	;must add 1 to next gap length, have already read first 00
  922 D1:B0CC -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  923 D1:B0CC 3E 01 -  -  	ld a,1;start w 1 gap len
  924 D1:B0CE 32 62 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  925 D1:B0D2 3E FF -  -  	ld a,$ff;ending pixels 11
  926 D1:B0D4 -  -  -  -  	
  927 D1:B0D4 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  928 D1:B0D5 CA EC B0 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  929 D1:B0D9 -  -  -  -  	;b holds ldir length 
  930 D1:B0D9 -  -  -  -  	
  931 D1:B0D9 -  -  -  -  
  932 D1:B0D9 -  -  -  -  ;b holds ldir length, a holds ending pixels
  933 D1:B0D9 -  -  -  -  sdcomp_ldir_write:
  934 D1:B0D9 -  -  -  -  
  935 D1:B0D9 -  -  -  -  	;b holds 11 pairs found 
  936 D1:B0D9 -  -  -  -  	
  937 D1:B0D9 -  -  -  -  	;push af;TEST
  938 D1:B0D9 -  -  -  -  	;ld a,$DA 
  939 D1:B0D9 -  -  -  -  	;call write_a_to_ram
  940 D1:B0D9 -  -  -  -  	;ld a,b 
  941 D1:B0D9 -  -  -  -  	;call write_a_to_ram
  942 D1:B0D9 -  -  -  -  	;pop af ;TEST
  943 D1:B0D9 -  -  -  -  
  944 D1:B0D9 F5 -  -  -  	push af;save ending pixels
  945 D1:B0DA 78 -  -  -  	ld a,b
  946 D1:B0DB D9 -  -  -  	exx ;out 
  947 D1:B0DC 12 -  -  -  	ld (de),a;write ldir length
  948 D1:B0DD 13 -  -  -  	inc de 
  949 D1:B0DE CD 64 AF D1 	call sdcomp_write_ldir_data_loop
  950 D1:B0E2 -  -  -  -  
  951 D1:B0E2 F1 -  -  -  	pop af;return ending pixels
  952 D1:B0E3 -  -  -  -  	
  953 D1:B0E3 37 -  -  -  	scf
  954 D1:B0E4 -  -  -  -  sdcomp_fast_3 .equ $ 
  955 D1:B0E4 D2 F7 B0 D1 	jp nc,sdcomp_inc_loops_per_line ;skip ending pixels
  956 D1:B0E8 -  -  -  -  	
  957 D1:B0E8 C3 F3 B0 D1 	jp sdcomp_write_end_pixels
  958 D1:B0EC -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  959 D1:B0EC -  -  -  -  
  960 D1:B0EC -  -  -  -  
  961 D1:B0EC -  -  -  -  	;push af ;TEST
  962 D1:B0EC -  -  -  -  	;ld a,$DB
  963 D1:B0EC -  -  -  -  	;call write_a_to_ram
  964 D1:B0EC -  -  -  -  	;pop af ;TEST
  965 D1:B0EC -  -  -  -  	;call write_a_to_ram
  966 D1:B0EC -  -  -  -  
  967 D1:B0EC F5 -  -  -  	push af;save end pixels
  968 D1:B0ED -  -  -  -  	
  969 D1:B0ED D9 -  -  -  	exx;out of shadow
  970 D1:B0EE 3E 00 -  -  	ld a,0
  971 D1:B0F0 12 -  -  -  	ld (de),a ;write 0 as ldir length
  972 D1:B0F1 13 -  -  -  	inc de 
  973 D1:B0F2 F1 -  -  -  	pop af;return ending pixels
  974 D1:B0F3 -  -  -  -  
  975 D1:B0F3 -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  976 D1:B0F3 -  -  -  -  
  977 D1:B0F3 -  -  -  -  sdcomp_write_end_pixels:
  978 D1:B0F3 -  -  -  -  ;not in shadow
  979 D1:B0F3 -  -  -  -  	
  980 D1:B0F3 -  -  -  -  	;test
  981 D1:B0F3 -  -  -  -  	;push af 
  982 D1:B0F3 -  -  -  -  	;ld a,$E0
  983 D1:B0F3 -  -  -  -  	;call write_a_to_ram
  984 D1:B0F3 -  -  -  -  	;pop af 
  985 D1:B0F3 -  -  -  -  	
  986 D1:B0F3 -  -  -  -  
  987 D1:B0F3 CD 78 AF D1 	call sdcomp_write_leading_or_end_pixels
  988 D1:B0F7 -  -  -  -  	
  989 D1:B0F7 -  -  -  -  	
  990 D1:B0F7 -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  991 D1:B0F7 -  -  -  -  	;ld a,2
  992 D1:B0F7 -  -  -  -  	;dec a 
  993 D1:B0F7 -  -  -  -  	;jp z,sdcomp_end
  994 D1:B0F7 -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  995 D1:B0F7 -  -  -  -  
  996 D1:B0F7 -  -  -  -  sdcomp_inc_loops_per_line:	
  997 D1:B0F7 -  -  -  -  	;INC LOOP/LINE count
  998 D1:B0F7 -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
  999 D1:B0F7 3E 00 -  -  	ld a,0;inc number of loops
 1000 D1:B0F9 3C -  -  -  	inc a 
 1001 D1:B0FA 32 F8 B0 D1 	ld (sdcomp_loops_per_line_counter),a
 1002 D1:B0FE -  -  -  -  
 1003 D1:B0FE -  -  -  -  
 1004 D1:B0FE -  -  -  -  	
 1005 D1:B0FE -  -  -  -  	
 1006 D1:B0FE -  -  -  -  	;Check the timer to see if we need to begin rendering next frame 
 1007 D1:B0FE -  -  -  -  	;1090 cycles @ 32768hz ~= 1 frame (1/30s)
 1008 D1:B0FE -  -  -  -  	;Should stop decompressions at 1000 cycles?
 1009 D1:B0FE -  -  -  -  	; = %00000011, 11101000
 1010 D1:B0FE -  -  -  -  sdcomp_clock_check_loop:
 1011 D1:B0FE 3A 01 00 F2 	ld a,($F20001);128hz clock
 1012 D1:B102 FE 03 -  -  	cp %00000011 ;check if reached 3 
 1013 D1:B104 DA 60 B0 D1 	jp c,sdcomp_find_gap_length ;msb <= 2, can continue  
 1014 D1:B108 3A 00 00 F2 	ld a,($F20000);32768hz clock
 1015 D1:B10C FE E8 -  -  	cp %11101000;check if reached value 
 1016 D1:B10E DA 60 B0 D1 	jp c,sdcomp_find_gap_length ;msb = 3 and lsb < value, can continue
 1017 D1:B112 -  -  -  -  	
 1018 D1:B112 -  -  -  -  	;Past clock threshold, need to stop decompressions
 1019 D1:B112 -  -  -  -  
 1020 D1:B112 -  -  -  -  
 1021 D1:B112 -  -  -  -  	;TODO can prob not need to save (a) register
 1022 D1:B112 -  -  -  -  sdcomp_interrupt:
 1023 D1:B112 -  -  -  -  
 1024 D1:B112 -  -  -  -  
 1025 D1:B112 -  -  -  -  	;not in shadow 
 1026 D1:B112 22 3E B1 D1 	ld (sdcomp_cont_hl),hl 
 1027 D1:B116 EB -  -  -  	ex de,hl
 1028 D1:B117 22 42 B1 D1 	ld (sdcomp_cont_de),hl 
 1029 D1:B11B C5 -  -  -  	push bc
 1030 D1:B11C E1 -  -  -  	pop hl
 1031 D1:B11D 22 46 B1 D1 	ld (sdcomp_cont_bc),hl
 1032 D1:B121 32 4A B1 D1 	ld (sdcomp_cont_a),a 
 1033 D1:B125 D9 -  -  -  	exx 
 1034 D1:B126 08 -  -  -  	ex af,af' ;'
 1035 D1:B127 22 4E B1 D1 	ld (sdcomp_cont_hlP),hl 
 1036 D1:B12B EB -  -  -  	ex de,hl
 1037 D1:B12C 22 52 B1 D1 	ld (sdcomp_cont_deP),hl 
 1038 D1:B130 C5 -  -  -  	push bc 
 1039 D1:B131 E1 -  -  -  	pop hl
 1040 D1:B132 22 56 B1 D1 	ld (sdcomp_cont_bcP),hl
 1041 D1:B136 32 5A B1 D1 	ld (sdcomp_cont_aP),a 
 1042 D1:B13A -  -  -  -  	
 1043 D1:B13A 3E 01 -  -  	ld a,1 ;Return 1 if interrupted
 1044 D1:B13C C9 -  -  -  	ret 
 1045 D1:B13D -  -  -  -  	
 1046 D1:B13D -  -  -  -  sdcomp_continue:
 1047 D1:B13D -  -  -  -  	;not in shadow 
 1048 D1:B13D -  -  -  -  sdcomp_cont_hl .equ $ + 1
 1049 D1:B13D 21 00 00 00 	ld hl,0
 1050 D1:B141 -  -  -  -  sdcomp_cont_de .equ $ + 1
 1051 D1:B141 11 00 00 00 	ld de,0
 1052 D1:B145 -  -  -  -  sdcomp_cont_bc .equ $ + 1
 1053 D1:B145 01 00 00 00 	ld bc,0
 1054 D1:B149 -  -  -  -  sdcomp_cont_a .equ $ + 1
 1055 D1:B149 3E 00 -  -  	ld a,0
 1056 D1:B14B D9 -  -  -  	exx 
 1057 D1:B14C 08 -  -  -  	ex af,af' ;'
 1058 D1:B14D -  -  -  -  sdcomp_cont_hlP .equ $ + 1
 1059 D1:B14D 21 00 00 00 	ld hl,0
 1060 D1:B151 -  -  -  -  sdcomp_cont_deP .equ $ + 1
 1061 D1:B151 11 00 00 00 	ld de,0
 1062 D1:B155 -  -  -  -  sdcomp_cont_bcP .equ $ + 1
 1063 D1:B155 01 00 00 00 	ld bc,0
 1064 D1:B159 -  -  -  -  sdcomp_cont_aP .equ $ + 1
 1065 D1:B159 3E 00 -  -  	ld a,0	
 1066 D1:B15B -  -  -  -  	
 1067 D1:B15B D9 -  -  -  	exx ;out of shadow 
 1068 D1:B15C 08 -  -  -  	ex af,af' ;'
 1069 D1:B15D -  -  -  -  
 1070 D1:B15D C3 60 B0 D1 	jp sdcomp_find_gap_length
 1071 D1:B161 -  -  -  -  
 1072 D1:B161 -  -  -  -  	
 1073 D1:B161 -  -  -  -  
 1074 D1:B161 -  -  -  -  sdcomp_end:
 1075 D1:B161 -  -  -  -  	
 1076 D1:B161 -  -  -  -  	;ld a,$69
 1077 D1:B161 -  -  -  -  	;call write_a_to_ram
 1078 D1:B161 -  -  -  -  	
 1079 D1:B161 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1080 D1:B163 32 8F B0 D1 	ld (sdcomp_end_reached_flag),a 
 1081 D1:B167 -  -  -  -  	
 1082 D1:B167 3E 00 -  -  	ld a,0 ;return 0 if finished decompressing 
 1083 D1:B169 C9 -  -  -  	ret 
 1084 D1:B16A -  -  -  -  
 1085 D1:B16A -  -  -  -  
 1086 D1:B16A -  -  -  -  ;bit orders
 1087 D1:B16A -  -  -  -  ;	noflip   flip 
 1088 D1:B16A -  -  -  -  ;4bpp 3210 	 0123
 1089 D1:B16A -  -  -  -  ;3bpp 210	 012
 1090 D1:B16A -  -  -  -  ;2bpp 10	 01
 1091 D1:B16A -  -  -  -  ;1bpp 0		 0
 1092 D1:B16A -  -  -  -  
 1093 D1:B16A -  -  -  -  
 1094 D1:B16A -  -  -  -  sdcomp_set_0bpc:
 1095 D1:B16A 3E DA -  -  	ld a,%11011010;jp c
 1096 D1:B16C 32 81 AE D1 	ld (sdcomp_0bpc),a
 1097 D1:B170 -  -  -  -  	
 1098 D1:B170 32 22 B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1099 D1:B174 32 2D B0 D1 	ld (sdcomp_3bpc_1),a 
 1100 D1:B178 -  -  -  -  	
 1101 D1:B178 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1102 D1:B17A 32 17 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1103 D1:B17E 3E 00 -  -  	ld a,%00000000
 1104 D1:B180 32 42 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1105 D1:B184 C9 -  -  -  	ret 
 1106 D1:B185 -  -  -  -  	
 1107 D1:B185 -  -  -  -  sdcomp_set_1bpc:
 1108 D1:B185 3E D2 -  -  	ld a,%11010010;jp nc
 1109 D1:B187 32 81 AE D1 	ld (sdcomp_0bpc),a
 1110 D1:B18B 3E DA -  -  	ld a,%11011010;jp c
 1111 D1:B18D 32 93 AE D1 	ld (sdcomp_1bpc),a
 1112 D1:B191 -  -  -  -  	
 1113 D1:B191 32 22 B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1114 D1:B195 32 2D B0 D1 	ld (sdcomp_3bpc_1),a 
 1115 D1:B199 -  -  -  -  	
 1116 D1:B199 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1117 D1:B19B 32 17 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1118 D1:B19F -  -  -  -  	
 1119 D1:B19F -  -  -  -  	
 1120 D1:B19F 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1121 D1:B1A1 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1122 D1:B1A5 -  -  -  -  	
 1123 D1:B1A5 3E 80 -  -  	ld a,%10000000
 1124 D1:B1A7 32 42 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1125 D1:B1AB -  -  -  -  	
 1126 D1:B1AB C9 -  -  -  	ret 
 1127 D1:B1AC -  -  -  -  
 1128 D1:B1AC -  -  -  -  sdcomp_set_2bpc:
 1129 D1:B1AC 3E D2 -  -  	ld a,%11010010;jp nc
 1130 D1:B1AE 32 81 AE D1 	ld (sdcomp_0bpc),a
 1131 D1:B1B2 32 93 AE D1 	ld (sdcomp_1bpc),a
 1132 D1:B1B6 -  -  -  -  	
 1133 D1:B1B6 3E DA -  -  	ld a,%11011010;jp c
 1134 D1:B1B8 32 A5 AE D1 	ld (sdcomp_2bpc),a
 1135 D1:B1BC -  -  -  -  	
 1136 D1:B1BC 32 2D B0 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1137 D1:B1C0 -  -  -  -  	
 1138 D1:B1C0 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1139 D1:B1C2 32 17 B0 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1140 D1:B1C6 32 22 B0 D1 	ld (sdcomp_2bpc_1),a 
 1141 D1:B1CA -  -  -  -  	
 1142 D1:B1CA 37 -  -  -  	scf 
 1143 D1:B1CB -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1144 D1:B1CB D2 DC B1 D1 	jp nc, sdcomp_2bpc_flip
 1145 D1:B1CF -  -  -  -  	
 1146 D1:B1CF 3E CB -  -  	ld a,%11001011 ;set 1,e
 1147 D1:B1D1 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1148 D1:B1D5 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1149 D1:B1D7 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1150 D1:B1DB C9 -  -  -  	ret 
 1151 D1:B1DC -  -  -  -  	
 1152 D1:B1DC -  -  -  -  sdcomp_2bpc_flip:
 1153 D1:B1DC 3E CB -  -  	ld a,%11001011 ;set 1,e
 1154 D1:B1DE 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1155 D1:B1E2 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1156 D1:B1E4 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1157 D1:B1E8 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1158 D1:B1EA 32 3B AF D1 	ld (sdcomp_traverse_2bpp),a 
 1159 D1:B1EE 3E C0 -  -  	ld a,%11000000
 1160 D1:B1F0 32 42 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1161 D1:B1F4 C9 -  -  -  	ret 
 1162 D1:B1F5 -  -  -  -  
 1163 D1:B1F5 -  -  -  -  
 1164 D1:B1F5 -  -  -  -  sdcomp_set_3bpc:
 1165 D1:B1F5 -  -  -  -  	
 1166 D1:B1F5 3E D2 -  -  	ld a,%11010010;jp nc
 1167 D1:B1F7 32 81 AE D1 	ld (sdcomp_0bpc),a
 1168 D1:B1FB 32 93 AE D1 	ld (sdcomp_1bpc),a
 1169 D1:B1FF 32 A5 AE D1 	ld (sdcomp_2bpc),a
 1170 D1:B203 -  -  -  -  	
 1171 D1:B203 3E DA -  -  	ld a,%11011010;jp c
 1172 D1:B205 32 B7 AE D1 	ld (sdcomp_3bpc),a
 1173 D1:B209 -  -  -  -  	
 1174 D1:B209 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1175 D1:B20B 32 17 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1176 D1:B20F 32 22 B0 D1 	ld (sdcomp_2bpc_1),a 
 1177 D1:B213 32 2D B0 D1 	ld (sdcomp_3bpc_1),a 
 1178 D1:B217 -  -  -  -  	
 1179 D1:B217 37 -  -  -  	scf 
 1180 D1:B218 -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1181 D1:B218 D2 2F B2 D1 	jp nc, sdcomp_3bpc_flip	
 1182 D1:B21C -  -  -  -  	
 1183 D1:B21C 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1184 D1:B21E 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1185 D1:B222 3E CB -  -  	ld a,%11001011 ;set 1,e
 1186 D1:B224 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1187 D1:B228 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1188 D1:B22A 32 B5 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1189 D1:B22E C9 -  -  -  	ret 
 1190 D1:B22F -  -  -  -  	
 1191 D1:B22F -  -  -  -  sdcomp_3bpc_flip:
 1192 D1:B22F 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1193 D1:B231 32 B5 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1194 D1:B235 3E CB -  -  	ld a,%11001011 ;set 1,e
 1195 D1:B237 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1196 D1:B23B 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1197 D1:B23D 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1198 D1:B241 -  -  -  -  	
 1199 D1:B241 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1200 D1:B243 32 3B AF D1 	ld (sdcomp_traverse_2bpp),a 
 1201 D1:B247 32 3D AF D1 	ld (sdcomp_traverse_3bpp),a 
 1202 D1:B24B 3E E0 -  -  	ld a,%11100000
 1203 D1:B24D 32 42 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1204 D1:B251 -  -  -  -  	
 1205 D1:B251 C9 -  -  -  	ret 
 1206 D1:B252 -  -  -  -  
 1207 D1:B252 -  -  -  -  sdcomp_set_4bpc:
 1208 D1:B252 3E DA -  -  	ld a,%11011010;jp c
 1209 D1:B254 -  -  -  -  
 1210 D1:B254 32 17 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1211 D1:B258 32 22 B0 D1 	ld (sdcomp_2bpc_1),a 
 1212 D1:B25C 32 2D B0 D1 	ld (sdcomp_3bpc_1),a 
 1213 D1:B260 -  -  -  -  	
 1214 D1:B260 37 -  -  -  	scf 
 1215 D1:B261 -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1216 D1:B261 D2 7E B2 D1 	jp nc, sdcomp_4bpc_flip	
 1217 D1:B265 3E DB -  -  	ld a,%11011011 ;set 3,e
 1218 D1:B267 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1219 D1:B26B 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1220 D1:B26D 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1221 D1:B271 3E CB -  -  	ld a,%11001011 ;set 1,e
 1222 D1:B273 32 B5 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1223 D1:B277 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1224 D1:B279 32 C7 AE D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1225 D1:B27D C9 -  -  -  	ret 
 1226 D1:B27E -  -  -  -  sdcomp_4bpc_flip:
 1227 D1:B27E 3E DB -  -  	ld a,%11011011 ;set 3,e
 1228 D1:B280 32 C7 AE D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1229 D1:B284 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1230 D1:B286 32 B5 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1231 D1:B28A 3E CB -  -  	ld a,%11001011 ;set 1,e
 1232 D1:B28C 32 A3 AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1233 D1:B290 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1234 D1:B292 32 91 AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1235 D1:B296 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1236 D1:B298 32 3B AF D1 	ld (sdcomp_traverse_2bpp),a 
 1237 D1:B29C 32 3D AF D1 	ld (sdcomp_traverse_3bpp),a 
 1238 D1:B2A0 32 3F AF D1 	ld (sdcomp_traverse_4bpp),a 
 1239 D1:B2A4 -  -  -  -  	
 1240 D1:B2A4 3E F0 -  -  	ld a,%11110000
 1241 D1:B2A6 32 42 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1242 D1:B2AA -  -  -  -  	
 1243 D1:B2AA C9 -  -  -  	ret 
 1244 D1:B2AB -  -  -  -  	
 1245 D1:B2AB -  -  -  -  	
 1246 D1:B2AB -  -  -  -  sdcomp_set_noalpha:
 1247 D1:B2AB 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1248 D1:B2AD 32 02 AE D1 	ld (sdcomp_no_alpha_1),a 
 1249 D1:B2B1 3E DA -  -  	ld a,%11011010;jp c
 1250 D1:B2B3 32 FC AF D1 	ld (sdcomp_no_alpha_2),a 
 1251 D1:B2B7 32 33 AF D1 	ld (sdcomp_no_alpha_3),a 
 1252 D1:B2BB C9 -  -  -  	ret
 1253 D1:B2BC -  -  -  -  	
 1254 D1:B2BC -  -  -  -  sdcomp_reset_noalpha:
 1255 D1:B2BC -  -  -  -  
 1256 D1:B2BC 3E DA -  -  	ld a,%11011010;jp c
 1257 D1:B2BE 32 02 AE D1 	ld (sdcomp_no_alpha_1),a 
 1258 D1:B2C2 3E D2 -  -  	ld a, %11010010 ;jp nc
 1259 D1:B2C4 32 FC AF D1 	ld (sdcomp_no_alpha_2),a 
 1260 D1:B2C8 3E CA -  -  	ld a, %11001010 ;jp z
 1261 D1:B2CA 32 33 AF D1 	ld (sdcomp_no_alpha_3),a 
 1262 D1:B2CE C9 -  -  -  	ret
 1263 D1:B2CF -  -  -  -  
 1264 D1:B2CF -  -  -  -  
 1265 D1:B2CF -  -  -  -  sdcomp_set_offset:
 1266 D1:B2CF 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1267 D1:B2D1 32 2A AE D1 	ld (sdcomp_offset_1),a 
 1268 D1:B2D5 32 EE AD D1 	ld (sdcomp_bit_offset),a 
 1269 D1:B2D9 3E 04 -  -  	ld a,%00000100 ;inc b 
 1270 D1:B2DB 32 E4 AF D1 	ld (sdcomp_offset_2),a 
 1271 D1:B2DF -  -  -  -  	
 1272 D1:B2DF C9 -  -  -  	ret 
 1273 D1:B2E0 -  -  -  -  
 1274 D1:B2E0 -  -  -  -  sdcomp_reset_offset:
 1275 D1:B2E0 3E DA -  -  	ld a,%11011010;jp c
 1276 D1:B2E2 32 2A AE D1 	ld (sdcomp_offset_1),a 
 1277 D1:B2E6 32 EE AD D1 	ld (sdcomp_bit_offset),a 
 1278 D1:B2EA 3E 00 -  -  	ld a,%00000000 ;nop
 1279 D1:B2EC 32 E4 AF D1 	ld (sdcomp_offset_2),a 
 1280 D1:B2F0 C9 -  -  -  	ret 
 1281 D1:B2F1 -  -  -  -  	
 1282 D1:B2F1 -  -  -  -  sdcomp_set_flip:
 1283 D1:B2F1 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1284 D1:B2F3 32 D9 AD D1 	ld (sdcomp_flip_bitstream),a
 1285 D1:B2F7 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1286 D1:B2F9 32 DB AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1287 D1:B2FD 3E DC -  -  	ld a, %11011100 ;call c 
 1288 D1:B2FF 32 84 B0 D1 	ld (sdcomp_flip_traverse),a 
 1289 D1:B303 -  -  -  -  	
 1290 D1:B303 3E DA -  -  	ld a,%11011010;jp c
 1291 D1:B305 32 CB B1 D1 	ld (sdcomp_flip_2bpc),a
 1292 D1:B309 32 18 B2 D1 	ld (sdcomp_flip_3bpc),a
 1293 D1:B30D 32 61 B2 D1 	ld (sdcomp_flip_4bpc),a
 1294 D1:B311 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1295 D1:B313 32 50 B0 D1 	ld (sdcomp_flip_setup),a 
 1296 D1:B317 -  -  -  -  	
 1297 D1:B317 C9 -  -  -  	ret 
 1298 D1:B318 -  -  -  -  
 1299 D1:B318 -  -  -  -  sdcomp_reset_flip:
 1300 D1:B318 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1301 D1:B31A 32 D9 AD D1 	ld (sdcomp_flip_bitstream),a
 1302 D1:B31E 3E 23 -  -  	ld a, %00100011 ;inc hl 
 1303 D1:B320 32 DB AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1304 D1:B324 3E D4 -  -  	ld a, %11010100 ;call nc 
 1305 D1:B326 32 84 B0 D1 	ld (sdcomp_flip_traverse),a 
 1306 D1:B32A -  -  -  -  	
 1307 D1:B32A 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1308 D1:B32C 32 CB B1 D1 	ld (sdcomp_flip_2bpc),a
 1309 D1:B330 32 18 B2 D1 	ld (sdcomp_flip_3bpc),a
 1310 D1:B334 32 61 B2 D1 	ld (sdcomp_flip_4bpc),a
 1311 D1:B338 3E DA -  -  	ld a,%11011010;jp c
 1312 D1:B33A 32 50 B0 D1 	ld (sdcomp_flip_setup),a 
 1313 D1:B33E C9 -  -  -  	ret 
 1314 D1:B33F -  -  -  -  
 1315 D1:B33F -  -  -  -  
 1316 D1:B33F -  -  -  -  sdcomp_set_fast:
 1317 D1:B33F 3E DA -  -  	ld a,%11011010;jp c
 1318 D1:B341 32 A5 B0 D1 	ld(sdcomp_fast_1),a 
 1319 D1:B345 32 BE B0 D1 	ld(sdcomp_fast_2),a 
 1320 D1:B349 32 E4 B0 D1 	ld(sdcomp_fast_3),a 
 1321 D1:B34D -  -  -  -  	
 1322 D1:B34D C9 -  -  -  	ret 
 1323 D1:B34E -  -  -  -  
 1324 D1:B34E -  -  -  -  sdcomp_reset_fast:
 1325 D1:B34E 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1326 D1:B350 32 A5 B0 D1 	ld(sdcomp_fast_1),a 
 1327 D1:B354 32 BE B0 D1 	ld(sdcomp_fast_2),a 
 1328 D1:B358 32 E4 B0 D1 	ld(sdcomp_fast_3),a 
 1329 D1:B35C -  -  -  -  	
 1330 D1:B35C C9 -  -  -  	ret 
 1331 D1:B35D -  -  -  -  
 1332 D1:B35D -  -  -  -  
 1333 D1:B35D -  -  -  -  
 1334 D1:B35D -  -  -  -  
 1335 D1:B35D -  -  -  -  
 1336 D1:B35D -  -  -  -  
Listing for file "ascent.asm"
  289 D1:B35D -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B35D -  -  -  -  
    2 D1:B35D -  -  -  -  FGMaxSpriteHeight .equ 120
    3 D1:B35D -  -  -  -  
    4 D1:B35D -  -  -  -  draw_mg:
    5 D1:B35D 2A 56 AA D1 		ld hl,(draw_buffer)
    6 D1:B361 22 3D B4 D1 	ld (dfgs_vram_top_1),hl
    7 D1:B365 22 DD B4 D1 	ld (dfgs_vram_top_2),hl
    8 D1:B369 01 00 96 00 	ld bc,160*240
    9 D1:B36D 09 -  -  -  	add hl,bc
   10 D1:B36E 22 95 B4 D1 	ld (dfgs_vram_bottom_1),hl 
   11 D1:B372 22 B8 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   12 D1:B376 22 2A B5 D1 	ld (dfgs_vram_bottom_3),hl 
   13 D1:B37A 22 4D B5 D1 	ld (dfgs_vram_bottom_4),hl 
   14 D1:B37E -  -  -  -  	
   15 D1:B37E 2A 50 AA D1 	ld hl,(cam_pos)
   16 D1:B382 CB 3C -  -  	srl h ;div by 2
   17 D1:B384 CB 1D -  -  	rr l 
   18 D1:B386 -  -  -  -  	
   19 D1:B386 01 EF 00 00 	ld bc,239
   20 D1:B38A 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   21 D1:B38B 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   22 D1:B38C 32 0E B4 D1 	ld (dfgs_cam_height_1),a
   23 D1:B390 32 7C B4 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   24 D1:B394 32 10 B5 D1 	ld (dfgs_cam_height_3),a
   25 D1:B398 -  -  -  -  		
   26 D1:B398 ED 44 -  -  	neg 
   27 D1:B39A 32 32 B4 D1 	ld (dfgs_viewport_to_upper_frame),a
   28 D1:B39E -  -  -  -  	
   29 D1:B39E 01 00 00 00 	ld bc,0
   30 D1:B3A2 4C -  -  -  	ld c,h;msb ccam pos 
   31 D1:B3A3 0C -  -  -  	inc c 
   32 D1:B3A4 -  -  -  -  	;ld hl,FG_Data_frame_table
   33 D1:B3A4 09 -  -  -  	add hl,bc
   34 D1:B3A5 09 -  -  -  	add hl,bc 
   35 D1:B3A6 09 -  -  -  	add hl,bc 	
   36 D1:B3A7 ED 27 -  -  	ld hl,(hl);upper frame 
   37 D1:B3A9 -  -  -  -  	
   38 D1:B3A9 CD FF B3 D1 	call draw_fg_sprites
   39 D1:B3AD C9 -  -  -  	ret
   40 D1:B3AE -  -  -  -  
   41 D1:B3AE -  -  -  -  
   42 D1:B3AE -  -  -  -  
   43 D1:B3AE -  -  -  -  draw_fg:
   44 D1:B3AE 2A 56 AA D1 	ld hl,(draw_buffer)
   45 D1:B3B2 22 3D B4 D1 	ld (dfgs_vram_top_1),hl
   46 D1:B3B6 22 DD B4 D1 	ld (dfgs_vram_top_2),hl
   47 D1:B3BA 01 00 96 00 	ld bc,160*240
   48 D1:B3BE 09 -  -  -  	add hl,bc
   49 D1:B3BF 22 95 B4 D1 	ld (dfgs_vram_bottom_1),hl 
   50 D1:B3C3 22 B8 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   51 D1:B3C7 22 2A B5 D1 	ld (dfgs_vram_bottom_3),hl 
   52 D1:B3CB 22 4D B5 D1 	ld (dfgs_vram_bottom_4),hl 
   53 D1:B3CF -  -  -  -  	
   54 D1:B3CF 2A 50 AA D1 	ld hl,(cam_pos)
   55 D1:B3D3 01 EF 00 00 	ld bc,239
   56 D1:B3D7 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   57 D1:B3D8 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   58 D1:B3D9 32 0E B4 D1 	ld (dfgs_cam_height_1),a
   59 D1:B3DD 32 7C B4 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   60 D1:B3E1 32 10 B5 D1 	ld (dfgs_cam_height_3),a
   61 D1:B3E5 -  -  -  -  		
   62 D1:B3E5 ED 44 -  -  	neg 
   63 D1:B3E7 32 32 B4 D1 	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
   64 D1:B3EB -  -  -  -  	
   65 D1:B3EB 01 00 00 00 	ld bc,0
   66 D1:B3EF 4C -  -  -  	ld c,h;msb ccam pos 
   67 D1:B3F0 0C -  -  -  	inc c 
   68 D1:B3F1 21 AF B6 D1 	ld hl,FG_Data_frame_table
   69 D1:B3F5 09 -  -  -  	add hl,bc
   70 D1:B3F6 09 -  -  -  	add hl,bc 
   71 D1:B3F7 09 -  -  -  	add hl,bc 	
   72 D1:B3F8 -  -  -  -  
   73 D1:B3F8 ED 27 -  -  	ld hl,(hl);upper frame 
   74 D1:B3FA -  -  -  -  
   75 D1:B3FA CD FF B3 D1 	call draw_fg_sprites
   76 D1:B3FE C9 -  -  -  	ret
   77 D1:B3FF -  -  -  -  
   78 D1:B3FF -  -  -  -  
   79 D1:B3FF -  -  -  -  
   80 D1:B3FF -  -  -  -  
   81 D1:B3FF -  -  -  -  ;hl = upper frame data
   82 D1:B3FF -  -  -  -   
   83 D1:B3FF -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   84 D1:B3FF -  -  -  -  draw_fg_sprites:
   85 D1:B3FF -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   86 D1:B3FF ED 17 -  -  	ld de,(hl)
   87 D1:B401 ED 53 83 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
   88 D1:B406 -  -  -  -  	
   89 D1:B406 11 00 00 00 	ld de,0
   90 D1:B40A 23 -  -  -  	inc hl 
   91 D1:B40B 23 -  -  -  	inc hl
   92 D1:B40C 23 -  -  -  	inc hl;past data table 
   93 D1:B40D -  -  -  -  	;hl is number of elements
   94 D1:B40D -  -  -  -  	
   95 D1:B40D -  -  -  -  	
   96 D1:B40D -  -  -  -  	;if cam is far below upper frame, can skip upper frame 
   97 D1:B40D -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   98 D1:B40D 3E 00 -  -  	ld a,0 
   99 D1:B40F FE 78 -  -  	cp FGMaxSpriteHeight
  100 D1:B411 D2 23 B4 D1 	jp nc, dfgs_do_upper_loop
  101 D1:B415 -  -  -  -  	;cam too low for upper frame sprites to be drawn
  102 D1:B415 01 00 00 00 	ld bc,0
  103 D1:B419 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  104 D1:B41A 09 -  -  -  	add hl,bc 
  105 D1:B41B 09 -  -  -  	add hl,bc 
  106 D1:B41C 09 -  -  -  	add hl,bc 
  107 D1:B41D 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  108 D1:B41E 23 -  -  -  	inc hl;start of next frame
  109 D1:B41F C3 5F B4 D1 	jp dfgs_mid_start ;skip upper loop
  110 D1:B423 -  -  -  -  	
  111 D1:B423 -  -  -  -  	
  112 D1:B423 -  -  -  -  dfgs_do_upper_loop:	
  113 D1:B423 08 -  -  -  	ex af,af' ;'
  114 D1:B424 -  -  -  -  	
  115 D1:B424 7E -  -  -  	ld a,(hl);number of elements
  116 D1:B425 -  -  -  -  	;TESTING
  117 D1:B425 -  -  -  -  	;call write_a_to_ram
  118 D1:B425 -  -  -  -  	;call prgmpause
  119 D1:B425 -  -  -  -  	;TESTING
  120 D1:B425 -  -  -  -  	
  121 D1:B425 3C -  -  -  	inc a
  122 D1:B426 08 -  -  -  	ex af,af' ;'
  123 D1:B427 23 -  -  -  	inc hl;hl points to first sprite in upper frame  
  124 D1:B428 -  -  -  -  
  125 D1:B428 -  -  -  -  dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 
  126 D1:B428 -  -  -  -  
  127 D1:B428 08 -  -  -  	ex af,af';'
  128 D1:B429 3D -  -  -  	dec a ;dec number of elements
  129 D1:B42A -  -  -  -  	;call write_a_to_ram
  130 D1:B42A -  -  -  -  	
  131 D1:B42A CA 5F B4 D1 	jp z,dfgs_mid_start 
  132 D1:B42E 08 -  -  -  	ex af,af';'
  133 D1:B42F -  -  -  -  
  134 D1:B42F 7E -  -  -  	ld a,(hl);sprite y value 
  135 D1:B430 23 -  -  -  	inc hl ;to height
  136 D1:B431 -  -  -  -  	
  137 D1:B431 -  -  -  -  	;call write_a_to_ram
  138 D1:B431 -  -  -  -  	;call prgmpause
  139 D1:B431 -  -  -  -  	
  140 D1:B431 -  -  -  -  	
  141 D1:B431 -  -  -  -  dfgs_viewport_to_upper_frame .equ $ + 1
  142 D1:B431 C6 00 -  -  	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
  143 D1:B433 DA 58 B4 D1 	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
  144 D1:B437 BE -  -  -  	cp (hl) ;compare to sprite height 
  145 D1:B438 D2 58 B4 D1 	jp nc, dfgs_upper_skip
  146 D1:B43C -  -  -  -  	;a now holds number of lines to skip drawing
  147 D1:B43C -  -  -  -  
  148 D1:B43C -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  149 D1:B43C 11 00 00 00 	ld de,0;load top of vram 
  150 D1:B440 E5 -  -  -  	push hl ;save height ptr
  151 D1:B441 CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  152 D1:B445 -  -  -  -  	
  153 D1:B445 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  154 D1:B447 CA 53 B4 D1 	jp z,dfgs_upper_fast
  155 D1:B44B CD A1 AD D1 	call draw_slow_sprite_top_cut
  156 D1:B44F C3 57 B4 D1 	jp dfgs_upper_skip_2
  157 D1:B453 -  -  -  -  dfgs_upper_fast:
  158 D1:B453 CD 23 AD D1 	call draw_fast_sprite_top_cut
  159 D1:B457 -  -  -  -  dfgs_upper_skip_2:
  160 D1:B457 E1 -  -  -  	pop hl ;hl holds (height)
  161 D1:B458 -  -  -  -  	
  162 D1:B458 -  -  -  -  
  163 D1:B458 -  -  -  -  dfgs_upper_skip:
  164 D1:B458 23 -  -  -  	inc hl ;to x
  165 D1:B459 23 -  -  -  	inc hl ;to index 
  166 D1:B45A 23 -  -  -  	inc hl;to y 
  167 D1:B45B -  -  -  -  	
  168 D1:B45B -  -  -  -  	;ld a,$AA
  169 D1:B45B -  -  -  -  	;call write_a_to_ram
  170 D1:B45B -  -  -  -  	;call prgmpause
  171 D1:B45B -  -  -  -  	
  172 D1:B45B C3 28 B4 D1 	jp dfgs_upper_loop
  173 D1:B45F -  -  -  -  	
  174 D1:B45F -  -  -  -  	
  175 D1:B45F -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  176 D1:B45F -  -  -  -  	
  177 D1:B45F ED 17 -  -  	ld de,(hl) ;load sprite table ptr 
  178 D1:B461 ED 53 83 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  179 D1:B466 11 00 00 00 	ld de,0
  180 D1:B46A 23 -  -  -  	inc hl 
  181 D1:B46B 23 -  -  -  	inc hl
  182 D1:B46C 23 -  -  -  	inc hl;past sprite table ptr
  183 D1:B46D 08 -  -  -  	ex af,af' ;'
  184 D1:B46E 7E -  -  -  	ld a,(hl);number of elements
  185 D1:B46F -  -  -  -  	
  186 D1:B46F -  -  -  -  	
  187 D1:B46F -  -  -  -  
  188 D1:B46F -  -  -  -  	
  189 D1:B46F 3C -  -  -  	inc a 
  190 D1:B470 08 -  -  -  	ex af,af' ;'
  191 D1:B471 23 -  -  -  	inc hl ;to first y val 
  192 D1:B472 -  -  -  -  dfgs_mid_loop:
  193 D1:B472 -  -  -  -  	
  194 D1:B472 08 -  -  -  	ex af,af';'
  195 D1:B473 3D -  -  -  	dec a 
  196 D1:B474 -  -  -  -  	;call write_a_to_ram
  197 D1:B474 CA FC B4 D1 	jp z,dfgs_lower_start ;check for end of data
  198 D1:B478 08 -  -  -  	ex af,af';'
  199 D1:B479 -  -  -  -  
  200 D1:B479 -  -  -  -  	;ld a, $AB
  201 D1:B479 -  -  -  -  	;call write_a_to_ram
  202 D1:B479 -  -  -  -  
  203 D1:B479 -  -  -  -  
  204 D1:B479 7E -  -  -  	ld a,(hl);y val of sprite in dataframe
  205 D1:B47A -  -  -  -  	;call write_a_to_ram
  206 D1:B47A 23 -  -  -  	inc hl ;to height
  207 D1:B47B -  -  -  -  dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
  208 D1:B47B D6 00 -  -  	sub 0;subtract cam pos
  209 D1:B47D CA 85 B4 D1 	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
  210 D1:B481 D2 D7 B4 D1 	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
  211 D1:B485 -  -  -  -  dfgs_mid_sprite_topline:
  212 D1:B485 -  -  -  -  
  213 D1:B485 -  -  -  -  
  214 D1:B485 -  -  -  -  	;Sprite is below viewport bound, either full or bottom cut 
  215 D1:B485 ED 44 -  -  	neg ;a holds number of lines sprite is below top of viewport 
  216 D1:B487 -  -  -  -  
  217 D1:B487 -  -  -  -  	;need to check if sprite is partially or entirely below veiwport
  218 D1:B487 -  -  -  -  	
  219 D1:B487 D6 F0 -  -  	sub 240
  220 D1:B489 D2 B0 B4 D1 	jp nc, dfgs_mid_skip ;sprite is entirely below viewport 
  221 D1:B48D -  -  -  -  	;otherwise, a holds -lines to draw 
  222 D1:B48D ED 44 -  -  	neg ;a holds lines to draw 
  223 D1:B48F BE -  -  -  	cp (hl) ;compare to sprite height 
  224 D1:B490 DA B7 B4 D1 	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
  225 D1:B494 -  -  -  -  	;otherwise, draw full sprite 
  226 D1:B494 -  -  -  -  	
  227 D1:B494 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  228 D1:B494 11 00 00 00 	ld de,0;load bottom of vram 
  229 D1:B498 E5 -  -  -  	push hl ;save height ptr
  230 D1:B499 CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  231 D1:B49D -  -  -  -  	
  232 D1:B49D CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  233 D1:B49F CA AB B4 D1 	jp z,dfgs_mid_full_fast
  234 D1:B4A3 CD 63 AD D1 	call draw_slow_sprite_full
  235 D1:B4A7 C3 AF B4 D1 	jp dfgs_mid_skip_1
  236 D1:B4AB -  -  -  -  dfgs_mid_full_fast:
  237 D1:B4AB CD 49 AD D1 	call draw_fast_sprite_full
  238 D1:B4AF -  -  -  -  dfgs_mid_skip_1:
  239 D1:B4AF E1 -  -  -  	pop hl ;hl holds (height)
  240 D1:B4B0 -  -  -  -  	
  241 D1:B4B0 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  242 D1:B4B0 23 -  -  -  	inc hl ;x
  243 D1:B4B1 23 -  -  -  	inc hl ;index 
  244 D1:B4B2 23 -  -  -  	inc hl;to y 
  245 D1:B4B3 -  -  -  -  	
  246 D1:B4B3 C3 72 B4 D1 	jp dfgs_mid_loop
  247 D1:B4B7 -  -  -  -  	
  248 D1:B4B7 -  -  -  -  
  249 D1:B4B7 -  -  -  -  dfgs_mid_bottom_cut:
  250 D1:B4B7 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  251 D1:B4B7 11 00 00 00 	ld de,0;load bottom of vram 
  252 D1:B4BB E5 -  -  -  	push hl ;save height ptr
  253 D1:B4BC CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  254 D1:B4C0 -  -  -  -  	
  255 D1:B4C0 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  256 D1:B4C2 CA CE B4 D1 	jp z,dfgs_mid_bcut_fast
  257 D1:B4C6 CD CE AD D1 	call draw_slow_sprite_bottom_cut
  258 D1:B4CA C3 D2 B4 D1 	jp dfgs_mid_skip_2
  259 D1:B4CE -  -  -  -  dfgs_mid_bcut_fast:
  260 D1:B4CE CD 06 AD D1 	call draw_fast_sprite_bottom_cut
  261 D1:B4D2 -  -  -  -  dfgs_mid_skip_2:
  262 D1:B4D2 E1 -  -  -  	pop hl ;hl holds (height)
  263 D1:B4D3 C3 B0 B4 D1 	jp dfgs_mid_skip
  264 D1:B4D7 -  -  -  -  
  265 D1:B4D7 -  -  -  -  dfgs_mid_sprite_above:
  266 D1:B4D7 -  -  -  -  	;a holds lines to skip 
  267 D1:B4D7 BE -  -  -  	cp (hl) ;compare to height
  268 D1:B4D8 D2 B0 B4 D1 	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport
  269 D1:B4DC -  -  -  -  
  270 D1:B4DC -  -  -  -  dfgs_vram_top_2 .equ $ + 1
  271 D1:B4DC 11 00 00 00 	ld de,0;top of vram 
  272 D1:B4E0 E5 -  -  -  	push hl ;save height ptr
  273 D1:B4E1 CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  274 D1:B4E5 -  -  -  -  	
  275 D1:B4E5 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  276 D1:B4E7 CA F3 B4 D1 	jp z,dfgs_mid_tcut_fast
  277 D1:B4EB CD A1 AD D1 	call draw_slow_sprite_top_cut
  278 D1:B4EF C3 F7 B4 D1 	jp dfgs_mid_skip_3
  279 D1:B4F3 -  -  -  -  dfgs_mid_tcut_fast:
  280 D1:B4F3 CD 23 AD D1 	call draw_fast_sprite_top_cut
  281 D1:B4F7 -  -  -  -  dfgs_mid_skip_3:
  282 D1:B4F7 E1 -  -  -  	pop hl ;hl holds (height)
  283 D1:B4F8 C3 B0 B4 D1 	jp dfgs_mid_skip
  284 D1:B4FC -  -  -  -  	
  285 D1:B4FC -  -  -  -  	
  286 D1:B4FC -  -  -  -  	
  287 D1:B4FC -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  288 D1:B4FC -  -  -  -  dfgs_lower_start:
  289 D1:B4FC -  -  -  -  	
  290 D1:B4FC ED 17 -  -  	ld de,(hl) ;load sprite table ptr
  291 D1:B4FE ED 53 83 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  292 D1:B503 11 00 00 00 	ld de,0
  293 D1:B507 23 -  -  -  	inc hl 
  294 D1:B508 23 -  -  -  	inc hl
  295 D1:B509 23 -  -  -  	inc hl;past data table 
  296 D1:B50A -  -  -  -  	
  297 D1:B50A 08 -  -  -  	ex af,af' ;'
  298 D1:B50B 7E -  -  -  	ld a,(hl);number of elements
  299 D1:B50C 3C -  -  -  	inc a 
  300 D1:B50D 08 -  -  -  	ex af,af' ;'
  301 D1:B50E 23 -  -  -  	inc hl
  302 D1:B50F -  -  -  -  	
  303 D1:B50F -  -  -  -  
  304 D1:B50F -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  305 D1:B50F 3E 00 -  -  	ld a, 0
  306 D1:B511 D6 EF -  -  	sub 239
  307 D1:B513 D0 -  -  -  	ret nc;if bottom frame is offscreen 
  308 D1:B514 -  -  -  -  
  309 D1:B514 -  -  -  -  	;a holds y value of viewport bottom line in lower frame 
  310 D1:B514 32 1F B5 D1 	ld (dfgs_viewport_bottom_y),a
  311 D1:B518 -  -  -  -  
  312 D1:B518 -  -  -  -  dfgs_lower_loop:
  313 D1:B518 -  -  -  -  
  314 D1:B518 08 -  -  -  	ex af,af';'
  315 D1:B519 3D -  -  -  	dec a 
  316 D1:B51A C8 -  -  -  	ret z
  317 D1:B51B 08 -  -  -  	ex af,af';'
  318 D1:B51C -  -  -  -  	
  319 D1:B51C 7E -  -  -  	ld a,(hl);y
  320 D1:B51D 23 -  -  -  	inc hl ;inc to height
  321 D1:B51E -  -  -  -  dfgs_viewport_bottom_y .equ $ + 1
  322 D1:B51E D6 00 -  -  	sub a,0;subtract y val of viewport bottom
  323 D1:B520 DA 45 B5 D1 	jp c,dfgs_lower_skip;sprite below screen
  324 D1:B524 -  -  -  -  	
  325 D1:B524 -  -  -  -  	;a holds number of lines to draw 
  326 D1:B524 BE -  -  -  	cp (hl) ;compare to sprite height 
  327 D1:B525 DA 4C B5 D1 	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
  328 D1:B529 -  -  -  -  	
  329 D1:B529 -  -  -  -  	;draw full sprite 
  330 D1:B529 -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  331 D1:B529 11 00 00 00 	ld de,0;load bottom of vram 
  332 D1:B52D E5 -  -  -  	push hl ;save height ptr
  333 D1:B52E CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  334 D1:B532 -  -  -  -  	
  335 D1:B532 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  336 D1:B534 CA 40 B5 D1 	jp z,dfgs_lower_full_fast
  337 D1:B538 CD 63 AD D1 	call draw_slow_sprite_full
  338 D1:B53C C3 44 B5 D1 	jp dfgs_lower_skip_1
  339 D1:B540 -  -  -  -  dfgs_lower_full_fast:
  340 D1:B540 CD 49 AD D1 	call draw_fast_sprite_full
  341 D1:B544 -  -  -  -  dfgs_lower_skip_1:
  342 D1:B544 E1 -  -  -  	pop hl ;hl holds (height)
  343 D1:B545 -  -  -  -  
  344 D1:B545 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  345 D1:B545 23 -  -  -  	inc hl ;x 
  346 D1:B546 23 -  -  -  	inc hl ;index 
  347 D1:B547 23 -  -  -  	inc hl;to y 
  348 D1:B548 -  -  -  -  
  349 D1:B548 C3 18 B5 D1 	jp dfgs_lower_loop
  350 D1:B54C -  -  -  -  	
  351 D1:B54C -  -  -  -  dfgs_lower_bottom_cut: 
  352 D1:B54C -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  353 D1:B54C 11 00 00 00 	ld de,0;load bottom of vram 
  354 D1:B550 E5 -  -  -  	push hl ;save height ptr
  355 D1:B551 CD 6C B5 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  356 D1:B555 -  -  -  -  	
  357 D1:B555 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  358 D1:B557 CA 63 B5 D1 	jp z,dfgs_lower_bcut_fast ;even= fast
  359 D1:B55B CD CE AD D1 	call draw_slow_sprite_bottom_cut
  360 D1:B55F C3 67 B5 D1 	jp dfgs_lower_skip_2
  361 D1:B563 -  -  -  -  dfgs_lower_bcut_fast:
  362 D1:B563 CD 06 AD D1 	call draw_fast_sprite_bottom_cut
  363 D1:B567 -  -  -  -  dfgs_lower_skip_2:
  364 D1:B567 E1 -  -  -  	pop hl ;hl holds (height)
  365 D1:B568 C3 45 B5 D1 	jp dfgs_lower_skip
  366 D1:B56C -  -  -  -  	
  367 D1:B56C -  -  -  -  	
  368 D1:B56C -  -  -  -  	
  369 D1:B56C -  -  -  -  	
  370 D1:B56C -  -  -  -  	
  371 D1:B56C -  -  -  -  	
  372 D1:B56C -  -  -  -  	
  373 D1:B56C -  -  -  -  	
  374 D1:B56C -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  375 D1:B56C -  -  -  -  ;(hl) = height 	
  376 D1:B56C -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  377 D1:B56C -  -  -  -  
  378 D1:B56C -  -  -  -  ;Subtracts a lines from de (initial vram pos),
  379 D1:B56C -  -  -  -  ;returns hl = sprite data, de = new vram position
  380 D1:B56C -  -  -  -  dfgs_setup_draw:
  381 D1:B56C 23 -  -  -  	inc hl ;x pos 
  382 D1:B56D 01 00 00 00 	ld bc,0
  383 D1:B571 4E -  -  -  	ld c,(hl); x pos
  384 D1:B572 23 -  -  -  	inc hl;to index
  385 D1:B573 E5 -  -  -  	push hl;save sprite index 
  386 D1:B574 26 A0 -  -  	ld h,160
  387 D1:B576 6F -  -  -  	ld l,a ;number of lines to subtract 
  388 D1:B577 ED 6C -  -  	mlt hl;subtract from vram
  389 D1:B579 37 -  -  -  	scf 
  390 D1:B57A 3F -  -  -  	ccf
  391 D1:B57B EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  392 D1:B57C ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  393 D1:B57E 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  394 D1:B57F EB -  -  -  	ex de,hl;put in de
  395 D1:B580 E1 -  -  -  	pop hl;back to frame data 
  396 D1:B581 4E -  -  -  	ld c,(hl);sprite index
  397 D1:B582 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  398 D1:B582 21 00 00 00 	ld hl,0 ;load sprite table 
  399 D1:B586 09 -  -  -  	add hl,bc
  400 D1:B587 09 -  -  -  	add hl,bc 
  401 D1:B588 09 -  -  -  	add hl,bc;move to sprite ptr
  402 D1:B589 -  -  -  -  	;call prgmpause
  403 D1:B589 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  404 D1:B58B -  -  -  -  
  405 D1:B58B C9 -  -  -  	ret
  406 D1:B58C -  -  -  -  
  407 D1:B58C -  -  -  -  	
  408 D1:B58C -  -  -  -  	
  409 D1:B58C -  -  -  -  	
  410 D1:B58C -  -  -  -  	
  411 D1:B58C -  -  -  -  	
  412 D1:B58C -  -  -  -  	
  413 D1:B58C -  -  -  -  	
  414 D1:B58C -  -  -  -  	
  415 D1:B58C -  -  -  -  	
  416 D1:B58C -  -  -  -  	
  417 D1:B58C -  -  -  -  	
  418 D1:B58C -  -  -  -  	
Listing for file "ascent.asm"
  290 D1:B58C -  -  -  -  #include "SpriteDecompressManager.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\SpriteDecompressManager.txt"
    1 D1:B58C -  -  -  -  
    2 D1:B58C -  -  -  -  
    3 D1:B58C -  -  -  -  decompress_queue_start .equ vram
    4 D1:B58C -  -  -  -  
    5 D1:B58C -  -  -  -  decompress_queue_end .equ vram + (7*64) ;Max queue length of 64
    6 D1:B58C -  -  -  -  
    7 D1:B58C -  -  -  -  decompress_tail_ptr:
    8 D1:B58C 06 00 D4 -  	.dl decompress_queue_start + 6  ;points to sprite being currently decompressed (parameters byte)
    9 D1:B58F -  -  -  -  
   10 D1:B58F -  -  -  -  decompress_head_ptr: ;points to where next element will be added to queue
   11 D1:B58F 00 00 D4 -  	.dl decompress_queue_start
   12 D1:B592 -  -  -  -  
   13 D1:B592 -  -  -  -  ;Decompress queue format
   14 D1:B592 -  -  -  -  ; .dl Sprite data ptr, decompress location, parameters (7 = fast, 6 = offset, 5 = flip, 4 =started decompressing 3 = finished decompressing )
   15 D1:B592 -  -  -  -  
   16 D1:B592 -  -  -  -  setup_decompress_queue: ;clears memory in queue
   17 D1:B592 3E FF -  -  	ld a,$FF
   18 D1:B594 01 18 01 00 	ld bc, 7*40
   19 D1:B598 21 00 00 D4 	ld hl, decompress_queue_start
   20 D1:B59C CD E0 10 02 	call _MemSet
   21 D1:B5A0 C9 -  -  -  	ret 
   22 D1:B5A1 -  -  -  -  
   23 D1:B5A1 -  -  -  -  ;bc = sprite data ptr, de = decompress location, a = params
   24 D1:B5A1 -  -  -  -  ;adds sprite to queue
   25 D1:B5A1 -  -  -  -  add_to_decompress_queue:
   26 D1:B5A1 2A 8F B5 D1 	ld hl, (decompress_head_ptr)
   27 D1:B5A5 ED 0F -  -  	ld (hl), bc 
   28 D1:B5A7 23 -  -  -  	inc hl
   29 D1:B5A8 23 -  -  -  	inc hl 
   30 D1:B5A9 23 -  -  -  	inc hl 
   31 D1:B5AA -  -  -  -  
   32 D1:B5AA ED 1F -  -  	ld (hl),de
   33 D1:B5AC -  -  -  -  	
   34 D1:B5AC 23 -  -  -  	inc hl 
   35 D1:B5AD 23 -  -  -  	inc hl 
   36 D1:B5AE 23 -  -  -  	inc hl 
   37 D1:B5AF -  -  -  -  	
   38 D1:B5AF 77 -  -  -  	ld (hl), a 
   39 D1:B5B0 23 -  -  -  	inc hl ;start of next element 
   40 D1:B5B1 -  -  -  -  	
   41 D1:B5B1 E5 -  -  -  	push hl 
   42 D1:B5B2 11 C0 01 D4 	ld de, decompress_queue_end
   43 D1:B5B6 37 -  -  -  	scf
   44 D1:B5B7 3F -  -  -  	ccf
   45 D1:B5B8 ED 52 -  -  	sbc hl,de ;check if we have reached end of queue to wrap around
   46 D1:B5BA E1 -  -  -  	pop hl
   47 D1:B5BB CA C4 B5 D1 	jp z, a2dq_back_to_start
   48 D1:B5BF -  -  -  -  	
   49 D1:B5BF 22 8F B5 D1 	ld (decompress_head_ptr),hl
   50 D1:B5C3 -  -  -  -  	;ld a,$AB ;testing
   51 D1:B5C3 -  -  -  -  	;call write_a_to_ram
   52 D1:B5C3 C9 -  -  -  	ret
   53 D1:B5C4 -  -  -  -  	
   54 D1:B5C4 -  -  -  -  a2dq_back_to_start:
   55 D1:B5C4 -  -  -  -  	;ld a,$AA ;testing
   56 D1:B5C4 -  -  -  -  	;call write_a_to_ram
   57 D1:B5C4 -  -  -  -  
   58 D1:B5C4 -  -  -  -  
   59 D1:B5C4 -  -  -  -  
   60 D1:B5C4 21 00 00 D4 	ld hl,decompress_queue_start
   61 D1:B5C8 22 8F B5 D1 	ld (decompress_head_ptr),hl
   62 D1:B5CC C9 -  -  -  	ret
   63 D1:B5CD -  -  -  -  	
   64 D1:B5CD -  -  -  -  	
   65 D1:B5CD -  -  -  -  
   66 D1:B5CD -  -  -  -  
   67 D1:B5CD -  -  -  -  ;Runs after frame has been rendered. Checks through decompress queue and continues sprite decompressions
   68 D1:B5CD -  -  -  -  	;if has ended, return. at end of queue
   69 D1:B5CD -  -  -  -  	;if not started, begin decompression and set start flag
   70 D1:B5CD -  -  -  -  	;if has started, but not ended, continue decompression 
   71 D1:B5CD -  -  -  -  	;if started and ended, move to next element 
   72 D1:B5CD -  -  -  -  continue_decompressions:
   73 D1:B5CD 2A 8C B5 D1 	ld hl, (decompress_tail_ptr)
   74 D1:B5D1 7E -  -  -  	ld a,(hl) ;decompress params 
   75 D1:B5D2 CB 5F -  -  	bit 3,a 
   76 D1:B5D4 C0 -  -  -  	ret nz ;sprite is done decompressing, at end of queue 
   77 D1:B5D5 CB 67 -  -  	bit 4,a
   78 D1:B5D7 CA 0E B6 D1 	jp z, cd_begin_decompression
   79 D1:B5DB -  -  -  -  	
   80 D1:B5DB -  -  -  -  	;has started,not ended 
   81 D1:B5DB CD 3D B1 D1 	call sdcomp_continue 
   82 D1:B5DF B7 -  -  -  	or a 
   83 D1:B5E0 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
   84 D1:B5E1 -  -  -  -  
   85 D1:B5E1 -  -  -  -  cd_done_decompressing:
   86 D1:B5E1 -  -  -  -  	;sprite finished decompressing
   87 D1:B5E1 2A 8C B5 D1 	ld hl, (decompress_tail_ptr)	
   88 D1:B5E5 CB DE -  -  	set 3,(hl) ;set finished flag
   89 D1:B5E7 11 07 00 00 	ld de,7 
   90 D1:B5EB 19 -  -  -  	add hl,de ;points to next element in queue
   91 D1:B5EC -  -  -  -  	
   92 D1:B5EC E5 -  -  -  	push hl 
   93 D1:B5ED 11 C0 01 D4 	ld de, decompress_queue_end
   94 D1:B5F1 37 -  -  -  	scf
   95 D1:B5F2 3F -  -  -  	ccf
   96 D1:B5F3 ED 52 -  -  	sbc hl,de ;check if need to wrap to start of queue
   97 D1:B5F5 E1 -  -  -  	pop hl
   98 D1:B5F6 D2 02 B6 D1 	jp nc, cd_back_to_start
   99 D1:B5FA 22 8C B5 D1 	ld (decompress_tail_ptr),hl
  100 D1:B5FE C3 CD B5 D1 	jp continue_decompressions ;Move on to next sprite 
  101 D1:B602 -  -  -  -  	
  102 D1:B602 -  -  -  -  cd_back_to_start:
  103 D1:B602 21 00 00 D4 	ld hl,decompress_queue_start
  104 D1:B606 22 8C B5 D1 	ld (decompress_tail_ptr),hl
  105 D1:B60A C3 CD B5 D1 	jp continue_decompressions ;Move on to next sprite 
  106 D1:B60E -  -  -  -  
  107 D1:B60E -  -  -  -  cd_begin_decompression:
  108 D1:B60E -  -  -  -  
  109 D1:B60E -  -  -  -  	
  110 D1:B60E -  -  -  -  
  111 D1:B60E -  -  -  -  	;setup and begin decompressing
  112 D1:B60E CB E6 -  -  	set 4,(hl) ;set start flag
  113 D1:B610 F5 -  -  -  	push af 
  114 D1:B611 CB 7F -  -  	bit 7,a 
  115 D1:B613 C4 3F B3 D1 	call nz, sdcomp_set_fast
  116 D1:B617 F1 -  -  -  	pop af 
  117 D1:B618 -  -  -  -  	
  118 D1:B618 F5 -  -  -  	push af 
  119 D1:B619 CB 7F -  -  	bit 7,a 
  120 D1:B61B CC 4E B3 D1 	call z, sdcomp_reset_fast
  121 D1:B61F F1 -  -  -  	pop af 
  122 D1:B620 -  -  -  -  	
  123 D1:B620 F5 -  -  -  	push af 
  124 D1:B621 CB 77 -  -  	bit 6,a 
  125 D1:B623 C4 CF B2 D1 	call nz, sdcomp_set_offset
  126 D1:B627 F1 -  -  -  	pop af 
  127 D1:B628 -  -  -  -  	
  128 D1:B628 F5 -  -  -  	push af 
  129 D1:B629 CB 77 -  -  	bit 6,a 
  130 D1:B62B CC E0 B2 D1 	call z, sdcomp_reset_offset
  131 D1:B62F F1 -  -  -  	pop af 
  132 D1:B630 -  -  -  -  	
  133 D1:B630 F5 -  -  -  	push af 
  134 D1:B631 CB 6F -  -  	bit 5,a 
  135 D1:B633 C4 F1 B2 D1 	call nz, sdcomp_set_flip
  136 D1:B637 F1 -  -  -  	pop af 
  137 D1:B638 -  -  -  -  	
  138 D1:B638 F5 -  -  -  	push af 
  139 D1:B639 CB 6F -  -  	bit 5,a 
  140 D1:B63B CC 18 B3 D1 	call z, sdcomp_reset_flip
  141 D1:B63F F1 -  -  -  	pop af 
  142 D1:B640 -  -  -  -  	
  143 D1:B640 2A 8C B5 D1 	ld hl, (decompress_tail_ptr) ;may be unnessecary
  144 D1:B644 -  -  -  -  	
  145 D1:B644 2B -  -  -  	dec hl 
  146 D1:B645 2B -  -  -  	dec hl 
  147 D1:B646 2B -  -  -  	dec hl 
  148 D1:B647 ED 17 -  -  	ld de,(hl) ;load decompress location
  149 D1:B649 -  -  -  -  
  150 D1:B649 2B -  -  -  	dec hl 
  151 D1:B64A 2B -  -  -  	dec hl 
  152 D1:B64B 2B -  -  -  	dec hl 
  153 D1:B64C ED 27 -  -  	ld hl,(hl) ;load sprite data ptr
  154 D1:B64E -  -  -  -  
  155 D1:B64E CD A6 AF D1 	call sprite_decompress
  156 D1:B652 B7 -  -  -  	or a 
  157 D1:B653 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
  158 D1:B654 C3 E1 B5 D1 	jp cd_done_decompressing
  159 D1:B658 -  -  -  -  
  160 D1:B658 -  -  -  -  
  161 D1:B658 -  -  -  -  ;Checks to see if cam has moved to a new frame and decompressions need to be added to queue
  162 D1:B658 -  -  -  -  check_for_decompress_calls:
  163 D1:B658 3A A0 B6 D1 	ld a, (last_decompressed_cam_pos)
  164 D1:B65C 47 -  -  -  	ld b,a ;put last decompressed pos in b
  165 D1:B65D 3A 51 AA D1 	ld a, (cam_pos + 1) ;Current frame cam is in
  166 D1:B661 32 A0 B6 D1 	ld (last_decompressed_cam_pos),a ;store this frame as the last decompressed frame 
  167 D1:B665 -  -  -  -  	;need to check if cam has moved up or down since last time
  168 D1:B665 B8 -  -  -  	cp a,b 
  169 D1:B666 -  -  -  -  	
  170 D1:B666 -  -  -  -  	
  171 D1:B666 C8 -  -  -  	ret z ;if same, no new things to add to queue 
  172 D1:B667 D2 73 B6 D1 	jp nc, cfdc_cam_move_up ;camera has moved up since last time 
  173 D1:B66B -  -  -  -  	
  174 D1:B66B -  -  -  -  	;cam has moved down since last time 
  175 D1:B66B 21 23 B8 D1 	ld hl, decompress_calls_table_down
  176 D1:B66F C3 77 B6 D1 	jp cfdc_add_calls_to_queue
  177 D1:B673 -  -  -  -  	
  178 D1:B673 -  -  -  -  	
  179 D1:B673 -  -  -  -  cfdc_cam_move_up:
  180 D1:B673 21 F3 B7 D1 	ld hl, decompress_calls_table_up
  181 D1:B677 -  -  -  -  
  182 D1:B677 -  -  -  -  	;a = cam frame, hl = decompress call table (up or down)
  183 D1:B677 -  -  -  -  cfdc_add_calls_to_queue:
  184 D1:B677 -  -  -  -  
  185 D1:B677 -  -  -  -  	;call write_a_to_ram
  186 D1:B677 -  -  -  -  
  187 D1:B677 01 00 00 00 	ld bc,0
  188 D1:B67B 4F -  -  -  	ld c,a
  189 D1:B67C 09 -  -  -  	add hl,bc 
  190 D1:B67D 09 -  -  -  	add hl,bc 
  191 D1:B67E 09 -  -  -  	add hl,bc 
  192 D1:B67F ED 27 -  -  	ld hl,(hl) ;hl now points to correct decompress frame 
  193 D1:B681 -  -  -  -  	
  194 D1:B681 08 -  -  -  	ex af,af' ;'
  195 D1:B682 7E -  -  -  	ld a,(hl) ;a' holds num elements 
  196 D1:B683 -  -  -  -  	
  197 D1:B683 -  -  -  -  	;call write_a_to_ram
  198 D1:B683 -  -  -  -  	
  199 D1:B683 -  -  -  -  	;call prgmpause
  200 D1:B683 -  -  -  -  	
  201 D1:B683 3C -  -  -  	inc a ;to be decd later
  202 D1:B684 08 -  -  -  	ex af,af' ;'
  203 D1:B685 -  -  -  -  	
  204 D1:B685 23 -  -  -  	inc hl ;points to first sprite data 
  205 D1:B686 -  -  -  -  cfdc_add_to_queue_loop:
  206 D1:B686 08 -  -  -  	ex af,af' ;'
  207 D1:B687 -  -  -  -  	;call write_a_to_ram
  208 D1:B687 3D -  -  -  	dec a ;account for cases where frame has 0 elements 
  209 D1:B688 C8 -  -  -  	ret z
  210 D1:B689 08 -  -  -  	ex af,af' ;'
  211 D1:B68A ED 07 -  -  	ld bc ,(hl) ;load sprite data 
  212 D1:B68C 23 -  -  -  	inc hl 
  213 D1:B68D 23 -  -  -  	inc hl
  214 D1:B68E 23 -  -  -  	inc hl 
  215 D1:B68F ED 17 -  -  	ld de,(hl) ;load decomp location 
  216 D1:B691 23 -  -  -  	inc hl 
  217 D1:B692 23 -  -  -  	inc hl
  218 D1:B693 23 -  -  -  	inc hl 
  219 D1:B694 7E -  -  -  	ld a,(hl) ;ld params
  220 D1:B695 23 -  -  -  	inc hl 
  221 D1:B696 E5 -  -  -  	push hl
  222 D1:B697 CD A1 B5 D1 	call add_to_decompress_queue
  223 D1:B69B E1 -  -  -  	pop hl
  224 D1:B69C C3 86 B6 D1 	jp cfdc_add_to_queue_loop
  225 D1:B6A0 -  -  -  -  	
  226 D1:B6A0 -  -  -  -  	
  227 D1:B6A0 -  -  -  -  
  228 D1:B6A0 -  -  -  -  
  229 D1:B6A0 -  -  -  -  last_decompressed_cam_pos:
  230 D1:B6A0 00 -  -  -  	.db 0 ;camera frame last time checking for decomp was called 
  231 D1:B6A1 -  -  -  -  	
  232 D1:B6A1 -  -  -  -  	
  233 D1:B6A1 -  -  -  -  
  234 D1:B6A1 -  -  -  -  
  235 D1:B6A1 -  -  -  -  
  236 D1:B6A1 -  -  -  -  
  237 D1:B6A1 -  -  -  -  
  238 D1:B6A1 -  -  -  -  
  239 D1:B6A1 -  -  -  -  
  240 D1:B6A1 -  -  -  -  
  241 D1:B6A1 -  -  -  -  
  242 D1:B6A1 -  -  -  -  
  243 D1:B6A1 -  -  -  -  
  244 D1:B6A1 -  -  -  -  
  245 D1:B6A1 -  -  -  -  
  246 D1:B6A1 -  -  -  -  
  247 D1:B6A1 -  -  -  -  
  248 D1:B6A1 -  -  -  -  
  249 D1:B6A1 -  -  -  -  
  250 D1:B6A1 -  -  -  -  
  251 D1:B6A1 -  -  -  -  
  252 D1:B6A1 -  -  -  -  
  253 D1:B6A1 -  -  -  -  
  254 D1:B6A1 -  -  -  -  
  255 D1:B6A1 -  -  -  -  
  256 D1:B6A1 -  -  -  -  
  257 D1:B6A1 -  -  -  -  
Listing for file "ascent.asm"
  291 D1:B6A1 -  -  -  -  ;#include "levelData.txt"
  292 D1:B6A1 -  -  -  -  ;#include "FGLevelData.txt"
  293 D1:B6A1 -  -  -  -  
  294 D1:B6A1 -  -  -  -  #include "generated/BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\BG_Data.txt"
    1 D1:B6A1 -  -  -  -  BG_Data_frame_table:
    2 D1:B6A1 A4 B6 D1 -  	.dl BG_Data_0
    3 D1:B6A4 -  -  -  -  
    4 D1:B6A4 -  -  -  -  
    5 D1:B6A4 -  -  -  -  
    6 D1:B6A4 -  -  -  -  BG_Data_0:
    7 D1:B6A4 BC B9 D1 -  	.dl Sprite_Table_0
    8 D1:B6A7 00 -  -  -  	.db 0
    9 D1:B6A8 -  -  -  -  
   10 D1:B6A8 -  -  -  -  
   11 D1:B6A8 -  -  -  -  
Listing for file "ascent.asm"
  295 D1:B6A8 -  -  -  -  #include "generated/MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\MG_Data.txt"
    1 D1:B6A8 -  -  -  -  MG_Data_frame_table:
    2 D1:B6A8 AB B6 D1 -  	.dl MG_Data_0
    3 D1:B6AB -  -  -  -  
    4 D1:B6AB -  -  -  -  
    5 D1:B6AB -  -  -  -  
    6 D1:B6AB -  -  -  -  MG_Data_0:
    7 D1:B6AB BC B9 D1 -  	.dl Sprite_Table_0
    8 D1:B6AE 00 -  -  -  	.db 0
    9 D1:B6AF -  -  -  -  
   10 D1:B6AF -  -  -  -  
   11 D1:B6AF -  -  -  -  
Listing for file "ascent.asm"
  296 D1:B6AF -  -  -  -  #include "generated/FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\FG_Data.txt"
    1 D1:B6AF -  -  -  -  FG_Data_frame_table:
    2 D1:B6AF D7 B7 D1 -  	.dl FG_Data_0
    3 D1:B6B2 BB B7 D1 -  	.dl FG_Data_1
    4 D1:B6B5 A7 B7 D1 -  	.dl FG_Data_2
    5 D1:B6B8 83 B7 D1 -  	.dl FG_Data_3
    6 D1:B6BB 77 B7 D1 -  	.dl FG_Data_4
    7 D1:B6BE 6F B7 D1 -  	.dl FG_Data_5
    8 D1:B6C1 5F B7 D1 -  	.dl FG_Data_6
    9 D1:B6C4 4B B7 D1 -  	.dl FG_Data_7
   10 D1:B6C7 43 B7 D1 -  	.dl FG_Data_8
   11 D1:B6CA 3B B7 D1 -  	.dl FG_Data_9
   12 D1:B6CD 2B B7 D1 -  	.dl FG_Data_10
   13 D1:B6D0 17 B7 D1 -  	.dl FG_Data_11
   14 D1:B6D3 0B B7 D1 -  	.dl FG_Data_12
   15 D1:B6D6 FF B6 D1 -  	.dl FG_Data_13
   16 D1:B6D9 EF B6 D1 -  	.dl FG_Data_14
   17 D1:B6DC DF B6 D1 -  	.dl FG_Data_15
   18 D1:B6DF -  -  -  -  
   19 D1:B6DF -  -  -  -  
   20 D1:B6DF -  -  -  -  
   21 D1:B6DF -  -  -  -  FG_Data_15:
   22 D1:B6DF BC B9 D1 -  	.dl Sprite_Table_0
   23 D1:B6E2 03 -  -  -  	.db 3
   24 D1:B6E3 40 0F 6C 0D 	.db 64, 15, 108, 13
   25 D1:B6E7 43 0F 31 0D 	.db 67, 15, 49, 13
   26 D1:B6EB 85 0F 6A 0E 	.db 133, 15, 106, 14
   27 D1:B6EF -  -  -  -  
   28 D1:B6EF -  -  -  -  FG_Data_14:
   29 D1:B6EF BC B9 D1 -  	.dl Sprite_Table_0
   30 D1:B6F2 03 -  -  -  	.db 3
   31 D1:B6F3 61 0F 15 0D 	.db 97, 15, 21, 13
   32 D1:B6F7 B0 0F 5D 0D 	.db 176, 15, 93, 13
   33 D1:B6FB A9 0F 2F 0E 	.db 169, 15, 47, 14
   34 D1:B6FF -  -  -  -  
   35 D1:B6FF -  -  -  -  FG_Data_13:
   36 D1:B6FF BC B9 D1 -  	.dl Sprite_Table_0
   37 D1:B702 02 -  -  -  	.db 2
   38 D1:B703 AC 2E 5F 0C 	.db 172, 46, 95, 12
   39 D1:B707 67 2E 2E 0C 	.db 103, 46, 46, 12
   40 D1:B70B -  -  -  -  
   41 D1:B70B -  -  -  -  FG_Data_12:
   42 D1:B70B BC B9 D1 -  	.dl Sprite_Table_0
   43 D1:B70E 02 -  -  -  	.db 2
   44 D1:B70F 75 2E 54 01 	.db 117, 46, 84, 1
   45 D1:B713 6B 30 1D 0A 	.db 107, 48, 29, 10
   46 D1:B717 -  -  -  -  
   47 D1:B717 -  -  -  -  FG_Data_11:
   48 D1:B717 BC B9 D1 -  	.dl Sprite_Table_0
   49 D1:B71A 04 -  -  -  	.db 4
   50 D1:B71B 4F 2E 37 01 	.db 79, 46, 55, 1
   51 D1:B71F BD 2E 6B 01 	.db 189, 46, 107, 1
   52 D1:B723 B8 30 27 0A 	.db 184, 48, 39, 10
   53 D1:B727 49 30 64 0B 	.db 73, 48, 100, 11
   54 D1:B72B -  -  -  -  
   55 D1:B72B -  -  -  -  FG_Data_10:
   56 D1:B72B BC B9 D1 -  	.dl Sprite_Table_0
   57 D1:B72E 03 -  -  -  	.db 3
   58 D1:B72F 6E 2E 20 01 	.db 110, 46, 32, 1
   59 D1:B733 CD 30 32 0A 	.db 205, 48, 50, 10
   60 D1:B737 AF 30 64 0B 	.db 175, 48, 100, 11
   61 D1:B73B -  -  -  -  
   62 D1:B73B -  -  -  -  FG_Data_9:
   63 D1:B73B BC B9 D1 -  	.dl Sprite_Table_0
   64 D1:B73E 01 -  -  -  	.db 1
   65 D1:B73F 93 30 53 0A 	.db 147, 48, 83, 10
   66 D1:B743 -  -  -  -  
   67 D1:B743 -  -  -  -  FG_Data_8:
   68 D1:B743 BC B9 D1 -  	.dl Sprite_Table_0
   69 D1:B746 01 -  -  -  	.db 1
   70 D1:B747 92 30 28 0A 	.db 146, 48, 40, 10
   71 D1:B74B -  -  -  -  
   72 D1:B74B -  -  -  -  FG_Data_7:
   73 D1:B74B BC B9 D1 -  	.dl Sprite_Table_0
   74 D1:B74E 04 -  -  -  	.db 4
   75 D1:B74F 59 0F 44 08 	.db 89, 15, 68, 8
   76 D1:B753 30 0F 6C 09 	.db 48, 15, 108, 9
   77 D1:B757 9E 0F 2A 09 	.db 158, 15, 42, 9
   78 D1:B75B A6 0F 60 09 	.db 166, 15, 96, 9
   79 D1:B75F -  -  -  -  
   80 D1:B75F -  -  -  -  FG_Data_6:
   81 D1:B75F BC B9 D1 -  	.dl Sprite_Table_0
   82 D1:B762 03 -  -  -  	.db 3
   83 D1:B763 5E 0F 14 08 	.db 94, 15, 20, 8
   84 D1:B767 93 0F 39 09 	.db 147, 15, 57, 9
   85 D1:B76B 6C 2E 6B 01 	.db 108, 46, 107, 1
   86 D1:B76F -  -  -  -  
   87 D1:B76F -  -  -  -  FG_Data_5:
   88 D1:B76F BC B9 D1 -  	.dl Sprite_Table_0
   89 D1:B772 01 -  -  -  	.db 1
   90 D1:B773 57 2E 28 01 	.db 87, 46, 40, 1
   91 D1:B777 -  -  -  -  
   92 D1:B777 -  -  -  -  FG_Data_4:
   93 D1:B777 BC B9 D1 -  	.dl Sprite_Table_0
   94 D1:B77A 02 -  -  -  	.db 2
   95 D1:B77B 54 2E 1A 07 	.db 84, 46, 26, 7
   96 D1:B77F A7 2E 3A 01 	.db 167, 46, 58, 1
   97 D1:B783 -  -  -  -  
   98 D1:B783 -  -  -  -  FG_Data_3:
   99 D1:B783 BC B9 D1 -  	.dl Sprite_Table_0
  100 D1:B786 08 -  -  -  	.db 8
  101 D1:B787 A4 18 43 05 	.db 164, 24, 67, 5
  102 D1:B78B 95 18 78 05 	.db 149, 24, 120, 5
  103 D1:B78F D7 18 6C 05 	.db 215, 24, 108, 5
  104 D1:B793 4E 18 6E 05 	.db 78, 24, 110, 5
  105 D1:B797 56 18 50 05 	.db 86, 24, 80, 5
  106 D1:B79B C2 18 19 06 	.db 194, 24, 25, 6
  107 D1:B79F 82 18 17 05 	.db 130, 24, 23, 5
  108 D1:B7A3 99 18 3D 05 	.db 153, 24, 61, 5
  109 D1:B7A7 -  -  -  -  
  110 D1:B7A7 -  -  -  -  FG_Data_2:
  111 D1:B7A7 BC B9 D1 -  	.dl Sprite_Table_0
  112 D1:B7AA 04 -  -  -  	.db 4
  113 D1:B7AB 9D 2E 5F 04 	.db 157, 46, 95, 4
  114 D1:B7AF 79 2E 2B 04 	.db 121, 46, 43, 4
  115 D1:B7B3 D2 2E 4B 03 	.db 210, 46, 75, 3
  116 D1:B7B7 AC 2E 14 01 	.db 172, 46, 20, 1
  117 D1:B7BB -  -  -  -  
  118 D1:B7BB -  -  -  -  FG_Data_1:
  119 D1:B7BB BC B9 D1 -  	.dl Sprite_Table_0
  120 D1:B7BE 06 -  -  -  	.db 6
  121 D1:B7BF 3F 18 58 02 	.db 63, 24, 88, 2
  122 D1:B7C3 73 2E 17 03 	.db 115, 46, 23, 3
  123 D1:B7C7 A6 2E 5F 03 	.db 166, 46, 95, 3
  124 D1:B7CB 51 18 75 00 	.db 81, 24, 117, 0
  125 D1:B7CF 6C 18 42 00 	.db 108, 24, 66, 0
  126 D1:B7D3 D3 2E 37 04 	.db 211, 46, 55, 4
  127 D1:B7D7 -  -  -  -  
  128 D1:B7D7 -  -  -  -  FG_Data_0:
  129 D1:B7D7 BC B9 D1 -  	.dl Sprite_Table_0
  130 D1:B7DA 06 -  -  -  	.db 6
  131 D1:B7DB 5F 18 0C 00 	.db 95, 24, 12, 0
  132 D1:B7DF 85 2E 30 01 	.db 133, 46, 48, 1
  133 D1:B7E3 98 18 16 00 	.db 152, 24, 22, 0
  134 D1:B7E7 CF 2E 58 01 	.db 207, 46, 88, 1
  135 D1:B7EB 77 18 71 02 	.db 119, 24, 113, 2
  136 D1:B7EF D9 2E 2B 01 	.db 217, 46, 43, 1
  137 D1:B7F3 -  -  -  -  
  138 D1:B7F3 -  -  -  -  
  139 D1:B7F3 -  -  -  -  
Listing for file "ascent.asm"
  297 D1:B7F3 -  -  -  -  #include "generated/DecompressCalls.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\DecompressCalls.txt"
    1 D1:B7F3 -  -  -  -  decompress_calls_table_up:
    2 D1:B7F3 53 B8 D1 -  	.dl decompress_frame_up_0
    3 D1:B7F6 85 B8 D1 -  	.dl decompress_frame_up_1
    4 D1:B7F9 8D B8 D1 -  	.dl decompress_frame_up_2
    5 D1:B7FC 8E B8 D1 -  	.dl decompress_frame_up_3
    6 D1:B7FF 9D B8 D1 -  	.dl decompress_frame_up_4
    7 D1:B802 9E B8 D1 -  	.dl decompress_frame_up_5
    8 D1:B805 A6 B8 D1 -  	.dl decompress_frame_up_6
    9 D1:B808 A7 B8 D1 -  	.dl decompress_frame_up_7
   10 D1:B80B AF B8 D1 -  	.dl decompress_frame_up_8
   11 D1:B80E B0 B8 D1 -  	.dl decompress_frame_up_9
   12 D1:B811 B1 B8 D1 -  	.dl decompress_frame_up_10
   13 D1:B814 B9 B8 D1 -  	.dl decompress_frame_up_11
   14 D1:B817 C8 B8 D1 -  	.dl decompress_frame_up_12
   15 D1:B81A C9 B8 D1 -  	.dl decompress_frame_up_13
   16 D1:B81D CA B8 D1 -  	.dl decompress_frame_up_14
   17 D1:B820 CB B8 D1 -  	.dl decompress_frame_up_15
   18 D1:B823 -  -  -  -  
   19 D1:B823 -  -  -  -  
   20 D1:B823 -  -  -  -  decompress_calls_table_down:
   21 D1:B823 CC B8 D1 -  	.dl decompress_frame_down_0
   22 D1:B826 CD B8 D1 -  	.dl decompress_frame_down_1
   23 D1:B829 CE B8 D1 -  	.dl decompress_frame_down_2
   24 D1:B82C DD B8 D1 -  	.dl decompress_frame_down_3
   25 D1:B82F EC B8 D1 -  	.dl decompress_frame_down_4
   26 D1:B832 FB B8 D1 -  	.dl decompress_frame_down_5
   27 D1:B835 03 B9 D1 -  	.dl decompress_frame_down_6
   28 D1:B838 04 B9 D1 -  	.dl decompress_frame_down_7
   29 D1:B83B 05 B9 D1 -  	.dl decompress_frame_down_8
   30 D1:B83E 14 B9 D1 -  	.dl decompress_frame_down_9
   31 D1:B841 15 B9 D1 -  	.dl decompress_frame_down_10
   32 D1:B844 16 B9 D1 -  	.dl decompress_frame_down_11
   33 D1:B847 17 B9 D1 -  	.dl decompress_frame_down_12
   34 D1:B84A 1F B9 D1 -  	.dl decompress_frame_down_13
   35 D1:B84D 2E B9 D1 -  	.dl decompress_frame_down_14
   36 D1:B850 36 B9 D1 -  	.dl decompress_frame_down_15
   37 D1:B853 -  -  -  -  
   38 D1:B853 -  -  -  -  
   39 D1:B853 -  -  -  -  
   40 D1:B853 -  -  -  -  decompress_frame_up_0:
   41 D1:B853 07 -  -  -  	.db 7
   42 D1:B854 E9 B9 D1 C1 
              01 D4 -  -  	.dl Banana1, Banana1_Slow_0
   43 D1:B85A 00 -  -  -  	.db %00000000
   44 D1:B85B 80 BA D1 DA 
              02 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_0
   45 D1:B861 80 -  -  -  	.db %10000000
   46 D1:B862 E9 B9 D1 6B 
              05 D4 -  -  	.dl Banana1, Banana1_Slow_O_0
   47 D1:B868 40 -  -  -  	.db %01000000
   48 D1:B869 80 BA D1 83 
              06 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_F_0
   49 D1:B86F 60 -  -  -  	.db %01100000
   50 D1:B870 80 BA D1 9E 
              09 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_F_0
   51 D1:B876 A0 -  -  -  	.db %10100000
   52 D1:B877 E9 B9 D1 2F 
              0C D4 -  -  	.dl Banana1, Banana1_Slow_O_F_0
   53 D1:B87D 60 -  -  -  	.db %01100000
   54 D1:B87E E9 B9 D1 47 
              0D D4 -  -  	.dl Banana1, Banana1_Slow_F_0
   55 D1:B884 20 -  -  -  	.db %00100000
   56 D1:B885 -  -  -  -  
   57 D1:B885 -  -  -  -  decompress_frame_up_1:
   58 D1:B885 01 -  -  -  	.db 1
   59 D1:B886 80 BA D1 5F 
              0E D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_0
   60 D1:B88C 40 -  -  -  	.db %01000000
   61 D1:B88D -  -  -  -  
   62 D1:B88D -  -  -  -  decompress_frame_up_2:
   63 D1:B88D 00 -  -  -  	.db 0
   64 D1:B88E -  -  -  -  
   65 D1:B88E -  -  -  -  decompress_frame_up_3:
   66 D1:B88E 02 -  -  -  	.db 2
   67 D1:B88F 91 BC D1 C1 
              01 D4 -  -  	.dl Bluething, Bluething_Slow_O_0
   68 D1:B895 40 -  -  -  	.db %01000000
   69 D1:B896 91 BC D1 6B 
              05 D4 -  -  	.dl Bluething, Bluething_Slow_0
   70 D1:B89C 00 -  -  -  	.db %00000000
   71 D1:B89D -  -  -  -  
   72 D1:B89D -  -  -  -  decompress_frame_up_4:
   73 D1:B89D 00 -  -  -  	.db 0
   74 D1:B89E -  -  -  -  
   75 D1:B89E -  -  -  -  decompress_frame_up_5:
   76 D1:B89E 01 -  -  -  	.db 1
   77 D1:B89F B2 BC D1 5F 
              06 D4 -  -  	.dl Shittlogo, Shittlogo_Slow_O_0
   78 D1:B8A5 40 -  -  -  	.db %01000000
   79 D1:B8A6 -  -  -  -  
   80 D1:B8A6 -  -  -  -  decompress_frame_up_6:
   81 D1:B8A6 00 -  -  -  	.db 0
   82 D1:B8A7 -  -  -  -  
   83 D1:B8A7 -  -  -  -  decompress_frame_up_7:
   84 D1:B8A7 01 -  -  -  	.db 1
   85 D1:B8A8 B2 BC D1 7B 
              0B D4 -  -  	.dl Shittlogo, Shittlogo_Slow_0
   86 D1:B8AE 00 -  -  -  	.db %00000000
   87 D1:B8AF -  -  -  -  
   88 D1:B8AF -  -  -  -  decompress_frame_up_8:
   89 D1:B8AF 00 -  -  -  	.db 0
   90 D1:B8B0 -  -  -  -  
   91 D1:B8B0 -  -  -  -  decompress_frame_up_9:
   92 D1:B8B0 00 -  -  -  	.db 0
   93 D1:B8B1 -  -  -  -  
   94 D1:B8B1 -  -  -  -  decompress_frame_up_10:
   95 D1:B8B1 01 -  -  -  	.db 1
   96 D1:B8B2 80 BA D1 AB 
              10 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_1
   97 D1:B8B8 40 -  -  -  	.db %01000000
   98 D1:B8B9 -  -  -  -  
   99 D1:B8B9 -  -  -  -  decompress_frame_up_11:
  100 D1:B8B9 02 -  -  -  	.db 2
  101 D1:B8BA 91 BC D1 C1 
              01 D4 -  -  	.dl Bluething, Bluething_Slow_O_1
  102 D1:B8C0 40 -  -  -  	.db %01000000
  103 D1:B8C1 91 BC D1 6B 
              05 D4 -  -  	.dl Bluething, Bluething_Slow_1
  104 D1:B8C7 00 -  -  -  	.db %00000000
  105 D1:B8C8 -  -  -  -  
  106 D1:B8C8 -  -  -  -  decompress_frame_up_12:
  107 D1:B8C8 00 -  -  -  	.db 0
  108 D1:B8C9 -  -  -  -  
  109 D1:B8C9 -  -  -  -  decompress_frame_up_13:
  110 D1:B8C9 00 -  -  -  	.db 0
  111 D1:B8CA -  -  -  -  
  112 D1:B8CA -  -  -  -  decompress_frame_up_14:
  113 D1:B8CA 00 -  -  -  	.db 0
  114 D1:B8CB -  -  -  -  
  115 D1:B8CB -  -  -  -  decompress_frame_up_15:
  116 D1:B8CB 00 -  -  -  	.db 0
  117 D1:B8CC -  -  -  -  
  118 D1:B8CC -  -  -  -  
  119 D1:B8CC -  -  -  -  
  120 D1:B8CC -  -  -  -  decompress_frame_down_0:
  121 D1:B8CC 00 -  -  -  	.db 0
  122 D1:B8CD -  -  -  -  
  123 D1:B8CD -  -  -  -  decompress_frame_down_1:
  124 D1:B8CD 00 -  -  -  	.db 0
  125 D1:B8CE -  -  -  -  
  126 D1:B8CE -  -  -  -  decompress_frame_down_2:
  127 D1:B8CE 02 -  -  -  	.db 2
  128 D1:B8CF E9 B9 D1 C1 
              01 D4 -  -  	.dl Banana1, Banana1_Slow_0
  129 D1:B8D5 00 -  -  -  	.db %00000000
  130 D1:B8D6 E9 B9 D1 6B 
              05 D4 -  -  	.dl Banana1, Banana1_Slow_O_0
  131 D1:B8DC 40 -  -  -  	.db %01000000
  132 D1:B8DD -  -  -  -  
  133 D1:B8DD -  -  -  -  decompress_frame_down_3:
  134 D1:B8DD 02 -  -  -  	.db 2
  135 D1:B8DE 80 BA D1 83 
              06 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_F_0
  136 D1:B8E4 60 -  -  -  	.db %01100000
  137 D1:B8E5 80 BA D1 9E 
              09 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_F_0
  138 D1:B8EB A0 -  -  -  	.db %10100000
  139 D1:B8EC -  -  -  -  
  140 D1:B8EC -  -  -  -  decompress_frame_down_4:
  141 D1:B8EC 02 -  -  -  	.db 2
  142 D1:B8ED E9 B9 D1 2F 
              0C D4 -  -  	.dl Banana1, Banana1_Slow_O_F_0
  143 D1:B8F3 60 -  -  -  	.db %01100000
  144 D1:B8F4 E9 B9 D1 47 
              0D D4 -  -  	.dl Banana1, Banana1_Slow_F_0
  145 D1:B8FA 20 -  -  -  	.db %00100000
  146 D1:B8FB -  -  -  -  
  147 D1:B8FB -  -  -  -  decompress_frame_down_5:
  148 D1:B8FB 01 -  -  -  	.db 1
  149 D1:B8FC 80 BA D1 5F 
              0E D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_0
  150 D1:B902 40 -  -  -  	.db %01000000
  151 D1:B903 -  -  -  -  
  152 D1:B903 -  -  -  -  decompress_frame_down_6:
  153 D1:B903 00 -  -  -  	.db 0
  154 D1:B904 -  -  -  -  
  155 D1:B904 -  -  -  -  decompress_frame_down_7:
  156 D1:B904 00 -  -  -  	.db 0
  157 D1:B905 -  -  -  -  
  158 D1:B905 -  -  -  -  decompress_frame_down_8:
  159 D1:B905 02 -  -  -  	.db 2
  160 D1:B906 91 BC D1 C1 
              01 D4 -  -  	.dl Bluething, Bluething_Slow_O_0
  161 D1:B90C 40 -  -  -  	.db %01000000
  162 D1:B90D 91 BC D1 6B 
              05 D4 -  -  	.dl Bluething, Bluething_Slow_0
  163 D1:B913 00 -  -  -  	.db %00000000
  164 D1:B914 -  -  -  -  
  165 D1:B914 -  -  -  -  decompress_frame_down_9:
  166 D1:B914 00 -  -  -  	.db 0
  167 D1:B915 -  -  -  -  
  168 D1:B915 -  -  -  -  decompress_frame_down_10:
  169 D1:B915 00 -  -  -  	.db 0
  170 D1:B916 -  -  -  -  
  171 D1:B916 -  -  -  -  decompress_frame_down_11:
  172 D1:B916 00 -  -  -  	.db 0
  173 D1:B917 -  -  -  -  
  174 D1:B917 -  -  -  -  decompress_frame_down_12:
  175 D1:B917 01 -  -  -  	.db 1
  176 D1:B918 B2 BC D1 7B 
              0B D4 -  -  	.dl Shittlogo, Shittlogo_Slow_0
  177 D1:B91E 00 -  -  -  	.db %00000000
  178 D1:B91F -  -  -  -  
  179 D1:B91F -  -  -  -  decompress_frame_down_13:
  180 D1:B91F 02 -  -  -  	.db 2
  181 D1:B920 80 BA D1 DA 
              02 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_0
  182 D1:B926 80 -  -  -  	.db %10000000
  183 D1:B927 B2 BC D1 5F 
              06 D4 -  -  	.dl Shittlogo, Shittlogo_Slow_O_0
  184 D1:B92D 40 -  -  -  	.db %01000000
  185 D1:B92E -  -  -  -  
  186 D1:B92E -  -  -  -  decompress_frame_down_14:
  187 D1:B92E 01 -  -  -  	.db 1
  188 D1:B92F 80 BA D1 AB 
              10 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_1
  189 D1:B935 40 -  -  -  	.db %01000000
  190 D1:B936 -  -  -  -  
  191 D1:B936 -  -  -  -  decompress_frame_down_15:
  192 D1:B936 00 -  -  -  	.db 0
Listing for file "ascent.asm"
  298 D1:B937 -  -  -  -  #include "generated/Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Palette_Setup.txt"
    1 D1:B937 -  -  -  -  setup_palette_1:
    2 D1:B937 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:B93B 3E 65 -  -  	ld a,%01100101
    4 D1:B93D 77 -  -  -  	ld (hl),a 
    5 D1:B93E 23 -  -  -  	inc hl
    6 D1:B93F 3E 6B -  -  	ld a,%01101011
    7 D1:B941 77 -  -  -  	ld (hl),a 
    8 D1:B942 23 -  -  -  	inc hl
    9 D1:B943 3E 61 -  -  	ld a,%01100001
   10 D1:B945 77 -  -  -  	ld (hl),a 
   11 D1:B946 23 -  -  -  	inc hl
   12 D1:B947 3E 4E -  -  	ld a,%01001110
   13 D1:B949 77 -  -  -  	ld (hl),a 
   14 D1:B94A 23 -  -  -  	inc hl
   15 D1:B94B 3E 80 -  -  	ld a,%10000000
   16 D1:B94D 77 -  -  -  	ld (hl),a 
   17 D1:B94E 23 -  -  -  	inc hl
   18 D1:B94F 3E 10 -  -  	ld a,%00010000
   19 D1:B951 77 -  -  -  	ld (hl),a 
   20 D1:B952 23 -  -  -  	inc hl
   21 D1:B953 3E F9 -  -  	ld a,%11111001
   22 D1:B955 77 -  -  -  	ld (hl),a 
   23 D1:B956 23 -  -  -  	inc hl
   24 D1:B957 3E 0A -  -  	ld a,%00001010
   25 D1:B959 77 -  -  -  	ld (hl),a 
   26 D1:B95A 23 -  -  -  	inc hl
   27 D1:B95B 3E 1F -  -  	ld a,%00011111
   28 D1:B95D 77 -  -  -  	ld (hl),a 
   29 D1:B95E 23 -  -  -  	inc hl
   30 D1:B95F 3E 81 -  -  	ld a,%10000001
   31 D1:B961 77 -  -  -  	ld (hl),a 
   32 D1:B962 23 -  -  -  	inc hl
   33 D1:B963 3E A2 -  -  	ld a,%10100010
   34 D1:B965 77 -  -  -  	ld (hl),a 
   35 D1:B966 23 -  -  -  	inc hl
   36 D1:B967 3E 12 -  -  	ld a,%00010010
   37 D1:B969 77 -  -  -  	ld (hl),a 
   38 D1:B96A 23 -  -  -  	inc hl
   39 D1:B96B 3E 00 -  -  	ld a,%00000000
   40 D1:B96D 77 -  -  -  	ld (hl),a 
   41 D1:B96E 23 -  -  -  	inc hl
   42 D1:B96F 3E 00 -  -  	ld a,%00000000
   43 D1:B971 77 -  -  -  	ld (hl),a 
   44 D1:B972 23 -  -  -  	inc hl
   45 D1:B973 3E F9 -  -  	ld a,%11111001
   46 D1:B975 77 -  -  -  	ld (hl),a 
   47 D1:B976 23 -  -  -  	inc hl
   48 D1:B977 3E 0A -  -  	ld a,%00001010
   49 D1:B979 77 -  -  -  	ld (hl),a 
   50 D1:B97A 23 -  -  -  	inc hl
   51 D1:B97B 3E FF -  -  	ld a,%11111111
   52 D1:B97D 77 -  -  -  	ld (hl),a 
   53 D1:B97E 23 -  -  -  	inc hl
   54 D1:B97F 3E FF -  -  	ld a,%11111111
   55 D1:B981 77 -  -  -  	ld (hl),a 
   56 D1:B982 23 -  -  -  	inc hl
   57 D1:B983 3E 1F -  -  	ld a,%00011111
   58 D1:B985 77 -  -  -  	ld (hl),a 
   59 D1:B986 23 -  -  -  	inc hl
   60 D1:B987 3E 81 -  -  	ld a,%10000001
   61 D1:B989 77 -  -  -  	ld (hl),a 
   62 D1:B98A 23 -  -  -  	inc hl
   63 D1:B98B 3E 1F -  -  	ld a,%00011111
   64 D1:B98D 77 -  -  -  	ld (hl),a 
   65 D1:B98E 23 -  -  -  	inc hl
   66 D1:B98F 3E 81 -  -  	ld a,%10000001
   67 D1:B991 77 -  -  -  	ld (hl),a 
   68 D1:B992 23 -  -  -  	inc hl
   69 D1:B993 3E 1F -  -  	ld a,%00011111
   70 D1:B995 77 -  -  -  	ld (hl),a 
   71 D1:B996 23 -  -  -  	inc hl
   72 D1:B997 3E 81 -  -  	ld a,%10000001
   73 D1:B999 77 -  -  -  	ld (hl),a 
   74 D1:B99A 23 -  -  -  	inc hl
   75 D1:B99B 3E 1F -  -  	ld a,%00011111
   76 D1:B99D 77 -  -  -  	ld (hl),a 
   77 D1:B99E 23 -  -  -  	inc hl
   78 D1:B99F 3E 81 -  -  	ld a,%10000001
   79 D1:B9A1 77 -  -  -  	ld (hl),a 
   80 D1:B9A2 23 -  -  -  	inc hl
   81 D1:B9A3 3E 1F -  -  	ld a,%00011111
   82 D1:B9A5 77 -  -  -  	ld (hl),a 
   83 D1:B9A6 23 -  -  -  	inc hl
   84 D1:B9A7 3E 81 -  -  	ld a,%10000001
   85 D1:B9A9 77 -  -  -  	ld (hl),a 
   86 D1:B9AA 23 -  -  -  	inc hl
   87 D1:B9AB 3E C6 -  -  	ld a,%11000110
   88 D1:B9AD 77 -  -  -  	ld (hl),a 
   89 D1:B9AE 23 -  -  -  	inc hl
   90 D1:B9AF 3E 98 -  -  	ld a,%10011000
   91 D1:B9B1 77 -  -  -  	ld (hl),a 
   92 D1:B9B2 23 -  -  -  	inc hl
   93 D1:B9B3 3E 07 -  -  	ld a,%00000111
   94 D1:B9B5 77 -  -  -  	ld (hl),a 
   95 D1:B9B6 23 -  -  -  	inc hl
   96 D1:B9B7 3E 1D -  -  	ld a,%00011101
   97 D1:B9B9 77 -  -  -  	ld (hl),a 
   98 D1:B9BA 23 -  -  -  	inc hl
   99 D1:B9BB C9 -  -  -  	ret 
Listing for file "ascent.asm"
  299 D1:B9BC -  -  -  -  #include "generated/Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Tables.txt"
    1 D1:B9BC -  -  -  -  Sprite_Table_0:
    2 D1:B9BC C1 01 D4 -  	.dl Banana1_Slow_0
    3 D1:B9BF DA 02 D4 -  	.dl Banana1Large_Fast_0
    4 D1:B9C2 6B 05 D4 -  	.dl Banana1_Slow_O_0
    5 D1:B9C5 83 06 D4 -  	.dl Banana1Large_Slow_O_F_0
    6 D1:B9C8 9E 09 D4 -  	.dl Banana1Large_Fast_F_0
    7 D1:B9CB 2F 0C D4 -  	.dl Banana1_Slow_O_F_0
    8 D1:B9CE 47 0D D4 -  	.dl Banana1_Slow_F_0
    9 D1:B9D1 5F 0E D4 -  	.dl Banana1Large_Slow_O_0
   10 D1:B9D4 C1 01 D4 -  	.dl Bluething_Slow_O_0
   11 D1:B9D7 6B 05 D4 -  	.dl Bluething_Slow_0
   12 D1:B9DA 5F 06 D4 -  	.dl Shittlogo_Slow_O_0
   13 D1:B9DD 7B 0B D4 -  	.dl Shittlogo_Slow_0
   14 D1:B9E0 AB 10 D4 -  	.dl Banana1Large_Slow_O_1
   15 D1:B9E3 6B 05 D4 -  	.dl Bluething_Slow_1
   16 D1:B9E6 C1 01 D4 -  	.dl Bluething_Slow_O_1
   17 D1:B9E9 -  -  -  -  
   18 D1:B9E9 -  -  -  -  Sprite_Table_1:
   19 D1:B9E9 -  -  -  -  
Listing for file "ascent.asm"
  300 D1:B9E9 -  -  -  -  #include "generated/Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Data.txt"
    1 D1:B9E9 -  -  -  -  Banana1:
    2 D1:B9E9 20 -  -  -  	.db %00100000
    3 D1:B9EA 18 18 -  -  	.db 24, 24
    4 D1:B9EC E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:B9F4 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:B9FC 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:BA04 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:BA0C 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:BA14 FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:BA1C 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:BA24 FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:BA2C 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:BA34 -  -  -  -  
   14 D1:BA34 21 00 -  -  	.db %00100001, %00000000
   15 D1:BA36 -  -  -  -  
   16 D1:BA36 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:BA3E AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:BA46 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:BA4E A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:BA56 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:BA5E A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:BA66 AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:BA6E 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:BA76 AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:BA7E 55 40 -  -  	.db %01010101, %01000000
   26 D1:BA80 -  -  -  -  
   27 D1:BA80 -  -  -  -  
   28 D1:BA80 -  -  -  -  Banana1Large:
   29 D1:BA80 20 -  -  -  	.db %00100000
   30 D1:BA81 2E 2E -  -  	.db 46, 46
   31 D1:BA83 FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:BA8B 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:BA93 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:BA9B F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:BAA3 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:BAAB 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:BAB3 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:BABB 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:BAC3 FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:BACB 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:BAD3 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:BADB F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:BAE3 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:BAEB FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:BAF3 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:BAFB 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:BB03 FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:BB0B 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:BB13 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:BB1B FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:BB23 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:BB2B FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:BB33 FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:BB3B 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:BB43 FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:BB4B FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:BB53 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:BB5B FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:BB63 C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:BB6B 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:BB73 FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:BB7B 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:BB83 FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:BB8B C0 -  -  -  	.db %11000000
   65 D1:BB8C -  -  -  -  
   66 D1:BB8C 21 00 -  -  	.db %00100001, %00000000
   67 D1:BB8E -  -  -  -  
   68 D1:BB8E 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:BB96 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:BB9E A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:BBA6 AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:BBAE AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:BBB6 A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:BBBE A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:BBC6 AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:BBCE AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:BBD6 A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:BBDE AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:BBE6 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:BBEE AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:BBF6 AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:BBFE A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:BC06 AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:BC0E AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:BC16 AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:BC1E AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:BC26 AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:BC2E AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:BC36 AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:BC3E AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:BC46 AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:BC4E 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:BC56 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:BC5E 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:BC66 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:BC6E A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:BC76 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:BC7E A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:BC86 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:BC8E 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:BC91 -  -  -  -  
  102 D1:BC91 -  -  -  -  
  103 D1:BC91 -  -  -  -  Bluething:
  104 D1:BC91 08 -  -  -  	.db %00001000
  105 D1:BC92 0F 0F -  -  	.db 15, 15
  106 D1:BC94 3F E0 FF E3 
              C1 E7 7D CD 	.db %00111111, %11100000, %11111111, %11100011, %11000001, %11100111, %01111101, %11001101
  107 D1:BC9C 19 DA 39 B6 
              F3 CD 77 9A 	.db %00011001, %11011010, %00111001, %10110110, %11110011, %11001101, %01110111, %10011010
  108 D1:BCA4 EE 7A DC F2 
              38 7C 70 FF 	.db %11101110, %01111010, %11011100, %11110010, %00111000, %01111100, %01110000, %11111111
  109 D1:BCAC C0 7F 80 78 
              00 -  -  -  	.db %11000000, %01111111, %10000000, %01111000, %00000000
  110 D1:BCB1 -  -  -  -  
  111 D1:BCB1 30 -  -  -  	.db %00110000
  112 D1:BCB2 -  -  -  -  
  113 D1:BCB2 -  -  -  -  
  114 D1:BCB2 -  -  -  -  
  115 D1:BCB2 -  -  -  -  Shittlogo:
  116 D1:BCB2 20 -  -  -  	.db %00100000
  117 D1:BCB3 30 30 -  -  	.db 48, 48
  118 D1:BCB5 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  119 D1:BCBD 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  120 D1:BCC5 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  121 D1:BCCD 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  122 D1:BCD5 FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  123 D1:BCDD FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  124 D1:BCE5 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  125 D1:BCED FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  126 D1:BCF5 FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  127 D1:BCFD F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  128 D1:BD05 FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  129 D1:BD0D FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  130 D1:BD15 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  131 D1:BD1D FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  132 D1:BD25 FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  133 D1:BD2D 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  134 D1:BD35 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  135 D1:BD3D FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  136 D1:BD45 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  137 D1:BD4D FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  138 D1:BD55 FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  139 D1:BD5D FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  140 D1:BD65 FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  141 D1:BD6D FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  142 D1:BD75 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  143 D1:BD7D FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  144 D1:BD85 FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  145 D1:BD8D 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  146 D1:BD95 FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  147 D1:BD9D FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  148 D1:BDA5 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  149 D1:BDAD FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  150 D1:BDB5 FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  151 D1:BDBD 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  152 D1:BDC5 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  153 D1:BDCD E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  154 D1:BDD5 -  -  -  -  
  155 D1:BDD5 45 60 -  -  	.db %01000101, %01100000
  156 D1:BDD7 -  -  -  -  
  157 D1:BDD7 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  158 D1:BDDF 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  159 D1:BDE7 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  160 D1:BDEF 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  161 D1:BDF7 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  162 D1:BDFF 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  163 D1:BE07 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  164 D1:BE0F A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  165 D1:BE17 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  166 D1:BE1F 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  167 D1:BE27 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  168 D1:BE2F 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  169 D1:BE37 AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  170 D1:BE3F 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  171 D1:BE47 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  172 D1:BE4F AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  173 D1:BE57 AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  174 D1:BE5F 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  175 D1:BE67 AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  176 D1:BE6F 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  177 D1:BE77 AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  178 D1:BE7F 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  179 D1:BE87 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  180 D1:BE8F 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  181 D1:BE97 AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  182 D1:BE9F A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  183 D1:BEA7 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  184 D1:BEAF AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  185 D1:BEB7 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  186 D1:BEBF AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  187 D1:BEC7 A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  188 D1:BECF 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  189 D1:BED7 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  190 D1:BEDF 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  191 D1:BEE7 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  192 D1:BEEF 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  193 D1:BEF7 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  194 D1:BEFF 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  195 D1:BF07 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  196 D1:BF0F 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  197 D1:BF17 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  198 D1:BF1F A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  199 D1:BF27 AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  200 D1:BF2F 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  201 D1:BF37 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  202 D1:BF3F 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  203 D1:BF47 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  204 D1:BF4F 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  205 D1:BF57 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  206 D1:BF5F 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  207 D1:BF67 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  208 D1:BF6F 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  209 D1:BF77 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  210 D1:BF7C -  -  -  -  
  211 D1:BF7C -  -  -  -  
Listing for file "ascent.asm"
  301 D1:BF7C -  -  -  -  #include "generated/SpriteEquates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\SpriteEquates.txt"
    1 D1:BF7C -  -  -  -  Banana1_Slow_0 .equ 13894081
    2 D1:BF7C -  -  -  -  Banana1Large_Fast_0 .equ 13894362
    3 D1:BF7C -  -  -  -  Banana1_Slow_O_0 .equ 13895019
    4 D1:BF7C -  -  -  -  Banana1Large_Slow_O_F_0 .equ 13895299
    5 D1:BF7C -  -  -  -  Banana1Large_Fast_F_0 .equ 13896094
    6 D1:BF7C -  -  -  -  Banana1_Slow_O_F_0 .equ 13896751
    7 D1:BF7C -  -  -  -  Banana1_Slow_F_0 .equ 13897031
    8 D1:BF7C -  -  -  -  Banana1Large_Slow_O_0 .equ 13897311
    9 D1:BF7C -  -  -  -  Bluething_Slow_O_0 .equ 13894081
   10 D1:BF7C -  -  -  -  Bluething_Slow_0 .equ 13895019
   11 D1:BF7C -  -  -  -  Shittlogo_Slow_O_0 .equ 13895263
   12 D1:BF7C -  -  -  -  Shittlogo_Slow_0 .equ 13896571
   13 D1:BF7C -  -  -  -  Banana1Large_Slow_O_1 .equ 13897899
   14 D1:BF7C -  -  -  -  Bluething_Slow_O_1 .equ 13894081
   15 D1:BF7C -  -  -  -  Bluething_Slow_1 .equ 13895019
Listing for file "ascent.asm"
  302 D1:BF7C -  -  -  -  
  303 D1:BF7C -  -  -  -  
  304 D1:BF7C -  -  -  -  ;
  305 D1:BF7C -  -  -  -  ;#include "TestingSpriteData.txt"
  306 D1:BF7C -  -  -  -  ;#include "TestGeneratedSpriteData.txt"
  307 D1:BF7C -  -  -  -  ;#include "Sprite_Data.txt"
  308 D1:BF7C -  -  -  -  ;#include "FG_Data.txt"
  309 D1:BF7C -  -  -  -  ;#include "MG_Data.txt"
  310 D1:BF7C -  -  -  -  ;#include "BG_Data.txt"
  311 D1:BF7C -  -  -  -  ;#include "Palette_Setup.txt"
  312 D1:BF7C -  -  -  -  ;#include "Equates.txt"
  313 D1:BF7C -  -  -  -  ;#include "Decompress_Calls.txt"
  314 D1:BF7C -  -  -  -  ;#include "Sprite_Tables.txt"
  315 D1:BF7C -  -  -  -  ;#include "TestingBGData.txt"
  316 D1:BF7C -  -  -  -  ;#include "TestingFGData.txt"
  317 D1:BF7C -  -  -  -  
  318 D1:BF7C -  -  -  -  
