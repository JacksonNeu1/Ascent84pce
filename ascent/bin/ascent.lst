    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD 83 D1 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C -  -  -  -  	;call sdcomp_set_offset
   26 D1:A89C CD FD B2 D1 	call sdcomp_set_flip
   27 D1:A8A0 CD 24 B3 D1 	call sdcomp_set_fast
   28 D1:A8A4 21 C3 B7 D1 	ld hl, Test_sprite_fast
   29 D1:A8A8 11 00 00 D4 	ld de,vRam 
   30 D1:A8AC -  -  -  -  	
   31 D1:A8AC CD F3 AF D1 	call sprite_decompress
   32 D1:A8B0 -  -  -  -  	
   33 D1:A8B0 21 00 00 D4 	ld hl,vRam
   34 D1:A8B4 11 00 05 D4 	ld de, vram+(160* 8)	
   35 D1:A8B8 -  -  -  -  	
   36 D1:A8B8 CD 0E AD D1 	call draw_fast_sprite_full
   37 D1:A8BC -  -  -  -  	
   38 D1:A8BC CD 47 AA D1 	call prgmpause
   39 D1:A8C0 -  -  -  -  
   40 D1:A8C0 -  -  -  -  ;	call decompress_calls
   41 D1:A8C0 -  -  -  -  	
   42 D1:A8C0 -  -  -  -  	;gen purp timers
   43 D1:A8C0 -  -  -  -  		; 76543210	
   44 D1:A8C0 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   45 D1:A8C2 32 30 00 F2 	ld ($F20030),a
   46 D1:A8C6 -  -  -  -  	;	  fedcba98
   47 D1:A8C6 3E 02 -  -  	ld a,%00000010;count up
   48 D1:A8C8 32 31 00 F2 	ld ($F20031),a
   49 D1:A8CC -  -  -  -  	
   50 D1:A8CC 21 00 2C D5 	ld hl,vRam + (160*240*2)
   51 D1:A8D0 22 58 AA D1 	ld (draw_buffer),hl
   52 D1:A8D4 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   53 D1:A8D8 22 10 00 E3 	ld (mpLcdBase),hl
   54 D1:A8DC -  -  -  -  	
   55 D1:A8DC 21 00 00 00 	ld hl,0
   56 D1:A8E0 22 52 AA D1 	ld (cam_pos),hl
   57 D1:A8E4 -  -  -  -  
   58 D1:A8E4 CD A3 AB D1 	call setup_bg
   59 D1:A8E8 -  -  -  -  
   60 D1:A8E8 -  -  -  -  	;call draw_bg
   61 D1:A8E8 -  -  -  -  	
   62 D1:A8E8 -  -  -  -  	
   63 D1:A8E8 -  -  -  -  main_loop:
   64 D1:A8E8 -  -  -  -  	;clear timer
   65 D1:A8E8 3E 00 -  -  	ld a,0
   66 D1:A8EA 32 00 00 F2 	ld ($F20000),a;32768hz
   67 D1:A8EE 32 01 00 F2 	ld ($F20001),a;128hz
   68 D1:A8F2 32 02 00 F2 	ld ($F20002),a;0.5hz
   69 D1:A8F6 32 03 00 F2 	ld ($F20003),a
   70 D1:A8FA -  -  -  -  	
   71 D1:A8FA -  -  -  -  	;Instructions here 
   72 D1:A8FA CD B3 AA D1 	call draw_bg
   73 D1:A8FE -  -  -  -  	
   74 D1:A8FE CD 33 B3 D1 	call draw_mg
   75 D1:A902 -  -  -  -  	
   76 D1:A902 CD 82 B3 D1 	call draw_fg
   77 D1:A906 -  -  -  -  	
   78 D1:A906 21 00 00 00 	ld hl,0
   79 D1:A90A -  -  -  -  	
   80 D1:A90A -  -  -  -  	; for debug longest frame draw time
   81 D1:A90A 3A 00 00 F2 	ld a,($F20000)
   82 D1:A90E 6F -  -  -  	ld l,a
   83 D1:A90F 3A 01 00 F2 	ld a,($F20001);128hz 
   84 D1:A913 67 -  -  -  	ld h,a
   85 D1:A914 E5 -  -  -  	push hl
   86 D1:A915 ED 4B 5E AA 
              D1 -  -  -  	ld bc,(longestFrame)
   87 D1:A91A ED 42 -  -  	sbc hl,bc 
   88 D1:A91C DA 2E A9 D1 	jp c,longest_frame_skip
   89 D1:A920 -  -  -  -  	
   90 D1:A920 E1 -  -  -  	pop hl 
   91 D1:A921 E5 -  -  -  	push hl 
   92 D1:A922 22 5E AA D1 	ld (longestFrame),hl 
   93 D1:A926 2A 52 AA D1 	ld hl,(cam_pos)
   94 D1:A92A 22 61 AA D1 	ld (longestFramePos),hl
   95 D1:A92E -  -  -  -  longest_frame_skip:
   96 D1:A92E E1 -  -  -  	pop hl 
   97 D1:A92F -  -  -  -  	
   98 D1:A92F -  -  -  -  		
   99 D1:A92F 2A 67 AA D1 	ld hl,(frameCount)
  100 D1:A933 23 -  -  -  	inc hl
  101 D1:A934 22 67 AA D1 	ld (frameCount),hl
  102 D1:A938 -  -  -  -  	
  103 D1:A938 -  -  -  -  	;swap draw buffers
  104 D1:A938 2A 10 00 E3 	ld hl,(mpLcdBase)
  105 D1:A93C ED 5B 58 AA 
              D1 -  -  -  	ld de,(draw_buffer)
  106 D1:A941 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  107 D1:A946 22 58 AA D1 	ld (draw_buffer),hl
  108 D1:A94A -  -  -  -  	
  109 D1:A94A -  -  -  -  	;check if lcd has drawn first frame
  110 D1:A94A -  -  -  -  clock_check_loop:
  111 D1:A94A -  -  -  -  
  112 D1:A94A -  -  -  -  
  113 D1:A94A -  -  -  -  	;Sprite decompression will occur here
  114 D1:A94A -  -  -  -  
  115 D1:A94A 3A 01 00 F2 	ld a,($F20001);128hz clock
  116 D1:A94E FE 03 -  -  	cp 3;check if reached 3 
  117 D1:A950 DA 4A A9 D1 	jp c,clock_check_loop
  118 D1:A954 -  -  -  -  	
  119 D1:A954 -  -  -  -  	;wait until finished drawing second frame
  120 D1:A954 -  -  -  -  
  121 D1:A954 -  -  -  -  clear_int:      
  122 D1:A954 21 28 00 E3     ld hl, mpLcdIcr
  123 D1:A958 CB D6 -  -      set 2, (hl)            ; clear interrupt
  124 D1:A95A 21 20 00 E3     ld hl, mpLcdRis
  125 D1:A95E -  -  -  -  wait_int:
  126 D1:A95E CB 56 -  -      bit 2, (hl)
  127 D1:A960 28 FC -  -      jr z, wait_int  
  128 D1:A962 -  -  -  -  
  129 D1:A962 -  -  -  -  
  130 D1:A962 21 00 00 00 	ld hl,0
  131 D1:A966 -  -  -  -  	
  132 D1:A966 3A 02 00 F2 	ld a,($F20002)
  133 D1:A96A 67 -  -  -  	ld h,a
  134 D1:A96B 3A 01 00 F2 	ld a,($F20001)
  135 D1:A96F 6F -  -  -  	ld l,a
  136 D1:A970 ED 4B 64 AA 
              D1 -  -  -  	ld bc,(totalTime)
  137 D1:A975 09 -  -  -  	add hl,bc 
  138 D1:A976 22 64 AA D1 	ld (totalTime),hl 
  139 D1:A97A -  -  -  -  	
  140 D1:A97A -  -  -  -  	;Move cam
  141 D1:A97A 2A 52 AA D1 	ld hl,(cam_pos)
  142 D1:A97E 23 -  -  -  	inc hl
  143 D1:A97F 23 -  -  -  	inc hl
  144 D1:A980 23 -  -  -  	inc hl
  145 D1:A981 23 -  -  -  	inc hl
  146 D1:A982 23 -  -  -  	inc hl
  147 D1:A983 23 -  -  -  	inc hl
  148 D1:A984 23 -  -  -  	inc hl
  149 D1:A985 23 -  -  -  	inc hl
  150 D1:A986 22 52 AA D1 	ld (cam_pos),hl
  151 D1:A98A 01 EF 00 00 	ld bc,239
  152 D1:A98E 09 -  -  -  	add hl,bc 
  153 D1:A98F 7C -  -  -  	ld a,h ;msb 
  154 D1:A990 FE 23 -  -  	cp 35
  155 D1:A992 C2 E8 A8 D1 	jp nz,main_loop
  156 D1:A996 -  -  -  -  		
  157 D1:A996 -  -  -  -  	;print debug times 
  158 D1:A996 21 00 00 D4 	ld hl,vRam
  159 D1:A99A 22 10 00 E3 	ld (mpLcdBase),hl
  160 D1:A99E CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  161 D1:A9A2 3E 2D -  -  	ld	a,lcdBpp16
  162 D1:A9A4 32 18 00 E3 	ld (mpLcdCtrl),a
  163 D1:A9A8 -  -  -  -  	
  164 D1:A9A8 3E 00 -  -  	ld a,0
  165 D1:A9AA 32 95 05 D0 	ld (curRow),a
  166 D1:A9AE 32 96 05 D0 	ld (curCol),a
  167 D1:A9B2 2A 5E AA D1 	ld hl,(longestFrame)
  168 D1:A9B6 CD E0 1E 02 	call _DispHL
  169 D1:A9BA 3E 01 -  -  	ld a,1
  170 D1:A9BC 32 95 05 D0 	ld (curRow),a
  171 D1:A9C0 3E 00 -  -  	ld a,0
  172 D1:A9C2 32 96 05 D0 	ld (curCol),a
  173 D1:A9C6 2A 61 AA D1 	ld hl,(longestFramePos)
  174 D1:A9CA CD E0 1E 02 	call _DispHL
  175 D1:A9CE 3E 02 -  -  	ld a,2
  176 D1:A9D0 32 95 05 D0 	ld (curRow),a
  177 D1:A9D4 3E 00 -  -  	ld a,0
  178 D1:A9D6 32 96 05 D0 	ld (curCol),a
  179 D1:A9DA 2A 64 AA D1 	ld hl,(totalTime)
  180 D1:A9DE CD E0 1E 02 	call _DispHL
  181 D1:A9E2 3E 03 -  -  	ld a,3
  182 D1:A9E4 32 95 05 D0 	ld (curRow),a
  183 D1:A9E8 3E 00 -  -  	ld a,0
  184 D1:A9EA 32 96 05 D0 	ld (curCol),a
  185 D1:A9EE 2A 67 AA D1 	ld hl,(frameCount)
  186 D1:A9F2 CD E0 1E 02 	call _DispHL
  187 D1:A9F6 -  -  -  -  	
  188 D1:A9F6 CD 47 AA D1 	call prgmpause
  189 D1:A9FA CD 47 AA D1 	call prgmpause
  190 D1:A9FE -  -  -  -  	
  191 D1:A9FE -  -  -  -  	
  192 D1:A9FE -  -  -  -  exit_prgm:
  193 D1:A9FE 21 00 00 D4 	ld hl,vRam
  194 D1:AA02 22 10 00 E3 	ld (mpLcdBase),hl
  195 D1:AA06 CD 10 08 02 	call _ClrScrnFull
  196 D1:AA0A 3E 2D -  -  	ld	a,lcdBpp16
  197 D1:AA0C 32 18 00 E3 	ld	(mpLcdCtrl),a
  198 D1:AA10 CD 3C 1A 02 	call _DrawStatusBar
  199 D1:AA14 -  -  -  -  	
  200 D1:AA14 FB -  -  -  	ei				; reset screen back to normal
  201 D1:AA15 C9 -  -  -  	ret			; return to os
  202 D1:AA16 -  -  -  -  
  203 D1:AA16 -  -  -  -  
  204 D1:AA16 -  -  -  -  printHL:;=================REMOVE
  205 D1:AA16 E5 -  -  -  	push hl
  206 D1:AA17 21 00 00 D4 	ld hl,vRam
  207 D1:AA1B 22 10 00 E3 	ld (mpLcdBase),hl
  208 D1:AA1F CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  209 D1:AA23 3E 2D -  -  	ld	a,lcdBpp16
  210 D1:AA25 32 18 00 E3 	ld (mpLcdCtrl),a
  211 D1:AA29 E1 -  -  -  	pop hl
  212 D1:AA2A CD E0 1E 02 	call _DispHL
  213 D1:AA2E FB -  -  -  	ei
  214 D1:AA2F CD 8C 0D 02 	call _GetKey
  215 D1:AA33 F3 -  -  -  	di
  216 D1:AA34 C3 FE A9 D1 	jp exit_prgm
  217 D1:AA38 -  -  -  -  
  218 D1:AA38 -  -  -  -  
  219 D1:AA38 -  -  -  -  write_a_to_ram:
  220 D1:AA38 F5 -  -  -  	push af 
  221 D1:AA39 E5 -  -  -  	push hl 
  222 D1:AA3A -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  223 D1:AA3A 21 00 10 D4 	ld hl, $d41000
  224 D1:AA3E 77 -  -  -  	ld (hl),a 
  225 D1:AA3F 23 -  -  -  	inc hl 
  226 D1:AA40 22 3B AA D1 	ld (write_a_to_ram_addr),hl 
  227 D1:AA44 E1 -  -  -  	pop hl 
  228 D1:AA45 F1 -  -  -  	pop af 
  229 D1:AA46 C9 -  -  -  	ret 
  230 D1:AA47 -  -  -  -  
  231 D1:AA47 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  232 D1:AA47 D5 -  -  -  	push de 
  233 D1:AA48 E5 -  -  -  	push hl 
  234 D1:AA49 FB -  -  -  	ei
  235 D1:AA4A CD 8C 0D 02 	call _GetKey
  236 D1:AA4E F3 -  -  -  	di
  237 D1:AA4F E1 -  -  -  	pop hl 
  238 D1:AA50 D1 -  -  -  	pop de 
  239 D1:AA51 C9 -  -  -  	ret
  240 D1:AA52 -  -  -  -  
  241 D1:AA52 -  -  -  -  cam_pos:;bottom of cam
  242 D1:AA52 00 00 00 -  	.dl 0
  243 D1:AA55 -  -  -  -  bg_cam_pos:
  244 D1:AA55 00 00 00 -  	.dl 0
  245 D1:AA58 -  -  -  -  
  246 D1:AA58 -  -  -  -  
  247 D1:AA58 -  -  -  -  draw_buffer:
  248 D1:AA58 00 00 00 -  	.dl 0
  249 D1:AA5B -  -  -  -  BG_draw_buffer:;uppermost line of bg in vram
  250 D1:AA5B 00 00 00 -  	.dl 0
  251 D1:AA5E -  -  -  -  BG_buffer .equ vram + (160*240)
  252 D1:AA5E -  -  -  -  
  253 D1:AA5E -  -  -  -  
  254 D1:AA5E -  -  -  -  longestFrame:
  255 D1:AA5E 00 00 00 -  	.dl 0
  256 D1:AA61 -  -  -  -  longestFramePos:
  257 D1:AA61 00 00 00 -  	.dl 0
  258 D1:AA64 -  -  -  -  totalTime:
  259 D1:AA64 00 00 00 -  	.dl 0
  260 D1:AA67 -  -  -  -  frameCount:
  261 D1:AA67 00 00 00 -  	.dl 0
  262 D1:AA6A -  -  -  -  hasLagged:
  263 D1:AA6A 00 00 00 -  	.dl 0
  264 D1:AA6D -  -  -  -  
  265 D1:AA6D -  -  -  -  
  266 D1:AA6D -  -  -  -  
  267 D1:AA6D -  -  -  -  
  268 D1:AA6D -  -  -  -  
  269 D1:AA6D -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA6D -  -  -  -  
    2 D1:AA6D -  -  -  -  
    3 D1:AA6D -  -  -  -  
    4 D1:AA6D -  -  -  -  time_test_start:
    5 D1:AA6D -  -  -  -  
    6 D1:AA6D -  -  -  -  		; 76543210	
    7 D1:AA6D 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AA6F 32 30 00 F2 	ld ($F20030),a
    9 D1:AA73 -  -  -  -  	;	  fedcba98
   10 D1:AA73 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AA75 32 31 00 F2 	ld ($F20031),a
   12 D1:AA79 3E 00 -  -  	ld a,0
   13 D1:AA7B 32 00 00 F2 	ld ($F20000),a
   14 D1:AA7F 32 01 00 F2 	ld ($F20001),a
   15 D1:AA83 32 02 00 F2 	ld ($F20002),a
   16 D1:AA87 32 03 00 F2 	ld ($F20003),a
   17 D1:AA8B -  -  -  -  	
   18 D1:AA8B 21 2C 01 00 	ld hl,300
   19 D1:AA8F -  -  -  -  	
   20 D1:AA8F -  -  -  -  time_testing_loop:
   21 D1:AA8F E5 -  -  -  	push hl
   22 D1:AA90 01 E8 03 00 	ld bc,1000
   23 D1:AA94 -  -  -  -  time_testing_loop_2:
   24 D1:AA94 C5 -  -  -  	push bc
   25 D1:AA95 -  -  -  -  	;instruction here
   26 D1:AA95 -  -  -  -  	
   27 D1:AA95 -  -  -  -  	
   28 D1:AA95 -  -  -  -  	;Instruction end
   29 D1:AA95 C1 -  -  -  	pop bc
   30 D1:AA96 0B -  -  -  	dec bc
   31 D1:AA97 79 -  -  -  	ld a,c
   32 D1:AA98 B0 -  -  -  	or b
   33 D1:AA99 C2 94 AA D1 	jp nz,time_testing_loop_2
   34 D1:AA9D E1 -  -  -  	pop hl
   35 D1:AA9E 2B -  -  -  	dec hl
   36 D1:AA9F 7D -  -  -  	ld a,l
   37 D1:AAA0 B4 -  -  -  	or h
   38 D1:AAA1 C2 8F AA D1 	jp nz,time_testing_loop
   39 D1:AAA5 -  -  -  -  	
   40 D1:AAA5 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AAA9 6F -  -  -  	ld l,a
   42 D1:AAAA 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AAAE 67 -  -  -  	ld h,a
   44 D1:AAAF C3 16 AA D1 	jp printHL;div by 128 for time
   45 D1:AAB3 -  -  -  -  	
   46 D1:AAB3 -  -  -  -  
   47 D1:AAB3 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AAB3 -  -  -  -  
   49 D1:AAB3 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AAB3 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AAB3 -  -  -  -  
   52 D1:AAB3 -  -  -  -  
   53 D1:AAB3 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AAB3 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AAB3 -  -  -  -  
   56 D1:AAB3 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AAB3 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AAB3 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AAB3 -  -  -  -  ;.24 screens/frame
   60 D1:AAB3 -  -  -  -  
   61 D1:AAB3 -  -  -  -  
   62 D1:AAB3 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AAB3 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AAB3 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AAB3 -  -  -  -  ;.446 screens/frame
   66 D1:AAB3 -  -  -  -  
   67 D1:AAB3 -  -  -  -  
   68 D1:AAB3 -  -  -  -  
   69 D1:AAB3 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AAB3 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AAB3 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AAB3 -  -  -  -  ;.78 screens/frame
   73 D1:AAB3 -  -  -  -  
   74 D1:AAB3 -  -  -  -  
   75 D1:AAB3 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AAB3 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AAB3 -  -  -  -  ;.47 = FAST
   78 D1:AAB3 -  -  -  -  
   79 D1:AAB3 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AAB3 -  -  -  -  
   81 D1:AAB3 -  -  -  -  
   82 D1:AAB3 -  -  -  -  
   83 D1:AAB3 -  -  -  -  
   84 D1:AAB3 -  -  -  -  
   85 D1:AAB3 -  -  -  -  
   86 D1:AAB3 -  -  -  -  
   87 D1:AAB3 -  -  -  -  
   88 D1:AAB3 -  -  -  -  
Listing for file "ascent.asm"
  270 D1:AAB3 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AAB3 -  -  -  -  
    2 D1:AAB3 -  -  -  -  draw_bg:
    3 D1:AAB3 CD E7 AA D1 	call move_bg
    4 D1:AAB7 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    5 D1:AABB ED 4B 5B AA 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
    6 D1:AAC0 37 -  -  -  	scf 
    7 D1:AAC1 3F -  -  -  	ccf 
    8 D1:AAC2 ED 42 -  -  	sbc hl,bc
    9 D1:AAC4 E5 -  -  -  	push hl 
   10 D1:AAC5 C1 -  -  -  	pop bc
   11 D1:AAC6 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   12 D1:AACA ED 5B 58 AA 
              D1 -  -  -  	ld de,(draw_buffer)
   13 D1:AACF ED B0 -  -  	ldir
   14 D1:AAD1 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   15 D1:AAD5 01 00 96 D4 	ld bc,BG_buffer
   16 D1:AAD9 37 -  -  -  	scf 
   17 D1:AADA 3F -  -  -  	ccf 
   18 D1:AADB ED 42 -  -  	sbc hl,bc
   19 D1:AADD C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   20 D1:AADE E5 -  -  -  	push hl 
   21 D1:AADF C1 -  -  -  	pop bc
   22 D1:AAE0 21 00 96 D4 	ld hl,BG_buffer 
   23 D1:AAE4 ED B0 -  -  	ldir 
   24 D1:AAE6 C9 -  -  -  	ret 
   25 D1:AAE7 -  -  -  -  	
   26 D1:AAE7 -  -  -  -  move_bg:
   27 D1:AAE7 2A 52 AA D1 	ld hl,(cam_pos)
   28 D1:AAEB CB 3C -  -  	srl h
   29 D1:AAED CB 1D -  -  	rr l
   30 D1:AAEF CB 3C -  -  	srl h
   31 D1:AAF1 CB 1D -  -  	rr l ;div by 4
   32 D1:AAF3 -  -  -  -  	;hl holds bg cam pos 
   33 D1:AAF3 01 EF 00 00 	ld bc,239
   34 D1:AAF7 09 -  -  -  	add hl,bc;add 0 pos  
   35 D1:AAF8 ED 4B 55 AA 
              D1 -  -  -  	ld bc,(bg_cam_pos)
   36 D1:AAFD ED 42 -  -  	sbc hl,bc 
   37 D1:AAFF C8 -  -  -  	ret z 
   38 D1:AB00 DA 0C AB D1 	jp c,move_bg_down
   39 D1:AB04 CD 5D AB D1 	call inc_bg
   40 D1:AB08 C3 E7 AA D1 	jp move_bg
   41 D1:AB0C -  -  -  -  move_bg_down:
   42 D1:AB0C CD 14 AB D1 	call dec_bg
   43 D1:AB10 C3 E7 AA D1 	jp move_bg
   44 D1:AB14 -  -  -  -  
   45 D1:AB14 -  -  -  -  
   46 D1:AB14 -  -  -  -  dec_bg:;move cam down
   47 D1:AB14 -  -  -  -  	;write on draw buffer line 
   48 D1:AB14 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   49 D1:AB18 22 91 AC D1 	ld (dbgl_vram_line_start),hl 
   50 D1:AB1C -  -  -  -  	
   51 D1:AB1C 2A 55 AA D1 	ld hl,(bg_cam_pos)
   52 D1:AB20 2B -  -  -  	dec hl 
   53 D1:AB21 22 55 AA D1 	ld (bg_cam_pos),hl 
   54 D1:AB25 01 EF 00 00 	ld bc,239
   55 D1:AB29 ED 42 -  -  	sbc hl,bc;bottom row of bc
   56 D1:AB2B 4C -  -  -  	ld c,h;cam pos msb 
   57 D1:AB2C 7D -  -  -  	ld a,l 
   58 D1:AB2D 21 40 CE D1 	ld hl,BG_Data_frame_table
   59 D1:AB31 0C -  -  -  	inc c 
   60 D1:AB32 09 -  -  -  	add hl,bc 
   61 D1:AB33 09 -  -  -  	add hl,bc 
   62 D1:AB34 09 -  -  -  	add hl,bc 
   63 D1:AB35 ED 27 -  -  	ld hl,(hl)
   64 D1:AB37 CD F0 AB D1 	call draw_bg_line
   65 D1:AB3B -  -  -  -  	;move buffer pos
   66 D1:AB3B 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   67 D1:AB3F 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end
   68 D1:AB43 37 -  -  -  	scf 
   69 D1:AB44 3F -  -  -  	ccf 
   70 D1:AB45 ED 42 -  -  	sbc hl,bc
   71 D1:AB47 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   72 D1:AB4B C2 53 AB D1 	jp nz,dec_bg_bottom_skip
   73 D1:AB4F 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   74 D1:AB53 -  -  -  -  dec_bg_bottom_skip:
   75 D1:AB53 01 A0 00 00 	ld bc,160 
   76 D1:AB57 09 -  -  -  	add hl,bc
   77 D1:AB58 22 5B AA D1 	ld (BG_draw_buffer),hl 
   78 D1:AB5C C9 -  -  -  	ret
   79 D1:AB5D -  -  -  -  
   80 D1:AB5D -  -  -  -  
   81 D1:AB5D -  -  -  -  inc_bg:;move cam up 
   82 D1:AB5D 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   83 D1:AB61 01 00 96 D4 	ld bc,$d49600;BG_buffer_start
   84 D1:AB65 37 -  -  -  	scf 
   85 D1:AB66 3F -  -  -  	ccf 
   86 D1:AB67 ED 42 -  -  	sbc hl,bc
   87 D1:AB69 2A 5B AA D1 	ld hl,(BG_draw_buffer)
   88 D1:AB6D C2 75 AB D1 	jp nz,inc_bg_top_skip
   89 D1:AB71 21 00 2C D5 	ld hl,$d52c00;1 below bottom of bg buffer 
   90 D1:AB75 -  -  -  -  inc_bg_top_skip:
   91 D1:AB75 01 A0 00 00 	ld bc,160 
   92 D1:AB79 37 -  -  -  	scf
   93 D1:AB7A 3F -  -  -  	ccf 
   94 D1:AB7B ED 42 -  -  	sbc hl,bc ;move up line 
   95 D1:AB7D 22 5B AA D1 	ld (BG_draw_buffer),hl 
   96 D1:AB81 22 91 AC D1 	ld (dbgl_vram_line_start),hl 
   97 D1:AB85 2A 55 AA D1 	ld hl,(bg_cam_pos)
   98 D1:AB89 23 -  -  -  	inc hl 
   99 D1:AB8A 22 55 AA D1 	ld (bg_cam_pos),hl 
  100 D1:AB8E 01 00 00 00 	ld bc,0
  101 D1:AB92 4C -  -  -  	ld c,h;cam pos msb 
  102 D1:AB93 7D -  -  -  	ld a,l 
  103 D1:AB94 21 40 CE D1 	ld hl,BG_Data_frame_table
  104 D1:AB98 0C -  -  -  	inc c 
  105 D1:AB99 09 -  -  -  	add hl,bc 
  106 D1:AB9A 09 -  -  -  	add hl,bc 
  107 D1:AB9B 09 -  -  -  	add hl,bc 
  108 D1:AB9C ED 27 -  -  	ld hl,(hl)
  109 D1:AB9E CD F0 AB D1 	call draw_bg_line
  110 D1:ABA2 C9 -  -  -  	ret
  111 D1:ABA3 -  -  -  -  	
  112 D1:ABA3 -  -  -  -  
  113 D1:ABA3 -  -  -  -  
  114 D1:ABA3 -  -  -  -  
  115 D1:ABA3 -  -  -  -  
  116 D1:ABA3 -  -  -  -  setup_bg:
  117 D1:ABA3 2A 52 AA D1 	ld hl,(cam_pos)
  118 D1:ABA7 CB 3C -  -  	srl h
  119 D1:ABA9 CB 1D -  -  	rr l
  120 D1:ABAB CB 3C -  -  	srl h
  121 D1:ABAD CB 1D -  -  	rr l ;div by 4
  122 D1:ABAF -  -  -  -  	;hl holds bg cam pos 
  123 D1:ABAF 01 EF 00 00 	ld bc,239
  124 D1:ABB3 09 -  -  -  	add hl,bc;add 0 pos  
  125 D1:ABB4 22 55 AA D1 	ld (bg_cam_pos),hl
  126 D1:ABB8 23 -  -  -  	inc hl;to be dec in loop
  127 D1:ABB9 E5 -  -  -  	push hl 
  128 D1:ABBA 21 00 96 D4 	ld hl,BG_buffer 
  129 D1:ABBE 22 5B AA D1 	ld (BG_draw_buffer),hl
  130 D1:ABC2 E5 -  -  -  	push hl 
  131 D1:ABC3 D9 -  -  -  	exx
  132 D1:ABC4 06 F0 -  -  	ld b,240
  133 D1:ABC6 -  -  -  -  	
  134 D1:ABC6 -  -  -  -  setup_bg_loop:
  135 D1:ABC6 D9 -  -  -  	exx
  136 D1:ABC7 E1 -  -  -  	pop hl;vram draw pos 
  137 D1:ABC8 22 91 AC D1 	ld (dbgl_vram_line_start),hl 
  138 D1:ABCC 01 A0 00 00 	ld bc,160
  139 D1:ABD0 09 -  -  -  	add hl,bc 
  140 D1:ABD1 EB -  -  -  	ex de,hl ;put vram pos in de 
  141 D1:ABD2 E1 -  -  -  	pop hl;cam pos
  142 D1:ABD3 2B -  -  -  	dec hl 
  143 D1:ABD4 E5 -  -  -  	push hl;push cam pos 
  144 D1:ABD5 D5 -  -  -  	push de ;push vram pos 
  145 D1:ABD6 01 00 00 00 	ld bc,0
  146 D1:ABDA 4C -  -  -  	ld c,h;cam pos msb 
  147 D1:ABDB 7D -  -  -  	ld a,l 
  148 D1:ABDC 21 40 CE D1 	ld hl,BG_Data_frame_table
  149 D1:ABE0 0C -  -  -  	inc c 
  150 D1:ABE1 09 -  -  -  	add hl,bc 
  151 D1:ABE2 09 -  -  -  	add hl,bc 
  152 D1:ABE3 09 -  -  -  	add hl,bc 
  153 D1:ABE4 ED 27 -  -  	ld hl,(hl)
  154 D1:ABE6 CD F0 AB D1 	call draw_bg_line
  155 D1:ABEA D9 -  -  -  	exx 
  156 D1:ABEB 10 D9 -  -  	djnz setup_bg_loop
  157 D1:ABED E1 -  -  -  	pop hl 
  158 D1:ABEE E1 -  -  -  	pop hl 
  159 D1:ABEF C9 -  -  -  	ret 
  160 D1:ABF0 -  -  -  -  
  161 D1:ABF0 -  -  -  -  
  162 D1:ABF0 -  -  -  -  
  163 D1:ABF0 -  -  -  -  
  164 D1:ABF0 -  -  -  -  
  165 D1:ABF0 -  -  -  -  
  166 D1:ABF0 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  167 D1:ABF0 -  -  -  -  ;set dbgl_vram_line_start 
  168 D1:ABF0 -  -  -  -  draw_bg_line:
  169 D1:ABF0 E5 -  -  -  	push hl 
  170 D1:ABF1 F5 -  -  -  	push af 
  171 D1:ABF2 3E FF -  -  	ld a,$ff
  172 D1:ABF4 01 A0 00 00 	ld bc,160
  173 D1:ABF8 2A 91 AC D1 	ld hl,(dbgl_vram_line_start)
  174 D1:ABFC CD E0 10 02 	call _MemSet 
  175 D1:AC00 F1 -  -  -  	pop af 
  176 D1:AC01 E1 -  -  -  	pop hl
  177 D1:AC02 -  -  -  -  
  178 D1:AC02 32 28 AC D1 	ld (dbgl_line_num),a
  179 D1:AC06 32 65 AC D1 	ld (dbgl_line_num_2),a
  180 D1:AC0A ED 17 -  -  	ld de,(hl)
  181 D1:AC0C ED 53 97 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
  182 D1:AC11 23 -  -  -  	inc hl
  183 D1:AC12 23 -  -  -  	inc hl
  184 D1:AC13 23 -  -  -  	inc hl ;to frame data start 
  185 D1:AC14 08 -  -  -  	ex af,af' ;'
  186 D1:AC15 7E -  -  -  	ld a,(hl);number of elements
  187 D1:AC16 08 -  -  -  	ex af,af' ;'
  188 D1:AC17 23 -  -  -  	inc hl 
  189 D1:AC18 -  -  -  -  	
  190 D1:AC18 11 00 00 00 	ld de,0
  191 D1:AC1C 01 00 00 00 	ld bc,0
  192 D1:AC20 -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
  193 D1:AC20 -  -  -  -  dbgl_upper_loop:
  194 D1:AC20 7E -  -  -  	ld a,(hl);y
  195 D1:AC21 23 -  -  -  	inc hl;to height
  196 D1:AC22 96 -  -  -  	sub (hl);subtract height
  197 D1:AC23 -  -  -  -  	;a is y value of bottom row of sprite
  198 D1:AC23 D2 31 AC D1 	jp nc,dbgl_upper_skip;if no carry into next frame
  199 D1:AC27 -  -  -  -  	;sprite extends into target frame
  200 D1:AC27 -  -  -  -  dbgl_line_num .equ $ + 1
  201 D1:AC27 D6 00 -  -  	sub 0 ;compare to line number in target frame
  202 D1:AC29 DA 3F AC D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
  203 D1:AC2D CA 3F AC D1 	jp z,dbgl_upper_cont;if = bottom row
  204 D1:AC31 -  -  -  -  dbgl_upper_skip:
  205 D1:AC31 23 -  -  -  	inc hl;to x
  206 D1:AC32 23 -  -  -  	inc hl;to index 
  207 D1:AC33 23 -  -  -  	inc hl;to y
  208 D1:AC34 08 -  -  -  	ex af,af';'
  209 D1:AC35 3D -  -  -  	dec a 
  210 D1:AC36 CA 50 AC D1 	jp z,dbgl_lower_start 
  211 D1:AC3A 08 -  -  -  	ex af,af';'
  212 D1:AC3B C3 20 AC D1 	jp dbgl_upper_loop
  213 D1:AC3F -  -  -  -  	
  214 D1:AC3F -  -  -  -  dbgl_upper_cont:
  215 D1:AC3F -  -  -  -  	;a = bottom row - linenum
  216 D1:AC3F 86 -  -  -  	add a,(hl);add height-1 
  217 D1:AC40 -  -  -  -  	;a holds 0 indexed line num within sprite
  218 D1:AC40 CD 8B AC D1 	call dbgl_setup_and_draw
  219 D1:AC44 23 -  -  -  	inc hl;to y
  220 D1:AC45 08 -  -  -  	ex af,af';'
  221 D1:AC46 3D -  -  -  	dec a 
  222 D1:AC47 CA 50 AC D1 	jp z,dbgl_lower_start 
  223 D1:AC4B 08 -  -  -  	ex af,af';'
  224 D1:AC4C C3 20 AC D1 	jp dbgl_upper_loop
  225 D1:AC50 -  -  -  -  	
  226 D1:AC50 -  -  -  -  dbgl_lower_start:
  227 D1:AC50 -  -  -  -  ;LOWER FRAME START 
  228 D1:AC50 -  -  -  -  	;hl pointing to sprite data table 
  229 D1:AC50 ED 17 -  -  	ld de,(hl)
  230 D1:AC52 ED 53 97 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
  231 D1:AC57 11 00 00 00 	ld de,0
  232 D1:AC5B 23 -  -  -  	inc hl
  233 D1:AC5C 23 -  -  -  	inc hl
  234 D1:AC5D 23 -  -  -  	inc hl;to num elements
  235 D1:AC5E -  -  -  -  	
  236 D1:AC5E 08 -  -  -  	ex af,af' ;'
  237 D1:AC5F 7E -  -  -  	ld a,(hl);number of elements
  238 D1:AC60 08 -  -  -  	ex af,af' ;'
  239 D1:AC61 23 -  -  -  	inc hl ;to y
  240 D1:AC62 -  -  -  -  	
  241 D1:AC62 -  -  -  -  dbgl_lower_loop:
  242 D1:AC62 7E -  -  -  	ld a,(hl)
  243 D1:AC63 23 -  -  -  	inc hl;to height-1
  244 D1:AC64 -  -  -  -  dbgl_line_num_2 .equ $ + 1
  245 D1:AC64 D6 00 -  -  	sub 0;subtract line num 
  246 D1:AC66 DA 73 AC D1 	jp c,dbgl_lower_skip;target line num is above sprite 
  247 D1:AC6A -  -  -  -  	;target is below or = sprite y value 
  248 D1:AC6A -  -  -  -  	;a holds 0 indexed sprite row 
  249 D1:AC6A BE -  -  -  	cp (hl);compare to height
  250 D1:AC6B DA 7E AC D1 	jp c,dbgl_lower_cont ;if height >= a 
  251 D1:AC6F CA 7E AC D1 	jp z,dbgl_lower_cont
  252 D1:AC73 -  -  -  -  dbgl_lower_skip:
  253 D1:AC73 23 -  -  -  	inc hl;to x  
  254 D1:AC74 23 -  -  -  	inc hl; to index
  255 D1:AC75 23 -  -  -  	inc hl;to y
  256 D1:AC76 08 -  -  -  	ex af,af';'
  257 D1:AC77 3D -  -  -  	dec a 
  258 D1:AC78 C8 -  -  -  	ret z 
  259 D1:AC79 08 -  -  -  	ex af,af';'
  260 D1:AC7A C3 62 AC D1 	jp dbgl_lower_loop
  261 D1:AC7E -  -  -  -  dbgl_lower_cont:
  262 D1:AC7E -  -  -  -  
  263 D1:AC7E CD 8B AC D1 	call dbgl_setup_and_draw
  264 D1:AC82 23 -  -  -  	inc hl;to y
  265 D1:AC83 08 -  -  -  	ex af,af';'
  266 D1:AC84 3D -  -  -  	dec a 
  267 D1:AC85 C8 -  -  -  	ret z 
  268 D1:AC86 08 -  -  -  	ex af,af';'
  269 D1:AC87 C3 62 AC D1 	jp dbgl_lower_loop
  270 D1:AC8B -  -  -  -  
  271 D1:AC8B -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
  272 D1:AC8B -  -  -  -  dbgl_setup_and_draw:
  273 D1:AC8B 23 -  -  -  	inc hl;to x pos
  274 D1:AC8C 5E -  -  -  	ld e,(hl)
  275 D1:AC8D 23 -  -  -  	inc hl 
  276 D1:AC8E 4E -  -  -  	ld c,(hl);sprite index 
  277 D1:AC8F E5 -  -  -  	push hl
  278 D1:AC90 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  279 D1:AC90 21 00 00 00 	ld hl,0
  280 D1:AC94 19 -  -  -  	add hl,de;add x pos 
  281 D1:AC95 EB -  -  -  	ex de,hl;put vram pos into de 
  282 D1:AC96 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  283 D1:AC96 21 00 00 00 	ld hl,0
  284 D1:AC9A 09 -  -  -  	add hl,bc
  285 D1:AC9B 09 -  -  -  	add hl,bc 
  286 D1:AC9C 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  287 D1:AC9D ED 27 -  -  	ld hl,(hl);hl holds sprite data
  288 D1:AC9F -  -  -  -  
  289 D1:AC9F CD AD AC D1 	call draw_bg_sprite_line;draw sprite line 
  290 D1:ACA3 11 00 00 00 	ld de,0;clear de 
  291 D1:ACA7 01 00 00 00 	ld bc,0
  292 D1:ACAB E1 -  -  -  	pop hl;back to data
  293 D1:ACAC C9 -  -  -  	ret
  294 D1:ACAD -  -  -  -  	
  295 D1:ACAD -  -  -  -  
  296 D1:ACAD -  -  -  -  
  297 D1:ACAD -  -  -  -  
  298 D1:ACAD -  -  -  -  
  299 D1:ACAD -  -  -  -  
  300 D1:ACAD -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  301 D1:ACAD -  -  -  -  draw_bg_sprite_line:
  302 D1:ACAD E5 -  -  -  	push hl;save 
  303 D1:ACAE 6E -  -  -  	ld l,(hl);sprite width in px
  304 D1:ACAF 67 -  -  -  	ld h,a ;lines to skip
  305 D1:ACB0 7D -  -  -  	ld a,l;width 
  306 D1:ACB1 ED 6C -  -  	mlt hl;widt*lines skipped 
  307 D1:ACB3 C1 -  -  -  	pop bc 
  308 D1:ACB4 09 -  -  -  	add hl,bc;skip to target line data 
  309 D1:ACB5 23 -  -  -  	inc hl 
  310 D1:ACB6 -  -  -  -  	;hl is pointing to start of line data 
  311 D1:ACB6 CB 2F -  -  	sra a;divide width by 2 
  312 D1:ACB8 47 -  -  -  	ld b,a;b holds number of loops 
  313 D1:ACB9 -  -  -  -  dbgsl_loop:
  314 D1:ACB9 1A -  -  -  	ld a,(de); load vram data 
  315 D1:ACBA A6 -  -  -  	and (hl);and with mask 
  316 D1:ACBB 23 -  -  -  	inc hl ;to color data 
  317 D1:ACBC B6 -  -  -  	or (hl);or w color data 
  318 D1:ACBD 12 -  -  -  	ld (de),a;write to vram  
  319 D1:ACBE 13 -  -  -  	inc de
  320 D1:ACBF 23 -  -  -  	inc hl;to mask data
  321 D1:ACC0 10 F7 -  -  	djnz dbgsl_loop
  322 D1:ACC2 C9 -  -  -  	ret 
  323 D1:ACC3 -  -  -  -  	
  324 D1:ACC3 -  -  -  -  
  325 D1:ACC3 -  -  -  -  
  326 D1:ACC3 -  -  -  -  
  327 D1:ACC3 -  -  -  -  
  328 D1:ACC3 -  -  -  -  
  329 D1:ACC3 -  -  -  -  
  330 D1:ACC3 -  -  -  -  
  331 D1:ACC3 -  -  -  -  
  332 D1:ACC3 -  -  -  -  
  333 D1:ACC3 -  -  -  -  
  334 D1:ACC3 -  -  -  -  
  335 D1:ACC3 -  -  -  -  
Listing for file "ascent.asm"
  271 D1:ACC3 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ACC3 -  -  -  -  
    2 D1:ACC3 -  -  -  -  
    3 D1:ACC3 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
    4 D1:ACC3 -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:ACC3 1B -  -  -  	dec de
    6 D1:ACC4 01 00 00 00 	ld bc,0
    7 D1:ACC8 4F -  -  -  	ld c,a
    8 D1:ACC9 E5 -  -  -  	push hl
    9 D1:ACCA 7E -  -  -  	ld a,(hl);height
   10 D1:ACCB 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:ACCC 4F -  -  -  	ld c,a;height
   12 D1:ACCD 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:ACCE E1 -  -  -  	pop hl
   14 D1:ACCF 23 -  -  -  	inc hl
   15 D1:ACD0 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:ACD1 -  -  -  -  
   17 D1:ACD1 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:ACD2 EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:ACD3 C3 19 AD D1 	jp dfgs_loop
   20 D1:ACD7 -  -  -  -  	
   21 D1:ACD7 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
   22 D1:ACD7 -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:ACD7 1B -  -  -  	dec de
   24 D1:ACD8 01 00 00 00 	ld bc,0
   25 D1:ACDC 4F -  -  -  	ld c,a
   26 D1:ACDD D5 -  -  -  	push de
   27 D1:ACDE 11 00 00 00 	ld de,0
   28 D1:ACE2 E5 -  -  -  	push hl
   29 D1:ACE3 5E -  -  -  	ld e,(hl);height
   30 D1:ACE4 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:ACE5 -  -  -  -  
   32 D1:ACE5 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:ACE6 E1 -  -  -  	pop hl;start of data
   34 D1:ACE7 19 -  -  -  	add hl,de
   35 D1:ACE8 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:ACE9 23 -  -  -  	inc hl;hl is pixel data
   37 D1:ACEA D1 -  -  -  	pop de;back to vram
   38 D1:ACEB C5 -  -  -  	push bc;save total and skipped loops
   39 D1:ACEC 79 -  -  -  	ld a,c;loops to skip
   40 D1:ACED 01 00 00 00 	ld bc,0
   41 D1:ACF1 -  -  -  -  	
   42 D1:ACF1 -  -  -  -  
   43 D1:ACF1 -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   44 D1:ACF1 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:ACF2 EB -  -  -  	ex de,hl;hl is vram
   46 D1:ACF3 09 -  -  -  	add hl,bc
   47 D1:ACF4 EB -  -  -  	ex de,hl;hl is data
   48 D1:ACF5 23 -  -  -  	inc hl
   49 D1:ACF6 4E -  -  -  	ld c,(hl);ldir length
   50 D1:ACF7 09 -  -  -  	add hl,bc;add ldir length
   51 D1:ACF8 EB -  -  -  	ex de,hl;hl is vram
   52 D1:ACF9 09 -  -  -  	add hl,bc;add ldir length
   53 D1:ACFA 13 -  -  -  	inc de
   54 D1:ACFB EB -  -  -  	ex de,hl;hl is data
   55 D1:ACFC 3D -  -  -  	dec a
   56 D1:ACFD C2 F1 AC D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:AD01 -  -  -  -  	
   58 D1:AD01 -  -  -  -  	
   59 D1:AD01 C1 -  -  -  	pop bc
   60 D1:AD02 78 -  -  -  	ld a,b
   61 D1:AD03 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:AD04 -  -  -  -  		
   63 D1:AD04 01 00 00 00 	ld bc,0
   64 D1:AD08 4E -  -  -  	ld c,(hl)
   65 D1:AD09 EB -  -  -  	ex de,hl
   66 D1:AD0A C3 19 AD D1 	jp dfgs_loop
   67 D1:AD0E -  -  -  -  
   68 D1:AD0E -  -  -  -  
   69 D1:AD0E -  -  -  -  ;de = vram , hl = data
   70 D1:AD0E -  -  -  -  draw_fast_sprite_full:
   71 D1:AD0E 1B -  -  -  	dec de
   72 D1:AD0F 01 00 00 00 	ld bc,0
   73 D1:AD13 4E -  -  -  	ld c,(hl);height
   74 D1:AD14 09 -  -  -  	add hl,bc
   75 D1:AD15 7E -  -  -  	ld a,(hl);total loops
   76 D1:AD16 23 -  -  -  	inc hl
   77 D1:AD17 4E -  -  -  	ld c,(hl);first gap length
   78 D1:AD18 EB -  -  -  	ex de,hl
   79 D1:AD19 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   80 D1:AD19 -  -  -  -  dfgs_loop:;gap, colors
   81 D1:AD19 09 -  -  -  	add hl,bc;add alpha length
   82 D1:AD1A EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   83 D1:AD1B 23 -  -  -  	inc hl
   84 D1:AD1C 4E -  -  -  	ld c,(hl);get ldir length
   85 D1:AD1D 23 -  -  -  	inc hl
   86 D1:AD1E ED B0 -  -  	ldir
   87 D1:AD20 4E -  -  -  	ld c,(hl);load c with next alpha length
   88 D1:AD21 EB -  -  -  	ex de,hl;swap, hl is vram
   89 D1:AD22 3D -  -  -  	dec a
   90 D1:AD23 C2 19 AD D1 	jp nz,dfgs_loop
   91 D1:AD27 C9 -  -  -  	ret
   92 D1:AD28 -  -  -  -  	
   93 D1:AD28 -  -  -  -  	
   94 D1:AD28 -  -  -  -  	
   95 D1:AD28 -  -  -  -  	
   96 D1:AD28 -  -  -  -  
   97 D1:AD28 -  -  -  -  
   98 D1:AD28 -  -  -  -  ;hl = data, de = vram
   99 D1:AD28 -  -  -  -  draw_slow_sprite_full:
  100 D1:AD28 01 00 00 00 	ld bc,0
  101 D1:AD2C 4E -  -  -  	ld c,(hl);height
  102 D1:AD2D 09 -  -  -  	add hl,bc
  103 D1:AD2E 7E -  -  -  	ld a,(hl);num loops
  104 D1:AD2F D9 -  -  -  	exx
  105 D1:AD30 4F -  -  -  	ld c,a
  106 D1:AD31 D9 -  -  -  	exx
  107 D1:AD32 1B -  -  -  	dec de
  108 D1:AD33 -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  109 D1:AD33 -  -  -  -  dsfgs_line_loop:
  110 D1:AD33 23 -  -  -  	inc hl;gap length
  111 D1:AD34 4E -  -  -  	ld c,(hl);gap length
  112 D1:AD35 EB -  -  -  	ex de,hl;hl is vram
  113 D1:AD36 09 -  -  -  	add hl,bc;add aplha gap
  114 D1:AD37 EB -  -  -  	ex de,hl;hl is data
  115 D1:AD38 23 -  -  -  	inc hl;hl points to single pix mask
  116 D1:AD39 1A -  -  -  	ld a,(de);vram data
  117 D1:AD3A A6 -  -  -  	and (hl)
  118 D1:AD3B 23 -  -  -  	inc hl;pixel data
  119 D1:AD3C B6 -  -  -  	or (hl)
  120 D1:AD3D 12 -  -  -  	ld (de),a
  121 D1:AD3E 23 -  -  -  	inc hl;ldir length
  122 D1:AD3F -  -  -  -  	
  123 D1:AD3F 13 -  -  -  	inc de;move to next pixel
  124 D1:AD40 -  -  -  -  	
  125 D1:AD40 7E -  -  -  	ld a,(hl);ldir length
  126 D1:AD41 23 -  -  -  	inc hl;data
  127 D1:AD42 4F -  -  -  	ld c,a
  128 D1:AD43 B7 -  -  -  	or a
  129 D1:AD44 CA 4A AD D1 	jp z,dsfgs_ldir_skip
  130 D1:AD48 ED B0 -  -  	ldir
  131 D1:AD4A -  -  -  -  dsfgs_ldir_skip:
  132 D1:AD4A 1A -  -  -  	ld a,(de);vram data
  133 D1:AD4B A6 -  -  -  	and (hl)
  134 D1:AD4C 23 -  -  -  	inc hl;pixel data
  135 D1:AD4D B6 -  -  -  	or (hl)
  136 D1:AD4E 12 -  -  -  	ld (de),a
  137 D1:AD4F -  -  -  -  	
  138 D1:AD4F D9 -  -  -  	exx 
  139 D1:AD50 0D -  -  -  	dec c
  140 D1:AD51 D9 -  -  -  	exx
  141 D1:AD52 C2 33 AD D1 	jp nz,dsfgs_line_loop
  142 D1:AD56 C9 -  -  -  	ret
  143 D1:AD57 -  -  -  -  
  144 D1:AD57 -  -  -  -  
  145 D1:AD57 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  146 D1:AD57 -  -  -  -  draw_slow_sprite_top_cut:
  147 D1:AD57 -  -  -  -  
  148 D1:AD57 E5 -  -  -  	push hl
  149 D1:AD58 01 00 00 00 	ld bc,0
  150 D1:AD5C 4F -  -  -  	ld c,a
  151 D1:AD5D 09 -  -  -  	add hl,bc
  152 D1:AD5E 7E -  -  -  	ld a,(hl);loops to skip
  153 D1:AD5F 32 82 AD D1 	ld (dsstc_loops_skipped),a
  154 D1:AD63 D9 -  -  -  	exx
  155 D1:AD64 47 -  -  -  	ld b,a;loops to skip
  156 D1:AD65 D9 -  -  -  	exx
  157 D1:AD66 E1 -  -  -  	pop hl
  158 D1:AD67 4E -  -  -  	ld c,(hl)
  159 D1:AD68 09 -  -  -  	add hl,bc;total loops
  160 D1:AD69 7E -  -  -  	ld a,(hl);total loops
  161 D1:AD6A 23 -  -  -  	inc hl;gap length
  162 D1:AD6B -  -  -  -  
  163 D1:AD6B -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  164 D1:AD6B D9 -  -  -  	exx
  165 D1:AD6C -  -  -  -  slow_sprite_data_traverse:
  166 D1:AD6C D9 -  -  -  	exx
  167 D1:AD6D 4E -  -  -  	ld c,(hl);gap length
  168 D1:AD6E EB -  -  -  	ex de,hl;hl is vram
  169 D1:AD6F 09 -  -  -  	add hl,bc
  170 D1:AD70 EB -  -  -  	ex de,hl
  171 D1:AD71 -  -  -  -  	
  172 D1:AD71 23 -  -  -  	inc hl
  173 D1:AD72 23 -  -  -  	inc hl
  174 D1:AD73 23 -  -  -  	inc hl;ldir length
  175 D1:AD74 4E -  -  -  	ld c,(hl)
  176 D1:AD75 09 -  -  -  	add hl,bc
  177 D1:AD76 EB -  -  -  	ex de,hl
  178 D1:AD77 09 -  -  -  	add hl,bc
  179 D1:AD78 EB -  -  -  	ex de,hl
  180 D1:AD79 13 -  -  -  	inc de;single pix
  181 D1:AD7A 23 -  -  -  	inc hl
  182 D1:AD7B 23 -  -  -  	inc hl
  183 D1:AD7C 23 -  -  -  	inc hl;gap length
  184 D1:AD7D D9 -  -  -  	exx
  185 D1:AD7E 10 EC -  -  	djnz slow_sprite_data_traverse
  186 D1:AD80 D9 -  -  -  	exx
  187 D1:AD81 -  -  -  -  
  188 D1:AD81 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  189 D1:AD81 D6 00 -  -  	sub a,0;loops skipped
  190 D1:AD83 D9 -  -  -  	exx
  191 D1:AD84 4F -  -  -  	ld c,a
  192 D1:AD85 D9 -  -  -  	exx
  193 D1:AD86 -  -  -  -  	
  194 D1:AD86 1B -  -  -  	dec de
  195 D1:AD87 2B -  -  -  	dec hl	
  196 D1:AD88 C3 33 AD D1 	jp dsfgs_line_loop
  197 D1:AD8C -  -  -  -  	
  198 D1:AD8C -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  199 D1:AD8C -  -  -  -  draw_slow_sprite_bottom_cut:
  200 D1:AD8C 01 00 00 00 	ld bc,0
  201 D1:AD90 E5 -  -  -  	push hl
  202 D1:AD91 4F -  -  -  	ld c,a;height
  203 D1:AD92 09 -  -  -  	add hl,bc
  204 D1:AD93 7E -  -  -  	ld a,(hl);num loops
  205 D1:AD94 D9 -  -  -  	exx
  206 D1:AD95 4F -  -  -  	ld c,a
  207 D1:AD96 D9 -  -  -  	exx
  208 D1:AD97 E1 -  -  -  	pop hl
  209 D1:AD98 4E -  -  -  	ld c,(hl)
  210 D1:AD99 09 -  -  -  	add hl,bc
  211 D1:AD9A -  -  -  -  
  212 D1:AD9A 1B -  -  -  	dec de
  213 D1:AD9B C3 33 AD D1 	jp dsfgs_line_loop
  214 D1:AD9F -  -  -  -  
  215 D1:AD9F -  -  -  -  
  216 D1:AD9F -  -  -  -  
  217 D1:AD9F -  -  -  -  
  218 D1:AD9F -  -  -  -  
  219 D1:AD9F -  -  -  -  
  220 D1:AD9F -  -  -  -  
  221 D1:AD9F -  -  -  -  
  222 D1:AD9F -  -  -  -  
  223 D1:AD9F -  -  -  -  
  224 D1:AD9F -  -  -  -  
  225 D1:AD9F -  -  -  -  
  226 D1:AD9F -  -  -  -  
  227 D1:AD9F -  -  -  -  
  228 D1:AD9F -  -  -  -  
  229 D1:AD9F -  -  -  -  
  230 D1:AD9F -  -  -  -  
  231 D1:AD9F -  -  -  -  
  232 D1:AD9F -  -  -  -  
  233 D1:AD9F -  -  -  -  
  234 D1:AD9F -  -  -  -  
  235 D1:AD9F -  -  -  -  
  236 D1:AD9F -  -  -  -  
  237 D1:AD9F -  -  -  -  
  238 D1:AD9F -  -  -  -  
  239 D1:AD9F -  -  -  -  
  240 D1:AD9F -  -  -  -  
  241 D1:AD9F -  -  -  -  
  242 D1:AD9F -  -  -  -  
  243 D1:AD9F -  -  -  -  
  244 D1:AD9F -  -  -  -  
  245 D1:AD9F -  -  -  -  
  246 D1:AD9F -  -  -  -  
  247 D1:AD9F -  -  -  -  
  248 D1:AD9F -  -  -  -  
  249 D1:AD9F -  -  -  -   
  250 D1:AD9F -  -  -  -  
  251 D1:AD9F -  -  -  -  
  252 D1:AD9F -  -  -  -  
  253 D1:AD9F -  -  -  -  
  254 D1:AD9F -  -  -  -  
  255 D1:AD9F -  -  -  -  
  256 D1:AD9F -  -  -  -  
  257 D1:AD9F -  -  -  -  
  258 D1:AD9F -  -  -  -  
  259 D1:AD9F -  -  -  -  
  260 D1:AD9F -  -  -  -  
  261 D1:AD9F -  -  -  -  
  262 D1:AD9F -  -  -  -  
  263 D1:AD9F -  -  -  -  
  264 D1:AD9F -  -  -  -  
  265 D1:AD9F -  -  -  -  
  266 D1:AD9F -  -  -  -  
  267 D1:AD9F -  -  -  -  
  268 D1:AD9F -  -  -  -  
  269 D1:AD9F -  -  -  -  
  270 D1:AD9F -  -  -  -  
  271 D1:AD9F -  -  -  -  
  272 D1:AD9F -  -  -  -  
  273 D1:AD9F -  -  -  -  
  274 D1:AD9F -  -  -  -  
  275 D1:AD9F -  -  -  -  
  276 D1:AD9F -  -  -  -  
  277 D1:AD9F -  -  -  -  
  278 D1:AD9F -  -  -  -  
  279 D1:AD9F -  -  -  -  
  280 D1:AD9F -  -  -  -  
  281 D1:AD9F -  -  -  -  
  282 D1:AD9F -  -  -  -  
  283 D1:AD9F -  -  -  -  
  284 D1:AD9F -  -  -  -  
  285 D1:AD9F -  -  -  -  
  286 D1:AD9F -  -  -  -  
  287 D1:AD9F -  -  -  -  
  288 D1:AD9F -  -  -  -  
  289 D1:AD9F -  -  -  -  
  290 D1:AD9F -  -  -  -  
  291 D1:AD9F -  -  -  -  
  292 D1:AD9F -  -  -  -  
  293 D1:AD9F -  -  -  -  
  294 D1:AD9F -  -  -  -  
  295 D1:AD9F -  -  -  -  
  296 D1:AD9F -  -  -  -  
  297 D1:AD9F -  -  -  -  
  298 D1:AD9F -  -  -  -  
  299 D1:AD9F -  -  -  -  
  300 D1:AD9F -  -  -  -  
  301 D1:AD9F -  -  -  -  
  302 D1:AD9F -  -  -  -  
  303 D1:AD9F -  -  -  -  
  304 D1:AD9F -  -  -  -  
  305 D1:AD9F -  -  -  -  	
  306 D1:AD9F -  -  -  -  	
Listing for file "ascent.asm"
  272 D1:AD9F -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:AD9F -  -  -  -  
    2 D1:AD9F -  -  -  -  
    3 D1:AD9F -  -  -  -  
    4 D1:AD9F -  -  -  -  
    5 D1:AD9F -  -  -  -  
    6 D1:AD9F -  -  -  -  
    7 D1:AD9F -  -  -  -  
    8 D1:AD9F -  -  -  -  
    9 D1:AD9F -  -  -  -  ;REGISTER USEAGE
   10 D1:AD9F -  -  -  -  ;HL = sprite color data byte
   11 D1:AD9F -  -  -  -  ;C = bit selector for color data 
   12 D1:AD9F -  -  -  -  ;HL' = alpha data byte
   13 D1:AD9F -  -  -  -  ;C' = bit selector for alpha data
   14 D1:AD9F -  -  -  -  ;DE = output sprite data location
   15 D1:AD9F -  -  -  -  ;DE' = loops/line write location 
   16 D1:AD9F -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:AD9F -  -  -  -  
   18 D1:AD9F -  -  -  -  ;SETUP ----------------
   19 D1:AD9F -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:AD9F -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:AD9F -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:AD9F -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:AD9F -  -  -  -  ;------------
   24 D1:AD9F -  -  -  -  
   25 D1:AD9F -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:AD9F -  -  -  -  
   27 D1:AD9F -  -  -  -  
   28 D1:AD9F -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:AD9F -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:AD9F -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:AD9F -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:AD9F -  -  -  -  ;write pixel mask and color data
   33 D1:AD9F -  -  -  -  
   34 D1:AD9F -  -  -  -  ;LDIR ROUTINE
   35 D1:AD9F -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:AD9F -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:AD9F -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:AD9F -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:AD9F -  -  -  -  ;IF FAST, GOTO END
   40 D1:AD9F -  -  -  -  
   41 D1:AD9F -  -  -  -  ;trailing pixels
   42 D1:AD9F -  -  -  -  ;11,10,01 in alpha data 
   43 D1:AD9F -  -  -  -  
   44 D1:AD9F -  -  -  -  ;END AND RESTART
   45 D1:AD9F -  -  -  -  ;Increment loops/line counter
   46 D1:AD9F -  -  -  -  ;check if end of line and write loops/line
   47 D1:AD9F -  -  -  -  
   48 D1:AD9F -  -  -  -  ;store registers and check if interrupt is required
   49 D1:AD9F -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:AD9F -  -  -  -  ;otherwise return to start of loop
   51 D1:AD9F -  -  -  -  
   52 D1:AD9F -  -  -  -  ;
   53 D1:AD9F -  -  -  -  
   54 D1:AD9F -  -  -  -  
   55 D1:AD9F -  -  -  -  
   56 D1:AD9F -  -  -  -  
   57 D1:AD9F -  -  -  -  
   58 D1:AD9F -  -  -  -  
   59 D1:AD9F -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:AD9F -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:AD9F -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:AD9F CB 09 -  -  	rrc c;rlc flip
   63 D1:ADA1 D0 -  -  -  	ret nc
   64 D1:ADA2 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:ADA2 23 -  -  -  	inc hl;dec hl flip
   66 D1:ADA3 C9 -  -  -  	ret
   67 D1:ADA4 -  -  -  -  
   68 D1:ADA4 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:ADA4 -  -  -  -  
   70 D1:ADA4 -  -  -  -  ;IN SHADOW
   71 D1:ADA4 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:ADA4 -  -  -  -  ;C IS BITMASK
   73 D1:ADA4 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:ADA4 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:ADA4 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:ADA4 -  -  -  -  ; next call returns first bit in next row  
   77 D1:ADA4 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:ADA4 3E A2 -  -  	ld a,$A2;test 
   79 D1:ADA6 CD 38 AA D1 	call write_a_to_ram
   80 D1:ADAA 79 -  -  -  	ld a,c 
   81 D1:ADAB CD 38 AA D1 	call write_a_to_ram 
   82 D1:ADAF 7E -  -  -  	ld a,(hl)
   83 D1:ADB0 CD 38 AA D1 	call write_a_to_ram
   84 D1:ADB4 -  -  -  -  	
   85 D1:ADB4 37 -  -  -  	scf 
   86 D1:ADB5 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:ADB5 DA C8 AD D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:ADB9 -  -  -  -  
   89 D1:ADB9 3E A3 -  -  	ld a,$A3
   90 D1:ADBB CD 38 AA D1 	call write_a_to_ram 
   91 D1:ADBF -  -  -  -  	
   92 D1:ADBF 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:ADC1 32 65 AE D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:ADC5 -  -  -  -  	
   95 D1:ADC5 3E 00 -  -  	ld a,0
   96 D1:ADC7 C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:ADC8 -  -  -  -  
   98 D1:ADC8 -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:ADC8 -  -  -  -  	
  100 D1:ADC8 -  -  -  -  	
  101 D1:ADC8 -  -  -  -  	
  102 D1:ADC8 -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:ADC8 37 -  -  -  	scf
  104 D1:ADC9 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:ADC9 DA DC AD D1 	jp c,sdcomp_bit_offset_skip
  106 D1:ADCD 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:ADCF 32 C9 AD D1 	ld (sdcomp_bit_offset),a
  108 D1:ADD3 3E A9 -  -  	ld a,$A9
  109 D1:ADD5 CD 38 AA D1 	call write_a_to_ram
  110 D1:ADD9 3E 00 -  -  	ld a,0
  111 D1:ADDB C9 -  -  -  	ret ;return 0 first bit
  112 D1:ADDC -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:ADDC -  -  -  -  		
  114 D1:ADDC -  -  -  -  	;ld a,$EF
  115 D1:ADDC -  -  -  -  	;call write_a_to_ram
  116 D1:ADDC 7E -  -  -  	ld a,(hl)
  117 D1:ADDD -  -  -  -  	;push af 
  118 D1:ADDD -  -  -  -  	;call write_a_to_ram
  119 D1:ADDD -  -  -  -  	;ld a,c
  120 D1:ADDD -  -  -  -  	;call write_a_to_ram
  121 D1:ADDD -  -  -  -  	;pop af 
  122 D1:ADDD -  -  -  -  	
  123 D1:ADDD -  -  -  -  	
  124 D1:ADDD A1 -  -  -  	and c 
  125 D1:ADDE CD 9F AD D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:ADE2 -  -  -  -  	;a holds data to return
  127 D1:ADE2 CD 38 AA D1 	call write_a_to_ram
  128 D1:ADE6 37 -  -  -  	scf 
  129 D1:ADE7 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:ADE7 DA ED AD D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:ADEB 3E 01 -  -  	ld a,1
  132 D1:ADED -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:ADED -  -  -  -  	
  134 D1:ADED -  -  -  -  	
  135 D1:ADED 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:ADEE 3D -  -  -  	dec a 
  137 D1:ADEF -  -  -  -  	;call write_a_to_ram
  138 D1:ADEF C2 2B AE D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:ADF3 -  -  -  -  	
  140 D1:ADF3 -  -  -  -  	;HAve read last bit in line  
  141 D1:ADF3 -  -  -  -  	
  142 D1:ADF3 3E AC -  -  	ld a,$AC;Test
  143 D1:ADF5 CD 38 AA D1 	call write_a_to_ram;Test
  144 D1:ADF9 -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:ADF9 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:ADF9 3E 00 -  -  	ld a,0
  147 D1:ADFB 3D -  -  -  	dec a 
  148 D1:ADFC 32 FA AD D1 	ld (sdcomp_lines_remaining),a
  149 D1:AE00 -  -  -  -  	;call write_a_to_ram
  150 D1:AE00 C2 10 AE D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AE04 -  -  -  -  	;end of last line reached 
  152 D1:AE04 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AE06 32 EB B0 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AE0A 3E E9 -  -  	ld a,$E9
  155 D1:AE0C CD 38 AA D1 	call write_a_to_ram;TEST 
  156 D1:AE10 -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AE10 -  -  -  -  	
  158 D1:AE10 -  -  -  -  
  159 D1:AE10 -  -  -  -  	
  160 D1:AE10 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AE12 32 C6 B0 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AE16 32 B5 AD D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AE1A -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AE1A 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AE1B -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AE1B DA 25 AE D1 	jp c,sdcomp_offset_1_skip
  167 D1:AE1F 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AE21 32 C9 AD D1 	ld (sdcomp_bit_offset),a
  169 D1:AE25 -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AE25 -  -  -  -  	
  171 D1:AE25 -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AE25 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AE27 -  -  -  -  	
  174 D1:AE27 CD 38 AA D1 	call write_a_to_ram
  175 D1:AE2B -  -  -  -  	
  176 D1:AE2B -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AE2B 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AE2C -  -  -  -  	
  179 D1:AE2C F5 -  -  -  	push af ;testing
  180 D1:AE2D 3E A0 -  -  	ld a,$A0
  181 D1:AE2F CD 38 AA D1 	call write_a_to_ram
  182 D1:AE33 F1 -  -  -  	pop af 
  183 D1:AE34 CD 38 AA D1 	call write_a_to_ram
  184 D1:AE38 -  -  -  -  	
  185 D1:AE38 C9 -  -  -  	ret 
  186 D1:AE39 -  -  -  -  	
  187 D1:AE39 -  -  -  -  
  188 D1:AE39 -  -  -  -  
  189 D1:AE39 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AE39 -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AE39 3E A1 -  -  	ld a,$A1
  192 D1:AE3B CD 38 AA D1 	call write_a_to_ram
  193 D1:AE3F -  -  -  -  	
  194 D1:AE3F 79 -  -  -  	ld a,c 
  195 D1:AE40 CD 38 AA D1 	call write_a_to_ram 
  196 D1:AE44 7E -  -  -  	ld a,(hl)
  197 D1:AE45 CD 38 AA D1 	call write_a_to_ram
  198 D1:AE49 -  -  -  -  	
  199 D1:AE49 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AE4B 32 65 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AE4F -  -  -  -  	
  202 D1:AE4F CD A4 AD D1 	call sdcomp_get_next_alpha
  203 D1:AE53 B7 -  -  -  	or a 
  204 D1:AE54 CA 62 AE D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AE58 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AE5A CD 38 AA D1 	call write_a_to_ram
  207 D1:AE5E C3 77 AE D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AE62 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AE62 3E 00 -  -  	ld a,0
  210 D1:AE64 -  -  -  -  	
  211 D1:AE64 37 -  -  -  	scf 
  212 D1:AE65 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AE65 DA 77 AE D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AE69 F5 -  -  -  	push af 
  215 D1:AE6A -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AE6A -  -  -  -  	
  217 D1:AE6A 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AE6C 32 CD B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AE70 -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AE70 3E A4 -  -  	ld a,$A4
  221 D1:AE72 CD 38 AA D1 	call write_a_to_ram
  222 D1:AE76 F1 -  -  -  	pop af 
  223 D1:AE77 -  -  -  -  	
  224 D1:AE77 -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AE77 -  -  -  -  
  226 D1:AE77 -  -  -  -  	
  227 D1:AE77 32 8D AE D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AE7B -  -  -  -  	
  229 D1:AE7B CD A4 AD D1 	call sdcomp_get_next_alpha
  230 D1:AE7F B7 -  -  -  	or a 
  231 D1:AE80 CA 8A AE D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AE84 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AE86 C3 8C AE D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AE8A -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AE8A 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AE8C -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AE8C -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AE8C F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AE8E -  -  -  -  	
  240 D1:AE8E C9 -  -  -  	ret 
  241 D1:AE8F -  -  -  -  	
  242 D1:AE8F -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AE8F -  -  -  -  
  244 D1:AE8F -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AE8F -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AE8F CD 98 AE D1 	call sdcomp_get_next_color
  247 D1:AE93 0F -  -  -  	rrca 
  248 D1:AE94 0F -  -  -  	rrca 
  249 D1:AE95 0F -  -  -  	rrca 
  250 D1:AE96 0F -  -  -  	rrca
  251 D1:AE97 C9 -  -  -  	ret 
  252 D1:AE98 -  -  -  -  
  253 D1:AE98 -  -  -  -  
  254 D1:AE98 -  -  -  -  
  255 D1:AE98 -  -  -  -  ;bit orders
  256 D1:AE98 -  -  -  -  ;	noflip   flip 
  257 D1:AE98 -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AE98 -  -  -  -  ;3bpp 210	 012
  259 D1:AE98 -  -  -  -  ;2bpp 10	 01
  260 D1:AE98 -  -  -  -  ;1bpp 0		 0
  261 D1:AE98 -  -  -  -  
  262 D1:AE98 -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AE98 -  -  -  -  sdcomp_get_next_color:
  264 D1:AE98 D5 -  -  -  	push de ;save data write location
  265 D1:AE99 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AE9B -  -  -  -  	
  267 D1:AE9B 37 -  -  -  	scf
  268 D1:AE9C -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AE9C D2 E6 AE D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AEA0 -  -  -  -  	
  271 D1:AEA0 -  -  -  -  	;ld a,$C1
  272 D1:AEA0 -  -  -  -  	;call write_a_to_ram
  273 D1:AEA0 -  -  -  -  	
  274 D1:AEA0 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AEA1 -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AEA1 A1 -  -  -  	and c
  277 D1:AEA2 -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AEA2 CD 9F AD D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:AEA6 B7 -  -  -  	or a
  280 D1:AEA7 CA AD AE D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:AEAB -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:AEAB CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:AEAD -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:AEAD -  -  -  -  	
  285 D1:AEAD 37 -  -  -  	scf
  286 D1:AEAE -  -  -  -  sdcomp_1bpc .equ $
  287 D1:AEAE D2 E6 AE D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:AEB2 -  -  -  -  
  289 D1:AEB2 -  -  -  -  	;ld a,$C2
  290 D1:AEB2 -  -  -  -  	;call write_a_to_ram
  291 D1:AEB2 -  -  -  -  	
  292 D1:AEB2 7E -  -  -  	ld a,(hl)
  293 D1:AEB3 -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:AEB3 A1 -  -  -  	and c 
  295 D1:AEB4 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:AEB4 CD 9F AD D1 	call sdcomp_next_in_bitstream
  297 D1:AEB8 B7 -  -  -  	or a
  298 D1:AEB9 CA BF AE D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:AEBD -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:AEBD CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:AEBF -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:AEBF -  -  -  -  	
  303 D1:AEBF 37 -  -  -  	scf
  304 D1:AEC0 -  -  -  -  sdcomp_2bpc .equ $
  305 D1:AEC0 D2 E6 AE D1 	jp nc,sdcomp_get_color_from_index
  306 D1:AEC4 -  -  -  -  	
  307 D1:AEC4 7E -  -  -  	ld a,(hl)
  308 D1:AEC5 A1 -  -  -  	and c 
  309 D1:AEC6 CD 9F AD D1 	call sdcomp_next_in_bitstream
  310 D1:AECA B7 -  -  -  	or a
  311 D1:AECB CA D1 AE D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:AECF -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:AECF CB D3 -  -  	set 2,e 
  314 D1:AED1 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:AED1 -  -  -  -  	
  316 D1:AED1 37 -  -  -  	scf
  317 D1:AED2 -  -  -  -  sdcomp_3bpc .equ $
  318 D1:AED2 D2 E6 AE D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:AED6 -  -  -  -  
  320 D1:AED6 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:AED6 7E -  -  -  	ld a,(hl)
  322 D1:AED7 A1 -  -  -  	and c 
  323 D1:AED8 CD 9F AD D1 	call sdcomp_next_in_bitstream
  324 D1:AEDC B7 -  -  -  	or a
  325 D1:AEDD CA E3 AE D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:AEE1 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:AEE1 CB DB -  -  	set 3,e 
  328 D1:AEE3 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:AEE3 -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:AEE3 7B -  -  -  	ld a,e 
  331 D1:AEE4 D1 -  -  -  	pop de 
  332 D1:AEE5 C9 -  -  -  	ret 
  333 D1:AEE6 -  -  -  -  
  334 D1:AEE6 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:AEE6 -  -  -  -  	
  336 D1:AEE6 -  -  -  -  	;ld a,$DD
  337 D1:AEE6 -  -  -  -  	;call write_a_to_ram
  338 D1:AEE6 -  -  -  -  	;ld a,e 
  339 D1:AEE6 -  -  -  -  	;call write_a_to_ram
  340 D1:AEE6 -  -  -  -  	
  341 D1:AEE6 -  -  -  -  	
  342 D1:AEE6 CB 53 -  -  	bit 2,e 
  343 D1:AEE8 CA 0A AF D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:AEEC -  -  -  -  	
  345 D1:AEEC -  -  -  -  	;Bit 2 = 1 
  346 D1:AEEC CB 4B -  -  	bit 1,e 
  347 D1:AEEE CA FE AE D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:AEF2 -  -  -  -  
  349 D1:AEF2 -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:AEF2 -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:AEF2 3E 00 -  -  	ld a,0
  352 D1:AEF4 CB 43 -  -  	bit 0,e 
  353 D1:AEF6 CA 38 AF D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:AEFA C3 28 AF D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:AEFE -  -  -  -  
  356 D1:AEFE -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:AEFE -  -  -  -  	;2 = 1 1 = 0 
  358 D1:AEFE -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:AEFE 3E 00 -  -  	ld a,0
  360 D1:AF00 CB 43 -  -  	bit 0,e 
  361 D1:AF02 CA 38 AF D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:AF06 C3 28 AF D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:AF0A -  -  -  -  	
  364 D1:AF0A -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:AF0A -  -  -  -  	;bit 2 was 0 
  366 D1:AF0A CB 4B -  -  	bit 1,e 
  367 D1:AF0C CA 1C AF D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:AF10 -  -  -  -  	
  369 D1:AF10 -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:AF10 -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:AF10 3E 00 -  -  	ld a,0
  372 D1:AF12 CB 43 -  -  	bit 0,e 
  373 D1:AF14 CA 38 AF D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:AF18 C3 28 AF D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:AF1C -  -  -  -  	
  376 D1:AF1C -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:AF1C -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:AF1C -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:AF1C 3E 00 -  -  	ld a,0
  380 D1:AF1E -  -  -  -  	
  381 D1:AF1E CB 43 -  -  	bit 0,e 
  382 D1:AF20 CA 38 AF D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:AF24 C3 28 AF D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:AF28 -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:AF28 E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:AF2A D1 -  -  -  	pop de 
  387 D1:AF2B -  -  -  -  	
  388 D1:AF2B F5 -  -  -  	push af 
  389 D1:AF2C 3E C0 -  -  	ld a,$C0
  390 D1:AF2E CD 38 AA D1 	call write_a_to_ram
  391 D1:AF32 F1 -  -  -  	pop af 
  392 D1:AF33 CD 38 AA D1 	call write_a_to_ram
  393 D1:AF37 -  -  -  -  	
  394 D1:AF37 C9 -  -  -  	ret 
  395 D1:AF38 -  -  -  -  	
  396 D1:AF38 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:AF38 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:AF3A 0F -  -  -  	rrca 
  399 D1:AF3B 0F -  -  -  	rrca 
  400 D1:AF3C 0F -  -  -  	rrca 
  401 D1:AF3D 0F -  -  -  	rrca 
  402 D1:AF3E D1 -  -  -  	pop de 
  403 D1:AF3F -  -  -  -  	
  404 D1:AF3F F5 -  -  -  	push af 
  405 D1:AF40 3E C0 -  -  	ld a,$C0
  406 D1:AF42 CD 38 AA D1 	call write_a_to_ram
  407 D1:AF46 F1 -  -  -  	pop af 
  408 D1:AF47 CD 38 AA D1 	call write_a_to_ram
  409 D1:AF4B -  -  -  -  	
  410 D1:AF4B C9 -  -  -  	ret 
  411 D1:AF4C -  -  -  -  
  412 D1:AF4C -  -  -  -  
  413 D1:AF4C -  -  -  -  
  414 D1:AF4C -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:AF4C -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:AF4C -  -  -  -  ;in shadow ,destroys a
  417 D1:AF4C -  -  -  -  sdcomp_traverse_line_data:
  418 D1:AF4C D9 -  -  -  	exx ;OUT 
  419 D1:AF4D -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:AF4D 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:AF51 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:AF51 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:AF53 D9 -  -  -  	exx;toshadow 
  424 D1:AF54 -  -  -  -  	
  425 D1:AF54 -  -  -  -  	;load end of previous alpha data line 
  426 D1:AF54 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:AF54 21 00 00 00 	ld hl,0
  428 D1:AF58 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:AF58 0E 00 -  -  	ld c,0
  430 D1:AF5A -  -  -  -  sdcomp_traverse_initial:
  431 D1:AF5A D5 -  -  -  	push de
  432 D1:AF5B -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:AF5B 1E 00 -  -  	ld e, 0
  434 D1:AF5D -  -  -  -  	;e holds sprite width 
  435 D1:AF5D -  -  -  -  	
  436 D1:AF5D -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:AF5D -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:AF5D CB 09 -  -  	rrc c 
  439 D1:AF5F D2 64 AF D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:AF63 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:AF64 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:AF64 7E -  -  -  	ld a,(hl)
  443 D1:AF65 A1 -  -  -  	and c ;read alpha data 
  444 D1:AF66 -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:AF66 CA 7C AF D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:AF6A D9 -  -  -  	exx;out of shadow 
  447 D1:AF6B -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  448 D1:AF6B CB 09 -  -  	rrc c ;rotate mask
  449 D1:AF6D -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:AF6D CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:AF6F -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:AF6F CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:AF71 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:AF71 CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:AF73 -  -  -  -  	
  456 D1:AF73 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:AF73 79 -  -  -  	ld a,c
  458 D1:AF74 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:AF74 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:AF76 CA 7B AF D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:AF7A 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:AF7B -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:AF7B D9 -  -  -  	exx ;toshadow
  464 D1:AF7C -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:AF7C 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:AF7D C2 5D AF D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:AF81 D1 -  -  -  	pop de  ;back to write location 
  468 D1:AF82 -  -  -  -  	;set new end of line pointers 
  469 D1:AF82 -  -  -  -  	
  470 D1:AF82 3E BB -  -  	ld a,$BB 
  471 D1:AF84 CD 38 AA D1 	call write_a_to_ram 
  472 D1:AF88 7E -  -  -  	ld a,(hl) 
  473 D1:AF89 CD 38 AA D1 	call write_a_to_ram 
  474 D1:AF8D 79 -  -  -  	ld a,c 
  475 D1:AF8E CD 38 AA D1 	call write_a_to_ram 
  476 D1:AF92 -  -  -  -  	
  477 D1:AF92 -  -  -  -  	
  478 D1:AF92 22 55 AF D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:AF96 79 -  -  -  	ld a,c
  480 D1:AF97 32 59 AF D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:AF9B D9 -  -  -  	exx ;out
  482 D1:AF9C 22 4E AF D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:AFA0 79 -  -  -  	ld a,c 
  484 D1:AFA1 32 52 AF D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:AFA5 -  -  -  -  	
  486 D1:AFA5 7E -  -  -  	ld a,(hl) 
  487 D1:AFA6 CD 38 AA D1 	call write_a_to_ram 
  488 D1:AFAA 79 -  -  -  	ld a,c 
  489 D1:AFAB CD 38 AA D1 	call write_a_to_ram 
  490 D1:AFAF D9 -  -  -  	exx;to shadow 
  491 D1:AFB0 C9 -  -  -  	ret
  492 D1:AFB1 -  -  -  -  
  493 D1:AFB1 -  -  -  -  
  494 D1:AFB1 -  -  -  -  
  495 D1:AFB1 -  -  -  -  
  496 D1:AFB1 -  -  -  -  
  497 D1:AFB1 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  498 D1:AFB1 -  -  -  -  sdcomp_write_ldir_data_loop:
  499 D1:AFB1 CD 98 AE D1 	call sdcomp_get_next_color
  500 D1:AFB5 47 -  -  -  	ld b,a;first pixel
  501 D1:AFB6 CD 8F AE D1 	call sdcomp_get_next_color_leading_nibble
  502 D1:AFBA B0 -  -  -  	or b
  503 D1:AFBB -  -  -  -  	
  504 D1:AFBB -  -  -  -  	
  505 D1:AFBB 12 -  -  -  	ld (de),a;write color data
  506 D1:AFBC 13 -  -  -  	inc de
  507 D1:AFBD D9 -  -  -  	exx;to shadow
  508 D1:AFBE 05 -  -  -  	dec b;ldir length counter
  509 D1:AFBF D9 -  -  -  	exx
  510 D1:AFC0 C2 B1 AF D1 	jp nz,sdcomp_write_ldir_data_loop
  511 D1:AFC4 C9 -  -  -  	ret
  512 D1:AFC5 -  -  -  -  	
  513 D1:AFC5 -  -  -  -  
  514 D1:AFC5 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  515 D1:AFC5 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  516 D1:AFC5 D5 -  -  -  	push de ;output location	
  517 D1:AFC6 47 -  -  -  	ld b,a;save for later
  518 D1:AFC7 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  519 D1:AFC9 3E 00 -  -  	ld a,0
  520 D1:AFCB 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  521 D1:AFCD CA D7 AF D1 	jp z,sdcomp_leading_pixel_first_skip
  522 D1:AFD1 -  -  -  -  	;has first color
  523 D1:AFD1 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  524 D1:AFD3 CD 98 AE D1 	call sdcomp_get_next_color
  525 D1:AFD7 -  -  -  -  sdcomp_leading_pixel_first_skip:
  526 D1:AFD7 -  -  -  -  	;a is either $00 or $0color1
  527 D1:AFD7 -  -  -  -  	
  528 D1:AFD7 1E FF -  -  	ld e,%11111111;assuming no colors
  529 D1:AFD9 -  -  -  -  	
  530 D1:AFD9 CB 40 -  -  	bit 0,b;check second pixel alpha
  531 D1:AFDB 47 -  -  -  	ld b,a;save for later 
  532 D1:AFDC 3E 00 -  -  	ld a,0
  533 D1:AFDE CA E8 AF D1 	jp z,sdcomp_leading_pixel_second_skip;
  534 D1:AFE2 -  -  -  -  	;has second color 
  535 D1:AFE2 CD 8F AE D1 	call sdcomp_get_next_color_leading_nibble
  536 D1:AFE6 -  -  -  -  	;a = color2 0 
  537 D1:AFE6 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  538 D1:AFE8 -  -  -  -  	
  539 D1:AFE8 -  -  -  -  sdcomp_leading_pixel_second_skip:
  540 D1:AFE8 -  -  -  -  	;a is either 00 or c2 0 
  541 D1:AFE8 -  -  -  -  	;b is either 00 or 0 c1 
  542 D1:AFE8 B0 -  -  -  	or b 
  543 D1:AFE9 47 -  -  -  	ld b,a;final color data
  544 D1:AFEA 7A -  -  -  	ld a,d 
  545 D1:AFEB A3 -  -  -  	and e ;final mask data 
  546 D1:AFEC -  -  -  -  	
  547 D1:AFEC D1 -  -  -  	pop de;return to pointer 
  548 D1:AFED -  -  -  -  	
  549 D1:AFED 12 -  -  -  	ld (de),a;write mask data 
  550 D1:AFEE 13 -  -  -  	inc de 
  551 D1:AFEF 78 -  -  -  	ld a,b;color data 
  552 D1:AFF0 12 -  -  -  	ld (de),a;write color data 
  553 D1:AFF1 -  -  -  -  	
  554 D1:AFF1 -  -  -  -  	
  555 D1:AFF1 -  -  -  -  	
  556 D1:AFF1 -  -  -  -  	;call write_a_to_ram
  557 D1:AFF1 -  -  -  -  	
  558 D1:AFF1 13 -  -  -  	inc de 
  559 D1:AFF2 C9 -  -  -  	ret 
  560 D1:AFF3 -  -  -  -  
  561 D1:AFF3 -  -  -  -  
  562 D1:AFF3 -  -  -  -  
  563 D1:AFF3 -  -  -  -  ;ENTRY POINT 
  564 D1:AFF3 -  -  -  -  
  565 D1:AFF3 -  -  -  -  
  566 D1:AFF3 -  -  -  -  ;hl = sprite data start, de = main data decompress location
  567 D1:AFF3 -  -  -  -  sprite_decompress:
  568 D1:AFF3 -  -  -  -  
  569 D1:AFF3 -  -  -  -  
  570 D1:AFF3 -  -  -  -  	;SETUP ===========================================================================================================
  571 D1:AFF3 -  -  -  -  
  572 D1:AFF3 -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  573 D1:AFF3 -  -  -  -  
  574 D1:AFF3 -  -  -  -  	;HL pointing to flags registers
  575 D1:AFF3 -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  576 D1:AFF3 -  -  -  -  	;set bpc mode 
  577 D1:AFF3 CB 7E -  -  	bit 7,(hl)
  578 D1:AFF5 C4 82 B2 D1 	call nz,sdcomp_set_4bpc
  579 D1:AFF9 CB 76 -  -  	bit 6,(hl)
  580 D1:AFFB C4 33 B2 D1 	call nz,sdcomp_set_3bpc 
  581 D1:AFFF CB 6E -  -  	bit 5,(hl)
  582 D1:B001 C4 F4 B1 D1 	call nz,sdcomp_set_2bpc 
  583 D1:B005 CB 66 -  -  	bit 4,(hl)
  584 D1:B007 C4 D3 B1 D1 	call nz,sdcomp_set_1bpc 
  585 D1:B00B CB 5E -  -  	bit 3,(hl)
  586 D1:B00D C4 B8 B1 D1 	call nz,sdcomp_set_0bpc 
  587 D1:B011 CB 56 -  -  	bit 2,(hl)
  588 D1:B013 C4 DB B2 D1 	call nz,sdcomp_set_noalpha
  589 D1:B017 -  -  -  -  	
  590 D1:B017 -  -  -  -  	
  591 D1:B017 -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  592 D1:B017 -  -  -  -  	
  593 D1:B017 23 -  -  -  	inc hl ;hl points to width in px 
  594 D1:B018 -  -  -  -  	
  595 D1:B018 -  -  -  -  	
  596 D1:B018 7E -  -  -  	ld a,(hl) 
  597 D1:B019 32 5C AF D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  598 D1:B01D 32 26 AE D1 	ld (sdcomp_sprite_width_2),a
  599 D1:B021 47 -  -  -  	ld b,a;width
  600 D1:B022 08 -  -  -  	ex af,af' ;'
  601 D1:B023 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  602 D1:B024 08 -  -  -  	ex af,af' ;' 
  603 D1:B025 -  -  -  -  
  604 D1:B025 -  -  -  -  
  605 D1:B025 -  -  -  -  sdcomp_offset_2 .equ $ 
  606 D1:B025 00 -  -  -  	nop ;replace with inc b for offset 
  607 D1:B026 -  -  -  -  
  608 D1:B026 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  609 D1:B026 04 -  -  -  	inc b ;round up on odd sprites
  610 D1:B027 CB 38 -  -  	srl b;divide by 2
  611 D1:B029 -  -  -  -  	
  612 D1:B029 -  -  -  -  	
  613 D1:B029 3E A0 -  -  	ld a,160
  614 D1:B02B 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  615 D1:B02C 32 CB B0 D1 	ld (sdcomp_gap_btwn_rows),a 
  616 D1:B030 -  -  -  -  	
  617 D1:B030 CD 38 AA D1 	call write_a_to_ram
  618 D1:B034 3E BE -  -  	ld a,$BE
  619 D1:B036 CD 38 AA D1 	call write_a_to_ram
  620 D1:B03A 78 -  -  -  	ld a,b 
  621 D1:B03B CD 38 AA D1 	call write_a_to_ram
  622 D1:B03F -  -  -  -  	
  623 D1:B03F -  -  -  -  	
  624 D1:B03F 7E -  -  -  	ld a,(hl);load width again
  625 D1:B040 -  -  -  -  	
  626 D1:B040 47 -  -  -  	ld b,a 
  627 D1:B041 -  -  -  -  	
  628 D1:B041 37 -  -  -  	scf
  629 D1:B042 -  -  -  -  sdcomp_bg_1 .equ $
  630 D1:B042 DA 48 B0 D1 	jp c,sdcomp_bg_1_skip ;if not BG then skip
  631 D1:B046 -  -  -  -  	
  632 D1:B046 -  -  -  -  	;TODO calculate correct width data , add offset and rounded to even number
  633 D1:B046 -  -  -  -  	
  634 D1:B046 -  -  -  -  	;write width data to de
  635 D1:B046 12 -  -  -  	ld (de), a 
  636 D1:B047 13 -  -  -  	inc de 
  637 D1:B048 -  -  -  -  sdcomp_bg_1_skip:
  638 D1:B048 -  -  -  -  
  639 D1:B048 23 -  -  -  	inc hl ;hl points to height 
  640 D1:B049 7E -  -  -  	ld a,(hl);height
  641 D1:B04A 32 FA AD D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  642 D1:B04E -  -  -  -  	
  643 D1:B04E -  -  -  -  	
  644 D1:B04E 37 -  -  -  	scf
  645 D1:B04F -  -  -  -  sdcomp_bg_2 .equ $
  646 D1:B04F D2 55 B0 D1 	jp nc,sdcomp_bg_2_skip ; skip if BG
  647 D1:B053 -  -  -  -  	
  648 D1:B053 -  -  -  -  	
  649 D1:B053 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  650 D1:B054 13 -  -  -  	inc de 
  651 D1:B055 -  -  -  -  	
  652 D1:B055 -  -  -  -  sdcomp_bg_2_skip:
  653 D1:B055 -  -  -  -  	
  654 D1:B055 23 -  -  -  	inc hl ;HL points to start of alpha data 
  655 D1:B056 -  -  -  -  
  656 D1:B056 E5 -  -  -  	push hl ;Save alpha data 
  657 D1:B057 -  -  -  -  	
  658 D1:B057 -  -  -  -  	
  659 D1:B057 -  -  -  -  	;Need to find start of color data
  660 D1:B057 -  -  -  -  	;at this point a = height, b = width 
  661 D1:B057 -  -  -  -  	
  662 D1:B057 37 -  -  -  	scf
  663 D1:B058 -  -  -  -  	
  664 D1:B058 -  -  -  -  sdcomp_no_alpha_2 .equ $
  665 D1:B058 D2 71 B0 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  666 D1:B05C -  -  -  -  	
  667 D1:B05C -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  668 D1:B05C -  -  -  -  	
  669 D1:B05C E5 -  -  -  	push hl
  670 D1:B05D 67 -  -  -  	ld h,a;height
  671 D1:B05E 68 -  -  -  	ld l,b;width
  672 D1:B05F ED 6C -  -  	mlt hl;number of pixels
  673 D1:B061 -  -  -  -  	;rounds up to nearest multiple of 8
  674 D1:B061 2B -  -  -  	dec hl
  675 D1:B062 CB 3C -  -  	srl h
  676 D1:B064 CB 1D -  -  	rr l
  677 D1:B066 CB 3C -  -  	srl h
  678 D1:B068 CB 1D -  -  	rr l 
  679 D1:B06A CB 3C -  -  	srl h 
  680 D1:B06C CB 1D -  -  	rr l 
  681 D1:B06E 23 -  -  -  	inc hl 
  682 D1:B06F C1 -  -  -  	pop bc ;initial hl location
  683 D1:B070 -  -  -  -  	;add number of bytes to skip 
  684 D1:B070 09 -  -  -  	add hl,bc ;HL points to start of color data 
  685 D1:B071 -  -  -  -  	
  686 D1:B071 -  -  -  -  	
  687 D1:B071 -  -  -  -  	
  688 D1:B071 -  -  -  -  sdcomp_no_alpha_2_skip:
  689 D1:B071 -  -  -  -  
  690 D1:B071 -  -  -  -  	
  691 D1:B071 -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  692 D1:B071 -  -  -  -  
  693 D1:B071 -  -  -  -  	
  694 D1:B071 47 -  -  -  	ld b,a ;save for after
  695 D1:B072 -  -  -  -  	;GET LOCAL PALETTE DATA
  696 D1:B072 -  -  -  -  	
  697 D1:B072 37 -  -  -  	scf 
  698 D1:B073 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  699 D1:B073 D2 7D B0 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  700 D1:B077 -  -  -  -  	
  701 D1:B077 7E -  -  -  	ld a,(hl);color data 
  702 D1:B078 32 1D AF D1 	ld (sdcomp_indexed_color_data_1),a 
  703 D1:B07C 23 -  -  -  	inc hl 
  704 D1:B07D -  -  -  -  	
  705 D1:B07D -  -  -  -  sdcomp_1bpc_1_skip:	
  706 D1:B07D -  -  -  -  
  707 D1:B07D -  -  -  -  
  708 D1:B07D 37 -  -  -  	scf 
  709 D1:B07E -  -  -  -  sdcomp_2bpc_1 .equ $ 
  710 D1:B07E D2 88 B0 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  711 D1:B082 -  -  -  -  	
  712 D1:B082 7E -  -  -  	ld a,(hl);color data 
  713 D1:B083 32 11 AF D1 	ld (sdcomp_indexed_color_data_2),a 
  714 D1:B087 23 -  -  -  	inc hl 
  715 D1:B088 -  -  -  -  	
  716 D1:B088 -  -  -  -  sdcomp_2bpc_1_skip:	
  717 D1:B088 -  -  -  -  
  718 D1:B088 -  -  -  -  
  719 D1:B088 37 -  -  -  	scf 
  720 D1:B089 -  -  -  -  sdcomp_3bpc_1 .equ $ 
  721 D1:B089 DA 99 B0 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  722 D1:B08D -  -  -  -  	
  723 D1:B08D 7E -  -  -  	ld a,(hl);color data 
  724 D1:B08E 32 FF AE D1 	ld (sdcomp_indexed_color_data_3),a 
  725 D1:B092 23 -  -  -  	inc hl 
  726 D1:B093 7E -  -  -  	ld a,(hl);color data 
  727 D1:B094 32 F3 AE D1 	ld (sdcomp_indexed_color_data_4),a 
  728 D1:B098 23 -  -  -  	inc hl 
  729 D1:B099 -  -  -  -  	
  730 D1:B099 -  -  -  -  sdcomp_3bpc_1_skip:	
  731 D1:B099 -  -  -  -  
  732 D1:B099 -  -  -  -  	
  733 D1:B099 D5 -  -  -  	push de ;loops/line data location
  734 D1:B09A EB -  -  -  	ex de,hl
  735 D1:B09B 78 -  -  -  	ld a,b
  736 D1:B09C 01 00 00 00 	ld bc,0
  737 D1:B0A0 4F -  -  -  	ld c,a;height 
  738 D1:B0A1 09 -  -  -  	add hl,bc
  739 D1:B0A2 EB -  -  -  	ex de,hl;de points to data write location
  740 D1:B0A3 -  -  -  -  	
  741 D1:B0A3 -  -  -  -  	
  742 D1:B0A3 D9 -  -  -  	exx;in to shadow
  743 D1:B0A4 D1 -  -  -  	pop de 
  744 D1:B0A5 E1 -  -  -  	pop hl ;alpha data stored from earlier
  745 D1:B0A6 0E 80 -  -  	ld c,%10000000;alpha mask
  746 D1:B0A8 D9 -  -  -  	exx;out 
  747 D1:B0A9 0E 80 -  -  	ld c,%10000000;color mask
  748 D1:B0AB -  -  -  -  	
  749 D1:B0AB -  -  -  -  	;HL now points to pixel color data 
  750 D1:B0AB -  -  -  -  	;HL' points to pixel alpha data 
  751 D1:B0AB -  -  -  -  	;C holds color mask
  752 D1:B0AB -  -  -  -  	;C' holds alpha mask
  753 D1:B0AB -  -  -  -  	;DE' holds loops/line output data location
  754 D1:B0AB -  -  -  -  	;DE holds main data output location
  755 D1:B0AB -  -  -  -  	;A holds height
  756 D1:B0AB -  -  -  -  	;A' holds bits remaining in row
  757 D1:B0AB -  -  -  -  
  758 D1:B0AB -  -  -  -  
  759 D1:B0AB 37 -  -  -  	scf 
  760 D1:B0AC -  -  -  -  sdcomp_flip_setup .equ $
  761 D1:B0AC DA BC B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  762 D1:B0B0 -  -  -  -  
  763 D1:B0B0 -  -  -  -  	
  764 D1:B0B0 2B -  -  -  	dec hl;dec color pointer
  765 D1:B0B1 0E 01 -  -  	ld c, %00000001
  766 D1:B0B3 D9 -  -  -  	exx;to shadow 
  767 D1:B0B4 2B -  -  -  	dec hl;dec alpha pointer
  768 D1:B0B5 0E 01 -  -  	ld c, %00000001;alpha mask
  769 D1:B0B7 CD 5A AF D1 	call sdcomp_traverse_initial
  770 D1:B0BB D9 -  -  -  	exx ;out of shadow 
  771 D1:B0BC -  -  -  -  	
  772 D1:B0BC -  -  -  -  	
  773 D1:B0BC -  -  -  -  
  774 D1:B0BC -  -  -  -  	;TODO jump to BG routine here
  775 D1:B0BC -  -  -  -  	;END SETUP ======================================================================================================
  776 D1:B0BC -  -  -  -  	
  777 D1:B0BC -  -  -  -  	
  778 D1:B0BC -  -  -  -  sdcomp_find_gap_length:
  779 D1:B0BC -  -  -  -  	
  780 D1:B0BC -  -  -  -  	
  781 D1:B0BC -  -  -  -  	
  782 D1:B0BC -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  783 D1:B0BC -  -  -  -  ;this will occur if:
  784 D1:B0BC -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  785 D1:B0BC -  -  -  -  ;
  786 D1:B0BC -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  787 D1:B0BC -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  788 D1:B0BC -  -  -  -  	
  789 D1:B0BC D9 -  -  -  	exx ;to shadow
  790 D1:B0BD -  -  -  -  	
  791 D1:B0BD -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  792 D1:B0BD 06 00 -  -  	ld b,0;00 pairs found 
  793 D1:B0BF 3E 00 -  -  	ld a,0 ;reset
  794 D1:B0C1 32 BE B0 D1 	ld (sdcomp_add_1_gap_length),a 
  795 D1:B0C5 -  -  -  -  
  796 D1:B0C5 -  -  -  -  sdcomp_find_gap_length_loop:
  797 D1:B0C5 -  -  -  -  
  798 D1:B0C5 37 -  -  -  	scf 
  799 D1:B0C6 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  800 D1:B0C6 DA EF B0 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  801 D1:B0CA -  -  -  -  	
  802 D1:B0CA -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  803 D1:B0CA -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  804 D1:B0CA 3E 00 -  -  	ld a,0
  805 D1:B0CC 80 -  -  -  	add a,b 
  806 D1:B0CD -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  807 D1:B0CD 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  808 D1:B0CE 47 -  -  -  	ld b,a 
  809 D1:B0CF 3E 00 -  -  	ld a,%00000000 ;nop 
  810 D1:B0D1 32 CD B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  811 D1:B0D5 3E DA -  -  	ld a,%11011010;jp c
  812 D1:B0D7 32 B5 AD D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  813 D1:B0DB 32 C6 B0 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  814 D1:B0DF -  -  -  -  	
  815 D1:B0DF 37 -  -  -  	scf
  816 D1:B0E0 -  -  -  -  sdcomp_flip_traverse .equ $
  817 D1:B0E0 D4 4C AF D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  818 D1:B0E4 -  -  -  -  		
  819 D1:B0E4 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  820 D1:B0E4 3A 9B B1 D1 	ld a,(sdcomp_loops_per_line_counter)
  821 D1:B0E8 12 -  -  -  	ld (de),a ;write loops/line data 
  822 D1:B0E9 13 -  -  -  	inc de
  823 D1:B0EA -  -  -  -  	
  824 D1:B0EA -  -  -  -  	
  825 D1:B0EA 37 -  -  -  	scf 
  826 D1:B0EB -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached TODO move to after gap length check to avoid writing useless pixels at end of sprite 
  827 D1:B0EB D2 AB B1 D1 	jp nc,sdcomp_end
  828 D1:B0EF -  -  -  -  
  829 D1:B0EF -  -  -  -  	
  830 D1:B0EF -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  831 D1:B0EF CD 39 AE D1 	call sdcomp_get_next_alpha_pair
  832 D1:B0F3 -  -  -  -  	;call write_a_to_ram
  833 D1:B0F3 04 -  -  -  	inc b 
  834 D1:B0F4 -  -  -  -  
  835 D1:B0F4 F5 -  -  -  	push af ;TEST
  836 D1:B0F5 3E AB -  -  	ld a,$AB;TEST
  837 D1:B0F7 CD 38 AA D1 	call write_a_to_ram
  838 D1:B0FB -  -  -  -  	
  839 D1:B0FB -  -  -  -  	;call write_a_to_ram
  840 D1:B0FB F1 -  -  -  	pop af ;TEST
  841 D1:B0FC -  -  -  -  	
  842 D1:B0FC B7 -  -  -  	or a
  843 D1:B0FD CA C5 B0 D1 	jp z,sdcomp_find_gap_length_loop
  844 D1:B101 -  -  -  -  	
  845 D1:B101 -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  846 D1:B101 -  -  -  -  	
  847 D1:B101 F5 -  -  -  	push af; save leading pixel alpha data 
  848 D1:B102 -  -  -  -  	;B holds number of 00 pairs + 1
  849 D1:B102 -  -  -  -  	
  850 D1:B102 3E AA -  -  	ld a,$AA ;test
  851 D1:B104 CD 38 AA D1 	call write_a_to_ram
  852 D1:B108 78 -  -  -  	ld a,b ;test
  853 D1:B109 CD 38 AA D1 	call write_a_to_ram
  854 D1:B10D -  -  -  -  	
  855 D1:B10D -  -  -  -  	
  856 D1:B10D -  -  -  -  	
  857 D1:B10D -  -  -  -  	;Write gap length data to output
  858 D1:B10D 78 -  -  -  	ld a,b 
  859 D1:B10E D9 -  -  -  	exx;out of shadow 
  860 D1:B10F 12 -  -  -  	ld (de),a;GAP LENGTH 
  861 D1:B110 13 -  -  -  	inc de 
  862 D1:B111 D9 -  -  -  	exx;into shadow 	
  863 D1:B112 -  -  -  -  	
  864 D1:B112 -  -  -  -  	
  865 D1:B112 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  866 D1:B112 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  867 D1:B113 -  -  -  -  	
  868 D1:B113 37 -  -  -  	scf 
  869 D1:B114 -  -  -  -  sdcomp_fast_1 .equ $ 
  870 D1:B114 D2 1E B1 D1 	jp nc, sdcomp_ldir_start 
  871 D1:B118 -  -  -  -  	
  872 D1:B118 D9 -  -  -  	exx;out of shadow
  873 D1:B119 CD C5 AF D1 	call sdcomp_write_leading_or_end_pixels
  874 D1:B11D D9 -  -  -  	exx;into shadow 
  875 D1:B11E -  -  -  -  	
  876 D1:B11E -  -  -  -  
  877 D1:B11E -  -  -  -  	
  878 D1:B11E -  -  -  -  ;LDIR ==============================================================================================================	
  879 D1:B11E -  -  -  -  	;Count number of 11 pairs for LDIR section
  880 D1:B11E -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  881 D1:B11E -  -  -  -  	;
  882 D1:B11E -  -  -  -  	
  883 D1:B11E -  -  -  -  	;If ending is 11 -> 00 
  884 D1:B11E -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  885 D1:B11E -  -  -  -  	;Will need to reduce b by 1 
  886 D1:B11E -  -  -  -  	
  887 D1:B11E -  -  -  -  	;If ending is 11 ->01/10
  888 D1:B11E -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  889 D1:B11E -  -  -  -  	
  890 D1:B11E -  -  -  -  sdcomp_ldir_start:
  891 D1:B11E -  -  -  -  
  892 D1:B11E -  -  -  -  ;	ld a, %11010010 ;jp nc 
  893 D1:B11E -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  894 D1:B11E -  -  -  -  
  895 D1:B11E 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  896 D1:B120 -  -  -  -  sdcomp_ldir_loop:
  897 D1:B120 CD 39 AE D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  898 D1:B124 04 -  -  -  	inc b 
  899 D1:B125 -  -  -  -  	
  900 D1:B125 F5 -  -  -  	push af 
  901 D1:B126 3E DE -  -  	ld a,$DE 
  902 D1:B128 CD 38 AA D1 	call write_a_to_ram
  903 D1:B12C F1 -  -  -  	pop af
  904 D1:B12D CD 38 AA D1 	call write_a_to_ram
  905 D1:B131 -  -  -  -  	
  906 D1:B131 -  -  -  -  ;	scf 
  907 D1:B131 -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  908 D1:B131 -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  909 D1:B131 -  -  -  -  	
  910 D1:B131 EE FF -  -  	xor %11111111;flip all bits 
  911 D1:B133 CA 20 B1 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  912 D1:B137 EE FF -  -  	xor %11111111 ; flip back 
  913 D1:B139 -  -  -  -  sdcomp_ldir_loop_end:
  914 D1:B139 -  -  -  -  
  915 D1:B139 -  -  -  -  	
  916 D1:B139 -  -  -  -  	;at this point b holds # 11 pairs +1 
  917 D1:B139 37 -  -  -  	scf 
  918 D1:B13A -  -  -  -  sdcomp_fast_2 .equ $ 
  919 D1:B13A D2 5B B1 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  920 D1:B13E -  -  -  -  
  921 D1:B13E -  -  -  -  	
  922 D1:B13E -  -  -  -  	
  923 D1:B13E 05 -  -  -  	dec b ;b holds # 11 pairs 
  924 D1:B13F CA 7B B1 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  925 D1:B143 B7 -  -  -  	or a
  926 D1:B144 C2 5B B1 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  927 D1:B148 -  -  -  -  	
  928 D1:B148 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  929 D1:B148 -  -  -  -  	
  930 D1:B148 3E DF -  -  	ld a,$DF
  931 D1:B14A CD 38 AA D1 	call write_a_to_ram
  932 D1:B14E -  -  -  -  	
  933 D1:B14E -  -  -  -  	;must add 1 to next gap length, have already read first 00
  934 D1:B14E -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  935 D1:B14E 3E 01 -  -  	ld a,1;start w 1 gap len
  936 D1:B150 32 BE B0 D1 	ld (sdcomp_add_1_gap_length),a 
  937 D1:B154 3E FF -  -  	ld a,$ff;ending pixels 11
  938 D1:B156 -  -  -  -  	
  939 D1:B156 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  940 D1:B157 CA 7B B1 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  941 D1:B15B -  -  -  -  	;b holds ldir length 
  942 D1:B15B -  -  -  -  	
  943 D1:B15B -  -  -  -  
  944 D1:B15B -  -  -  -  ;b holds ldir length, a holds ending pixels
  945 D1:B15B -  -  -  -  sdcomp_ldir_write:
  946 D1:B15B -  -  -  -  
  947 D1:B15B -  -  -  -  	;b holds 11 pairs found 
  948 D1:B15B F5 -  -  -  	push af;TEST
  949 D1:B15C 3E DA -  -  	ld a,$DA 
  950 D1:B15E CD 38 AA D1 	call write_a_to_ram
  951 D1:B162 78 -  -  -  	ld a,b 
  952 D1:B163 CD 38 AA D1 	call write_a_to_ram
  953 D1:B167 F1 -  -  -  	pop af ;TEST
  954 D1:B168 -  -  -  -  
  955 D1:B168 F5 -  -  -  	push af;save ending pixels
  956 D1:B169 78 -  -  -  	ld a,b
  957 D1:B16A D9 -  -  -  	exx ;out 
  958 D1:B16B 12 -  -  -  	ld (de),a;write ldir length
  959 D1:B16C 13 -  -  -  	inc de 
  960 D1:B16D CD B1 AF D1 	call sdcomp_write_ldir_data_loop
  961 D1:B171 -  -  -  -  
  962 D1:B171 F1 -  -  -  	pop af;return ending pixels
  963 D1:B172 -  -  -  -  	
  964 D1:B172 37 -  -  -  	scf
  965 D1:B173 -  -  -  -  sdcomp_fast_3 .equ $ 
  966 D1:B173 D2 9A B1 D1 	jp nc,sdcomp_inc_loops_per_line
  967 D1:B177 -  -  -  -  	
  968 D1:B177 C3 8E B1 D1 	jp sdcomp_write_end_pixels
  969 D1:B17B -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  970 D1:B17B -  -  -  -  
  971 D1:B17B F5 -  -  -  	push af ;TEST
  972 D1:B17C -  -  -  -  
  973 D1:B17C 3E DB -  -  	ld a,$DB
  974 D1:B17E CD 38 AA D1 	call write_a_to_ram
  975 D1:B182 F1 -  -  -  	pop af ;TEST
  976 D1:B183 CD 38 AA D1 	call write_a_to_ram
  977 D1:B187 -  -  -  -  
  978 D1:B187 F5 -  -  -  	push af;save end pixels
  979 D1:B188 -  -  -  -  	
  980 D1:B188 D9 -  -  -  	exx;out of shadow
  981 D1:B189 3E 00 -  -  	ld a,0
  982 D1:B18B 12 -  -  -  	ld (de),a ;write 0 as ldir length
  983 D1:B18C 13 -  -  -  	inc de 
  984 D1:B18D F1 -  -  -  	pop af;return ending pixels
  985 D1:B18E -  -  -  -  
  986 D1:B18E -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  987 D1:B18E -  -  -  -  
  988 D1:B18E -  -  -  -  sdcomp_write_end_pixels:
  989 D1:B18E -  -  -  -  ;not in shadow
  990 D1:B18E -  -  -  -  	
  991 D1:B18E -  -  -  -  	;test
  992 D1:B18E F5 -  -  -  	push af 
  993 D1:B18F 3E E0 -  -  	ld a,$E0
  994 D1:B191 CD 38 AA D1 	call write_a_to_ram
  995 D1:B195 F1 -  -  -  	pop af 
  996 D1:B196 -  -  -  -  	
  997 D1:B196 -  -  -  -  
  998 D1:B196 CD C5 AF D1 	call sdcomp_write_leading_or_end_pixels
  999 D1:B19A -  -  -  -  	
 1000 D1:B19A -  -  -  -  	
 1001 D1:B19A -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
 1002 D1:B19A -  -  -  -  	;ld a,2
 1003 D1:B19A -  -  -  -  	;dec a 
 1004 D1:B19A -  -  -  -  	;jp z,sdcomp_end
 1005 D1:B19A -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
 1006 D1:B19A -  -  -  -  
 1007 D1:B19A -  -  -  -  sdcomp_inc_loops_per_line:	
 1008 D1:B19A -  -  -  -  	;INC LOOP/LINE count
 1009 D1:B19A -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
 1010 D1:B19A 3E 00 -  -  	ld a,0;inc number of loops
 1011 D1:B19C 3C -  -  -  	inc a 
 1012 D1:B19D 32 9B B1 D1 	ld (sdcomp_loops_per_line_counter),a
 1013 D1:B1A1 -  -  -  -  
 1014 D1:B1A1 -  -  -  -  	; scf 
 1015 D1:B1A1 -  -  -  -  ; sdcomp_write_loops_per_line_flag .equ $
 1016 D1:B1A1 -  -  -  -  	; jp c, sdcomp_write_loops_per_line_skip
 1017 D1:B1A1 -  -  -  -  	; exx 
 1018 D1:B1A1 -  -  -  -  	; ld a,(sdcomp_loops_per_line_counter)
 1019 D1:B1A1 -  -  -  -  	; ld (de),a ;write loops/line data 
 1020 D1:B1A1 -  -  -  -  	; inc de
 1021 D1:B1A1 -  -  -  -  	; exx 
 1022 D1:B1A1 -  -  -  -  	; ld a,%11011010;jp c
 1023 D1:B1A1 -  -  -  -  	; ld (sdcomp_write_loops_per_line_flag),a
 1024 D1:B1A1 -  -  -  -  
 1025 D1:B1A1 -  -  -  -  ; sdcomp_write_loops_per_line_skip:
 1026 D1:B1A1 -  -  -  -  
 1027 D1:B1A1 -  -  -  -  	
 1028 D1:B1A1 3E EA -  -  	ld a,$EA
 1029 D1:B1A3 CD 38 AA D1 	call write_a_to_ram
 1030 D1:B1A7 -  -  -  -  	
 1031 D1:B1A7 -  -  -  -  	
 1032 D1:B1A7 C3 BC B0 D1 	jp sdcomp_find_gap_length
 1033 D1:B1AB -  -  -  -  
 1034 D1:B1AB -  -  -  -  sdcomp_end:
 1035 D1:B1AB -  -  -  -  	
 1036 D1:B1AB 3E 69 -  -  	ld a,$69
 1037 D1:B1AD CD 38 AA D1 	call write_a_to_ram
 1038 D1:B1B1 -  -  -  -  	
 1039 D1:B1B1 3E DA -  -  	ld a,%11011010;jp c
 1040 D1:B1B3 32 EB B0 D1 	ld (sdcomp_end_reached_flag),a 
 1041 D1:B1B7 C9 -  -  -  	ret 
 1042 D1:B1B8 -  -  -  -  
 1043 D1:B1B8 -  -  -  -  
 1044 D1:B1B8 -  -  -  -  ;bit orders
 1045 D1:B1B8 -  -  -  -  ;	noflip   flip 
 1046 D1:B1B8 -  -  -  -  ;4bpp 3210 	 0123
 1047 D1:B1B8 -  -  -  -  ;3bpp 210	 012
 1048 D1:B1B8 -  -  -  -  ;2bpp 10	 01
 1049 D1:B1B8 -  -  -  -  ;1bpp 0		 0
 1050 D1:B1B8 -  -  -  -  
 1051 D1:B1B8 -  -  -  -  
 1052 D1:B1B8 -  -  -  -  sdcomp_set_0bpc:
 1053 D1:B1B8 3E DA -  -  	ld a,%11011010;jp c
 1054 D1:B1BA 32 9C AE D1 	ld (sdcomp_0bpc),a
 1055 D1:B1BE -  -  -  -  	
 1056 D1:B1BE 32 7E B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1057 D1:B1C2 32 89 B0 D1 	ld (sdcomp_3bpc_1),a 
 1058 D1:B1C6 -  -  -  -  	
 1059 D1:B1C6 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1060 D1:B1C8 32 73 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1061 D1:B1CC 3E 00 -  -  	ld a,%00000000
 1062 D1:B1CE 32 75 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1063 D1:B1D2 C9 -  -  -  	ret 
 1064 D1:B1D3 -  -  -  -  	
 1065 D1:B1D3 -  -  -  -  sdcomp_set_1bpc:
 1066 D1:B1D3 3E DA -  -  	ld a,%11011010;jp c
 1067 D1:B1D5 32 AE AE D1 	ld (sdcomp_1bpc),a
 1068 D1:B1D9 -  -  -  -  	
 1069 D1:B1D9 32 7E B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1070 D1:B1DD 32 89 B0 D1 	ld (sdcomp_3bpc_1),a 
 1071 D1:B1E1 -  -  -  -  	
 1072 D1:B1E1 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1073 D1:B1E3 32 73 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1074 D1:B1E7 -  -  -  -  	
 1075 D1:B1E7 -  -  -  -  	
 1076 D1:B1E7 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1077 D1:B1E9 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1078 D1:B1ED -  -  -  -  	
 1079 D1:B1ED 3E 80 -  -  	ld a,%10000000
 1080 D1:B1EF 32 75 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1081 D1:B1F3 -  -  -  -  	
 1082 D1:B1F3 C9 -  -  -  	ret 
 1083 D1:B1F4 -  -  -  -  
 1084 D1:B1F4 -  -  -  -  sdcomp_set_2bpc:
 1085 D1:B1F4 3E DA -  -  	ld a,%11011010;jp c
 1086 D1:B1F6 32 C0 AE D1 	ld (sdcomp_2bpc),a
 1087 D1:B1FA 32 89 B0 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1088 D1:B1FE -  -  -  -  	
 1089 D1:B1FE 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1090 D1:B200 32 73 B0 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1091 D1:B204 32 7E B0 D1 	ld (sdcomp_2bpc_1),a 
 1092 D1:B208 -  -  -  -  	
 1093 D1:B208 37 -  -  -  	scf 
 1094 D1:B209 -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1095 D1:B209 D2 1A B2 D1 	jp nc, sdcomp_2bpc_flip
 1096 D1:B20D -  -  -  -  	
 1097 D1:B20D 3E CB -  -  	ld a,%11001011 ;set 1,e
 1098 D1:B20F 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1099 D1:B213 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1100 D1:B215 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1101 D1:B219 C9 -  -  -  	ret 
 1102 D1:B21A -  -  -  -  	
 1103 D1:B21A -  -  -  -  sdcomp_2bpc_flip:
 1104 D1:B21A 3E CB -  -  	ld a,%11001011 ;set 1,e
 1105 D1:B21C 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1106 D1:B220 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1107 D1:B222 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1108 D1:B226 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1109 D1:B228 32 6E AF D1 	ld (sdcomp_traverse_2bpp),a 
 1110 D1:B22C 3E C0 -  -  	ld a,%11000000
 1111 D1:B22E 32 75 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1112 D1:B232 C9 -  -  -  	ret 
 1113 D1:B233 -  -  -  -  
 1114 D1:B233 -  -  -  -  
 1115 D1:B233 -  -  -  -  sdcomp_set_3bpc:
 1116 D1:B233 3E DA -  -  	ld a,%11011010;jp c
 1117 D1:B235 32 D2 AE D1 	ld (sdcomp_3bpc),a
 1118 D1:B239 -  -  -  -  	
 1119 D1:B239 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1120 D1:B23B 32 73 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1121 D1:B23F 32 7E B0 D1 	ld (sdcomp_2bpc_1),a 
 1122 D1:B243 32 89 B0 D1 	ld (sdcomp_3bpc_1),a 
 1123 D1:B247 -  -  -  -  	
 1124 D1:B247 37 -  -  -  	scf 
 1125 D1:B248 -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1126 D1:B248 D2 5F B2 D1 	jp nc, sdcomp_3bpc_flip	
 1127 D1:B24C -  -  -  -  	
 1128 D1:B24C 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1129 D1:B24E 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1130 D1:B252 3E CB -  -  	ld a,%11001011 ;set 1,e
 1131 D1:B254 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1132 D1:B258 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1133 D1:B25A 32 D0 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1134 D1:B25E C9 -  -  -  	ret 
 1135 D1:B25F -  -  -  -  	
 1136 D1:B25F -  -  -  -  sdcomp_3bpc_flip:
 1137 D1:B25F 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1138 D1:B261 32 D0 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1139 D1:B265 3E CB -  -  	ld a,%11001011 ;set 1,e
 1140 D1:B267 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1141 D1:B26B 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1142 D1:B26D 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1143 D1:B271 -  -  -  -  	
 1144 D1:B271 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1145 D1:B273 32 6E AF D1 	ld (sdcomp_traverse_2bpp),a 
 1146 D1:B277 32 70 AF D1 	ld (sdcomp_traverse_3bpp),a 
 1147 D1:B27B 3E E0 -  -  	ld a,%11100000
 1148 D1:B27D 32 75 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1149 D1:B281 -  -  -  -  	
 1150 D1:B281 C9 -  -  -  	ret 
 1151 D1:B282 -  -  -  -  
 1152 D1:B282 -  -  -  -  sdcomp_set_4bpc:
 1153 D1:B282 3E DA -  -  	ld a,%11011010;jp c
 1154 D1:B284 -  -  -  -  
 1155 D1:B284 32 73 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1156 D1:B288 32 7E B0 D1 	ld (sdcomp_2bpc_1),a 
 1157 D1:B28C 32 89 B0 D1 	ld (sdcomp_3bpc_1),a 
 1158 D1:B290 -  -  -  -  	
 1159 D1:B290 37 -  -  -  	scf 
 1160 D1:B291 -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1161 D1:B291 D2 AE B2 D1 	jp nc, sdcomp_4bpc_flip	
 1162 D1:B295 3E DB -  -  	ld a,%11011011 ;set 3,e
 1163 D1:B297 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1164 D1:B29B 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1165 D1:B29D 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1166 D1:B2A1 3E CB -  -  	ld a,%11001011 ;set 1,e
 1167 D1:B2A3 32 D0 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1168 D1:B2A7 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1169 D1:B2A9 32 E2 AE D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1170 D1:B2AD C9 -  -  -  	ret 
 1171 D1:B2AE -  -  -  -  sdcomp_4bpc_flip:
 1172 D1:B2AE 3E DB -  -  	ld a,%11011011 ;set 3,e
 1173 D1:B2B0 32 E2 AE D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1174 D1:B2B4 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1175 D1:B2B6 32 D0 AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1176 D1:B2BA 3E CB -  -  	ld a,%11001011 ;set 1,e
 1177 D1:B2BC 32 BE AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1178 D1:B2C0 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1179 D1:B2C2 32 AC AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1180 D1:B2C6 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1181 D1:B2C8 32 6E AF D1 	ld (sdcomp_traverse_2bpp),a 
 1182 D1:B2CC 32 70 AF D1 	ld (sdcomp_traverse_3bpp),a 
 1183 D1:B2D0 32 72 AF D1 	ld (sdcomp_traverse_4bpp),a 
 1184 D1:B2D4 -  -  -  -  	
 1185 D1:B2D4 3E F0 -  -  	ld a,%11110000
 1186 D1:B2D6 32 75 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1187 D1:B2DA -  -  -  -  	
 1188 D1:B2DA C9 -  -  -  	ret 
 1189 D1:B2DB -  -  -  -  	
 1190 D1:B2DB -  -  -  -  	
 1191 D1:B2DB -  -  -  -  sdcomp_set_noalpha:
 1192 D1:B2DB 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1193 D1:B2DD 32 E7 AD D1 	ld (sdcomp_no_alpha_1),a 
 1194 D1:B2E1 3E DA -  -  	ld a,%11011010;jp c
 1195 D1:B2E3 32 58 B0 D1 	ld (sdcomp_no_alpha_2),a 
 1196 D1:B2E7 32 66 AF D1 	ld (sdcomp_no_alpha_3),a 
 1197 D1:B2EB C9 -  -  -  	ret
 1198 D1:B2EC -  -  -  -  
 1199 D1:B2EC -  -  -  -  
 1200 D1:B2EC -  -  -  -  sdcomp_set_offset:
 1201 D1:B2EC 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1202 D1:B2EE 32 1B AE D1 	ld (sdcomp_offset_1),a 
 1203 D1:B2F2 32 C9 AD D1 	ld (sdcomp_bit_offset),a 
 1204 D1:B2F6 3E 04 -  -  	ld a,%00000100 ;inc b 
 1205 D1:B2F8 32 25 B0 D1 	ld (sdcomp_offset_2),a 
 1206 D1:B2FC -  -  -  -  	
 1207 D1:B2FC C9 -  -  -  	ret 
 1208 D1:B2FD -  -  -  -  	
 1209 D1:B2FD -  -  -  -  sdcomp_set_flip:
 1210 D1:B2FD 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1211 D1:B2FF 32 A0 AD D1 	ld (sdcomp_flip_bitstream),a
 1212 D1:B303 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1213 D1:B305 32 A2 AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1214 D1:B309 3E DC -  -  	ld a, %11011100 ;call c 
 1215 D1:B30B 32 E0 B0 D1 	ld (sdcomp_flip_traverse),a 
 1216 D1:B30F -  -  -  -  	
 1217 D1:B30F 3E DA -  -  	ld a,%11011010;jp c
 1218 D1:B311 32 09 B2 D1 	ld (sdcomp_flip_2bpc),a
 1219 D1:B315 32 48 B2 D1 	ld (sdcomp_flip_3bpc),a
 1220 D1:B319 32 91 B2 D1 	ld (sdcomp_flip_4bpc),a
 1221 D1:B31D 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1222 D1:B31F 32 AC B0 D1 	ld (sdcomp_flip_setup),a 
 1223 D1:B323 -  -  -  -  	
 1224 D1:B323 C9 -  -  -  	ret 
 1225 D1:B324 -  -  -  -  	
 1226 D1:B324 -  -  -  -  
 1227 D1:B324 -  -  -  -  
 1228 D1:B324 -  -  -  -  sdcomp_set_fast:
 1229 D1:B324 3E DA -  -  	ld a,%11011010;jp c
 1230 D1:B326 32 14 B1 D1 	ld(sdcomp_fast_1),a 
 1231 D1:B32A 32 3A B1 D1 	ld(sdcomp_fast_2),a 
 1232 D1:B32E 32 73 B1 D1 	ld(sdcomp_fast_3),a 
 1233 D1:B332 -  -  -  -  	
 1234 D1:B332 C9 -  -  -  	ret 
 1235 D1:B333 -  -  -  -  
 1236 D1:B333 -  -  -  -  
 1237 D1:B333 -  -  -  -  
 1238 D1:B333 -  -  -  -  
 1239 D1:B333 -  -  -  -  
 1240 D1:B333 -  -  -  -  
 1241 D1:B333 -  -  -  -  
Listing for file "ascent.asm"
  273 D1:B333 -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B333 -  -  -  -  
    2 D1:B333 -  -  -  -  
    3 D1:B333 -  -  -  -  draw_mg:
    4 D1:B333 2A 58 AA D1 	ld hl,(draw_buffer)
    5 D1:B337 22 01 B4 D1 	ld (dfgs_vram_top_1),hl
    6 D1:B33B 22 67 B4 D1 	ld (dfgs_vram_top_2),hl
    7 D1:B33F 01 60 95 00 	ld bc,160*239
    8 D1:B343 09 -  -  -  	add hl,bc
    9 D1:B344 22 D5 B4 D1 	ld (dfgs_vram_bottom_1),hl 
   10 D1:B348 22 A4 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   11 D1:B34C 22 3B B5 D1 	ld (dfgs_vram_bottom_3),hl 
   12 D1:B350 22 69 B5 D1 	ld (dfgs_vram_bottom_4),hl 
   13 D1:B354 -  -  -  -  	
   14 D1:B354 2A 52 AA D1 	ld hl,(cam_pos)
   15 D1:B358 CB 3C -  -  	srl h
   16 D1:B35A CB 1D -  -  	rr l;div by 2
   17 D1:B35C 01 EF 00 00 	ld bc,239
   18 D1:B360 09 -  -  -  	add hl,bc 
   19 D1:B361 7D -  -  -  	ld a,l ;lsb cam pos 
   20 D1:B362 32 E7 B3 D1 	ld (dfgs_cam_height_1),a
   21 D1:B366 32 45 B4 D1 	ld (dfgs_cam_height_2),a
   22 D1:B36A 32 1A B5 D1 	ld (dfgs_cam_height_3),a
   23 D1:B36E -  -  -  -  	
   24 D1:B36E 01 00 00 00 	ld bc,0
   25 D1:B372 4C -  -  -  	ld c,h;msb ccam pos 
   26 D1:B373 0C -  -  -  	inc c 
   27 D1:B374 21 68 C9 D1 	ld hl,MG_Data_frame_table
   28 D1:B378 09 -  -  -  	add hl,bc
   29 D1:B379 09 -  -  -  	add hl,bc 
   30 D1:B37A 09 -  -  -  	add hl,bc 	
   31 D1:B37B ED 27 -  -  	ld hl,(hl);upper frame 
   32 D1:B37D -  -  -  -  	
   33 D1:B37D CD CD B3 D1 	call draw_fg_sprites
   34 D1:B381 C9 -  -  -  	ret
   35 D1:B382 -  -  -  -  
   36 D1:B382 -  -  -  -  
   37 D1:B382 -  -  -  -  draw_fg:
   38 D1:B382 2A 58 AA D1 	ld hl,(draw_buffer)
   39 D1:B386 22 01 B4 D1 	ld (dfgs_vram_top_1),hl
   40 D1:B38A 22 67 B4 D1 	ld (dfgs_vram_top_2),hl
   41 D1:B38E 01 60 95 00 	ld bc,160*239
   42 D1:B392 09 -  -  -  	add hl,bc
   43 D1:B393 22 D5 B4 D1 	ld (dfgs_vram_bottom_1),hl 
   44 D1:B397 22 A4 B4 D1 	ld (dfgs_vram_bottom_2),hl 
   45 D1:B39B 22 3B B5 D1 	ld (dfgs_vram_bottom_3),hl 
   46 D1:B39F 22 69 B5 D1 	ld (dfgs_vram_bottom_4),hl 
   47 D1:B3A3 -  -  -  -  	
   48 D1:B3A3 2A 52 AA D1 	ld hl,(cam_pos)
   49 D1:B3A7 01 EF 00 00 	ld bc,239
   50 D1:B3AB 09 -  -  -  	add hl,bc 
   51 D1:B3AC 7D -  -  -  	ld a,l ;lsb cam pos 
   52 D1:B3AD 32 E7 B3 D1 	ld (dfgs_cam_height_1),a
   53 D1:B3B1 32 45 B4 D1 	ld (dfgs_cam_height_2),a
   54 D1:B3B5 32 1A B5 D1 	ld (dfgs_cam_height_3),a
   55 D1:B3B9 -  -  -  -  	
   56 D1:B3B9 01 00 00 00 	ld bc,0
   57 D1:B3BD 4C -  -  -  	ld c,h;msb ccam pos 
   58 D1:B3BE 0C -  -  -  	inc c 
   59 D1:B3BF 21 88 C0 D1 	ld hl,FG_Data_frame_table
   60 D1:B3C3 09 -  -  -  	add hl,bc
   61 D1:B3C4 09 -  -  -  	add hl,bc 
   62 D1:B3C5 09 -  -  -  	add hl,bc 	
   63 D1:B3C6 ED 27 -  -  	ld hl,(hl);upper frame 
   64 D1:B3C8 -  -  -  -  	
   65 D1:B3C8 CD CD B3 D1 	call draw_fg_sprites
   66 D1:B3CC C9 -  -  -  	ret
   67 D1:B3CD -  -  -  -  
   68 D1:B3CD -  -  -  -  
   69 D1:B3CD -  -  -  -  
   70 D1:B3CD -  -  -  -  
   71 D1:B3CD -  -  -  -  ;hl = upper frame data
   72 D1:B3CD -  -  -  -   
   73 D1:B3CD -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   74 D1:B3CD -  -  -  -  draw_fg_sprites:
   75 D1:B3CD -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   76 D1:B3CD ED 17 -  -  	ld de,(hl)
   77 D1:B3CF ED 53 B0 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
   78 D1:B3D4 -  -  -  -  	
   79 D1:B3D4 11 00 00 00 	ld de,0
   80 D1:B3D8 23 -  -  -  	inc hl 
   81 D1:B3D9 23 -  -  -  	inc hl
   82 D1:B3DA 23 -  -  -  	inc hl;past data table 
   83 D1:B3DB -  -  -  -  	;hl is number of elements
   84 D1:B3DB 08 -  -  -  	ex af,af' ;'
   85 D1:B3DC 7E -  -  -  	ld a,(hl);number of elements
   86 D1:B3DD 08 -  -  -  	ex af,af' ;'
   87 D1:B3DE 23 -  -  -  	inc hl 
   88 D1:B3DF -  -  -  -  	
   89 D1:B3DF -  -  -  -  	
   90 D1:B3DF -  -  -  -  dfgs_upper_loop:
   91 D1:B3DF 7E -  -  -  	ld a,(hl);sprite y value 
   92 D1:B3E0 23 -  -  -  	inc hl 
   93 D1:B3E1 96 -  -  -  	sub (hl);subtract height
   94 D1:B3E2 D2 F0 B3 D1 	jp nc,dfgs_upper_skip;if no carry,skip
   95 D1:B3E6 -  -  -  -  	
   96 D1:B3E6 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   97 D1:B3E6 D6 00 -  -  	sub 0 ;subtract camera height lsb 
   98 D1:B3E8 DA FE B3 D1 	jp c,dfgs_upper_cont
   99 D1:B3EC CA FE B3 D1 	jp z,dfgs_upper_cont 
  100 D1:B3F0 -  -  -  -  dfgs_upper_skip:
  101 D1:B3F0 23 -  -  -  	inc hl 
  102 D1:B3F1 23 -  -  -  	inc hl
  103 D1:B3F2 23 -  -  -  	inc hl;to y 
  104 D1:B3F3 08 -  -  -  	ex af,af';'
  105 D1:B3F4 3D -  -  -  	dec a 
  106 D1:B3F5 CA 30 B4 D1 	jp z,dfgs_mid_start 
  107 D1:B3F9 08 -  -  -  	ex af,af';'
  108 D1:B3FA C3 DF B3 D1 	jp dfgs_upper_loop
  109 D1:B3FE -  -  -  -  	
  110 D1:B3FE -  -  -  -  dfgs_upper_cont:
  111 D1:B3FE -  -  -  -  	
  112 D1:B3FE 86 -  -  -  	add a,(hl);add height
  113 D1:B3FF -  -  -  -  	;a now holds 0 indexed row, number of lines to skip drawing
  114 D1:B3FF D9 -  -  -  	exx
  115 D1:B400 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  116 D1:B400 11 00 00 00 	ld de,0;load top of vram 
  117 D1:B404 D9 -  -  -  	exx;out shadow
  118 D1:B405 -  -  -  -  	
  119 D1:B405 CD 96 B5 D1 	call dfgs_setup_draw;toshadow	
  120 D1:B409 -  -  -  -  	
  121 D1:B409 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  122 D1:B40B CA 17 B4 D1 	jp z,dfgs_upper_fast
  123 D1:B40F CD 57 AD D1 	call draw_slow_sprite_top_cut
  124 D1:B413 C3 1B B4 D1 	jp dfgs_upper_skip_2
  125 D1:B417 -  -  -  -  dfgs_upper_fast:
  126 D1:B417 CD D7 AC D1 	call draw_fast_sprite_top_cut
  127 D1:B41B -  -  -  -  dfgs_upper_skip_2:
  128 D1:B41B D9 -  -  -  	exx ;out of shadow, hl holds index
  129 D1:B41C -  -  -  -  	
  130 D1:B41C 11 00 00 00 	ld de,0 
  131 D1:B420 01 00 00 00 	ld bc,0
  132 D1:B424 23 -  -  -  	inc hl;to y 
  133 D1:B425 08 -  -  -  	ex af,af';'
  134 D1:B426 3D -  -  -  	dec a 
  135 D1:B427 CA 30 B4 D1 	jp z,dfgs_mid_start 
  136 D1:B42B 08 -  -  -  	ex af,af';'
  137 D1:B42C C3 DF B3 D1 	jp dfgs_upper_loop
  138 D1:B430 -  -  -  -  	
  139 D1:B430 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  140 D1:B430 -  -  -  -  	
  141 D1:B430 ED 17 -  -  	ld de,(hl)
  142 D1:B432 ED 53 B0 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  143 D1:B437 11 00 00 00 	ld de,0
  144 D1:B43B 23 -  -  -  	inc hl 
  145 D1:B43C 23 -  -  -  	inc hl
  146 D1:B43D 23 -  -  -  	inc hl;past data table 
  147 D1:B43E 08 -  -  -  	ex af,af' ;'
  148 D1:B43F 7E -  -  -  	ld a,(hl);number of elements
  149 D1:B440 08 -  -  -  	ex af,af' ;'
  150 D1:B441 23 -  -  -  	inc hl 
  151 D1:B442 -  -  -  -  dfgs_mid_loop:
  152 D1:B442 7E -  -  -  	ld a,(hl);y val 
  153 D1:B443 23 -  -  -  	inc hl ;to height
  154 D1:B444 -  -  -  -  dfgs_cam_height_2 .equ $ + 1
  155 D1:B444 D6 00 -  -  	sub 0;subtract cam pos
  156 D1:B446 DA 96 B4 D1 	jp c,dfgs_mid_sprite_below ;sprite is below camera pos, either full or bottom cut 
  157 D1:B44A CA 96 B4 D1 	jp z,dfgs_mid_sprite_below 
  158 D1:B44E -  -  -  -  	;sprite start is above camera pos, top cut 
  159 D1:B44E BE -  -  -  	cp (hl);a holds numb lines below sprite y , compare to height
  160 D1:B44F DA 65 B4 D1 	jp c,dfgs_mid_above_cont
  161 D1:B453 CA 65 B4 D1 	jp z,dfgs_mid_above_cont
  162 D1:B457 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  163 D1:B457 23 -  -  -  	inc hl 
  164 D1:B458 23 -  -  -  	inc hl
  165 D1:B459 23 -  -  -  	inc hl;to y 
  166 D1:B45A 08 -  -  -  	ex af,af';'
  167 D1:B45B 3D -  -  -  	dec a 
  168 D1:B45C CA 05 B5 D1 	jp z,dfgs_lower_start 
  169 D1:B460 08 -  -  -  	ex af,af';'
  170 D1:B461 C3 42 B4 D1 	jp dfgs_mid_loop
  171 D1:B465 -  -  -  -  	
  172 D1:B465 -  -  -  -  dfgs_mid_above_cont:
  173 D1:B465 -  -  -  -  	;a = lines to skip 
  174 D1:B465 D9 -  -  -  	exx
  175 D1:B466 -  -  -  -  dfgs_vram_top_2 .equ $ + 1 
  176 D1:B466 11 00 00 00 	ld de,0
  177 D1:B46A D9 -  -  -  	exx
  178 D1:B46B -  -  -  -  	
  179 D1:B46B CD 96 B5 D1 	call dfgs_setup_draw;toshadow
  180 D1:B46F -  -  -  -  	
  181 D1:B46F CB 45 -  -  	bit 0,l 
  182 D1:B471 CA 7D B4 D1 	jp z,dfgs_mid_top_fast
  183 D1:B475 CD 57 AD D1 	call draw_slow_sprite_top_cut
  184 D1:B479 C3 81 B4 D1 	jp dfgs_mid_top_slow
  185 D1:B47D -  -  -  -  dfgs_mid_top_fast:
  186 D1:B47D CD D7 AC D1 	call draw_fast_sprite_top_cut
  187 D1:B481 -  -  -  -  dfgs_mid_top_slow:
  188 D1:B481 D9 -  -  -  	exx;out shadwo
  189 D1:B482 11 00 00 00 	ld de,0 
  190 D1:B486 01 00 00 00 	ld bc,0
  191 D1:B48A 23 -  -  -  	inc hl;to y 
  192 D1:B48B 08 -  -  -  	ex af,af';'
  193 D1:B48C 3D -  -  -  	dec a 
  194 D1:B48D CA 05 B5 D1 	jp z,dfgs_lower_start 
  195 D1:B491 08 -  -  -  	ex af,af';'
  196 D1:B492 C3 42 B4 D1 	jp dfgs_mid_loop
  197 D1:B496 -  -  -  -  
  198 D1:B496 -  -  -  -  dfgs_mid_sprite_below:;sprite start is = or below top of screen 
  199 D1:B496 -  -  -  -  	;can be full or bottom cut
  200 D1:B496 -  -  -  -  	;a holds distance of sprite below top of screen
  201 D1:B496 -  -  -  -  	;0 = top of screen 255 = 1 below ,254 = 2 below ... 17 = bottom of screen
  202 D1:B496 3D -  -  -  	dec a 
  203 D1:B497 D6 10 -  -  	sub 16;a holds dist from bottom
  204 D1:B499 DA 57 B4 D1 	jp c,dfgs_mid_skip
  205 D1:B49D BE -  -  -  	cp (hl);compare to height
  206 D1:B49E DA D3 B4 D1 	jp c,dfgs_mid_bottom_cut
  207 D1:B4A2 -  -  -  -  	
  208 D1:B4A2 -  -  -  -  	;full sprite
  209 D1:B4A2 D9 -  -  -  	exx
  210 D1:B4A3 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1
  211 D1:B4A3 11 00 00 00 	ld de,0
  212 D1:B4A7 D9 -  -  -  	exx
  213 D1:B4A8 CD 96 B5 D1 	call dfgs_setup_draw;toshadow
  214 D1:B4AC CB 45 -  -  	bit 0,l
  215 D1:B4AE CA BA B4 D1 	jp z,dfgs_mid_full_fast
  216 D1:B4B2 CD 28 AD D1 	call draw_slow_sprite_full
  217 D1:B4B6 C3 BE B4 D1 	jp dfgs_mid_full_slow
  218 D1:B4BA -  -  -  -  dfgs_mid_full_fast:
  219 D1:B4BA CD 0E AD D1 	call draw_fast_sprite_full
  220 D1:B4BE -  -  -  -  dfgs_mid_full_slow:
  221 D1:B4BE D9 -  -  -  	exx
  222 D1:B4BF 11 00 00 00 	ld de,0 
  223 D1:B4C3 01 00 00 00 	ld bc,0
  224 D1:B4C7 23 -  -  -  	inc hl;to y 
  225 D1:B4C8 08 -  -  -  	ex af,af';'
  226 D1:B4C9 3D -  -  -  	dec a 
  227 D1:B4CA CA 05 B5 D1 	jp z,dfgs_lower_start 
  228 D1:B4CE 08 -  -  -  	ex af,af';'
  229 D1:B4CF C3 42 B4 D1 	jp dfgs_mid_loop
  230 D1:B4D3 -  -  -  -  	
  231 D1:B4D3 -  -  -  -  	
  232 D1:B4D3 -  -  -  -  dfgs_mid_bottom_cut:
  233 D1:B4D3 D9 -  -  -  	exx
  234 D1:B4D4 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1
  235 D1:B4D4 11 00 00 00 	ld de,0
  236 D1:B4D8 D9 -  -  -  	exx
  237 D1:B4D9 CD 96 B5 D1 	call dfgs_setup_draw
  238 D1:B4DD 3C -  -  -  	inc a;for bottom cuts
  239 D1:B4DE CB 45 -  -  	bit 0,l 
  240 D1:B4E0 CA EC B4 D1 	jp z,dfgs_mid_bottom_fast
  241 D1:B4E4 CD 8C AD D1 	call draw_slow_sprite_bottom_cut
  242 D1:B4E8 C3 F0 B4 D1 	jp dfgs_mid_bottom_slow
  243 D1:B4EC -  -  -  -  dfgs_mid_bottom_fast:
  244 D1:B4EC CD C3 AC D1 	call draw_fast_sprite_bottom_cut
  245 D1:B4F0 -  -  -  -  dfgs_mid_bottom_slow:
  246 D1:B4F0 D9 -  -  -  	exx
  247 D1:B4F1 11 00 00 00 	ld de,0 
  248 D1:B4F5 01 00 00 00 	ld bc,0
  249 D1:B4F9 23 -  -  -  	inc hl;to y 
  250 D1:B4FA 08 -  -  -  	ex af,af';'
  251 D1:B4FB 3D -  -  -  	dec a 
  252 D1:B4FC CA 05 B5 D1 	jp z,dfgs_lower_start 
  253 D1:B500 08 -  -  -  	ex af,af';'
  254 D1:B501 C3 42 B4 D1 	jp dfgs_mid_loop
  255 D1:B505 -  -  -  -  	
  256 D1:B505 -  -  -  -  	
  257 D1:B505 -  -  -  -  	
  258 D1:B505 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  259 D1:B505 -  -  -  -  dfgs_lower_start:
  260 D1:B505 -  -  -  -  	
  261 D1:B505 ED 17 -  -  	ld de,(hl)
  262 D1:B507 ED 53 B0 B5 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  263 D1:B50C 11 00 00 00 	ld de,0
  264 D1:B510 23 -  -  -  	inc hl 
  265 D1:B511 23 -  -  -  	inc hl
  266 D1:B512 23 -  -  -  	inc hl;past data table 
  267 D1:B513 -  -  -  -  	
  268 D1:B513 08 -  -  -  	ex af,af' ;'
  269 D1:B514 7E -  -  -  	ld a,(hl);number of elements
  270 D1:B515 08 -  -  -  	ex af,af' ;'
  271 D1:B516 23 -  -  -  	inc hl
  272 D1:B517 -  -  -  -  	
  273 D1:B517 3E EF -  -  	ld a,239
  274 D1:B519 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  275 D1:B519 D6 00 -  -  	sub 0;cam pos 
  276 D1:B51B D8 -  -  -  	ret c;if bottom frame is offscreen 
  277 D1:B51C C8 -  -  -  	ret z 
  278 D1:B51D -  -  -  -  	;a holds distance of top line of lower frame from bottom of screen starting from 1
  279 D1:B51D 32 24 B5 D1 	ld (dfgs_lower_frame_height),a
  280 D1:B521 -  -  -  -  
  281 D1:B521 -  -  -  -  dfgs_lower_loop:
  282 D1:B521 7E -  -  -  	ld a,(hl);y
  283 D1:B522 23 -  -  -  	inc hl
  284 D1:B523 -  -  -  -  dfgs_lower_frame_height .equ $ + 1
  285 D1:B523 C6 00 -  -  	add a,0;add frame height 
  286 D1:B525 DA 34 B5 D1 	jp c,dfgs_lower_cont;sprite onscreen
  287 D1:B529 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  288 D1:B529 23 -  -  -  	inc hl
  289 D1:B52A 23 -  -  -  	inc hl
  290 D1:B52B 23 -  -  -  	inc hl;to y 
  291 D1:B52C 08 -  -  -  	ex af,af';'
  292 D1:B52D 3D -  -  -  	dec a 
  293 D1:B52E C8 -  -  -  	ret z
  294 D1:B52F 08 -  -  -  	ex af,af';'
  295 D1:B530 C3 21 B5 D1 	jp dfgs_lower_loop
  296 D1:B534 -  -  -  -  	
  297 D1:B534 -  -  -  -  dfgs_lower_cont:
  298 D1:B534 -  -  -  -  	;a holds sprite dist from bottom of screen, from 0
  299 D1:B534 BE -  -  -  	cp (hl);compare to height
  300 D1:B535 DA 67 B5 D1 	jp c,dfgs_lower_bottom_cut
  301 D1:B539 -  -  -  -  	
  302 D1:B539 -  -  -  -  	;full sprite 
  303 D1:B539 D9 -  -  -  	exx
  304 D1:B53A -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1
  305 D1:B53A 11 00 00 00 	ld de,0
  306 D1:B53E D9 -  -  -  	exx
  307 D1:B53F CD 96 B5 D1 	call dfgs_setup_draw
  308 D1:B543 CB 45 -  -  	bit 0,l
  309 D1:B545 CA 51 B5 D1 	jp z,dfgs_lower_full_fast
  310 D1:B549 CD 28 AD D1 	call draw_slow_sprite_full
  311 D1:B54D C3 55 B5 D1 	jp dfgs_lower_full_slow
  312 D1:B551 -  -  -  -  dfgs_lower_full_fast:
  313 D1:B551 CD 0E AD D1 	call draw_fast_sprite_full
  314 D1:B555 -  -  -  -  dfgs_lower_full_slow:
  315 D1:B555 D9 -  -  -  	exx
  316 D1:B556 11 00 00 00 	ld de,0 
  317 D1:B55A 01 00 00 00 	ld bc,0
  318 D1:B55E 23 -  -  -  	inc hl;to y 
  319 D1:B55F 08 -  -  -  	ex af,af';'
  320 D1:B560 3D -  -  -  	dec a 
  321 D1:B561 C8 -  -  -  	ret z
  322 D1:B562 08 -  -  -  	ex af,af';'
  323 D1:B563 C3 21 B5 D1 	jp dfgs_lower_loop
  324 D1:B567 -  -  -  -  	
  325 D1:B567 -  -  -  -  	
  326 D1:B567 -  -  -  -  dfgs_lower_bottom_cut:
  327 D1:B567 D9 -  -  -  	exx
  328 D1:B568 -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1
  329 D1:B568 11 00 00 00 	ld de,0
  330 D1:B56C D9 -  -  -  	exx
  331 D1:B56D CD 96 B5 D1 	call dfgs_setup_draw
  332 D1:B571 3C -  -  -  	inc a;for bottom cuts
  333 D1:B572 CB 45 -  -  	bit 0,l 
  334 D1:B574 CA 80 B5 D1 	jp z,dfgs_lower_bottom_fast
  335 D1:B578 CD 8C AD D1 	call draw_slow_sprite_bottom_cut
  336 D1:B57C C3 84 B5 D1 	jp dfgs_lower_bottom_slow
  337 D1:B580 -  -  -  -  dfgs_lower_bottom_fast:
  338 D1:B580 CD C3 AC D1 	call draw_fast_sprite_bottom_cut
  339 D1:B584 -  -  -  -  dfgs_lower_bottom_slow:
  340 D1:B584 D9 -  -  -  	exx
  341 D1:B585 11 00 00 00 	ld de,0 
  342 D1:B589 01 00 00 00 	ld bc,0
  343 D1:B58D 23 -  -  -  	inc hl;to y 
  344 D1:B58E 08 -  -  -  	ex af,af';'
  345 D1:B58F 3D -  -  -  	dec a 
  346 D1:B590 C8 -  -  -  	ret z
  347 D1:B591 08 -  -  -  	ex af,af';'
  348 D1:B592 C3 21 B5 D1 	jp dfgs_lower_loop
  349 D1:B596 -  -  -  -  	
  350 D1:B596 -  -  -  -  	
  351 D1:B596 -  -  -  -  	
  352 D1:B596 -  -  -  -  	
  353 D1:B596 -  -  -  -  	
  354 D1:B596 -  -  -  -  	
  355 D1:B596 -  -  -  -  	
  356 D1:B596 -  -  -  -  	
  357 D1:B596 -  -  -  -  	
  358 D1:B596 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  359 D1:B596 -  -  -  -  ;(hl) = height 	
  360 D1:B596 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  361 D1:B596 -  -  -  -  ;returns hl = sprite data, de = vram position
  362 D1:B596 -  -  -  -  dfgs_setup_draw:
  363 D1:B596 23 -  -  -  	inc hl
  364 D1:B597 01 00 00 00 	ld bc,0
  365 D1:B59B 4E -  -  -  	ld c,(hl); x pos
  366 D1:B59C 23 -  -  -  	inc hl;to index
  367 D1:B59D E5 -  -  -  	push hl
  368 D1:B59E C5 -  -  -  	push bc
  369 D1:B59F D9 -  -  -  	exx;toshadow
  370 D1:B5A0 C1 -  -  -  	pop bc
  371 D1:B5A1 26 A0 -  -  	ld h,160
  372 D1:B5A3 6F -  -  -  	ld l,a
  373 D1:B5A4 ED 6C -  -  	mlt hl;subtract from vram
  374 D1:B5A6 37 -  -  -  	scf 
  375 D1:B5A7 3F -  -  -  	ccf
  376 D1:B5A8 EB -  -  -  	ex de,hl;hl holds vram
  377 D1:B5A9 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  378 D1:B5AB 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  379 D1:B5AC EB -  -  -  	ex de,hl;put in de
  380 D1:B5AD E1 -  -  -  	pop hl;back to frame data 
  381 D1:B5AE 4E -  -  -  	ld c,(hl);sprite index
  382 D1:B5AF -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  383 D1:B5AF 21 00 00 00 	ld hl,0 ;load sprite table 
  384 D1:B5B3 09 -  -  -  	add hl,bc
  385 D1:B5B4 09 -  -  -  	add hl,bc 
  386 D1:B5B5 09 -  -  -  	add hl,bc;move to sprite ptr
  387 D1:B5B6 -  -  -  -  	;call prgmpause
  388 D1:B5B6 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  389 D1:B5B8 -  -  -  -  
  390 D1:B5B8 C9 -  -  -  	ret
  391 D1:B5B9 -  -  -  -  
  392 D1:B5B9 -  -  -  -  	
  393 D1:B5B9 -  -  -  -  	
  394 D1:B5B9 -  -  -  -  	
  395 D1:B5B9 -  -  -  -  	
  396 D1:B5B9 -  -  -  -  	
  397 D1:B5B9 -  -  -  -  	
  398 D1:B5B9 -  -  -  -  	
  399 D1:B5B9 -  -  -  -  	
  400 D1:B5B9 -  -  -  -  	
  401 D1:B5B9 -  -  -  -  	
  402 D1:B5B9 -  -  -  -  	
  403 D1:B5B9 -  -  -  -  	
Listing for file "ascent.asm"
  274 D1:B5B9 -  -  -  -  
  275 D1:B5B9 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:B5B9 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:B5B9 -  -  -  -  	;.dl lastSprite
    3 D1:B5B9 -  -  -  -  	;.dl lastSpritecopy
    4 D1:B5B9 -  -  -  -  	;.dl sprite2
    5 D1:B5B9 -  -  -  -  	;.dl sprite3
    6 D1:B5B9 -  -  -  -  
    7 D1:B5B9 -  -  -  -  
    8 D1:B5B9 -  -  -  -  
    9 D1:B5B9 -  -  -  -  
   10 D1:B5B9 -  -  -  -  bg_data_frame:
   11 D1:B5B9 -  -  -  -  	;.db sprite data table pointer
   12 D1:B5B9 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:B5B9 -  -  -  -  	
   14 D1:B5B9 -  -  -  -  
   15 D1:B5B9 -  -  -  -  bg_sprite_pointers_1:
   16 D1:B5B9 -  -  -  -  	;.dl testBG1
   17 D1:B5B9 -  -  -  -  	;.dl testBG1;h = 7
   18 D1:B5B9 -  -  -  -  	;.dl testBG2;h = 5
   19 D1:B5B9 -  -  -  -  	;.dl testBG3;h = 0
   20 D1:B5B9 -  -  -  -  	;.dl testBG4
   21 D1:B5B9 -  -  -  -  
   22 D1:B5B9 -  -  -  -  bg_data_frame_0:
   23 D1:B5B9 B9 B5 D1 -  	.dl bg_sprite_pointers_1 
   24 D1:B5BC C8 07 05 00 	.db 200,7,5,0
   25 D1:B5C0 -  -  -  -  	;upper 
   26 D1:B5C0 -  -  -  -  bg_data_frame_1:
   27 D1:B5C0 B9 B5 D1 -  	.dl bg_sprite_pointers_1
   28 D1:B5C3 C8 07 05 01 	.db 200,7,5,1
   29 D1:B5C7 64 07 05 01 	.db 100,7,5,1
   30 D1:B5CB 08 07 05 01 	.db 8,7,5,1
   31 D1:B5CF 07 07 0A 01 	.db 7,7,10,1
   32 D1:B5D3 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:B5D7 05 07 14 01 	.db 5,7,20,1;X
   34 D1:B5DB 05 05 19 02 	.db 5,5,25,2
   35 D1:B5DF 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:B5E3 03 05 23 02 	.db 3,5,35,2;X
   37 D1:B5E7 00 05 28 02 	.db 0,5,40,2;X
   38 D1:B5EB 00 00 2D 03 	.db 0,0,45,3
   39 D1:B5EF 0A 00 32 03 	.db 10,0,50,3
   40 D1:B5F3 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:B5F7 -  -  -  -  	
   42 D1:B5F7 -  -  -  -  bg_data_frame_2:
   43 D1:B5F7 B9 B5 D1 -  	.dl bg_sprite_pointers_1
   44 D1:B5FA FF 07 3C 01 	.db 255,7,60,1
   45 D1:B5FE FE 07 41 01 	.db 254,7,65,1
   46 D1:B602 64 05 46 02 	.db 100,5,70,2
   47 D1:B606 64 00 4B 03 	.db 100,0,75,3
   48 D1:B60A 32 07 50 00 	.db 50,7,80,0
   49 D1:B60E -  -  -  -  	
   50 D1:B60E -  -  -  -  	
Listing for file "ascent.asm"
  276 D1:B60E -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B60E -  -  -  -  
    2 D1:B60E -  -  -  -  FG_sprite_table_1:
    3 D1:B60E -  -  -  -  	;.dl fg_sprite_1;9*4
    4 D1:B60E -  -  -  -  	;.dl fg_sprite_1
    5 D1:B60E -  -  -  -  	;.dl fg_sprite_2;8*8
    6 D1:B60E -  -  -  -  	;.dl fg_sprite_3;8*8 fast
    7 D1:B60E -  -  -  -  	;.dl fg_sprite_4;8*8 fast 
    8 D1:B60E -  -  -  -  	
    9 D1:B60E -  -  -  -  
   10 D1:B60E -  -  -  -  
   11 D1:B60E -  -  -  -  
   12 D1:B60E -  -  -  -  
   13 D1:B60E -  -  -  -  FG_Frame_2:
   14 D1:B60E 0E B6 D1 -  	.dl FG_sprite_table_1
   15 D1:B611 03 03 00 01 	.db 3,3,0,1
   16 D1:B615 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B619 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B61D 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B621 32 07 14 02 	.db 50,7,20,2
   20 D1:B625 1E 07 19 03 	.db 30,7,25,3
   21 D1:B629 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B62D 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B631 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B635 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B639 -  -  -  -  
   26 D1:B639 -  -  -  -  
   27 D1:B639 -  -  -  -  FG_Frame_1:
   28 D1:B639 -  -  -  -  	;.dl sprite table ptr
   29 D1:B639 -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B639 0E B6 D1 -  	.dl FG_sprite_table_1
   31 D1:B63C FF 03 3C 01 	.db 255,3,60,1
   32 D1:B640 FF 07 46 02 	.db 255,7,70,2
   33 D1:B644 FF 07 4B 03 	.db 255,7,75,3
   34 D1:B648 FF 07 50 04 	.db 255,7,80,4
   35 D1:B64C FE 03 55 01 	.db 254,3,85,1
   36 D1:B650 FE 07 5A 04 	.db 254,7,90,4
   37 D1:B654 C8 03 0A 01 	.db 200,3,10,1
   38 D1:B658 C8 07 0F 02 	.db 200,7,15,2
   39 D1:B65C C8 07 14 03 	.db 200,7,20,3
   40 D1:B660 32 07 0A 02 	.db 50,7,10,2
   41 D1:B664 0F 07 50 03 	.db 15,7,80,3
   42 D1:B668 10 07 41 03 	.db 16,7,65,3
   43 D1:B66C 11 03 46 01 	.db 17,3,70,1
   44 D1:B670 09 07 0A 02 	.db 9,7,10,2
   45 D1:B674 08 07 14 02 	.db 8,7,20,2
   46 D1:B678 08 07 1E 03 	.db 8,7,30,3
   47 D1:B67C 07 07 23 02 	.db 7,7,35,2
   48 D1:B680 06 07 28 02 	.db 6,7,40,2
   49 D1:B684 05 07 2D 02 	.db 5,7,45,2
   50 D1:B688 00 07 32 02 	.db 0,7,50,2
   51 D1:B68C 04 07 37 03 	.db 4,7,55,3
   52 D1:B690 02 07 3C 04 	.db 2,7,60,4
   53 D1:B694 01 03 41 00 	.db 1,3,65,0
   54 D1:B698 -  -  -  -  	
   55 D1:B698 -  -  -  -  
   56 D1:B698 -  -  -  -  FG_Frame_0:
   57 D1:B698 0E B6 D1 -  	.dl FG_sprite_table_1
   58 D1:B69B FF 03 46 01 	.db 255,3,70,1
   59 D1:B69F FF 07 4B 02 	.db 255,7,75,2
   60 D1:B6A3 FF 07 5F 03 	.db 255,7,95,3
   61 D1:B6A7 FF 07 50 04 	.db 255,7,80,4
   62 D1:B6AB FE 03 78 01 	.db 254,3,120,1
   63 D1:B6AF FE 07 7D 04 	.db 254,7,125,4
   64 D1:B6B3 C8 03 0A 01 	.db 200,3,10,1
   65 D1:B6B7 C8 07 0F 02 	.db 200,7,15,2
   66 D1:B6BB C8 07 14 03 	.db 200,7,20,3
   67 D1:B6BF C8 03 00 00 	.db 200,3,0,0
   68 D1:B6C3 -  -  -  -  	
   69 D1:B6C3 -  -  -  -  	
   70 D1:B6C3 -  -  -  -  	
   71 D1:B6C3 -  -  -  -  
   72 D1:B6C3 -  -  -  -  	
   73 D1:B6C3 -  -  -  -  	
   74 D1:B6C3 -  -  -  -  	
   75 D1:B6C3 -  -  -  -  	
   76 D1:B6C3 -  -  -  -  	
   77 D1:B6C3 -  -  -  -  	
   78 D1:B6C3 -  -  -  -  	
Listing for file "ascent.asm"
  277 D1:B6C3 -  -  -  -  
  278 D1:B6C3 -  -  -  -  #include "TestingSpriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingSpriteData.txt"
    1 D1:B6C3 -  -  -  -  
    2 D1:B6C3 -  -  -  -  
    3 D1:B6C3 -  -  -  -  
    4 D1:B6C3 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
    5 D1:B6C3 -  -  -  -  Test_Sprite_1:
    6 D1:B6C3 10 -  -  -  	.db %00010000
    7 D1:B6C4 09 06 -  -  	.db 9,6
    8 D1:B6C6 7C 86 -  -  	.db %01111100, %10000110
    9 D1:B6C8 F3 BF -  -  	.db %11110011, %10111111
   10 D1:B6CA F0 E0 -  -  	.db %11110000, %11100000
   11 D1:B6CC A8 -  -  -  	.db %10101000
   12 D1:B6CD -  -  -  -  	
   13 D1:B6CD 64 -  -  -  	.db $64
   14 D1:B6CE -  -  -  -  	
   15 D1:B6CE AA -  -  -  	.db %10101010
   16 D1:B6CF AA -  -  -  	.db %10101010
   17 D1:B6D0 AA -  -  -  	.db %10101010
   18 D1:B6D1 AA -  -  -  	.db %10101010
   19 D1:B6D2 AA -  -  -  	.db %10101010
   20 D1:B6D3 AA -  -  -  	.db %10101010
   21 D1:B6D4 AA -  -  -  	.db %10101010
   22 D1:B6D5 AA -  -  -  	.db %10101010
   23 D1:B6D6 AA -  -  -  	.db %10101010
   24 D1:B6D7 AA -  -  -  	.db %10101010
   25 D1:B6D8 -  -  -  -  	
   26 D1:B6D8 -  -  -  -  	
   27 D1:B6D8 -  -  -  -  ;0XXXXX00X
   28 D1:B6D8 -  -  -  -  ;0000XX0XX
   29 D1:B6D8 -  -  -  -  ;XX00XXX0X
   30 D1:B6D8 -  -  -  -  ;XXXXXXXXX
   31 D1:B6D8 -  -  -  -  ;0000XXX00
   32 D1:B6D8 -  -  -  -  ;000X0X0X0
   33 D1:B6D8 -  -  -  -  
   34 D1:B6D8 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
   35 D1:B6D8 -  -  -  -  Test_Sprite_2:
   36 D1:B6D8 10 -  -  -  	.db %00010000
   37 D1:B6D9 09 06 -  -  	.db 9,6
   38 D1:B6DB FF FF -  -  	.db %11111111, %11111111
   39 D1:B6DD FF FF -  -  	.db %11111111, %11111111
   40 D1:B6DF FF FF -  -  	.db %11111111, %11111111
   41 D1:B6E1 FC -  -  -  	.db %11111100
   42 D1:B6E2 -  -  -  -  	
   43 D1:B6E2 01 -  -  -  	.db $01
   44 D1:B6E3 -  -  -  -  	
   45 D1:B6E3 AA -  -  -  	.db %10101010
   46 D1:B6E4 AA -  -  -  	.db %10101010
   47 D1:B6E5 AA -  -  -  	.db %10101010
   48 D1:B6E6 AA -  -  -  	.db %10101010
   49 D1:B6E7 AA -  -  -  	.db %10101010
   50 D1:B6E8 AA -  -  -  	.db %10101010
   51 D1:B6E9 AA -  -  -  	.db %10101010
   52 D1:B6EA AA -  -  -  	.db %10101010
   53 D1:B6EB AA -  -  -  	.db %10101010
   54 D1:B6EC AA -  -  -  	.db %10101010
   55 D1:B6ED AA -  -  -  	.db %10101010
   56 D1:B6EE -  -  -  -  	
   57 D1:B6EE -  -  -  -  	
   58 D1:B6EE -  -  -  -  ;XXXXXXXXX
   59 D1:B6EE -  -  -  -  ;XXXXXXXXX
   60 D1:B6EE -  -  -  -  ;XXXXXXXXX
   61 D1:B6EE -  -  -  -  ;XXXXXXXXX
   62 D1:B6EE -  -  -  -  
   63 D1:B6EE -  -  -  -  
   64 D1:B6EE -  -  -  -  
   65 D1:B6EE -  -  -  -  ;slow sprite, 1bpc, alpha  w = 8 h = 7
   66 D1:B6EE -  -  -  -  Test_Sprite_3:
   67 D1:B6EE 10 -  -  -  	.db %00010000
   68 D1:B6EF 08 07 -  -  	.db 8,7
   69 D1:B6F1 FF FF -  -  	.db %11111111, %11111111
   70 D1:B6F3 FF 83 -  -  	.db %11111111, %10000011
   71 D1:B6F5 FB 01 -  -  	.db %11111011, %00000001
   72 D1:B6F7 80 -  -  -  	.db %10000000
   73 D1:B6F8 -  -  -  -  	
   74 D1:B6F8 64 -  -  -  	.db $64
   75 D1:B6F9 -  -  -  -  	
   76 D1:B6F9 AA -  -  -  	.db %10101010
   77 D1:B6FA AA -  -  -  	.db %10101010
   78 D1:B6FB AA -  -  -  	.db %10101010
   79 D1:B6FC AA -  -  -  	.db %10101010
   80 D1:B6FD AA -  -  -  	.db %10101010
   81 D1:B6FE AA -  -  -  	.db %10101010
   82 D1:B6FF AA -  -  -  	.db %10101010
   83 D1:B700 AA -  -  -  	.db %10101010
   84 D1:B701 AA -  -  -  	.db %10101010
   85 D1:B702 AA -  -  -  	.db %10101010
   86 D1:B703 AA -  -  -  	.db %10101010
   87 D1:B704 AA -  -  -  	.db %10101010
   88 D1:B705 -  -  -  -  	
   89 D1:B705 -  -  -  -  	
   90 D1:B705 -  -  -  -  
   91 D1:B705 -  -  -  -  ;slow, 3bpc, alpha, w = 16 h = 6
   92 D1:B705 -  -  -  -  Test_Sprite_4:
   93 D1:B705 40 -  -  -  	.db %01000000
   94 D1:B706 10 06 -  -  	.db 16,6
   95 D1:B708 3F F4 -  -  	.db %00111111, %11110100
   96 D1:B70A FF 00 -  -  	.db %11111111, %00000000
   97 D1:B70C 55 55 -  -  	.db %01010101, %01010101
   98 D1:B70E 03 8C -  -  	.db %00000011, %10001100
   99 D1:B710 20 F3 -  -  	.db %00100000, %11110011
  100 D1:B712 FC 4D -  -  	.db %11111100, %01001101
  101 D1:B714 -  -  -  -  	
  102 D1:B714 13 68 AE -  	.db $13,$68,$AE
  103 D1:B717 -  -  -  -  	
  104 D1:B717 05 39 -  -  	.db %00000101,%00111001
  105 D1:B719 77 05 -  -  	.db %01110111,%00000101
  106 D1:B71B 39 77 -  -  	.db %00111001,%01110111
  107 D1:B71D 05 39 -  -  	.db %00000101,%00111001
  108 D1:B71F 77 05 -  -  	.db %01110111,%00000101
  109 D1:B721 39 77 -  -  	.db %00111001,%01110111
  110 D1:B723 05 39 -  -  	.db %00000101,%00111001
  111 D1:B725 77 05 -  -  	.db %01110111,%00000101
  112 D1:B727 39 77 -  -  	.db %00111001,%01110111
  113 D1:B729 05 39 -  -  	.db %00000101,%00111001
  114 D1:B72B 77 05 -  -  	.db %01110111,%00000101
  115 D1:B72D 39 77 -  -  	.db %00111001,%01110111
  116 D1:B72F 05 39 -  -  	.db %00000101,%00111001
  117 D1:B731 77 05 -  -  	.db %01110111,%00000101
  118 D1:B733 39 77 -  -  	.db %00111001,%01110111
  119 D1:B735 05 39 -  -  	.db %00000101,%00111001
  120 D1:B737 77 05 -  -  	.db %01110111,%00000101
  121 D1:B739 39 77 -  -  	.db %00111001,%01110111
  122 D1:B73B 05 39 -  -  	.db %00000101,%00111001
  123 D1:B73D 77 05 -  -  	.db %01110111,%00000101
  124 D1:B73F 39 77 -  -  	.db %00111001,%01110111
  125 D1:B741 05 39 -  -  	.db %00000101,%00111001
  126 D1:B743 77 05 -  -  	.db %01110111,%00000101
  127 D1:B745 39 77 -  -  	.db %00111001,%01110111
  128 D1:B747 05 39 -  -  	.db %00000101,%00111001
  129 D1:B749 77 05 -  -  	.db %01110111,%00000101
  130 D1:B74B 39 77 -  -  	.db %00111001,%01110111
  131 D1:B74D 05 39 -  -  	.db %00000101,%00111001
  132 D1:B74F 77 05 -  -  	.db %01110111,%00000101
  133 D1:B751 39 77 -  -  	.db %00111001,%01110111
  134 D1:B753 05 39 -  -  	.db %00000101,%00111001
  135 D1:B755 77 05 -  -  	.db %01110111,%00000101
  136 D1:B757 39 77 -  -  	.db %00111001,%01110111
  137 D1:B759 05 39 -  -  	.db %00000101,%00111001
  138 D1:B75B 77 05 -  -  	.db %01110111,%00000101
  139 D1:B75D 39 77 -  -  	.db %00111001,%01110111
  140 D1:B75F 05 39 -  -  	.db %00000101,%00111001
  141 D1:B761 77 05 -  -  	.db %01110111,%00000101
  142 D1:B763 39 77 -  -  	.db %00111001,%01110111
  143 D1:B765 -  -  -  -  
  144 D1:B765 -  -  -  -  
  145 D1:B765 -  -  -  -  
  146 D1:B765 -  -  -  -  Test_sprite_5: ;W = 11 h = 6, 2bpc 
  147 D1:B765 20 -  -  -  	.db %00100000
  148 D1:B766 0B 06 -  -  	.db 11,6
  149 D1:B768 1B -  -  -  	.db %00011011
  150 D1:B769 FA -  -  -  	.db %11111010
  151 D1:B76A AB -  -  -  	.db %10101011
  152 D1:B76B E0 -  -  -  	.db %11100000
  153 D1:B76C 78 -  -  -  	.db %01111000
  154 D1:B76D 00 -  -  -  	.db %00000000
  155 D1:B76E 03 -  -  -  	.db %00000011
  156 D1:B76F 07 -  -  -  	.db %00000111
  157 D1:B770 40 -  -  -  	.db %01000000
  158 D1:B771 -  -  -  -  	
  159 D1:B771 67 59 -  -  	.db $67,89
  160 D1:B773 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  161 D1:B776 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  162 D1:B779 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  163 D1:B77C 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  164 D1:B77F 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  165 D1:B782 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  166 D1:B785 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  167 D1:B788 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  168 D1:B78B 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  169 D1:B78E 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  170 D1:B791 -  -  -  -  	
  171 D1:B791 -  -  -  -  	
  172 D1:B791 -  -  -  -  	
  173 D1:B791 -  -  -  -  ;000xx0xxxxx
  174 D1:B791 -  -  -  -  ;xx0x0x0x0x0
  175 D1:B791 -  -  -  -  ;xxxxx000000
  176 D1:B791 -  -  -  -  ;xxxx0000000
  177 D1:B791 -  -  -  -  ;0000000000x
  178 D1:B791 -  -  -  -  ;x00000xxx0x
  179 D1:B791 -  -  -  -  	
  180 D1:B791 -  -  -  -  	
  181 D1:B791 -  -  -  -  	
  182 D1:B791 -  -  -  -  	
  183 D1:B791 -  -  -  -  	
  184 D1:B791 -  -  -  -  	
  185 D1:B791 -  -  -  -  
  186 D1:B791 -  -  -  -  Test_sprite_6: ;w = 6 h = 6, noalpha, 4bpc 
  187 D1:B791 84 -  -  -  	.db %10000100
  188 D1:B792 06 06 -  -  	.db 6,6
  189 D1:B794 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  190 D1:B799 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  191 D1:B79E 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  192 D1:B7A3 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  193 D1:B7A8 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  194 D1:B7AD 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  195 D1:B7B2 -  -  -  -  	
  196 D1:B7B2 -  -  -  -  
  197 D1:B7B2 -  -  -  -  Test_sprite_7: ;w=3 h=6 , 0bpc 
  198 D1:B7B2 08 -  -  -  	.db %00001000
  199 D1:B7B3 03 06 -  -  	.db 3,6
  200 D1:B7B5 E6 2B 80 -  	.db %11100110, %00101011,%10000000
  201 D1:B7B8 -  -  -  -  	
  202 D1:B7B8 33 -  -  -  	.db $33
  203 D1:B7B9 -  -  -  -  ;XXX
  204 D1:B7B9 -  -  -  -  ;00x
  205 D1:B7B9 -  -  -  -  ;x00
  206 D1:B7B9 -  -  -  -  ;0x0
  207 D1:B7B9 -  -  -  -  ;x0x
  208 D1:B7B9 -  -  -  -  ;xx0
  209 D1:B7B9 -  -  -  -  
  210 D1:B7B9 -  -  -  -  Test_sprite_8: ;w=2 h=6 , 0bpc 
  211 D1:B7B9 08 -  -  -  	.db %00001000
  212 D1:B7BA 02 08 -  -  	.db 2,8
  213 D1:B7BC DB F5 -  -  	.db %11011011,%11110101
  214 D1:B7BE -  -  -  -  	
  215 D1:B7BE 33 -  -  -  	.db $33
  216 D1:B7BF -  -  -  -  
  217 D1:B7BF -  -  -  -  ;XX
  218 D1:B7BF -  -  -  -  ;0x 
  219 D1:B7BF -  -  -  -  ;x0 
  220 D1:B7BF -  -  -  -  ;xx 
  221 D1:B7BF -  -  -  -  ;xx 
  222 D1:B7BF -  -  -  -  ;xx 
  223 D1:B7BF -  -  -  -  ;0x 
  224 D1:B7BF -  -  -  -  ;0x
  225 D1:B7BF -  -  -  -  
  226 D1:B7BF -  -  -  -  Test_sprite_9: ;w=2 h=6 , 0bpc 
  227 D1:B7BF 0C -  -  -  	.db %00001100
  228 D1:B7C0 01 09 -  -  	.db 1,9
  229 D1:B7C2 33 -  -  -  	.db $33
  230 D1:B7C3 -  -  -  -  
  231 D1:B7C3 -  -  -  -  
  232 D1:B7C3 -  -  -  -  
  233 D1:B7C3 -  -  -  -  
  234 D1:B7C3 -  -  -  -  
  235 D1:B7C3 -  -  -  -  
  236 D1:B7C3 -  -  -  -  
  237 D1:B7C3 -  -  -  -  
  238 D1:B7C3 -  -  -  -  
  239 D1:B7C3 -  -  -  -  
  240 D1:B7C3 -  -  -  -  
  241 D1:B7C3 -  -  -  -  
  242 D1:B7C3 -  -  -  -  
  243 D1:B7C3 -  -  -  -  
  244 D1:B7C3 -  -  -  -  Test_sprite_fast: ;w = 16, h = 8
  245 D1:B7C3 10 -  -  -  	.db %00010000
  246 D1:B7C4 10 08 -  -  	.db 16 , 8
  247 D1:B7C6 0F FF -  -  	.db %00001111,%11111111
  248 D1:B7C8 3C F3 -  -  	.db %00111100,%11110011
  249 D1:B7CA F0 3F -  -  	.db %11110000,%00111111
  250 D1:B7CC FF FF -  -  	.db %11111111,%11111111
  251 D1:B7CE CC CC -  -  	.db %11001100,%11001100
  252 D1:B7D0 33 33 -  -  	.db %00110011,%00110011
  253 D1:B7D2 C0 00 -  -  	.db %11000000,%00000000
  254 D1:B7D4 03 C3 -  -  	.db %00000011,%11000011
  255 D1:B7D6 -  -  -  -  
  256 D1:B7D6 64 -  -  -  	.db $64
  257 D1:B7D7 -  -  -  -  	
  258 D1:B7D7 AA -  -  -  	.db %10101010
  259 D1:B7D8 AA -  -  -  	.db %10101010
  260 D1:B7D9 AA -  -  -  	.db %10101010
  261 D1:B7DA AA -  -  -  	.db %10101010
  262 D1:B7DB AA -  -  -  	.db %10101010
  263 D1:B7DC AA -  -  -  	.db %10101010
  264 D1:B7DD AA -  -  -  	.db %10101010
  265 D1:B7DE AA -  -  -  	.db %10101010
  266 D1:B7DF AA -  -  -  	.db %10101010
  267 D1:B7E0 AA -  -  -  	.db %10101010
  268 D1:B7E1 AA -  -  -  	.db %10101010
  269 D1:B7E2 AA -  -  -  	.db %10101010
  270 D1:B7E3 AA -  -  -  	.db %10101010
  271 D1:B7E4 AA -  -  -  	.db %10101010
  272 D1:B7E5 AA -  -  -  	.db %10101010
  273 D1:B7E6 AA -  -  -  	.db %10101010
  274 D1:B7E7 AA -  -  -  	.db %10101010
  275 D1:B7E8 AA -  -  -  	.db %10101010
  276 D1:B7E9 AA -  -  -  	.db %10101010
  277 D1:B7EA AA -  -  -  	.db %10101010
  278 D1:B7EB AA -  -  -  	.db %10101010
  279 D1:B7EC AA -  -  -  	.db %10101010
  280 D1:B7ED -  -  -  -  
  281 D1:B7ED -  -  -  -  
  282 D1:B7ED -  -  -  -  
  283 D1:B7ED -  -  -  -  
  284 D1:B7ED -  -  -  -  
  285 D1:B7ED -  -  -  -  
  286 D1:B7ED -  -  -  -  
  287 D1:B7ED -  -  -  -  
  288 D1:B7ED -  -  -  -  
  289 D1:B7ED -  -  -  -  
Listing for file "ascent.asm"
  279 D1:B7ED -  -  -  -  #include "Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Data.txt"
    1 D1:B7ED -  -  -  -  Banana1:
    2 D1:B7ED 20 -  -  -  	.db %00100000
    3 D1:B7EE 18 18 -  -  	.db 24, 24
    4 D1:B7F0 E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:B7F8 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:B800 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:B808 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:B810 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:B818 FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:B820 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:B828 FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:B830 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:B838 -  -  -  -  
   14 D1:B838 01 20 -  -  	.db %00000001, %00100000
   15 D1:B83A -  -  -  -  
   16 D1:B83A 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:B842 AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:B84A 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:B852 A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:B85A 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:B862 A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:B86A AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:B872 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:B87A AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:B882 55 40 -  -  	.db %01010101, %01000000
   26 D1:B884 -  -  -  -  
   27 D1:B884 -  -  -  -  
   28 D1:B884 -  -  -  -  Banana1Large:
   29 D1:B884 20 -  -  -  	.db %00100000
   30 D1:B885 2E 2E -  -  	.db 46, 46
   31 D1:B887 FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:B88F 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:B897 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:B89F F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:B8A7 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:B8AF 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:B8B7 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:B8BF 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:B8C7 FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:B8CF 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:B8D7 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:B8DF F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:B8E7 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:B8EF FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:B8F7 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:B8FF 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:B907 FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:B90F 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:B917 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:B91F FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:B927 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:B92F FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:B937 FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:B93F 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:B947 FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:B94F FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:B957 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:B95F FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:B967 C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:B96F 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:B977 FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:B97F 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:B987 FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:B98F C0 -  -  -  	.db %11000000
   65 D1:B990 -  -  -  -  
   66 D1:B990 01 20 -  -  	.db %00000001, %00100000
   67 D1:B992 -  -  -  -  
   68 D1:B992 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:B99A 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:B9A2 A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:B9AA AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:B9B2 AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:B9BA A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:B9C2 A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:B9CA AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:B9D2 AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:B9DA A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:B9E2 AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:B9EA 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:B9F2 AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:B9FA AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:BA02 A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:BA0A AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:BA12 AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:BA1A AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:BA22 AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:BA2A AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:BA32 AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:BA3A AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:BA42 AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:BA4A AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:BA52 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:BA5A 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:BA62 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:BA6A 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:BA72 A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:BA7A 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:BA82 A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:BA8A 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:BA92 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:BA95 -  -  -  -  
  102 D1:BA95 -  -  -  -  
  103 D1:BA95 -  -  -  -  Shittlogo:
  104 D1:BA95 20 -  -  -  	.db %00100000
  105 D1:BA96 30 30 -  -  	.db 48, 48
  106 D1:BA98 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  107 D1:BAA0 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  108 D1:BAA8 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  109 D1:BAB0 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  110 D1:BAB8 FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  111 D1:BAC0 FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  112 D1:BAC8 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  113 D1:BAD0 FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  114 D1:BAD8 FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  115 D1:BAE0 F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  116 D1:BAE8 FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  117 D1:BAF0 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  118 D1:BAF8 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  119 D1:BB00 FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  120 D1:BB08 FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  121 D1:BB10 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  122 D1:BB18 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  123 D1:BB20 FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  124 D1:BB28 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  125 D1:BB30 FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  126 D1:BB38 FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  127 D1:BB40 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  128 D1:BB48 FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  129 D1:BB50 FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  130 D1:BB58 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  131 D1:BB60 FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  132 D1:BB68 FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  133 D1:BB70 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  134 D1:BB78 FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  135 D1:BB80 FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  136 D1:BB88 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  137 D1:BB90 FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  138 D1:BB98 FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  139 D1:BBA0 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  140 D1:BBA8 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  141 D1:BBB0 E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  142 D1:BBB8 -  -  -  -  
  143 D1:BBB8 95 D0 -  -  	.db %10010101, %11010000
  144 D1:BBBA -  -  -  -  
  145 D1:BBBA 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  146 D1:BBC2 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  147 D1:BBCA 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  148 D1:BBD2 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  149 D1:BBDA 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  150 D1:BBE2 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  151 D1:BBEA 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  152 D1:BBF2 A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  153 D1:BBFA 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  154 D1:BC02 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  155 D1:BC0A 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  156 D1:BC12 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  157 D1:BC1A AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  158 D1:BC22 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  159 D1:BC2A 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  160 D1:BC32 AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  161 D1:BC3A AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  162 D1:BC42 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  163 D1:BC4A AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  164 D1:BC52 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  165 D1:BC5A AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  166 D1:BC62 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  167 D1:BC6A 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  168 D1:BC72 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  169 D1:BC7A AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  170 D1:BC82 A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  171 D1:BC8A 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  172 D1:BC92 AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  173 D1:BC9A 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  174 D1:BCA2 AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  175 D1:BCAA A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  176 D1:BCB2 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  177 D1:BCBA 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  178 D1:BCC2 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  179 D1:BCCA 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  180 D1:BCD2 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  181 D1:BCDA 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  182 D1:BCE2 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  183 D1:BCEA 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  184 D1:BCF2 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  185 D1:BCFA 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  186 D1:BD02 A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  187 D1:BD0A AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  188 D1:BD12 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  189 D1:BD1A 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  190 D1:BD22 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  191 D1:BD2A 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  192 D1:BD32 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  193 D1:BD3A 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  194 D1:BD42 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  195 D1:BD4A 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  196 D1:BD52 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  197 D1:BD5A 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  198 D1:BD5F -  -  -  -  
  199 D1:BD5F -  -  -  -  
  200 D1:BD5F -  -  -  -  OrangeDot:
  201 D1:BD5F 08 -  -  -  	.db %00001000
  202 D1:BD60 0F 0F -  -  	.db 15, 15
  203 D1:BD62 03 C0 0F C0 
              7F E1 FF E7 	.db %00000011, %11000000, %00001111, %11000000, %01111111, %11100001, %11111111, %11100111
  204 D1:BD6A FF DF FF FF 
              FF FF FF FF 	.db %11111111, %11011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  205 D1:BD72 FF FF FF FF 
              FB FF E3 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111011, %11111111, %11100011, %11111111
  206 D1:BD7A C3 FF 01 F8 
              00 -  -  -  	.db %11000011, %11111111, %00000001, %11111000, %00000000
  207 D1:BD7F -  -  -  -  
  208 D1:BD7F B0 -  -  -  	.db %10110000
  209 D1:BD80 -  -  -  -  
  210 D1:BD80 -  -  -  -  
  211 D1:BD80 -  -  -  -  
  212 D1:BD80 -  -  -  -  SquiggleL:
  213 D1:BD80 08 -  -  -  	.db %00001000
  214 D1:BD81 26 18 -  -  	.db 38, 24
  215 D1:BD83 00 00 07 FF 
              80 00 00 1F 	.db %00000000, %00000000, %00000111, %11111111, %10000000, %00000000, %00000000, %00011111
  216 D1:BD8B FE 00 00 00 
              7F FF C0 00 	.db %11111110, %00000000, %00000000, %00000000, %01111111, %11111111, %11000000, %00000000
  217 D1:BD93 01 FF FF 00 
              00 07 FF FC 	.db %00000001, %11111111, %11111111, %00000000, %00000000, %00000111, %11111111, %11111100
  218 D1:BD9B 00 00 1F 1F 
              F0 00 00 7C 	.db %00000000, %00000000, %00011111, %00011111, %11110000, %00000000, %00000000, %01111100
  219 D1:BDA3 7F C1 FC 01 
              F0 1F 07 F0 	.db %01111111, %11000001, %11111100, %00000001, %11110000, %00011111, %00000111, %11110000
  220 D1:BDAB 07 C0 7C 1F 
              C0 1F 01 F3 	.db %00000111, %11000000, %01111100, %00011111, %11000000, %00011111, %00000001, %11110011
  221 D1:BDB3 FF F8 7C 07 
              CF FF E1 F0 	.db %11111111, %11111000, %01111100, %00000111, %11001111, %11111111, %11100001, %11110000
  222 D1:BDBB 1F 3F FF FF 
              C0 00 FF FF 	.db %00011111, %00111111, %11111111, %11111111, %11000000, %00000000, %11111111, %11111111
  223 D1:BDC3 FF 00 0F E0 
              FF F0 00 3F 	.db %11111111, %00000000, %00001111, %11100000, %11111111, %11110000, %00000000, %00111111
  224 D1:BDCB 83 FF C0 00 
              FE 0F FF 00 	.db %10000011, %11111111, %11000000, %00000000, %11111110, %00001111, %11111111, %00000000
  225 D1:BDD3 03 F8 0F FC 
              00 0F E0 3F 	.db %00000011, %11111000, %00001111, %11111100, %00000000, %00001111, %11100000, %00111111
  226 D1:BDDB F0 00 3E 00 
              1F C0 00 F8 	.db %11110000, %00000000, %00111110, %00000000, %00011111, %11000000, %00000000, %11111000
  227 D1:BDE3 00 7F 00 03 
              E0 01 FC 00 	.db %00000000, %01111111, %00000000, %00000011, %11100000, %00000001, %11111100, %00000000
  228 D1:BDEB 0F 80 00 00 
              00 3E 00 00 	.db %00001111, %10000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000000
  229 D1:BDF3 00 00 -  -  	.db %00000000, %00000000
  230 D1:BDF5 -  -  -  -  
  231 D1:BDF5 50 -  -  -  	.db %01010000
  232 D1:BDF6 -  -  -  -  
  233 D1:BDF6 -  -  -  -  
  234 D1:BDF6 -  -  -  -  
  235 D1:BDF6 -  -  -  -  Banana5:
  236 D1:BDF6 20 -  -  -  	.db %00100000
  237 D1:BDF7 20 20 -  -  	.db 32, 32
  238 D1:BDF9 00 00 00 3C 
              00 00 00 FC 	.db %00000000, %00000000, %00000000, %00111100, %00000000, %00000000, %00000000, %11111100
  239 D1:BE01 00 00 03 FC 
              00 00 07 FC 	.db %00000000, %00000000, %00000011, %11111100, %00000000, %00000000, %00000111, %11111100
  240 D1:BE09 00 00 0F FC 
              00 00 3F FC 	.db %00000000, %00000000, %00001111, %11111100, %00000000, %00000000, %00111111, %11111100
  241 D1:BE11 00 00 7F FC 
              00 00 FF F8 	.db %00000000, %00000000, %01111111, %11111100, %00000000, %00000000, %11111111, %11111000
  242 D1:BE19 00 03 FF F0 
              00 07 FF F0 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000111, %11111111, %11110000
  243 D1:BE21 00 1F FF E0 
              00 3F FF E0 	.db %00000000, %00011111, %11111111, %11100000, %00000000, %00111111, %11111111, %11100000
  244 D1:BE29 00 7F FF C0 
              01 FF FF 80 	.db %00000000, %01111111, %11111111, %11000000, %00000001, %11111111, %11111111, %10000000
  245 D1:BE31 01 FF FF 00 
              03 FF FE 00 	.db %00000001, %11111111, %11111111, %00000000, %00000011, %11111111, %11111110, %00000000
  246 D1:BE39 07 FF FE 00 
              0F FF FC 00 	.db %00000111, %11111111, %11111110, %00000000, %00001111, %11111111, %11111100, %00000000
  247 D1:BE41 1F FF F8 00 
              1F FF F0 00 	.db %00011111, %11111111, %11111000, %00000000, %00011111, %11111111, %11110000, %00000000
  248 D1:BE49 3F FF C0 00 
              3F FF 80 00 	.db %00111111, %11111111, %11000000, %00000000, %00111111, %11111111, %10000000, %00000000
  249 D1:BE51 7F FF 00 00 
              7F FC 00 00 	.db %01111111, %11111111, %00000000, %00000000, %01111111, %11111100, %00000000, %00000000
  250 D1:BE59 FF F8 00 00 
              FF E0 00 00 	.db %11111111, %11111000, %00000000, %00000000, %11111111, %11100000, %00000000, %00000000
  251 D1:BE61 FF C0 00 00 
              FF 80 00 00 	.db %11111111, %11000000, %00000000, %00000000, %11111111, %10000000, %00000000, %00000000
  252 D1:BE69 FF 00 00 00 
              FC 00 00 00 	.db %11111111, %00000000, %00000000, %00000000, %11111100, %00000000, %00000000, %00000000
  253 D1:BE71 F8 00 00 00 
              F8 00 00 00 	.db %11111000, %00000000, %00000000, %00000000, %11111000, %00000000, %00000000, %00000000
  254 D1:BE79 -  -  -  -  
  255 D1:BE79 01 20 -  -  	.db %00000001, %00100000
  256 D1:BE7B -  -  -  -  
  257 D1:BE7B 00 50 05 A0 
              05 A8 01 6A 	.db %00000000, %01010000, %00000101, %10100000, %00000101, %10101000, %00000001, %01101010
  258 D1:BE83 6A 55 A9 AA 
              56 A9 AA 55 	.db %01101010, %01010101, %10101001, %10101010, %01010110, %10101001, %10101010, %01010101
  259 D1:BE8B AA 66 A5 5A 
              A6 6A 56 AA 	.db %10101010, %01100110, %10100101, %01011010, %10100110, %01101010, %01010110, %10101010
  260 D1:BE93 66 A5 5A AA 
              A6 A9 5A AA 	.db %01100110, %10100101, %01011010, %10101010, %10100110, %10101001, %01011010, %10101010
  261 D1:BE9B 66 A9 56 AA 
              99 9A 55 6A 	.db %01100110, %10101001, %01010110, %10101010, %10011001, %10011010, %01010101, %01101010
  262 D1:BEA3 AA 99 A9 6A 
              AA AA 6A 5A 	.db %10101010, %10011001, %10101001, %01101010, %10101010, %10101010, %01101010, %01011010
  263 D1:BEAB AA AA 9A 96 
              AA AA A6 65 	.db %10101010, %10101010, %10011010, %10010110, %10101010, %10101010, %10100110, %01100101
  264 D1:BEB3 6A AA AA 66 
              55 AA AA A6 	.db %01101010, %10101010, %10101010, %01100110, %01010101, %10101010, %10101010, %10100110
  265 D1:BEBB 65 6A AA A9 
              99 56 AA A6 	.db %01100101, %01101010, %10101010, %10101001, %10011001, %01010110, %10101010, %10100110
  266 D1:BEC3 66 5A AA 99 
              95 5A A6 66 	.db %01100110, %01011010, %10101010, %10011001, %10010101, %01011010, %10100110, %01100110
  267 D1:BECB 95 AA 66 A5 
              6A 99 A5 5A 	.db %10010101, %10101010, %01100110, %10100101, %01101010, %10011001, %10100101, %01011010
  268 D1:BED3 99 A5 59 9A 
              56 66 55 02 	.db %10011001, %10100101, %01011001, %10011010, %01010110, %01100110, %01010101, %00000010
  269 D1:BEDB 55 00 60 04 
              00 -  -  -  	.db %01010101, %00000000, %01100000, %00000100, %00000000
  270 D1:BEE0 -  -  -  -  
  271 D1:BEE0 -  -  -  -  
  272 D1:BEE0 -  -  -  -  GreenCurl1:
  273 D1:BEE0 08 -  -  -  	.db %00001000
  274 D1:BEE1 20 20 -  -  	.db 32, 32
  275 D1:BEE3 00 0F E0 00 
              00 1F E0 00 	.db %00000000, %00001111, %11100000, %00000000, %00000000, %00011111, %11100000, %00000000
  276 D1:BEEB 00 FF E0 00 
              03 FE 00 00 	.db %00000000, %11111111, %11100000, %00000000, %00000011, %11111110, %00000000, %00000000
  277 D1:BEF3 07 F8 00 00 
              07 E0 00 00 	.db %00000111, %11111000, %00000000, %00000000, %00000111, %11100000, %00000000, %00000000
  278 D1:BEFB 1F 80 00 00 
              3F 00 00 00 	.db %00011111, %10000000, %00000000, %00000000, %00111111, %00000000, %00000000, %00000000
  279 D1:BF03 3E 07 FE 00 
              7C 0F FF F8 	.db %00111110, %00000111, %11111110, %00000000, %01111100, %00001111, %11111111, %11111000
  280 D1:BF0B 78 1F FF FC 
              F0 3F 07 FE 	.db %01111000, %00011111, %11111111, %11111100, %11110000, %00111111, %00000111, %11111110
  281 D1:BF13 F0 3C 00 3F 
              E0 78 00 1F 	.db %11110000, %00111100, %00000000, %00111111, %11100000, %01111000, %00000000, %00011111
  282 D1:BF1B E0 78 00 07 
              E0 78 0E 07 	.db %11100000, %01111000, %00000000, %00000111, %11100000, %01111000, %00001110, %00000111
  283 D1:BF23 E0 78 0E 07 
              E0 38 0E 03 	.db %11100000, %01111000, %00001110, %00000111, %11100000, %00111000, %00001110, %00000011
  284 D1:BF2B F0 3C 1E 03 
              F8 3E 3E 07 	.db %11110000, %00111100, %00011110, %00000011, %11111000, %00111110, %00111110, %00000111
  285 D1:BF33 F8 1F FE 07 
              78 1F FC 07 	.db %11111000, %00011111, %11111110, %00000111, %01111000, %00011111, %11111100, %00000111
  286 D1:BF3B 3C 0F F8 0F 
              3E 00 70 1F 	.db %00111100, %00001111, %11111000, %00001111, %00111110, %00000000, %01110000, %00011111
  287 D1:BF43 1F 00 00 3E 
              0F 80 00 FE 	.db %00011111, %00000000, %00000000, %00111110, %00001111, %10000000, %00000000, %11111110
  288 D1:BF4B 0F C0 01 FC 
              07 C0 03 F8 	.db %00001111, %11000000, %00000001, %11111100, %00000111, %11000000, %00000011, %11111000
  289 D1:BF53 03 E0 0F E0 
              01 FF FF C0 	.db %00000011, %11100000, %00001111, %11100000, %00000001, %11111111, %11111111, %11000000
  290 D1:BF5B 00 FF FF 00 
              00 7F FE 00 	.db %00000000, %11111111, %11111111, %00000000, %00000000, %01111111, %11111110, %00000000
  291 D1:BF63 -  -  -  -  
  292 D1:BF63 50 -  -  -  	.db %01010000
  293 D1:BF64 -  -  -  -  
  294 D1:BF64 -  -  -  -  
  295 D1:BF64 -  -  -  -  
  296 D1:BF64 -  -  -  -  Bluecurl:
  297 D1:BF64 08 -  -  -  	.db %00001000
  298 D1:BF65 30 30 -  -  	.db 48, 48
  299 D1:BF67 00 00 FF C0 
              00 00 00 01 	.db %00000000, %00000000, %11111111, %11000000, %00000000, %00000000, %00000000, %00000001
  300 D1:BF6F FF FE 00 00 
              00 07 C0 7F 	.db %11111111, %11111110, %00000000, %00000000, %00000000, %00000111, %11000000, %01111111
  301 D1:BF77 00 00 00 1F 
              00 07 C0 00 	.db %00000000, %00000000, %00000000, %00011111, %00000000, %00000111, %11000000, %00000000
  302 D1:BF7F 00 3E 00 01 
              F0 00 00 78 	.db %00000000, %00111110, %00000000, %00000001, %11110000, %00000000, %00000000, %01111000
  303 D1:BF87 00 00 78 00 
              00 F0 00 00 	.db %00000000, %00000000, %01111000, %00000000, %00000000, %11110000, %00000000, %00000000
  304 D1:BF8F 1C 00 01 E0 
              00 00 0C 00 	.db %00011100, %00000000, %00000001, %11100000, %00000000, %00000000, %00001100, %00000000
  305 D1:BF97 01 C0 00 00 
              0E 00 01 80 	.db %00000001, %11000000, %00000000, %00000000, %00001110, %00000000, %00000001, %10000000
  306 D1:BF9F 00 00 07 00 
              03 80 00 00 	.db %00000000, %00000000, %00000111, %00000000, %00000011, %10000000, %00000000, %00000000
  307 D1:BFA7 03 80 03 03 
              FF 80 01 C0 	.db %00000011, %10000000, %00000011, %00000011, %11111111, %10000000, %00000001, %11000000
  308 D1:BFAF 03 0F FF C0 
              00 E0 07 1F 	.db %00000011, %00001111, %11111111, %11000000, %00000000, %11100000, %00000111, %00011111
  309 D1:BFB7 00 F0 00 F0 
              0E 18 00 78 	.db %00000000, %11110000, %00000000, %11110000, %00001110, %00011000, %00000000, %01111000
  310 D1:BFBF 00 30 0E 38 
              00 1C 00 38 	.db %00000000, %00110000, %00001110, %00111000, %00000000, %00011100, %00000000, %00111000
  311 D1:BFC7 1C 30 00 0E 
              00 38 1C 30 	.db %00011100, %00110000, %00000000, %00001110, %00000000, %00111000, %00011100, %00110000
  312 D1:BFCF 00 0E 00 1C 
              18 30 00 06 	.db %00000000, %00001110, %00000000, %00011100, %00011000, %00110000, %00000000, %00000110
  313 D1:BFD7 00 0C 38 30 
              00 07 00 0E 	.db %00000000, %00001100, %00111000, %00110000, %00000000, %00000111, %00000000, %00001110
  314 D1:BFDF 70 30 1F 03 
              80 0E 60 30 	.db %01110000, %00110000, %00011111, %00000011, %10000000, %00001110, %01100000, %00110000
  315 D1:BFE7 1F 01 C0 06 
              E0 30 18 00 	.db %00011111, %00000001, %11000000, %00000110, %11100000, %00110000, %00011000, %00000000
  316 D1:BFEF C0 06 E0 30 
              18 00 C0 07 	.db %11000000, %00000110, %11100000, %00110000, %00011000, %00000000, %11000000, %00000111
  317 D1:BFF7 C0 30 18 00 
              C0 07 C0 30 	.db %11000000, %00110000, %00011000, %00000000, %11000000, %00000111, %11000000, %00110000
  318 D1:BFFF 18 00 C0 03 
              C0 30 1C 00 	.db %00011000, %00000000, %11000000, %00000011, %11000000, %00110000, %00011100, %00000000
  319 D1:C007 C0 03 C0 30 
              0C 00 C0 03 	.db %11000000, %00000011, %11000000, %00110000, %00001100, %00000000, %11000000, %00000011
  320 D1:C00F C0 30 0E 00 
              C0 07 C0 38 	.db %11000000, %00110000, %00001110, %00000000, %11000000, %00000111, %11000000, %00111000
  321 D1:C017 07 00 C0 07 
              00 18 07 81 	.db %00000111, %00000000, %11000000, %00000111, %00000000, %00011000, %00000111, %10000001
  322 D1:C01F C0 06 00 18 
              01 E7 80 06 	.db %11000000, %00000110, %00000000, %00011000, %00000001, %11100111, %10000000, %00000110
  323 D1:C027 00 1C 01 FF 
              80 06 00 0C 	.db %00000000, %00011100, %00000001, %11111111, %10000000, %00000110, %00000000, %00001100
  324 D1:C02F 00 3C 00 0E 
              00 0E 00 00 	.db %00000000, %00111100, %00000000, %00001110, %00000000, %00001110, %00000000, %00000000
  325 D1:C037 00 0E 00 06 
              00 00 00 0C 	.db %00000000, %00001110, %00000000, %00000110, %00000000, %00000000, %00000000, %00001100
  326 D1:C03F 00 07 00 00 
              00 1C 00 03 	.db %00000000, %00000111, %00000000, %00000000, %00000000, %00011100, %00000000, %00000011
  327 D1:C047 80 00 00 38 
              00 01 80 00 	.db %10000000, %00000000, %00000000, %00111000, %00000000, %00000001, %10000000, %00000000
  328 D1:C04F 00 78 00 01 
              C0 00 00 F0 	.db %00000000, %01111000, %00000000, %00000001, %11000000, %00000000, %00000000, %11110000
  329 D1:C057 00 00 E0 00 
              01 E0 00 00 	.db %00000000, %00000000, %11100000, %00000000, %00000001, %11100000, %00000000, %00000000
  330 D1:C05F 70 00 03 80 
              00 00 78 00 	.db %01110000, %00000000, %00000011, %10000000, %00000000, %00000000, %01111000, %00000000
  331 D1:C067 07 80 00 00 
              18 00 1F 00 	.db %00000111, %10000000, %00000000, %00000000, %00011000, %00000000, %00011111, %00000000
  332 D1:C06F 00 00 1C 00 
              7C 00 00 00 	.db %00000000, %00000000, %00011100, %00000000, %01111100, %00000000, %00000000, %00000000
  333 D1:C077 1E 01 F8 00 
              00 00 07 F7 	.db %00011110, %00000001, %11111000, %00000000, %00000000, %00000000, %00000111, %11110111
  334 D1:C07F E0 00 00 00 
              03 FF 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000011, %11111111, %00000000, %00000000
  335 D1:C087 -  -  -  -  
  336 D1:C087 60 -  -  -  	.db %01100000
  337 D1:C088 -  -  -  -  
  338 D1:C088 -  -  -  -  
  339 D1:C088 -  -  -  -  
Listing for file "ascent.asm"
  280 D1:C088 -  -  -  -  #include "FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FG_Data.txt"
    1 D1:C088 -  -  -  -  FG_Data_frame_table:
    2 D1:C088 40 C9 D1 -  	.dl FG_Data_0
    3 D1:C08B 1C C9 D1 -  	.dl FG_Data_1
    4 D1:C08E F8 C8 D1 -  	.dl FG_Data_2
    5 D1:C091 D0 C8 D1 -  	.dl FG_Data_3
    6 D1:C094 90 C8 D1 -  	.dl FG_Data_4
    7 D1:C097 68 C8 D1 -  	.dl FG_Data_5
    8 D1:C09A 44 C8 D1 -  	.dl FG_Data_6
    9 D1:C09D 1C C8 D1 -  	.dl FG_Data_7
   10 D1:C0A0 F4 C7 D1 -  	.dl FG_Data_8
   11 D1:C0A3 CC C7 D1 -  	.dl FG_Data_9
   12 D1:C0A6 A4 C7 D1 -  	.dl FG_Data_10
   13 D1:C0A9 80 C7 D1 -  	.dl FG_Data_11
   14 D1:C0AC 3C C7 D1 -  	.dl FG_Data_12
   15 D1:C0AF 18 C7 D1 -  	.dl FG_Data_13
   16 D1:C0B2 F4 C6 D1 -  	.dl FG_Data_14
   17 D1:C0B5 CC C6 D1 -  	.dl FG_Data_15
   18 D1:C0B8 A4 C6 D1 -  	.dl FG_Data_16
   19 D1:C0BB 7C C6 D1 -  	.dl FG_Data_17
   20 D1:C0BE 4C C6 D1 -  	.dl FG_Data_18
   21 D1:C0C1 30 C6 D1 -  	.dl FG_Data_19
   22 D1:C0C4 08 C6 D1 -  	.dl FG_Data_20
   23 D1:C0C7 90 C5 D1 -  	.dl FG_Data_21
   24 D1:C0CA FC C4 D1 -  	.dl FG_Data_22
   25 D1:C0CD 90 C4 D1 -  	.dl FG_Data_23
   26 D1:C0D0 F0 C3 D1 -  	.dl FG_Data_24
   27 D1:C0D3 58 C3 D1 -  	.dl FG_Data_25
   28 D1:C0D6 2C C3 D1 -  	.dl FG_Data_26
   29 D1:C0D9 04 C3 D1 -  	.dl FG_Data_27
   30 D1:C0DC E0 C2 D1 -  	.dl FG_Data_28
   31 D1:C0DF 9C C2 D1 -  	.dl FG_Data_29
   32 D1:C0E2 74 C2 D1 -  	.dl FG_Data_30
   33 D1:C0E5 54 C2 D1 -  	.dl FG_Data_31
   34 D1:C0E8 30 C2 D1 -  	.dl FG_Data_32
   35 D1:C0EB 04 C2 D1 -  	.dl FG_Data_33
   36 D1:C0EE D0 C1 D1 -  	.dl FG_Data_34
   37 D1:C0F1 AC C1 D1 -  	.dl FG_Data_35
   38 D1:C0F4 74 C1 D1 -  	.dl FG_Data_36
   39 D1:C0F7 3C C1 D1 -  	.dl FG_Data_37
   40 D1:C0FA 1C C1 D1 -  	.dl FG_Data_38
   41 D1:C0FD 00 C1 D1 -  	.dl FG_Data_39
   42 D1:C100 -  -  -  -  
   43 D1:C100 -  -  -  -  
   44 D1:C100 -  -  -  -  
   45 D1:C100 -  -  -  -  FG_Data_39:
   46 D1:C100 08 D2 D1 -  	.dl Sprite_Table_0
   47 D1:C103 06 -  -  -  	.db 6
   48 D1:C104 31 2D 77 01 	.db 49, 45, 119, 1
   49 D1:C108 57 2D 28 01 	.db 87, 45, 40, 1
   50 D1:C10C 92 2D 51 01 	.db 146, 45, 81, 1
   51 D1:C110 A0 2D 1D 03 	.db 160, 45, 29, 3
   52 D1:C114 3A 17 50 07 	.db 58, 23, 80, 7
   53 D1:C118 98 17 77 00 	.db 152, 23, 119, 0
   54 D1:C11C -  -  -  -  
   55 D1:C11C -  -  -  -  FG_Data_38:
   56 D1:C11C 08 D2 D1 -  	.dl Sprite_Table_0
   57 D1:C11F 07 -  -  -  	.db 7
   58 D1:C120 1D 2D 22 02 	.db 29, 45, 34, 2
   59 D1:C124 62 2D 47 02 	.db 98, 45, 71, 2
   60 D1:C128 B0 2D 67 06 	.db 176, 45, 103, 6
   61 D1:C12C EF 2D 4F 03 	.db 239, 45, 79, 3
   62 D1:C130 34 2D 6B 03 	.db 52, 45, 107, 3
   63 D1:C134 D3 17 72 05 	.db 211, 23, 114, 5
   64 D1:C138 94 17 40 05 	.db 148, 23, 64, 5
   65 D1:C13C -  -  -  -  
   66 D1:C13C -  -  -  -  FG_Data_37:
   67 D1:C13C 08 D2 D1 -  	.dl Sprite_Table_0
   68 D1:C13F 0D -  -  -  	.db 13
   69 D1:C140 58 2D 6D 01 	.db 88, 45, 109, 1
   70 D1:C144 7E 2D 1E 01 	.db 126, 45, 30, 1
   71 D1:C148 B9 2D 47 01 	.db 185, 45, 71, 1
   72 D1:C14C C7 2D 13 03 	.db 199, 45, 19, 3
   73 D1:C150 16 2D 45 03 	.db 22, 45, 69, 3
   74 D1:C154 61 17 46 07 	.db 97, 23, 70, 7
   75 D1:C158 BF 17 6D 00 	.db 191, 23, 109, 0
   76 D1:C15C 6C 2D 2A 01 	.db 108, 45, 42, 1
   77 D1:C160 C2 2D 68 01 	.db 194, 45, 104, 1
   78 D1:C164 99 2D 27 03 	.db 153, 45, 39, 3
   79 D1:C168 59 2D 5B 03 	.db 89, 45, 91, 3
   80 D1:C16C EF 17 4A 00 	.db 239, 23, 74, 0
   81 D1:C170 7F 2F 47 09 	.db 127, 47, 71, 9
   82 D1:C174 -  -  -  -  
   83 D1:C174 -  -  -  -  FG_Data_36:
   84 D1:C174 08 D2 D1 -  	.dl Sprite_Table_0
   85 D1:C177 0D -  -  -  	.db 13
   86 D1:C178 44 2D 18 02 	.db 68, 45, 24, 2
   87 D1:C17C 89 2D 3D 02 	.db 137, 45, 61, 2
   88 D1:C180 D7 2D 5D 06 	.db 215, 45, 93, 6
   89 D1:C184 5B 2D 61 03 	.db 91, 45, 97, 3
   90 D1:C188 FA 17 69 00 	.db 250, 23, 105, 0
   91 D1:C18C BB 17 37 00 	.db 187, 23, 55, 0
   92 D1:C190 16 17 40 05 	.db 22, 23, 64, 5
   93 D1:C194 97 2D 24 01 	.db 151, 45, 36, 1
   94 D1:C198 8A 2D 5F 02 	.db 138, 45, 95, 2
   95 D1:C19C DA 2D 49 03 	.db 218, 45, 73, 3
   96 D1:C1A0 2E 17 48 07 	.db 46, 23, 72, 7
   97 D1:C1A4 CE 17 74 04 	.db 206, 23, 116, 4
   98 D1:C1A8 68 17 3D 00 	.db 104, 23, 61, 0
   99 D1:C1AC -  -  -  -  
  100 D1:C1AC -  -  -  -  FG_Data_35:
  101 D1:C1AC 08 D2 D1 -  	.dl Sprite_Table_0
  102 D1:C1AF 08 -  -  -  	.db 8
  103 D1:C1B0 93 2D 20 01 	.db 147, 45, 32, 1
  104 D1:C1B4 E9 2D 5E 01 	.db 233, 45, 94, 1
  105 D1:C1B8 C0 2D 1D 03 	.db 192, 45, 29, 3
  106 D1:C1BC 80 2D 51 03 	.db 128, 45, 81, 3
  107 D1:C1C0 01 2D 3F 03 	.db 1, 45, 63, 3
  108 D1:C1C4 A6 2F 3D 09 	.db 166, 47, 61, 9
  109 D1:C1C8 E4 2D 37 03 	.db 228, 45, 55, 3
  110 D1:C1CC FB 17 6C 00 	.db 251, 23, 108, 0
  111 D1:C1D0 -  -  -  -  
  112 D1:C1D0 -  -  -  -  FG_Data_34:
  113 D1:C1D0 08 D2 D1 -  	.dl Sprite_Table_0
  114 D1:C1D3 0C -  -  -  	.db 12
  115 D1:C1D4 23 2D 2C 02 	.db 35, 45, 44, 2
  116 D1:C1D8 5E 2D 55 02 	.db 94, 45, 85, 2
  117 D1:C1DC 6C 2D 21 06 	.db 108, 45, 33, 6
  118 D1:C1E0 06 17 54 07 	.db 6, 23, 84, 7
  119 D1:C1E4 64 17 7A 05 	.db 100, 23, 122, 5
  120 D1:C1E8 BE 2D 1A 01 	.db 190, 45, 26, 1
  121 D1:C1EC B1 2D 55 02 	.db 177, 45, 85, 2
  122 D1:C1F0 0B 2D 2D 03 	.db 11, 45, 45, 3
  123 D1:C1F4 55 17 3E 07 	.db 85, 23, 62, 7
  124 D1:C1F8 F5 17 6A 04 	.db 245, 23, 106, 4
  125 D1:C1FC 8F 17 33 00 	.db 143, 23, 51, 0
  126 D1:C200 22 17 62 00 	.db 34, 23, 98, 0
  127 D1:C204 -  -  -  -  
  128 D1:C204 -  -  -  -  FG_Data_33:
  129 D1:C204 08 D2 D1 -  	.dl Sprite_Table_0
  130 D1:C207 0A -  -  -  	.db 10
  131 D1:C208 87 2D 1A 02 	.db 135, 45, 26, 2
  132 D1:C20C 2E 2D 4A 01 	.db 46, 45, 74, 1
  133 D1:C210 FD 2D 7B 02 	.db 253, 45, 123, 2
  134 D1:C214 7C 2D 6A 03 	.db 124, 45, 106, 3
  135 D1:C218 DE 2D 13 03 	.db 222, 45, 19, 3
  136 D1:C21C BB 2D 53 06 	.db 187, 45, 83, 6
  137 D1:C220 00 2D 6F 06 	.db 0, 45, 111, 6
  138 D1:C224 2E 17 15 04 	.db 46, 23, 21, 4
  139 D1:C228 9F 17 76 05 	.db 159, 23, 118, 5
  140 D1:C22C 60 17 44 05 	.db 96, 23, 68, 5
  141 D1:C230 -  -  -  -  
  142 D1:C230 -  -  -  -  FG_Data_32:
  143 D1:C230 08 D2 D1 -  	.dl Sprite_Table_0
  144 D1:C233 08 -  -  -  	.db 8
  145 D1:C234 38 2D 2E 02 	.db 56, 45, 46, 2
  146 D1:C238 8E 2D 6C 02 	.db 142, 45, 108, 2
  147 D1:C23C E9 2D 25 01 	.db 233, 45, 37, 1
  148 D1:C240 65 2D 2B 06 	.db 101, 45, 43, 6
  149 D1:C244 25 2D 5F 06 	.db 37, 45, 95, 6
  150 D1:C248 93 17 15 04 	.db 147, 23, 21, 4
  151 D1:C24C BB 17 4E 00 	.db 187, 23, 78, 0
  152 D1:C250 4B 2F 4A 08 	.db 75, 47, 74, 8
  153 D1:C254 -  -  -  -  
  154 D1:C254 -  -  -  -  FG_Data_31:
  155 D1:C254 08 D2 D1 -  	.dl Sprite_Table_0
  156 D1:C257 07 -  -  -  	.db 7
  157 D1:C258 63 2D 28 02 	.db 99, 45, 40, 2
  158 D1:C25C 56 2D 62 01 	.db 86, 45, 98, 1
  159 D1:C260 A6 2D 4D 06 	.db 166, 45, 77, 6
  160 D1:C264 D6 2D 11 03 	.db 214, 45, 17, 3
  161 D1:C268 9A 17 78 04 	.db 154, 23, 120, 4
  162 D1:C26C FE 17 09 00 	.db 254, 23, 9, 0
  163 D1:C270 34 17 40 05 	.db 52, 23, 64, 5
  164 D1:C274 -  -  -  -  
  165 D1:C274 -  -  -  -  FG_Data_30:
  166 D1:C274 08 D2 D1 -  	.dl Sprite_Table_0
  167 D1:C277 09 -  -  -  	.db 9
  168 D1:C278 49 2D 51 02 	.db 73, 45, 81, 2
  169 D1:C27C 35 2D 26 01 	.db 53, 45, 38, 1
  170 D1:C280 9E 2D 76 01 	.db 158, 45, 118, 1
  171 D1:C284 F7 2D 07 03 	.db 247, 45, 7, 3
  172 D1:C288 B0 2D 3B 06 	.db 176, 45, 59, 6
  173 D1:C28C FA 17 4C 04 	.db 250, 23, 76, 4
  174 D1:C290 C7 17 6F 05 	.db 199, 23, 111, 5
  175 D1:C294 66 17 1C 00 	.db 102, 23, 28, 0
  176 D1:C298 6D 2F 30 08 	.db 109, 47, 48, 8
  177 D1:C29C -  -  -  -  
  178 D1:C29C -  -  -  -  FG_Data_29:
  179 D1:C29C 08 D2 D1 -  	.dl Sprite_Table_0
  180 D1:C29F 10 -  -  -  	.db 16
  181 D1:C2A0 E1 2D 20 01 	.db 225, 45, 32, 1
  182 D1:C2A4 DB 2D 2C 02 	.db 219, 45, 44, 2
  183 D1:C2A8 B9 2D 3B 01 	.db 185, 45, 59, 1
  184 D1:C2AC A2 2D 40 02 	.db 162, 45, 64, 2
  185 D1:C2B0 B6 2D 4A 02 	.db 182, 45, 74, 2
  186 D1:C2B4 8B 2D 4F 02 	.db 139, 45, 79, 2
  187 D1:C2B8 8B 2D 4F 02 	.db 139, 45, 79, 2
  188 D1:C2BC A7 2D 66 02 	.db 167, 45, 102, 2
  189 D1:C2C0 80 2D 54 02 	.db 128, 45, 84, 2
  190 D1:C2C4 81 2D 24 01 	.db 129, 45, 36, 1
  191 D1:C2C8 50 2D 15 01 	.db 80, 45, 21, 1
  192 D1:C2CC D1 2D 0F 03 	.db 209, 45, 15, 3
  193 D1:C2D0 14 17 38 04 	.db 20, 23, 56, 4
  194 D1:C2D4 FA 17 7D 04 	.db 250, 23, 125, 4
  195 D1:C2D8 D9 17 44 05 	.db 217, 23, 68, 5
  196 D1:C2DC 21 17 67 05 	.db 33, 23, 103, 5
  197 D1:C2E0 -  -  -  -  
  198 D1:C2E0 -  -  -  -  FG_Data_28:
  199 D1:C2E0 08 D2 D1 -  	.dl Sprite_Table_0
  200 D1:C2E3 08 -  -  -  	.db 8
  201 D1:C2E4 98 2D 3F 01 	.db 152, 45, 63, 1
  202 D1:C2E8 C9 2D 60 01 	.db 201, 45, 96, 1
  203 D1:C2EC 6B 2D 83 01 	.db 107, 45, 131, 1
  204 D1:C2F0 D3 2D 13 03 	.db 211, 45, 19, 3
  205 D1:C2F4 59 17 1A 04 	.db 89, 23, 26, 4
  206 D1:C2F8 64 17 6A 05 	.db 100, 23, 106, 5
  207 D1:C2FC 05 17 41 05 	.db 5, 23, 65, 5
  208 D1:C300 F1 2F 4A 09 	.db 241, 47, 74, 9
  209 D1:C304 -  -  -  -  
  210 D1:C304 -  -  -  -  FG_Data_27:
  211 D1:C304 08 D2 D1 -  	.dl Sprite_Table_0
  212 D1:C307 09 -  -  -  	.db 9
  213 D1:C308 64 2D 3F 02 	.db 100, 45, 63, 2
  214 D1:C30C 79 2D 73 02 	.db 121, 45, 115, 2
  215 D1:C310 DA 2D 2A 01 	.db 218, 45, 42, 1
  216 D1:C314 F7 2D 54 03 	.db 247, 45, 84, 3
  217 D1:C318 0D 2D 11 06 	.db 13, 45, 17, 6
  218 D1:C31C 81 17 5E 04 	.db 129, 23, 94, 4
  219 D1:C320 83 17 1E 05 	.db 131, 23, 30, 5
  220 D1:C324 14 17 34 00 	.db 20, 23, 52, 0
  221 D1:C328 5C 2F 18 09 	.db 92, 47, 24, 9
  222 D1:C32C -  -  -  -  
  223 D1:C32C -  -  -  -  FG_Data_26:
  224 D1:C32C 08 D2 D1 -  	.dl Sprite_Table_0
  225 D1:C32F 0A -  -  -  	.db 10
  226 D1:C330 78 2D 7F 02 	.db 120, 45, 127, 2
  227 D1:C334 5F 2D 20 02 	.db 95, 45, 32, 2
  228 D1:C338 D0 2D 4F 02 	.db 208, 45, 79, 2
  229 D1:C33C F9 2D 68 03 	.db 249, 45, 104, 3
  230 D1:C340 52 2D 52 03 	.db 82, 45, 82, 3
  231 D1:C344 8D 17 1F 04 	.db 141, 23, 31, 4
  232 D1:C348 9A 17 43 00 	.db 154, 23, 67, 0
  233 D1:C34C 33 2D 7E 02 	.db 51, 45, 126, 2
  234 D1:C350 45 2D 42 03 	.db 69, 45, 66, 3
  235 D1:C354 02 2F 38 09 	.db 2, 47, 56, 9
  236 D1:C358 -  -  -  -  
  237 D1:C358 -  -  -  -  FG_Data_25:
  238 D1:C358 08 D2 D1 -  	.dl Sprite_Table_0
  239 D1:C35B 25 -  -  -  	.db 37
  240 D1:C35C 00 2D 23 01 	.db 0, 45, 35, 1
  241 D1:C360 76 2D 28 02 	.db 118, 45, 40, 2
  242 D1:C364 70 2D 33 01 	.db 112, 45, 51, 1
  243 D1:C368 4E 2D 43 02 	.db 78, 45, 67, 2
  244 D1:C36C 38 2D 47 01 	.db 56, 45, 71, 1
  245 D1:C370 4B 2D 51 01 	.db 75, 45, 81, 1
  246 D1:C374 20 2D 56 01 	.db 32, 45, 86, 1
  247 D1:C378 20 2D 56 01 	.db 32, 45, 86, 1
  248 D1:C37C 6E 17 4C 00 	.db 110, 23, 76, 0
  249 D1:C380 FB 17 23 05 	.db 251, 23, 35, 5
  250 D1:C384 8F 17 84 04 	.db 143, 23, 132, 4
  251 D1:C388 16 2D 2C 02 	.db 22, 45, 44, 2
  252 D1:C38C 15 2D 5B 01 	.db 21, 45, 91, 1
  253 D1:C390 CA 2D 2E 02 	.db 202, 45, 46, 2
  254 D1:C394 DE 2D 58 01 	.db 222, 45, 88, 1
  255 D1:C398 3C 2D 6D 01 	.db 60, 45, 109, 1
  256 D1:C39C 8C 2F 33 08 	.db 140, 47, 51, 8
  257 D1:C3A0 66 2D 17 06 	.db 102, 45, 23, 6
  258 D1:C3A4 85 17 1F 00 	.db 133, 23, 31, 0
  259 D1:C3A8 CF 2D 3E 06 	.db 207, 45, 62, 6
  260 D1:C3AC 98 2D 26 02 	.db 152, 45, 38, 2
  261 D1:C3B0 D3 2D 4F 02 	.db 211, 45, 79, 2
  262 D1:C3B4 53 2D 0D 06 	.db 83, 45, 13, 6
  263 D1:C3B8 E1 2D 1B 06 	.db 225, 45, 27, 6
  264 D1:C3BC 30 2D 4D 06 	.db 48, 45, 77, 6
  265 D1:C3C0 7B 17 4E 04 	.db 123, 23, 78, 4
  266 D1:C3C4 D9 17 74 05 	.db 217, 23, 116, 5
  267 D1:C3C8 14 17 70 00 	.db 20, 23, 112, 0
  268 D1:C3CC 52 2D 7A 01 	.db 82, 45, 122, 1
  269 D1:C3D0 64 2D 3F 06 	.db 100, 45, 63, 6
  270 D1:C3D4 1A 17 20 00 	.db 26, 23, 32, 0
  271 D1:C3D8 21 2F 34 08 	.db 33, 47, 52, 8
  272 D1:C3DC 68 2D 54 02 	.db 104, 45, 84, 2
  273 D1:C3E0 54 2D 29 01 	.db 84, 45, 41, 1
  274 D1:C3E4 BD 2D 79 01 	.db 189, 45, 121, 1
  275 D1:C3E8 19 17 80 04 	.db 25, 23, 128, 4
  276 D1:C3EC 72 2D 75 02 	.db 114, 45, 117, 2
  277 D1:C3F0 -  -  -  -  
  278 D1:C3F0 -  -  -  -  FG_Data_24:
  279 D1:C3F0 08 D2 D1 -  	.dl Sprite_Table_0
  280 D1:C3F3 27 -  -  -  	.db 39
  281 D1:C3F4 95 2D 24 02 	.db 149, 45, 36, 2
  282 D1:C3F8 FA 2D 2F 02 	.db 250, 45, 47, 2
  283 D1:C3FC 8F 2D 30 02 	.db 143, 45, 48, 2
  284 D1:C400 D8 2D 3E 01 	.db 216, 45, 62, 1
  285 D1:C404 6D 2D 3F 01 	.db 109, 45, 63, 1
  286 D1:C408 D5 2D 4D 02 	.db 213, 45, 77, 2
  287 D1:C40C C2 2D 43 02 	.db 194, 45, 67, 2
  288 D1:C410 57 2D 44 02 	.db 87, 45, 68, 2
  289 D1:C414 6A 2D 4E 02 	.db 106, 45, 78, 2
  290 D1:C418 AA 2D 52 02 	.db 170, 45, 82, 2
  291 D1:C41C 3F 2D 53 02 	.db 63, 45, 83, 2
  292 D1:C420 3F 2D 53 02 	.db 63, 45, 83, 2
  293 D1:C424 AA 2D 52 02 	.db 170, 45, 82, 2
  294 D1:C428 A0 2D 27 01 	.db 160, 45, 39, 1
  295 D1:C42C 9F 2D 57 02 	.db 159, 45, 87, 2
  296 D1:C430 6F 2D 18 01 	.db 111, 45, 24, 1
  297 D1:C434 F0 2D 12 03 	.db 240, 45, 18, 3
  298 D1:C438 F8 17 47 05 	.db 248, 23, 71, 5
  299 D1:C43C C6 2D 69 02 	.db 198, 45, 105, 2
  300 D1:C440 FC 2D 14 02 	.db 252, 45, 20, 2
  301 D1:C444 8D 17 48 05 	.db 141, 23, 72, 5
  302 D1:C448 85 2D 13 03 	.db 133, 45, 19, 3
  303 D1:C44C 03 2D 66 02 	.db 3, 45, 102, 2
  304 D1:C450 5E 2D 1F 01 	.db 94, 45, 31, 1
  305 D1:C454 A3 2D 44 01 	.db 163, 45, 68, 1
  306 D1:C458 F1 2D 64 03 	.db 241, 45, 100, 3
  307 D1:C45C 75 2D 68 03 	.db 117, 45, 104, 3
  308 D1:C460 08 17 0E 07 	.db 8, 23, 14, 7
  309 D1:C464 A3 17 0F 04 	.db 163, 23, 15, 4
  310 D1:C468 D5 17 3E 00 	.db 213, 23, 62, 0
  311 D1:C46C 30 17 47 05 	.db 48, 23, 71, 5
  312 D1:C470 5B 2D 6A 02 	.db 91, 45, 106, 2
  313 D1:C474 FD 2D 55 02 	.db 253, 45, 85, 2
  314 D1:C478 E9 2D 2A 01 	.db 233, 45, 42, 1
  315 D1:C47C 34 2D 58 02 	.db 52, 45, 88, 2
  316 D1:C480 35 2D 28 01 	.db 53, 45, 40, 1
  317 D1:C484 04 2D 19 01 	.db 4, 45, 25, 1
  318 D1:C488 AE 17 80 07 	.db 174, 23, 128, 7
  319 D1:C48C E5 2D 1D 02 	.db 229, 45, 29, 2
  320 D1:C490 -  -  -  -  
  321 D1:C490 -  -  -  -  FG_Data_23:
  322 D1:C490 08 D2 D1 -  	.dl Sprite_Table_0
  323 D1:C493 1A -  -  -  	.db 26
  324 D1:C494 2D 2D 1A 02 	.db 45, 45, 26, 2
  325 D1:C498 27 2D 26 02 	.db 39, 45, 38, 2
  326 D1:C49C 05 2D 35 01 	.db 5, 45, 53, 1
  327 D1:C4A0 02 2D 44 02 	.db 2, 45, 68, 2
  328 D1:C4A4 AD 2D 28 02 	.db 173, 45, 40, 2
  329 D1:C4A8 25 17 3E 05 	.db 37, 23, 62, 5
  330 D1:C4AC B2 17 16 00 	.db 178, 23, 22, 0
  331 D1:C4B0 46 17 76 07 	.db 70, 23, 118, 7
  332 D1:C4B4 1D 2D 09 03 	.db 29, 45, 9, 3
  333 D1:C4B8 FC 2D 35 06 	.db 252, 45, 53, 6
  334 D1:C4BC EA 2D 70 01 	.db 234, 45, 112, 1
  335 D1:C4C0 81 2D 20 01 	.db 129, 45, 32, 1
  336 D1:C4C4 95 2D 4B 02 	.db 149, 45, 75, 2
  337 D1:C4C8 24 2F 3F 08 	.db 36, 47, 63, 8
  338 D1:C4CC 67 2D 4A 06 	.db 103, 45, 74, 6
  339 D1:C4D0 55 2D 85 01 	.db 85, 45, 133, 1
  340 D1:C4D4 00 2D 60 02 	.db 0, 45, 96, 2
  341 D1:C4D8 C0 2F 44 08 	.db 192, 47, 68, 8
  342 D1:C4DC 73 17 03 00 	.db 115, 23, 3, 0
  343 D1:C4E0 0F 17 71 07 	.db 15, 23, 113, 7
  344 D1:C4E4 4B 2D 0B 06 	.db 75, 45, 11, 6
  345 D1:C4E8 1B 2D 46 03 	.db 27, 45, 70, 3
  346 D1:C4EC 9A 2D 59 06 	.db 154, 45, 89, 6
  347 D1:C4F0 DA 2D 25 06 	.db 218, 45, 37, 6
  348 D1:C4F4 1D 17 2B 00 	.db 29, 23, 43, 0
  349 D1:C4F8 B9 2F 2A 08 	.db 185, 47, 42, 8
  350 D1:C4FC -  -  -  -  
  351 D1:C4FC -  -  -  -  FG_Data_22:
  352 D1:C4FC 08 D2 D1 -  	.dl Sprite_Table_0
  353 D1:C4FF 24 -  -  -  	.db 36
  354 D1:C500 98 2D 2F 01 	.db 152, 45, 47, 1
  355 D1:C504 92 2D 3B 02 	.db 146, 45, 59, 2
  356 D1:C508 70 2D 4A 01 	.db 112, 45, 74, 1
  357 D1:C50C EF 2D 3A 02 	.db 239, 45, 58, 2
  358 D1:C510 5A 2D 4F 02 	.db 90, 45, 79, 2
  359 D1:C514 6D 2D 59 02 	.db 109, 45, 89, 2
  360 D1:C518 42 2D 5E 02 	.db 66, 45, 94, 2
  361 D1:C51C D7 2D 48 01 	.db 215, 45, 72, 1
  362 D1:C520 42 2D 5E 02 	.db 66, 45, 94, 2
  363 D1:C524 D7 2D 48 01 	.db 215, 45, 72, 1
  364 D1:C528 CC 2D 4E 02 	.db 204, 45, 78, 2
  365 D1:C52C CD 2D 1E 01 	.db 205, 45, 30, 1
  366 D1:C530 07 2D 24 01 	.db 7, 45, 36, 1
  367 D1:C534 9C 2D 0F 01 	.db 156, 45, 15, 1
  368 D1:C538 90 17 53 05 	.db 144, 23, 83, 5
  369 D1:C53C B1 17 8B 07 	.db 177, 23, 139, 7
  370 D1:C540 88 2D 1E 03 	.db 136, 45, 30, 3
  371 D1:C544 F3 2D 60 02 	.db 243, 45, 96, 2
  372 D1:C548 38 2D 33 01 	.db 56, 45, 51, 1
  373 D1:C54C EC 2D 35 01 	.db 236, 45, 53, 1
  374 D1:C550 D8 2D 22 02 	.db 216, 45, 34, 2
  375 D1:C554 CB 2D 5C 01 	.db 203, 45, 92, 1
  376 D1:C558 6C 2D 01 06 	.db 108, 45, 1, 6
  377 D1:C55C 25 2D 35 06 	.db 37, 45, 53, 6
  378 D1:C560 6F 17 46 04 	.db 111, 23, 70, 4
  379 D1:C564 A9 17 3A 05 	.db 169, 23, 58, 5
  380 D1:C568 37 2D 63 02 	.db 55, 45, 99, 2
  381 D1:C56C 3C 17 69 05 	.db 60, 23, 105, 5
  382 D1:C570 08 2D 2E 02 	.db 8, 45, 46, 2
  383 D1:C574 71 2D 7E 02 	.db 113, 45, 126, 2
  384 D1:C578 83 2D 42 03 	.db 131, 45, 66, 3
  385 D1:C57C 39 17 23 05 	.db 57, 23, 35, 5
  386 D1:C580 40 2F 38 09 	.db 64, 47, 56, 9
  387 D1:C584 5E 2D 75 02 	.db 94, 45, 117, 2
  388 D1:C588 1C 2D 58 01 	.db 28, 45, 88, 1
  389 D1:C58C 13 2D 70 01 	.db 19, 45, 112, 1
  390 D1:C590 -  -  -  -  
  391 D1:C590 -  -  -  -  FG_Data_21:
  392 D1:C590 08 D2 D1 -  	.dl Sprite_Table_0
  393 D1:C593 1D -  -  -  	.db 29
  394 D1:C594 56 2D 1A 02 	.db 86, 45, 26, 2
  395 D1:C598 B4 2D 28 02 	.db 180, 45, 40, 2
  396 D1:C59C 50 2D 26 02 	.db 80, 45, 38, 2
  397 D1:C5A0 AE 2D 33 01 	.db 174, 45, 51, 1
  398 D1:C5A4 2E 2D 35 01 	.db 46, 45, 53, 1
  399 D1:C5A8 8C 2D 43 02 	.db 140, 45, 67, 2
  400 D1:C5AC 76 2D 47 01 	.db 118, 45, 71, 1
  401 D1:C5B0 18 2D 3A 02 	.db 24, 45, 58, 2
  402 D1:C5B4 2B 2D 44 02 	.db 43, 45, 68, 2
  403 D1:C5B8 89 2D 51 01 	.db 137, 45, 81, 1
  404 D1:C5BC 5E 2D 56 01 	.db 94, 45, 86, 1
  405 D1:C5C0 5E 2D 56 01 	.db 94, 45, 86, 1
  406 D1:C5C4 00 2D 48 01 	.db 0, 45, 72, 1
  407 D1:C5C8 00 2D 48 01 	.db 0, 45, 72, 1
  408 D1:C5CC AC 17 4C 00 	.db 172, 23, 76, 0
  409 D1:C5D0 CD 17 84 04 	.db 205, 23, 132, 4
  410 D1:C5D4 A4 2D 17 06 	.db 164, 45, 23, 6
  411 D1:C5D8 23 2D 1D 02 	.db 35, 45, 29, 2
  412 D1:C5DC E2 2F 2A 08 	.db 226, 47, 42, 8
  413 D1:C5E0 53 2D 5B 01 	.db 83, 45, 91, 1
  414 D1:C5E4 7A 2D 6D 01 	.db 122, 45, 109, 1
  415 D1:C5E8 4E 17 3E 05 	.db 78, 23, 62, 5
  416 D1:C5EC DB 17 16 00 	.db 219, 23, 22, 0
  417 D1:C5F0 6F 17 76 07 	.db 111, 23, 118, 7
  418 D1:C5F4 46 2D 09 03 	.db 70, 45, 9, 3
  419 D1:C5F8 AA 2D 20 01 	.db 170, 45, 32, 1
  420 D1:C5FC BE 2D 4B 02 	.db 190, 45, 75, 2
  421 D1:C600 54 2D 2C 02 	.db 84, 45, 44, 2
  422 D1:C604 1C 2D 60 02 	.db 28, 45, 96, 2
  423 D1:C608 -  -  -  -  
  424 D1:C608 -  -  -  -  FG_Data_20:
  425 D1:C608 08 D2 D1 -  	.dl Sprite_Table_0
  426 D1:C60B 09 -  -  -  	.db 9
  427 D1:C60C 0D 2D 39 01 	.db 13, 45, 57, 1
  428 D1:C610 F5 2D 4E 02 	.db 245, 45, 78, 2
  429 D1:C614 F6 2D 1E 01 	.db 246, 45, 30, 1
  430 D1:C618 C5 2D 0F 01 	.db 197, 45, 15, 1
  431 D1:C61C 3E 2D 5A 01 	.db 62, 45, 90, 1
  432 D1:C620 48 2D 0D 06 	.db 72, 45, 13, 6
  433 D1:C624 89 17 32 04 	.db 137, 23, 50, 4
  434 D1:C628 96 17 61 05 	.db 150, 23, 97, 5
  435 D1:C62C 66 2F 44 09 	.db 102, 47, 68, 9
  436 D1:C630 -  -  -  -  
  437 D1:C630 -  -  -  -  FG_Data_19:
  438 D1:C630 08 D2 D1 -  	.dl Sprite_Table_0
  439 D1:C633 06 -  -  -  	.db 6
  440 D1:C634 4F 2D 24 01 	.db 79, 45, 36, 1
  441 D1:C638 E0 2D 7D 01 	.db 224, 45, 125, 1
  442 D1:C63C 6C 2D 4E 06 	.db 108, 45, 78, 6
  443 D1:C640 CE 17 14 04 	.db 206, 23, 20, 4
  444 D1:C644 D9 17 64 05 	.db 217, 23, 100, 5
  445 D1:C648 7A 17 3B 05 	.db 122, 23, 59, 5
  446 D1:C64C -  -  -  -  
  447 D1:C64C -  -  -  -  FG_Data_18:
  448 D1:C64C 08 D2 D1 -  	.dl Sprite_Table_0
  449 D1:C64F 0B -  -  -  	.db 11
  450 D1:C650 45 2D 49 02 	.db 69, 45, 73, 2
  451 D1:C654 D9 2D 39 02 	.db 217, 45, 57, 2
  452 D1:C658 EE 2D 6D 02 	.db 238, 45, 109, 2
  453 D1:C65C 82 2D 0A 03 	.db 130, 45, 10, 3
  454 D1:C660 6E 2D 62 06 	.db 110, 45, 98, 6
  455 D1:C664 02 17 19 04 	.db 2, 23, 25, 4
  456 D1:C668 F6 17 57 07 	.db 246, 23, 87, 7
  457 D1:C66C F8 17 18 05 	.db 248, 23, 24, 5
  458 D1:C670 89 17 2E 00 	.db 137, 23, 46, 0
  459 D1:C674 0F 17 3D 00 	.db 15, 23, 61, 0
  460 D1:C678 D1 2F 12 09 	.db 209, 47, 18, 9
  461 D1:C67C -  -  -  -  
  462 D1:C67C -  -  -  -  FG_Data_17:
  463 D1:C67C 08 D2 D1 -  	.dl Sprite_Table_0
  464 D1:C67F 09 -  -  -  	.db 9
  465 D1:C680 12 2D 77 01 	.db 18, 45, 119, 1
  466 D1:C684 38 2D 28 01 	.db 56, 45, 40, 1
  467 D1:C688 73 2D 51 01 	.db 115, 45, 81, 1
  468 D1:C68C 81 2D 1D 03 	.db 129, 45, 29, 3
  469 D1:C690 1B 17 50 07 	.db 27, 23, 80, 7
  470 D1:C694 79 17 77 00 	.db 121, 23, 119, 0
  471 D1:C698 ED 2D 79 02 	.db 237, 45, 121, 2
  472 D1:C69C D4 2D 1A 02 	.db 212, 45, 26, 2
  473 D1:C6A0 C7 2D 4C 06 	.db 199, 45, 76, 6
  474 D1:C6A4 -  -  -  -  
  475 D1:C6A4 -  -  -  -  FG_Data_16:
  476 D1:C6A4 08 D2 D1 -  	.dl Sprite_Table_0
  477 D1:C6A7 09 -  -  -  	.db 9
  478 D1:C6A8 9C 2D 16 01 	.db 156, 45, 22, 1
  479 D1:C6AC 43 2D 47 02 	.db 67, 45, 71, 2
  480 D1:C6B0 91 2D 67 06 	.db 145, 45, 103, 6
  481 D1:C6B4 F3 2D 10 06 	.db 243, 45, 16, 6
  482 D1:C6B8 D0 2D 4F 03 	.db 208, 45, 79, 3
  483 D1:C6BC 15 2D 6B 03 	.db 21, 45, 107, 3
  484 D1:C6C0 43 17 11 07 	.db 67, 23, 17, 7
  485 D1:C6C4 B4 17 73 00 	.db 180, 23, 115, 0
  486 D1:C6C8 75 17 41 00 	.db 117, 23, 65, 0
  487 D1:C6CC -  -  -  -  
  488 D1:C6CC -  -  -  -  FG_Data_15:
  489 D1:C6CC 08 D2 D1 -  	.dl Sprite_Table_0
  490 D1:C6CF 09 -  -  -  	.db 9
  491 D1:C6D0 4D 2D 2A 01 	.db 77, 45, 42, 1
  492 D1:C6D4 A3 2D 68 01 	.db 163, 45, 104, 1
  493 D1:C6D8 FE 2D 22 02 	.db 254, 45, 34, 2
  494 D1:C6DC 7A 2D 27 03 	.db 122, 45, 39, 3
  495 D1:C6E0 3A 2D 5B 03 	.db 58, 45, 91, 3
  496 D1:C6E4 A8 17 11 04 	.db 168, 23, 17, 4
  497 D1:C6E8 D0 17 4A 05 	.db 208, 23, 74, 5
  498 D1:C6EC 13 17 05 05 	.db 19, 23, 5, 5
  499 D1:C6F0 60 2F 47 09 	.db 96, 47, 71, 9
  500 D1:C6F4 -  -  -  -  
  501 D1:C6F4 -  -  -  -  FG_Data_14:
  502 D1:C6F4 08 D2 D1 -  	.dl Sprite_Table_0
  503 D1:C6F7 08 -  -  -  	.db 8
  504 D1:C6F8 78 2D 24 01 	.db 120, 45, 36, 1
  505 D1:C6FC 6B 2D 5F 02 	.db 107, 45, 95, 2
  506 D1:C700 BB 2D 49 03 	.db 187, 45, 73, 3
  507 D1:C704 EB 2D 0E 06 	.db 235, 45, 14, 6
  508 D1:C708 0C 2D 04 06 	.db 12, 45, 4, 6
  509 D1:C70C 0F 17 48 07 	.db 15, 23, 72, 7
  510 D1:C710 AF 17 74 04 	.db 175, 23, 116, 4
  511 D1:C714 49 17 3D 00 	.db 73, 23, 61, 0
  512 D1:C718 -  -  -  -  
  513 D1:C718 -  -  -  -  FG_Data_13:
  514 D1:C718 08 D2 D1 -  	.dl Sprite_Table_0
  515 D1:C71B 08 -  -  -  	.db 8
  516 D1:C71C 5E 2D 4D 01 	.db 94, 45, 77, 1
  517 D1:C720 4A 2D 23 02 	.db 74, 45, 35, 2
  518 D1:C724 B3 2D 73 02 	.db 179, 45, 115, 2
  519 D1:C728 C5 2D 37 03 	.db 197, 45, 55, 3
  520 D1:C72C 0F 17 79 04 	.db 15, 23, 121, 4
  521 D1:C730 DC 17 6C 00 	.db 220, 23, 108, 0
  522 D1:C734 7B 17 18 05 	.db 123, 23, 24, 5
  523 D1:C738 82 2F 2D 09 	.db 130, 47, 45, 9
  524 D1:C73C -  -  -  -  
  525 D1:C73C -  -  -  -  FG_Data_12:
  526 D1:C73C 08 D2 D1 -  	.dl Sprite_Table_0
  527 D1:C73F 10 -  -  -  	.db 16
  528 D1:C740 F6 2D 1D 02 	.db 246, 45, 29, 2
  529 D1:C744 F0 2D 28 01 	.db 240, 45, 40, 1
  530 D1:C748 CE 2D 38 02 	.db 206, 45, 56, 2
  531 D1:C74C B8 2D 3C 01 	.db 184, 45, 60, 1
  532 D1:C750 CB 2D 46 01 	.db 203, 45, 70, 1
  533 D1:C754 A0 2D 4B 01 	.db 160, 45, 75, 1
  534 D1:C758 A0 2D 4B 01 	.db 160, 45, 75, 1
  535 D1:C75C BC 2D 62 01 	.db 188, 45, 98, 1
  536 D1:C760 95 2D 50 01 	.db 149, 45, 80, 1
  537 D1:C764 96 2D 21 02 	.db 150, 45, 33, 2
  538 D1:C768 65 2D 12 02 	.db 101, 45, 18, 2
  539 D1:C76C E6 2D 0C 06 	.db 230, 45, 12, 6
  540 D1:C770 29 17 34 07 	.db 41, 23, 52, 7
  541 D1:C774 EE 17 41 00 	.db 238, 23, 65, 0
  542 D1:C778 36 17 64 00 	.db 54, 23, 100, 0
  543 D1:C77C 06 2F 46 08 	.db 6, 47, 70, 8
  544 D1:C780 -  -  -  -  
  545 D1:C780 -  -  -  -  FG_Data_11:
  546 D1:C780 08 D2 D1 -  	.dl Sprite_Table_0
  547 D1:C783 08 -  -  -  	.db 8
  548 D1:C784 AD 2D 3C 02 	.db 173, 45, 60, 2
  549 D1:C788 DE 2D 5D 02 	.db 222, 45, 93, 2
  550 D1:C78C 80 2D 80 02 	.db 128, 45, 128, 2
  551 D1:C790 E8 2D 10 06 	.db 232, 45, 16, 6
  552 D1:C794 0C 2D 51 06 	.db 12, 45, 81, 6
  553 D1:C798 6E 17 16 07 	.db 110, 23, 22, 7
  554 D1:C79C 79 17 67 00 	.db 121, 23, 103, 0
  555 D1:C7A0 1A 17 3E 00 	.db 26, 23, 62, 0
  556 D1:C7A4 -  -  -  -  
  557 D1:C7A4 -  -  -  -  FG_Data_10:
  558 D1:C7A4 08 D2 D1 -  	.dl Sprite_Table_0
  559 D1:C7A7 09 -  -  -  	.db 9
  560 D1:C7A8 79 2D 3B 01 	.db 121, 45, 59, 1
  561 D1:C7AC 8E 2D 6F 01 	.db 142, 45, 111, 1
  562 D1:C7B0 EF 2D 27 02 	.db 239, 45, 39, 2
  563 D1:C7B4 22 2D 0D 03 	.db 34, 45, 13, 3
  564 D1:C7B8 0E 2D 65 06 	.db 14, 45, 101, 6
  565 D1:C7BC 96 17 5A 07 	.db 150, 23, 90, 7
  566 D1:C7C0 98 17 1B 00 	.db 152, 23, 27, 0
  567 D1:C7C4 29 17 30 05 	.db 41, 23, 48, 5
  568 D1:C7C8 71 2F 14 08 	.db 113, 47, 20, 8
  569 D1:C7CC -  -  -  -  
  570 D1:C7CC -  -  -  -  FG_Data_9:
  571 D1:C7CC 08 D2 D1 -  	.dl Sprite_Table_0
  572 D1:C7CF 09 -  -  -  	.db 9
  573 D1:C7D0 18 2D 56 01 	.db 24, 45, 86, 1
  574 D1:C7D4 26 2D 22 03 	.db 38, 45, 34, 3
  575 D1:C7D8 1E 17 7C 00 	.db 30, 23, 124, 0
  576 D1:C7DC 8D 2D 7B 01 	.db 141, 45, 123, 1
  577 D1:C7E0 74 2D 1C 01 	.db 116, 45, 28, 1
  578 D1:C7E4 E5 2D 4B 01 	.db 229, 45, 75, 1
  579 D1:C7E8 67 2D 4F 06 	.db 103, 45, 79, 6
  580 D1:C7EC A2 17 1B 07 	.db 162, 23, 27, 7
  581 D1:C7F0 AF 17 3F 05 	.db 175, 23, 63, 5
  582 D1:C7F4 -  -  -  -  
  583 D1:C7F4 -  -  -  -  FG_Data_8:
  584 D1:C7F4 08 D2 D1 -  	.dl Sprite_Table_0
  585 D1:C7F7 09 -  -  -  	.db 9
  586 D1:C7F8 41 2D 1B 01 	.db 65, 45, 27, 1
  587 D1:C7FC B7 2D 7C 01 	.db 183, 45, 124, 1
  588 D1:C800 DD 2D 2D 01 	.db 221, 45, 45, 1
  589 D1:C804 36 2D 6C 06 	.db 54, 45, 108, 6
  590 D1:C808 98 2D 15 06 	.db 152, 45, 21, 6
  591 D1:C80C 75 2D 54 03 	.db 117, 45, 84, 3
  592 D1:C810 C0 17 55 07 	.db 192, 23, 85, 7
  593 D1:C814 59 17 78 00 	.db 89, 23, 120, 0
  594 D1:C818 1A 17 46 00 	.db 26, 23, 70, 0
  595 D1:C81C -  -  -  -  
  596 D1:C81C -  -  -  -  FG_Data_7:
  597 D1:C81C 08 D2 D1 -  	.dl Sprite_Table_0
  598 D1:C81F 09 -  -  -  	.db 9
  599 D1:C820 48 2D 6D 01 	.db 72, 45, 109, 1
  600 D1:C824 A3 2D 27 02 	.db 163, 45, 39, 2
  601 D1:C828 E8 2D 4C 02 	.db 232, 45, 76, 2
  602 D1:C82C BA 2D 70 03 	.db 186, 45, 112, 3
  603 D1:C830 1F 2D 2C 03 	.db 31, 45, 44, 3
  604 D1:C834 4D 17 16 04 	.db 77, 23, 22, 4
  605 D1:C838 E8 17 16 07 	.db 232, 23, 22, 7
  606 D1:C83C 75 17 4F 05 	.db 117, 23, 79, 5
  607 D1:C840 05 2F 4C 09 	.db 5, 47, 76, 9
  608 D1:C844 -  -  -  -  
  609 D1:C844 -  -  -  -  FG_Data_6:
  610 D1:C844 08 D2 D1 -  	.dl Sprite_Table_0
  611 D1:C847 08 -  -  -  	.db 8
  612 D1:C848 1D 2D 29 01 	.db 29, 45, 41, 1
  613 D1:C84C 10 2D 64 02 	.db 16, 45, 100, 2
  614 D1:C850 F2 2D 2F 01 	.db 242, 45, 47, 1
  615 D1:C854 DF 2D 60 03 	.db 223, 45, 96, 3
  616 D1:C858 60 2D 4E 03 	.db 96, 45, 78, 3
  617 D1:C85C 90 2D 13 06 	.db 144, 45, 19, 6
  618 D1:C860 54 17 79 04 	.db 84, 23, 121, 4
  619 D1:C864 B8 17 0A 05 	.db 184, 23, 10, 5
  620 D1:C868 -  -  -  -  
  621 D1:C868 -  -  -  -  FG_Data_5:
  622 D1:C868 08 D2 D1 -  	.dl Sprite_Table_0
  623 D1:C86B 09 -  -  -  	.db 9
  624 D1:C86C 03 2D 52 01 	.db 3, 45, 82, 1
  625 D1:C870 58 2D 78 02 	.db 88, 45, 120, 2
  626 D1:C874 B1 2D 09 06 	.db 177, 45, 9, 6
  627 D1:C878 6A 2D 3C 03 	.db 106, 45, 60, 3
  628 D1:C87C B4 17 4D 07 	.db 180, 23, 77, 7
  629 D1:C880 EE 17 42 00 	.db 238, 23, 66, 0
  630 D1:C884 81 17 71 00 	.db 129, 23, 113, 0
  631 D1:C888 20 17 1D 05 	.db 32, 23, 29, 5
  632 D1:C88C 27 2F 32 09 	.db 39, 47, 50, 9
  633 D1:C890 -  -  -  -  
  634 D1:C890 -  -  -  -  FG_Data_4:
  635 D1:C890 08 D2 D1 -  	.dl Sprite_Table_0
  636 D1:C893 0F -  -  -  	.db 15
  637 D1:C894 9B 2D 22 02 	.db 155, 45, 34, 2
  638 D1:C898 95 2D 2D 01 	.db 149, 45, 45, 1
  639 D1:C89C 73 2D 3D 02 	.db 115, 45, 61, 2
  640 D1:C8A0 5D 2D 41 01 	.db 93, 45, 65, 1
  641 D1:C8A4 70 2D 4B 01 	.db 112, 45, 75, 1
  642 D1:C8A8 45 2D 50 01 	.db 69, 45, 80, 1
  643 D1:C8AC 45 2D 50 01 	.db 69, 45, 80, 1
  644 D1:C8B0 61 2D 67 01 	.db 97, 45, 103, 1
  645 D1:C8B4 EF 2D 28 02 	.db 239, 45, 40, 2
  646 D1:C8B8 3A 2D 55 01 	.db 58, 45, 85, 1
  647 D1:C8BC 3B 2D 26 02 	.db 59, 45, 38, 2
  648 D1:C8C0 0A 2D 17 02 	.db 10, 45, 23, 2
  649 D1:C8C4 8B 2D 11 06 	.db 139, 45, 17, 6
  650 D1:C8C8 B4 17 7E 04 	.db 180, 23, 126, 4
  651 D1:C8CC 93 17 46 00 	.db 147, 23, 70, 0
  652 D1:C8D0 -  -  -  -  
  653 D1:C8D0 -  -  -  -  FG_Data_3:
  654 D1:C8D0 08 D2 D1 -  	.dl Sprite_Table_0
  655 D1:C8D3 09 -  -  -  	.db 9
  656 D1:C8D4 52 2D 41 02 	.db 82, 45, 65, 2
  657 D1:C8D8 83 2D 62 02 	.db 131, 45, 98, 2
  658 D1:C8DC 25 2D 85 02 	.db 37, 45, 133, 2
  659 D1:C8E0 8D 2D 15 06 	.db 141, 45, 21, 6
  660 D1:C8E4 13 17 1B 07 	.db 19, 23, 27, 7
  661 D1:C8E8 CE 17 39 07 	.db 206, 23, 57, 7
  662 D1:C8EC DB 17 69 00 	.db 219, 23, 105, 0
  663 D1:C8F0 1E 17 6C 00 	.db 30, 23, 108, 0
  664 D1:C8F4 AB 2F 4B 08 	.db 171, 47, 75, 8
  665 D1:C8F8 -  -  -  -  
  666 D1:C8F8 -  -  -  -  FG_Data_2:
  667 D1:C8F8 08 D2 D1 -  	.dl Sprite_Table_0
  668 D1:C8FB 08 -  -  -  	.db 8
  669 D1:C8FC 1E 2D 40 01 	.db 30, 45, 64, 1
  670 D1:C900 33 2D 74 01 	.db 51, 45, 116, 1
  671 D1:C904 94 2D 2C 02 	.db 148, 45, 44, 2
  672 D1:C908 B1 2D 56 06 	.db 177, 45, 86, 6
  673 D1:C90C 3B 17 5F 07 	.db 59, 23, 95, 7
  674 D1:C910 BF 17 43 00 	.db 191, 23, 67, 0
  675 D1:C914 3D 17 20 00 	.db 61, 23, 32, 0
  676 D1:C918 16 2F 19 08 	.db 22, 47, 25, 8
  677 D1:C91C -  -  -  -  
  678 D1:C91C -  -  -  -  FG_Data_1:
  679 D1:C91C 08 D2 D1 -  	.dl Sprite_Table_0
  680 D1:C91F 08 -  -  -  	.db 8
  681 D1:C920 15 2D 68 02 	.db 21, 45, 104, 2
  682 D1:C924 8A 2D 50 01 	.db 138, 45, 80, 1
  683 D1:C928 C7 2D 12 03 	.db 199, 45, 18, 3
  684 D1:C92C B3 2D 6A 06 	.db 179, 45, 106, 6
  685 D1:C930 0C 2D 54 06 	.db 12, 45, 84, 6
  686 D1:C934 47 17 20 07 	.db 71, 23, 32, 7
  687 D1:C938 CE 17 35 05 	.db 206, 23, 53, 5
  688 D1:C93C 54 17 44 05 	.db 84, 23, 68, 5
  689 D1:C940 -  -  -  -  
  690 D1:C940 -  -  -  -  FG_Data_0:
  691 D1:C940 08 D2 D1 -  	.dl Sprite_Table_0
  692 D1:C943 09 -  -  -  	.db 9
  693 D1:C944 36 17 66 00 	.db 54, 23, 102, 0
  694 D1:C948 87 2D 2B 01 	.db 135, 45, 43, 1
  695 D1:C94C FC 2D 09 02 	.db 252, 45, 9, 2
  696 D1:C950 B2 2D 84 02 	.db 178, 45, 132, 2
  697 D1:C954 81 2D 0E 03 	.db 129, 45, 14, 3
  698 D1:C958 2E 17 07 04 	.db 46, 23, 7, 4
  699 D1:C95C BD 17 61 04 	.db 189, 23, 97, 4
  700 D1:C960 C8 17 1A 05 	.db 200, 23, 26, 5
  701 D1:C964 36 17 47 00 	.db 54, 23, 71, 0
  702 D1:C968 -  -  -  -  
  703 D1:C968 -  -  -  -  
  704 D1:C968 -  -  -  -  
Listing for file "ascent.asm"
  281 D1:C968 -  -  -  -  #include "MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\MG_Data.txt"
    1 D1:C968 -  -  -  -  MG_Data_frame_table:
    2 D1:C968 14 CE D1 -  	.dl MG_Data_0
    3 D1:C96B E0 CD D1 -  	.dl MG_Data_1
    4 D1:C96E B8 CD D1 -  	.dl MG_Data_2
    5 D1:C971 88 CD D1 -  	.dl MG_Data_3
    6 D1:C974 4C CD D1 -  	.dl MG_Data_4
    7 D1:C977 1C CD D1 -  	.dl MG_Data_5
    8 D1:C97A EC CC D1 -  	.dl MG_Data_6
    9 D1:C97D C0 CC D1 -  	.dl MG_Data_7
   10 D1:C980 88 CC D1 -  	.dl MG_Data_8
   11 D1:C983 64 CC D1 -  	.dl MG_Data_9
   12 D1:C986 38 CC D1 -  	.dl MG_Data_10
   13 D1:C989 00 CC D1 -  	.dl MG_Data_11
   14 D1:C98C A0 CB D1 -  	.dl MG_Data_12
   15 D1:C98F 3C CB D1 -  	.dl MG_Data_13
   16 D1:C992 E0 CA D1 -  	.dl MG_Data_14
   17 D1:C995 84 CA D1 -  	.dl MG_Data_15
   18 D1:C998 28 CA D1 -  	.dl MG_Data_16
   19 D1:C99B FC C9 D1 -  	.dl MG_Data_17
   20 D1:C99E D0 C9 D1 -  	.dl MG_Data_18
   21 D1:C9A1 A4 C9 D1 -  	.dl MG_Data_19
   22 D1:C9A4 -  -  -  -  
   23 D1:C9A4 -  -  -  -  
   24 D1:C9A4 -  -  -  -  
   25 D1:C9A4 -  -  -  -  MG_Data_19:
   26 D1:C9A4 08 D2 D1 -  	.dl Sprite_Table_0
   27 D1:C9A7 0A -  -  -  	.db 10
   28 D1:C9A8 9C 0E 5E 0A 	.db 156, 14, 94, 10
   29 D1:C9AC 0C 0E 2A 0B 	.db 12, 14, 42, 11
   30 D1:C9B0 45 0E 82 0A 	.db 69, 14, 130, 10
   31 D1:C9B4 72 0E 26 0A 	.db 114, 14, 38, 10
   32 D1:C9B8 0C 0E 57 0B 	.db 12, 14, 87, 11
   33 D1:C9BC 43 2F 3F 08 	.db 67, 47, 63, 8
   34 D1:C9C0 63 2D 1A 01 	.db 99, 45, 26, 1
   35 D1:C9C4 63 2D 79 02 	.db 99, 45, 121, 2
   36 D1:C9C8 28 17 6C 0E 	.db 40, 23, 108, 14
   37 D1:C9CC 90 17 36 0E 	.db 144, 23, 54, 14
   38 D1:C9D0 -  -  -  -  
   39 D1:C9D0 -  -  -  -  MG_Data_18:
   40 D1:C9D0 08 D2 D1 -  	.dl Sprite_Table_0
   41 D1:C9D3 0A -  -  -  	.db 10
   42 D1:C9D4 02 0E 75 0A 	.db 2, 14, 117, 10
   43 D1:C9D8 89 0E 35 0A 	.db 137, 14, 53, 10
   44 D1:C9DC FE 0E 19 0B 	.db 254, 14, 25, 11
   45 D1:C9E0 8D 0E 6F 0A 	.db 141, 14, 111, 10
   46 D1:C9E4 2E 0E 3D 0B 	.db 46, 14, 61, 11
   47 D1:C9E8 03 2D 1F 02 	.db 3, 45, 31, 2
   48 D1:C9EC BC 2D 67 02 	.db 188, 45, 103, 2
   49 D1:C9F0 AE 2D 2A 02 	.db 174, 45, 42, 2
   50 D1:C9F4 39 2D 5D 03 	.db 57, 45, 93, 3
   51 D1:C9F8 4F 17 3F 0E 	.db 79, 23, 63, 14
   52 D1:C9FC -  -  -  -  
   53 D1:C9FC -  -  -  -  MG_Data_17:
   54 D1:C9FC 08 D2 D1 -  	.dl Sprite_Table_0
   55 D1:C9FF 0A -  -  -  	.db 10
   56 D1:CA00 9F 0E 51 0A 	.db 159, 14, 81, 10
   57 D1:CA04 76 0E 2C 0B 	.db 118, 14, 44, 11
   58 D1:CA08 E7 0E 28 0B 	.db 231, 14, 40, 11
   59 D1:CA0C 6B 0E 64 0A 	.db 107, 14, 100, 10
   60 D1:CA10 CD 2F 78 09 	.db 205, 47, 120, 9
   61 D1:CA14 21 2D 74 01 	.db 33, 45, 116, 1
   62 D1:CA18 8D 2D 30 03 	.db 141, 45, 48, 3
   63 D1:CA1C 5C 17 75 0E 	.db 92, 23, 117, 14
   64 D1:CA20 C7 17 40 0D 	.db 199, 23, 64, 13
   65 D1:CA24 13 17 3E 0D 	.db 19, 23, 62, 13
   66 D1:CA28 -  -  -  -  
   67 D1:CA28 -  -  -  -  MG_Data_16:
   68 D1:CA28 08 D2 D1 -  	.dl Sprite_Table_0
   69 D1:CA2B 16 -  -  -  	.db 22
   70 D1:CA2C 52 0E 1B 0A 	.db 82, 14, 27, 10
   71 D1:CA30 7E 2D 42 03 	.db 126, 45, 66, 3
   72 D1:CA34 5B 2D 16 02 	.db 91, 45, 22, 2
   73 D1:CA38 D1 2F 7A 08 	.db 209, 47, 122, 8
   74 D1:CA3C DF 0E 42 0A 	.db 223, 14, 66, 10
   75 D1:CA40 58 0E 5E 0A 	.db 88, 14, 94, 10
   76 D1:CA44 A4 0E 64 0A 	.db 164, 14, 100, 10
   77 D1:CA48 A8 0E 22 0A 	.db 168, 14, 34, 10
   78 D1:CA4C E4 17 38 0C 	.db 228, 23, 56, 12
   79 D1:CA50 7C 17 6E 0C 	.db 124, 23, 110, 12
   80 D1:CA54 02 2D 2C 01 	.db 2, 45, 44, 1
   81 D1:CA58 B7 2D 7B 01 	.db 183, 45, 123, 1
   82 D1:CA5C B7 2D 1D 02 	.db 183, 45, 29, 2
   83 D1:CA60 10 2D 69 01 	.db 16, 45, 105, 1
   84 D1:CA64 97 2F 42 09 	.db 151, 47, 66, 9
   85 D1:CA68 60 0E 59 0A 	.db 96, 14, 89, 10
   86 D1:CA6C C6 0E 29 0B 	.db 198, 14, 41, 11
   87 D1:CA70 99 0E 85 0B 	.db 153, 14, 133, 11
   88 D1:CA74 60 0E 2C 0A 	.db 96, 14, 44, 10
   89 D1:CA78 F0 0E 61 0B 	.db 240, 14, 97, 11
   90 D1:CA7C D9 17 36 0E 	.db 217, 23, 54, 14
   91 D1:CA80 29 17 64 0F 	.db 41, 23, 100, 15
   92 D1:CA84 -  -  -  -  
   93 D1:CA84 -  -  -  -  MG_Data_15:
   94 D1:CA84 08 D2 D1 -  	.dl Sprite_Table_0
   95 D1:CA87 16 -  -  -  	.db 22
   96 D1:CA88 56 0E 78 0B 	.db 86, 14, 120, 11
   97 D1:CA8C 39 2D 15 03 	.db 57, 45, 21, 3
   98 D1:CA90 C6 2D 57 01 	.db 198, 45, 87, 1
   99 D1:CA94 CB 2F 27 08 	.db 203, 47, 39, 8
  100 D1:CA98 A0 2F 72 08 	.db 160, 47, 114, 8
  101 D1:CA9C 94 0E 8A 0B 	.db 148, 14, 138, 11
  102 D1:CAA0 64 0E 6F 0A 	.db 100, 14, 111, 10
  103 D1:CAA4 F3 0E 2E 0B 	.db 243, 14, 46, 11
  104 D1:CAA8 F3 0E 6A 0B 	.db 243, 14, 106, 11
  105 D1:CAAC 82 0E 53 0A 	.db 130, 14, 83, 10
  106 D1:CAB0 55 0E 20 0A 	.db 85, 14, 32, 10
  107 D1:CAB4 1B 17 42 0F 	.db 27, 23, 66, 15
  108 D1:CAB8 A3 17 41 0C 	.db 163, 23, 65, 12
  109 D1:CABC 8D 2D 60 06 	.db 141, 45, 96, 6
  110 D1:CAC0 57 2D 21 01 	.db 87, 45, 33, 1
  111 D1:CAC4 21 2F 7A 08 	.db 33, 47, 122, 8
  112 D1:CAC8 82 0E 3F 0A 	.db 130, 14, 63, 10
  113 D1:CACC 3B 0E 2A 0A 	.db 59, 14, 42, 10
  114 D1:CAD0 E1 0E 72 0B 	.db 225, 14, 114, 11
  115 D1:CAD4 DD 0E 38 0B 	.db 221, 14, 56, 11
  116 D1:CAD8 5E 17 36 0E 	.db 94, 23, 54, 14
  117 D1:CADC EE 17 82 0C 	.db 238, 23, 130, 12
  118 D1:CAE0 -  -  -  -  
  119 D1:CAE0 -  -  -  -  MG_Data_14:
  120 D1:CAE0 08 D2 D1 -  	.dl Sprite_Table_0
  121 D1:CAE3 16 -  -  -  	.db 22
  122 D1:CAE4 F3 0E 54 0B 	.db 243, 14, 84, 11
  123 D1:CAE8 BB 2D 7B 06 	.db 187, 45, 123, 6
  124 D1:CAEC FF 2D 3C 01 	.db 255, 45, 60, 1
  125 D1:CAF0 78 2D 60 01 	.db 120, 45, 96, 1
  126 D1:CAF4 5A 2F 2A 08 	.db 90, 47, 42, 8
  127 D1:CAF8 C9 0E 1B 0B 	.db 201, 14, 27, 11
  128 D1:CAFC 89 0E 62 0A 	.db 137, 14, 98, 10
  129 D1:CB00 8A 0E 1E 0A 	.db 138, 14, 30, 10
  130 D1:CB04 BB 0E 8A 0B 	.db 187, 14, 138, 11
  131 D1:CB08 CE 0E 4C 0B 	.db 206, 14, 76, 11
  132 D1:CB0C 3B 0E 60 0A 	.db 59, 14, 96, 10
  133 D1:CB10 67 17 40 0F 	.db 103, 23, 64, 15
  134 D1:CB14 B0 17 77 0C 	.db 176, 23, 119, 12
  135 D1:CB18 2D 17 38 0C 	.db 45, 23, 56, 12
  136 D1:CB1C E1 2D 33 06 	.db 225, 45, 51, 6
  137 D1:CB20 75 2D 77 02 	.db 117, 45, 119, 2
  138 D1:CB24 25 2F 7D 09 	.db 37, 47, 125, 9
  139 D1:CB28 33 0E 45 0B 	.db 51, 14, 69, 11
  140 D1:CB2C BF 0E 67 0B 	.db 191, 14, 103, 11
  141 D1:CB30 CA 0E 2E 0A 	.db 202, 14, 46, 10
  142 D1:CB34 97 17 23 0C 	.db 151, 23, 35, 12
  143 D1:CB38 F2 17 65 0E 	.db 242, 23, 101, 14
  144 D1:CB3C -  -  -  -  
  145 D1:CB3C -  -  -  -  MG_Data_13:
  146 D1:CB3C 08 D2 D1 -  	.dl Sprite_Table_0
  147 D1:CB3F 18 -  -  -  	.db 24
  148 D1:CB40 47 0E 6C 0A 	.db 71, 14, 108, 10
  149 D1:CB44 01 17 5A 0E 	.db 1, 23, 90, 14
  150 D1:CB48 1C 2D 1A 06 	.db 28, 45, 26, 6
  151 D1:CB4C D5 2D 4B 03 	.db 213, 45, 75, 3
  152 D1:CB50 E3 2D 1F 02 	.db 227, 45, 31, 2
  153 D1:CB54 01 2D 7B 01 	.db 1, 45, 123, 1
  154 D1:CB58 7E 0E 4D 0A 	.db 126, 14, 77, 10
  155 D1:CB5C 7E 0E 2F 0A 	.db 126, 14, 47, 10
  156 D1:CB60 6B 0E 73 0A 	.db 107, 14, 115, 10
  157 D1:CB64 C9 0E 6F 0A 	.db 201, 14, 111, 10
  158 D1:CB68 D5 0E 48 0B 	.db 213, 14, 72, 11
  159 D1:CB6C D2 0E 2C 0B 	.db 210, 14, 44, 11
  160 D1:CB70 7D 17 67 0D 	.db 125, 23, 103, 13
  161 D1:CB74 42 17 85 0E 	.db 66, 23, 133, 14
  162 D1:CB78 D2 2D 45 06 	.db 210, 45, 69, 6
  163 D1:CB7C AF 2D 18 01 	.db 175, 45, 24, 1
  164 D1:CB80 1A 2D 5A 02 	.db 26, 45, 90, 2
  165 D1:CB84 1F 2F 2A 09 	.db 31, 47, 42, 9
  166 D1:CB88 AC 0E 61 0B 	.db 172, 14, 97, 11
  167 D1:CB8C 47 0E 30 0A 	.db 71, 14, 48, 10
  168 D1:CB90 F8 0E 67 0B 	.db 248, 14, 103, 11
  169 D1:CB94 FC 0E 25 0B 	.db 252, 14, 37, 11
  170 D1:CB98 B6 17 79 0C 	.db 182, 23, 121, 12
  171 D1:CB9C FE 17 29 0F 	.db 254, 23, 41, 15
  172 D1:CBA0 -  -  -  -  
  173 D1:CBA0 -  -  -  -  MG_Data_12:
  174 D1:CBA0 08 D2 D1 -  	.dl Sprite_Table_0
  175 D1:CBA3 17 -  -  -  	.db 23
  176 D1:CBA4 22 0E 4E 0A 	.db 34, 14, 78, 10
  177 D1:CBA8 63 2D 5D 03 	.db 99, 45, 93, 3
  178 D1:CBAC D3 2F 22 08 	.db 211, 47, 34, 8
  179 D1:CBB0 AF 0E 55 0B 	.db 175, 14, 85, 11
  180 D1:CBB4 94 0E 84 0B 	.db 148, 14, 132, 11
  181 D1:CBB8 76 0E 2D 0A 	.db 118, 14, 45, 10
  182 D1:CBBC EB 0E 73 0A 	.db 235, 14, 115, 10
  183 D1:CBC0 F4 0E 3B 0B 	.db 244, 14, 59, 11
  184 D1:CBC4 74 0E 59 0B 	.db 116, 14, 89, 11
  185 D1:CBC8 B2 17 38 0C 	.db 178, 23, 56, 12
  186 D1:CBCC 3B 17 3F 0E 	.db 59, 23, 63, 14
  187 D1:CBD0 46 17 67 0C 	.db 70, 23, 103, 12
  188 D1:CBD4 0F 2D 7D 03 	.db 15, 45, 125, 3
  189 D1:CBD8 53 2D 3F 02 	.db 83, 45, 63, 2
  190 D1:CBDC F4 2F 75 09 	.db 244, 47, 117, 9
  191 D1:CBE0 E8 0E 8C 0A 	.db 232, 14, 140, 10
  192 D1:CBE4 1D 0E 1D 0A 	.db 29, 14, 29, 10
  193 D1:CBE8 0F 0E 8C 0A 	.db 15, 14, 140, 10
  194 D1:CBEC B8 0E 72 0B 	.db 184, 14, 114, 11
  195 D1:CBF0 D6 0E 56 0B 	.db 214, 14, 86, 11
  196 D1:CBF4 A9 0E 23 0B 	.db 169, 14, 35, 11
  197 D1:CBF8 8D 2D 18 06 	.db 141, 45, 24, 6
  198 D1:CBFC 3B 17 17 0F 	.db 59, 23, 23, 15
  199 D1:CC00 -  -  -  -  
  200 D1:CC00 -  -  -  -  MG_Data_11:
  201 D1:CC00 08 D2 D1 -  	.dl Sprite_Table_0
  202 D1:CC03 0D -  -  -  	.db 13
  203 D1:CC04 26 0E 2E 0A 	.db 38, 14, 46, 10
  204 D1:CC08 8F 0E 63 0B 	.db 143, 14, 99, 11
  205 D1:CC0C DE 0E 21 0B 	.db 222, 14, 33, 11
  206 D1:CC10 29 0E 4A 0A 	.db 41, 14, 74, 10
  207 D1:CC14 1D 0E 72 0B 	.db 29, 14, 114, 11
  208 D1:CC18 DD 0E 65 0B 	.db 221, 14, 101, 11
  209 D1:CC1C AE 2F 2D 09 	.db 174, 47, 45, 9
  210 D1:CC20 37 2D 21 01 	.db 55, 45, 33, 1
  211 D1:CC24 CC 2D 63 02 	.db 204, 45, 99, 2
  212 D1:CC28 29 2D 4E 06 	.db 41, 45, 78, 6
  213 D1:CC2C 0A 17 7C 0E 	.db 10, 23, 124, 14
  214 D1:CC30 EB 17 26 0E 	.db 235, 23, 38, 14
  215 D1:CC34 52 17 2C 0D 	.db 82, 23, 44, 13
  216 D1:CC38 -  -  -  -  
  217 D1:CC38 -  -  -  -  MG_Data_10:
  218 D1:CC38 08 D2 D1 -  	.dl Sprite_Table_0
  219 D1:CC3B 0A -  -  -  	.db 10
  220 D1:CC3C 48 0E 3D 0A 	.db 72, 14, 61, 10
  221 D1:CC40 BF 0E 76 0B 	.db 191, 14, 118, 11
  222 D1:CC44 D2 0E 32 0B 	.db 210, 14, 50, 11
  223 D1:CC48 3F 0E 76 0B 	.db 63, 14, 118, 11
  224 D1:CC4C 03 0E 57 0A 	.db 3, 14, 87, 10
  225 D1:CC50 D2 0E 50 0B 	.db 210, 14, 80, 11
  226 D1:CC54 27 2F 25 09 	.db 39, 47, 37, 9
  227 D1:CC58 55 2D 7E 02 	.db 85, 45, 126, 2
  228 D1:CC5C 70 2D 1C 03 	.db 112, 45, 28, 3
  229 D1:CC60 55 17 5C 0C 	.db 85, 23, 92, 12
  230 D1:CC64 -  -  -  -  
  231 D1:CC64 -  -  -  -  MG_Data_9:
  232 D1:CC64 08 D2 D1 -  	.dl Sprite_Table_0
  233 D1:CC67 08 -  -  -  	.db 8
  234 D1:CC68 24 0E 59 0B 	.db 36, 14, 89, 11
  235 D1:CC6C 18 17 30 0C 	.db 24, 23, 48, 12
  236 D1:CC70 C8 0E 5B 0A 	.db 200, 14, 91, 10
  237 D1:CC74 CA 0E 30 0B 	.db 202, 14, 48, 11
  238 D1:CC78 E8 0E 86 0A 	.db 232, 14, 134, 10
  239 D1:CC7C B7 2D 60 06 	.db 183, 45, 96, 6
  240 D1:CC80 8F 17 41 0C 	.db 143, 23, 65, 12
  241 D1:CC84 8F 17 1A 0D 	.db 143, 23, 26, 13
  242 D1:CC88 -  -  -  -  
  243 D1:CC88 -  -  -  -  MG_Data_8:
  244 D1:CC88 08 D2 D1 -  	.dl Sprite_Table_0
  245 D1:CC8B 0D -  -  -  	.db 13
  246 D1:CC8C 11 0E 30 0B 	.db 17, 14, 48, 11
  247 D1:CC90 86 0E 13 0A 	.db 134, 14, 19, 10
  248 D1:CC94 15 0E 6A 0B 	.db 21, 14, 106, 11
  249 D1:CC98 94 0E 24 0A 	.db 148, 14, 36, 10
  250 D1:CC9C CD 0E 7D 0B 	.db 205, 14, 125, 11
  251 D1:CCA0 FA 0E 21 0B 	.db 250, 14, 33, 11
  252 D1:CCA4 94 0E 51 0A 	.db 148, 14, 81, 10
  253 D1:CCA8 CB 2F 3A 09 	.db 203, 47, 58, 9
  254 D1:CCAC 44 2D 61 01 	.db 68, 45, 97, 1
  255 D1:CCB0 EB 2D 15 02 	.db 235, 45, 21, 2
  256 D1:CCB4 EB 2D 73 01 	.db 235, 45, 115, 1
  257 D1:CCB8 36 2D 24 01 	.db 54, 45, 36, 1
  258 D1:CCBC B0 17 66 0C 	.db 176, 23, 102, 12
  259 D1:CCC0 -  -  -  -  
  260 D1:CCC0 -  -  -  -  MG_Data_7:
  261 D1:CCC0 08 D2 D1 -  	.dl Sprite_Table_0
  262 D1:CCC3 0A -  -  -  	.db 10
  263 D1:CCC4 27 0E 4C 0B 	.db 39, 14, 76, 11
  264 D1:CCC8 8A 0E 70 0B 	.db 138, 14, 112, 11
  265 D1:CCCC 6F 0E 22 0A 	.db 111, 14, 34, 10
  266 D1:CCD0 B6 0E 37 0A 	.db 182, 14, 55, 10
  267 D1:CCD4 55 2F 72 08 	.db 85, 47, 114, 8
  268 D1:CCD8 8B 2D 19 01 	.db 139, 45, 25, 1
  269 D1:CCDC C1 2D 58 06 	.db 193, 45, 88, 6
  270 D1:CCE0 15 2D 2B 06 	.db 21, 45, 43, 6
  271 D1:CCE4 D7 17 39 0C 	.db 215, 23, 57, 12
  272 D1:CCE8 4F 17 3A 0F 	.db 79, 23, 58, 15
  273 D1:CCEC -  -  -  -  
  274 D1:CCEC -  -  -  -  MG_Data_6:
  275 D1:CCEC 08 D2 D1 -  	.dl Sprite_Table_0
  276 D1:CCEF 0B -  -  -  	.db 11
  277 D1:CCF0 30 0E 1D 0B 	.db 48, 14, 29, 11
  278 D1:CCF4 FE 0E 26 0A 	.db 254, 14, 38, 10
  279 D1:CCF8 F3 0E 5F 0B 	.db 243, 14, 95, 11
  280 D1:CCFC 2C 0E 5F 0B 	.db 44, 14, 95, 11
  281 D1:CD00 67 0E 3D 0B 	.db 103, 14, 61, 11
  282 D1:CD04 59 2F 75 09 	.db 89, 47, 117, 9
  283 D1:CD08 A9 2D 6F 02 	.db 169, 45, 111, 2
  284 D1:CD0C 06 2D 3D 06 	.db 6, 45, 61, 6
  285 D1:CD10 61 17 30 0C 	.db 97, 23, 48, 12
  286 D1:CD14 E4 17 6F 0C 	.db 228, 23, 111, 12
  287 D1:CD18 9B 17 38 0F 	.db 155, 23, 56, 15
  288 D1:CD1C -  -  -  -  
  289 D1:CD1C -  -  -  -  MG_Data_5:
  290 D1:CD1C 08 D2 D1 -  	.dl Sprite_Table_0
  291 D1:CD1F 0B -  -  -  	.db 11
  292 D1:CD20 0A 0E 4E 0B 	.db 10, 14, 78, 11
  293 D1:CD24 7B 0E 64 0A 	.db 123, 14, 100, 10
  294 D1:CD28 7B 0E 28 0A 	.db 123, 14, 40, 10
  295 D1:CD2C 1C 0E 84 0A 	.db 28, 14, 132, 10
  296 D1:CD30 E0 0E 59 0B 	.db 224, 14, 89, 11
  297 D1:CD34 28 2F 6D 09 	.db 40, 47, 109, 9
  298 D1:CD38 53 2F 22 09 	.db 83, 47, 34, 9
  299 D1:CD3C 4E 2D 52 02 	.db 78, 45, 82, 2
  300 D1:CD40 E3 2D 10 01 	.db 227, 45, 16, 1
  301 D1:CD44 76 17 7D 0E 	.db 118, 23, 125, 14
  302 D1:CD48 B1 17 5F 0D 	.db 177, 23, 95, 13
  303 D1:CD4C -  -  -  -  
  304 D1:CD4C -  -  -  -  MG_Data_4:
  305 D1:CD4C 08 D2 D1 -  	.dl Sprite_Table_0
  306 D1:CD4F 0E -  -  -  	.db 14
  307 D1:CD50 56 0E 46 0A 	.db 86, 14, 70, 10
  308 D1:CD54 DD 0E 1B 0B 	.db 221, 14, 27, 11
  309 D1:CD58 EC 0E 6A 0B 	.db 236, 14, 106, 11
  310 D1:CD5C 43 0E 84 0A 	.db 67, 14, 132, 10
  311 D1:CD60 12 0E 19 0B 	.db 18, 14, 25, 11
  312 D1:CD64 11 0E 5D 0B 	.db 17, 14, 93, 11
  313 D1:CD68 51 0E 15 0A 	.db 81, 14, 21, 10
  314 D1:CD6C 00 2D 5B 02 	.db 0, 45, 91, 2
  315 D1:CD70 87 2D 37 02 	.db 135, 45, 55, 2
  316 D1:CD74 43 2D 75 03 	.db 67, 45, 117, 3
  317 D1:CD78 C1 2D 10 06 	.db 193, 45, 16, 6
  318 D1:CD7C 1F 17 1E 0E 	.db 31, 23, 30, 14
  319 D1:CD80 7A 17 5F 0C 	.db 122, 23, 95, 12
  320 D1:CD84 E6 17 30 0C 	.db 230, 23, 48, 12
  321 D1:CD88 -  -  -  -  
  322 D1:CD88 -  -  -  -  MG_Data_3:
  323 D1:CD88 08 D2 D1 -  	.dl Sprite_Table_0
  324 D1:CD8B 0B -  -  -  	.db 11
  325 D1:CD8C 5A 0E 26 0A 	.db 90, 14, 38, 10
  326 D1:CD90 C3 0E 5B 0B 	.db 195, 14, 91, 11
  327 D1:CD94 5D 0E 42 0A 	.db 93, 14, 66, 10
  328 D1:CD98 51 0E 6A 0B 	.db 81, 14, 106, 11
  329 D1:CD9C 06 0E 2A 0B 	.db 6, 14, 42, 11
  330 D1:CDA0 06 0E 48 0B 	.db 6, 14, 72, 11
  331 D1:CDA4 E2 2F 25 09 	.db 226, 47, 37, 9
  332 D1:CDA8 6B 2D 19 01 	.db 107, 45, 25, 1
  333 D1:CDAC 5D 2D 46 06 	.db 93, 45, 70, 6
  334 D1:CDB0 3E 17 74 0E 	.db 62, 23, 116, 14
  335 D1:CDB4 86 17 24 0D 	.db 134, 23, 36, 13
  336 D1:CDB8 -  -  -  -  
  337 D1:CDB8 -  -  -  -  MG_Data_2:
  338 D1:CDB8 08 D2 D1 -  	.dl Sprite_Table_0
  339 D1:CDBB 09 -  -  -  	.db 9
  340 D1:CDBC 7C 0E 35 0A 	.db 124, 14, 53, 10
  341 D1:CDC0 F3 0E 6E 0B 	.db 243, 14, 110, 11
  342 D1:CDC4 73 0E 6E 0B 	.db 115, 14, 110, 11
  343 D1:CDC8 1C 0E 7E 0A 	.db 28, 14, 126, 10
  344 D1:CDCC 37 0E 4F 0A 	.db 55, 14, 79, 10
  345 D1:CDD0 5B 2F 1D 09 	.db 91, 47, 29, 9
  346 D1:CDD4 89 2D 76 02 	.db 137, 45, 118, 2
  347 D1:CDD8 A4 2D 14 03 	.db 164, 45, 20, 3
  348 D1:CDDC 89 17 54 0C 	.db 137, 23, 84, 12
  349 D1:CDE0 -  -  -  -  
  350 D1:CDE0 -  -  -  -  MG_Data_1:
  351 D1:CDE0 08 D2 D1 -  	.dl Sprite_Table_0
  352 D1:CDE3 0C -  -  -  	.db 12
  353 D1:CDE4 4F 0E 31 0A 	.db 79, 14, 49, 10
  354 D1:CDE8 FC 0E 53 0A 	.db 252, 14, 83, 10
  355 D1:CDEC FE 0E 28 0B 	.db 254, 14, 40, 11
  356 D1:CDF0 77 0E 6A 0B 	.db 119, 14, 106, 11
  357 D1:CDF4 95 0E 20 0A 	.db 149, 14, 32, 10
  358 D1:CDF8 3F 2F 52 08 	.db 63, 47, 82, 8
  359 D1:CDFC 7F 2D 3B 01 	.db 127, 45, 59, 1
  360 D1:CE00 EB 2D 58 06 	.db 235, 45, 88, 6
  361 D1:CE04 91 17 75 0D 	.db 145, 23, 117, 13
  362 D1:CE08 37 17 81 0C 	.db 55, 23, 129, 12
  363 D1:CE0C C3 17 39 0C 	.db 195, 23, 57, 12
  364 D1:CE10 C3 17 12 0D 	.db 195, 23, 18, 13
  365 D1:CE14 -  -  -  -  
  366 D1:CE14 -  -  -  -  MG_Data_0:
  367 D1:CE14 08 D2 D1 -  	.dl Sprite_Table_0
  368 D1:CE17 0A -  -  -  	.db 10
  369 D1:CE18 5E 0E 15 0A 	.db 94, 14, 21, 10
  370 D1:CE1C 80 0E 40 0A 	.db 128, 14, 64, 10
  371 D1:CE20 AF 0E 64 0A 	.db 175, 14, 100, 10
  372 D1:CE24 46 0E 75 0A 	.db 70, 14, 117, 10
  373 D1:CE28 37 0E 48 0B 	.db 55, 14, 72, 11
  374 D1:CE2C 95 0E 24 0A 	.db 149, 14, 36, 10
  375 D1:CE30 9E 2D 6E 03 	.db 158, 45, 110, 3
  376 D1:CE34 F8 2D 13 02 	.db 248, 45, 19, 2
  377 D1:CE38 3A 17 22 0C 	.db 58, 23, 34, 12
  378 D1:CE3C D8 17 3F 0D 	.db 216, 23, 63, 13
  379 D1:CE40 -  -  -  -  
  380 D1:CE40 -  -  -  -  
  381 D1:CE40 -  -  -  -  
Listing for file "ascent.asm"
  282 D1:CE40 -  -  -  -  #include "BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BG_Data.txt"
    1 D1:CE40 -  -  -  -  BG_Data_frame_table:
    2 D1:CE40 4B D1 D1 -  	.dl BG_Data_0
    3 D1:CE43 13 D1 D1 -  	.dl BG_Data_1
    4 D1:CE46 CB D0 D1 -  	.dl BG_Data_2
    5 D1:CE49 7B D0 D1 -  	.dl BG_Data_3
    6 D1:CE4C 2B D0 D1 -  	.dl BG_Data_4
    7 D1:CE4F DB CF D1 -  	.dl BG_Data_5
    8 D1:CE52 8B CF D1 -  	.dl BG_Data_6
    9 D1:CE55 3B CF D1 -  	.dl BG_Data_7
   10 D1:CE58 E3 CE D1 -  	.dl BG_Data_8
   11 D1:CE5B 8B CE D1 -  	.dl BG_Data_9
   12 D1:CE5E 7F CE D1 -  	.dl BG_Data_10
   13 D1:CE61 77 CE D1 -  	.dl BG_Data_11
   14 D1:CE64 67 CE D1 -  	.dl BG_Data_12
   15 D1:CE67 -  -  -  -  
   16 D1:CE67 -  -  -  -  
   17 D1:CE67 -  -  -  -  
   18 D1:CE67 -  -  -  -  BG_Data_12:
   19 D1:CE67 38 D2 D1 -  	.dl Sprite_Table_1
   20 D1:CE6A 03 -  -  -  	.db 3
   21 D1:CE6B D0 2D 2F 09 	.db 208, 45, 47, 9
   22 D1:CE6F 5E 2D 2F 09 	.db 94, 45, 47, 9
   23 D1:CE73 D0 2D 2F 09 	.db 208, 45, 47, 9
   24 D1:CE77 -  -  -  -  
   25 D1:CE77 -  -  -  -  BG_Data_11:
   26 D1:CE77 38 D2 D1 -  	.dl Sprite_Table_1
   27 D1:CE7A 01 -  -  -  	.db 1
   28 D1:CE7B D3 2D 2F 09 	.db 211, 45, 47, 9
   29 D1:CE7F -  -  -  -  
   30 D1:CE7F -  -  -  -  BG_Data_10:
   31 D1:CE7F 38 D2 D1 -  	.dl Sprite_Table_1
   32 D1:CE82 02 -  -  -  	.db 2
   33 D1:CE83 6B 2D 2F 09 	.db 107, 45, 47, 9
   34 D1:CE87 FE 2D 2F 09 	.db 254, 45, 47, 9
   35 D1:CE8B -  -  -  -  
   36 D1:CE8B -  -  -  -  BG_Data_9:
   37 D1:CE8B 38 D2 D1 -  	.dl Sprite_Table_1
   38 D1:CE8E 15 -  -  -  	.db 21
   39 D1:CE8F 4A 2D 49 09 	.db 74, 45, 73, 9
   40 D1:CE93 A3 0E 86 0C 	.db 163, 14, 134, 12
   41 D1:CE97 C1 0E 88 0C 	.db 193, 14, 136, 12
   42 D1:CE9B C2 0E 92 0E 	.db 194, 14, 146, 14
   43 D1:CE9F D6 0E 93 0E 	.db 214, 14, 147, 14
   44 D1:CEA3 D8 0E 88 0C 	.db 216, 14, 136, 12
   45 D1:CEA7 ED 0E 89 0C 	.db 237, 14, 137, 12
   46 D1:CEAB F0 0E 93 0C 	.db 240, 14, 147, 12
   47 D1:CEAF 8C 0E 8E 0C 	.db 140, 14, 142, 12
   48 D1:CEB3 A6 0E 92 0E 	.db 166, 14, 146, 14
   49 D1:CEB7 43 2D 77 09 	.db 67, 45, 119, 9
   50 D1:CEBB 48 2D 55 00 	.db 72, 45, 85, 0
   51 D1:CEBF 56 2D 3C 09 	.db 86, 45, 60, 9
   52 D1:CEC3 52 2D 1F 09 	.db 82, 45, 31, 9
   53 D1:CEC7 54 2D 12 00 	.db 84, 45, 18, 0
   54 D1:CECB 4A 2D 49 09 	.db 74, 45, 73, 9
   55 D1:CECF 43 2D 80 00 	.db 67, 45, 128, 0
   56 D1:CED3 23 1F 25 06 	.db 35, 31, 37, 6
   57 D1:CED7 12 1F 22 04 	.db 18, 31, 34, 4
   58 D1:CEDB 49 2D 66 00 	.db 73, 45, 102, 0
   59 D1:CEDF 8C 0E 8E 0C 	.db 140, 14, 142, 12
   60 D1:CEE3 -  -  -  -  
   61 D1:CEE3 -  -  -  -  BG_Data_8:
   62 D1:CEE3 38 D2 D1 -  	.dl Sprite_Table_1
   63 D1:CEE6 15 -  -  -  	.db 21
   64 D1:CEE7 34 2D 38 01 	.db 52, 45, 56, 1
   65 D1:CEEB CD 0E 8A 0E 	.db 205, 14, 138, 14
   66 D1:CEEF D1 0E 93 0C 	.db 209, 14, 147, 12
   67 D1:CEF3 E4 0E 94 0C 	.db 228, 14, 148, 12
   68 D1:CEF7 E2 0E 89 0C 	.db 226, 14, 137, 12
   69 D1:CEFB F9 0E 8A 0E 	.db 249, 14, 138, 14
   70 D1:CEFF FA 0E 93 0C 	.db 250, 14, 147, 12
   71 D1:CF03 02 1F 44 07 	.db 2, 31, 68, 7
   72 D1:CF07 6F 1F 3A 0D 	.db 111, 31, 58, 13
   73 D1:CF0B BB 0E 8A 0E 	.db 187, 14, 138, 14
   74 D1:CF0F D3 1F 6D 06 	.db 211, 31, 109, 6
   75 D1:CF13 0F 1F 13 06 	.db 15, 31, 19, 6
   76 D1:CF17 2A 1F 18 03 	.db 42, 31, 24, 3
   77 D1:CF1B 8D 1F 57 04 	.db 141, 31, 87, 4
   78 D1:CF1F 08 1F 7F 04 	.db 8, 31, 127, 4
   79 D1:CF23 AE 2D 1F 00 	.db 174, 45, 31, 0
   80 D1:CF27 2D 2D 5C 09 	.db 45, 45, 92, 9
   81 D1:CF2B FA 2D 6C 02 	.db 250, 45, 108, 2
   82 D1:CF2F FA 2D 3E 02 	.db 250, 45, 62, 2
   83 D1:CF33 19 1F 87 0D 	.db 25, 31, 135, 13
   84 D1:CF37 B6 0E 93 0E 	.db 182, 14, 147, 14
   85 D1:CF3B -  -  -  -  
   86 D1:CF3B -  -  -  -  BG_Data_7:
   87 D1:CF3B 38 D2 D1 -  	.dl Sprite_Table_1
   88 D1:CF3E 13 -  -  -  	.db 19
   89 D1:CF3F 08 2D 55 02 	.db 8, 45, 85, 2
   90 D1:CF43 D5 0E 95 0C 	.db 213, 14, 149, 12
   91 D1:CF47 E5 0E 95 0C 	.db 229, 14, 149, 12
   92 D1:CF4B E6 0E 8C 0C 	.db 230, 14, 140, 12
   93 D1:CF4F FA 0E 8F 0E 	.db 250, 14, 143, 14
   94 D1:CF53 F9 0E 96 0C 	.db 249, 14, 150, 12
   95 D1:CF57 A8 1F 14 07 	.db 168, 31, 20, 7
   96 D1:CF5B AF 1F 4D 06 	.db 175, 31, 77, 6
   97 D1:CF5F D0 0E 8A 0C 	.db 208, 14, 138, 12
   98 D1:CF63 3E 1F 2B 06 	.db 62, 31, 43, 6
   99 D1:CF67 0D 1F 88 03 	.db 13, 31, 136, 3
  100 D1:CF6B 4A 1F 38 03 	.db 74, 31, 56, 3
  101 D1:CF6F 2C 1F 62 03 	.db 44, 31, 98, 3
  102 D1:CF73 37 1F 0F 04 	.db 55, 31, 15, 4
  103 D1:CF77 A8 2D 4B 09 	.db 168, 45, 75, 9
  104 D1:CF7B D5 2D 7F 02 	.db 213, 45, 127, 2
  105 D1:CF7F CA 2D 23 01 	.db 202, 45, 35, 1
  106 D1:CF83 6D 1F 73 0F 	.db 109, 31, 115, 15
  107 D1:CF87 BB 0E 91 0E 	.db 187, 14, 145, 14
  108 D1:CF8B -  -  -  -  
  109 D1:CF8B -  -  -  -  BG_Data_6:
  110 D1:CF8B 38 D2 D1 -  	.dl Sprite_Table_1
  111 D1:CF8E 13 -  -  -  	.db 19
  112 D1:CF8F 0D 2D 22 02 	.db 13, 45, 34, 2
  113 D1:CF93 E1 0E 93 0C 	.db 225, 14, 147, 12
  114 D1:CF97 E0 0E 8B 0C 	.db 224, 14, 139, 12
  115 D1:CF9B F5 0E 8C 0E 	.db 245, 14, 140, 14
  116 D1:CF9F F8 0E 95 0C 	.db 248, 14, 149, 12
  117 D1:CFA3 8D 1F 2A 05 	.db 141, 31, 42, 5
  118 D1:CFA7 00 1F 77 05 	.db 0, 31, 119, 5
  119 D1:CFAB FB 1F 72 06 	.db 251, 31, 114, 6
  120 D1:CFAF CF 0E 92 0C 	.db 207, 14, 146, 12
  121 D1:CFB3 94 1F 54 0D 	.db 148, 31, 84, 13
  122 D1:CFB7 A2 1F 54 0A 	.db 162, 31, 84, 10
  123 D1:CFBB 40 1F 24 04 	.db 64, 31, 36, 4
  124 D1:CFBF 1A 1F 79 03 	.db 26, 31, 121, 3
  125 D1:CFC3 80 2D 32 00 	.db 128, 45, 50, 0
  126 D1:CFC7 9E 2D 80 09 	.db 158, 45, 128, 9
  127 D1:CFCB F1 2D 18 01 	.db 241, 45, 24, 1
  128 D1:CFCF 2B 2D 4F 01 	.db 43, 45, 79, 1
  129 D1:CFD3 88 1F 0F 0A 	.db 136, 31, 15, 10
  130 D1:CFD7 CD 0E 8A 0C 	.db 205, 14, 138, 12
  131 D1:CFDB -  -  -  -  
  132 D1:CFDB -  -  -  -  BG_Data_5:
  133 D1:CFDB 38 D2 D1 -  	.dl Sprite_Table_1
  134 D1:CFDE 13 -  -  -  	.db 19
  135 D1:CFDF 1E 2D 46 02 	.db 30, 45, 70, 2
  136 D1:CFE3 D6 0E 8B 0E 	.db 214, 14, 139, 14
  137 D1:CFE7 ED 0E 8B 0C 	.db 237, 14, 139, 12
  138 D1:CFEB F1 0E 96 0C 	.db 241, 14, 150, 12
  139 D1:CFEF 59 2F 42 0B 	.db 89, 47, 66, 11
  140 D1:CFF3 BD 2F 40 08 	.db 189, 47, 64, 8
  141 D1:CFF7 5F 1F 25 05 	.db 95, 31, 37, 5
  142 D1:CFFB 19 1F 6A 05 	.db 25, 31, 106, 5
  143 D1:CFFF D7 0E 95 0E 	.db 215, 14, 149, 14
  144 D1:D003 E7 1F 32 0D 	.db 231, 31, 50, 13
  145 D1:D007 DE 1F 67 0A 	.db 222, 31, 103, 10
  146 D1:D00B 90 1F 1F 04 	.db 144, 31, 31, 4
  147 D1:D00F 5C 1F 18 03 	.db 92, 31, 24, 3
  148 D1:D013 9C 2D 5A 00 	.db 156, 45, 90, 0
  149 D1:D017 07 2D 0C 00 	.db 7, 45, 12, 0
  150 D1:D01B 94 2D 34 09 	.db 148, 45, 52, 9
  151 D1:D01F 47 2D 75 01 	.db 71, 45, 117, 1
  152 D1:D023 97 1F 64 0D 	.db 151, 31, 100, 13
  153 D1:D027 BC 0E 8F 0E 	.db 188, 14, 143, 14
  154 D1:D02B -  -  -  -  
  155 D1:D02B -  -  -  -  BG_Data_4:
  156 D1:D02B 38 D2 D1 -  	.dl Sprite_Table_1
  157 D1:D02E 13 -  -  -  	.db 19
  158 D1:D02F 17 2D 4D 01 	.db 23, 45, 77, 1
  159 D1:D033 FB 0E 8A 0C 	.db 251, 14, 138, 12
  160 D1:D037 FA 0E 95 0E 	.db 250, 14, 149, 14
  161 D1:D03B D9 2F 77 0B 	.db 217, 47, 119, 11
  162 D1:D03F 48 1F 2C 07 	.db 72, 31, 44, 7
  163 D1:D043 D3 1F 2D 06 	.db 211, 31, 45, 6
  164 D1:D047 45 1F 5C 0D 	.db 69, 31, 92, 13
  165 D1:D04B CD 1F 54 0F 	.db 205, 31, 84, 15
  166 D1:D04F E3 0E 8A 0E 	.db 227, 14, 138, 14
  167 D1:D053 0C 1F 07 0A 	.db 12, 31, 7, 10
  168 D1:D057 8F 1F 74 0A 	.db 143, 31, 116, 10
  169 D1:D05B 0E 1F 86 03 	.db 14, 31, 134, 3
  170 D1:D05F C3 1F 3B 04 	.db 195, 31, 59, 4
  171 D1:D063 C9 1F 7F 04 	.db 201, 31, 127, 4
  172 D1:D067 8B 1F 4C 04 	.db 139, 31, 76, 4
  173 D1:D06B 5D 2D 64 09 	.db 93, 45, 100, 9
  174 D1:D06F 67 2D 20 02 	.db 103, 45, 32, 2
  175 D1:D073 A2 1F 09 0F 	.db 162, 31, 9, 15
  176 D1:D077 E6 0E 93 0C 	.db 230, 14, 147, 12
  177 D1:D07B -  -  -  -  
  178 D1:D07B -  -  -  -  BG_Data_3:
  179 D1:D07B 38 D2 D1 -  	.dl Sprite_Table_1
  180 D1:D07E 13 -  -  -  	.db 19
  181 D1:D07F 37 2D 42 02 	.db 55, 45, 66, 2
  182 D1:D083 F9 0E 95 0E 	.db 249, 14, 149, 14
  183 D1:D087 E5 2F 37 0B 	.db 229, 47, 55, 11
  184 D1:D08B 41 2F 43 08 	.db 65, 47, 67, 8
  185 D1:D08F 6E 1F 14 07 	.db 110, 31, 20, 7
  186 D1:D093 17 1F 22 05 	.db 23, 31, 34, 5
  187 D1:D097 47 1F 72 05 	.db 71, 31, 114, 5
  188 D1:D09B DB 1F 7E 07 	.db 219, 31, 126, 7
  189 D1:D09F F9 0E 8B 0E 	.db 249, 14, 139, 14
  190 D1:D0A3 F5 1F 1D 06 	.db 245, 31, 29, 6
  191 D1:D0A7 2D 1F 16 0F 	.db 45, 31, 22, 15
  192 D1:D0AB 7C 1F 7B 0F 	.db 124, 31, 123, 15
  193 D1:D0AF AF 1F 6E 04 	.db 175, 31, 110, 4
  194 D1:D0B3 8C 2D 51 09 	.db 140, 45, 81, 9
  195 D1:D0B7 D4 2D 1A 09 	.db 212, 45, 26, 9
  196 D1:D0BB 87 2D 29 01 	.db 135, 45, 41, 1
  197 D1:D0BF 56 2D 66 01 	.db 86, 45, 102, 1
  198 D1:D0C3 82 1F 59 0D 	.db 130, 31, 89, 13
  199 D1:D0C7 F9 0E 7F 0E 	.db 249, 14, 127, 14
  200 D1:D0CB -  -  -  -  
  201 D1:D0CB -  -  -  -  BG_Data_2:
  202 D1:D0CB 38 D2 D1 -  	.dl Sprite_Table_1
  203 D1:D0CE 11 -  -  -  	.db 17
  204 D1:D0CF 7D 2D 20 02 	.db 125, 45, 32, 2
  205 D1:D0D3 9D 2F 7D 08 	.db 157, 47, 125, 8
  206 D1:D0D7 91 2F 40 08 	.db 145, 47, 64, 8
  207 D1:D0DB 56 1F 67 05 	.db 86, 31, 103, 5
  208 D1:D0DF 80 1F 1C 05 	.db 128, 31, 28, 5
  209 D1:D0E3 F1 1F 6C 0D 	.db 241, 31, 108, 13
  210 D1:D0E7 2D 1F 37 0D 	.db 45, 31, 55, 13
  211 D1:D0EB FB 0E 95 0C 	.db 251, 14, 149, 12
  212 D1:D0EF 34 1F 19 0A 	.db 52, 31, 25, 10
  213 D1:D0F3 CF 1F 3B 04 	.db 207, 31, 59, 4
  214 D1:D0F7 11 1F 59 04 	.db 17, 31, 89, 4
  215 D1:D0FB 04 2D 23 00 	.db 4, 45, 35, 0
  216 D1:D0FF E1 2D 14 09 	.db 225, 45, 20, 9
  217 D1:D103 AC 2D 67 00 	.db 172, 45, 103, 0
  218 D1:D107 72 2D 59 02 	.db 114, 45, 89, 2
  219 D1:D10B 2C 1F 82 0A 	.db 44, 31, 130, 10
  220 D1:D10F FB 0E 8B 0E 	.db 251, 14, 139, 14
  221 D1:D113 -  -  -  -  
  222 D1:D113 -  -  -  -  BG_Data_1:
  223 D1:D113 38 D2 D1 -  	.dl Sprite_Table_1
  224 D1:D116 0D -  -  -  	.db 13
  225 D1:D117 43 2D 1F 02 	.db 67, 45, 31, 2
  226 D1:D11B 61 2D 5C 02 	.db 97, 45, 92, 2
  227 D1:D11F 8A 2D 33 02 	.db 138, 45, 51, 2
  228 D1:D123 C7 2D 46 02 	.db 199, 45, 70, 2
  229 D1:D127 C0 2D 73 09 	.db 192, 45, 115, 9
  230 D1:D12B 6A 1F 79 0A 	.db 106, 31, 121, 10
  231 D1:D12F 90 1F 0B 06 	.db 144, 31, 11, 6
  232 D1:D133 93 1F 4E 07 	.db 147, 31, 78, 7
  233 D1:D137 1F 1F 76 07 	.db 31, 31, 118, 7
  234 D1:D13B 13 2F 34 0B 	.db 19, 47, 52, 11
  235 D1:D13F CD 2F 1F 0B 	.db 205, 47, 31, 11
  236 D1:D143 EA 2F 59 0B 	.db 234, 47, 89, 11
  237 D1:D147 F2 0E 94 0C 	.db 242, 14, 148, 12
  238 D1:D14B -  -  -  -  
  239 D1:D14B -  -  -  -  BG_Data_0:
  240 D1:D14B 38 D2 D1 -  	.dl Sprite_Table_1
  241 D1:D14E 0D -  -  -  	.db 13
  242 D1:D14F C9 2D 14 00 	.db 201, 45, 20, 0
  243 D1:D153 4C 2D 14 01 	.db 76, 45, 20, 1
  244 D1:D157 B5 2D 41 02 	.db 181, 45, 65, 2
  245 D1:D15B 7D 2D 73 00 	.db 125, 45, 115, 0
  246 D1:D15F 3E 1F 3C 03 	.db 62, 31, 60, 3
  247 D1:D163 E5 1F 5F 04 	.db 229, 31, 95, 4
  248 D1:D167 EC 1F 47 05 	.db 236, 31, 71, 5
  249 D1:D16B F6 1F 08 06 	.db 246, 31, 8, 6
  250 D1:D16F 3E 1F 67 05 	.db 62, 31, 103, 5
  251 D1:D173 A8 1F 71 05 	.db 168, 31, 113, 5
  252 D1:D177 62 1F 31 07 	.db 98, 31, 49, 7
  253 D1:D17B EC 1F 47 05 	.db 236, 31, 71, 5
  254 D1:D17F 79 2F 0D 08 	.db 121, 47, 13, 8
  255 D1:D183 -  -  -  -  
  256 D1:D183 -  -  -  -  
  257 D1:D183 -  -  -  -  
Listing for file "ascent.asm"
  283 D1:D183 -  -  -  -  #include "Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Palette_Setup.txt"
    1 D1:D183 -  -  -  -  setup_palette_1:
    2 D1:D183 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:D187 3E 80 -  -  	ld a,%10000000
    4 D1:D189 77 -  -  -  	ld (hl),a 
    5 D1:D18A 23 -  -  -  	inc hl
    6 D1:D18B 3E 10 -  -  	ld a,%00010000
    7 D1:D18D 77 -  -  -  	ld (hl),a 
    8 D1:D18E 23 -  -  -  	inc hl
    9 D1:D18F 3E 61 -  -  	ld a,%01100001
   10 D1:D191 77 -  -  -  	ld (hl),a 
   11 D1:D192 23 -  -  -  	inc hl
   12 D1:D193 3E 4E -  -  	ld a,%01001110
   13 D1:D195 77 -  -  -  	ld (hl),a 
   14 D1:D196 23 -  -  -  	inc hl
   15 D1:D197 3E 65 -  -  	ld a,%01100101
   16 D1:D199 77 -  -  -  	ld (hl),a 
   17 D1:D19A 23 -  -  -  	inc hl
   18 D1:D19B 3E 6B -  -  	ld a,%01101011
   19 D1:D19D 77 -  -  -  	ld (hl),a 
   20 D1:D19E 23 -  -  -  	inc hl
   21 D1:D19F 3E A0 -  -  	ld a,%10100000
   22 D1:D1A1 77 -  -  -  	ld (hl),a 
   23 D1:D1A2 23 -  -  -  	inc hl
   24 D1:D1A3 3E 5F -  -  	ld a,%01011111
   25 D1:D1A5 77 -  -  -  	ld (hl),a 
   26 D1:D1A6 23 -  -  -  	inc hl
   27 D1:D1A7 3E E0 -  -  	ld a,%11100000
   28 D1:D1A9 77 -  -  -  	ld (hl),a 
   29 D1:D1AA 23 -  -  -  	inc hl
   30 D1:D1AB 3E D3 -  -  	ld a,%11010011
   31 D1:D1AD 77 -  -  -  	ld (hl),a 
   32 D1:D1AE 23 -  -  -  	inc hl
   33 D1:D1AF 3E A2 -  -  	ld a,%10100010
   34 D1:D1B1 77 -  -  -  	ld (hl),a 
   35 D1:D1B2 23 -  -  -  	inc hl
   36 D1:D1B3 3E 12 -  -  	ld a,%00010010
   37 D1:D1B5 77 -  -  -  	ld (hl),a 
   38 D1:D1B6 23 -  -  -  	inc hl
   39 D1:D1B7 3E F9 -  -  	ld a,%11111001
   40 D1:D1B9 77 -  -  -  	ld (hl),a 
   41 D1:D1BA 23 -  -  -  	inc hl
   42 D1:D1BB 3E 0A -  -  	ld a,%00001010
   43 D1:D1BD 77 -  -  -  	ld (hl),a 
   44 D1:D1BE 23 -  -  -  	inc hl
   45 D1:D1BF 3E 1A -  -  	ld a,%00011010
   46 D1:D1C1 77 -  -  -  	ld (hl),a 
   47 D1:D1C2 23 -  -  -  	inc hl
   48 D1:D1C3 3E 31 -  -  	ld a,%00110001
   49 D1:D1C5 77 -  -  -  	ld (hl),a 
   50 D1:D1C6 23 -  -  -  	inc hl
   51 D1:D1C7 3E FF -  -  	ld a,%11111111
   52 D1:D1C9 77 -  -  -  	ld (hl),a 
   53 D1:D1CA 23 -  -  -  	inc hl
   54 D1:D1CB 3E FF -  -  	ld a,%11111111
   55 D1:D1CD 77 -  -  -  	ld (hl),a 
   56 D1:D1CE 23 -  -  -  	inc hl
   57 D1:D1CF 3E 1F -  -  	ld a,%00011111
   58 D1:D1D1 77 -  -  -  	ld (hl),a 
   59 D1:D1D2 23 -  -  -  	inc hl
   60 D1:D1D3 3E 81 -  -  	ld a,%10000001
   61 D1:D1D5 77 -  -  -  	ld (hl),a 
   62 D1:D1D6 23 -  -  -  	inc hl
   63 D1:D1D7 3E 00 -  -  	ld a,%00000000
   64 D1:D1D9 77 -  -  -  	ld (hl),a 
   65 D1:D1DA 23 -  -  -  	inc hl
   66 D1:D1DB 3E 68 -  -  	ld a,%01101000
   67 D1:D1DD 77 -  -  -  	ld (hl),a 
   68 D1:D1DE 23 -  -  -  	inc hl
   69 D1:D1DF 3E 20 -  -  	ld a,%00100000
   70 D1:D1E1 77 -  -  -  	ld (hl),a 
   71 D1:D1E2 23 -  -  -  	inc hl
   72 D1:D1E3 3E 6A -  -  	ld a,%01101010
   73 D1:D1E5 77 -  -  -  	ld (hl),a 
   74 D1:D1E6 23 -  -  -  	inc hl
   75 D1:D1E7 3E 28 -  -  	ld a,%00101000
   76 D1:D1E9 77 -  -  -  	ld (hl),a 
   77 D1:D1EA 23 -  -  -  	inc hl
   78 D1:D1EB 3E 21 -  -  	ld a,%00100001
   79 D1:D1ED 77 -  -  -  	ld (hl),a 
   80 D1:D1EE 23 -  -  -  	inc hl
   81 D1:D1EF 3E 00 -  -  	ld a,%00000000
   82 D1:D1F1 77 -  -  -  	ld (hl),a 
   83 D1:D1F2 23 -  -  -  	inc hl
   84 D1:D1F3 3E 00 -  -  	ld a,%00000000
   85 D1:D1F5 77 -  -  -  	ld (hl),a 
   86 D1:D1F6 23 -  -  -  	inc hl
   87 D1:D1F7 3E 23 -  -  	ld a,%00100011
   88 D1:D1F9 77 -  -  -  	ld (hl),a 
   89 D1:D1FA 23 -  -  -  	inc hl
   90 D1:D1FB 3E B1 -  -  	ld a,%10110001
   91 D1:D1FD 77 -  -  -  	ld (hl),a 
   92 D1:D1FE 23 -  -  -  	inc hl
   93 D1:D1FF 3E 1F -  -  	ld a,%00011111
   94 D1:D201 77 -  -  -  	ld (hl),a 
   95 D1:D202 23 -  -  -  	inc hl
   96 D1:D203 3E 68 -  -  	ld a,%01101000
   97 D1:D205 77 -  -  -  	ld (hl),a 
   98 D1:D206 23 -  -  -  	inc hl
   99 D1:D207 C9 -  -  -  	ret 
Listing for file "ascent.asm"
  284 D1:D208 -  -  -  -  #include "Equates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Equates.txt"
    1 D1:D208 -  -  -  -  Banana1_Slow .equ $d40001
    2 D1:D208 -  -  -  -  Banana1_Slow_F .equ $d40119
    3 D1:D208 -  -  -  -  Banana1_Slow_O .equ $d40231
    4 D1:D208 -  -  -  -  Banana1_Slow_O_F .equ $d40349
    5 D1:D208 -  -  -  -  Banana1Large_Slow_O .equ $d40461
    6 D1:D208 -  -  -  -  Banana1Large_Slow_O_F .equ $d4077d
    7 D1:D208 -  -  -  -  Banana1Large_Fast .equ $d40a98
    8 D1:D208 -  -  -  -  Banana1Large_Fast_F .equ $d40d2a
    9 D1:D208 -  -  -  -  Banana1Large_BG .equ $d40fbb
   10 D1:D208 -  -  -  -  Banana1Large_BG_O .equ $d41800
   11 D1:D208 -  -  -  -  Banana1Large_BG_F .equ $d420a1
   12 D1:D208 -  -  -  -  Banana1Large_BG_O_F .equ $d428e6
   13 D1:D208 -  -  -  -  Shittlogo_Slow .equ $d43187
   14 D1:D208 -  -  -  -  Shittlogo_Slow_O .equ $d436b7
   15 D1:D208 -  -  -  -  OrangeDot_Slow .equ $d43bd3
   16 D1:D208 -  -  -  -  OrangeDot_Slow_O .equ $d43c7f
   17 D1:D208 -  -  -  -  OrangeDot_BG .equ $d43d2a
   18 D1:D208 -  -  -  -  OrangeDot_BG_O .equ $d43e1b
   19 D1:D208 -  -  -  -  SquiggleL_Slow .equ $d43f0d
   20 D1:D208 -  -  -  -  SquiggleL_Slow_F .equ $d440ad
   21 D1:D208 -  -  -  -  SquiggleL_Slow_O .equ $d4424d
   22 D1:D208 -  -  -  -  SquiggleL_Slow_O_F .equ $d443f1
   23 D1:D208 -  -  -  -  Banana5_BG .equ $d44595
   24 D1:D208 -  -  -  -  Banana5_BG_O .equ $d44996
   25 D1:D208 -  -  -  -  Banana5_BG_F .equ $d44dd7
   26 D1:D208 -  -  -  -  Banana5_BG_O_F .equ $d451d8
   27 D1:D208 -  -  -  -  GreenCurl1_BG .equ $d45619
   28 D1:D208 -  -  -  -  GreenCurl1_BG_O .equ $d45a1a
   29 D1:D208 -  -  -  -  GreenCurl1_BG_F .equ $d45e5b
   30 D1:D208 -  -  -  -  GreenCurl1_BG_O_F .equ $d4625c
   31 D1:D208 -  -  -  -  Bluecurl_BG .equ $d4669d
   32 D1:D208 -  -  -  -  Bluecurl_BG_O .equ $d46f9e
Listing for file "ascent.asm"
  285 D1:D208 -  -  -  -  ;#include "Decompress_Calls.txt"
  286 D1:D208 -  -  -  -  #include "Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Tables.txt"
    1 D1:D208 -  -  -  -  Sprite_Table_0:
    2 D1:D208 19 01 D4 -  	.dl Banana1_Slow_F
    3 D1:D20B 61 04 D4 -  	.dl Banana1Large_Slow_O
    4 D1:D20E 98 0A D4 -  	.dl Banana1Large_Fast
    5 D1:D211 7D 07 D4 -  	.dl Banana1Large_Slow_O_F
    6 D1:D214 01 00 D4 -  	.dl Banana1_Slow
    7 D1:D217 49 03 D4 -  	.dl Banana1_Slow_O_F
    8 D1:D21A 2A 0D D4 -  	.dl Banana1Large_Fast_F
    9 D1:D21D 31 02 D4 -  	.dl Banana1_Slow_O
   10 D1:D220 B7 36 D4 -  	.dl Shittlogo_Slow_O
   11 D1:D223 87 31 D4 -  	.dl Shittlogo_Slow
   12 D1:D226 7F 3C D4 -  	.dl OrangeDot_Slow_O
   13 D1:D229 D3 3B D4 -  	.dl OrangeDot_Slow
   14 D1:D22C 4D 42 D4 -  	.dl SquiggleL_Slow_O
   15 D1:D22F AD 40 D4 -  	.dl SquiggleL_Slow_F
   16 D1:D232 0D 3F D4 -  	.dl SquiggleL_Slow
   17 D1:D235 F1 43 D4 -  	.dl SquiggleL_Slow_O_F
   18 D1:D238 -  -  -  -  
   19 D1:D238 -  -  -  -  Sprite_Table_1:
   20 D1:D238 E6 28 D4 -  	.dl Banana1Large_BG_O_F
   21 D1:D23B 00 18 D4 -  	.dl Banana1Large_BG_O
   22 D1:D23E BB 0F D4 -  	.dl Banana1Large_BG
   23 D1:D241 96 49 D4 -  	.dl Banana5_BG_O
   24 D1:D244 95 45 D4 -  	.dl Banana5_BG
   25 D1:D247 5C 62 D4 -  	.dl GreenCurl1_BG_O_F
   26 D1:D24A 1A 5A D4 -  	.dl GreenCurl1_BG_O
   27 D1:D24D 5B 5E D4 -  	.dl GreenCurl1_BG_F
   28 D1:D250 9E 6F D4 -  	.dl Bluecurl_BG_O
   29 D1:D253 A1 20 D4 -  	.dl Banana1Large_BG_F
   30 D1:D256 D7 4D D4 -  	.dl Banana5_BG_F
   31 D1:D259 9D 66 D4 -  	.dl Bluecurl_BG
   32 D1:D25C 1B 3E D4 -  	.dl OrangeDot_BG_O
   33 D1:D25F 19 56 D4 -  	.dl GreenCurl1_BG
   34 D1:D262 2A 3D D4 -  	.dl OrangeDot_BG
   35 D1:D265 D8 51 D4 -  	.dl Banana5_BG_O_F
   36 D1:D268 -  -  -  -  
   37 D1:D268 -  -  -  -  Sprite_Table_2:
   38 D1:D268 -  -  -  -  
Listing for file "ascent.asm"
  287 D1:D268 -  -  -  -  
  288 D1:D268 -  -  -  -  
