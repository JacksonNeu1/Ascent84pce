    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E -  -  -  -  	;jp time_test_start
   20 D1:A88E -  -  -  -  	
   21 D1:A88E 21 00 02 E3 	ld	hl,mpLcdPalette
   22 D1:A892 -  -  -  -  
   23 D1:A892 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   24 D1:A894 77 -  -  -  	ld	(hl),a
   25 D1:A895 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   26 D1:A897 23 -  -  -  	inc hl
   27 D1:A898 77 -  -  -  	ld	(hl),a
   28 D1:A899 23 -  -  -  	inc hl;1yellow
   29 D1:A89A 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   30 D1:A89C 77 -  -  -  	ld	(hl),a
   31 D1:A89D 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   32 D1:A89F 23 -  -  -  	inc hl
   33 D1:A8A0 77 -  -  -  	ld	(hl),a
   34 D1:A8A1 -  -  -  -  	
   35 D1:A8A1 23 -  -  -  	inc hl;2blue
   36 D1:A8A2 3E 1F -  -  	ld	a,%00011111 ;GGGBBBBB
   37 D1:A8A4 77 -  -  -  	ld	(hl),a
   38 D1:A8A5 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   39 D1:A8A7 23 -  -  -  	inc hl
   40 D1:A8A8 77 -  -  -  	ld	(hl),a
   41 D1:A8A9 -  -  -  -  	
   42 D1:A8A9 23 -  -  -  	inc hl;3r
   43 D1:A8AA 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   44 D1:A8AC 77 -  -  -  	ld	(hl),a
   45 D1:A8AD 3E 7C -  -  	ld  a,%01111100 ; GRRRRRGG
   46 D1:A8AF 23 -  -  -  	inc hl
   47 D1:A8B0 77 -  -  -  	ld	(hl),a
   48 D1:A8B1 -  -  -  -  	
   49 D1:A8B1 23 -  -  -  	inc hl;4g
   50 D1:A8B2 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   51 D1:A8B4 77 -  -  -  	ld	(hl),a
   52 D1:A8B5 3E 83 -  -  	ld  a,%10000011 ; GRRRRRGG
   53 D1:A8B7 23 -  -  -  	inc hl
   54 D1:A8B8 77 -  -  -  	ld	(hl),a
   55 D1:A8B9 -  -  -  -  	
   56 D1:A8B9 23 -  -  -  	inc hl;5 white
   57 D1:A8BA 3E FF -  -  	ld	a,%11111111 ;GGGBBBBB
   58 D1:A8BC 77 -  -  -  	ld	(hl),a
   59 D1:A8BD 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   60 D1:A8BF 23 -  -  -  	inc hl
   61 D1:A8C0 77 -  -  -  	ld	(hl),a
   62 D1:A8C1 -  -  -  -  
   63 D1:A8C1 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
   64 D1:A8C5 3E 25 -  -  	ld	a,lcdBpp4
   65 D1:A8C7 32 18 00 E3 	ld (mpLcdCtrl),a	
   66 D1:A8CB -  -  -  -  	
   67 D1:A8CB -  -  -  -  	
   68 D1:A8CB -  -  -  -  	;call fast_fg_sprite_set_flip
   69 D1:A8CB -  -  -  -  	;jp time_test_start
   70 D1:A8CB CD 91 B4 D1 	call sdcomp_reset_bg_sprite
   71 D1:A8CF CD 6D B4 D1 	call sdcomp_reset_fast_sprite
   72 D1:A8D3 CD C5 B2 D1 	call sdcomp_reset_flip
   73 D1:A8D7 CD F0 B2 D1 	call sdcomp_set_offset
   74 D1:A8DB 21 0C AD D1 	ld hl,testSpriteCompressed4
   75 D1:A8DF 11 00 00 D4 	ld de,vRam
   76 D1:A8E3 CD 35 AF D1 	call slow_sprite_decompress
   77 D1:A8E7 -  -  -  -  	
   78 D1:A8E7 -  -  -  -  	
   79 D1:A8E7 CD 82 B2 D1 	call sdcomp_set_flip
   80 D1:A8EB CD F0 B2 D1 	call sdcomp_set_offset
   81 D1:A8EF 21 C5 AC D1 	ld hl,testSpriteCompressed
   82 D1:A8F3 11 A0 00 D4 	ld de,vRam+160
   83 D1:A8F7 CD 35 AF D1 	call slow_sprite_decompress
   84 D1:A8FB -  -  -  -  	
   85 D1:A8FB -  -  -  -  	
   86 D1:A8FB -  -  -  -  	
   87 D1:A8FB 11 00 19 D4 	ld de,vRam +(160*40)
   88 D1:A8FF 21 00 00 D4 	ld hl,vRam
   89 D1:A903 3E 02 -  -  	ld a,2
   90 D1:A905 CD CE AB D1 	call draw_slow_sprite_bottom_cut
   91 D1:A909 -  -  -  -  	
   92 D1:A909 -  -  -  -  	
   93 D1:A909 11 C0 12 D4 	ld de,vRam +(160*30)
   94 D1:A90D 21 00 00 D4 	ld hl,vRam
   95 D1:A911 CD 6A AB D1 	call draw_slow_sprite_full
   96 D1:A915 -  -  -  -  	
   97 D1:A915 -  -  -  -  	
   98 D1:A915 11 05 19 D4 	ld de,vRam +(160*40)+5
   99 D1:A919 21 A0 00 D4 	ld hl,vRam+160
  100 D1:A91D 3E 03 -  -  	ld a,3
  101 D1:A91F CD 99 AB D1 	call draw_slow_sprite_top_cut
  102 D1:A923 -  -  -  -  	
  103 D1:A923 11 C5 12 D4 	ld de,vRam +(160*30)+5
  104 D1:A927 21 A0 00 D4 	ld hl,vRam+160
  105 D1:A92B CD 6A AB D1 	call draw_slow_sprite_full
  106 D1:A92F -  -  -  -  	
  107 D1:A92F -  -  -  -  	
  108 D1:A92F -  -  -  -  	
  109 D1:A92F -  -  -  -  	
  110 D1:A92F -  -  -  -  	
  111 D1:A92F -  -  -  -  ;	ld hl,vRam + (160*5)
  112 D1:A92F -  -  -  -  ;	ld (draw_bg_vram_addr),hl
  113 D1:A92F -  -  -  -  ;	ld hl,$000080
  114 D1:A92F -  -  -  -  ;	call draw_bg_line
  115 D1:A92F -  -  -  -  	
  116 D1:A92F -  -  -  -  	
  117 D1:A92F -  -  -  -  	
  118 D1:A92F -  -  -  -  	
  119 D1:A92F -  -  -  -  	;ld de,vram +(160*10)
  120 D1:A92F -  -  -  -  	;ld hl,testFastSprite+3
  121 D1:A92F -  -  -  -  	;exx
  122 D1:A92F -  -  -  -  	;ld b,8
  123 D1:A92F -  -  -  -  	;ld hl,8
  124 D1:A92F -  -  -  -  	;ld de,testFastSprite_t - 1
  125 D1:A92F -  -  -  -  	;ld c,%10000000
  126 D1:A92F -  -  -  -  	;call draw_fast_fg_sprite
  127 D1:A92F -  -  -  -  	
  128 D1:A92F -  -  -  -  	
  129 D1:A92F -  -  -  -  ;	ld de,vram +(160*20) - 1
  130 D1:A92F -  -  -  -  ;	ld hl,test_fast_sprite
  131 D1:A92F -  -  -  -  ;	ld a,1
  132 D1:A92F -  -  -  -  ;	call draw_fast_sprite_top_cut
  133 D1:A92F -  -  -  -  	
  134 D1:A92F -  -  -  -  	
  135 D1:A92F CD C5 B2 D1 	call sdcomp_reset_flip
  136 D1:A933 CD 5E B4 D1 	call sdcomp_set_fast_sprite
  137 D1:A937 21 2C AD D1 	ld hl,testSpriteCompressedFast
  138 D1:A93B 11 E0 01 D4 	ld de,vRam + (160*3)
  139 D1:A93F CD 35 AF D1 	call slow_sprite_decompress
  140 D1:A943 -  -  -  -  		
  141 D1:A943 11 BF 2B D4 	ld de,vRam +(160*70) - 1
  142 D1:A947 21 E0 01 D4 	ld hl,vRam + (160*3)
  143 D1:A94B 3E 03 -  -  	ld a,3
  144 D1:A94D CD 08 AB D1 	call draw_fast_sprite_bottom_cut
  145 D1:A951 -  -  -  -  	
  146 D1:A951 -  -  -  -  	
  147 D1:A951 -  -  -  -  	
  148 D1:A951 CD 82 B2 D1 	call sdcomp_set_flip
  149 D1:A955 -  -  -  -  ;	call sdcomp_set_fast_sprite
  150 D1:A955 21 2C AD D1 	ld hl,testSpriteCompressedFast
  151 D1:A959 11 80 02 D4 	ld de,vRam + (160*4)
  152 D1:A95D CD 35 AF D1 	call slow_sprite_decompress
  153 D1:A961 -  -  -  -  	
  154 D1:A961 -  -  -  -  		
  155 D1:A961 11 C5 2B D4 	ld de,vRam +(160*70) + 5
  156 D1:A965 21 80 02 D4 	ld hl,vRam + (160*4)
  157 D1:A969 3E 02 -  -  	ld a,2
  158 D1:A96B CD 1B AB D1 	call draw_fast_sprite_top_cut
  159 D1:A96F -  -  -  -  	
  160 D1:A96F -  -  -  -  	
  161 D1:A96F 11 65 31 D4 	ld de,vRam +(160*79) + 5
  162 D1:A973 21 80 02 D4 	ld hl,vRam + (160*4)
  163 D1:A977 3E 02 -  -  	ld a,2
  164 D1:A979 CD 51 AB D1 	call draw_fast_sprite_full
  165 D1:A97D -  -  -  -  	
  166 D1:A97D -  -  -  -  	
  167 D1:A97D 21 E1 AB D1 	ld hl,testBGSprite
  168 D1:A981 11 40 38 D4 	ld de,vRam + (160*90)
  169 D1:A985 3E 00 -  -  	ld a,0 
  170 D1:A987 CD F2 AA D1 	call draw_bg_sprite_line
  171 D1:A98B -  -  -  -  	
  172 D1:A98B 21 E1 AB D1 	ld hl,testBGSprite
  173 D1:A98F 11 E0 38 D4 	ld de,vRam + (160*91)
  174 D1:A993 3E 01 -  -  	ld a,1
  175 D1:A995 CD F2 AA D1 	call draw_bg_sprite_line
  176 D1:A999 -  -  -  -  	
  177 D1:A999 21 E1 AB D1 	ld hl,testBGSprite
  178 D1:A99D 11 80 39 D4 	ld de,vRam + (160*92)
  179 D1:A9A1 3E 02 -  -  	ld a,2 
  180 D1:A9A3 CD F2 AA D1 	call draw_bg_sprite_line
  181 D1:A9A7 -  -  -  -  	
  182 D1:A9A7 21 E1 AB D1 	ld hl,testBGSprite
  183 D1:A9AB 11 20 3A D4 	ld de,vRam + (160*93)
  184 D1:A9AF 3E 03 -  -  	ld a,3 
  185 D1:A9B1 CD F2 AA D1 	call draw_bg_sprite_line
  186 D1:A9B5 -  -  -  -  	
  187 D1:A9B5 21 E1 AB D1 	ld hl,testBGSprite
  188 D1:A9B9 11 C0 3A D4 	ld de,vRam + (160*94)
  189 D1:A9BD 3E 04 -  -  	ld a,4 
  190 D1:A9BF CD F2 AA D1 	call draw_bg_sprite_line
  191 D1:A9C3 -  -  -  -  	
  192 D1:A9C3 21 E1 AB D1 	ld hl,testBGSprite
  193 D1:A9C7 11 A0 3C D4 	ld de,vRam + (160*97)
  194 D1:A9CB 3E 07 -  -  	ld a,7 
  195 D1:A9CD CD F2 AA D1 	call draw_bg_sprite_line
  196 D1:A9D1 -  -  -  -  	
  197 D1:A9D1 -  -  -  -  	
  198 D1:A9D1 -  -  -  -  	
  199 D1:A9D1 -  -  -  -  	
  200 D1:A9D1 CD 6D B4 D1 	call sdcomp_reset_fast_sprite
  201 D1:A9D5 CD 7C B4 D1 	call sdcomp_set_bg_sprite
  202 D1:A9D9 CD C5 B2 D1 	call sdcomp_reset_flip
  203 D1:A9DD -  -  -  -  	;call sdcomp_set_offset
  204 D1:A9DD 21 C5 AC D1 	ld hl,testSpriteCompressed
  205 D1:A9E1 11 C0 03 D4 	ld de,vRam+(160*6)
  206 D1:A9E5 CD 35 AF D1 	call slow_sprite_decompress
  207 D1:A9E9 CD 91 B4 D1 	call sdcomp_reset_bg_sprite
  208 D1:A9ED -  -  -  -  	
  209 D1:A9ED -  -  -  -  	
  210 D1:A9ED -  -  -  -  	
  211 D1:A9ED 21 C0 03 D4 	ld hl,vRam+(160*6)
  212 D1:A9F1 11 4A 38 D4 	ld de,vRam + (160*90) + 10
  213 D1:A9F5 3E 00 -  -  	ld a,0 
  214 D1:A9F7 CD F2 AA D1 	call draw_bg_sprite_line
  215 D1:A9FB -  -  -  -  	
  216 D1:A9FB 21 C0 03 D4 	ld hl,vRam+(160*6)
  217 D1:A9FF 11 EA 38 D4 	ld de,vRam + (160*91) + 10
  218 D1:AA03 3E 01 -  -  	ld a,1 
  219 D1:AA05 CD F2 AA D1 	call draw_bg_sprite_line
  220 D1:AA09 -  -  -  -  	
  221 D1:AA09 21 C0 03 D4 	ld hl,vRam+(160*6)
  222 D1:AA0D 11 8A 39 D4 	ld de,vRam + (160*92) + 10
  223 D1:AA11 3E 02 -  -  	ld a,2 
  224 D1:AA13 CD F2 AA D1 	call draw_bg_sprite_line
  225 D1:AA17 21 C0 03 D4 	ld hl,vRam+(160*6)
  226 D1:AA1B 11 2A 3A D4 	ld de,vRam + (160*93) + 10
  227 D1:AA1F 3E 03 -  -  	ld a,3 
  228 D1:AA21 CD F2 AA D1 	call draw_bg_sprite_line
  229 D1:AA25 21 C0 03 D4 	ld hl,vRam+(160*6)
  230 D1:AA29 11 CA 3A D4 	ld de,vRam + (160*94) + 10
  231 D1:AA2D 3E 04 -  -  	ld a,4
  232 D1:AA2F CD F2 AA D1 	call draw_bg_sprite_line
  233 D1:AA33 21 C0 03 D4 	ld hl,vRam+(160*6)
  234 D1:AA37 11 6A 3B D4 	ld de,vRam + (160*95) + 10
  235 D1:AA3B 3E 05 -  -  	ld a,5 
  236 D1:AA3D CD F2 AA D1 	call draw_bg_sprite_line
  237 D1:AA41 21 C0 03 D4 	ld hl,vRam+(160*6)
  238 D1:AA45 11 0A 3C D4 	ld de,vRam + (160*96) + 10
  239 D1:AA49 3E 06 -  -  	ld a,6 
  240 D1:AA4B CD F2 AA D1 	call draw_bg_sprite_line
  241 D1:AA4F 21 C0 03 D4 	ld hl,vRam+(160*6)
  242 D1:AA53 11 AA 3C D4 	ld de,vRam + (160*97) + 10
  243 D1:AA57 3E 07 -  -  	ld a,7 
  244 D1:AA59 CD F2 AA D1 	call draw_bg_sprite_line
  245 D1:AA5D -  -  -  -  
  246 D1:AA5D -  -  -  -  	
  247 D1:AA5D -  -  -  -  	
  248 D1:AA5D -  -  -  -  	
  249 D1:AA5D -  -  -  -  	
  250 D1:AA5D -  -  -  -  	
  251 D1:AA5D -  -  -  -  	
  252 D1:AA5D FB -  -  -  	ei
  253 D1:AA5E CD 8C 0D 02 	call _GetKey
  254 D1:AA62 F3 -  -  -  	di
  255 D1:AA63 -  -  -  -  
  256 D1:AA63 -  -  -  -  exit_prgm:
  257 D1:AA63 CD 10 08 02 	call _ClrScrnFull
  258 D1:AA67 3E 2D -  -  	ld	a,lcdBpp16
  259 D1:AA69 32 18 00 E3 	ld	(mpLcdCtrl),a
  260 D1:AA6D CD 3C 1A 02 	call _DrawStatusBar
  261 D1:AA71 -  -  -  -  	
  262 D1:AA71 FB -  -  -  	ei				; reset screen back to normal
  263 D1:AA72 C9 -  -  -  	ret			; return to os
  264 D1:AA73 -  -  -  -  
  265 D1:AA73 -  -  -  -  
  266 D1:AA73 -  -  -  -  printHL:;=================REMOVE
  267 D1:AA73 E5 -  -  -  	push hl
  268 D1:AA74 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  269 D1:AA78 3E 2D -  -  	ld	a,lcdBpp16
  270 D1:AA7A 32 18 00 E3 	ld (mpLcdCtrl),a
  271 D1:AA7E E1 -  -  -  	pop hl
  272 D1:AA7F CD E0 1E 02 	call _DispHL
  273 D1:AA83 FB -  -  -  	ei
  274 D1:AA84 CD 8C 0D 02 	call _GetKey
  275 D1:AA88 F3 -  -  -  	di
  276 D1:AA89 C3 63 AA D1 	jp exit_prgm
  277 D1:AA8D -  -  -  -  
  278 D1:AA8D -  -  -  -  
  279 D1:AA8D -  -  -  -  prgmpause:
  280 D1:AA8D FB -  -  -  	ei
  281 D1:AA8E D5 -  -  -  	push de 
  282 D1:AA8F E5 -  -  -  	push hl 
  283 D1:AA90 CD 8C 0D 02 	call _GetKey
  284 D1:AA94 E1 -  -  -  	pop hl 
  285 D1:AA95 D1 -  -  -  	pop de 
  286 D1:AA96 F3 -  -  -  	di
  287 D1:AA97 C9 -  -  -  	ret
  288 D1:AA98 -  -  -  -  
  289 D1:AA98 -  -  -  -  test_addr:
  290 D1:AA98 00 00 00 -  	.dl 0
  291 D1:AA9B -  -  -  -  
  292 D1:AA9B -  -  -  -  draw_buffer:
  293 D1:AA9B 00 00 00 -  	.dl 0
  294 D1:AA9E -  -  -  -  
  295 D1:AA9E -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA9E -  -  -  -  
    2 D1:AA9E -  -  -  -  
    3 D1:AA9E -  -  -  -  
    4 D1:AA9E -  -  -  -  time_test_start:
    5 D1:AA9E -  -  -  -  
    6 D1:AA9E -  -  -  -  		; 76543210	
    7 D1:AA9E 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AAA0 32 30 00 F2 	ld ($F20030),a
    9 D1:AAA4 -  -  -  -  	;	  fedcba98
   10 D1:AAA4 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AAA6 32 31 00 F2 	ld ($F20031),a
   12 D1:AAAA 3E 00 -  -  	ld a,0
   13 D1:AAAC 32 00 00 F2 	ld ($F20000),a
   14 D1:AAB0 32 01 00 F2 	ld ($F20001),a
   15 D1:AAB4 32 02 00 F2 	ld ($F20002),a
   16 D1:AAB8 32 03 00 F2 	ld ($F20003),a
   17 D1:AABC -  -  -  -  	
   18 D1:AABC 21 2C 01 00 	ld hl,300
   19 D1:AAC0 -  -  -  -  	
   20 D1:AAC0 -  -  -  -  time_testing_loop:
   21 D1:AAC0 E5 -  -  -  	push hl
   22 D1:AAC1 01 E8 03 00 	ld bc,1000
   23 D1:AAC5 -  -  -  -  time_testing_loop_2:
   24 D1:AAC5 C5 -  -  -  	push bc
   25 D1:AAC6 -  -  -  -  	;instruction here
   26 D1:AAC6 11 C0 12 D4 	ld de,vram +(160*30)
   27 D1:AACA 21 32 AC D1 	ld hl,testSlowSprite
   28 D1:AACE 3E 01 -  -  	ld a,1
   29 D1:AAD0 CD 99 AB D1 	call draw_slow_sprite_top_cut
   30 D1:AAD4 -  -  -  -  	;Instruction end
   31 D1:AAD4 C1 -  -  -  	pop bc
   32 D1:AAD5 0B -  -  -  	dec bc
   33 D1:AAD6 79 -  -  -  	ld a,c
   34 D1:AAD7 B0 -  -  -  	or b
   35 D1:AAD8 C2 C5 AA D1 	jp nz,time_testing_loop_2
   36 D1:AADC E1 -  -  -  	pop hl
   37 D1:AADD 2B -  -  -  	dec hl
   38 D1:AADE 7D -  -  -  	ld a,l
   39 D1:AADF B4 -  -  -  	or h
   40 D1:AAE0 C2 C0 AA D1 	jp nz,time_testing_loop
   41 D1:AAE4 -  -  -  -  	
   42 D1:AAE4 3A 01 00 F2 	ld a,($F20001);128hz
   43 D1:AAE8 6F -  -  -  	ld l,a
   44 D1:AAE9 3A 02 00 F2 	ld a,($F20002);0.5hz
   45 D1:AAED 67 -  -  -  	ld h,a
   46 D1:AAEE C3 73 AA D1 	jp printHL;div by 128 for time
   47 D1:AAF2 -  -  -  -  	
   48 D1:AAF2 -  -  -  -  
   49 D1:AAF2 -  -  -  -  ;60fps = .0166sec/f	
   50 D1:AAF2 -  -  -  -  
   51 D1:AAF2 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   52 D1:AAF2 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   53 D1:AAF2 -  -  -  -  
   54 D1:AAF2 -  -  -  -  
   55 D1:AAF2 -  -  -  -  ;10,000 draw 1 bg line very complex 
   56 D1:AAF2 -  -  -  -  ;9 sec  .07 of frame/instruction
   57 D1:AAF2 -  -  -  -  
   58 D1:AAF2 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   59 D1:AAF2 -  -  -  -  ;16.4RT, 14.8CLK
   60 D1:AAF2 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   61 D1:AAF2 -  -  -  -  ;.24 screens/frame
   62 D1:AAF2 -  -  -  -  
   63 D1:AAF2 -  -  -  -  
   64 D1:AAF2 -  -  -  -  ;300k slow sprite best case 12*5px
   65 D1:AAF2 -  -  -  -  ;8.75RT 7.6clk
   66 D1:AAF2 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   67 D1:AAF2 -  -  -  -  ;.446 screens/frame
   68 D1:AAF2 -  -  -  -  
   69 D1:AAF2 -  -  -  -  
   70 D1:AAF2 -  -  -  -  
   71 D1:AAF2 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   72 D1:AAF2 -  -  -  -  ;22.15RT,20.35clk
   73 D1:AAF2 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   74 D1:AAF2 -  -  -  -  ;.78 screens/frame
   75 D1:AAF2 -  -  -  -  
   76 D1:AAF2 -  -  -  -  
   77 D1:AAF2 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   78 D1:AAF2 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   79 D1:AAF2 -  -  -  -  ;.47 = FAST
   80 D1:AAF2 -  -  -  -  
   81 D1:AAF2 -  -  -  -  ;50% fast sprites, 50% slow sprites
   82 D1:AAF2 -  -  -  -  
   83 D1:AAF2 -  -  -  -  
   84 D1:AAF2 -  -  -  -  
   85 D1:AAF2 -  -  -  -  
   86 D1:AAF2 -  -  -  -  
   87 D1:AAF2 -  -  -  -  
   88 D1:AAF2 -  -  -  -  
   89 D1:AAF2 -  -  -  -  
   90 D1:AAF2 -  -  -  -  
Listing for file "ascent.asm"
  296 D1:AAF2 -  -  -  -  #include "drawSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawSprite.txt"
    1 D1:AAF2 -  -  -  -  
    2 D1:AAF2 -  -  -  -  
    3 D1:AAF2 -  -  -  -  
    4 D1:AAF2 -  -  -  -  
    5 D1:AAF2 -  -  -  -  
    6 D1:AAF2 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
    7 D1:AAF2 -  -  -  -  draw_bg_sprite_line:
    8 D1:AAF2 E5 -  -  -  	push hl;save 
    9 D1:AAF3 6E -  -  -  	ld l,(hl);sprite width in px
   10 D1:AAF4 67 -  -  -  	ld h,a ;lines to skip
   11 D1:AAF5 7D -  -  -  	ld a,l;width 
   12 D1:AAF6 ED 6C -  -  	mlt hl;widt*lines skipped 
   13 D1:AAF8 C1 -  -  -  	pop bc 
   14 D1:AAF9 09 -  -  -  	add hl,bc;skip to target line data 
   15 D1:AAFA 23 -  -  -  	inc hl 
   16 D1:AAFB -  -  -  -  	;hl is pointing to start of line data 
   17 D1:AAFB CB 2F -  -  	sra a;divide width by 2 
   18 D1:AAFD 47 -  -  -  	ld b,a;b holds number of loops 
   19 D1:AAFE -  -  -  -  dbgsl_loop:
   20 D1:AAFE 1A -  -  -  	ld a,(de); load vram data 
   21 D1:AAFF A6 -  -  -  	and (hl);and with mask 
   22 D1:AB00 23 -  -  -  	inc hl ;to color data 
   23 D1:AB01 B6 -  -  -  	or (hl);or w color data 
   24 D1:AB02 12 -  -  -  	ld (de),a;write to vram  
   25 D1:AB03 13 -  -  -  	inc de
   26 D1:AB04 23 -  -  -  	inc hl;to mask data
   27 D1:AB05 10 F7 -  -  	djnz dbgsl_loop
   28 D1:AB07 C9 -  -  -  	ret 
   29 D1:AB08 -  -  -  -  	
   30 D1:AB08 -  -  -  -  
   31 D1:AB08 -  -  -  -  
   32 D1:AB08 -  -  -  -  
   33 D1:AB08 -  -  -  -  
   34 D1:AB08 -  -  -  -  
   35 D1:AB08 -  -  -  -  
   36 D1:AB08 -  -  -  -  
   37 D1:AB08 -  -  -  -  
   38 D1:AB08 -  -  -  -  
   39 D1:AB08 -  -  -  -  
   40 D1:AB08 -  -  -  -  
   41 D1:AB08 -  -  -  -  
Listing for file "ascent.asm"
  297 D1:AB08 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:AB08 -  -  -  -  
    2 D1:AB08 -  -  -  -  
    3 D1:AB08 -  -  -  -  ;de = vram-1 , hl = data, a = number lines to draw
    4 D1:AB08 -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:AB08 -  -  -  -  
    6 D1:AB08 01 00 00 00 	ld bc,0
    7 D1:AB0C 4F -  -  -  	ld c,a
    8 D1:AB0D E5 -  -  -  	push hl
    9 D1:AB0E 7E -  -  -  	ld a,(hl);height
   10 D1:AB0F 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:AB10 4F -  -  -  	ld c,a;height
   12 D1:AB11 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:AB12 E1 -  -  -  	pop hl
   14 D1:AB13 23 -  -  -  	inc hl
   15 D1:AB14 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:AB15 -  -  -  -  
   17 D1:AB15 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:AB16 EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:AB17 C3 5B AB D1 	jp dfgs_loop
   20 D1:AB1B -  -  -  -  	
   21 D1:AB1B -  -  -  -  ;de = vram-1 , hl = data, a = top lines to skip	
   22 D1:AB1B -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:AB1B -  -  -  -  	
   24 D1:AB1B 01 00 00 00 	ld bc,0
   25 D1:AB1F 4F -  -  -  	ld c,a
   26 D1:AB20 D5 -  -  -  	push de
   27 D1:AB21 11 00 00 00 	ld de,0
   28 D1:AB25 E5 -  -  -  	push hl
   29 D1:AB26 5E -  -  -  	ld e,(hl);height
   30 D1:AB27 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:AB28 -  -  -  -  
   32 D1:AB28 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:AB29 E1 -  -  -  	pop hl;start of data
   34 D1:AB2A 19 -  -  -  	add hl,de
   35 D1:AB2B 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:AB2C 23 -  -  -  	inc hl;hl is pixel data
   37 D1:AB2D D1 -  -  -  	pop de
   38 D1:AB2E C5 -  -  -  	push bc;save total and skipped loops
   39 D1:AB2F 79 -  -  -  	ld a,c;loops to skip
   40 D1:AB30 01 00 00 00 	ld bc,0
   41 D1:AB34 -  -  -  -  	
   42 D1:AB34 -  -  -  -  
   43 D1:AB34 -  -  -  -  draw_fast_sprite_top_loop:
   44 D1:AB34 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:AB35 EB -  -  -  	ex de,hl;hl is vram
   46 D1:AB36 09 -  -  -  	add hl,bc
   47 D1:AB37 EB -  -  -  	ex de,hl;hl is data
   48 D1:AB38 23 -  -  -  	inc hl
   49 D1:AB39 4E -  -  -  	ld c,(hl);ldir length
   50 D1:AB3A 09 -  -  -  	add hl,bc;add ldir length
   51 D1:AB3B EB -  -  -  	ex de,hl;hl is vram
   52 D1:AB3C 09 -  -  -  	add hl,bc;add ldir length
   53 D1:AB3D 13 -  -  -  	inc de
   54 D1:AB3E EB -  -  -  	ex de,hl;hl is data
   55 D1:AB3F 3D -  -  -  	dec a
   56 D1:AB40 C2 34 AB D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:AB44 -  -  -  -  	
   58 D1:AB44 -  -  -  -  	
   59 D1:AB44 C1 -  -  -  	pop bc
   60 D1:AB45 78 -  -  -  	ld a,b
   61 D1:AB46 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:AB47 -  -  -  -  		
   63 D1:AB47 01 00 00 00 	ld bc,0
   64 D1:AB4B 4E -  -  -  	ld c,(hl)
   65 D1:AB4C EB -  -  -  	ex de,hl
   66 D1:AB4D C3 5B AB D1 	jp dfgs_loop
   67 D1:AB51 -  -  -  -  
   68 D1:AB51 -  -  -  -  
   69 D1:AB51 -  -  -  -  ;de = vram-1 , hl = data
   70 D1:AB51 -  -  -  -  draw_fast_sprite_full:
   71 D1:AB51 01 00 00 00 	ld bc,0
   72 D1:AB55 4E -  -  -  	ld c,(hl);height
   73 D1:AB56 09 -  -  -  	add hl,bc
   74 D1:AB57 7E -  -  -  	ld a,(hl);total loops
   75 D1:AB58 23 -  -  -  	inc hl
   76 D1:AB59 4E -  -  -  	ld c,(hl);first gap length
   77 D1:AB5A EB -  -  -  	ex de,hl
   78 D1:AB5B -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   79 D1:AB5B -  -  -  -  dfgs_loop:;gap, colors
   80 D1:AB5B 09 -  -  -  	add hl,bc;add alpha length
   81 D1:AB5C EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   82 D1:AB5D 23 -  -  -  	inc hl
   83 D1:AB5E 4E -  -  -  	ld c,(hl);get ldir length
   84 D1:AB5F 23 -  -  -  	inc hl
   85 D1:AB60 ED B0 -  -  	ldir
   86 D1:AB62 4E -  -  -  	ld c,(hl);load c with next alpha length
   87 D1:AB63 EB -  -  -  	ex de,hl;swap, hl is vram
   88 D1:AB64 3D -  -  -  	dec a
   89 D1:AB65 C2 5B AB D1 	jp nz,dfgs_loop
   90 D1:AB69 C9 -  -  -  	ret
   91 D1:AB6A -  -  -  -  	
   92 D1:AB6A -  -  -  -  	
   93 D1:AB6A -  -  -  -  	
   94 D1:AB6A -  -  -  -  	
   95 D1:AB6A -  -  -  -  
   96 D1:AB6A -  -  -  -  
   97 D1:AB6A -  -  -  -  ;hl = data, de = vram
   98 D1:AB6A -  -  -  -  draw_slow_sprite_full:
   99 D1:AB6A 01 00 00 00 	ld bc,0
  100 D1:AB6E 4E -  -  -  	ld c,(hl);height
  101 D1:AB6F 09 -  -  -  	add hl,bc
  102 D1:AB70 7E -  -  -  	ld a,(hl);num loops
  103 D1:AB71 D9 -  -  -  	exx
  104 D1:AB72 4F -  -  -  	ld c,a
  105 D1:AB73 D9 -  -  -  	exx
  106 D1:AB74 1B -  -  -  	dec de
  107 D1:AB75 -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  108 D1:AB75 -  -  -  -  dsfgs_line_loop:
  109 D1:AB75 23 -  -  -  	inc hl;gap length
  110 D1:AB76 4E -  -  -  	ld c,(hl);gap length
  111 D1:AB77 EB -  -  -  	ex de,hl;hl is vram
  112 D1:AB78 09 -  -  -  	add hl,bc;add aplha gap
  113 D1:AB79 EB -  -  -  	ex de,hl;hl is data
  114 D1:AB7A 23 -  -  -  	inc hl;hl points to single pix mask
  115 D1:AB7B 1A -  -  -  	ld a,(de);vram data
  116 D1:AB7C A6 -  -  -  	and (hl)
  117 D1:AB7D 23 -  -  -  	inc hl;pixel data
  118 D1:AB7E B6 -  -  -  	or (hl)
  119 D1:AB7F 12 -  -  -  	ld (de),a
  120 D1:AB80 23 -  -  -  	inc hl;ldir length
  121 D1:AB81 -  -  -  -  	
  122 D1:AB81 13 -  -  -  	inc de;move to next pixel
  123 D1:AB82 -  -  -  -  	
  124 D1:AB82 7E -  -  -  	ld a,(hl);ldir length
  125 D1:AB83 23 -  -  -  	inc hl;data
  126 D1:AB84 4F -  -  -  	ld c,a
  127 D1:AB85 B7 -  -  -  	or a
  128 D1:AB86 CA 8C AB D1 	jp z,dsfgs_ldir_skip
  129 D1:AB8A ED B0 -  -  	ldir
  130 D1:AB8C -  -  -  -  dsfgs_ldir_skip:
  131 D1:AB8C 1A -  -  -  	ld a,(de);vram data
  132 D1:AB8D A6 -  -  -  	and (hl)
  133 D1:AB8E 23 -  -  -  	inc hl;pixel data
  134 D1:AB8F B6 -  -  -  	or (hl)
  135 D1:AB90 12 -  -  -  	ld (de),a
  136 D1:AB91 -  -  -  -  	
  137 D1:AB91 D9 -  -  -  	exx 
  138 D1:AB92 0D -  -  -  	dec c
  139 D1:AB93 D9 -  -  -  	exx
  140 D1:AB94 C2 75 AB D1 	jp nz,dsfgs_line_loop
  141 D1:AB98 C9 -  -  -  	ret
  142 D1:AB99 -  -  -  -  
  143 D1:AB99 -  -  -  -  
  144 D1:AB99 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  145 D1:AB99 -  -  -  -  draw_slow_sprite_top_cut:
  146 D1:AB99 -  -  -  -  
  147 D1:AB99 E5 -  -  -  	push hl
  148 D1:AB9A 01 00 00 00 	ld bc,0
  149 D1:AB9E 4F -  -  -  	ld c,a
  150 D1:AB9F 09 -  -  -  	add hl,bc
  151 D1:ABA0 7E -  -  -  	ld a,(hl);loops to skip
  152 D1:ABA1 32 C4 AB D1 	ld (dsstc_loops_skipped),a
  153 D1:ABA5 D9 -  -  -  	exx
  154 D1:ABA6 47 -  -  -  	ld b,a;loops to skip
  155 D1:ABA7 D9 -  -  -  	exx
  156 D1:ABA8 E1 -  -  -  	pop hl
  157 D1:ABA9 4E -  -  -  	ld c,(hl)
  158 D1:ABAA 09 -  -  -  	add hl,bc;total loops
  159 D1:ABAB 7E -  -  -  	ld a,(hl);total loops
  160 D1:ABAC 23 -  -  -  	inc hl;gap length
  161 D1:ABAD -  -  -  -  
  162 D1:ABAD -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  163 D1:ABAD D9 -  -  -  	exx
  164 D1:ABAE -  -  -  -  slow_sprite_data_traverse:
  165 D1:ABAE D9 -  -  -  	exx
  166 D1:ABAF 4E -  -  -  	ld c,(hl);gap length
  167 D1:ABB0 EB -  -  -  	ex de,hl;hl is vram
  168 D1:ABB1 09 -  -  -  	add hl,bc
  169 D1:ABB2 EB -  -  -  	ex de,hl
  170 D1:ABB3 -  -  -  -  	
  171 D1:ABB3 23 -  -  -  	inc hl
  172 D1:ABB4 23 -  -  -  	inc hl
  173 D1:ABB5 23 -  -  -  	inc hl;ldir length
  174 D1:ABB6 4E -  -  -  	ld c,(hl)
  175 D1:ABB7 09 -  -  -  	add hl,bc
  176 D1:ABB8 EB -  -  -  	ex de,hl
  177 D1:ABB9 09 -  -  -  	add hl,bc
  178 D1:ABBA EB -  -  -  	ex de,hl
  179 D1:ABBB 13 -  -  -  	inc de;single pix
  180 D1:ABBC 23 -  -  -  	inc hl
  181 D1:ABBD 23 -  -  -  	inc hl
  182 D1:ABBE 23 -  -  -  	inc hl;gap length
  183 D1:ABBF D9 -  -  -  	exx
  184 D1:ABC0 10 EC -  -  	djnz slow_sprite_data_traverse
  185 D1:ABC2 D9 -  -  -  	exx
  186 D1:ABC3 -  -  -  -  
  187 D1:ABC3 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  188 D1:ABC3 D6 00 -  -  	sub a,0;loops skipped
  189 D1:ABC5 D9 -  -  -  	exx
  190 D1:ABC6 4F -  -  -  	ld c,a
  191 D1:ABC7 D9 -  -  -  	exx
  192 D1:ABC8 -  -  -  -  	
  193 D1:ABC8 1B -  -  -  	dec de
  194 D1:ABC9 2B -  -  -  	dec hl	
  195 D1:ABCA C3 75 AB D1 	jp dsfgs_line_loop
  196 D1:ABCE -  -  -  -  	
  197 D1:ABCE -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  198 D1:ABCE -  -  -  -  draw_slow_sprite_bottom_cut:
  199 D1:ABCE 01 00 00 00 	ld bc,0
  200 D1:ABD2 E5 -  -  -  	push hl
  201 D1:ABD3 4F -  -  -  	ld c,a;height
  202 D1:ABD4 09 -  -  -  	add hl,bc
  203 D1:ABD5 7E -  -  -  	ld a,(hl);num loops
  204 D1:ABD6 D9 -  -  -  	exx
  205 D1:ABD7 4F -  -  -  	ld c,a
  206 D1:ABD8 D9 -  -  -  	exx
  207 D1:ABD9 E1 -  -  -  	pop hl
  208 D1:ABDA 4E -  -  -  	ld c,(hl)
  209 D1:ABDB 09 -  -  -  	add hl,bc
  210 D1:ABDC -  -  -  -  
  211 D1:ABDC 1B -  -  -  	dec de
  212 D1:ABDD C3 75 AB D1 	jp dsfgs_line_loop
  213 D1:ABE1 -  -  -  -  
  214 D1:ABE1 -  -  -  -  
  215 D1:ABE1 -  -  -  -  
  216 D1:ABE1 -  -  -  -  
  217 D1:ABE1 -  -  -  -  
  218 D1:ABE1 -  -  -  -  
  219 D1:ABE1 -  -  -  -  
  220 D1:ABE1 -  -  -  -  
  221 D1:ABE1 -  -  -  -  
  222 D1:ABE1 -  -  -  -  
  223 D1:ABE1 -  -  -  -  
  224 D1:ABE1 -  -  -  -  
  225 D1:ABE1 -  -  -  -  
  226 D1:ABE1 -  -  -  -  
  227 D1:ABE1 -  -  -  -  
  228 D1:ABE1 -  -  -  -  
  229 D1:ABE1 -  -  -  -  
  230 D1:ABE1 -  -  -  -  
  231 D1:ABE1 -  -  -  -  
  232 D1:ABE1 -  -  -  -  
  233 D1:ABE1 -  -  -  -  
  234 D1:ABE1 -  -  -  -  
  235 D1:ABE1 -  -  -  -  
  236 D1:ABE1 -  -  -  -  
  237 D1:ABE1 -  -  -  -  
  238 D1:ABE1 -  -  -  -  
  239 D1:ABE1 -  -  -  -  
  240 D1:ABE1 -  -  -  -  
  241 D1:ABE1 -  -  -  -  
  242 D1:ABE1 -  -  -  -  
  243 D1:ABE1 -  -  -  -  
  244 D1:ABE1 -  -  -  -  
  245 D1:ABE1 -  -  -  -  
  246 D1:ABE1 -  -  -  -  
  247 D1:ABE1 -  -  -  -  
  248 D1:ABE1 -  -  -  -   
  249 D1:ABE1 -  -  -  -  
  250 D1:ABE1 -  -  -  -  
  251 D1:ABE1 -  -  -  -  
  252 D1:ABE1 -  -  -  -  
  253 D1:ABE1 -  -  -  -  
  254 D1:ABE1 -  -  -  -  
  255 D1:ABE1 -  -  -  -  
  256 D1:ABE1 -  -  -  -  
  257 D1:ABE1 -  -  -  -  
  258 D1:ABE1 -  -  -  -  
  259 D1:ABE1 -  -  -  -  
  260 D1:ABE1 -  -  -  -  
  261 D1:ABE1 -  -  -  -  
  262 D1:ABE1 -  -  -  -  
  263 D1:ABE1 -  -  -  -  
  264 D1:ABE1 -  -  -  -  
  265 D1:ABE1 -  -  -  -  
  266 D1:ABE1 -  -  -  -  
  267 D1:ABE1 -  -  -  -  
  268 D1:ABE1 -  -  -  -  
  269 D1:ABE1 -  -  -  -  
  270 D1:ABE1 -  -  -  -  
  271 D1:ABE1 -  -  -  -  
  272 D1:ABE1 -  -  -  -  
  273 D1:ABE1 -  -  -  -  
  274 D1:ABE1 -  -  -  -  
  275 D1:ABE1 -  -  -  -  
  276 D1:ABE1 -  -  -  -  
  277 D1:ABE1 -  -  -  -  
  278 D1:ABE1 -  -  -  -  
  279 D1:ABE1 -  -  -  -  
  280 D1:ABE1 -  -  -  -  
  281 D1:ABE1 -  -  -  -  
  282 D1:ABE1 -  -  -  -  
  283 D1:ABE1 -  -  -  -  
  284 D1:ABE1 -  -  -  -  
  285 D1:ABE1 -  -  -  -  
  286 D1:ABE1 -  -  -  -  
  287 D1:ABE1 -  -  -  -  
  288 D1:ABE1 -  -  -  -  
  289 D1:ABE1 -  -  -  -  
  290 D1:ABE1 -  -  -  -  
  291 D1:ABE1 -  -  -  -  
  292 D1:ABE1 -  -  -  -  
  293 D1:ABE1 -  -  -  -  
  294 D1:ABE1 -  -  -  -  
  295 D1:ABE1 -  -  -  -  
  296 D1:ABE1 -  -  -  -  
  297 D1:ABE1 -  -  -  -  
  298 D1:ABE1 -  -  -  -  
  299 D1:ABE1 -  -  -  -  
  300 D1:ABE1 -  -  -  -  
  301 D1:ABE1 -  -  -  -  
  302 D1:ABE1 -  -  -  -  
  303 D1:ABE1 -  -  -  -  
  304 D1:ABE1 -  -  -  -  	
  305 D1:ABE1 -  -  -  -  	
Listing for file "ascent.asm"
  298 D1:ABE1 -  -  -  -  #include "spriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteData.txt"
    1 D1:ABE1 -  -  -  -  
    2 D1:ABE1 -  -  -  -  
    3 D1:ABE1 -  -  -  -  
    4 D1:ABE1 -  -  -  -  
    5 D1:ABE1 -  -  -  -  ;BG SPRITES
    6 D1:ABE1 -  -  -  -  ; width(px) rounded up
    7 D1:ABE1 -  -  -  -  ;.db vram data mask, color data....
    8 D1:ABE1 -  -  -  -  
    9 D1:ABE1 -  -  -  -  testBGSprite:
   10 D1:ABE1 0A -  -  -  	.db 10
   11 D1:ABE2 00 35 FF 00 
              F0 03 0F 50 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$50,$F0,$05
   12 D1:ABEC FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   13 D1:ABF6 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   14 D1:AC00 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   15 D1:AC0A FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   16 D1:AC14 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   17 D1:AC1E 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   18 D1:AC28 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03	
   19 D1:AC32 -  -  -  -  ;53xx3xx55
   20 D1:AC32 -  -  -  -  ;xxxxxx323
   21 D1:AC32 -  -  -  -  ;222233x32
   22 D1:AC32 -  -  -  -  ;53xx3xx55
   23 D1:AC32 -  -  -  -  ;xxxxxx323	
   24 D1:AC32 -  -  -  -  ;222233x32
   25 D1:AC32 -  -  -  -  
   26 D1:AC32 -  -  -  -  
   27 D1:AC32 -  -  -  -  	
   28 D1:AC32 -  -  -  -  ;FG _ SPRITES
   29 D1:AC32 -  -  -  -  
   30 D1:AC32 -  -  -  -  ;YBRGW
   31 D1:AC32 -  -  -  -  
   32 D1:AC32 -  -  -  -  ;SLOW_Sprite,  even pixel start
   33 D1:AC32 -  -  -  -  ;.height
   34 D1:AC32 -  -  -  -  ;.num loops per num lines
   35 D1:AC32 -  -  -  -  
   36 D1:AC32 -  -  -  -  ;.db alpha length(gap between single pixels, 0 for a gap of -1, 1 for no gap),single pixel mask(%00001111) or (%11111111) single pixel data (%data0000) or (%00000000),
   37 D1:AC32 -  -  -  -  ; ldir length, main pixel data,pixel mask,pixel data.....
   38 D1:AC32 -  -  -  -  
   39 D1:AC32 -  -  -  -  testSlowSprite:
   40 D1:AC32 05 -  -  -  	.db 5
   41 D1:AC33 02 04 07 0B 
              0C -  -  -  	.db 2,4,7,11,12
   42 D1:AC38 00 FF 00 02 
              35 35 FF 00 
              00 FF 00 02 
              24 24 FF 00 	.db 0,%11111111,%00000000,2,$35,$35,%11111111,%00000000,0,%11111111,%00000000,2,$24,$24,%11111111,%00000000
   43 D1:AC48 9B FF 00 02 
              31 31 F0 01 
              01 FF 00 01 
              11 FF 00 -  	.db 155, %11111111,%00000000,2,$31,$31,%11110000,$01,1,%11111111,%00000000,1,$11,%11111111,%00000000
   44 D1:AC57 9A 0F 50 01 
              53 FF 00 00 
              FF 00 01 35 
              F0 05 01 0F 
              50 00 FF 00 	.db 154,%00001111,$50,1,$53,%11111111,%00000000,0,%11111111,%00000000,1,$35,%11110000,$05,1,%00001111,$50,0,%11111111,%00000000
   45 D1:AC6B 9A 0F 30 00 
              F0 03 00 FF 
              00 00 F0 03 
              01 0F 30 00 
              7F 00 00 0F 
              30 00 FF 00 	.db 154,%00001111,$30,0,%11110000,$03,0,%11111111,%00000000,0,%11110000,$03,1,%00001111,$30,0,%1111111,00000000,0,%00001111,$30,0,%11111111,%00000000
   46 D1:AC83 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   47 D1:AC8D -  -  -  -  	
   48 D1:AC8D -  -  -  -  	;WRWRXXGBGBXX
   49 D1:AC8D -  -  -  -  	
   50 D1:AC8D -  -  -  -  	;XXYRYRYXXXYY
   51 D1:AC8D -  -  -  -  	
   52 D1:AC8D -  -  -  -  	;XW RW XX WR WX XW
   53 D1:AC8D -  -  -  -  	
   54 D1:AC8D -  -  -  -  	;XR RX RX XR XR XX
   55 D1:AC8D -  -  -  -  	
   56 D1:AC8D -  -  -  -  	;XW WW WW WW WW WX
   57 D1:AC8D -  -  -  -  	
   58 D1:AC8D -  -  -  -  	
   59 D1:AC8D -  -  -  -  testSlowSpriteBestCase:
   60 D1:AC8D 05 -  -  -  	.db 5
   61 D1:AC8E 01 02 03 04 
              05 -  -  -  	.db 1,2,3,4,5
   62 D1:AC93 00 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 0,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   63 D1:AC9D 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   64 D1:ACA7 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   65 D1:ACB1 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   66 D1:ACBB 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   67 D1:ACC5 -  -  -  -  	
   68 D1:ACC5 -  -  -  -  ;XW WW WW WW WW WX
   69 D1:ACC5 -  -  -  -  ;XW WW WW WW WW WX
   70 D1:ACC5 -  -  -  -  ;XW WW WW WW WW WX
   71 D1:ACC5 -  -  -  -  ;XW WW WW WW WW WX
   72 D1:ACC5 -  -  -  -  ;XW WW WW WW WW WX
   73 D1:ACC5 -  -  -  -  
   74 D1:ACC5 -  -  -  -  ;YBRGW
   75 D1:ACC5 -  -  -  -  
   76 D1:ACC5 -  -  -  -  ;.db flags ( 4bpc,3bpc,2bpc,1bpc,0bpc,noalpha
   77 D1:ACC5 -  -  -  -  ;.db width(px),height
   78 D1:ACC5 -  -  -  -  ;.db alpha data 
   79 D1:ACC5 -  -  -  -  ;.db color data
   80 D1:ACC5 -  -  -  -  
   81 D1:ACC5 -  -  -  -  	
   82 D1:ACC5 -  -  -  -  testSpriteCompressed:
   83 D1:ACC5 80 -  -  -  	.db %10000000;4bpc
   84 D1:ACC6 08 08 -  -  	.db 8,8
   85 D1:ACC8 -  -  -  -  ;.db $33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22
   86 D1:ACC8 7E -  -  -  	.db %01111110;1
   87 D1:ACC9 66 -  -  -  	.db %01100110;2
   88 D1:ACCA CE -  -  -  	.db %11001110;2
   89 D1:ACCB 55 -  -  -  	.db %01010101;2
   90 D1:ACCC AA -  -  -  	.db %10101010;2
   91 D1:ACCD 6E -  -  -  	.db %01101110;2
   92 D1:ACCE 3B -  -  -  	.db %00111011;2
   93 D1:ACCF 67 -  -  -  	.db %01100111;2
   94 D1:ACD0 53 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 -  	.db $53,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55;indexed color data
   95 D1:ACF7 -  -  -  -  	;1 3 5 7 9 11 13 15
   96 D1:ACF7 -  -  -  -  	
   97 D1:ACF7 -  -  -  -  testSpriteCompressed2:
   98 D1:ACF7 03 04 -  -  	.db 3,4
   99 D1:ACF9 CD 50 -  -  	.db %11001101,%01010000
  100 D1:ACFB 23 23 23 23 
              23 -  -  -  	.db $23,$23,$23,$23,$23
  101 D1:AD00 -  -  -  -  	;110
  102 D1:AD00 -  -  -  -  	;011
  103 D1:AD00 -  -  -  -  	;010
  104 D1:AD00 -  -  -  -  	;101
  105 D1:AD00 -  -  -  -  	
  106 D1:AD00 -  -  -  -  
  107 D1:AD00 -  -  -  -  testSpriteCompressed3:
  108 D1:AD00 05 04 -  -  	.db 5,4
  109 D1:AD02 76 B2 70 -  	.db %01110110,%10110010,%01110000
  110 D1:AD05 55 55 55 55 
              55 55 55 -  	.db $55,$55,$55,$55,$55,$55,$55
  111 D1:AD0C -  -  -  -  	;01110
  112 D1:AD0C -  -  -  -  	;11010
  113 D1:AD0C -  -  -  -  	;11001
  114 D1:AD0C -  -  -  -  	;00111
  115 D1:AD0C -  -  -  -  
  116 D1:AD0C -  -  -  -  
  117 D1:AD0C -  -  -  -  testSpriteCompressed4:
  118 D1:AD0C 40 -  -  -  	.db %01000000;3bpc
  119 D1:AD0D 09 04 -  -  	.db 9,4
  120 D1:AD0F 9D 5F F6 82 
              B0 -  -  -  	.db %10011101,%01011111,%11110110,%10000010,%10110000
  121 D1:AD14 54 32 10 33 	.db $54,$32,$10,$33
  122 D1:AD18 E3 8E 38 E3 
              8E 38 E3 8E 
              38 E3 E3 8E 
              38 E3 8E 38 
              E3 8E 38 E3 	.db %11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011
  123 D1:AD2C -  -  -  -  ;100111010  2 loop
  124 D1:AD2C -  -  -  -  ;101111111  1 loop
  125 D1:AD2C -  -  -  -  ;110110100  2 loop
  126 D1:AD2C -  -  -  -  ;000101011  2 loop
  127 D1:AD2C -  -  -  -  ;2357
  128 D1:AD2C -  -  -  -  testSpriteCompressedFast:
  129 D1:AD2C 20 -  -  -  	.db %00100000;4bpc
  130 D1:AD2D 08 08 -  -  	.db 8,8
  131 D1:AD2F F0 -  -  -  	.db %11110000
  132 D1:AD30 33 -  -  -  	.db %00110011
  133 D1:AD31 C3 -  -  -  	.db %11000011
  134 D1:AD32 FF -  -  -  	.db %11111111
  135 D1:AD33 F3 -  -  -  	.db %11110011
  136 D1:AD34 CC -  -  -  	.db %11001100
  137 D1:AD35 C0 -  -  -  	.db %11000000
  138 D1:AD36 3F -  -  -  	.db %00111111
  139 D1:AD37 54 32 -  -  	.db $54,$32
  140 D1:AD39 C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 -  -  -  	.db %11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001
  141 D1:AD52 -  -  -  -  	
  142 D1:AD52 -  -  -  -  	
  143 D1:AD52 55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 	.db $55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22
  144 D1:AD76 -  -  -  -  	
  145 D1:AD76 -  -  -  -  ;FAST_SPRITE	
  146 D1:AD76 -  -  -  -  ;double pixel transparency, no gaps
  147 D1:AD76 -  -  -  -  ;.db height
  148 D1:AD76 -  -  -  -  ;.db num loops for num lines
  149 D1:AD76 -  -  -  -  ;.db to next ldir start, color length, data
  150 D1:AD76 -  -  -  -  
  151 D1:AD76 -  -  -  -  test_fast_sprite:;20x4px,complex
  152 D1:AD76 04 -  -  -  	.db 4
  153 D1:AD77 02 06 07 09 	.db 2,6,7,9
  154 D1:AD7B 02 02 12 45 
              03 04 33 32 
              45 44 -  -  	.db 2,2,%00010010,%01000101,3,4,%00110011,%00110010,%01000101,%01000100 ;gap, length,    						XXBYWGXXXXXXRRBRWGGG
  155 D1:AD85 97 02 21 21 
              01 02 35 35 
              01 01 43 01 
              01 35 -  -  	.db 151,2,%00100001,%00100001,1,2,%00110101,%00110101,1,1,%01000011,1,1,%00110101; 								XXYBYBXXWRWRXXRGXXWR
  156 D1:AD93 96 0A 35 35 
              45 45 12 12 
              34 34 34 34 	.db 150,10,%00110101,%00110101,%01000101,%01000101,%00010010,%00010010,%00110100,%00110100,%00110100,%00110100; WRWRWGWGBYBYGRGRGRGR
  157 D1:AD9F 98 05 55 11 
              22 33 44 01 
              02 44 53 -  	.db 152,5,%01010101,%00010001,%00100010,%00110011,%01000100,1,2,%01000100,%01010011;							XXXXWWYYBBRRGGXXGGRW
  158 D1:ADAA -  -  -  -  
  159 D1:ADAA -  -  -  -  
  160 D1:ADAA -  -  -  -  
  161 D1:ADAA -  -  -  -  ;COMPLEX_SPRITE
  162 D1:ADAA -  -  -  -  ;16 color, per pixel transparency, even or odd start
  163 D1:ADAA -  -  -  -  
  164 D1:ADAA -  -  -  -  
  165 D1:ADAA -  -  -  -  
  166 D1:ADAA -  -  -  -  
  167 D1:ADAA -  -  -  -  
  168 D1:ADAA -  -  -  -  
  169 D1:ADAA -  -  -  -  
  170 D1:ADAA -  -  -  -  
  171 D1:ADAA -  -  -  -  
  172 D1:ADAA -  -  -  -  
  173 D1:ADAA -  -  -  -  
  174 D1:ADAA -  -  -  -  
  175 D1:ADAA -  -  -  -  
  176 D1:ADAA -  -  -  -  
  177 D1:ADAA -  -  -  -  
  178 D1:ADAA -  -  -  -  
  179 D1:ADAA -  -  -  -  
  180 D1:ADAA -  -  -  -  
  181 D1:ADAA -  -  -  -  	
Listing for file "ascent.asm"
  299 D1:ADAA -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:ADAA -  -  -  -  bg_sprite_indices:
    2 D1:ADAA -  -  -  -  	;.dl testSprite
    3 D1:ADAA -  -  -  -  	;.dl testSprite2
    4 D1:ADAA -  -  -  -  	;.dl sprite data
    5 D1:ADAA -  -  -  -  
    6 D1:ADAA -  -  -  -  
    7 D1:ADAA -  -  -  -  
    8 D1:ADAA -  -  -  -  
    9 D1:ADAA -  -  -  -  bg_data:
   10 D1:ADAA -  -  -  -  
   11 D1:ADAA -  -  -  -  	;y y 
   12 D1:ADAA -  -  -  -  	;x (byte) 
   13 D1:ADAA -  -  -  -  	;flags  (7 = odd pixel  6 = spriteFlip , 0 = data cont)    0 to end data   if sprite starts on even pixel, inc x by 1
   14 D1:ADAA -  -  -  -  	;height
   15 D1:ADAA -  -  -  -  	;index
   16 D1:ADAA -  -  -  -  	
   17 D1:ADAA -  -  -  -  	
   18 D1:ADAA -  -  -  -  	;even pixel noflip  x = (pixel - 1) /2
   19 D1:ADAA -  -  -  -  	;odd pixel noflip   x = (pixel) /2
   20 D1:ADAA -  -  -  -  	
   21 D1:ADAA -  -  -  -  	;even pixel, flip, odd width   x = (pixel + width)/2
   22 D1:ADAA -  -  -  -  	;odd pixel, flip, odd width	   x = (pixel + width)/2
   23 D1:ADAA -  -  -  -  	
   24 D1:ADAA -  -  -  -  	
   25 D1:ADAA -  -  -  -  	;even pixel, flip, even width   x = (pixel + width)/2
   26 D1:ADAA -  -  -  -  	;odd pixel, flip, even width	   x = (pixel + width)/2
   27 D1:ADAA -  -  -  -  	
   28 D1:ADAA -  -  -  -  	
   29 D1:ADAA -  -  -  -  	
   30 D1:ADAA -  -  -  -  	
   31 D1:ADAA -  -  -  -  	
   32 D1:ADAA -  -  -  -  	;6 bytes
   33 D1:ADAA 00 84 -  -  	.db $00,$84
   34 D1:ADAC 05 -  -  -  	.db 5
   35 D1:ADAD 01 -  -  -  	.db %00000001
   36 D1:ADAE 05 -  -  -  	.db 5
   37 D1:ADAF 00 -  -  -  	.db 0
   38 D1:ADB0 -  -  -  -  	
   39 D1:ADB0 00 84 -  -  	.db $00,$84
   40 D1:ADB2 0A -  -  -  	.db 10
   41 D1:ADB3 81 -  -  -  	.db %10000001
   42 D1:ADB4 05 -  -  -  	.db 5
   43 D1:ADB5 00 -  -  -  	.db 0
   44 D1:ADB6 -  -  -  -  	
   45 D1:ADB6 00 83 -  -  	.db $00,$83
   46 D1:ADB8 14 -  -  -  	.db 20
   47 D1:ADB9 41 -  -  -  	.db %01000001
   48 D1:ADBA 05 -  -  -  	.db 5
   49 D1:ADBB 00 -  -  -  	.db 0
   50 D1:ADBC -  -  -  -  	
   51 D1:ADBC 00 83 -  -  	.db $00,$83
   52 D1:ADBE 1E -  -  -  	.db 30
   53 D1:ADBF C1 -  -  -  	.db %11000001
   54 D1:ADC0 05 -  -  -  	.db 5
   55 D1:ADC1 00 -  -  -  	.db 0
   56 D1:ADC2 -  -  -  -  	
   57 D1:ADC2 -  -  -  -  	
   58 D1:ADC2 00 80 -  -  	.db $00,$80
   59 D1:ADC4 05 -  -  -  	.db 5
   60 D1:ADC5 01 -  -  -  	.db %00000001
   61 D1:ADC6 05 -  -  -  	.db 5
   62 D1:ADC7 00 -  -  -  	.db 0
   63 D1:ADC8 -  -  -  -  	
   64 D1:ADC8 00 81 -  -  	.db $00,$81
   65 D1:ADCA 0A -  -  -  	.db 10
   66 D1:ADCB 81 -  -  -  	.db %10000001
   67 D1:ADCC 05 -  -  -  	.db 5
   68 D1:ADCD 00 -  -  -  	.db 0
   69 D1:ADCE -  -  -  -  	
   70 D1:ADCE 00 80 -  -  	.db $00,$80
   71 D1:ADD0 14 -  -  -  	.db 20
   72 D1:ADD1 41 -  -  -  	.db %01000001
   73 D1:ADD2 05 -  -  -  	.db 5
   74 D1:ADD3 00 -  -  -  	.db 0
   75 D1:ADD4 -  -  -  -  	
   76 D1:ADD4 00 81 -  -  	.db $00,$81
   77 D1:ADD6 1E -  -  -  	.db 30
   78 D1:ADD7 C1 -  -  -  	.db %11000001
   79 D1:ADD8 05 -  -  -  	.db 5
   80 D1:ADD9 00 -  -  -  	.db 0
   81 D1:ADDA -  -  -  -  	
   82 D1:ADDA -  -  -  -  	
   83 D1:ADDA 00 98 -  -  	.db $00,$98
   84 D1:ADDC 05 -  -  -  	.db 5
   85 D1:ADDD 01 -  -  -  	.db %00000001
   86 D1:ADDE 05 -  -  -  	.db 5
   87 D1:ADDF 00 -  -  -  	.db 0
   88 D1:ADE0 -  -  -  -  	
   89 D1:ADE0 00 98 -  -  		.db $00,$98
   90 D1:ADE2 05 -  -  -  	.db 5
   91 D1:ADE3 01 -  -  -  	.db %00000001
   92 D1:ADE4 05 -  -  -  	.db 5
   93 D1:ADE5 00 -  -  -  	.db 0
   94 D1:ADE6 00 98 -  -  		.db $00,$98
   95 D1:ADE8 05 -  -  -  	.db 5
   96 D1:ADE9 01 -  -  -  	.db %00000001
   97 D1:ADEA 05 -  -  -  	.db 5
   98 D1:ADEB 00 -  -  -  	.db 0
   99 D1:ADEC 00 98 -  -  		.db $00,$98
  100 D1:ADEE 05 -  -  -  	.db 5
  101 D1:ADEF 01 -  -  -  	.db %00000001
  102 D1:ADF0 05 -  -  -  	.db 5
  103 D1:ADF1 00 -  -  -  	.db 0
  104 D1:ADF2 00 98 -  -  		.db $00,$98
  105 D1:ADF4 05 -  -  -  	.db 5
  106 D1:ADF5 01 -  -  -  	.db %00000001
  107 D1:ADF6 05 -  -  -  	.db 5
  108 D1:ADF7 00 -  -  -  	.db 0
  109 D1:ADF8 00 98 -  -  		.db $00,$98
  110 D1:ADFA 05 -  -  -  	.db 5
  111 D1:ADFB 01 -  -  -  	.db %00000001
  112 D1:ADFC 05 -  -  -  	.db 5
  113 D1:ADFD 00 -  -  -  	.db 0
  114 D1:ADFE 00 98 -  -  		.db $00,$98
  115 D1:AE00 05 -  -  -  	.db 5
  116 D1:AE01 01 -  -  -  	.db %00000001
  117 D1:AE02 05 -  -  -  	.db 5
  118 D1:AE03 00 -  -  -  	.db 0
  119 D1:AE04 00 98 -  -  		.db $00,$98
  120 D1:AE06 05 -  -  -  	.db 5
  121 D1:AE07 01 -  -  -  	.db %00000001
  122 D1:AE08 05 -  -  -  	.db 5
  123 D1:AE09 00 -  -  -  	.db 0
  124 D1:AE0A 00 98 -  -  		.db $00,$98
  125 D1:AE0C 05 -  -  -  	.db 5
  126 D1:AE0D 01 -  -  -  	.db %00000001
  127 D1:AE0E 05 -  -  -  	.db 5
  128 D1:AE0F 00 -  -  -  	.db 0
  129 D1:AE10 00 98 -  -  		.db $00,$98
  130 D1:AE12 05 -  -  -  	.db 5
  131 D1:AE13 01 -  -  -  	.db %00000001
  132 D1:AE14 05 -  -  -  	.db 5
  133 D1:AE15 00 -  -  -  	.db 0
  134 D1:AE16 00 98 -  -  		.db $00,$98
  135 D1:AE18 05 -  -  -  	.db 5
  136 D1:AE19 01 -  -  -  	.db %00000001
  137 D1:AE1A 05 -  -  -  	.db 5
  138 D1:AE1B 00 -  -  -  	.db 0
  139 D1:AE1C 00 98 -  -  		.db $00,$98
  140 D1:AE1E 05 -  -  -  	.db 5
  141 D1:AE1F 01 -  -  -  	.db %00000001
  142 D1:AE20 05 -  -  -  	.db 5
  143 D1:AE21 00 -  -  -  	.db 0
  144 D1:AE22 00 98 -  -  		.db $00,$98
  145 D1:AE24 05 -  -  -  	.db 5
  146 D1:AE25 01 -  -  -  	.db %00000001
  147 D1:AE26 05 -  -  -  	.db 5
  148 D1:AE27 00 -  -  -  	.db 0
  149 D1:AE28 00 98 -  -  		.db $00,$98
  150 D1:AE2A 05 -  -  -  	.db 5
  151 D1:AE2B 01 -  -  -  	.db %00000001
  152 D1:AE2C 05 -  -  -  	.db 5
  153 D1:AE2D 00 -  -  -  	.db 0
  154 D1:AE2E 00 98 -  -  		.db $00,$98
  155 D1:AE30 05 -  -  -  	.db 5
  156 D1:AE31 01 -  -  -  	.db %00000001
  157 D1:AE32 05 -  -  -  	.db 5
  158 D1:AE33 00 -  -  -  	.db 0
  159 D1:AE34 00 98 -  -  		.db $00,$98
  160 D1:AE36 05 -  -  -  	.db 5
  161 D1:AE37 01 -  -  -  	.db %00000001
  162 D1:AE38 05 -  -  -  	.db 5
  163 D1:AE39 00 -  -  -  	.db 0
  164 D1:AE3A 00 98 -  -  		.db $00,$98
  165 D1:AE3C 05 -  -  -  	.db 5
  166 D1:AE3D 01 -  -  -  	.db %00000001
  167 D1:AE3E 05 -  -  -  	.db 5
  168 D1:AE3F 00 -  -  -  	.db 0
  169 D1:AE40 -  -  -  -  	
  170 D1:AE40 00 98 -  -  			.db $00,$98
  171 D1:AE42 05 -  -  -  	.db 5
  172 D1:AE43 01 -  -  -  	.db %00000001
  173 D1:AE44 05 -  -  -  	.db 5
  174 D1:AE45 00 -  -  -  	.db 0
  175 D1:AE46 00 98 -  -  		.db $00,$98
  176 D1:AE48 05 -  -  -  	.db 5
  177 D1:AE49 01 -  -  -  	.db %00000001
  178 D1:AE4A 05 -  -  -  	.db 5
  179 D1:AE4B 00 -  -  -  	.db 0
  180 D1:AE4C 00 98 -  -  		.db $00,$98
  181 D1:AE4E 05 -  -  -  	.db 5
  182 D1:AE4F 01 -  -  -  	.db %00000001
  183 D1:AE50 05 -  -  -  	.db 5
  184 D1:AE51 00 -  -  -  	.db 0
  185 D1:AE52 00 98 -  -  		.db $00,$98
  186 D1:AE54 05 -  -  -  	.db 5
  187 D1:AE55 01 -  -  -  	.db %00000001
  188 D1:AE56 05 -  -  -  	.db 5
  189 D1:AE57 00 -  -  -  	.db 0
  190 D1:AE58 00 98 -  -  		.db $00,$98
  191 D1:AE5A 05 -  -  -  	.db 5
  192 D1:AE5B 01 -  -  -  	.db %00000001
  193 D1:AE5C 05 -  -  -  	.db 5
  194 D1:AE5D 00 -  -  -  	.db 0
  195 D1:AE5E 00 98 -  -  			.db $00,$98
  196 D1:AE60 05 -  -  -  	.db 5
  197 D1:AE61 01 -  -  -  	.db %00000001
  198 D1:AE62 05 -  -  -  	.db 5
  199 D1:AE63 00 -  -  -  	.db 0
  200 D1:AE64 00 98 -  -  		.db $00,$98
  201 D1:AE66 05 -  -  -  	.db 5
  202 D1:AE67 01 -  -  -  	.db %00000001
  203 D1:AE68 05 -  -  -  	.db 5
  204 D1:AE69 00 -  -  -  	.db 0
  205 D1:AE6A 00 98 -  -  		.db $00,$98
  206 D1:AE6C 05 -  -  -  	.db 5
  207 D1:AE6D 01 -  -  -  	.db %00000001
  208 D1:AE6E 05 -  -  -  	.db 5
  209 D1:AE6F 00 -  -  -  	.db 0
  210 D1:AE70 00 98 -  -  		.db $00,$98
  211 D1:AE72 05 -  -  -  	.db 5
  212 D1:AE73 01 -  -  -  	.db %00000001
  213 D1:AE74 05 -  -  -  	.db 5
  214 D1:AE75 00 -  -  -  	.db 0
  215 D1:AE76 00 98 -  -  		.db $00,$98
  216 D1:AE78 05 -  -  -  	.db 5
  217 D1:AE79 01 -  -  -  	.db %00000001
  218 D1:AE7A 05 -  -  -  	.db 5
  219 D1:AE7B 00 -  -  -  	.db 0
  220 D1:AE7C 00 98 -  -  			.db $00,$98
  221 D1:AE7E 05 -  -  -  	.db 5
  222 D1:AE7F 01 -  -  -  	.db %00000001
  223 D1:AE80 05 -  -  -  	.db 5
  224 D1:AE81 00 -  -  -  	.db 0
  225 D1:AE82 00 98 -  -  		.db $00,$98
  226 D1:AE84 05 -  -  -  	.db 5
  227 D1:AE85 01 -  -  -  	.db %00000001
  228 D1:AE86 05 -  -  -  	.db 5
  229 D1:AE87 00 -  -  -  	.db 0
  230 D1:AE88 00 98 -  -  		.db $00,$98
  231 D1:AE8A 05 -  -  -  	.db 5
  232 D1:AE8B 01 -  -  -  	.db %00000001
  233 D1:AE8C 05 -  -  -  	.db 5
  234 D1:AE8D 00 -  -  -  	.db 0
  235 D1:AE8E 00 98 -  -  		.db $00,$98
  236 D1:AE90 05 -  -  -  	.db 5
  237 D1:AE91 01 -  -  -  	.db %00000001
  238 D1:AE92 05 -  -  -  	.db 5
  239 D1:AE93 00 -  -  -  	.db 0
  240 D1:AE94 00 40 -  -  	.db $00,$40
  241 D1:AE96 05 -  -  -  	.db 5
  242 D1:AE97 01 -  -  -  	.db %00000001
  243 D1:AE98 05 -  -  -  	.db 5
  244 D1:AE99 00 -  -  -  	.db 0
  245 D1:AE9A 00 40 -  -  	.db $00,$40
  246 D1:AE9C 05 -  -  -  	.db 5
  247 D1:AE9D 01 -  -  -  	.db %00000001
  248 D1:AE9E 05 -  -  -  	.db 5
  249 D1:AE9F 00 -  -  -  	.db 0
  250 D1:AEA0 00 40 -  -  	.db $00,$40
  251 D1:AEA2 05 -  -  -  	.db 5
  252 D1:AEA3 01 -  -  -  	.db %00000001
  253 D1:AEA4 05 -  -  -  	.db 5
  254 D1:AEA5 00 -  -  -  	.db 0
  255 D1:AEA6 00 40 -  -  	.db $00,$40
  256 D1:AEA8 05 -  -  -  	.db 5
  257 D1:AEA9 01 -  -  -  	.db %00000001
  258 D1:AEAA 05 -  -  -  	.db 5
  259 D1:AEAB 00 -  -  -  	.db 0
  260 D1:AEAC 00 40 -  -  	.db $00,$40
  261 D1:AEAE 05 -  -  -  	.db 5
  262 D1:AEAF 01 -  -  -  	.db %00000001
  263 D1:AEB0 05 -  -  -  	.db 5
  264 D1:AEB1 00 -  -  -  	.db 0
  265 D1:AEB2 -  -  -  -  	
  266 D1:AEB2 00 40 -  -  		.db $00,$40
  267 D1:AEB4 05 -  -  -  	.db 5
  268 D1:AEB5 01 -  -  -  	.db %00000001
  269 D1:AEB6 05 -  -  -  	.db 5
  270 D1:AEB7 00 -  -  -  	.db 0
  271 D1:AEB8 00 40 -  -  	.db $00,$40
  272 D1:AEBA 05 -  -  -  	.db 5
  273 D1:AEBB 01 -  -  -  	.db %00000001
  274 D1:AEBC 05 -  -  -  	.db 5
  275 D1:AEBD 00 -  -  -  	.db 0
  276 D1:AEBE 00 40 -  -  	.db $00,$40
  277 D1:AEC0 05 -  -  -  	.db 5
  278 D1:AEC1 01 -  -  -  	.db %00000001
  279 D1:AEC2 05 -  -  -  	.db 5
  280 D1:AEC3 00 -  -  -  	.db 0
  281 D1:AEC4 00 40 -  -  	.db $00,$40
  282 D1:AEC6 05 -  -  -  	.db 5
  283 D1:AEC7 01 -  -  -  	.db %00000001
  284 D1:AEC8 05 -  -  -  	.db 5
  285 D1:AEC9 00 -  -  -  	.db 0
  286 D1:AECA 00 40 -  -  	.db $00,$40
  287 D1:AECC 05 -  -  -  	.db 5
  288 D1:AECD 01 -  -  -  	.db %00000001
  289 D1:AECE 05 -  -  -  	.db 5
  290 D1:AECF 00 -  -  -  	.db 0
  291 D1:AED0 00 40 -  -  		.db $00,$40
  292 D1:AED2 05 -  -  -  	.db 5
  293 D1:AED3 01 -  -  -  	.db %00000001
  294 D1:AED4 05 -  -  -  	.db 5
  295 D1:AED5 00 -  -  -  	.db 0
  296 D1:AED6 00 40 -  -  	.db $00,$40
  297 D1:AED8 05 -  -  -  	.db 5
  298 D1:AED9 01 -  -  -  	.db %00000001
  299 D1:AEDA 05 -  -  -  	.db 5
  300 D1:AEDB 00 -  -  -  	.db 0
  301 D1:AEDC 00 40 -  -  	.db $00,$40
  302 D1:AEDE 05 -  -  -  	.db 5
  303 D1:AEDF 01 -  -  -  	.db %00000001
  304 D1:AEE0 05 -  -  -  	.db 5
  305 D1:AEE1 00 -  -  -  	.db 0
  306 D1:AEE2 00 40 -  -  	.db $00,$40
  307 D1:AEE4 05 -  -  -  	.db 5
  308 D1:AEE5 01 -  -  -  	.db %00000001
  309 D1:AEE6 05 -  -  -  	.db 5
  310 D1:AEE7 00 -  -  -  	.db 0
  311 D1:AEE8 00 40 -  -  	.db $00,$40
  312 D1:AEEA 05 -  -  -  	.db 5
  313 D1:AEEB 01 -  -  -  	.db %00000001
  314 D1:AEEC 05 -  -  -  	.db 5
  315 D1:AEED 00 -  -  -  	.db 0
  316 D1:AEEE 00 40 -  -  		.db $00,$40
  317 D1:AEF0 05 -  -  -  	.db 5
  318 D1:AEF1 01 -  -  -  	.db %00000001
  319 D1:AEF2 05 -  -  -  	.db 5
  320 D1:AEF3 00 -  -  -  	.db 0
  321 D1:AEF4 00 40 -  -  	.db $00,$40
  322 D1:AEF6 05 -  -  -  	.db 5
  323 D1:AEF7 01 -  -  -  	.db %00000001
  324 D1:AEF8 05 -  -  -  	.db 5
  325 D1:AEF9 00 -  -  -  	.db 0
  326 D1:AEFA 00 40 -  -  	.db $00,$40
  327 D1:AEFC 05 -  -  -  	.db 5
  328 D1:AEFD 01 -  -  -  	.db %00000001
  329 D1:AEFE 05 -  -  -  	.db 5
  330 D1:AEFF 00 -  -  -  	.db 0
  331 D1:AF00 00 40 -  -  	.db $00,$40
  332 D1:AF02 05 -  -  -  	.db 5
  333 D1:AF03 01 -  -  -  	.db %00000001
  334 D1:AF04 05 -  -  -  	.db 5
  335 D1:AF05 00 -  -  -  	.db 0
  336 D1:AF06 00 40 -  -  	.db $00,$40
  337 D1:AF08 05 -  -  -  	.db 5
  338 D1:AF09 01 -  -  -  	.db %00000001
  339 D1:AF0A 05 -  -  -  	.db 5
  340 D1:AF0B 00 -  -  -  	.db 0
  341 D1:AF0C 00 40 -  -  		.db $00,$40
  342 D1:AF0E 05 -  -  -  	.db 5
  343 D1:AF0F 01 -  -  -  	.db %00000001
  344 D1:AF10 05 -  -  -  	.db 5
  345 D1:AF11 00 -  -  -  	.db 0
  346 D1:AF12 00 40 -  -  	.db $00,$40
  347 D1:AF14 05 -  -  -  	.db 5
  348 D1:AF15 01 -  -  -  	.db %00000001
  349 D1:AF16 05 -  -  -  	.db 5
  350 D1:AF17 00 -  -  -  	.db 0
  351 D1:AF18 00 40 -  -  	.db $00,$40
  352 D1:AF1A 05 -  -  -  	.db 5
  353 D1:AF1B 01 -  -  -  	.db %00000001
  354 D1:AF1C 05 -  -  -  	.db 5
  355 D1:AF1D 00 -  -  -  	.db 0
  356 D1:AF1E 00 40 -  -  	.db $00,$40
  357 D1:AF20 05 -  -  -  	.db 5
  358 D1:AF21 01 -  -  -  	.db %00000001
  359 D1:AF22 05 -  -  -  	.db 5
  360 D1:AF23 00 -  -  -  	.db 0
  361 D1:AF24 00 40 -  -  	.db $00,$40
  362 D1:AF26 05 -  -  -  	.db 5
  363 D1:AF27 01 -  -  -  	.db %00000001
  364 D1:AF28 05 -  -  -  	.db 5
  365 D1:AF29 00 -  -  -  	.db 0
  366 D1:AF2A -  -  -  -  	
  367 D1:AF2A -  -  -  -  	
  368 D1:AF2A -  -  -  -  	
  369 D1:AF2A -  -  -  -  	
  370 D1:AF2A -  -  -  -  	
  371 D1:AF2A -  -  -  -  	
  372 D1:AF2A 00 84 -  -  	.db $00,$84
  373 D1:AF2C 0A -  -  -  	.db 10
  374 D1:AF2D 80 -  -  -  	.db %10000000
  375 D1:AF2E 05 -  -  -  	.db 5
  376 D1:AF2F 00 -  -  -  	.db 0
  377 D1:AF30 -  -  -  -  
  378 D1:AF30 -  -  -  -  
  379 D1:AF30 -  -  -  -  	;.dl $000081
  380 D1:AF30 -  -  -  -  	;.db 10,%00001111
  381 D1:AF30 -  -  -  -  	;.db 5,0
  382 D1:AF30 -  -  -  -  		
  383 D1:AF30 00 00 00 00 
              00 -  -  -  	.db 0,0,0,0,0
Listing for file "ascent.asm"
  300 D1:AF35 -  -  -  -  #include "spriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteDecompress.txt"
    1 D1:AF35 -  -  -  -  
    2 D1:AF35 -  -  -  -  
    3 D1:AF35 -  -  -  -  ;hl = sprite data start, de = main data decompress location de' = loops/line data location
    4 D1:AF35 -  -  -  -  slow_sprite_decompress:
    5 D1:AF35 -  -  -  -  
    6 D1:AF35 3E D2 -  -  	ld a,%11010010;jp nc 
    7 D1:AF37 32 2A B0 D1 	ld (sdcomp_end_reached_flag),a;reset end reached flag
    8 D1:AF3B 3E 00 -  -  	ld a,0
    9 D1:AF3D 32 3A B0 D1 	ld (sdcomp_loop_counter) ,a;reset loop counter
   10 D1:AF41 CD 4B B4 D1 	call sdcomp_reset_noalpha
   11 D1:AF45 -  -  -  -  ;set bpc mode 
   12 D1:AF45 CB 7E -  -  	bit 7,(hl)
   13 D1:AF47 C4 F7 B2 D1 	call nz,sdcomp_set_4bpp 
   14 D1:AF4B CB 76 -  -  	bit 6,(hl)
   15 D1:AF4D C4 4A B3 D1 	call nz,sdcomp_set_3bpp 
   16 D1:AF51 CB 6E -  -  	bit 5,(hl)
   17 D1:AF53 C4 9B B3 D1 	call nz,sdcomp_set_2bpp 
   18 D1:AF57 CB 66 -  -  	bit 4,(hl)
   19 D1:AF59 C4 E4 B3 D1 	call nz,sdcomp_set_1bpp 
   20 D1:AF5D CB 5E -  -  	bit 3,(hl)
   21 D1:AF5F C4 23 B4 D1 	call nz,sdcomp_set_0bpp 
   22 D1:AF63 CB 56 -  -  	bit 2,(hl)
   23 D1:AF65 C4 3A B4 D1 	call nz,sdcomp_set_noalpha
   24 D1:AF69 23 -  -  -  	inc hl
   25 D1:AF6A -  -  -  -  	
   26 D1:AF6A -  -  -  -  	
   27 D1:AF6A -  -  -  -  ;set zeroes btwn lines
   28 D1:AF6A 7E -  -  -  	ld a,(hl);width,in px
   29 D1:AF6B E5 -  -  -  	push hl 
   30 D1:AF6C 21 40 01 00 	ld hl,320
   31 D1:AF70 01 00 00 00 	ld bc,0
   32 D1:AF74 4F -  -  -  	ld c,a 
   33 D1:AF75 37 -  -  -  	scf 
   34 D1:AF76 3F -  -  -  	ccf 
   35 D1:AF77 ED 42 -  -  	sbc hl,bc;320 - width
   36 D1:AF79 22 6C B1 D1 	ld (sdcomp_zeroes_between_lines),hl
   37 D1:AF7D E1 -  -  -  	pop hl 
   38 D1:AF7E 47 -  -  -  	ld b,a;width
   39 D1:AF7F 08 -  -  -  	ex af,af' ;'
   40 D1:AF80 78 -  -  -  	ld a,b
   41 D1:AF81 32 A0 B1 D1 	ld (sdcomp_sprite_width),a
   42 D1:AF85 08 -  -  -  	ex af,af' ;'
   43 D1:AF86 -  -  -  -  
   44 D1:AF86 -  -  -  -  	
   45 D1:AF86 37 -  -  -  	scf 
   46 D1:AF87 -  -  -  -  sdcomp_bg_sprite_1 .equ $
   47 D1:AF87 DA 94 AF D1 	jp c,sdcomp_bg_sprite_1_skip
   48 D1:AF8B -  -  -  -  	;a holds width 
   49 D1:AF8B CB 47 -  -  	bit 0,a ;round up a 
   50 D1:AF8D CA 92 AF D1 	jp z,sdcomp_bg_sprite_1_round_skip
   51 D1:AF91 3C -  -  -  	inc a 
   52 D1:AF92 -  -  -  -  sdcomp_bg_sprite_1_round_skip:
   53 D1:AF92 12 -  -  -  	ld (de),a ;load width 
   54 D1:AF93 13 -  -  -  	inc de
   55 D1:AF94 -  -  -  -  sdcomp_bg_sprite_1_skip:
   56 D1:AF94 -  -  -  -  
   57 D1:AF94 -  -  -  -  
   58 D1:AF94 -  -  -  -  
   59 D1:AF94 -  -  -  -  
   60 D1:AF94 -  -  -  -  
   61 D1:AF94 23 -  -  -  	inc hl;to height
   62 D1:AF95 7E -  -  -  	ld a,(hl);height
   63 D1:AF96 32 5A B1 D1 	ld (sdcomp_lines_remaining),a;load remaining lines
   64 D1:AF9A -  -  -  -  	
   65 D1:AF9A 37 -  -  -  	scf 
   66 D1:AF9B -  -  -  -  sdcomp_bg_sprite_2 .equ $
   67 D1:AF9B D2 A1 AF D1 	jp nc,sdcomp_bg_sprite_2_skip
   68 D1:AF9F 12 -  -  -  	ld (de),a;height
   69 D1:AFA0 13 -  -  -  	inc de
   70 D1:AFA1 -  -  -  -  sdcomp_bg_sprite_2_skip:
   71 D1:AFA1 D5 -  -  -  	push de;loop/line data start 
   72 D1:AFA2 D9 -  -  -  	exx;to shadow
   73 D1:AFA3 D1 -  -  -  	pop de ;de' is loop/line data
   74 D1:AFA4 D9 -  -  -  	exx
   75 D1:AFA5 -  -  -  -  
   76 D1:AFA5 -  -  -  -  ;find start of color data
   77 D1:AFA5 23 -  -  -  	inc hl;alpha data start
   78 D1:AFA6 E5 -  -  -  	push hl
   79 D1:AFA7 -  -  -  -  	
   80 D1:AFA7 37 -  -  -  	scf
   81 D1:AFA8 -  -  -  -  sdcomp_no_alpha_1 .equ $
   82 D1:AFA8 D2 C1 AF D1 	jp nc, sdcomp_no_alpha_1_skip
   83 D1:AFAC E5 -  -  -  	push hl
   84 D1:AFAD 67 -  -  -  	ld h,a;height
   85 D1:AFAE 68 -  -  -  	ld l,b;width
   86 D1:AFAF ED 6C -  -  	mlt hl;number of pixels
   87 D1:AFB1 2B -  -  -  	dec hl
   88 D1:AFB2 CB 3C -  -  	srl h
   89 D1:AFB4 CB 1D -  -  	rr l
   90 D1:AFB6 CB 3C -  -  	srl h
   91 D1:AFB8 CB 1D -  -  	rr l 
   92 D1:AFBA CB 3C -  -  	srl h 
   93 D1:AFBC CB 1D -  -  	rr l ;divide by 8
   94 D1:AFBE 23 -  -  -  	inc hl 
   95 D1:AFBF C1 -  -  -  	pop bc
   96 D1:AFC0 09 -  -  -  	add hl,bc;hl holds start of color data
   97 D1:AFC1 -  -  -  -  sdcomp_no_alpha_1_skip:
   98 D1:AFC1 -  -  -  -  
   99 D1:AFC1 -  -  -  -  	;HL POINTING TO COLOR DATA
  100 D1:AFC1 -  -  -  -  
  101 D1:AFC1 -  -  -  -  	
  102 D1:AFC1 F5 -  -  -  	push af;save height
  103 D1:AFC2 -  -  -  -  	
  104 D1:AFC2 37 -  -  -  	scf 
  105 D1:AFC3 -  -  -  -  sdcomp_get_indexed_color_1bpc .equ $ 
  106 D1:AFC3 DA CD AF D1 	jp c,sdcomp_get_indexed_color_1bpc_skip
  107 D1:AFC7 7E -  -  -  	ld a,(hl);color data 
  108 D1:AFC8 32 1D B2 D1 	ld (sdcomp_indexed_color_data),a 
  109 D1:AFCC 23 -  -  -  	inc hl 
  110 D1:AFCD -  -  -  -  sdcomp_get_indexed_color_1bpc_skip:
  111 D1:AFCD -  -  -  -  
  112 D1:AFCD 37 -  -  -  	scf 
  113 D1:AFCE -  -  -  -  sdcomp_get_indexed_color_2bpc .equ $ 
  114 D1:AFCE DA D8 AF D1 	jp c,sdcomp_get_indexed_color_2bpc_skip
  115 D1:AFD2 7E -  -  -  	ld a,(hl);color data 
  116 D1:AFD3 32 1E B2 D1 	ld (sdcomp_indexed_color_data+1),a 
  117 D1:AFD7 23 -  -  -  	inc hl 
  118 D1:AFD8 -  -  -  -  sdcomp_get_indexed_color_2bpc_skip:
  119 D1:AFD8 -  -  -  -  
  120 D1:AFD8 37 -  -  -  	scf 
  121 D1:AFD9 -  -  -  -  sdcomp_get_indexed_color_3bpc .equ $ 
  122 D1:AFD9 DA E9 AF D1 	jp c,sdcomp_get_indexed_color_3bpc_skip
  123 D1:AFDD 7E -  -  -  	ld a,(hl);color data 
  124 D1:AFDE 32 1F B2 D1 	ld (sdcomp_indexed_color_data+2),a 
  125 D1:AFE2 23 -  -  -  	inc hl 
  126 D1:AFE3 7E -  -  -  	ld a,(hl);color data 
  127 D1:AFE4 32 20 B2 D1 	ld (sdcomp_indexed_color_data+3),a 
  128 D1:AFE8 23 -  -  -  	inc hl 
  129 D1:AFE9 -  -  -  -  sdcomp_get_indexed_color_3bpc_skip:
  130 D1:AFE9 -  -  -  -  
  131 D1:AFE9 F1 -  -  -  	pop af
  132 D1:AFEA EB -  -  -  	ex de,hl
  133 D1:AFEB 01 00 00 00 	ld bc,0
  134 D1:AFEF 4F -  -  -  	ld c,a;height 
  135 D1:AFF0 09 -  -  -  	add hl,bc
  136 D1:AFF1 EB -  -  -  	ex de,hl;de points to data write location
  137 D1:AFF2 -  -  -  -  	
  138 D1:AFF2 -  -  -  -  	
  139 D1:AFF2 D9 -  -  -  	exx;to shadow 
  140 D1:AFF3 E1 -  -  -  	pop hl;alpha data	
  141 D1:AFF4 -  -  -  -  
  142 D1:AFF4 -  -  -  -  	;HL IS POINTING TO ALPHA DATA
  143 D1:AFF4 0E 80 -  -  	ld c,%10000000;alpha mask
  144 D1:AFF6 D9 -  -  -  	exx;out 
  145 D1:AFF7 0E 80 -  -  	ld c,%10000000;color mask
  146 D1:AFF9 -  -  -  -  	
  147 D1:AFF9 -  -  -  -  	
  148 D1:AFF9 -  -  -  -  	
  149 D1:AFF9 37 -  -  -  	scf 
  150 D1:AFFA -  -  -  -  sdcomp_flip_1 .equ $
  151 D1:AFFA DA 1A B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  152 D1:AFFE -  -  -  -  
  153 D1:AFFE D9 -  -  -  	exx;to shadow 
  154 D1:AFFF 2B -  -  -  	dec hl;dec alpha pointer
  155 D1:B000 22 3E B2 D1 	ld (sdcomp_alpha_data_line_end_byte),hl 
  156 D1:B004 3E 01 -  -  	ld a,%00000001;alpha mask
  157 D1:B006 32 42 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a 
  158 D1:B00A D9 -  -  -  	exx ;out 
  159 D1:B00B 2B -  -  -  	dec hl;dec color pointer
  160 D1:B00C 22 37 B2 D1 	ld (sdcomp_color_data_line_end_byte),hl 
  161 D1:B010 3E 01 -  -  	ld a,%00000001;color mask
  162 D1:B012 32 3B B2 D1 	ld (sdcomp_color_data_line_end_mask),a 
  163 D1:B016 -  -  -  -  	
  164 D1:B016 -  -  -  -  
  165 D1:B016 -  -  -  -  	
  166 D1:B016 -  -  -  -  	
  167 D1:B016 CD 36 B2 D1 	call sdcomp_traverse_line_data	
  168 D1:B01A -  -  -  -  
  169 D1:B01A -  -  -  -  ;START OF LOOP===================================================================================================
  170 D1:B01A -  -  -  -  ;add amount to get from ending pixels to first nonzero pair
  171 D1:B01A -  -  -  -  sdcomp_find_gap_length:
  172 D1:B01A 37 -  -  -  	scf 
  173 D1:B01B -  -  -  -  sdcomp_bg_sprite_3 .equ $
  174 D1:B01B D2 A6 B4 D1 	jp nc,sdcomp_bg_sprite_routine
  175 D1:B01F -  -  -  -  	
  176 D1:B01F D9 -  -  -  	exx ;toshadow
  177 D1:B020 06 00 -  -  	ld b,0;pairs found, always < 255 
  178 D1:B022 -  -  -  -  sdcomp_add_1_gap_length .equ $
  179 D1:B022 00 -  -  -  	nop
  180 D1:B023 3E 00 -  -  	ld a,0;nop
  181 D1:B025 32 22 B0 D1 	ld (sdcomp_add_1_gap_length),a
  182 D1:B029 -  -  -  -  sdcomp_find_gap_length_loop:
  183 D1:B029 -  -  -  -  	
  184 D1:B029 37 -  -  -  	scf 
  185 D1:B02A -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  186 D1:B02A D2 2F B2 D1 	jp nc,sdcomp_end
  187 D1:B02E -  -  -  -  
  188 D1:B02E CD 07 B1 D1 	call sdcomp_get_next_alpha_pair
  189 D1:B032 -  -  -  -  	;a holds alpha data 
  190 D1:B032 04 -  -  -  	inc b
  191 D1:B033 B7 -  -  -  	or a 
  192 D1:B034 CA 29 B0 D1 	jp z,sdcomp_find_gap_length_loop
  193 D1:B038 -  -  -  -  	;END OF LOOP, B HOLDS NUMBER OF 00 PAIRS  +1
  194 D1:B038 -  -  -  -  		
  195 D1:B038 -  -  -  -  	
  196 D1:B038 F5 -  -  -  	push af;saves leading pixel alpha data
  197 D1:B039 -  -  -  -  	;inc loop counter 
  198 D1:B039 -  -  -  -  sdcomp_loop_counter .equ $ + 1
  199 D1:B039 3E 00 -  -  	ld a,0;inc number of loops
  200 D1:B03B 3C -  -  -  	inc a 
  201 D1:B03C 32 3A B0 D1 	ld (sdcomp_loop_counter),a
  202 D1:B040 -  -  -  -  	
  203 D1:B040 78 -  -  -  	ld a,b 
  204 D1:B041 D9 -  -  -  	exx;out of shadow 
  205 D1:B042 12 -  -  -  	ld (de),a;GAP LENGTH 
  206 D1:B043 13 -  -  -  	inc de 
  207 D1:B044 D9 -  -  -  	exx;into shadow 	
  208 D1:B045 -  -  -  -  	
  209 D1:B045 F1 -  -  -  	pop af
  210 D1:B046 37 -  -  -  	scf
  211 D1:B047 -  -  -  -  sdcomp_fast_sprite_1 .equ $ 
  212 D1:B047 D2 7A B0 D1 	jp nc,sdcomp_ldir_start ;jp c if fast move to ldir loop 
  213 D1:B04B -  -  -  -  
  214 D1:B04B -  -  -  -  ;LEADING PIXELS
  215 D1:B04B -  -  -  -  	;a holds alpha data after gap, 11 01 10
  216 D1:B04B D9 -  -  -  	exx;out of shadow
  217 D1:B04C D5 -  -  -  	push de 
  218 D1:B04D -  -  -  -  	
  219 D1:B04D 47 -  -  -  	ld b,a;save for later
  220 D1:B04E CB 67 -  -  	bit 4,a ;check if first pixel has color 
  221 D1:B050 3E 00 -  -  	ld a,0
  222 D1:B052 16 FF -  -  	ld d,%11111111;assuming no colors 
  223 D1:B054 CA 5E B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  224 D1:B058 -  -  -  -  	;has first color
  225 D1:B058 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  226 D1:B05A CD 2A B2 D1 	call sdcomp_get_next_color_ending_nibble
  227 D1:B05E -  -  -  -  sdcomp_leading_pixel_first_skip:
  228 D1:B05E -  -  -  -  	;a is either $00 or $0color1
  229 D1:B05E -  -  -  -  	
  230 D1:B05E 1E FF -  -  	ld e,%11111111;assuming no colors
  231 D1:B060 -  -  -  -  	
  232 D1:B060 CB 40 -  -  	bit 0,b;check second pixel alpha
  233 D1:B062 47 -  -  -  	ld b,a;save for later 
  234 D1:B063 3E 00 -  -  	ld a,0
  235 D1:B065 CA 6F B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  236 D1:B069 -  -  -  -  	;has second color 
  237 D1:B069 CD 21 B2 D1 	call sdcomp_get_next_color_leading_nibble
  238 D1:B06D -  -  -  -  	;a = color2 0 
  239 D1:B06D 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  240 D1:B06F -  -  -  -  	
  241 D1:B06F -  -  -  -  sdcomp_leading_pixel_second_skip:
  242 D1:B06F -  -  -  -  	;a is either 00 or c2 0 
  243 D1:B06F -  -  -  -  	;b is either 00 or 0 c1 
  244 D1:B06F B0 -  -  -  	or b 
  245 D1:B070 47 -  -  -  	ld b,a;final color data
  246 D1:B071 7A -  -  -  	ld a,d 
  247 D1:B072 A3 -  -  -  	and e ;final mask data 
  248 D1:B073 -  -  -  -  	
  249 D1:B073 D1 -  -  -  	pop de;return to pointer 
  250 D1:B074 -  -  -  -  	
  251 D1:B074 12 -  -  -  	ld (de),a;write mask data 
  252 D1:B075 13 -  -  -  	inc de 
  253 D1:B076 78 -  -  -  	ld a,b;color data 
  254 D1:B077 12 -  -  -  	ld (de),a;write color data 
  255 D1:B078 13 -  -  -  	inc de 
  256 D1:B079 D9 -  -  -  	exx;into shadow 
  257 D1:B07A -  -  -  -  	
  258 D1:B07A -  -  -  -  sdcomp_ldir_start:
  259 D1:B07A -  -  -  -  ;CHECK FOR LDIR 
  260 D1:B07A 06 00 -  -  	ld b,0;pairs found 
  261 D1:B07C -  -  -  -  sdcomp_ldir_loop:
  262 D1:B07C CD 07 B1 D1 	call sdcomp_get_next_alpha_pair
  263 D1:B080 04 -  -  -  	inc b
  264 D1:B081 EE FF -  -  	xor %11111111;flip bits
  265 D1:B083 CA 7C B0 D1 	jp z,sdcomp_ldir_loop;alpha data was 11
  266 D1:B087 -  -  -  -  	;b holds pairs found+1
  267 D1:B087 -  -  -  -  	
  268 D1:B087 37 -  -  -  	scf 
  269 D1:B088 -  -  -  -  sdcomp_fast_sprite_2 .equ $
  270 D1:B088 D2 A5 B0 D1 	jp nc,sdcomp_ldir_write
  271 D1:B08C -  -  -  -  	;fast mode 
  272 D1:B08C -  -  -  -  	;b holds ldir length 
  273 D1:B08C -  -  -  -  	
  274 D1:B08C -  -  -  -  sdcomp_ldir_not_fast:
  275 D1:B08C EE FF -  -  	xor %11111111;flip back
  276 D1:B08E -  -  -  -  	;a holds first non 11 pair 
  277 D1:B08E 05 -  -  -  	dec b ;b holds pairs found
  278 D1:B08F CA B4 B0 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  279 D1:B093 B7 -  -  -  	or a
  280 D1:B094 C2 A5 B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  281 D1:B098 -  -  -  -  	;ends in 00,ending pixels will be 11 
  282 D1:B098 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  283 D1:B098 3E 04 -  -  	ld a,%00000100;inc b 
  284 D1:B09A 32 22 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  285 D1:B09E 3E FF -  -  	ld a,$ff;ending pixels 11
  286 D1:B0A0 -  -  -  -  	
  287 D1:B0A0 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  288 D1:B0A1 CA B4 B0 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  289 D1:B0A5 -  -  -  -  	;b holds ldir length 
  290 D1:B0A5 -  -  -  -  	
  291 D1:B0A5 -  -  -  -  ;b holds ldir length, a holds ending pixels
  292 D1:B0A5 -  -  -  -  sdcomp_ldir_write:
  293 D1:B0A5 F5 -  -  -  	push af;save ending pixels
  294 D1:B0A6 78 -  -  -  	ld a,b
  295 D1:B0A7 D9 -  -  -  	exx ;out 
  296 D1:B0A8 12 -  -  -  	ld (de),a;write ldir length
  297 D1:B0A9 13 -  -  -  	inc de 
  298 D1:B0AA CD F3 B0 D1 	call sdcomp_write_ldir_data_loop
  299 D1:B0AE D9 -  -  -  	exx ;toshadow
  300 D1:B0AF F1 -  -  -  	pop af;return ending pixels
  301 D1:B0B0 -  -  -  -  	
  302 D1:B0B0 -  -  -  -  	
  303 D1:B0B0 C3 BC B0 D1 	jp sdcomp_write_end_pixels
  304 D1:B0B4 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  305 D1:B0B4 F5 -  -  -  	push af;save end pixels
  306 D1:B0B5 -  -  -  -  	
  307 D1:B0B5 D9 -  -  -  	exx;out of shadow
  308 D1:B0B6 3E 00 -  -  	ld a,0
  309 D1:B0B8 12 -  -  -  	ld (de),a 
  310 D1:B0B9 13 -  -  -  	inc de 
  311 D1:B0BA D9 -  -  -  	exx 
  312 D1:B0BB F1 -  -  -  	pop af;return ending pixels
  313 D1:B0BC -  -  -  -  
  314 D1:B0BC -  -  -  -  
  315 D1:B0BC -  -  -  -  ;WRITE ENDING PIXELS 
  316 D1:B0BC -  -  -  -  
  317 D1:B0BC -  -  -  -  sdcomp_write_end_pixels:;a holds end pixels
  318 D1:B0BC -  -  -  -  	
  319 D1:B0BC D9 -  -  -  	exx;out of shadow
  320 D1:B0BD -  -  -  -  	
  321 D1:B0BD 37 -  -  -  	scf 
  322 D1:B0BE -  -  -  -  sdcomp_fast_sprite_3 .equ $
  323 D1:B0BE D2 1A B0 D1 	jp nc,sdcomp_find_gap_length;if fast, back to gap length
  324 D1:B0C2 -  -  -  -  	
  325 D1:B0C2 -  -  -  -  	
  326 D1:B0C2 D5 -  -  -  	push de 
  327 D1:B0C3 -  -  -  -  	
  328 D1:B0C3 47 -  -  -  	ld b,a;save for later
  329 D1:B0C4 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  330 D1:B0C6 3E 00 -  -  	ld a,0
  331 D1:B0C8 16 FF -  -  	ld d,%11111111;assuming no colors 
  332 D1:B0CA CA D4 B0 D1 	jp z,sdcomp_ending_pixel_first_skip
  333 D1:B0CE -  -  -  -  	;has first color
  334 D1:B0CE 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  335 D1:B0D0 CD 2A B2 D1 	call sdcomp_get_next_color_ending_nibble
  336 D1:B0D4 -  -  -  -  sdcomp_ending_pixel_first_skip:
  337 D1:B0D4 -  -  -  -  	;a is either $00 or $0color1
  338 D1:B0D4 -  -  -  -  	
  339 D1:B0D4 1E FF -  -  	ld e,%11111111;assuming no colors
  340 D1:B0D6 -  -  -  -  	
  341 D1:B0D6 CB 40 -  -  	bit 0,b;check second pixel alpha
  342 D1:B0D8 47 -  -  -  	ld b,a;save for later 
  343 D1:B0D9 3E 00 -  -  	ld a,0
  344 D1:B0DB CA E5 B0 D1 	jp z,sdcomp_ending_pixel_second_skip;
  345 D1:B0DF -  -  -  -  	;has second color 
  346 D1:B0DF CD 21 B2 D1 	call sdcomp_get_next_color_leading_nibble
  347 D1:B0E3 -  -  -  -  	;a = color2 0 
  348 D1:B0E3 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  349 D1:B0E5 -  -  -  -  	
  350 D1:B0E5 -  -  -  -  sdcomp_ending_pixel_second_skip:
  351 D1:B0E5 -  -  -  -  	;a is either 00 or c2 0 
  352 D1:B0E5 -  -  -  -  	;b is either 00 or 0 c1 
  353 D1:B0E5 B0 -  -  -  	or b 
  354 D1:B0E6 47 -  -  -  	ld b,a;final color data
  355 D1:B0E7 7A -  -  -  	ld a,d 
  356 D1:B0E8 A3 -  -  -  	and e ;final mask data 
  357 D1:B0E9 -  -  -  -  	
  358 D1:B0E9 D1 -  -  -  	pop de;return to pointer 
  359 D1:B0EA -  -  -  -  	
  360 D1:B0EA 12 -  -  -  	ld (de),a;write mask data 
  361 D1:B0EB 13 -  -  -  	inc de 
  362 D1:B0EC 78 -  -  -  	ld a,b;color data 
  363 D1:B0ED 12 -  -  -  	ld (de),a;write color data 
  364 D1:B0EE 13 -  -  -  	inc de 
  365 D1:B0EF -  -  -  -  	
  366 D1:B0EF -  -  -  -  	
  367 D1:B0EF C3 1A B0 D1 	jp sdcomp_find_gap_length;BACK TO START
  368 D1:B0F3 -  -  -  -  	
  369 D1:B0F3 -  -  -  -  	
  370 D1:B0F3 -  -  -  -  
  371 D1:B0F3 -  -  -  -  
  372 D1:B0F3 -  -  -  -  
  373 D1:B0F3 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  374 D1:B0F3 -  -  -  -  sdcomp_write_ldir_data_loop:
  375 D1:B0F3 CD 2A B2 D1 	call sdcomp_get_next_color_ending_nibble	
  376 D1:B0F7 47 -  -  -  	ld b,a;first pixel
  377 D1:B0F8 CD 21 B2 D1 	call sdcomp_get_next_color_leading_nibble
  378 D1:B0FC B0 -  -  -  	or b
  379 D1:B0FD -  -  -  -  	
  380 D1:B0FD -  -  -  -  	
  381 D1:B0FD 12 -  -  -  	ld (de),a;write color data
  382 D1:B0FE 13 -  -  -  	inc de
  383 D1:B0FF D9 -  -  -  	exx;to shadow
  384 D1:B100 05 -  -  -  	dec b;ldir length counter
  385 D1:B101 D9 -  -  -  	exx
  386 D1:B102 C2 F3 B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  387 D1:B106 C9 -  -  -  	ret
  388 D1:B107 -  -  -  -  	
  389 D1:B107 -  -  -  -  	
  390 D1:B107 -  -  -  -  	
  391 D1:B107 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  392 D1:B107 -  -  -  -  sdcomp_get_next_alpha_pair:
  393 D1:B107 CD 30 B1 D1 	call sdcomp_get_next_alpha_bit
  394 D1:B10B B7 -  -  -  	or a 
  395 D1:B10C CA 16 B1 D1 	jp z,sdcomp_get_next_alpha_pair0
  396 D1:B110 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  397 D1:B112 C3 18 B1 D1 	jp sdcomp_get_next_alpha_pair1
  398 D1:B116 -  -  -  -  sdcomp_get_next_alpha_pair0:
  399 D1:B116 3E 00 -  -  	ld a,0
  400 D1:B118 -  -  -  -  sdcomp_get_next_alpha_pair1:
  401 D1:B118 32 2E B1 D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  402 D1:B11C -  -  -  -  	
  403 D1:B11C CD 30 B1 D1 	call sdcomp_get_next_alpha_bit
  404 D1:B120 B7 -  -  -  	or a 
  405 D1:B121 CA 2B B1 D1 	jp z,sdcomp_get_next_alpha_pair2
  406 D1:B125 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  407 D1:B127 C3 2D B1 D1 	jp sdcomp_get_next_alpha_pair3
  408 D1:B12B -  -  -  -  sdcomp_get_next_alpha_pair2:
  409 D1:B12B 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  410 D1:B12D -  -  -  -  sdcomp_get_next_alpha_pair3:	
  411 D1:B12D -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  412 D1:B12D F6 00 -  -  	or 0;AND WITH FIRST BIT 
  413 D1:B12F -  -  -  -  	
  414 D1:B12F C9 -  -  -  	ret 
  415 D1:B130 -  -  -  -  
  416 D1:B130 -  -  -  -  
  417 D1:B130 -  -  -  -  ;in shadow
  418 D1:B130 -  -  -  -  sdcomp_get_next_alpha_bit:
  419 D1:B130 -  -  -  -  	
  420 D1:B130 37 -  -  -  	scf
  421 D1:B131 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  422 D1:B131 DA 3E B1 D1 	jp c,sdcomp_bit_offset_skip
  423 D1:B135 3E DA -  -  	ld a,%11011010;jp c 
  424 D1:B137 32 31 B1 D1 	ld (sdcomp_bit_offset),a
  425 D1:B13B 3E 00 -  -  	ld a,0
  426 D1:B13D C9 -  -  -  	ret ;return 0 first bit
  427 D1:B13E -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  428 D1:B13E -  -  -  -  	;CHECKS IF OUTSIDE OF SPRITE,VIRTUAL 0s
  429 D1:B13E 08 -  -  -  	ex af,af' ;'
  430 D1:B13F B7 -  -  -  	or a
  431 D1:B140 CA 77 B1 D1 	jp z,sdcomp_line_end
  432 D1:B144 08 -  -  -  	ex af,af' ;'
  433 D1:B145 -  -  -  -  
  434 D1:B145 -  -  -  -  	;LOAD NEXT BIT
  435 D1:B145 -  -  -  -  	
  436 D1:B145 7E -  -  -  	ld a,(hl)
  437 D1:B146 A1 -  -  -  	and c 
  438 D1:B147 CD A5 B1 D1 	call sdcomp_next_in_bitstream;incs bitstream
  439 D1:B14B -  -  -  -  	
  440 D1:B14B 37 -  -  -  	scf 
  441 D1:B14C -  -  -  -  sdcomp_no_alpha_2 .equ $
  442 D1:B14C DA 52 B1 D1 	jp c,sdcomp_no_alpha_skip
  443 D1:B150 3E 01 -  -  	ld a,1
  444 D1:B152 -  -  -  -  sdcomp_no_alpha_skip:
  445 D1:B152 -  -  -  -  	
  446 D1:B152 -  -  -  -  	
  447 D1:B152 -  -  -  -  	;DEC WIDTH COUNTER
  448 D1:B152 08 -  -  -  	ex af,af' ;';to shadow
  449 D1:B153 3D -  -  -  	dec a;dec width counter
  450 D1:B154 C2 75 B1 D1 	jp nz,sdcomp_setup_line_gap_skip
  451 D1:B158 -  -  -  -  	
  452 D1:B158 -  -  -  -  	;END OF LINE REACHED, have just read alpha last bit of line
  453 D1:B158 -  -  -  -  	
  454 D1:B158 -  -  -  -  	;AT LINE END,WRITE LOOPS/LINE DATA
  455 D1:B158 F5 -  -  -  	push af;push shadow a 
  456 D1:B159 -  -  -  -  	;DEC NUMBER LINES REMAINING
  457 D1:B159 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  458 D1:B159 3E 00 -  -  	ld a,0
  459 D1:B15B 3D -  -  -  	dec a 
  460 D1:B15C 32 5A B1 D1 	ld (sdcomp_lines_remaining),a
  461 D1:B160 C2 6A B1 D1 	jp nz,sdcomp_set_end_flag_skip
  462 D1:B164 -  -  -  -  	;end of last line reached 
  463 D1:B164 3E DA -  -  	ld a,%11011010;jp c
  464 D1:B166 32 2A B0 D1 	ld (sdcomp_end_reached_flag) , a
  465 D1:B16A -  -  -  -  sdcomp_set_end_flag_skip:
  466 D1:B16A -  -  -  -  	;SET UP NUMBER OF VIRTUAL ZEROES
  467 D1:B16A E5 -  -  -  	push hl
  468 D1:B16B -  -  -  -  sdcomp_zeroes_between_lines .equ $ + 1 
  469 D1:B16B 21 00 00 00 	ld hl,0;320-width
  470 D1:B16F 22 7A B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  471 D1:B173 E1 -  -  -  	pop hl
  472 D1:B174 F1 -  -  -  	pop af 
  473 D1:B175 -  -  -  -  	
  474 D1:B175 -  -  -  -  	
  475 D1:B175 -  -  -  -  sdcomp_setup_line_gap_skip:
  476 D1:B175 08 -  -  -  	ex af,af' ;';out of shadow
  477 D1:B176 C9 -  -  -  	ret;A HOLDS 0 OR NOT 0
  478 D1:B177 -  -  -  -  	
  479 D1:B177 -  -  -  -  	
  480 D1:B177 -  -  -  -  	;IF OUTSIDE OF SPRITE,RETURN VIRTUAL 0
  481 D1:B177 -  -  -  -  sdcomp_line_end:
  482 D1:B177 08 -  -  -  	ex af,af' ;';out of shadow keep a' at 0 until next line start reached 
  483 D1:B178 E5 -  -  -  	push hl
  484 D1:B179 -  -  -  -  	;DEC REMAINING ZEROES
  485 D1:B179 -  -  -  -  sdcomp_remaining_zeroes_between_lines .equ $ + 1 
  486 D1:B179 21 00 00 00 	ld hl,0;320 - width 
  487 D1:B17D 2B -  -  -  	dec hl
  488 D1:B17E 22 7A B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  489 D1:B182 7D -  -  -  	ld a,l
  490 D1:B183 B4 -  -  -  	or h
  491 D1:B184 E1 -  -  -  	pop hl
  492 D1:B185 CA 8C B1 D1 	jp z,sdcomp_line_gap_end;IF END OF VIRTUAL ZEROES
  493 D1:B189 3E 00 -  -  	ld a,0
  494 D1:B18B C9 -  -  -  	ret;return 0
  495 D1:B18C -  -  -  -  	
  496 D1:B18C -  -  -  -  sdcomp_line_gap_end:
  497 D1:B18C -  -  -  -  	
  498 D1:B18C 37 -  -  -  	scf 
  499 D1:B18D -  -  -  -  sdcomp_bg_sprite_4 .equ $ 
  500 D1:B18D D2 97 B1 D1 	jp nc,sdcomp_bg_sprite_4_skip
  501 D1:B191 -  -  -  -  	
  502 D1:B191 3A 3A B0 D1 	ld a,(sdcomp_loop_counter)
  503 D1:B195 12 -  -  -  	ld (de),a;write loops per line data
  504 D1:B196 13 -  -  -  	inc de
  505 D1:B197 -  -  -  -  sdcomp_bg_sprite_4_skip:
  506 D1:B197 -  -  -  -  	
  507 D1:B197 D9 -  -  -  	exx;out
  508 D1:B198 -  -  -  -  
  509 D1:B198 37 -  -  -  	scf
  510 D1:B199 -  -  -  -  sdcomp_flip_7 .equ $ ;call c 
  511 D1:B199 D4 36 B2 D1 	call nc,sdcomp_traverse_line_data
  512 D1:B19D -  -  -  -  
  513 D1:B19D D9 -  -  -  	exx ;in
  514 D1:B19E -  -  -  -  	
  515 D1:B19E 08 -  -  -  	ex af,af' ;';to shadow
  516 D1:B19F -  -  -  -  sdcomp_sprite_width .equ $ + 1
  517 D1:B19F 3E 00 -  -  	ld a,0;ld shadow a with width
  518 D1:B1A1 08 -  -  -  	ex af,af' ;';out of shadow
  519 D1:B1A2 3E 00 -  -  	ld a,0;ret 0
  520 D1:B1A4 C9 -  -  -  	ret
  521 D1:B1A5 -  -  -  -  
  522 D1:B1A5 -  -  -  -  
  523 D1:B1A5 -  -  -  -  
  524 D1:B1A5 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
  525 D1:B1A5 -  -  -  -  sdcomp_next_in_bitstream:
  526 D1:B1A5 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
  527 D1:B1A5 CB 09 -  -  	rrc c;rlc flip
  528 D1:B1A7 D0 -  -  -  	ret nc
  529 D1:B1A8 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
  530 D1:B1A8 23 -  -  -  	inc hl;dec hl flip
  531 D1:B1A9 C9 -  -  -  	ret
  532 D1:B1AA -  -  -  -  
  533 D1:B1AA -  -  -  -  
  534 D1:B1AA -  -  -  -  
  535 D1:B1AA -  -  -  -  
  536 D1:B1AA -  -  -  -  
  537 D1:B1AA -  -  -  -  
  538 D1:B1AA -  -  -  -  ;bit orders
  539 D1:B1AA -  -  -  -  ;	noflip   flip 
  540 D1:B1AA -  -  -  -  ;4bpp 3210 	 0123
  541 D1:B1AA -  -  -  -  ;3bpp 210	 012
  542 D1:B1AA -  -  -  -  ;2bpp 10	 01
  543 D1:B1AA -  -  -  -  ;1bpp 0		 0
  544 D1:B1AA -  -  -  -  
  545 D1:B1AA -  -  -  -  
  546 D1:B1AA -  -  -  -  ;not in shadow,returns a=0000color
  547 D1:B1AA -  -  -  -  sdcomp_get_color_data:
  548 D1:B1AA D5 -  -  -  	push de 
  549 D1:B1AB 1E 00 -  -  	ld e,0
  550 D1:B1AD -  -  -  -  	
  551 D1:B1AD 37 -  -  -  	scf
  552 D1:B1AE -  -  -  -  sdcomp_0bpc .equ $ 
  553 D1:B1AE D2 F8 B1 D1 	jp nc,sdcomp_get_color_from_index
  554 D1:B1B2 -  -  -  -  	
  555 D1:B1B2 7E -  -  -  	ld a,(hl)
  556 D1:B1B3 A1 -  -  -  	and c 
  557 D1:B1B4 CD A5 B1 D1 	call sdcomp_next_in_bitstream
  558 D1:B1B8 B7 -  -  -  	or a
  559 D1:B1B9 CA BF B1 D1 	jp z,sdcomp_get_color_data_set_skip_1
  560 D1:B1BD -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  561 D1:B1BD CB C3 -  -  	set 0,e 
  562 D1:B1BF -  -  -  -  sdcomp_get_color_data_set_skip_1:
  563 D1:B1BF -  -  -  -  	
  564 D1:B1BF 37 -  -  -  	scf
  565 D1:B1C0 -  -  -  -  sdcomp_1bpc .equ $
  566 D1:B1C0 D2 F8 B1 D1 	jp nc,sdcomp_get_color_from_index
  567 D1:B1C4 -  -  -  -  	
  568 D1:B1C4 -  -  -  -  	
  569 D1:B1C4 7E -  -  -  	ld a,(hl)
  570 D1:B1C5 A1 -  -  -  	and c 
  571 D1:B1C6 CD A5 B1 D1 	call sdcomp_next_in_bitstream
  572 D1:B1CA B7 -  -  -  	or a
  573 D1:B1CB CA D1 B1 D1 	jp z,sdcomp_get_color_data_set_skip_2
  574 D1:B1CF -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  575 D1:B1CF CB CB -  -  	set 1,e 
  576 D1:B1D1 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  577 D1:B1D1 -  -  -  -  	
  578 D1:B1D1 37 -  -  -  	scf
  579 D1:B1D2 -  -  -  -  sdcomp_2bpc .equ $
  580 D1:B1D2 D2 F8 B1 D1 	jp nc,sdcomp_get_color_from_index
  581 D1:B1D6 -  -  -  -  	
  582 D1:B1D6 7E -  -  -  	ld a,(hl)
  583 D1:B1D7 A1 -  -  -  	and c 
  584 D1:B1D8 CD A5 B1 D1 	call sdcomp_next_in_bitstream
  585 D1:B1DC B7 -  -  -  	or a
  586 D1:B1DD CA E3 B1 D1 	jp z,sdcomp_get_color_data_set_skip_3
  587 D1:B1E1 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  588 D1:B1E1 CB D3 -  -  	set 2,e 
  589 D1:B1E3 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  590 D1:B1E3 -  -  -  -  	
  591 D1:B1E3 37 -  -  -  	scf
  592 D1:B1E4 -  -  -  -  sdcomp_3bpc .equ $
  593 D1:B1E4 D2 F8 B1 D1 	jp nc,sdcomp_get_color_from_index	
  594 D1:B1E8 -  -  -  -  
  595 D1:B1E8 7E -  -  -  	ld a,(hl)
  596 D1:B1E9 A1 -  -  -  	and c 
  597 D1:B1EA CD A5 B1 D1 	call sdcomp_next_in_bitstream
  598 D1:B1EE B7 -  -  -  	or a
  599 D1:B1EF CA F5 B1 D1 	jp z,sdcomp_get_color_data_set_skip_4
  600 D1:B1F3 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  601 D1:B1F3 CB DB -  -  	set 3,e 
  602 D1:B1F5 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  603 D1:B1F5 -  -  -  -  ;4bpp, interpret as color data 
  604 D1:B1F5 7B -  -  -  	ld a,e 
  605 D1:B1F6 D1 -  -  -  	pop de 
  606 D1:B1F7 C9 -  -  -  	ret 
  607 D1:B1F8 -  -  -  -  
  608 D1:B1F8 -  -  -  -  sdcomp_get_color_from_index:
  609 D1:B1F8 E5 -  -  -  	push hl 
  610 D1:B1F9 C5 -  -  -  	push bc 
  611 D1:B1FA 01 00 00 00 	ld bc,0
  612 D1:B1FE 21 1D B2 D1 	ld hl,sdcomp_indexed_color_data
  613 D1:B202 4B -  -  -  	ld c,e ;index number
  614 D1:B203 CB 39 -  -  	srl c;div by 2
  615 D1:B205 09 -  -  -  	add hl,bc;add index
  616 D1:B206 7E -  -  -  	ld a,(hl)
  617 D1:B207 CB 43 -  -  	bit 0,e;check lsb
  618 D1:B209 CA 13 B2 D1 	jp z,sdcomp_get_color_from_index_and_msn
  619 D1:B20D E6 0F -  -  	and %00001111;a holds 0000color
  620 D1:B20F C1 -  -  -  	pop bc 
  621 D1:B210 E1 -  -  -  	pop hl 
  622 D1:B211 D1 -  -  -  	pop de 
  623 D1:B212 C9 -  -  -  	ret 
  624 D1:B213 -  -  -  -  	
  625 D1:B213 -  -  -  -  sdcomp_get_color_from_index_and_msn:
  626 D1:B213 E6 F0 -  -  	and %11110000
  627 D1:B215 0F -  -  -  	rrca 
  628 D1:B216 0F -  -  -  	rrca 
  629 D1:B217 0F -  -  -  	rrca 
  630 D1:B218 0F -  -  -  	rrca ;a holds 0000colro
  631 D1:B219 C1 -  -  -  	pop bc 
  632 D1:B21A E1 -  -  -  	pop hl 
  633 D1:B21B D1 -  -  -  	pop de 
  634 D1:B21C C9 -  -  -  	ret
  635 D1:B21D -  -  -  -  	
  636 D1:B21D -  -  -  -  sdcomp_indexed_color_data:;4bpc
  637 D1:B21D 00 00 00 00 	.db 0,0,0,0
  638 D1:B221 -  -  -  -  
  639 D1:B221 -  -  -  -  
  640 D1:B221 -  -  -  -  
  641 D1:B221 -  -  -  -  
  642 D1:B221 -  -  -  -  
  643 D1:B221 -  -  -  -  ;not in shadow, returns a = color0000
  644 D1:B221 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  645 D1:B221 CD AA B1 D1 	call sdcomp_get_color_data
  646 D1:B225 0F -  -  -  	rrca 
  647 D1:B226 0F -  -  -  	rrca 
  648 D1:B227 0F -  -  -  	rrca 
  649 D1:B228 0F -  -  -  	rrca
  650 D1:B229 C9 -  -  -  	ret 
  651 D1:B22A -  -  -  -  
  652 D1:B22A -  -  -  -  
  653 D1:B22A -  -  -  -  ;not in shadow, returns a = 0000color
  654 D1:B22A -  -  -  -  sdcomp_get_next_color_ending_nibble:
  655 D1:B22A CD AA B1 D1 	call sdcomp_get_color_data
  656 D1:B22E C9 -  -  -  	ret
  657 D1:B22F -  -  -  -  
  658 D1:B22F -  -  -  -  sdcomp_end:
  659 D1:B22F -  -  -  -  	;write final loop/line data
  660 D1:B22F 3A 3A B0 D1 	ld a,(sdcomp_loop_counter)
  661 D1:B233 12 -  -  -  	ld (de),a;write loops per line data
  662 D1:B234 13 -  -  -  	inc de
  663 D1:B235 C9 -  -  -  	ret 
  664 D1:B236 -  -  -  -  
  665 D1:B236 -  -  -  -  
  666 D1:B236 -  -  -  -  
  667 D1:B236 -  -  -  -  
  668 D1:B236 -  -  -  -  
  669 D1:B236 -  -  -  -  
  670 D1:B236 -  -  -  -  
  671 D1:B236 -  -  -  -  ;not in shadow ,destroys a
  672 D1:B236 -  -  -  -  sdcomp_traverse_line_data:
  673 D1:B236 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  674 D1:B236 21 00 00 00 	ld hl,0
  675 D1:B23A -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  676 D1:B23A 0E 00 -  -  	ld c,0
  677 D1:B23C D9 -  -  -  	exx;toshadow 
  678 D1:B23D -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  679 D1:B23D 21 00 00 00 	ld hl,0
  680 D1:B241 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  681 D1:B241 0E 00 -  -  	ld c,0
  682 D1:B243 D5 -  -  -  	push de
  683 D1:B244 3A A0 B1 D1 	ld a,(sdcomp_sprite_width)
  684 D1:B248 5F -  -  -  	ld e,a
  685 D1:B249 -  -  -  -  sdcomp_traverse_line_data_loop:
  686 D1:B249 CB 09 -  -  	rrc c 
  687 D1:B24B D2 50 B2 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip
  688 D1:B24F 23 -  -  -  	inc hl
  689 D1:B250 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  690 D1:B250 7E -  -  -  	ld a,(hl)
  691 D1:B251 A1 -  -  -  	and c
  692 D1:B252 -  -  -  -  sdcomp_no_alpha_3 .equ $
  693 D1:B252 CA 68 B2 D1 	jp z,sdcomp_traverse_line_data_color_skip;jp c for no alpha
  694 D1:B256 D9 -  -  -  	exx;out of shadow 
  695 D1:B257 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  696 D1:B257 CB 09 -  -  	rrc c ;rotate mask
  697 D1:B259 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  698 D1:B259 CB 09 -  -  	rrc c ;rrc a for 1bpc
  699 D1:B25B -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  700 D1:B25B CB 09 -  -  	rrc c;rrc a for 2bpc
  701 D1:B25D -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  702 D1:B25D CB 09 -  -  	rrc c
  703 D1:B25F -  -  -  -  	
  704 D1:B25F 79 -  -  -  	ld a,c
  705 D1:B260 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  706 D1:B260 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000
  707 D1:B262 CA 67 B2 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  708 D1:B266 23 -  -  -  	inc hl
  709 D1:B267 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  710 D1:B267 D9 -  -  -  	exx ;toshadow
  711 D1:B268 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  712 D1:B268 1D -  -  -  	dec e
  713 D1:B269 C2 49 B2 D1 	jp nz,sdcomp_traverse_line_data_loop
  714 D1:B26D D1 -  -  -  	pop de  
  715 D1:B26E 22 3E B2 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  716 D1:B272 79 -  -  -  	ld a,c
  717 D1:B273 32 42 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  718 D1:B277 D9 -  -  -  	exx ;out
  719 D1:B278 22 37 B2 D1 	ld (sdcomp_color_data_line_end_byte),hl
  720 D1:B27C 79 -  -  -  	ld a,c 
  721 D1:B27D 32 3B B2 D1 	ld (sdcomp_color_data_line_end_mask),a
  722 D1:B281 C9 -  -  -  	ret
  723 D1:B282 -  -  -  -  
  724 D1:B282 -  -  -  -  
  725 D1:B282 -  -  -  -  
  726 D1:B282 -  -  -  -  sdcomp_set_flip:
  727 D1:B282 3E D2 -  -  	ld a,%11010010;jp nc 
  728 D1:B284 32 FA AF D1 	ld (sdcomp_flip_1),a 
  729 D1:B288 -  -  -  -   
  730 D1:B288 3E DC -  -  	ld a,%11011100;call c 
  731 D1:B28A 32 99 B1 D1 	ld (sdcomp_flip_7),a
  732 D1:B28E -  -  -  -  	
  733 D1:B28E 3E 01 -  -  	ld a,%00000001;rlc 
  734 D1:B290 32 A6 B1 D1 	ld (sdcomp_flip_bitstream),a
  735 D1:B294 3E 2B -  -  	ld a,%00101011;dec hl
  736 D1:B296 32 A8 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  737 D1:B29A -  -  -  -  	
  738 D1:B29A -  -  -  -  	
  739 D1:B29A -  -  -  -  	;set reverse color reading
  740 D1:B29A 3E C3 -  -  	ld a,%11000011;set 0,e
  741 D1:B29C 32 BE B1 D1 	ld (sdcomp_color_bit_0),a 
  742 D1:B2A0 3E CB -  -  	ld a,%11001011;set 1,e
  743 D1:B2A2 32 D0 B1 D1 	ld (sdcomp_color_bit_1),a 
  744 D1:B2A6 3E D3 -  -  	ld a,%11010011;set 2,e
  745 D1:B2A8 32 E2 B1 D1 	ld (sdcomp_color_bit_2),a 
  746 D1:B2AC 3E DB -  -  	ld a,%11011011;set 3,e
  747 D1:B2AE 32 F4 B1 D1 	ld (sdcomp_color_bit_3),a 
  748 D1:B2B2 -  -  -  -  	
  749 D1:B2B2 3E D8 -  -  	ld a,%11011000;ret c 
  750 D1:B2B4 32 30 B3 D1 	ld (sdcomp_flip_4),a
  751 D1:B2B8 32 87 B3 D1 	ld (sdcomp_flip_5),a
  752 D1:B2BC 32 D6 B3 D1 	ld (sdcomp_flip_6),a
  753 D1:B2C0 32 1B B4 D1 	ld (sdcomp_flip_8),a
  754 D1:B2C4 -  -  -  -  	
  755 D1:B2C4 C9 -  -  -  	ret 
  756 D1:B2C5 -  -  -  -  	
  757 D1:B2C5 -  -  -  -  	
  758 D1:B2C5 -  -  -  -  sdcomp_reset_flip:
  759 D1:B2C5 3E DA -  -  	ld a,%11011010;jp c 
  760 D1:B2C7 32 FA AF D1 	ld (sdcomp_flip_1),a 
  761 D1:B2CB -  -  -  -  
  762 D1:B2CB 3E D4 -  -  	ld a,%11010100;call nc 
  763 D1:B2CD 32 99 B1 D1 	ld (sdcomp_flip_7),a
  764 D1:B2D1 -  -  -  -  	
  765 D1:B2D1 3E 09 -  -  	ld a,%00001001;rrc 
  766 D1:B2D3 32 A6 B1 D1 	ld (sdcomp_flip_bitstream),a
  767 D1:B2D7 3E 23 -  -  	ld a,%00100011;inc hl
  768 D1:B2D9 32 A8 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  769 D1:B2DD -  -  -  -  	
  770 D1:B2DD -  -  -  -  	
  771 D1:B2DD 3E D0 -  -  	ld a,%11010000;ret nc 
  772 D1:B2DF 32 30 B3 D1 	ld (sdcomp_flip_4),a
  773 D1:B2E3 32 87 B3 D1 	ld (sdcomp_flip_5),a
  774 D1:B2E7 32 D6 B3 D1 	ld (sdcomp_flip_6),a
  775 D1:B2EB 32 1B B4 D1 	ld (sdcomp_flip_8),a
  776 D1:B2EF -  -  -  -  	
  777 D1:B2EF -  -  -  -  	
  778 D1:B2EF C9 -  -  -  	ret 
  779 D1:B2F0 -  -  -  -  
  780 D1:B2F0 -  -  -  -  
  781 D1:B2F0 -  -  -  -  
  782 D1:B2F0 -  -  -  -  sdcomp_set_offset:
  783 D1:B2F0 3E D2 -  -  	ld a,%11010010;jp nc 
  784 D1:B2F2 32 31 B1 D1 	ld (sdcomp_bit_offset),a
  785 D1:B2F6 C9 -  -  -  	ret
  786 D1:B2F7 -  -  -  -  
  787 D1:B2F7 -  -  -  -  
  788 D1:B2F7 -  -  -  -  
  789 D1:B2F7 -  -  -  -  
  790 D1:B2F7 -  -  -  -  ;0,1,2,3,4bpp modes
  791 D1:B2F7 -  -  -  -  ;destroys a 
  792 D1:B2F7 -  -  -  -  sdcomp_set_4bpp:
  793 D1:B2F7 3E D2 -  -  	ld a,%11010010;jp nc
  794 D1:B2F9 32 AE B1 D1 	ld (sdcomp_0bpc),a
  795 D1:B2FD 32 C0 B1 D1 	ld (sdcomp_1bpc),a
  796 D1:B301 32 D2 B1 D1 	ld (sdcomp_2bpc),a
  797 D1:B305 32 E4 B1 D1 	ld (sdcomp_3bpc),a
  798 D1:B309 -  -  -  -  	
  799 D1:B309 -  -  -  -  	
  800 D1:B309 -  -  -  -  ;traverse data 
  801 D1:B309 3E 09 -  -  	ld a,%00001001;rrc c
  802 D1:B30B 32 58 B2 D1 	ld (sdcomp_traverse_1bpp),a
  803 D1:B30F 32 5A B2 D1 	ld (sdcomp_traverse_2bpp),a
  804 D1:B313 32 5C B2 D1 	ld (sdcomp_traverse_3bpp),a
  805 D1:B317 32 5E B2 D1 	ld (sdcomp_traverse_4bpp),a
  806 D1:B31B -  -  -  -  	
  807 D1:B31B 3E F0 -  -  	ld a,%11110000
  808 D1:B31D 32 61 B2 D1 	ld (sdcomp_traverse_bit_check),a
  809 D1:B321 -  -  -  -  	
  810 D1:B321 -  -  -  -  ;setting indexed colors 
  811 D1:B321 3E DA -  -  	ld a,%11011010;jp c 
  812 D1:B323 32 C3 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  813 D1:B327 32 CE AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  814 D1:B32B 32 D9 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  815 D1:B32F -  -  -  -  	
  816 D1:B32F 37 -  -  -  	scf 
  817 D1:B330 -  -  -  -  sdcomp_flip_4 .equ $
  818 D1:B330 D0 -  -  -  	ret nc 
  819 D1:B331 -  -  -  -  	;not flipped
  820 D1:B331 -  -  -  -  	
  821 D1:B331 3E DB -  -  	ld a,%11011011;set 3,e
  822 D1:B333 32 BE B1 D1 	ld (sdcomp_color_bit_0),a 
  823 D1:B337 3E D3 -  -  	ld a,%11010011;set 2,e
  824 D1:B339 32 D0 B1 D1 	ld (sdcomp_color_bit_1),a 
  825 D1:B33D 3E CB -  -  	ld a,%11001011;set 1,e
  826 D1:B33F 32 E2 B1 D1 	ld (sdcomp_color_bit_2),a 
  827 D1:B343 3E C3 -  -  	ld a,%11000011;set 0,e
  828 D1:B345 32 F4 B1 D1 	ld (sdcomp_color_bit_3),a 
  829 D1:B349 C9 -  -  -  	ret 
  830 D1:B34A -  -  -  -  	
  831 D1:B34A -  -  -  -  
  832 D1:B34A -  -  -  -  sdcomp_set_3bpp:
  833 D1:B34A 3E D2 -  -  	ld a,%11010010;jp nc
  834 D1:B34C 32 AE B1 D1 	ld (sdcomp_0bpc),a
  835 D1:B350 32 C0 B1 D1 	ld (sdcomp_1bpc),a
  836 D1:B354 32 D2 B1 D1 	ld (sdcomp_2bpc),a
  837 D1:B358 -  -  -  -  	
  838 D1:B358 3E DA -  -  	ld a,%11011010;jp c 
  839 D1:B35A 32 E4 B1 D1 	ld (sdcomp_3bpc),a
  840 D1:B35E -  -  -  -  	
  841 D1:B35E -  -  -  -  ;traverse data	
  842 D1:B35E 3E 09 -  -  	ld a,%00001001;rrc c
  843 D1:B360 32 58 B2 D1 	ld (sdcomp_traverse_1bpp),a
  844 D1:B364 32 5A B2 D1 	ld (sdcomp_traverse_2bpp),a
  845 D1:B368 32 5C B2 D1 	ld (sdcomp_traverse_3bpp),a
  846 D1:B36C 3E 0F -  -  	ld a,%00001111;rrc a
  847 D1:B36E 32 5E B2 D1 	ld (sdcomp_traverse_4bpp),a
  848 D1:B372 -  -  -  -  	
  849 D1:B372 3E E0 -  -  	ld a,%11100000
  850 D1:B374 32 61 B2 D1 	ld (sdcomp_traverse_bit_check),a
  851 D1:B378 -  -  -  -  	
  852 D1:B378 -  -  -  -  ;setting indexed colors 
  853 D1:B378 3E D2 -  -  	ld a,%11010010;jp nc 
  854 D1:B37A 32 C3 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  855 D1:B37E 32 CE AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  856 D1:B382 32 D9 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  857 D1:B386 -  -  -  -  	
  858 D1:B386 -  -  -  -  	
  859 D1:B386 -  -  -  -  	
  860 D1:B386 37 -  -  -  	scf 
  861 D1:B387 -  -  -  -  sdcomp_flip_5 .equ $
  862 D1:B387 D0 -  -  -  	ret nc 
  863 D1:B388 -  -  -  -  	;not flipped
  864 D1:B388 -  -  -  -  	
  865 D1:B388 3E D3 -  -  	ld a,%11010011;set 2,e
  866 D1:B38A 32 BE B1 D1 	ld (sdcomp_color_bit_0),a 
  867 D1:B38E 3E CB -  -  	ld a,%11001011;set 1,e
  868 D1:B390 32 D0 B1 D1 	ld (sdcomp_color_bit_1),a 
  869 D1:B394 3E C3 -  -  	ld a,%11000011;set 0,e
  870 D1:B396 32 E2 B1 D1 	ld (sdcomp_color_bit_2),a 
  871 D1:B39A -  -  -  -  
  872 D1:B39A C9 -  -  -  	ret 
  873 D1:B39B -  -  -  -  
  874 D1:B39B -  -  -  -  sdcomp_set_2bpp:
  875 D1:B39B 3E D2 -  -  	ld a,%11010010;jp nc
  876 D1:B39D 32 AE B1 D1 	ld (sdcomp_0bpc),a
  877 D1:B3A1 32 C0 B1 D1 	ld (sdcomp_1bpc),a
  878 D1:B3A5 -  -  -  -  	
  879 D1:B3A5 3E DA -  -  	ld a,%11011010;jp c 
  880 D1:B3A7 32 D2 B1 D1 	ld (sdcomp_2bpc),a
  881 D1:B3AB -  -  -  -  	
  882 D1:B3AB -  -  -  -  ;traverse data	
  883 D1:B3AB 3E 09 -  -  	ld a,%00001001;rrc c
  884 D1:B3AD 32 58 B2 D1 	ld (sdcomp_traverse_1bpp),a
  885 D1:B3B1 32 5A B2 D1 	ld (sdcomp_traverse_2bpp),a
  886 D1:B3B5 3E 0F -  -  	ld a,%00001111;rrc a
  887 D1:B3B7 32 5C B2 D1 	ld (sdcomp_traverse_3bpp),a
  888 D1:B3BB 32 5E B2 D1 	ld (sdcomp_traverse_4bpp),a
  889 D1:B3BF -  -  -  -  	
  890 D1:B3BF 3E C0 -  -  	ld a,%11000000 
  891 D1:B3C1 32 61 B2 D1 	ld (sdcomp_traverse_bit_check),a
  892 D1:B3C5 -  -  -  -  ;setting indexed colors 
  893 D1:B3C5 3E D2 -  -  	ld a,%11010010;jp nc 
  894 D1:B3C7 32 C3 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  895 D1:B3CB 32 CE AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  896 D1:B3CF 3E DA -  -  	ld a,%11011010;jp c 
  897 D1:B3D1 32 D9 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  898 D1:B3D5 -  -  -  -  	
  899 D1:B3D5 37 -  -  -  	scf 
  900 D1:B3D6 -  -  -  -  sdcomp_flip_6 .equ $
  901 D1:B3D6 D0 -  -  -  	ret nc 
  902 D1:B3D7 -  -  -  -  	;not flipped
  903 D1:B3D7 -  -  -  -  	
  904 D1:B3D7 -  -  -  -  
  905 D1:B3D7 3E CB -  -  	ld a,%11001011;set 1,e
  906 D1:B3D9 32 BE B1 D1 	ld (sdcomp_color_bit_0),a 
  907 D1:B3DD 3E C3 -  -  	ld a,%11000011;set 0,e
  908 D1:B3DF 32 D0 B1 D1 	ld (sdcomp_color_bit_1),a 
  909 D1:B3E3 -  -  -  -  
  910 D1:B3E3 C9 -  -  -  	ret 
  911 D1:B3E4 -  -  -  -  
  912 D1:B3E4 -  -  -  -  
  913 D1:B3E4 -  -  -  -  
  914 D1:B3E4 -  -  -  -  sdcomp_set_1bpp:
  915 D1:B3E4 3E D2 -  -  	ld a,%11010010;jp nc
  916 D1:B3E6 32 AE B1 D1 	ld (sdcomp_0bpc),a
  917 D1:B3EA -  -  -  -  	
  918 D1:B3EA 3E DA -  -  	ld a,%11011010;jp c 
  919 D1:B3EC 32 C0 B1 D1 	ld (sdcomp_1bpc),a
  920 D1:B3F0 -  -  -  -  	
  921 D1:B3F0 -  -  -  -  ;traverse data	
  922 D1:B3F0 3E 09 -  -  	ld a,%00001001;rrc c
  923 D1:B3F2 32 58 B2 D1 	ld (sdcomp_traverse_1bpp),a
  924 D1:B3F6 3E 0F -  -  	ld a,%00001111;rrc a
  925 D1:B3F8 32 5A B2 D1 	ld (sdcomp_traverse_2bpp),a
  926 D1:B3FC 32 5C B2 D1 	ld (sdcomp_traverse_3bpp),a
  927 D1:B400 32 5E B2 D1 	ld (sdcomp_traverse_4bpp),a
  928 D1:B404 3E 80 -  -  	ld a,%10000000
  929 D1:B406 32 61 B2 D1 	ld (sdcomp_traverse_bit_check),a
  930 D1:B40A -  -  -  -  ;setting indexed colors 
  931 D1:B40A 3E D2 -  -  	ld a,%11010010;jp nc 
  932 D1:B40C 32 C3 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  933 D1:B410 3E DA -  -  	ld a,%11011010;jp c 
  934 D1:B412 32 CE AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  935 D1:B416 32 D9 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  936 D1:B41A -  -  -  -  	
  937 D1:B41A -  -  -  -  
  938 D1:B41A 37 -  -  -  	scf 
  939 D1:B41B -  -  -  -  sdcomp_flip_8 .equ $
  940 D1:B41B D0 -  -  -  	ret nc 
  941 D1:B41C -  -  -  -  	;not flipped
  942 D1:B41C -  -  -  -  	
  943 D1:B41C -  -  -  -  
  944 D1:B41C 3E C3 -  -  	ld a,%11000011;set 0,e
  945 D1:B41E 32 BE B1 D1 	ld (sdcomp_color_bit_0),a 
  946 D1:B422 -  -  -  -  
  947 D1:B422 C9 -  -  -  	ret 
  948 D1:B423 -  -  -  -  	
  949 D1:B423 -  -  -  -  
  950 D1:B423 -  -  -  -  sdcomp_set_0bpp:
  951 D1:B423 3E DA -  -  	ld a,%11011010;jp c 
  952 D1:B425 32 AE B1 D1 	ld (sdcomp_0bpc),a
  953 D1:B429 -  -  -  -  
  954 D1:B429 -  -  -  -  
  955 D1:B429 3E D2 -  -  	ld a,%11010010;jp nc 
  956 D1:B42B 32 C3 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  957 D1:B42F 3E DA -  -  	ld a,%11011010;jp c 
  958 D1:B431 32 CE AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  959 D1:B435 32 D9 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  960 D1:B439 -  -  -  -  	
  961 D1:B439 C9 -  -  -  	ret 
  962 D1:B43A -  -  -  -  	
  963 D1:B43A -  -  -  -  sdcomp_set_noalpha:
  964 D1:B43A 3E DA -  -  	ld a,%11011010;jp c 
  965 D1:B43C 32 A8 AF D1 	ld (sdcomp_no_alpha_1),a 
  966 D1:B440 32 52 B2 D1 	ld (sdcomp_no_alpha_3),a 
  967 D1:B444 3E D2 -  -  	ld a,%11010010;jp nc 
  968 D1:B446 32 4C B1 D1 	ld (sdcomp_no_alpha_2),a 
  969 D1:B44A C9 -  -  -  	ret 
  970 D1:B44B -  -  -  -  	
  971 D1:B44B -  -  -  -  sdcomp_reset_noalpha:
  972 D1:B44B 3E DA -  -  	ld a,%11011010;jp c 
  973 D1:B44D 32 4C B1 D1 	ld (sdcomp_no_alpha_2),a 
  974 D1:B451 3E D2 -  -  	ld a,%11010010;jp nc 
  975 D1:B453 32 A8 AF D1 	ld (sdcomp_no_alpha_1),a 
  976 D1:B457 3E CA -  -  	ld a,%11001010;jp z
  977 D1:B459 32 52 B2 D1 	ld (sdcomp_no_alpha_3),a 
  978 D1:B45D C9 -  -  -  	ret 
  979 D1:B45E -  -  -  -  
  980 D1:B45E -  -  -  -  
  981 D1:B45E -  -  -  -  sdcomp_set_fast_sprite:
  982 D1:B45E 3E DA -  -  	ld a,%11011010;jp c 
  983 D1:B460 32 47 B0 D1 	ld (sdcomp_fast_sprite_1),a 
  984 D1:B464 32 88 B0 D1 	ld (sdcomp_fast_sprite_2),a
  985 D1:B468 32 BE B0 D1 	ld (sdcomp_fast_sprite_3),a
  986 D1:B46C C9 -  -  -  	ret
  987 D1:B46D -  -  -  -  sdcomp_reset_fast_sprite:
  988 D1:B46D 3E D2 -  -  	ld a,%11010010;jp nc
  989 D1:B46F 32 47 B0 D1 	ld (sdcomp_fast_sprite_1),a 
  990 D1:B473 32 88 B0 D1 	ld (sdcomp_fast_sprite_2),a
  991 D1:B477 32 BE B0 D1 	ld (sdcomp_fast_sprite_3),a
  992 D1:B47B C9 -  -  -  	ret
  993 D1:B47C -  -  -  -  	
  994 D1:B47C -  -  -  -  	
  995 D1:B47C -  -  -  -  sdcomp_set_bg_sprite:
  996 D1:B47C 3E D2 -  -  	ld a,%11010010;jp nc
  997 D1:B47E 32 87 AF D1 	ld (sdcomp_bg_sprite_1),a 
  998 D1:B482 3E DA -  -  	ld a,%11011010;jp c 
  999 D1:B484 32 9B AF D1 	ld (sdcomp_bg_sprite_2),a
 1000 D1:B488 32 1B B0 D1 	ld (sdcomp_bg_sprite_3),a
 1001 D1:B48C 32 8D B1 D1 	ld (sdcomp_bg_sprite_4),a
 1002 D1:B490 C9 -  -  -  	ret
 1003 D1:B491 -  -  -  -  
 1004 D1:B491 -  -  -  -  	
 1005 D1:B491 -  -  -  -  sdcomp_reset_bg_sprite:
 1006 D1:B491 3E DA -  -  	ld a,%11011010;jp c 
 1007 D1:B493 32 87 AF D1 	ld (sdcomp_bg_sprite_1),a 
 1008 D1:B497 3E D2 -  -  	ld a,%11010010;jp nc
 1009 D1:B499 32 9B AF D1 	ld (sdcomp_bg_sprite_2),a
 1010 D1:B49D 32 1B B0 D1 	ld (sdcomp_bg_sprite_3),a
 1011 D1:B4A1 32 8D B1 D1 	ld (sdcomp_bg_sprite_4),a
 1012 D1:B4A5 C9 -  -  -  	ret
 1013 D1:B4A6 -  -  -  -  
 1014 D1:B4A6 -  -  -  -  ;not in shadow 
 1015 D1:B4A6 -  -  -  -  sdcomp_bg_sprite_routine:
 1016 D1:B4A6 D9 -  -  -  	exx ;in 
 1017 D1:B4A7 D5 -  -  -  	push de 
 1018 D1:B4A8 D9 -  -  -  	exx ;out 
 1019 D1:B4A9 D1 -  -  -  	pop de ;transfer loops/line write location to be main write location
 1020 D1:B4AA -  -  -  -  
 1021 D1:B4AA -  -  -  -  ;not in shadow 
 1022 D1:B4AA -  -  -  -  sdcomp_bg_sprite_loop:
 1023 D1:B4AA D9 -  -  -  	exx;toshadow 
 1024 D1:B4AB -  -  -  -  	
 1025 D1:B4AB 08 -  -  -  	ex af,af' ;'
 1026 D1:B4AC B7 -  -  -  	or a ;check if a' is zero, indicating virtual zeroes
 1027 D1:B4AD F5 -  -  -  	push af 
 1028 D1:B4AE 08 -  -  -  	ex af,af' ;'
 1029 D1:B4AF F1 -  -  -  	pop af 
 1030 D1:B4B0 C2 BD B4 D1 	jp nz,sdcomp_bg_sprite_loop_skip
 1031 D1:B4B4 CD 07 B1 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1032 D1:B4B8 D9 -  -  -  	exx;out 
 1033 D1:B4B9 -  -  -  -  
 1034 D1:B4B9 C3 AA B4 D1 	jp sdcomp_bg_sprite_loop;keep looping until out of virtual 0s 
 1035 D1:B4BD -  -  -  -  sdcomp_bg_sprite_loop_skip:;not in virt 0s 
 1036 D1:B4BD CD 07 B1 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1037 D1:B4C1 D9 -  -  -  	exx;out 
 1038 D1:B4C2 -  -  -  -  	
 1039 D1:B4C2 -  -  -  -  	;write mask and color data 
 1040 D1:B4C2 D5 -  -  -  	push de 
 1041 D1:B4C3 -  -  -  -  	
 1042 D1:B4C3 47 -  -  -  	ld b,a;save for later
 1043 D1:B4C4 CB 67 -  -  	bit 4,a ;check if first pixel has color 
 1044 D1:B4C6 3E 00 -  -  	ld a,0
 1045 D1:B4C8 16 FF -  -  	ld d,%11111111;assuming no colors 
 1046 D1:B4CA CA D4 B4 D1 	jp z,sdcomp_bg_pixel_first_skip
 1047 D1:B4CE -  -  -  -  	;has first color
 1048 D1:B4CE 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
 1049 D1:B4D0 CD 2A B2 D1 	call sdcomp_get_next_color_ending_nibble
 1050 D1:B4D4 -  -  -  -  sdcomp_bg_pixel_first_skip:
 1051 D1:B4D4 -  -  -  -  	;a is either $00 or $0color1
 1052 D1:B4D4 -  -  -  -  	
 1053 D1:B4D4 1E FF -  -  	ld e,%11111111;assuming no colors
 1054 D1:B4D6 -  -  -  -  	
 1055 D1:B4D6 CB 40 -  -  	bit 0,b;check second pixel alpha
 1056 D1:B4D8 47 -  -  -  	ld b,a;save for later 
 1057 D1:B4D9 3E 00 -  -  	ld a,0
 1058 D1:B4DB CA E5 B4 D1 	jp z,sdcomp_bg_pixel_second_skip;
 1059 D1:B4DF -  -  -  -  	;has second color 
 1060 D1:B4DF CD 21 B2 D1 	call sdcomp_get_next_color_leading_nibble
 1061 D1:B4E3 -  -  -  -  	;a = color2 0 
 1062 D1:B4E3 1E 0F -  -  	ld e,%00001111;save first pixel of bg
 1063 D1:B4E5 -  -  -  -  	
 1064 D1:B4E5 -  -  -  -  sdcomp_bg_pixel_second_skip:
 1065 D1:B4E5 -  -  -  -  	;a is either 00 or c2 0 
 1066 D1:B4E5 -  -  -  -  	;b is either 00 or 0 c1 
 1067 D1:B4E5 B0 -  -  -  	or b 
 1068 D1:B4E6 47 -  -  -  	ld b,a;final color data
 1069 D1:B4E7 7A -  -  -  	ld a,d 
 1070 D1:B4E8 A3 -  -  -  	and e ;final mask data 
 1071 D1:B4E9 -  -  -  -  	
 1072 D1:B4E9 D1 -  -  -  	pop de;return to pointer 
 1073 D1:B4EA 12 -  -  -  	ld (de),a;write mask data 
 1074 D1:B4EB 13 -  -  -  	inc de 
 1075 D1:B4EC 78 -  -  -  	ld a,b;color data 
 1076 D1:B4ED 12 -  -  -  	ld (de),a;write color data 
 1077 D1:B4EE 13 -  -  -  	inc de 
 1078 D1:B4EF -  -  -  -  	
 1079 D1:B4EF -  -  -  -  	;check if end reached 
 1080 D1:B4EF 3A 2A B0 D1 	ld a,(sdcomp_end_reached_flag)
 1081 D1:B4F3 FE DA -  -  	cp %11011010;jp c
 1082 D1:B4F5 C2 AA B4 D1 	jp nz,sdcomp_bg_sprite_loop 
 1083 D1:B4F9 C9 -  -  -  	ret 
 1084 D1:B4FA -  -  -  -  
 1085 D1:B4FA -  -  -  -  ;FIND GAP LENGTH
 1086 D1:B4FA -  -  -  -  ;read bitsteam in pairs
 1087 D1:B4FA -  -  -  -  ;gap length = number of full pairs found 
 1088 D1:B4FA -  -  -  -  
 1089 D1:B4FA -  -  -  -  ;STARTING PIXEL(S);have read either 11,01,10 in bitstream
 1090 D1:B4FA -  -  -  -  ;write either both, start,or end pixel 
 1091 D1:B4FA -  -  -  -  
 1092 D1:B4FA -  -  -  -  ;LDIR
 1093 D1:B4FA -  -  -  -  ;read number of pairs of 11 in bitstream 
 1094 D1:B4FA -  -  -  -  ;if 0 move to ending pixels
 1095 D1:B4FA -  -  -  -  ;if ends in 00, last full 11 pair will be ending pixels 
 1096 D1:B4FA -  -  -  -  ;write ldir length 
 1097 D1:B4FA -  -  -  -  ;if 0 move to next step
 1098 D1:B4FA -  -  -  -  ;else write ldir data 
 1099 D1:B4FA -  -  -  -  
 1100 D1:B4FA -  -  -  -  
 1101 D1:B4FA -  -  -  -  ;ENDING PIXEL(S)
 1102 D1:B4FA -  -  -  -  ;00 if there is nothing after leading pixels 
 1103 D1:B4FA -  -  -  -  ;11 10 01 otherwise
 1104 D1:B4FA -  -  -  -  
 1105 D1:B4FA -  -  -  -  ;BACK TO GAP LENGTH
 1106 D1:B4FA -  -  -  -  
 1107 D1:B4FA -  -  -  -  
 1108 D1:B4FA -  -  -  -  
 1109 D1:B4FA -  -  -  -  
 1110 D1:B4FA -  -  -  -  
 1111 D1:B4FA -  -  -  -  
 1112 D1:B4FA -  -  -  -  
 1113 D1:B4FA -  -  -  -  
 1114 D1:B4FA -  -  -  -  
 1115 D1:B4FA -  -  -  -  
 1116 D1:B4FA -  -  -  -  
 1117 D1:B4FA -  -  -  -  
 1118 D1:B4FA -  -  -  -  
 1119 D1:B4FA -  -  -  -  
 1120 D1:B4FA -  -  -  -  
 1121 D1:B4FA -  -  -  -  
 1122 D1:B4FA -  -  -  -  
 1123 D1:B4FA -  -  -  -  
 1124 D1:B4FA -  -  -  -  
 1125 D1:B4FA -  -  -  -  
 1126 D1:B4FA -  -  -  -  
 1127 D1:B4FA -  -  -  -  	
 1128 D1:B4FA -  -  -  -  	
 1129 D1:B4FA -  -  -  -  	
 1130 D1:B4FA -  -  -  -  	
Listing for file "ascent.asm"
