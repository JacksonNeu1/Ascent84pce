    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD EC BE D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C CD 24 B7 D1 	call setup_decompress_queue
   26 D1:A8A0 -  -  -  -  	
   27 D1:A8A0 -  -  -  -  	
   28 D1:A8A0 -  -  -  -  	
   29 D1:A8A0 -  -  -  -  	;call draw_fg
   30 D1:A8A0 -  -  -  -  	
   31 D1:A8A0 3E 00 -  -  	ld a,0
   32 D1:A8A2 CD 0A B8 D1 	call cfdc_cam_move_up ;need to skip here for frame 0
   33 D1:A8A6 -  -  -  -  	
   34 D1:A8A6 -  -  -  -  	;call prgmpause
   35 D1:A8A6 -  -  -  -  
   36 D1:A8A6 CD 5F B7 D1 	call continue_decompressions
   37 D1:A8AA -  -  -  -  	
   38 D1:A8AA CD 5F B7 D1 	call continue_decompressions
   39 D1:A8AE -  -  -  -  	
   40 D1:A8AE CD 5F B7 D1 	call continue_decompressions
   41 D1:A8B2 -  -  -  -  
   42 D1:A8B2 CD 5F B7 D1 	call continue_decompressions
   43 D1:A8B6 CD 5F B7 D1 	call continue_decompressions
   44 D1:A8BA -  -  -  -  
   45 D1:A8BA CD 5F B7 D1 	call continue_decompressions
   46 D1:A8BE CD 5F B7 D1 	call continue_decompressions
   47 D1:A8C2 -  -  -  -  
   48 D1:A8C2 CD 5F B7 D1 	call continue_decompressions
   49 D1:A8C6 CD 5F B7 D1 	call continue_decompressions
   50 D1:A8CA -  -  -  -  
   51 D1:A8CA CD 5F B7 D1 	call continue_decompressions
   52 D1:A8CE -  -  -  -  	
   53 D1:A8CE -  -  -  -  	;call prgmpause
   54 D1:A8CE CD 5F B7 D1 	call continue_decompressions
   55 D1:A8D2 -  -  -  -  	
   56 D1:A8D2 -  -  -  -  	
   57 D1:A8D2 -  -  -  -  ;	call decompress_calls
   58 D1:A8D2 -  -  -  -  	
   59 D1:A8D2 -  -  -  -  	;gen purp timers
   60 D1:A8D2 -  -  -  -  		; 76543210	
   61 D1:A8D2 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   62 D1:A8D4 32 30 00 F2 	ld ($F20030),a
   63 D1:A8D8 -  -  -  -  	;	  fedcba98
   64 D1:A8D8 3E 02 -  -  	ld a,%00000010;count up
   65 D1:A8DA 32 31 00 F2 	ld ($F20031),a
   66 D1:A8DE -  -  -  -  	
   67 D1:A8DE 21 00 2C D5 	ld hl,vRam + (160*240*2)
   68 D1:A8E2 22 D3 AB D1 	ld (draw_buffer),hl
   69 D1:A8E6 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   70 D1:A8EA 22 10 00 E3 	ld (mpLcdBase),hl
   71 D1:A8EE -  -  -  -  	
   72 D1:A8EE 21 00 00 00 	ld hl,0
   73 D1:A8F2 22 CD AB D1 	ld (cam_pos),hl
   74 D1:A8F6 -  -  -  -  
   75 D1:A8F6 CD 1F AD D1 	call setup_bg ;after initial decompressions and cam setup
   76 D1:A8FA -  -  -  -  
   77 D1:A8FA -  -  -  -  	
   78 D1:A8FA -  -  -  -  main_loop:
   79 D1:A8FA -  -  -  -  
   80 D1:A8FA -  -  -  -  	
   81 D1:A8FA -  -  -  -  
   82 D1:A8FA -  -  -  -  	;clear timer
   83 D1:A8FA 3E 00 -  -  	ld a,0
   84 D1:A8FC 32 00 00 F2 	ld ($F20000),a;32768hz
   85 D1:A900 32 01 00 F2 	ld ($F20001),a;128hz
   86 D1:A904 32 02 00 F2 	ld ($F20002),a;0.5hz
   87 D1:A908 32 03 00 F2 	ld ($F20003),a
   88 D1:A90C -  -  -  -  	
   89 D1:A90C -  -  -  -  	;Instructions here 
   90 D1:A90C -  -  -  -  	
   91 D1:A90C -  -  -  -  	
   92 D1:A90C -  -  -  -  	;call input_cam_up
   93 D1:A90C CD 38 B8 D1 	call get_inputs
   94 D1:A910 -  -  -  -  	
   95 D1:A910 CD 67 AC D1 	call move_bg
   96 D1:A914 -  -  -  -  
   97 D1:A914 -  -  -  -  
   98 D1:A914 -  -  -  -  	; TESTING move bg time
   99 D1:A914 21 00 00 00 	ld hl,0
  100 D1:A918 3A 00 00 F2 	ld a,($F20000);32768hz
  101 D1:A91C 6F -  -  -  	ld l,a
  102 D1:A91D 3A 01 00 F2 	ld a,($F20001);128hz 
  103 D1:A921 67 -  -  -  	ld h,a
  104 D1:A922 CB 3C -  -  	srl h ;div by 8
  105 D1:A924 CB 1D -  -  	rr l 
  106 D1:A926 CB 3C -  -  	srl h
  107 D1:A928 CB 1D -  -  	rr l 
  108 D1:A92A CB 3C -  -  	srl h
  109 D1:A92C CB 1D -  -  	rr l 
  110 D1:A92E 7D -  -  -  	ld a,l
  111 D1:A92F 3C -  -  -  	inc a ;Cant have time be 1, BC must be >1 for _MemSet
  112 D1:A930 3C -  -  -  	inc a
  113 D1:A931 3C -  -  -  	inc a
  114 D1:A932 32 D9 AB D1 	ld (move_bg_time),a
  115 D1:A936 -  -  -  -  
  116 D1:A936 -  -  -  -  	
  117 D1:A936 -  -  -  -  	
  118 D1:A936 CD 33 AC D1 	call draw_bg
  119 D1:A93A -  -  -  -  
  120 D1:A93A -  -  -  -  	
  121 D1:A93A -  -  -  -  	
  122 D1:A93A -  -  -  -  	;TEsting
  123 D1:A93A 21 00 00 00 	ld hl,0
  124 D1:A93E 3A 00 00 F2 	ld a,($F20000);32768hz
  125 D1:A942 6F -  -  -  	ld l,a
  126 D1:A943 3A 01 00 F2 	ld a,($F20001);128hz 
  127 D1:A947 67 -  -  -  	ld h,a
  128 D1:A948 CB 3C -  -  	srl h ;div by 8
  129 D1:A94A CB 1D -  -  	rr l 
  130 D1:A94C CB 3C -  -  	srl h
  131 D1:A94E CB 1D -  -  	rr l 
  132 D1:A950 CB 3C -  -  	srl h
  133 D1:A952 CB 1D -  -  	rr l 
  134 D1:A954 7D -  -  -  	ld a,l
  135 D1:A955 32 DA AB D1 	ld (draw_bg_time),a
  136 D1:A959 -  -  -  -  	
  137 D1:A959 -  -  -  -  	;TEST CLEAR BUFFER
  138 D1:A959 -  -  -  -  	;ld hl,BG_buffer
  139 D1:A959 -  -  -  -  	;ld de,(draw_buffer)
  140 D1:A959 -  -  -  -  	;ld bc, 160*240
  141 D1:A959 -  -  -  -  	;ldir
  142 D1:A959 -  -  -  -  	
  143 D1:A959 CD EB B4 D1 	call draw_mg
  144 D1:A95D -  -  -  -  	
  145 D1:A95D -  -  -  -  	;TEsting
  146 D1:A95D 21 00 00 00 	ld hl,0
  147 D1:A961 3A 00 00 F2 	ld a,($F20000);32768hz
  148 D1:A965 6F -  -  -  	ld l,a
  149 D1:A966 3A 01 00 F2 	ld a,($F20001);128hz 
  150 D1:A96A 67 -  -  -  	ld h,a
  151 D1:A96B CB 3C -  -  	srl h ;div by 8
  152 D1:A96D CB 1D -  -  	rr l 
  153 D1:A96F CB 3C -  -  	srl h
  154 D1:A971 CB 1D -  -  	rr l 
  155 D1:A973 CB 3C -  -  	srl h
  156 D1:A975 CB 1D -  -  	rr l 
  157 D1:A977 7D -  -  -  	ld a,l
  158 D1:A978 32 DB AB D1 	ld (draw_mg_time),a
  159 D1:A97C -  -  -  -  	
  160 D1:A97C CD 40 B5 D1 	call draw_fg
  161 D1:A980 -  -  -  -  	
  162 D1:A980 -  -  -  -  	
  163 D1:A980 -  -  -  -  	;TEsting
  164 D1:A980 21 00 00 00 	ld hl,0
  165 D1:A984 3A 00 00 F2 	ld a,($F20000);32768hz
  166 D1:A988 6F -  -  -  	ld l,a
  167 D1:A989 3A 01 00 F2 	ld a,($F20001);128hz 
  168 D1:A98D 67 -  -  -  	ld h,a
  169 D1:A98E CB 3C -  -  	srl h ;div by 8
  170 D1:A990 CB 1D -  -  	rr l 
  171 D1:A992 CB 3C -  -  	srl h
  172 D1:A994 CB 1D -  -  	rr l 
  173 D1:A996 CB 3C -  -  	srl h
  174 D1:A998 CB 1D -  -  	rr l 
  175 D1:A99A 7D -  -  -  	ld a,l
  176 D1:A99B 32 DC AB D1 	ld (draw_fg_time),a
  177 D1:A99F -  -  -  -  	
  178 D1:A99F 21 00 00 00 	ld hl,0
  179 D1:A9A3 -  -  -  -  	
  180 D1:A9A3 -  -  -  -  	; for debug longest frame draw time
  181 D1:A9A3 3A 00 00 F2 	ld a,($F20000)
  182 D1:A9A7 6F -  -  -  	ld l,a
  183 D1:A9A8 3A 01 00 F2 	ld a,($F20001);128hz 
  184 D1:A9AC 67 -  -  -  	ld h,a
  185 D1:A9AD E5 -  -  -  	push hl
  186 D1:A9AE ED 4B DE AB 
              D1 -  -  -  	ld bc,(longestFrame)
  187 D1:A9B3 ED 42 -  -  	sbc hl,bc 
  188 D1:A9B5 DA C7 A9 D1 	jp c,longest_frame_skip
  189 D1:A9B9 -  -  -  -  	
  190 D1:A9B9 E1 -  -  -  	pop hl 
  191 D1:A9BA E5 -  -  -  	push hl 
  192 D1:A9BB 22 DE AB D1 	ld (longestFrame),hl 
  193 D1:A9BF 2A CD AB D1 	ld hl,(cam_pos)
  194 D1:A9C3 22 E1 AB D1 	ld (longestFramePos),hl
  195 D1:A9C7 -  -  -  -  longest_frame_skip:
  196 D1:A9C7 E1 -  -  -  	pop hl 
  197 D1:A9C8 -  -  -  -  	
  198 D1:A9C8 -  -  -  -  		
  199 D1:A9C8 2A E7 AB D1 	ld hl,(frameCount)
  200 D1:A9CC 23 -  -  -  	inc hl
  201 D1:A9CD 22 E7 AB D1 	ld (frameCount),hl
  202 D1:A9D1 -  -  -  -  	
  203 D1:A9D1 -  -  -  -  
  204 D1:A9D1 -  -  -  -  	
  205 D1:A9D1 -  -  -  -  	;check if lcd has drawn first frame
  206 D1:A9D1 -  -  -  -  
  207 D1:A9D1 CD EF B7 D1 	call check_for_decompress_calls
  208 D1:A9D5 -  -  -  -  	;Sprite decompression will occur here
  209 D1:A9D5 CD 5F B7 D1 	call continue_decompressions
  210 D1:A9D9 -  -  -  -  	
  211 D1:A9D9 -  -  -  -  	;TEsting
  212 D1:A9D9 21 00 00 00 	ld hl,0
  213 D1:A9DD 3A 00 00 F2 	ld a,($F20000);32768hz
  214 D1:A9E1 6F -  -  -  	ld l,a
  215 D1:A9E2 3A 01 00 F2 	ld a,($F20001);128hz 
  216 D1:A9E6 67 -  -  -  	ld h,a
  217 D1:A9E7 CB 3C -  -  	srl h ;div by 4
  218 D1:A9E9 CB 1D -  -  	rr l 
  219 D1:A9EB CB 3C -  -  	srl h
  220 D1:A9ED CB 1D -  -  	rr l 
  221 D1:A9EF CB 3C -  -  	srl h
  222 D1:A9F1 CB 1D -  -  	rr l 
  223 D1:A9F3 7D -  -  -  	ld a,l
  224 D1:A9F4 32 DD AB D1 	ld (decompress_time),a
  225 D1:A9F8 -  -  -  -  
  226 D1:A9F8 -  -  -  -  
  227 D1:A9F8 -  -  -  -  	
  228 D1:A9F8 -  -  -  -  
  229 D1:A9F8 -  -  -  -  	;Draw time bar at top of screen 
  230 D1:A9F8 2A D3 AB D1 	ld hl, (draw_buffer)
  231 D1:A9FC 01 00 00 00 	ld bc,0 
  232 D1:AA00 3A DD AB D1 	ld a,(decompress_time)
  233 D1:AA04 4F -  -  -  	ld c,a 
  234 D1:AA05 3E 55 -  -  	ld a, $55
  235 D1:AA07 CD E0 10 02 	call _MemSet
  236 D1:AA0B -  -  -  -  	
  237 D1:AA0B 2A D3 AB D1 	ld hl, (draw_buffer)
  238 D1:AA0F 01 00 00 00 	ld bc,0 
  239 D1:AA13 3A DC AB D1 	ld a,(draw_fg_time)
  240 D1:AA17 4F -  -  -  	ld c,a 
  241 D1:AA18 3E 44 -  -  	ld a, $44
  242 D1:AA1A CD E0 10 02 	call _MemSet
  243 D1:AA1E -  -  -  -  	
  244 D1:AA1E 2A D3 AB D1 	ld hl, (draw_buffer)
  245 D1:AA22 01 00 00 00 	ld bc,0 
  246 D1:AA26 3A DB AB D1 	ld a,(draw_mg_time)
  247 D1:AA2A 4F -  -  -  	ld c,a 
  248 D1:AA2B 3E 33 -  -  	ld a, $33
  249 D1:AA2D CD E0 10 02 	call _MemSet
  250 D1:AA31 -  -  -  -  
  251 D1:AA31 2A D3 AB D1 	ld hl, (draw_buffer)
  252 D1:AA35 01 00 00 00 	ld bc,0 
  253 D1:AA39 3A DA AB D1 	ld a,(draw_bg_time)
  254 D1:AA3D 4F -  -  -  	ld c,a 
  255 D1:AA3E 3E 22 -  -  	ld a, $22
  256 D1:AA40 CD E0 10 02 	call _MemSet
  257 D1:AA44 -  -  -  -  	
  258 D1:AA44 -  -  -  -  	
  259 D1:AA44 -  -  -  -  	
  260 D1:AA44 2A D3 AB D1 	ld hl, (draw_buffer)
  261 D1:AA48 01 00 00 00 	ld bc,0 
  262 D1:AA4C 3A D9 AB D1 	ld a,(move_bg_time)
  263 D1:AA50 4F -  -  -  	ld c,a 
  264 D1:AA51 3E 11 -  -  	ld a, $11
  265 D1:AA53 CD E0 10 02 	call _MemSet
  266 D1:AA57 -  -  -  -  
  267 D1:AA57 -  -  -  -  	
  268 D1:AA57 2A D3 AB D1 	ld hl, (draw_buffer)
  269 D1:AA5B 01 88 00 00 	ld bc, 136  ; =1000/4 /2 for 2pix/bit 
  270 D1:AA5F 09 -  -  -  	add hl,bc 
  271 D1:AA60 3E 55 -  -  	ld a,$55
  272 D1:AA62 77 -  -  -  	ld (hl),a 
  273 D1:AA63 -  -  -  -  	
  274 D1:AA63 -  -  -  -  	
  275 D1:AA63 -  -  -  -  	;Again for thick line
  276 D1:AA63 -  -  -  -  	
  277 D1:AA63 2A D3 AB D1 	ld hl, (draw_buffer)
  278 D1:AA67 01 A0 00 00 	ld bc,160
  279 D1:AA6B 09 -  -  -  	add hl,bc 
  280 D1:AA6C 3A DD AB D1 	ld a,(decompress_time)
  281 D1:AA70 4F -  -  -  	ld c,a 
  282 D1:AA71 3E 55 -  -  	ld a, $55
  283 D1:AA73 CD E0 10 02 	call _MemSet
  284 D1:AA77 -  -  -  -  	
  285 D1:AA77 2A D3 AB D1 	ld hl, (draw_buffer)
  286 D1:AA7B 01 A0 00 00 	ld bc,160
  287 D1:AA7F 09 -  -  -  	add hl,bc 
  288 D1:AA80 3A DC AB D1 	ld a,(draw_fg_time)
  289 D1:AA84 4F -  -  -  	ld c,a 
  290 D1:AA85 3E 44 -  -  	ld a, $44
  291 D1:AA87 CD E0 10 02 	call _MemSet
  292 D1:AA8B -  -  -  -  	
  293 D1:AA8B 2A D3 AB D1 	ld hl, (draw_buffer)
  294 D1:AA8F 01 A0 00 00 	ld bc,160
  295 D1:AA93 09 -  -  -  	add hl,bc
  296 D1:AA94 3A DB AB D1 	ld a,(draw_mg_time)
  297 D1:AA98 4F -  -  -  	ld c,a 
  298 D1:AA99 3E 33 -  -  	ld a, $33
  299 D1:AA9B CD E0 10 02 	call _MemSet
  300 D1:AA9F -  -  -  -  
  301 D1:AA9F 2A D3 AB D1 	ld hl, (draw_buffer)
  302 D1:AAA3 01 A0 00 00 	ld bc,160
  303 D1:AAA7 09 -  -  -  	add hl,bc
  304 D1:AAA8 3A DA AB D1 	ld a,(draw_bg_time)
  305 D1:AAAC 4F -  -  -  	ld c,a 
  306 D1:AAAD 3E 22 -  -  	ld a, $22
  307 D1:AAAF CD E0 10 02 	call _MemSet
  308 D1:AAB3 -  -  -  -  	
  309 D1:AAB3 2A D3 AB D1 	ld hl, (draw_buffer)
  310 D1:AAB7 01 A0 00 00 	ld bc,160
  311 D1:AABB 09 -  -  -  	add hl,bc
  312 D1:AABC 3A D9 AB D1 	ld a,(move_bg_time)
  313 D1:AAC0 4F -  -  -  	ld c,a 
  314 D1:AAC1 3E 11 -  -  	ld a, $11
  315 D1:AAC3 CD E0 10 02 	call _MemSet
  316 D1:AAC7 -  -  -  -  
  317 D1:AAC7 2A D3 AB D1 	ld hl, (draw_buffer)
  318 D1:AACB 01 28 01 00 	ld bc,296
  319 D1:AACF 09 -  -  -  	add hl,bc 
  320 D1:AAD0 3E 55 -  -  	ld a,$55
  321 D1:AAD2 77 -  -  -  	ld (hl),a 
  322 D1:AAD3 -  -  -  -  	
  323 D1:AAD3 -  -  -  -  	
  324 D1:AAD3 -  -  -  -  
  325 D1:AAD3 -  -  -  -  
  326 D1:AAD3 -  -  -  -  	;wait until finished drawing second frame
  327 D1:AAD3 -  -  -  -  
  328 D1:AAD3 -  -  -  -  	;swap draw buffers
  329 D1:AAD3 2A 10 00 E3 	ld hl,(mpLcdBase)
  330 D1:AAD7 ED 5B D3 AB 
              D1 -  -  -  	ld de,(draw_buffer)
  331 D1:AADC ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  332 D1:AAE1 22 D3 AB D1 	ld (draw_buffer),hl
  333 D1:AAE5 -  -  -  -  
  334 D1:AAE5 -  -  -  -  clear_int:      
  335 D1:AAE5 21 28 00 E3     ld hl, mpLcdIcr
  336 D1:AAE9 CB D6 -  -      set 2, (hl)            ; clear interrupt
  337 D1:AAEB 21 20 00 E3     ld hl, mpLcdRis
  338 D1:AAEF -  -  -  -  wait_int:
  339 D1:AAEF CB 56 -  -      bit 2, (hl)
  340 D1:AAF1 28 FC -  -      jr z, wait_int  
  341 D1:AAF3 -  -  -  -  
  342 D1:AAF3 -  -  -  -  
  343 D1:AAF3 21 00 00 00 	ld hl,0
  344 D1:AAF7 -  -  -  -  	
  345 D1:AAF7 3A 02 00 F2 	ld a,($F20002)
  346 D1:AAFB 67 -  -  -  	ld h,a
  347 D1:AAFC 3A 01 00 F2 	ld a,($F20001)
  348 D1:AB00 6F -  -  -  	ld l,a
  349 D1:AB01 ED 4B E4 AB 
              D1 -  -  -  	ld bc,(totalTime)
  350 D1:AB06 09 -  -  -  	add hl,bc 
  351 D1:AB07 22 E4 AB D1 	ld (totalTime),hl 
  352 D1:AB0B -  -  -  -  	
  353 D1:AB0B -  -  -  -  	
  354 D1:AB0B -  -  -  -  	
  355 D1:AB0B -  -  -  -  	
  356 D1:AB0B -  -  -  -  
  357 D1:AB0B -  -  -  -  	
  358 D1:AB0B -  -  -  -  
  359 D1:AB0B C2 FA A8 D1 	jp nz,main_loop
  360 D1:AB0F -  -  -  -  		
  361 D1:AB0F -  -  -  -  	;print debug times 
  362 D1:AB0F 21 00 00 D4 	ld hl,vRam
  363 D1:AB13 22 10 00 E3 	ld (mpLcdBase),hl
  364 D1:AB17 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  365 D1:AB1B 3E 2D -  -  	ld	a,lcdBpp16
  366 D1:AB1D 32 18 00 E3 	ld (mpLcdCtrl),a
  367 D1:AB21 -  -  -  -  	
  368 D1:AB21 3E 00 -  -  	ld a,0
  369 D1:AB23 32 95 05 D0 	ld (curRow),a
  370 D1:AB27 32 96 05 D0 	ld (curCol),a
  371 D1:AB2B 2A DE AB D1 	ld hl,(longestFrame)
  372 D1:AB2F CD E0 1E 02 	call _DispHL
  373 D1:AB33 3E 01 -  -  	ld a,1
  374 D1:AB35 32 95 05 D0 	ld (curRow),a
  375 D1:AB39 3E 00 -  -  	ld a,0
  376 D1:AB3B 32 96 05 D0 	ld (curCol),a
  377 D1:AB3F 2A E1 AB D1 	ld hl,(longestFramePos)
  378 D1:AB43 CD E0 1E 02 	call _DispHL
  379 D1:AB47 3E 02 -  -  	ld a,2
  380 D1:AB49 32 95 05 D0 	ld (curRow),a
  381 D1:AB4D 3E 00 -  -  	ld a,0
  382 D1:AB4F 32 96 05 D0 	ld (curCol),a
  383 D1:AB53 2A E4 AB D1 	ld hl,(totalTime)
  384 D1:AB57 CD E0 1E 02 	call _DispHL
  385 D1:AB5B 3E 03 -  -  	ld a,3
  386 D1:AB5D 32 95 05 D0 	ld (curRow),a
  387 D1:AB61 3E 00 -  -  	ld a,0
  388 D1:AB63 32 96 05 D0 	ld (curCol),a
  389 D1:AB67 2A E7 AB D1 	ld hl,(frameCount)
  390 D1:AB6B CD E0 1E 02 	call _DispHL
  391 D1:AB6F -  -  -  -  	
  392 D1:AB6F CD C0 AB D1 	call prgmpause
  393 D1:AB73 CD C0 AB D1 	call prgmpause
  394 D1:AB77 -  -  -  -  	
  395 D1:AB77 -  -  -  -  	
  396 D1:AB77 -  -  -  -  exit_prgm:
  397 D1:AB77 21 00 00 D4 	ld hl,vRam
  398 D1:AB7B 22 10 00 E3 	ld (mpLcdBase),hl
  399 D1:AB7F CD 10 08 02 	call _ClrScrnFull
  400 D1:AB83 3E 2D -  -  	ld	a,lcdBpp16
  401 D1:AB85 32 18 00 E3 	ld	(mpLcdCtrl),a
  402 D1:AB89 CD 3C 1A 02 	call _DrawStatusBar
  403 D1:AB8D -  -  -  -  	
  404 D1:AB8D FB -  -  -  	ei				; reset screen back to normal
  405 D1:AB8E C9 -  -  -  	ret			; return to os
  406 D1:AB8F -  -  -  -  
  407 D1:AB8F -  -  -  -  
  408 D1:AB8F -  -  -  -  printHL:;=================REMOVE
  409 D1:AB8F E5 -  -  -  	push hl
  410 D1:AB90 21 00 00 D4 	ld hl,vRam
  411 D1:AB94 22 10 00 E3 	ld (mpLcdBase),hl
  412 D1:AB98 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  413 D1:AB9C 3E 2D -  -  	ld	a,lcdBpp16
  414 D1:AB9E 32 18 00 E3 	ld (mpLcdCtrl),a
  415 D1:ABA2 E1 -  -  -  	pop hl
  416 D1:ABA3 CD E0 1E 02 	call _DispHL
  417 D1:ABA7 FB -  -  -  	ei
  418 D1:ABA8 CD 8C 0D 02 	call _GetKey
  419 D1:ABAC F3 -  -  -  	di
  420 D1:ABAD C3 77 AB D1 	jp exit_prgm
  421 D1:ABB1 -  -  -  -  
  422 D1:ABB1 -  -  -  -  
  423 D1:ABB1 -  -  -  -  write_a_to_ram:
  424 D1:ABB1 F5 -  -  -  	push af 
  425 D1:ABB2 E5 -  -  -  	push hl 
  426 D1:ABB3 -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  427 D1:ABB3 21 00 60 D4 	ld hl, $d46000
  428 D1:ABB7 77 -  -  -  	ld (hl),a 
  429 D1:ABB8 23 -  -  -  	inc hl 
  430 D1:ABB9 22 B4 AB D1 	ld (write_a_to_ram_addr),hl 
  431 D1:ABBD E1 -  -  -  	pop hl 
  432 D1:ABBE F1 -  -  -  	pop af 
  433 D1:ABBF C9 -  -  -  	ret 
  434 D1:ABC0 -  -  -  -  
  435 D1:ABC0 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  436 D1:ABC0 F5 -  -  -  	push af
  437 D1:ABC1 D5 -  -  -  	push de 
  438 D1:ABC2 E5 -  -  -  	push hl 
  439 D1:ABC3 FB -  -  -  	ei
  440 D1:ABC4 CD 8C 0D 02 	call _GetKey
  441 D1:ABC8 F3 -  -  -  	di
  442 D1:ABC9 E1 -  -  -  	pop hl 
  443 D1:ABCA D1 -  -  -  	pop de 
  444 D1:ABCB F1 -  -  -  	pop af
  445 D1:ABCC C9 -  -  -  	ret
  446 D1:ABCD -  -  -  -  
  447 D1:ABCD -  -  -  -  cam_pos:;y position of lowest visible line in fg layer
  448 D1:ABCD 00 00 00 -  	.dl 0
  449 D1:ABD0 -  -  -  -  bg_cam_pos: ;y position of lowest visible line in bg layer (= cam pos / 4)
  450 D1:ABD0 00 00 00 -  	.dl 0
  451 D1:ABD3 -  -  -  -  
  452 D1:ABD3 -  -  -  -  
  453 D1:ABD3 -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  454 D1:ABD3 00 2C D5 -  	.dl $d52c00
  455 D1:ABD6 -  -  -  -  	
  456 D1:ABD6 -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  457 D1:ABD6 00 00 00 -  	.dl 0
  458 D1:ABD9 -  -  -  -  BG_buffer .equ vram + (160*240) ;Start of BG buffer 
  459 D1:ABD9 -  -  -  -  
  460 D1:ABD9 -  -  -  -  
  461 D1:ABD9 -  -  -  -  ;d40000 = Decompressed sprite data
  462 D1:ABD9 -  -  -  -  ;d49600 = BG buffer
  463 D1:ABD9 -  -  -  -  ;d52c00 = Frame draw buffer 1 
  464 D1:ABD9 -  -  -  -  ;d5c200 = frame draw buffer 2
  465 D1:ABD9 -  -  -  -  
  466 D1:ABD9 -  -  -  -  ;pixelShadow .equ $D031F6 
  467 D1:ABD9 -  -  -  -  
  468 D1:ABD9 -  -  -  -  move_bg_time:
  469 D1:ABD9 00 -  -  -  	.db 0
  470 D1:ABDA -  -  -  -  draw_bg_time:
  471 D1:ABDA 00 -  -  -  	.db 0
  472 D1:ABDB -  -  -  -  draw_mg_time:
  473 D1:ABDB 00 -  -  -  	.db 0
  474 D1:ABDC -  -  -  -  draw_fg_time:
  475 D1:ABDC 00 -  -  -  	.db 0
  476 D1:ABDD -  -  -  -  decompress_time:
  477 D1:ABDD 00 -  -  -  	.db 0
  478 D1:ABDE -  -  -  -  
  479 D1:ABDE -  -  -  -  
  480 D1:ABDE -  -  -  -  longestFrame:
  481 D1:ABDE 00 00 00 -  	.dl 0
  482 D1:ABE1 -  -  -  -  longestFramePos:
  483 D1:ABE1 00 00 00 -  	.dl 0
  484 D1:ABE4 -  -  -  -  totalTime:
  485 D1:ABE4 00 00 00 -  	.dl 0
  486 D1:ABE7 -  -  -  -  frameCount:
  487 D1:ABE7 00 00 00 -  	.dl 0
  488 D1:ABEA -  -  -  -  hasLagged:
  489 D1:ABEA 00 00 00 -  	.dl 0
  490 D1:ABED -  -  -  -  
  491 D1:ABED -  -  -  -  
  492 D1:ABED -  -  -  -  
  493 D1:ABED -  -  -  -  
  494 D1:ABED -  -  -  -  
  495 D1:ABED -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:ABED -  -  -  -  
    2 D1:ABED -  -  -  -  
    3 D1:ABED -  -  -  -  
    4 D1:ABED -  -  -  -  time_test_start:
    5 D1:ABED -  -  -  -  
    6 D1:ABED -  -  -  -  		; 76543210	
    7 D1:ABED 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:ABEF 32 30 00 F2 	ld ($F20030),a
    9 D1:ABF3 -  -  -  -  	;	  fedcba98
   10 D1:ABF3 3E 02 -  -  	ld a,%00000010;count up
   11 D1:ABF5 32 31 00 F2 	ld ($F20031),a
   12 D1:ABF9 3E 00 -  -  	ld a,0
   13 D1:ABFB 32 00 00 F2 	ld ($F20000),a
   14 D1:ABFF 32 01 00 F2 	ld ($F20001),a
   15 D1:AC03 32 02 00 F2 	ld ($F20002),a
   16 D1:AC07 32 03 00 F2 	ld ($F20003),a
   17 D1:AC0B -  -  -  -  	
   18 D1:AC0B 21 2C 01 00 	ld hl,300
   19 D1:AC0F -  -  -  -  	
   20 D1:AC0F -  -  -  -  time_testing_loop:
   21 D1:AC0F E5 -  -  -  	push hl
   22 D1:AC10 01 E8 03 00 	ld bc,1000
   23 D1:AC14 -  -  -  -  time_testing_loop_2:
   24 D1:AC14 C5 -  -  -  	push bc
   25 D1:AC15 -  -  -  -  	;instruction here
   26 D1:AC15 -  -  -  -  	
   27 D1:AC15 -  -  -  -  	
   28 D1:AC15 -  -  -  -  	;Instruction end
   29 D1:AC15 C1 -  -  -  	pop bc
   30 D1:AC16 0B -  -  -  	dec bc
   31 D1:AC17 79 -  -  -  	ld a,c
   32 D1:AC18 B0 -  -  -  	or b
   33 D1:AC19 C2 14 AC D1 	jp nz,time_testing_loop_2
   34 D1:AC1D E1 -  -  -  	pop hl
   35 D1:AC1E 2B -  -  -  	dec hl
   36 D1:AC1F 7D -  -  -  	ld a,l
   37 D1:AC20 B4 -  -  -  	or h
   38 D1:AC21 C2 0F AC D1 	jp nz,time_testing_loop
   39 D1:AC25 -  -  -  -  	
   40 D1:AC25 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AC29 6F -  -  -  	ld l,a
   42 D1:AC2A 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AC2E 67 -  -  -  	ld h,a
   44 D1:AC2F C3 8F AB D1 	jp printHL;div by 128 for time
   45 D1:AC33 -  -  -  -  	
   46 D1:AC33 -  -  -  -  
   47 D1:AC33 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AC33 -  -  -  -  
   49 D1:AC33 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AC33 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AC33 -  -  -  -  
   52 D1:AC33 -  -  -  -  
   53 D1:AC33 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AC33 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AC33 -  -  -  -  
   56 D1:AC33 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AC33 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AC33 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AC33 -  -  -  -  ;.24 screens/frame
   60 D1:AC33 -  -  -  -  
   61 D1:AC33 -  -  -  -  
   62 D1:AC33 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AC33 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AC33 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AC33 -  -  -  -  ;.446 screens/frame
   66 D1:AC33 -  -  -  -  
   67 D1:AC33 -  -  -  -  
   68 D1:AC33 -  -  -  -  
   69 D1:AC33 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AC33 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AC33 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AC33 -  -  -  -  ;.78 screens/frame
   73 D1:AC33 -  -  -  -  
   74 D1:AC33 -  -  -  -  
   75 D1:AC33 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AC33 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AC33 -  -  -  -  ;.47 = FAST
   78 D1:AC33 -  -  -  -  
   79 D1:AC33 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AC33 -  -  -  -  
   81 D1:AC33 -  -  -  -  
   82 D1:AC33 -  -  -  -  
   83 D1:AC33 -  -  -  -  
   84 D1:AC33 -  -  -  -  
   85 D1:AC33 -  -  -  -  
   86 D1:AC33 -  -  -  -  
   87 D1:AC33 -  -  -  -  
   88 D1:AC33 -  -  -  -  
Listing for file "ascent.asm"
  496 D1:AC33 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AC33 -  -  -  -  
    2 D1:AC33 -  -  -  -  
    3 D1:AC33 -  -  -  -  BGMaxSpriteHeight .equ 120
    4 D1:AC33 -  -  -  -  
    5 D1:AC33 -  -  -  -  
    6 D1:AC33 -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    7 D1:AC33 CD 67 AC D1 	call move_bg
    8 D1:AC37 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    9 D1:AC3B ED 4B D6 AB 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
   10 D1:AC40 37 -  -  -  	scf 
   11 D1:AC41 3F -  -  -  	ccf 
   12 D1:AC42 ED 42 -  -  	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
   13 D1:AC44 E5 -  -  -  	push hl 
   14 D1:AC45 C1 -  -  -  	pop bc	;put into bc for ldir 
   15 D1:AC46 2A D6 AB D1 	ld hl,(BG_draw_buffer)
   16 D1:AC4A ED 5B D3 AB 
              D1 -  -  -  	ld de,(draw_buffer)
   17 D1:AC4F ED B0 -  -  	ldir
   18 D1:AC51 2A D6 AB D1 	ld hl,(BG_draw_buffer) ;loop point in buffer
   19 D1:AC55 01 00 96 D4 	ld bc,BG_buffer ;start of buffer
   20 D1:AC59 37 -  -  -  	scf 
   21 D1:AC5A 3F -  -  -  	ccf 
   22 D1:AC5B ED 42 -  -  	sbc hl,bc ;number of bytes from start to loop point 
   23 D1:AC5D C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   24 D1:AC5E E5 -  -  -  	push hl 
   25 D1:AC5F C1 -  -  -  	pop bc
   26 D1:AC60 21 00 96 D4 	ld hl,BG_buffer 
   27 D1:AC64 ED B0 -  -  	ldir 
   28 D1:AC66 C9 -  -  -  	ret 
   29 D1:AC67 -  -  -  -  	
   30 D1:AC67 -  -  -  -  	
   31 D1:AC67 -  -  -  -  ;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
   32 D1:AC67 -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   33 D1:AC67 -  -  -  -  move_bg:
   34 D1:AC67 2A CD AB D1 	ld hl,(cam_pos);load cam pos 
   35 D1:AC6B CB 3C -  -  	srl h
   36 D1:AC6D CB 1D -  -  	rr l
   37 D1:AC6F CB 3C -  -  	srl h
   38 D1:AC71 CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   39 D1:AC73 -  -  -  -  	;hl holds bg cam pos, lowest visible line of bg layer 
   40 D1:AC73 ED 4B D0 AB 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   41 D1:AC78 37 -  -  -  	scf
   42 D1:AC79 3F -  -  -  	ccf
   43 D1:AC7A ED 42 -  -  	sbc hl,bc ;compare to the updated location
   44 D1:AC7C C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   45 D1:AC7D DA 89 AC D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   46 D1:AC81 CD D8 AC D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   47 D1:AC85 C3 67 AC D1 	jp move_bg ;repeat until bg is in correct pos
   48 D1:AC89 -  -  -  -  move_bg_down:
   49 D1:AC89 CD 91 AC D1 	call dec_bg
   50 D1:AC8D C3 67 AC D1 	jp move_bg ;repeat until bg is in correct pos
   51 D1:AC91 -  -  -  -  
   52 D1:AC91 -  -  -  -  
   53 D1:AC91 -  -  -  -  dec_bg:;move bg cam down 1px 
   54 D1:AC91 -  -  -  -  
   55 D1:AC91 -  -  -  -  	
   56 D1:AC91 -  -  -  -  	;Testibng
   57 D1:AC91 -  -  -  -  	;ld a,$AD
   58 D1:AC91 -  -  -  -  	;call write_a_to_ram
   59 D1:AC91 -  -  -  -  	
   60 D1:AC91 -  -  -  -  
   61 D1:AC91 -  -  -  -  	;write on draw buffer line 
   62 D1:AC91 2A D6 AB D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   63 D1:AC95 22 1E AE D1 	ld (dbgl_vram_line_start),hl 
   64 D1:AC99 -  -  -  -  	
   65 D1:AC99 2A D0 AB D1 	ld hl,(bg_cam_pos)
   66 D1:AC9D 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   67 D1:AC9E 22 D0 AB D1 	ld (bg_cam_pos),hl 
   68 D1:ACA2 -  -  -  -  	
   69 D1:ACA2 01 00 00 00 	ld bc,0 ;clear bc reg
   70 D1:ACA6 4C -  -  -  	ld c,h;bottom y value msb 
   71 D1:ACA7 7D -  -  -  	ld a,l ;bottom y value lsb 
   72 D1:ACA8 21 80 B8 D1 	ld hl,BG_Data_frame_table
   73 D1:ACAC 0C -  -  -  	inc c 
   74 D1:ACAD 09 -  -  -  	add hl,bc 
   75 D1:ACAE 09 -  -  -  	add hl,bc 
   76 D1:ACAF 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   77 D1:ACB0 ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   78 D1:ACB2 CD 76 AD D1 	call draw_bg_line
   79 D1:ACB6 -  -  -  -  	
   80 D1:ACB6 -  -  -  -  
   81 D1:ACB6 -  -  -  -  	;move buffer pos
   82 D1:ACB6 2A D6 AB D1 	ld hl,(BG_draw_buffer)
   83 D1:ACBA 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
   84 D1:ACBE 37 -  -  -  	scf 
   85 D1:ACBF 3F -  -  -  	ccf 
   86 D1:ACC0 ED 42 -  -  	sbc hl,bc ;compare to current line 
   87 D1:ACC2 2A D6 AB D1 	ld hl,(BG_draw_buffer)
   88 D1:ACC6 C2 CE AC D1 	jp nz,dec_bg_bottom_skip
   89 D1:ACCA 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   90 D1:ACCE -  -  -  -  dec_bg_bottom_skip:
   91 D1:ACCE 01 A0 00 00 	ld bc,160 
   92 D1:ACD2 09 -  -  -  	add hl,bc
   93 D1:ACD3 22 D6 AB D1 	ld (BG_draw_buffer),hl 
   94 D1:ACD7 C9 -  -  -  	ret
   95 D1:ACD8 -  -  -  -  
   96 D1:ACD8 -  -  -  -  
   97 D1:ACD8 -  -  -  -  inc_bg:;move cam up 
   98 D1:ACD8 -  -  -  -  
   99 D1:ACD8 -  -  -  -  	
  100 D1:ACD8 -  -  -  -  	;Testibng
  101 D1:ACD8 -  -  -  -  	;ld a,$AC
  102 D1:ACD8 -  -  -  -  	;call write_a_to_ram
  103 D1:ACD8 -  -  -  -  	
  104 D1:ACD8 -  -  -  -  
  105 D1:ACD8 2A D6 AB D1 	ld hl,(BG_draw_buffer)
  106 D1:ACDC 01 00 96 D4 	ld bc,BG_buffer
  107 D1:ACE0 37 -  -  -  	scf 
  108 D1:ACE1 3F -  -  -  	ccf 
  109 D1:ACE2 ED 42 -  -  	sbc hl,bc ;compare current drawing line to top of bg buffer 
  110 D1:ACE4 2A D6 AB D1 	ld hl,(BG_draw_buffer)
  111 D1:ACE8 C2 F0 AC D1 	jp nz,inc_bg_top_skip ;if they are not equal, continue
  112 D1:ACEC 21 00 2C D5 	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
  113 D1:ACF0 -  -  -  -  inc_bg_top_skip:
  114 D1:ACF0 01 A0 00 00 	ld bc,160 
  115 D1:ACF4 37 -  -  -  	scf
  116 D1:ACF5 3F -  -  -  	ccf 
  117 D1:ACF6 ED 42 -  -  	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
  118 D1:ACF8 22 D6 AB D1 	ld (BG_draw_buffer),hl 
  119 D1:ACFC 22 1E AE D1 	ld (dbgl_vram_line_start),hl 
  120 D1:AD00 2A D0 AB D1 	ld hl,(bg_cam_pos)
  121 D1:AD04 23 -  -  -  	inc hl 
  122 D1:AD05 22 D0 AB D1 	ld (bg_cam_pos),hl ;incremnet cam pos 
  123 D1:AD09 01 EF 00 00 	ld bc,239
  124 D1:AD0D 09 -  -  -  	add hl,bc ;gets uppermost visible line y value in bg layer
  125 D1:AD0E 4C -  -  -  	ld c,h;cam pos msb 
  126 D1:AD0F 7D -  -  -  	ld a,l ;a holds line number in target frame 
  127 D1:AD10 21 80 B8 D1 	ld hl,BG_Data_frame_table
  128 D1:AD14 0C -  -  -  	inc c ;inc to get to upper frame 
  129 D1:AD15 09 -  -  -  	add hl,bc 
  130 D1:AD16 09 -  -  -  	add hl,bc 
  131 D1:AD17 09 -  -  -  	add hl,bc 
  132 D1:AD18 ED 27 -  -  	ld hl,(hl)
  133 D1:AD1A CD 76 AD D1 	call draw_bg_line
  134 D1:AD1E C9 -  -  -  	ret
  135 D1:AD1F -  -  -  -  	
  136 D1:AD1F -  -  -  -  
  137 D1:AD1F -  -  -  -  
  138 D1:AD1F -  -  -  -  
  139 D1:AD1F -  -  -  -  
  140 D1:AD1F -  -  -  -  setup_bg: ;Draws entire BG buffer when loading game 
  141 D1:AD1F 2A CD AB D1 	ld hl,(cam_pos)
  142 D1:AD23 CB 3C -  -  	srl h
  143 D1:AD25 CB 1D -  -  	rr l
  144 D1:AD27 CB 3C -  -  	srl h
  145 D1:AD29 CB 1D -  -  	rr l ;div by 4
  146 D1:AD2B -  -  -  -  	;hl holds bg cam pos 
  147 D1:AD2B 22 D0 AB D1 	ld (bg_cam_pos),hl
  148 D1:AD2F -  -  -  -  	
  149 D1:AD2F 01 EF 00 00 	ld bc,239
  150 D1:AD33 09 -  -  -  	add hl,bc;hl holds y position of uppermost visible line in bg layer 
  151 D1:AD34 -  -  -  -  	
  152 D1:AD34 23 -  -  -  	inc hl;to be dec in loop
  153 D1:AD35 E5 -  -  -  	push hl ;save uppermost line y val
  154 D1:AD36 21 00 96 D4 	ld hl,BG_buffer ;start of bg drawing buffer 
  155 D1:AD3A 22 D6 AB D1 	ld (BG_draw_buffer),hl ;set current bg line drawing location 
  156 D1:AD3E E5 -  -  -  	push hl 
  157 D1:AD3F -  -  -  -  	
  158 D1:AD3F 3E F0 -  -  	ld a,240 ;num loops
  159 D1:AD41 32 69 AD D1 	ld (setup_bg_loop_count),a
  160 D1:AD45 -  -  -  -  setup_bg_loop:
  161 D1:AD45 -  -  -  -  
  162 D1:AD45 E1 -  -  -  	pop hl;vram draw pos, next line of bg drawn here 
  163 D1:AD46 22 1E AE D1 	ld (dbgl_vram_line_start),hl ;set drawing pos 
  164 D1:AD4A 01 A0 00 00 	ld bc,160
  165 D1:AD4E 09 -  -  -  	add hl,bc 
  166 D1:AD4F EB -  -  -  	ex de,hl ;put next vram pos in de 
  167 D1:AD50 E1 -  -  -  	pop hl;uppermost line y val
  168 D1:AD51 2B -  -  -  	dec hl ;dec line y value (move to next lowest line)
  169 D1:AD52 E5 -  -  -  	push hl;push uppermost line y val
  170 D1:AD53 D5 -  -  -  	push de ;push vram pos 
  171 D1:AD54 01 00 00 00 	ld bc,0
  172 D1:AD58 4C -  -  -  	ld c,h;cam pos msb 
  173 D1:AD59 7D -  -  -  	ld a,l ;a holds line number in current frame 
  174 D1:AD5A 21 80 B8 D1 	ld hl,BG_Data_frame_table
  175 D1:AD5E 0C -  -  -  	inc c ;add 1 to get to upper frame
  176 D1:AD5F 09 -  -  -  	add hl,bc 
  177 D1:AD60 09 -  -  -  	add hl,bc 
  178 D1:AD61 09 -  -  -  	add hl,bc 
  179 D1:AD62 ED 27 -  -  	ld hl,(hl) ;hl now points to upper frame data 
  180 D1:AD64 CD 76 AD D1 	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
  181 D1:AD68 -  -  -  -  	
  182 D1:AD68 -  -  -  -  setup_bg_loop_count .equ $ + 1
  183 D1:AD68 3E 00 -  -  	ld a,0
  184 D1:AD6A 3D -  -  -  	dec a ;dec loop counter
  185 D1:AD6B 32 69 AD D1 	ld (setup_bg_loop_count),a
  186 D1:AD6F C2 45 AD D1 	jp nz,setup_bg_loop 
  187 D1:AD73 E1 -  -  -  	pop hl ;pop vram pos 
  188 D1:AD74 E1 -  -  -  	pop hl ;pop current line number 
  189 D1:AD75 C9 -  -  -  	ret 
  190 D1:AD76 -  -  -  -  
  191 D1:AD76 -  -  -  -  
  192 D1:AD76 -  -  -  -  
  193 D1:AD76 -  -  -  -  
  194 D1:AD76 -  -  -  -  
  195 D1:AD76 -  -  -  -  
  196 D1:AD76 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  197 D1:AD76 -  -  -  -  ;for drawing BG, only 1 line is drawn at a time.
  198 D1:AD76 -  -  -  -  ;therefore only check sprites in the above frame that may extend downwards, 
  199 D1:AD76 -  -  -  -  ;and the sprites in the target frame which contains the y position of the line being drawn
  200 D1:AD76 -  -  -  -  ;set dbgl_vram_line_start before calling 
  201 D1:AD76 -  -  -  -  draw_bg_line:
  202 D1:AD76 E5 -  -  -  	push hl ;upper frame sprite table pointer 
  203 D1:AD77 F5 -  -  -  	push af ;save line number 
  204 D1:AD78 3E FF -  -  	ld a,$FF ;Set all of line to FF to clear it with color 16
  205 D1:AD7A 01 A0 00 00 	ld bc,160
  206 D1:AD7E 2A 1E AE D1 	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
  207 D1:AD82 CD E0 10 02 	call _MemSet ;Clear all of line 
  208 D1:AD86 F1 -  -  -  	pop af ;return line number 
  209 D1:AD87 E1 -  -  -  	pop hl ;return upper frame ptr 
  210 D1:AD88 -  -  -  -  
  211 D1:AD88 -  -  -  -  
  212 D1:AD88 -  -  -  -  
  213 D1:AD88 32 00 AE D1 	ld (dbgl_line_num),a ;write line num to required positions 
  214 D1:AD8C -  -  -  -  	
  215 D1:AD8C ED 44 -  -  	neg
  216 D1:AD8E CA 9C AD D1 	jp z, dbgl_skip_upper_loop ;need to check 0 case, negative 0 = 0
  217 D1:AD92 32 CD AD D1 	ld (dbgl_lines_to_top_of_target_frame),a ;a holds lines from top of frame (1 indexed)
  218 D1:AD96 FE 78 -  -  	cp BGMaxSpriteHeight
  219 D1:AD98 DA AC AD D1 	jp c, dbgl_do_upper_loop
  220 D1:AD9C -  -  -  -  dbgl_skip_upper_loop:
  221 D1:AD9C -  -  -  -  	;Upper sprites are too far to be seen in this line, skip upper loop 
  222 D1:AD9C 23 -  -  -  	inc hl 
  223 D1:AD9D 23 -  -  -  	inc hl
  224 D1:AD9E 23 -  -  -  	inc hl ;hl points to number of elements 
  225 D1:AD9F 01 00 00 00 	ld bc,0
  226 D1:ADA3 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  227 D1:ADA4 09 -  -  -  	add hl,bc 
  228 D1:ADA5 09 -  -  -  	add hl,bc 
  229 D1:ADA6 09 -  -  -  	add hl,bc 
  230 D1:ADA7 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  231 D1:ADA8 C3 E5 AD D1 	jp dbgl_lower_start ;skip upper loop
  232 D1:ADAC -  -  -  -  	
  233 D1:ADAC -  -  -  -  dbgl_do_upper_loop:
  234 D1:ADAC ED 17 -  -  	ld de,(hl) ;DE points to sprite table 
  235 D1:ADAE ED 53 2F AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr
  236 D1:ADB3 23 -  -  -  	inc hl
  237 D1:ADB4 23 -  -  -  	inc hl
  238 D1:ADB5 23 -  -  -  	inc hl ;to frame data start 
  239 D1:ADB6 08 -  -  -  	ex af,af' ;'
  240 D1:ADB7 7E -  -  -  	ld a,(hl);number of elements = num loops
  241 D1:ADB8 3C -  -  -  	inc a ;add 1 bc termination is checked at start of loop 
  242 D1:ADB9 08 -  -  -  	ex af,af' ;'
  243 D1:ADBA -  -  -  -  	
  244 D1:ADBA 11 00 00 00 	ld de,0
  245 D1:ADBE 01 00 00 00 	ld bc,0
  246 D1:ADC2 -  -  -  -  	;upper frame, checking for sprites that carry into lower frame
  247 D1:ADC2 -  -  -  -  dbgl_upper_loop:
  248 D1:ADC2 08 -  -  -  	ex af,af' ;'
  249 D1:ADC3 3D -  -  -  	dec a 
  250 D1:ADC4 CA E5 AD D1 	jp z,dbgl_lower_start
  251 D1:ADC8 08 -  -  -  	ex af,af' ;'
  252 D1:ADC9 23 -  -  -  	inc hl ;to Y
  253 D1:ADCA 7E -  -  -  	ld a,(hl); y value of sprite in upper frame 
  254 D1:ADCB 23 -  -  -  	inc hl;to height
  255 D1:ADCC -  -  -  -  dbgl_lines_to_top_of_target_frame .equ $ + 1
  256 D1:ADCC C6 00 -  -  	add a,0 ;a holds line number in sprite to draw (0 indexed)
  257 D1:ADCE DA DF AD D1 	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
  258 D1:ADD2 BE -  -  -  	cp (hl) ;compare to sprite height 
  259 D1:ADD3 D2 DF AD D1 	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
  260 D1:ADD7 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  261 D1:ADD7 CD 18 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  262 D1:ADDB -  -  -  -  	;hl pts to sprite index
  263 D1:ADDB C3 C2 AD D1 	jp dbgl_upper_loop
  264 D1:ADDF -  -  -  -  	
  265 D1:ADDF -  -  -  -  dbgl_upper_skip_sprite:
  266 D1:ADDF 23 -  -  -  	inc hl ;to x 
  267 D1:ADE0 23 -  -  -  	inc hl ;to index 
  268 D1:ADE1 C3 C2 AD D1 	jp dbgl_upper_loop
  269 D1:ADE5 -  -  -  -  	
  270 D1:ADE5 -  -  -  -  	
  271 D1:ADE5 -  -  -  -  dbgl_lower_start:
  272 D1:ADE5 -  -  -  -  ;LOWER FRAME START 
  273 D1:ADE5 -  -  -  -  	;After breaking upper loop, hl is pointing to the sprite index of the last element in the upper frame 
  274 D1:ADE5 23 -  -  -  	inc hl ;hl now points to sprite table of the lower frame 
  275 D1:ADE6 ED 17 -  -  	ld de,(hl)
  276 D1:ADE8 ED 53 2F AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr 
  277 D1:ADED 11 00 00 00 	ld de,0;clear d upper 
  278 D1:ADF1 23 -  -  -  	inc hl
  279 D1:ADF2 23 -  -  -  	inc hl
  280 D1:ADF3 23 -  -  -  	inc hl;to num elements
  281 D1:ADF4 -  -  -  -  	
  282 D1:ADF4 08 -  -  -  	ex af,af' ;'
  283 D1:ADF5 7E -  -  -  	ld a,(hl);number of elements
  284 D1:ADF6 3C -  -  -  	inc a 
  285 D1:ADF7 08 -  -  -  	ex af,af' ;'
  286 D1:ADF8 -  -  -  -  	
  287 D1:ADF8 -  -  -  -  	
  288 D1:ADF8 -  -  -  -  dbgl_lower_loop:
  289 D1:ADF8 08 -  -  -  	ex af,af' ;'
  290 D1:ADF9 3D -  -  -  	dec a 
  291 D1:ADFA C8 -  -  -  	ret z
  292 D1:ADFB 08 -  -  -  	ex af,af' ;'
  293 D1:ADFC 23 -  -  -  	inc hl ;to y
  294 D1:ADFD 7E -  -  -  	ld a,(hl) ;y pos of sprite in lower frame 
  295 D1:ADFE 23 -  -  -  	inc hl;to height
  296 D1:ADFF -  -  -  -  dbgl_line_num .equ $ + 1
  297 D1:ADFF D6 00 -  -  	sub 0;subtract line num 
  298 D1:AE01 DA 12 AE D1 	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
  299 D1:AE05 -  -  -  -  	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
  300 D1:AE05 BE -  -  -  	cp (hl) ;compare to sprite height -1
  301 D1:AE06 D2 12 AE D1 	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
  302 D1:AE0A -  -  -  -  	
  303 D1:AE0A -  -  -  -  	;Sprite is to be drawn, a holds line number 
  304 D1:AE0A CD 18 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  305 D1:AE0E -  -  -  -  	;hl pts to sprite index
  306 D1:AE0E C3 F8 AD D1 	jp dbgl_lower_loop
  307 D1:AE12 -  -  -  -  	
  308 D1:AE12 -  -  -  -  dbgl_lower_skip_sprite:
  309 D1:AE12 23 -  -  -  	inc hl ;to x 
  310 D1:AE13 23 -  -  -  	inc hl ;to index 
  311 D1:AE14 C3 F8 AD D1 	jp dbgl_lower_loop
  312 D1:AE18 -  -  -  -  
  313 D1:AE18 -  -  -  -  ;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
  314 D1:AE18 -  -  -  -  dbgl_setup_and_draw:
  315 D1:AE18 23 -  -  -  	inc hl;to x pos
  316 D1:AE19 5E -  -  -  	ld e,(hl);e holds x pos 
  317 D1:AE1A 23 -  -  -  	inc hl 
  318 D1:AE1B 4E -  -  -  	ld c,(hl);sprite index 
  319 D1:AE1C E5 -  -  -  	push hl ;save location in data 
  320 D1:AE1D -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  321 D1:AE1D 21 00 00 00 	ld hl,0
  322 D1:AE21 19 -  -  -  	add hl,de;add x pos 
  323 D1:AE22 EB -  -  -  	ex de,hl;put vram pos into de 
  324 D1:AE23 -  -  -  -  	
  325 D1:AE23 26 A0 -  -  	ld h,160
  326 D1:AE25 6F -  -  -  	ld l,a ;number of lines to subtract 
  327 D1:AE26 ED 6C -  -  	mlt hl;bytes to subtract from vram
  328 D1:AE28 37 -  -  -  	scf 
  329 D1:AE29 3F -  -  -  	ccf
  330 D1:AE2A EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  331 D1:AE2B ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  332 D1:AE2D EB -  -  -  	ex de,hl;put in de
  333 D1:AE2E -  -  -  -  	
  334 D1:AE2E -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  335 D1:AE2E 21 00 00 00 	ld hl,0
  336 D1:AE32 09 -  -  -  	add hl,bc
  337 D1:AE33 09 -  -  -  	add hl,bc 
  338 D1:AE34 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  339 D1:AE35 ED 27 -  -  	ld hl,(hl);hl holds sprite data
  340 D1:AE37 -  -  -  -  
  341 D1:AE37 -  -  -  -  
  342 D1:AE37 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  343 D1:AE39 CA 45 AE D1 	jp z,dbgl_fast_sprite ;if even address, fast sprite 
  344 D1:AE3D CD 17 AF D1 	call draw_slow_sprite_single_line
  345 D1:AE41 C3 49 AE D1 	jp dbgl_slow_sprite
  346 D1:AE45 -  -  -  -  dbgl_fast_sprite:
  347 D1:AE45 CD 99 AE D1 	call draw_fast_sprite_single_line
  348 D1:AE49 -  -  -  -  dbgl_slow_sprite:
  349 D1:AE49 -  -  -  -  	
  350 D1:AE49 11 00 00 00 	ld de,0;clear de 
  351 D1:AE4D 01 00 00 00 	ld bc,0
  352 D1:AE51 E1 -  -  -  	pop hl;back to data
  353 D1:AE52 C9 -  -  -  	ret
  354 D1:AE53 -  -  -  -  	
  355 D1:AE53 -  -  -  -  
  356 D1:AE53 -  -  -  -  
  357 D1:AE53 -  -  -  -  
  358 D1:AE53 -  -  -  -  
  359 D1:AE53 -  -  -  -  
  360 D1:AE53 -  -  -  -  
  361 D1:AE53 -  -  -  -  
  362 D1:AE53 -  -  -  -  
  363 D1:AE53 -  -  -  -  
  364 D1:AE53 -  -  -  -  ; dbgl_upper_loop:
  365 D1:AE53 -  -  -  -  	; ld a,(hl);y
  366 D1:AE53 -  -  -  -  	; inc hl;to height
  367 D1:AE53 -  -  -  -  	; sub (hl);subtract height
  368 D1:AE53 -  -  -  -  	;a is y value of bottom row of sprite
  369 D1:AE53 -  -  -  -  	; jp nc,dbgl_upper_skip;if no carry into next frame (most sprites will do this so want this to be fast)
  370 D1:AE53 -  -  -  -  	
  371 D1:AE53 -  -  -  -  	;sprite extends into target frame
  372 D1:AE53 -  -  -  -  ; dbgl_line_num .equ $ + 1
  373 D1:AE53 -  -  -  -  	; sub 0 ;compare to line number in target frame
  374 D1:AE53 -  -  -  -  	; jp c,dbgl_upper_cont;if linenum is >  bottom row
  375 D1:AE53 -  -  -  -  	; jp z,dbgl_upper_cont;if = bottom row
  376 D1:AE53 -  -  -  -  ; dbgl_upper_skip:
  377 D1:AE53 -  -  -  -  	; inc hl;to x
  378 D1:AE53 -  -  -  -  	; inc hl;to index 
  379 D1:AE53 -  -  -  -  	; inc hl;to y
  380 D1:AE53 -  -  -  -  	; ex af,af';'
  381 D1:AE53 -  -  -  -  	; dec a ;dec number of loops 
  382 D1:AE53 -  -  -  -  	; jp z,dbgl_lower_start 
  383 D1:AE53 -  -  -  -  	; ex af,af';'
  384 D1:AE53 -  -  -  -  	; jp dbgl_upper_loop
  385 D1:AE53 -  -  -  -  	
  386 D1:AE53 -  -  -  -  ; dbgl_upper_cont:
  387 D1:AE53 -  -  -  -  	;a = bottom row - linenum
  388 D1:AE53 -  -  -  -  	; add a,(hl);add height-1 
  389 D1:AE53 -  -  -  -  	;a holds 0 indexed line num within sprite
  390 D1:AE53 -  -  -  -  	; call dbgl_setup_and_draw
  391 D1:AE53 -  -  -  -  	; inc hl;to y
  392 D1:AE53 -  -  -  -  	; ex af,af';'
  393 D1:AE53 -  -  -  -  	; dec a 
  394 D1:AE53 -  -  -  -  	; jp z,dbgl_lower_start 
  395 D1:AE53 -  -  -  -  	; ex af,af';'
  396 D1:AE53 -  -  -  -  	; jp dbgl_upper_loop
  397 D1:AE53 -  -  -  -  
  398 D1:AE53 -  -  -  -  
  399 D1:AE53 -  -  -  -  
  400 D1:AE53 -  -  -  -  
  401 D1:AE53 -  -  -  -  
  402 D1:AE53 -  -  -  -  
  403 D1:AE53 -  -  -  -  
  404 D1:AE53 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  405 D1:AE53 -  -  -  -  ; draw_bg_sprite_line:
  406 D1:AE53 -  -  -  -  	; push hl;save 
  407 D1:AE53 -  -  -  -  	; ld l,(hl);sprite width in px
  408 D1:AE53 -  -  -  -  	; ld h,a ;lines to skip
  409 D1:AE53 -  -  -  -  	; ld a,l;width 
  410 D1:AE53 -  -  -  -  	; mlt hl;widt*lines skipped 
  411 D1:AE53 -  -  -  -  	; pop bc 
  412 D1:AE53 -  -  -  -  	; add hl,bc;skip to target line data 
  413 D1:AE53 -  -  -  -  	; inc hl 
  414 D1:AE53 -  -  -  -  	;hl is pointing to start of line data 
  415 D1:AE53 -  -  -  -  	; sra a;divide width by 2 
  416 D1:AE53 -  -  -  -  	; ld b,a;b holds number of loops 
  417 D1:AE53 -  -  -  -  ; dbgsl_loop:
  418 D1:AE53 -  -  -  -  	; ld a,(de); load vram data 
  419 D1:AE53 -  -  -  -  	; and (hl);and with mask 
  420 D1:AE53 -  -  -  -  	; inc hl ;to color data 
  421 D1:AE53 -  -  -  -  	; or (hl);or w color data 
  422 D1:AE53 -  -  -  -  	; ld (de),a;write to vram  
  423 D1:AE53 -  -  -  -  	; inc de
  424 D1:AE53 -  -  -  -  	; inc hl;to mask data
  425 D1:AE53 -  -  -  -  	; djnz dbgsl_loop
  426 D1:AE53 -  -  -  -  	; ret 
  427 D1:AE53 -  -  -  -  	
  428 D1:AE53 -  -  -  -  
  429 D1:AE53 -  -  -  -  
  430 D1:AE53 -  -  -  -  
  431 D1:AE53 -  -  -  -  
  432 D1:AE53 -  -  -  -  
  433 D1:AE53 -  -  -  -  
  434 D1:AE53 -  -  -  -  
  435 D1:AE53 -  -  -  -  
  436 D1:AE53 -  -  -  -  
  437 D1:AE53 -  -  -  -  
  438 D1:AE53 -  -  -  -  
  439 D1:AE53 -  -  -  -  
Listing for file "ascent.asm"
  497 D1:AE53 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:AE53 -  -  -  -  
    2 D1:AE53 -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:AE53 -  -  -  -  setup_sprite_bottom_cut:
    4 D1:AE53 1B -  -  -  	dec de
    5 D1:AE54 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:AE58 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:AE59 E5 -  -  -  	push hl ;save data 
    8 D1:AE5A 09 -  -  -  	add hl,bc
    9 D1:AE5B 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:AE5C E1 -  -  -  	pop hl ;return to start of data
   11 D1:AE5D 4E -  -  -  	ld c,(hl) ;height
   12 D1:AE5E 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:AE5F C9 -  -  -  	ret 
   14 D1:AE60 -  -  -  -  
   15 D1:AE60 -  -  -  -  setup_sprite_top_cut:
   16 D1:AE60 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:AE61 01 00 00 00 	ld bc,0
   18 D1:AE65 4F -  -  -  	ld c,a ;lines to skip (1 indexed)
   19 D1:AE66 D5 -  -  -  	push de
   20 D1:AE67 11 00 00 00 	ld de,0
   21 D1:AE6B E5 -  -  -  	push hl
   22 D1:AE6C 5E -  -  -  	ld e,(hl);height
   23 D1:AE6D 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:AE6E 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:AE6F E1 -  -  -  	pop hl;start of data
   26 D1:AE70 19 -  -  -  	add hl,de
   27 D1:AE71 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:AE72 23 -  -  -  	inc hl;hl is pixel data
   29 D1:AE73 D1 -  -  -  	pop de;back to vram
   30 D1:AE74 79 -  -  -  	ld a,c;loops to skip
   31 D1:AE75 C9 -  -  -  	ret 
   32 D1:AE76 -  -  -  -  
   33 D1:AE76 -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:AE76 -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:AE76 1B -  -  -  	dec de
   36 D1:AE77 01 00 00 00 	ld bc,0
   37 D1:AE7B 4F -  -  -  	ld c,a ;line to draw
   38 D1:AE7C D5 -  -  -  	push de ;save vram 
   39 D1:AE7D 11 00 00 00 	ld de,0
   40 D1:AE81 E5 -  -  -  	push hl
   41 D1:AE82 5E -  -  -  	ld e,(hl);height
   42 D1:AE83 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:AE84 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:AE85 23 -  -  -  	inc hl 
   45 D1:AE86 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:AE87 E1 -  -  -  	pop hl;start of data
   47 D1:AE88 19 -  -  -  	add hl,de
   48 D1:AE89 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:AE8A D1 -  -  -  	pop de;back to vram
   50 D1:AE8B 79 -  -  -  	ld a,c;loops to skip
   51 D1:AE8C C9 -  -  -  	ret 
   52 D1:AE8D -  -  -  -  
   53 D1:AE8D -  -  -  -  
   54 D1:AE8D -  -  -  -  
   55 D1:AE8D -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:AE8D 3C -  -  -  	inc a 
   57 D1:AE8E -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:AE8E -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:AE8E CD 53 AE D1 	call setup_sprite_bottom_cut
   60 D1:AE92 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:AE93 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:AE94 EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:AE95 C3 DC AE D1 	jp dfgs_loop
   64 D1:AE99 -  -  -  -  
   65 D1:AE99 -  -  -  -  
   66 D1:AE99 -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:AE99 -  -  -  -  draw_fast_sprite_single_line:
   68 D1:AE99 B7 -  -  -  	or a 
   69 D1:AE9A CA 8D AE D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:AE9E -  -  -  -  	;we know a is not 0 here 
   71 D1:AE9E CD 76 AE D1 	call setup_sprite_single_line
   72 D1:AEA2 -  -  -  -  	
   73 D1:AEA2 C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AEA3 01 00 00 00 	ld bc,0
   75 D1:AEA7 -  -  -  -  	
   76 D1:AEA7 C3 B4 AE D1 	jp draw_fast_sprite_top_loop 
   77 D1:AEAB -  -  -  -  
   78 D1:AEAB -  -  -  -  
   79 D1:AEAB -  -  -  -  
   80 D1:AEAB -  -  -  -  ;de = vram , hl = data, a = top lines to skip (1 indexed)
   81 D1:AEAB -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AEAB CD 60 AE D1 	call setup_sprite_top_cut
   83 D1:AEAF C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AEB0 01 00 00 00 	ld bc,0 
   85 D1:AEB4 -  -  -  -  	
   86 D1:AEB4 -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AEB4 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AEB5 EB -  -  -  	ex de,hl;hl is vram
   89 D1:AEB6 09 -  -  -  	add hl,bc
   90 D1:AEB7 EB -  -  -  	ex de,hl;hl is data
   91 D1:AEB8 23 -  -  -  	inc hl
   92 D1:AEB9 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AEBA 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AEBB EB -  -  -  	ex de,hl;hl is vram
   95 D1:AEBC 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AEBD 13 -  -  -  	inc de
   97 D1:AEBE EB -  -  -  	ex de,hl;hl is data
   98 D1:AEBF 3D -  -  -  	dec a
   99 D1:AEC0 C2 B4 AE D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AEC4 -  -  -  -  	
  101 D1:AEC4 -  -  -  -  	
  102 D1:AEC4 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AEC5 78 -  -  -  	ld a,b
  104 D1:AEC6 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AEC7 -  -  -  -  		
  106 D1:AEC7 01 00 00 00 	ld bc,0
  107 D1:AECB 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AECC EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AECD C3 DC AE D1 	jp dfgs_loop
  110 D1:AED1 -  -  -  -  
  111 D1:AED1 -  -  -  -  
  112 D1:AED1 -  -  -  -  ;de = vram , hl = data
  113 D1:AED1 -  -  -  -  draw_fast_sprite_full:
  114 D1:AED1 1B -  -  -  	dec de
  115 D1:AED2 01 00 00 00 	ld bc,0
  116 D1:AED6 4E -  -  -  	ld c,(hl);height
  117 D1:AED7 09 -  -  -  	add hl,bc
  118 D1:AED8 7E -  -  -  	ld a,(hl);total loops
  119 D1:AED9 23 -  -  -  	inc hl
  120 D1:AEDA 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AEDB EB -  -  -  	ex de,hl
  122 D1:AEDC -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AEDC -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AEDC 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AEDD EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AEDE 23 -  -  -  	inc hl
  127 D1:AEDF 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AEE0 23 -  -  -  	inc hl
  129 D1:AEE1 ED B0 -  -  	ldir
  130 D1:AEE3 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AEE4 EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AEE5 3D -  -  -  	dec a
  133 D1:AEE6 C2 DC AE D1 	jp nz,dfgs_loop
  134 D1:AEEA C9 -  -  -  	ret
  135 D1:AEEB -  -  -  -  	
  136 D1:AEEB -  -  -  -  	
  137 D1:AEEB -  -  -  -  	
  138 D1:AEEB -  -  -  -  	
  139 D1:AEEB -  -  -  -  
  140 D1:AEEB -  -  -  -  
  141 D1:AEEB -  -  -  -  ;hl = data, de = vram
  142 D1:AEEB -  -  -  -  draw_slow_sprite_full:
  143 D1:AEEB 01 00 00 00 	ld bc,0
  144 D1:AEEF 4E -  -  -  	ld c,(hl);height
  145 D1:AEF0 09 -  -  -  	add hl,bc
  146 D1:AEF1 7E -  -  -  	ld a,(hl);num loops
  147 D1:AEF2 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AEF3 D9 -  -  -  	exx;into shadow 
  149 D1:AEF4 47 -  -  -  	ld b,a ;number of loops
  150 D1:AEF5 -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AEF5 -  -  -  -  dsfgs_line_loop:
  152 D1:AEF5 D9 -  -  -  	exx;out of shadow
  153 D1:AEF6 23 -  -  -  	inc hl;gap length
  154 D1:AEF7 4E -  -  -  	ld c,(hl);gap length
  155 D1:AEF8 EB -  -  -  	ex de,hl;hl is vram
  156 D1:AEF9 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AEFA EB -  -  -  	ex de,hl;hl is data
  158 D1:AEFB 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AEFC 1A -  -  -  	ld a,(de);vram data
  160 D1:AEFD A6 -  -  -  	and (hl)
  161 D1:AEFE 23 -  -  -  	inc hl;pixel data
  162 D1:AEFF B6 -  -  -  	or (hl)
  163 D1:AF00 12 -  -  -  	ld (de),a
  164 D1:AF01 23 -  -  -  	inc hl;ldir length
  165 D1:AF02 -  -  -  -  	
  166 D1:AF02 13 -  -  -  	inc de;move to next pixel
  167 D1:AF03 -  -  -  -  	
  168 D1:AF03 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AF04 23 -  -  -  	inc hl;data
  170 D1:AF05 4F -  -  -  	ld c,a
  171 D1:AF06 B7 -  -  -  	or a
  172 D1:AF07 CA 0D AF D1 	jp z,dsfgs_ldir_skip
  173 D1:AF0B ED B0 -  -  	ldir
  174 D1:AF0D -  -  -  -  dsfgs_ldir_skip:
  175 D1:AF0D 1A -  -  -  	ld a,(de);vram data
  176 D1:AF0E A6 -  -  -  	and (hl)
  177 D1:AF0F 23 -  -  -  	inc hl;pixel data
  178 D1:AF10 B6 -  -  -  	or (hl)
  179 D1:AF11 12 -  -  -  	ld (de),a
  180 D1:AF12 -  -  -  -  	
  181 D1:AF12 D9 -  -  -  	exx ;into shadow
  182 D1:AF13 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AF15 D9 -  -  -  	exx ;out 
  184 D1:AF16 C9 -  -  -  	ret
  185 D1:AF17 -  -  -  -  
  186 D1:AF17 -  -  -  -  
  187 D1:AF17 -  -  -  -  
  188 D1:AF17 -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AF17 -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AF17 -  -  -  -  
  191 D1:AF17 B7 -  -  -  	or a 
  192 D1:AF18 CA 55 AF D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AF1C -  -  -  -  	;we know a is not 0 here
  194 D1:AF1C CD 76 AE D1 	call setup_sprite_single_line
  195 D1:AF20 C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AF21 01 00 00 00 	ld bc,0
  197 D1:AF25 -  -  -  -  	
  198 D1:AF25 C3 32 AF D1 	jp slow_sprite_data_traverse 
  199 D1:AF29 -  -  -  -  	
  200 D1:AF29 -  -  -  -  
  201 D1:AF29 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:AF29 -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:AF29 CD 60 AE D1 	call setup_sprite_top_cut
  204 D1:AF2D C5 -  -  -  	push bc;save total and skipped loops
  205 D1:AF2E 01 00 00 00 	ld bc,0
  206 D1:AF32 -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:AF32 -  -  -  -  slow_sprite_data_traverse:
  208 D1:AF32 4E -  -  -  	ld c,(hl);gap length
  209 D1:AF33 EB -  -  -  	ex de,hl;hl is vram
  210 D1:AF34 09 -  -  -  	add hl,bc
  211 D1:AF35 EB -  -  -  	ex de,hl
  212 D1:AF36 -  -  -  -  	
  213 D1:AF36 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:AF37 23 -  -  -  	inc hl
  215 D1:AF38 23 -  -  -  	inc hl;ldir length
  216 D1:AF39 4E -  -  -  	ld c,(hl)
  217 D1:AF3A 09 -  -  -  	add hl,bc
  218 D1:AF3B EB -  -  -  	ex de,hl
  219 D1:AF3C 09 -  -  -  	add hl,bc
  220 D1:AF3D EB -  -  -  	ex de,hl
  221 D1:AF3E 13 -  -  -  	inc de;inc for leading pix 
  222 D1:AF3F 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:AF40 23 -  -  -  	inc hl
  224 D1:AF41 23 -  -  -  	inc hl;gap length
  225 D1:AF42 -  -  -  -  	
  226 D1:AF42 3D -  -  -  	dec a 
  227 D1:AF43 C2 32 AF D1 	jp nz,slow_sprite_data_traverse
  228 D1:AF47 -  -  -  -  
  229 D1:AF47 -  -  -  -  
  230 D1:AF47 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:AF48 78 -  -  -  	ld a,b
  232 D1:AF49 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:AF4A 01 00 00 00 	ld bc,0;clear bc 
  234 D1:AF4E 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:AF4F D9 -  -  -  	exx ;toshadow
  236 D1:AF50 47 -  -  -  	ld b,a 
  237 D1:AF51 C3 F5 AE D1 	jp dsfgs_line_loop
  238 D1:AF55 -  -  -  -  	
  239 D1:AF55 -  -  -  -  	
  240 D1:AF55 -  -  -  -  	
  241 D1:AF55 -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:AF55 3C -  -  -  	inc a 
  243 D1:AF56 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:AF56 -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:AF56 -  -  -  -  
  246 D1:AF56 CD 53 AE D1 	call setup_sprite_bottom_cut
  247 D1:AF5A -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:AF5A D9 -  -  -  	exx ;toshadow
  249 D1:AF5B 47 -  -  -  	ld b,a
  250 D1:AF5C C3 F5 AE D1 	jp dsfgs_line_loop
  251 D1:AF60 -  -  -  -  
  252 D1:AF60 -  -  -  -  
  253 D1:AF60 -  -  -  -  
  254 D1:AF60 -  -  -  -  
  255 D1:AF60 -  -  -  -  
  256 D1:AF60 -  -  -  -  
  257 D1:AF60 -  -  -  -  
  258 D1:AF60 -  -  -  -  
  259 D1:AF60 -  -  -  -  
  260 D1:AF60 -  -  -  -  
  261 D1:AF60 -  -  -  -  
  262 D1:AF60 -  -  -  -  
  263 D1:AF60 -  -  -  -  
  264 D1:AF60 -  -  -  -  
  265 D1:AF60 -  -  -  -  
  266 D1:AF60 -  -  -  -  
  267 D1:AF60 -  -  -  -  
  268 D1:AF60 -  -  -  -  
  269 D1:AF60 -  -  -  -  
  270 D1:AF60 -  -  -  -  
  271 D1:AF60 -  -  -  -  
  272 D1:AF60 -  -  -  -  
  273 D1:AF60 -  -  -  -  
  274 D1:AF60 -  -  -  -  
  275 D1:AF60 -  -  -  -  
  276 D1:AF60 -  -  -  -  
  277 D1:AF60 -  -  -  -  
  278 D1:AF60 -  -  -  -  
  279 D1:AF60 -  -  -  -  
  280 D1:AF60 -  -  -  -  
  281 D1:AF60 -  -  -  -  
  282 D1:AF60 -  -  -  -  
  283 D1:AF60 -  -  -  -  
  284 D1:AF60 -  -  -  -  
  285 D1:AF60 -  -  -  -  
  286 D1:AF60 -  -  -  -  
  287 D1:AF60 -  -  -  -   
  288 D1:AF60 -  -  -  -  
  289 D1:AF60 -  -  -  -  
  290 D1:AF60 -  -  -  -  
  291 D1:AF60 -  -  -  -  
  292 D1:AF60 -  -  -  -  
  293 D1:AF60 -  -  -  -  
  294 D1:AF60 -  -  -  -  
  295 D1:AF60 -  -  -  -  
  296 D1:AF60 -  -  -  -  
  297 D1:AF60 -  -  -  -  
  298 D1:AF60 -  -  -  -  
  299 D1:AF60 -  -  -  -  
  300 D1:AF60 -  -  -  -  
  301 D1:AF60 -  -  -  -  
  302 D1:AF60 -  -  -  -  
  303 D1:AF60 -  -  -  -  
  304 D1:AF60 -  -  -  -  
  305 D1:AF60 -  -  -  -  
  306 D1:AF60 -  -  -  -  
  307 D1:AF60 -  -  -  -  
  308 D1:AF60 -  -  -  -  
  309 D1:AF60 -  -  -  -  
  310 D1:AF60 -  -  -  -  
  311 D1:AF60 -  -  -  -  
  312 D1:AF60 -  -  -  -  
  313 D1:AF60 -  -  -  -  
  314 D1:AF60 -  -  -  -  
  315 D1:AF60 -  -  -  -  
  316 D1:AF60 -  -  -  -  
  317 D1:AF60 -  -  -  -  
  318 D1:AF60 -  -  -  -  
  319 D1:AF60 -  -  -  -  
  320 D1:AF60 -  -  -  -  
  321 D1:AF60 -  -  -  -  
  322 D1:AF60 -  -  -  -  
  323 D1:AF60 -  -  -  -  
  324 D1:AF60 -  -  -  -  
  325 D1:AF60 -  -  -  -  
  326 D1:AF60 -  -  -  -  
  327 D1:AF60 -  -  -  -  
  328 D1:AF60 -  -  -  -  
  329 D1:AF60 -  -  -  -  
  330 D1:AF60 -  -  -  -  
  331 D1:AF60 -  -  -  -  
  332 D1:AF60 -  -  -  -  
  333 D1:AF60 -  -  -  -  
  334 D1:AF60 -  -  -  -  
  335 D1:AF60 -  -  -  -  
  336 D1:AF60 -  -  -  -  
  337 D1:AF60 -  -  -  -  
  338 D1:AF60 -  -  -  -  
  339 D1:AF60 -  -  -  -  
  340 D1:AF60 -  -  -  -  
  341 D1:AF60 -  -  -  -  
  342 D1:AF60 -  -  -  -  
  343 D1:AF60 -  -  -  -  	
  344 D1:AF60 -  -  -  -  	
Listing for file "ascent.asm"
  498 D1:AF60 -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:AF60 -  -  -  -  
    2 D1:AF60 -  -  -  -  
    3 D1:AF60 -  -  -  -  
    4 D1:AF60 -  -  -  -  
    5 D1:AF60 -  -  -  -  
    6 D1:AF60 -  -  -  -  
    7 D1:AF60 -  -  -  -  
    8 D1:AF60 -  -  -  -  
    9 D1:AF60 -  -  -  -  ;REGISTER USEAGE
   10 D1:AF60 -  -  -  -  ;HL = sprite color data byte
   11 D1:AF60 -  -  -  -  ;C = bit selector for color data 
   12 D1:AF60 -  -  -  -  ;HL' = alpha data byte
   13 D1:AF60 -  -  -  -  ;C' = bit selector for alpha data
   14 D1:AF60 -  -  -  -  ;DE = output sprite data location
   15 D1:AF60 -  -  -  -  ;DE' = loops/line write location 
   16 D1:AF60 -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:AF60 -  -  -  -  
   18 D1:AF60 -  -  -  -  ;SETUP ----------------
   19 D1:AF60 -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:AF60 -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:AF60 -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:AF60 -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:AF60 -  -  -  -  ;------------
   24 D1:AF60 -  -  -  -  
   25 D1:AF60 -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:AF60 -  -  -  -  
   27 D1:AF60 -  -  -  -  
   28 D1:AF60 -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:AF60 -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:AF60 -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:AF60 -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:AF60 -  -  -  -  ;write pixel mask and color data
   33 D1:AF60 -  -  -  -  
   34 D1:AF60 -  -  -  -  ;LDIR ROUTINE
   35 D1:AF60 -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:AF60 -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:AF60 -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:AF60 -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:AF60 -  -  -  -  ;IF FAST, GOTO END
   40 D1:AF60 -  -  -  -  
   41 D1:AF60 -  -  -  -  ;trailing pixels
   42 D1:AF60 -  -  -  -  ;11,10,01 in alpha data 
   43 D1:AF60 -  -  -  -  
   44 D1:AF60 -  -  -  -  ;END AND RESTART
   45 D1:AF60 -  -  -  -  ;Increment loops/line counter
   46 D1:AF60 -  -  -  -  ;check if end of line and write loops/line
   47 D1:AF60 -  -  -  -  
   48 D1:AF60 -  -  -  -  ;store registers and check if interrupt is required
   49 D1:AF60 -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:AF60 -  -  -  -  ;otherwise return to start of loop
   51 D1:AF60 -  -  -  -  
   52 D1:AF60 -  -  -  -  ;
   53 D1:AF60 -  -  -  -  
   54 D1:AF60 -  -  -  -  
   55 D1:AF60 -  -  -  -  
   56 D1:AF60 -  -  -  -  
   57 D1:AF60 -  -  -  -  
   58 D1:AF60 -  -  -  -  
   59 D1:AF60 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:AF60 -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:AF60 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:AF60 CB 09 -  -  	rrc c;rlc flip
   63 D1:AF62 D0 -  -  -  	ret nc
   64 D1:AF63 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:AF63 23 -  -  -  	inc hl;dec hl flip
   66 D1:AF64 C9 -  -  -  	ret
   67 D1:AF65 -  -  -  -  
   68 D1:AF65 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:AF65 -  -  -  -  
   70 D1:AF65 -  -  -  -  ;IN SHADOW
   71 D1:AF65 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:AF65 -  -  -  -  ;C IS BITMASK
   73 D1:AF65 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:AF65 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:AF65 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:AF65 -  -  -  -  ; next call returns first bit in next row  
   77 D1:AF65 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:AF65 -  -  -  -  	;ld a,$A2;test 
   79 D1:AF65 -  -  -  -  	;call write_a_to_ram
   80 D1:AF65 79 -  -  -  	ld a,c 
   81 D1:AF66 -  -  -  -  	;call write_a_to_ram 
   82 D1:AF66 7E -  -  -  	ld a,(hl)
   83 D1:AF67 -  -  -  -  	;call write_a_to_ram
   84 D1:AF67 -  -  -  -  	
   85 D1:AF67 37 -  -  -  	scf 
   86 D1:AF68 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:AF68 DA 75 AF D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:AF6C -  -  -  -  
   89 D1:AF6C -  -  -  -  	;ld a,$A3
   90 D1:AF6C -  -  -  -  	;call write_a_to_ram 
   91 D1:AF6C -  -  -  -  	
   92 D1:AF6C 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:AF6E 32 D8 AF D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:AF72 -  -  -  -  	
   95 D1:AF72 3E 00 -  -  	ld a,0
   96 D1:AF74 C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:AF75 -  -  -  -  
   98 D1:AF75 -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:AF75 -  -  -  -  	
  100 D1:AF75 -  -  -  -  	
  101 D1:AF75 -  -  -  -  	
  102 D1:AF75 -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:AF75 37 -  -  -  	scf
  104 D1:AF76 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:AF76 DA 83 AF D1 	jp c,sdcomp_bit_offset_skip
  106 D1:AF7A 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:AF7C 32 76 AF D1 	ld (sdcomp_bit_offset),a
  108 D1:AF80 -  -  -  -  	;ld a,$A9
  109 D1:AF80 -  -  -  -  	;call write_a_to_ram
  110 D1:AF80 3E 00 -  -  	ld a,0
  111 D1:AF82 C9 -  -  -  	ret ;return 0 first bit
  112 D1:AF83 -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:AF83 -  -  -  -  		
  114 D1:AF83 -  -  -  -  	;ld a,$EF
  115 D1:AF83 -  -  -  -  	;call write_a_to_ram
  116 D1:AF83 7E -  -  -  	ld a,(hl)
  117 D1:AF84 -  -  -  -  	;push af 
  118 D1:AF84 -  -  -  -  	;call write_a_to_ram
  119 D1:AF84 -  -  -  -  	;ld a,c
  120 D1:AF84 -  -  -  -  	;call write_a_to_ram
  121 D1:AF84 -  -  -  -  	;pop af 
  122 D1:AF84 -  -  -  -  	
  123 D1:AF84 -  -  -  -  	
  124 D1:AF84 A1 -  -  -  	and c 
  125 D1:AF85 CD 60 AF D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AF89 -  -  -  -  	;a holds data to return
  127 D1:AF89 -  -  -  -  	;call write_a_to_ram
  128 D1:AF89 37 -  -  -  	scf 
  129 D1:AF8A -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AF8A DA 90 AF D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AF8E 3E 01 -  -  	ld a,1
  132 D1:AF90 -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AF90 -  -  -  -  	
  134 D1:AF90 -  -  -  -  	
  135 D1:AF90 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AF91 3D -  -  -  	dec a 
  137 D1:AF92 -  -  -  -  	;call write_a_to_ram
  138 D1:AF92 C2 BE AF D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AF96 -  -  -  -  	
  140 D1:AF96 -  -  -  -  	;HAve read last bit in line  
  141 D1:AF96 -  -  -  -  	
  142 D1:AF96 -  -  -  -  	;ld a,$AC;Test
  143 D1:AF96 -  -  -  -  	;call write_a_to_ram;Test
  144 D1:AF96 -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AF96 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AF96 3E 00 -  -  	ld a,0
  147 D1:AF98 3D -  -  -  	dec a 
  148 D1:AF99 32 97 AF D1 	ld (sdcomp_lines_remaining),a
  149 D1:AF9D -  -  -  -  	;call write_a_to_ram
  150 D1:AF9D C2 A7 AF D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AFA1 -  -  -  -  	;end of last line reached 
  152 D1:AFA1 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AFA3 32 17 B2 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AFA7 -  -  -  -  	;ld a,$E9
  155 D1:AFA7 -  -  -  -  	;call write_a_to_ram;TEST 
  156 D1:AFA7 -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AFA7 -  -  -  -  	
  158 D1:AFA7 -  -  -  -  
  159 D1:AFA7 -  -  -  -  	
  160 D1:AFA7 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AFA9 32 F2 B1 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AFAD 32 68 AF D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AFB1 -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AFB1 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AFB2 -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AFB2 DA BC AF D1 	jp c,sdcomp_offset_1_skip
  167 D1:AFB6 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AFB8 32 76 AF D1 	ld (sdcomp_bit_offset),a
  169 D1:AFBC -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AFBC -  -  -  -  	
  171 D1:AFBC -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AFBC 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AFBE -  -  -  -  	
  174 D1:AFBE -  -  -  -  	;call write_a_to_ram
  175 D1:AFBE -  -  -  -  	
  176 D1:AFBE -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AFBE 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AFBF -  -  -  -  	
  179 D1:AFBF -  -  -  -  	;push af ;testing
  180 D1:AFBF -  -  -  -  	;ld a,$A0
  181 D1:AFBF -  -  -  -  	;call write_a_to_ram
  182 D1:AFBF -  -  -  -  	;pop af 
  183 D1:AFBF -  -  -  -  	;call write_a_to_ram
  184 D1:AFBF -  -  -  -  	
  185 D1:AFBF C9 -  -  -  	ret 
  186 D1:AFC0 -  -  -  -  	
  187 D1:AFC0 -  -  -  -  
  188 D1:AFC0 -  -  -  -  
  189 D1:AFC0 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AFC0 -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AFC0 -  -  -  -  	;ld a,$A1
  192 D1:AFC0 -  -  -  -  	;call write_a_to_ram
  193 D1:AFC0 -  -  -  -  	
  194 D1:AFC0 -  -  -  -  	;ld a,c ;test
  195 D1:AFC0 -  -  -  -  	;call write_a_to_ram 
  196 D1:AFC0 -  -  -  -  	;ld a,(hl) ;test
  197 D1:AFC0 -  -  -  -  	;call write_a_to_ram
  198 D1:AFC0 -  -  -  -  	
  199 D1:AFC0 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AFC2 32 D8 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AFC6 -  -  -  -  	
  202 D1:AFC6 CD 65 AF D1 	call sdcomp_get_next_alpha
  203 D1:AFCA B7 -  -  -  	or a 
  204 D1:AFCB CA D5 AF D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AFCF 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AFD1 -  -  -  -  	;call write_a_to_ram
  207 D1:AFD1 C3 E4 AF D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AFD5 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AFD5 3E 00 -  -  	ld a,0
  210 D1:AFD7 -  -  -  -  	
  211 D1:AFD7 37 -  -  -  	scf 
  212 D1:AFD8 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AFD8 DA E4 AF D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AFDC F5 -  -  -  	push af 
  215 D1:AFDD -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AFDD -  -  -  -  	
  217 D1:AFDD 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AFDF 32 F9 B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AFE3 -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AFE3 -  -  -  -  	;ld a,$A4
  221 D1:AFE3 -  -  -  -  	;call write_a_to_ram
  222 D1:AFE3 F1 -  -  -  	pop af 
  223 D1:AFE4 -  -  -  -  	
  224 D1:AFE4 -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AFE4 -  -  -  -  
  226 D1:AFE4 -  -  -  -  	
  227 D1:AFE4 32 FA AF D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AFE8 -  -  -  -  	
  229 D1:AFE8 CD 65 AF D1 	call sdcomp_get_next_alpha
  230 D1:AFEC B7 -  -  -  	or a 
  231 D1:AFED CA F7 AF D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AFF1 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AFF3 C3 F9 AF D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AFF7 -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AFF7 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AFF9 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AFF9 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AFF9 F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AFFB -  -  -  -  	
  240 D1:AFFB C9 -  -  -  	ret 
  241 D1:AFFC -  -  -  -  	
  242 D1:AFFC -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AFFC -  -  -  -  
  244 D1:AFFC -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AFFC -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AFFC CD 05 B0 D1 	call sdcomp_get_next_color
  247 D1:B000 0F -  -  -  	rrca 
  248 D1:B001 0F -  -  -  	rrca 
  249 D1:B002 0F -  -  -  	rrca 
  250 D1:B003 0F -  -  -  	rrca
  251 D1:B004 C9 -  -  -  	ret 
  252 D1:B005 -  -  -  -  
  253 D1:B005 -  -  -  -  
  254 D1:B005 -  -  -  -  
  255 D1:B005 -  -  -  -  ;bit orders
  256 D1:B005 -  -  -  -  ;	noflip   flip 
  257 D1:B005 -  -  -  -  ;4bpp 3210 	 0123
  258 D1:B005 -  -  -  -  ;3bpp 210	 012
  259 D1:B005 -  -  -  -  ;2bpp 10	 01
  260 D1:B005 -  -  -  -  ;1bpp 0		 0
  261 D1:B005 -  -  -  -  
  262 D1:B005 -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:B005 -  -  -  -  sdcomp_get_next_color:
  264 D1:B005 D5 -  -  -  	push de ;save data write location
  265 D1:B006 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:B008 -  -  -  -  	
  267 D1:B008 37 -  -  -  	scf
  268 D1:B009 -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:B009 D2 53 B0 D1 	jp nc,sdcomp_get_color_from_index
  270 D1:B00D -  -  -  -  	
  271 D1:B00D -  -  -  -  	;ld a,$C1
  272 D1:B00D -  -  -  -  	;call write_a_to_ram
  273 D1:B00D -  -  -  -  	
  274 D1:B00D 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:B00E -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:B00E A1 -  -  -  	and c
  277 D1:B00F -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:B00F CD 60 AF D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:B013 B7 -  -  -  	or a
  280 D1:B014 CA 1A B0 D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:B018 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:B018 CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:B01A -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:B01A -  -  -  -  	
  285 D1:B01A 37 -  -  -  	scf
  286 D1:B01B -  -  -  -  sdcomp_1bpc .equ $
  287 D1:B01B D2 53 B0 D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:B01F -  -  -  -  
  289 D1:B01F -  -  -  -  	;ld a,$C2
  290 D1:B01F -  -  -  -  	;call write_a_to_ram
  291 D1:B01F -  -  -  -  	
  292 D1:B01F 7E -  -  -  	ld a,(hl)
  293 D1:B020 -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:B020 A1 -  -  -  	and c 
  295 D1:B021 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:B021 CD 60 AF D1 	call sdcomp_next_in_bitstream
  297 D1:B025 B7 -  -  -  	or a
  298 D1:B026 CA 2C B0 D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:B02A -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:B02A CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:B02C -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:B02C -  -  -  -  	
  303 D1:B02C 37 -  -  -  	scf
  304 D1:B02D -  -  -  -  sdcomp_2bpc .equ $ ;if 2bpc jump to end
  305 D1:B02D D2 53 B0 D1 	jp nc,sdcomp_get_color_from_index
  306 D1:B031 -  -  -  -  	
  307 D1:B031 7E -  -  -  	ld a,(hl)
  308 D1:B032 A1 -  -  -  	and c 
  309 D1:B033 CD 60 AF D1 	call sdcomp_next_in_bitstream
  310 D1:B037 B7 -  -  -  	or a
  311 D1:B038 CA 3E B0 D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:B03C -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:B03C CB D3 -  -  	set 2,e 
  314 D1:B03E -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:B03E -  -  -  -  	
  316 D1:B03E 37 -  -  -  	scf
  317 D1:B03F -  -  -  -  sdcomp_3bpc .equ $
  318 D1:B03F D2 53 B0 D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:B043 -  -  -  -  
  320 D1:B043 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:B043 7E -  -  -  	ld a,(hl)
  322 D1:B044 A1 -  -  -  	and c 
  323 D1:B045 CD 60 AF D1 	call sdcomp_next_in_bitstream
  324 D1:B049 B7 -  -  -  	or a
  325 D1:B04A CA 50 B0 D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:B04E -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:B04E CB DB -  -  	set 3,e 
  328 D1:B050 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:B050 -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:B050 7B -  -  -  	ld a,e 
  331 D1:B051 D1 -  -  -  	pop de 
  332 D1:B052 C9 -  -  -  	ret 
  333 D1:B053 -  -  -  -  
  334 D1:B053 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:B053 -  -  -  -  	
  336 D1:B053 -  -  -  -  	;ld a,$DD
  337 D1:B053 -  -  -  -  	;call write_a_to_ram
  338 D1:B053 -  -  -  -  	;ld a,e 
  339 D1:B053 -  -  -  -  	;call write_a_to_ram
  340 D1:B053 -  -  -  -  	
  341 D1:B053 -  -  -  -  	
  342 D1:B053 CB 53 -  -  	bit 2,e 
  343 D1:B055 CA 77 B0 D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:B059 -  -  -  -  	
  345 D1:B059 -  -  -  -  	;Bit 2 = 1 
  346 D1:B059 CB 4B -  -  	bit 1,e 
  347 D1:B05B CA 6B B0 D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:B05F -  -  -  -  
  349 D1:B05F -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:B05F -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:B05F 3E 00 -  -  	ld a,0
  352 D1:B061 CB 43 -  -  	bit 0,e 
  353 D1:B063 CA 99 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:B067 C3 95 B0 D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:B06B -  -  -  -  
  356 D1:B06B -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:B06B -  -  -  -  	;2 = 1 1 = 0 
  358 D1:B06B -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:B06B 3E 00 -  -  	ld a,0
  360 D1:B06D CB 43 -  -  	bit 0,e 
  361 D1:B06F CA 99 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:B073 C3 95 B0 D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:B077 -  -  -  -  	
  364 D1:B077 -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:B077 -  -  -  -  	;bit 2 was 0 
  366 D1:B077 CB 4B -  -  	bit 1,e 
  367 D1:B079 CA 89 B0 D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:B07D -  -  -  -  	
  369 D1:B07D -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:B07D -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:B07D 3E 00 -  -  	ld a,0
  372 D1:B07F CB 43 -  -  	bit 0,e 
  373 D1:B081 CA 99 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:B085 C3 95 B0 D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:B089 -  -  -  -  	
  376 D1:B089 -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:B089 -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:B089 -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:B089 3E 00 -  -  	ld a,0
  380 D1:B08B -  -  -  -  	
  381 D1:B08B CB 43 -  -  	bit 0,e 
  382 D1:B08D CA 99 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:B091 C3 95 B0 D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:B095 -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:B095 E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:B097 D1 -  -  -  	pop de 
  387 D1:B098 -  -  -  -  	
  388 D1:B098 -  -  -  -  	;push af 
  389 D1:B098 -  -  -  -  	;ld a,$C0
  390 D1:B098 -  -  -  -  	;call write_a_to_ram
  391 D1:B098 -  -  -  -  	;pop af 
  392 D1:B098 -  -  -  -  	;call write_a_to_ram
  393 D1:B098 -  -  -  -  	
  394 D1:B098 C9 -  -  -  	ret 
  395 D1:B099 -  -  -  -  	
  396 D1:B099 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:B099 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:B09B 0F -  -  -  	rrca 
  399 D1:B09C 0F -  -  -  	rrca 
  400 D1:B09D 0F -  -  -  	rrca 
  401 D1:B09E 0F -  -  -  	rrca 
  402 D1:B09F D1 -  -  -  	pop de 
  403 D1:B0A0 -  -  -  -  	
  404 D1:B0A0 -  -  -  -  	;push af 
  405 D1:B0A0 -  -  -  -  	;ld a,$C0
  406 D1:B0A0 -  -  -  -  	;call write_a_to_ram
  407 D1:B0A0 -  -  -  -  	;pop af 
  408 D1:B0A0 -  -  -  -  	;call write_a_to_ram
  409 D1:B0A0 -  -  -  -  	
  410 D1:B0A0 C9 -  -  -  	ret 
  411 D1:B0A1 -  -  -  -  
  412 D1:B0A1 -  -  -  -  
  413 D1:B0A1 -  -  -  -  
  414 D1:B0A1 -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:B0A1 -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:B0A1 -  -  -  -  ;in shadow ,destroys a
  417 D1:B0A1 -  -  -  -  sdcomp_traverse_line_data:
  418 D1:B0A1 D9 -  -  -  	exx ;OUT 
  419 D1:B0A2 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:B0A2 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:B0A6 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:B0A6 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:B0A8 D9 -  -  -  	exx;toshadow 
  424 D1:B0A9 -  -  -  -  	
  425 D1:B0A9 -  -  -  -  	;load end of previous alpha data line 
  426 D1:B0A9 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:B0A9 21 00 00 00 	ld hl,0
  428 D1:B0AD -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:B0AD 0E 00 -  -  	ld c,0
  430 D1:B0AF -  -  -  -  sdcomp_traverse_initial:
  431 D1:B0AF D5 -  -  -  	push de
  432 D1:B0B0 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:B0B0 1E 00 -  -  	ld e, 0
  434 D1:B0B2 -  -  -  -  	;e holds sprite width 
  435 D1:B0B2 -  -  -  -  	
  436 D1:B0B2 -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:B0B2 -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:B0B2 CB 09 -  -  	rrc c 
  439 D1:B0B4 D2 B9 B0 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:B0B8 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:B0B9 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:B0B9 7E -  -  -  	ld a,(hl)
  443 D1:B0BA A1 -  -  -  	and c ;read alpha data 
  444 D1:B0BB -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:B0BB CA D1 B0 D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:B0BF D9 -  -  -  	exx;out of shadow 
  447 D1:B0C0 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  448 D1:B0C0 CB 09 -  -  	rrc c ;rotate mask
  449 D1:B0C2 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:B0C2 CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:B0C4 -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:B0C4 CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:B0C6 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:B0C6 CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:B0C8 -  -  -  -  	
  456 D1:B0C8 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:B0C8 79 -  -  -  	ld a,c
  458 D1:B0C9 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:B0C9 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:B0CB CA D0 B0 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:B0CF 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:B0D0 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:B0D0 D9 -  -  -  	exx ;toshadow
  464 D1:B0D1 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:B0D1 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:B0D2 C2 B2 B0 D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:B0D6 D1 -  -  -  	pop de  ;back to write location 
  468 D1:B0D7 -  -  -  -  	;set new end of line pointers 
  469 D1:B0D7 -  -  -  -  	
  470 D1:B0D7 -  -  -  -  	;ld a,$BB 
  471 D1:B0D7 -  -  -  -  	;call write_a_to_ram 
  472 D1:B0D7 -  -  -  -  	;ld a,(hl) 
  473 D1:B0D7 -  -  -  -  	;call write_a_to_ram 
  474 D1:B0D7 -  -  -  -  	;ld a,c 
  475 D1:B0D7 -  -  -  -  	;call write_a_to_ram 
  476 D1:B0D7 -  -  -  -  	
  477 D1:B0D7 -  -  -  -  	
  478 D1:B0D7 22 AA B0 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:B0DB 79 -  -  -  	ld a,c
  480 D1:B0DC 32 AE B0 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:B0E0 D9 -  -  -  	exx ;out
  482 D1:B0E1 22 A3 B0 D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:B0E5 79 -  -  -  	ld a,c 
  484 D1:B0E6 32 A7 B0 D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:B0EA -  -  -  -  	
  486 D1:B0EA -  -  -  -  	;ld a,(hl) 
  487 D1:B0EA -  -  -  -  	;call write_a_to_ram 
  488 D1:B0EA -  -  -  -  	;ld a,c 
  489 D1:B0EA -  -  -  -  	;call write_a_to_ram 
  490 D1:B0EA -  -  -  -  	
  491 D1:B0EA D9 -  -  -  	exx;to shadow 
  492 D1:B0EB C9 -  -  -  	ret
  493 D1:B0EC -  -  -  -  
  494 D1:B0EC -  -  -  -  
  495 D1:B0EC -  -  -  -  
  496 D1:B0EC -  -  -  -  
  497 D1:B0EC -  -  -  -  
  498 D1:B0EC -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  499 D1:B0EC -  -  -  -  sdcomp_write_ldir_data_loop:
  500 D1:B0EC CD 05 B0 D1 	call sdcomp_get_next_color
  501 D1:B0F0 47 -  -  -  	ld b,a;first pixel
  502 D1:B0F1 CD FC AF D1 	call sdcomp_get_next_color_leading_nibble
  503 D1:B0F5 B0 -  -  -  	or b
  504 D1:B0F6 -  -  -  -  	
  505 D1:B0F6 -  -  -  -  	
  506 D1:B0F6 12 -  -  -  	ld (de),a;write color data
  507 D1:B0F7 13 -  -  -  	inc de
  508 D1:B0F8 D9 -  -  -  	exx;to shadow
  509 D1:B0F9 05 -  -  -  	dec b;ldir length counter
  510 D1:B0FA D9 -  -  -  	exx
  511 D1:B0FB C2 EC B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  512 D1:B0FF C9 -  -  -  	ret
  513 D1:B100 -  -  -  -  	
  514 D1:B100 -  -  -  -  
  515 D1:B100 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  516 D1:B100 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  517 D1:B100 D5 -  -  -  	push de ;output location	
  518 D1:B101 47 -  -  -  	ld b,a;save for later
  519 D1:B102 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  520 D1:B104 3E 00 -  -  	ld a,0
  521 D1:B106 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  522 D1:B108 CA 12 B1 D1 	jp z,sdcomp_leading_pixel_first_skip
  523 D1:B10C -  -  -  -  	;has first color
  524 D1:B10C 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  525 D1:B10E CD 05 B0 D1 	call sdcomp_get_next_color
  526 D1:B112 -  -  -  -  sdcomp_leading_pixel_first_skip:
  527 D1:B112 -  -  -  -  	;a is either $00 or $0color1
  528 D1:B112 -  -  -  -  	
  529 D1:B112 1E FF -  -  	ld e,%11111111;assuming no colors
  530 D1:B114 -  -  -  -  	
  531 D1:B114 CB 40 -  -  	bit 0,b;check second pixel alpha
  532 D1:B116 47 -  -  -  	ld b,a;save for later 
  533 D1:B117 3E 00 -  -  	ld a,0
  534 D1:B119 CA 23 B1 D1 	jp z,sdcomp_leading_pixel_second_skip;
  535 D1:B11D -  -  -  -  	;has second color 
  536 D1:B11D CD FC AF D1 	call sdcomp_get_next_color_leading_nibble
  537 D1:B121 -  -  -  -  	;a = color2 0 
  538 D1:B121 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  539 D1:B123 -  -  -  -  	
  540 D1:B123 -  -  -  -  sdcomp_leading_pixel_second_skip:
  541 D1:B123 -  -  -  -  	;a is either 00 or c2 0 
  542 D1:B123 -  -  -  -  	;b is either 00 or 0 c1 
  543 D1:B123 B0 -  -  -  	or b 
  544 D1:B124 47 -  -  -  	ld b,a;final color data
  545 D1:B125 7A -  -  -  	ld a,d 
  546 D1:B126 A3 -  -  -  	and e ;final mask data 
  547 D1:B127 -  -  -  -  	
  548 D1:B127 D1 -  -  -  	pop de;return to pointer 
  549 D1:B128 -  -  -  -  	
  550 D1:B128 12 -  -  -  	ld (de),a;write mask data 
  551 D1:B129 13 -  -  -  	inc de 
  552 D1:B12A 78 -  -  -  	ld a,b;color data 
  553 D1:B12B 12 -  -  -  	ld (de),a;write color data 
  554 D1:B12C -  -  -  -  	
  555 D1:B12C -  -  -  -  	
  556 D1:B12C -  -  -  -  	
  557 D1:B12C -  -  -  -  	;call write_a_to_ram
  558 D1:B12C -  -  -  -  	
  559 D1:B12C 13 -  -  -  	inc de 
  560 D1:B12D C9 -  -  -  	ret 
  561 D1:B12E -  -  -  -  
  562 D1:B12E -  -  -  -  
  563 D1:B12E -  -  -  -  
  564 D1:B12E -  -  -  -  ;ENTRY POINT 
  565 D1:B12E -  -  -  -  
  566 D1:B12E -  -  -  -  
  567 D1:B12E -  -  -  -  ;hl = sprite data start, de = main data decompress location
  568 D1:B12E -  -  -  -  sprite_decompress:
  569 D1:B12E -  -  -  -  
  570 D1:B12E -  -  -  -  
  571 D1:B12E -  -  -  -  	;SETUP ===========================================================================================================
  572 D1:B12E -  -  -  -  
  573 D1:B12E -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  574 D1:B12E -  -  -  -  
  575 D1:B12E -  -  -  -  	;HL pointing to flags registers
  576 D1:B12E -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  577 D1:B12E -  -  -  -  	;set bpc mode 
  578 D1:B12E CB 7E -  -  	bit 7,(hl)
  579 D1:B130 C4 E0 B3 D1 	call nz,sdcomp_set_4bpc
  580 D1:B134 CB 76 -  -  	bit 6,(hl)
  581 D1:B136 C4 83 B3 D1 	call nz,sdcomp_set_3bpc 
  582 D1:B13A CB 6E -  -  	bit 5,(hl)
  583 D1:B13C C4 3A B3 D1 	call nz,sdcomp_set_2bpc 
  584 D1:B140 CB 66 -  -  	bit 4,(hl)
  585 D1:B142 C4 13 B3 D1 	call nz,sdcomp_set_1bpc 
  586 D1:B146 CB 5E -  -  	bit 3,(hl)
  587 D1:B148 C4 F8 B2 D1 	call nz,sdcomp_set_0bpc 
  588 D1:B14C CB 56 -  -  	bit 2,(hl)
  589 D1:B14E C4 39 B4 D1 	call nz,sdcomp_set_noalpha
  590 D1:B152 -  -  -  -  	
  591 D1:B152 3E 00 -  -  	ld a,0
  592 D1:B154 32 80 B2 D1 	ld (sdcomp_loops_per_line_counter),a ;reset loops counter
  593 D1:B158 3E DA -  -  	ld a,%11011010;jp c 
  594 D1:B15A 32 D8 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  595 D1:B15E -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  596 D1:B15E -  -  -  -  	
  597 D1:B15E 23 -  -  -  	inc hl ;hl points to width in px 
  598 D1:B15F -  -  -  -  	
  599 D1:B15F -  -  -  -  	
  600 D1:B15F 7E -  -  -  	ld a,(hl) 
  601 D1:B160 32 B1 B0 D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  602 D1:B164 32 BD AF D1 	ld (sdcomp_sprite_width_2),a
  603 D1:B168 47 -  -  -  	ld b,a;width
  604 D1:B169 08 -  -  -  	ex af,af' ;'
  605 D1:B16A 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  606 D1:B16B 08 -  -  -  	ex af,af' ;' 
  607 D1:B16C -  -  -  -  
  608 D1:B16C -  -  -  -  
  609 D1:B16C -  -  -  -  sdcomp_offset_2 .equ $ 
  610 D1:B16C 00 -  -  -  	nop ;replace with inc b for offset 
  611 D1:B16D -  -  -  -  
  612 D1:B16D -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  613 D1:B16D 04 -  -  -  	inc b ;round up on odd sprites
  614 D1:B16E CB 38 -  -  	srl b;divide by 2
  615 D1:B170 -  -  -  -  	
  616 D1:B170 -  -  -  -  	
  617 D1:B170 3E A0 -  -  	ld a,160
  618 D1:B172 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  619 D1:B173 32 F7 B1 D1 	ld (sdcomp_gap_btwn_rows),a 
  620 D1:B177 -  -  -  -  	
  621 D1:B177 -  -  -  -  	;call write_a_to_ram
  622 D1:B177 -  -  -  -  	;ld a,$BE
  623 D1:B177 -  -  -  -  	;call write_a_to_ram
  624 D1:B177 -  -  -  -  	;ld a,b 
  625 D1:B177 -  -  -  -  	;call write_a_to_ram
  626 D1:B177 -  -  -  -  	
  627 D1:B177 -  -  -  -  	
  628 D1:B177 7E -  -  -  	ld a,(hl);load width again
  629 D1:B178 -  -  -  -  	
  630 D1:B178 47 -  -  -  	ld b,a 
  631 D1:B179 -  -  -  -  	
  632 D1:B179 -  -  -  -  
  633 D1:B179 23 -  -  -  	inc hl ;hl points to height 
  634 D1:B17A 7E -  -  -  	ld a,(hl);height
  635 D1:B17B 32 97 AF D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  636 D1:B17F -  -  -  -  	
  637 D1:B17F -  -  -  -  	
  638 D1:B17F -  -  -  -  
  639 D1:B17F 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  640 D1:B180 13 -  -  -  	inc de 
  641 D1:B181 -  -  -  -  	
  642 D1:B181 23 -  -  -  	inc hl ;HL points to start of alpha data 
  643 D1:B182 -  -  -  -  
  644 D1:B182 E5 -  -  -  	push hl ;Save alpha data 
  645 D1:B183 -  -  -  -  	
  646 D1:B183 -  -  -  -  	
  647 D1:B183 -  -  -  -  	;Need to find start of color data
  648 D1:B183 -  -  -  -  	;at this point a = height, b = width 
  649 D1:B183 -  -  -  -  	
  650 D1:B183 37 -  -  -  	scf
  651 D1:B184 -  -  -  -  	
  652 D1:B184 -  -  -  -  sdcomp_no_alpha_2 .equ $
  653 D1:B184 D2 9D B1 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  654 D1:B188 -  -  -  -  	
  655 D1:B188 -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  656 D1:B188 -  -  -  -  	
  657 D1:B188 E5 -  -  -  	push hl
  658 D1:B189 67 -  -  -  	ld h,a;height
  659 D1:B18A 68 -  -  -  	ld l,b;width
  660 D1:B18B ED 6C -  -  	mlt hl;number of pixels
  661 D1:B18D -  -  -  -  	;rounds up to nearest multiple of 8
  662 D1:B18D 2B -  -  -  	dec hl
  663 D1:B18E CB 3C -  -  	srl h
  664 D1:B190 CB 1D -  -  	rr l
  665 D1:B192 CB 3C -  -  	srl h
  666 D1:B194 CB 1D -  -  	rr l 
  667 D1:B196 CB 3C -  -  	srl h 
  668 D1:B198 CB 1D -  -  	rr l 
  669 D1:B19A 23 -  -  -  	inc hl 
  670 D1:B19B C1 -  -  -  	pop bc ;initial hl location
  671 D1:B19C -  -  -  -  	;add number of bytes to skip 
  672 D1:B19C 09 -  -  -  	add hl,bc ;HL points to start of color data 
  673 D1:B19D -  -  -  -  	
  674 D1:B19D -  -  -  -  	
  675 D1:B19D -  -  -  -  	
  676 D1:B19D -  -  -  -  sdcomp_no_alpha_2_skip:
  677 D1:B19D -  -  -  -  
  678 D1:B19D -  -  -  -  	
  679 D1:B19D -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  680 D1:B19D -  -  -  -  
  681 D1:B19D -  -  -  -  	
  682 D1:B19D 47 -  -  -  	ld b,a ;save for after
  683 D1:B19E -  -  -  -  	;GET LOCAL PALETTE DATA
  684 D1:B19E -  -  -  -  	
  685 D1:B19E 37 -  -  -  	scf 
  686 D1:B19F -  -  -  -  sdcomp_1bpc_1 .equ $ 
  687 D1:B19F D2 A9 B1 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  688 D1:B1A3 -  -  -  -  	
  689 D1:B1A3 7E -  -  -  	ld a,(hl);color data 
  690 D1:B1A4 32 8A B0 D1 	ld (sdcomp_indexed_color_data_1),a 
  691 D1:B1A8 23 -  -  -  	inc hl 
  692 D1:B1A9 -  -  -  -  	
  693 D1:B1A9 -  -  -  -  sdcomp_1bpc_1_skip:	
  694 D1:B1A9 -  -  -  -  
  695 D1:B1A9 -  -  -  -  
  696 D1:B1A9 37 -  -  -  	scf 
  697 D1:B1AA -  -  -  -  sdcomp_2bpc_1 .equ $ 
  698 D1:B1AA D2 B4 B1 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  699 D1:B1AE -  -  -  -  	
  700 D1:B1AE 7E -  -  -  	ld a,(hl);color data 
  701 D1:B1AF 32 7E B0 D1 	ld (sdcomp_indexed_color_data_2),a 
  702 D1:B1B3 23 -  -  -  	inc hl 
  703 D1:B1B4 -  -  -  -  	
  704 D1:B1B4 -  -  -  -  sdcomp_2bpc_1_skip:	
  705 D1:B1B4 -  -  -  -  
  706 D1:B1B4 -  -  -  -  
  707 D1:B1B4 37 -  -  -  	scf 
  708 D1:B1B5 -  -  -  -  sdcomp_3bpc_1 .equ $ 
  709 D1:B1B5 DA C5 B1 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  710 D1:B1B9 -  -  -  -  	
  711 D1:B1B9 7E -  -  -  	ld a,(hl);color data 
  712 D1:B1BA 32 6C B0 D1 	ld (sdcomp_indexed_color_data_3),a 
  713 D1:B1BE 23 -  -  -  	inc hl 
  714 D1:B1BF 7E -  -  -  	ld a,(hl);color data 
  715 D1:B1C0 32 60 B0 D1 	ld (sdcomp_indexed_color_data_4),a 
  716 D1:B1C4 23 -  -  -  	inc hl 
  717 D1:B1C5 -  -  -  -  	
  718 D1:B1C5 -  -  -  -  sdcomp_3bpc_1_skip:	
  719 D1:B1C5 -  -  -  -  
  720 D1:B1C5 -  -  -  -  	
  721 D1:B1C5 D5 -  -  -  	push de ;loops/line data location
  722 D1:B1C6 EB -  -  -  	ex de,hl
  723 D1:B1C7 78 -  -  -  	ld a,b
  724 D1:B1C8 01 00 00 00 	ld bc,0
  725 D1:B1CC 4F -  -  -  	ld c,a;height 
  726 D1:B1CD 09 -  -  -  	add hl,bc
  727 D1:B1CE EB -  -  -  	ex de,hl;de points to data write location
  728 D1:B1CF -  -  -  -  	
  729 D1:B1CF -  -  -  -  	
  730 D1:B1CF D9 -  -  -  	exx;in to shadow
  731 D1:B1D0 D1 -  -  -  	pop de 
  732 D1:B1D1 E1 -  -  -  	pop hl ;alpha data stored from earlier
  733 D1:B1D2 0E 80 -  -  	ld c,%10000000;alpha mask
  734 D1:B1D4 D9 -  -  -  	exx;out 
  735 D1:B1D5 0E 80 -  -  	ld c,%10000000;color mask
  736 D1:B1D7 -  -  -  -  	
  737 D1:B1D7 -  -  -  -  	;HL now points to pixel color data 
  738 D1:B1D7 -  -  -  -  	;HL' points to pixel alpha data 
  739 D1:B1D7 -  -  -  -  	;C holds color mask
  740 D1:B1D7 -  -  -  -  	;C' holds alpha mask
  741 D1:B1D7 -  -  -  -  	;DE' holds loops/line output data location
  742 D1:B1D7 -  -  -  -  	;DE holds main data output location
  743 D1:B1D7 -  -  -  -  	;A holds height
  744 D1:B1D7 -  -  -  -  	;A' holds bits remaining in row
  745 D1:B1D7 -  -  -  -  
  746 D1:B1D7 -  -  -  -  
  747 D1:B1D7 37 -  -  -  	scf 
  748 D1:B1D8 -  -  -  -  sdcomp_flip_setup .equ $
  749 D1:B1D8 DA E8 B1 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  750 D1:B1DC -  -  -  -  
  751 D1:B1DC -  -  -  -  	
  752 D1:B1DC 2B -  -  -  	dec hl;dec color pointer
  753 D1:B1DD 0E 01 -  -  	ld c, %00000001
  754 D1:B1DF D9 -  -  -  	exx;to shadow 
  755 D1:B1E0 2B -  -  -  	dec hl;dec alpha pointer
  756 D1:B1E1 0E 01 -  -  	ld c, %00000001;alpha mask
  757 D1:B1E3 CD AF B0 D1 	call sdcomp_traverse_initial
  758 D1:B1E7 D9 -  -  -  	exx ;out of shadow 
  759 D1:B1E8 -  -  -  -  	
  760 D1:B1E8 -  -  -  -  	
  761 D1:B1E8 -  -  -  -  
  762 D1:B1E8 -  -  -  -  	;TODO jump to BG routine here
  763 D1:B1E8 -  -  -  -  	;END SETUP ======================================================================================================
  764 D1:B1E8 -  -  -  -  	
  765 D1:B1E8 -  -  -  -  	
  766 D1:B1E8 -  -  -  -  sdcomp_find_gap_length:
  767 D1:B1E8 -  -  -  -  	
  768 D1:B1E8 -  -  -  -  	
  769 D1:B1E8 -  -  -  -  	
  770 D1:B1E8 -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  771 D1:B1E8 -  -  -  -  ;this will occur if:
  772 D1:B1E8 -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  773 D1:B1E8 -  -  -  -  ;
  774 D1:B1E8 -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  775 D1:B1E8 -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  776 D1:B1E8 -  -  -  -  	
  777 D1:B1E8 D9 -  -  -  	exx ;to shadow
  778 D1:B1E9 -  -  -  -  	
  779 D1:B1E9 -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  780 D1:B1E9 06 00 -  -  	ld b,0;00 pairs found 
  781 D1:B1EB 3E 00 -  -  	ld a,0 ;reset
  782 D1:B1ED 32 EA B1 D1 	ld (sdcomp_add_1_gap_length),a 
  783 D1:B1F1 -  -  -  -  
  784 D1:B1F1 -  -  -  -  sdcomp_find_gap_length_loop:
  785 D1:B1F1 -  -  -  -  
  786 D1:B1F1 37 -  -  -  	scf 
  787 D1:B1F2 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  788 D1:B1F2 DA 1B B2 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  789 D1:B1F6 -  -  -  -  	
  790 D1:B1F6 -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  791 D1:B1F6 -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  792 D1:B1F6 3E 00 -  -  	ld a,0
  793 D1:B1F8 80 -  -  -  	add a,b 
  794 D1:B1F9 -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  795 D1:B1F9 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  796 D1:B1FA 47 -  -  -  	ld b,a 
  797 D1:B1FB 3E 00 -  -  	ld a,%00000000 ;nop 
  798 D1:B1FD 32 F9 B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  799 D1:B201 3E DA -  -  	ld a,%11011010;jp c
  800 D1:B203 32 68 AF D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  801 D1:B207 32 F2 B1 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  802 D1:B20B -  -  -  -  	
  803 D1:B20B 37 -  -  -  	scf
  804 D1:B20C -  -  -  -  sdcomp_flip_traverse .equ $
  805 D1:B20C D4 A1 B0 D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  806 D1:B210 -  -  -  -  		
  807 D1:B210 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  808 D1:B210 3A 80 B2 D1 	ld a,(sdcomp_loops_per_line_counter)
  809 D1:B214 12 -  -  -  	ld (de),a ;write loops/line data 
  810 D1:B215 13 -  -  -  	inc de
  811 D1:B216 -  -  -  -  	
  812 D1:B216 -  -  -  -  	
  813 D1:B216 37 -  -  -  	scf 
  814 D1:B217 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  815 D1:B217 D2 EF B2 D1 	jp nc,sdcomp_end
  816 D1:B21B -  -  -  -  
  817 D1:B21B -  -  -  -  	
  818 D1:B21B -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  819 D1:B21B CD C0 AF D1 	call sdcomp_get_next_alpha_pair
  820 D1:B21F -  -  -  -  	;call write_a_to_ram
  821 D1:B21F 04 -  -  -  	inc b 
  822 D1:B220 -  -  -  -  
  823 D1:B220 -  -  -  -  	;push af ;TEST
  824 D1:B220 -  -  -  -  	;ld a,$AB;TEST
  825 D1:B220 -  -  -  -  	;call write_a_to_ram
  826 D1:B220 -  -  -  -  	
  827 D1:B220 -  -  -  -  	;call write_a_to_ram
  828 D1:B220 -  -  -  -  	;pop af ;TEST
  829 D1:B220 -  -  -  -  	
  830 D1:B220 B7 -  -  -  	or a
  831 D1:B221 CA F1 B1 D1 	jp z,sdcomp_find_gap_length_loop
  832 D1:B225 -  -  -  -  	
  833 D1:B225 -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  834 D1:B225 -  -  -  -  	
  835 D1:B225 F5 -  -  -  	push af; save leading pixel alpha data 
  836 D1:B226 -  -  -  -  	;B holds number of 00 pairs + 1
  837 D1:B226 -  -  -  -  	
  838 D1:B226 -  -  -  -  	;ld a,$AA ;test
  839 D1:B226 -  -  -  -  	;call write_a_to_ram
  840 D1:B226 -  -  -  -  	;ld a,b ;test
  841 D1:B226 -  -  -  -  	;call write_a_to_ram
  842 D1:B226 -  -  -  -  	
  843 D1:B226 -  -  -  -  	
  844 D1:B226 -  -  -  -  	
  845 D1:B226 -  -  -  -  	;Write gap length data to output
  846 D1:B226 78 -  -  -  	ld a,b 
  847 D1:B227 D9 -  -  -  	exx;out of shadow 
  848 D1:B228 12 -  -  -  	ld (de),a;GAP LENGTH 
  849 D1:B229 13 -  -  -  	inc de 
  850 D1:B22A D9 -  -  -  	exx;into shadow 	
  851 D1:B22B -  -  -  -  	
  852 D1:B22B -  -  -  -  	
  853 D1:B22B -  -  -  -  ;LEADING PIXELS ===================================================================================================
  854 D1:B22B F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  855 D1:B22C -  -  -  -  	
  856 D1:B22C 37 -  -  -  	scf 
  857 D1:B22D -  -  -  -  sdcomp_fast_1 .equ $ 
  858 D1:B22D D2 37 B2 D1 	jp nc, sdcomp_ldir_start 
  859 D1:B231 -  -  -  -  	
  860 D1:B231 D9 -  -  -  	exx;out of shadow
  861 D1:B232 CD 00 B1 D1 	call sdcomp_write_leading_or_end_pixels
  862 D1:B236 D9 -  -  -  	exx;into shadow 
  863 D1:B237 -  -  -  -  	
  864 D1:B237 -  -  -  -  
  865 D1:B237 -  -  -  -  	
  866 D1:B237 -  -  -  -  ;LDIR ==============================================================================================================	
  867 D1:B237 -  -  -  -  	;Count number of 11 pairs for LDIR section
  868 D1:B237 -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  869 D1:B237 -  -  -  -  	;
  870 D1:B237 -  -  -  -  	
  871 D1:B237 -  -  -  -  	;If ending is 11 -> 00 
  872 D1:B237 -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  873 D1:B237 -  -  -  -  	;Will need to reduce b by 1 
  874 D1:B237 -  -  -  -  	
  875 D1:B237 -  -  -  -  	;If ending is 11 ->01/10
  876 D1:B237 -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  877 D1:B237 -  -  -  -  	
  878 D1:B237 -  -  -  -  sdcomp_ldir_start:
  879 D1:B237 -  -  -  -  
  880 D1:B237 -  -  -  -  ;	ld a, %11010010 ;jp nc 
  881 D1:B237 -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  882 D1:B237 -  -  -  -  
  883 D1:B237 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  884 D1:B239 -  -  -  -  sdcomp_ldir_loop:
  885 D1:B239 CD C0 AF D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  886 D1:B23D 04 -  -  -  	inc b 
  887 D1:B23E -  -  -  -  	
  888 D1:B23E -  -  -  -  	;push af 
  889 D1:B23E -  -  -  -  	;ld a,$DE 
  890 D1:B23E -  -  -  -  	;call write_a_to_ram
  891 D1:B23E -  -  -  -  	;pop af
  892 D1:B23E -  -  -  -  	;call write_a_to_ram
  893 D1:B23E -  -  -  -  	
  894 D1:B23E -  -  -  -  ;	scf 
  895 D1:B23E -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  896 D1:B23E -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  897 D1:B23E -  -  -  -  	
  898 D1:B23E EE FF -  -  	xor %11111111 ;flip all bits  (CPL does not set flags :(  )
  899 D1:B240 CA 39 B2 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  900 D1:B244 2F -  -  -  	cpl ; flip back 
  901 D1:B245 -  -  -  -  sdcomp_ldir_loop_end:
  902 D1:B245 -  -  -  -  
  903 D1:B245 -  -  -  -  	
  904 D1:B245 -  -  -  -  	;at this point b holds # 11 pairs +1 
  905 D1:B245 37 -  -  -  	scf 
  906 D1:B246 -  -  -  -  sdcomp_fast_2 .equ $ 
  907 D1:B246 D2 61 B2 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  908 D1:B24A -  -  -  -  
  909 D1:B24A -  -  -  -  	
  910 D1:B24A -  -  -  -  	
  911 D1:B24A 05 -  -  -  	dec b ;b holds # 11 pairs 
  912 D1:B24B CA 74 B2 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  913 D1:B24F B7 -  -  -  	or a
  914 D1:B250 C2 61 B2 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  915 D1:B254 -  -  -  -  	
  916 D1:B254 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  917 D1:B254 -  -  -  -  	
  918 D1:B254 -  -  -  -  	;ld a,$DF
  919 D1:B254 -  -  -  -  	;call write_a_to_ram
  920 D1:B254 -  -  -  -  	
  921 D1:B254 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  922 D1:B254 -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  923 D1:B254 3E 01 -  -  	ld a,1;start w 1 gap len
  924 D1:B256 32 EA B1 D1 	ld (sdcomp_add_1_gap_length),a 
  925 D1:B25A 3E FF -  -  	ld a,$ff;ending pixels 11
  926 D1:B25C -  -  -  -  	
  927 D1:B25C 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  928 D1:B25D CA 74 B2 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  929 D1:B261 -  -  -  -  	;b holds ldir length 
  930 D1:B261 -  -  -  -  	
  931 D1:B261 -  -  -  -  
  932 D1:B261 -  -  -  -  ;b holds ldir length, a holds ending pixels
  933 D1:B261 -  -  -  -  sdcomp_ldir_write:
  934 D1:B261 -  -  -  -  
  935 D1:B261 -  -  -  -  	;b holds 11 pairs found 
  936 D1:B261 -  -  -  -  	
  937 D1:B261 -  -  -  -  	;push af;TEST
  938 D1:B261 -  -  -  -  	;ld a,$DA 
  939 D1:B261 -  -  -  -  	;call write_a_to_ram
  940 D1:B261 -  -  -  -  	;ld a,b 
  941 D1:B261 -  -  -  -  	;call write_a_to_ram
  942 D1:B261 -  -  -  -  	;pop af ;TEST
  943 D1:B261 -  -  -  -  
  944 D1:B261 F5 -  -  -  	push af;save ending pixels
  945 D1:B262 78 -  -  -  	ld a,b
  946 D1:B263 D9 -  -  -  	exx ;out 
  947 D1:B264 12 -  -  -  	ld (de),a;write ldir length
  948 D1:B265 13 -  -  -  	inc de 
  949 D1:B266 CD EC B0 D1 	call sdcomp_write_ldir_data_loop
  950 D1:B26A -  -  -  -  
  951 D1:B26A F1 -  -  -  	pop af;return ending pixels
  952 D1:B26B -  -  -  -  	
  953 D1:B26B 37 -  -  -  	scf
  954 D1:B26C -  -  -  -  sdcomp_fast_3 .equ $ 
  955 D1:B26C D2 7F B2 D1 	jp nc,sdcomp_inc_loops_per_line ;skip ending pixels
  956 D1:B270 -  -  -  -  	
  957 D1:B270 C3 7B B2 D1 	jp sdcomp_write_end_pixels
  958 D1:B274 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  959 D1:B274 -  -  -  -  
  960 D1:B274 -  -  -  -  
  961 D1:B274 -  -  -  -  	;push af ;TEST
  962 D1:B274 -  -  -  -  	;ld a,$DB
  963 D1:B274 -  -  -  -  	;call write_a_to_ram
  964 D1:B274 -  -  -  -  	;pop af ;TEST
  965 D1:B274 -  -  -  -  	;call write_a_to_ram
  966 D1:B274 -  -  -  -  
  967 D1:B274 F5 -  -  -  	push af;save end pixels
  968 D1:B275 -  -  -  -  	
  969 D1:B275 D9 -  -  -  	exx;out of shadow
  970 D1:B276 3E 00 -  -  	ld a,0
  971 D1:B278 12 -  -  -  	ld (de),a ;write 0 as ldir length
  972 D1:B279 13 -  -  -  	inc de 
  973 D1:B27A F1 -  -  -  	pop af;return ending pixels
  974 D1:B27B -  -  -  -  
  975 D1:B27B -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  976 D1:B27B -  -  -  -  
  977 D1:B27B -  -  -  -  sdcomp_write_end_pixels:
  978 D1:B27B -  -  -  -  ;not in shadow
  979 D1:B27B -  -  -  -  	
  980 D1:B27B -  -  -  -  	;test
  981 D1:B27B -  -  -  -  	;push af 
  982 D1:B27B -  -  -  -  	;ld a,$E0
  983 D1:B27B -  -  -  -  	;call write_a_to_ram
  984 D1:B27B -  -  -  -  	;pop af 
  985 D1:B27B -  -  -  -  	
  986 D1:B27B -  -  -  -  
  987 D1:B27B CD 00 B1 D1 	call sdcomp_write_leading_or_end_pixels
  988 D1:B27F -  -  -  -  	
  989 D1:B27F -  -  -  -  	
  990 D1:B27F -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  991 D1:B27F -  -  -  -  	;ld a,2
  992 D1:B27F -  -  -  -  	;dec a 
  993 D1:B27F -  -  -  -  	;jp z,sdcomp_end
  994 D1:B27F -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  995 D1:B27F -  -  -  -  
  996 D1:B27F -  -  -  -  sdcomp_inc_loops_per_line:	
  997 D1:B27F -  -  -  -  	;INC LOOP/LINE count
  998 D1:B27F -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
  999 D1:B27F 3E 00 -  -  	ld a,0;inc number of loops
 1000 D1:B281 3C -  -  -  	inc a 
 1001 D1:B282 32 80 B2 D1 	ld (sdcomp_loops_per_line_counter),a
 1002 D1:B286 -  -  -  -  
 1003 D1:B286 -  -  -  -  
 1004 D1:B286 -  -  -  -  	
 1005 D1:B286 -  -  -  -  	
 1006 D1:B286 -  -  -  -  	;Check the timer to see if we need to begin rendering next frame 
 1007 D1:B286 -  -  -  -  	;1090 cycles @ 32768hz ~= 1 frame (1/30s)
 1008 D1:B286 -  -  -  -  	;Should stop decompressions at 1000 cycles?
 1009 D1:B286 -  -  -  -  	; = %00000011, 11101000
 1010 D1:B286 -  -  -  -  sdcomp_clock_check_loop:
 1011 D1:B286 3A 01 00 F2 	ld a,($F20001);128hz clock
 1012 D1:B28A FE 03 -  -  	cp %00000011 ;check if reached 3 
 1013 D1:B28C DA E8 B1 D1 	jp c,sdcomp_find_gap_length ;msb <= 2, can continue  
 1014 D1:B290 3A 00 00 F2 	ld a,($F20000);32768hz clock
 1015 D1:B294 FE E8 -  -  	cp %11101000;check if reached value 
 1016 D1:B296 DA E8 B1 D1 	jp c,sdcomp_find_gap_length ;msb = 3 and lsb < value, can continue
 1017 D1:B29A -  -  -  -  	
 1018 D1:B29A -  -  -  -  	;Past clock threshold, need to stop decompressions
 1019 D1:B29A -  -  -  -  
 1020 D1:B29A -  -  -  -  
 1021 D1:B29A -  -  -  -  	;TODO can prob not need to save (a) register
 1022 D1:B29A -  -  -  -  sdcomp_interrupt:
 1023 D1:B29A -  -  -  -  
 1024 D1:B29A -  -  -  -  
 1025 D1:B29A -  -  -  -  	;not in shadow 
 1026 D1:B29A 22 CC B2 D1 	ld (sdcomp_cont_hl),hl 
 1027 D1:B29E EB -  -  -  	ex de,hl
 1028 D1:B29F 22 D0 B2 D1 	ld (sdcomp_cont_de),hl 
 1029 D1:B2A3 C5 -  -  -  	push bc
 1030 D1:B2A4 E1 -  -  -  	pop hl
 1031 D1:B2A5 22 D4 B2 D1 	ld (sdcomp_cont_bc),hl
 1032 D1:B2A9 32 D8 B2 D1 	ld (sdcomp_cont_a),a 
 1033 D1:B2AD D9 -  -  -  	exx 
 1034 D1:B2AE 08 -  -  -  	ex af,af' ;'
 1035 D1:B2AF 22 DC B2 D1 	ld (sdcomp_cont_hlP),hl 
 1036 D1:B2B3 EB -  -  -  	ex de,hl
 1037 D1:B2B4 22 E0 B2 D1 	ld (sdcomp_cont_deP),hl 
 1038 D1:B2B8 C5 -  -  -  	push bc 
 1039 D1:B2B9 E1 -  -  -  	pop hl
 1040 D1:B2BA 22 E4 B2 D1 	ld (sdcomp_cont_bcP),hl
 1041 D1:B2BE 32 E8 B2 D1 	ld (sdcomp_cont_aP),a 
 1042 D1:B2C2 -  -  -  -  	
 1043 D1:B2C2 -  -  -  -  	
 1044 D1:B2C2 3E AA -  -  	ld a, $AA
 1045 D1:B2C4 CD B1 AB D1 	call write_a_to_ram
 1046 D1:B2C8 -  -  -  -  	
 1047 D1:B2C8 3E 01 -  -  	ld a,1 ;Return 1 if interrupted
 1048 D1:B2CA C9 -  -  -  	ret 
 1049 D1:B2CB -  -  -  -  	
 1050 D1:B2CB -  -  -  -  sdcomp_continue:
 1051 D1:B2CB -  -  -  -  	;not in shadow 
 1052 D1:B2CB -  -  -  -  sdcomp_cont_hl .equ $ + 1
 1053 D1:B2CB 21 00 00 00 	ld hl,0
 1054 D1:B2CF -  -  -  -  sdcomp_cont_de .equ $ + 1
 1055 D1:B2CF 11 00 00 00 	ld de,0
 1056 D1:B2D3 -  -  -  -  sdcomp_cont_bc .equ $ + 1
 1057 D1:B2D3 01 00 00 00 	ld bc,0
 1058 D1:B2D7 -  -  -  -  sdcomp_cont_a .equ $ + 1
 1059 D1:B2D7 3E 00 -  -  	ld a,0
 1060 D1:B2D9 D9 -  -  -  	exx 
 1061 D1:B2DA 08 -  -  -  	ex af,af' ;'
 1062 D1:B2DB -  -  -  -  sdcomp_cont_hlP .equ $ + 1
 1063 D1:B2DB 21 00 00 00 	ld hl,0
 1064 D1:B2DF -  -  -  -  sdcomp_cont_deP .equ $ + 1
 1065 D1:B2DF 11 00 00 00 	ld de,0
 1066 D1:B2E3 -  -  -  -  sdcomp_cont_bcP .equ $ + 1
 1067 D1:B2E3 01 00 00 00 	ld bc,0
 1068 D1:B2E7 -  -  -  -  sdcomp_cont_aP .equ $ + 1
 1069 D1:B2E7 3E 00 -  -  	ld a,0	
 1070 D1:B2E9 -  -  -  -  	
 1071 D1:B2E9 D9 -  -  -  	exx ;out of shadow 
 1072 D1:B2EA 08 -  -  -  	ex af,af' ;'
 1073 D1:B2EB -  -  -  -  
 1074 D1:B2EB C3 E8 B1 D1 	jp sdcomp_find_gap_length
 1075 D1:B2EF -  -  -  -  
 1076 D1:B2EF -  -  -  -  	
 1077 D1:B2EF -  -  -  -  
 1078 D1:B2EF -  -  -  -  sdcomp_end:
 1079 D1:B2EF -  -  -  -  	
 1080 D1:B2EF -  -  -  -  	;ld a,$69
 1081 D1:B2EF -  -  -  -  	;call write_a_to_ram
 1082 D1:B2EF -  -  -  -  	
 1083 D1:B2EF 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1084 D1:B2F1 32 17 B2 D1 	ld (sdcomp_end_reached_flag),a 
 1085 D1:B2F5 -  -  -  -  	
 1086 D1:B2F5 3E 00 -  -  	ld a,0 ;return 0 if finished decompressing 
 1087 D1:B2F7 C9 -  -  -  	ret 
 1088 D1:B2F8 -  -  -  -  
 1089 D1:B2F8 -  -  -  -  
 1090 D1:B2F8 -  -  -  -  ;bit orders
 1091 D1:B2F8 -  -  -  -  ;	noflip   flip 
 1092 D1:B2F8 -  -  -  -  ;4bpp 3210 	 0123
 1093 D1:B2F8 -  -  -  -  ;3bpp 210	 012
 1094 D1:B2F8 -  -  -  -  ;2bpp 10	 01
 1095 D1:B2F8 -  -  -  -  ;1bpp 0		 0
 1096 D1:B2F8 -  -  -  -  
 1097 D1:B2F8 -  -  -  -  
 1098 D1:B2F8 -  -  -  -  sdcomp_set_0bpc:
 1099 D1:B2F8 3E DA -  -  	ld a,%11011010;jp c
 1100 D1:B2FA 32 09 B0 D1 	ld (sdcomp_0bpc),a
 1101 D1:B2FE -  -  -  -  	
 1102 D1:B2FE 32 AA B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1103 D1:B302 32 B5 B1 D1 	ld (sdcomp_3bpc_1),a 
 1104 D1:B306 -  -  -  -  	
 1105 D1:B306 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1106 D1:B308 32 9F B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1107 D1:B30C 3E 00 -  -  	ld a,%00000000
 1108 D1:B30E 32 CA B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1109 D1:B312 C9 -  -  -  	ret 
 1110 D1:B313 -  -  -  -  	
 1111 D1:B313 -  -  -  -  sdcomp_set_1bpc:
 1112 D1:B313 3E D2 -  -  	ld a,%11010010;jp nc
 1113 D1:B315 32 09 B0 D1 	ld (sdcomp_0bpc),a
 1114 D1:B319 3E DA -  -  	ld a,%11011010;jp c
 1115 D1:B31B 32 1B B0 D1 	ld (sdcomp_1bpc),a
 1116 D1:B31F -  -  -  -  	
 1117 D1:B31F 32 AA B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1118 D1:B323 32 B5 B1 D1 	ld (sdcomp_3bpc_1),a 
 1119 D1:B327 -  -  -  -  	
 1120 D1:B327 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1121 D1:B329 32 9F B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1122 D1:B32D -  -  -  -  	
 1123 D1:B32D -  -  -  -  	
 1124 D1:B32D 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1125 D1:B32F 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1126 D1:B333 -  -  -  -  	
 1127 D1:B333 3E 80 -  -  	ld a,%10000000
 1128 D1:B335 32 CA B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1129 D1:B339 -  -  -  -  	
 1130 D1:B339 C9 -  -  -  	ret 
 1131 D1:B33A -  -  -  -  
 1132 D1:B33A -  -  -  -  sdcomp_set_2bpc:
 1133 D1:B33A 3E D2 -  -  	ld a,%11010010;jp nc
 1134 D1:B33C 32 09 B0 D1 	ld (sdcomp_0bpc),a
 1135 D1:B340 32 1B B0 D1 	ld (sdcomp_1bpc),a
 1136 D1:B344 -  -  -  -  	
 1137 D1:B344 3E DA -  -  	ld a,%11011010;jp c
 1138 D1:B346 32 2D B0 D1 	ld (sdcomp_2bpc),a
 1139 D1:B34A -  -  -  -  	
 1140 D1:B34A 32 B5 B1 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1141 D1:B34E -  -  -  -  	
 1142 D1:B34E 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1143 D1:B350 32 9F B1 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1144 D1:B354 32 AA B1 D1 	ld (sdcomp_2bpc_1),a 
 1145 D1:B358 -  -  -  -  	
 1146 D1:B358 37 -  -  -  	scf 
 1147 D1:B359 -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1148 D1:B359 D2 6A B3 D1 	jp nc, sdcomp_2bpc_flip
 1149 D1:B35D -  -  -  -  	
 1150 D1:B35D 3E CB -  -  	ld a,%11001011 ;set 1,e
 1151 D1:B35F 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1152 D1:B363 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1153 D1:B365 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1154 D1:B369 C9 -  -  -  	ret 
 1155 D1:B36A -  -  -  -  	
 1156 D1:B36A -  -  -  -  sdcomp_2bpc_flip:
 1157 D1:B36A 3E CB -  -  	ld a,%11001011 ;set 1,e
 1158 D1:B36C 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1159 D1:B370 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1160 D1:B372 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1161 D1:B376 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1162 D1:B378 32 C3 B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1163 D1:B37C 3E C0 -  -  	ld a,%11000000
 1164 D1:B37E 32 CA B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1165 D1:B382 C9 -  -  -  	ret 
 1166 D1:B383 -  -  -  -  
 1167 D1:B383 -  -  -  -  
 1168 D1:B383 -  -  -  -  sdcomp_set_3bpc:
 1169 D1:B383 -  -  -  -  	
 1170 D1:B383 3E D2 -  -  	ld a,%11010010;jp nc
 1171 D1:B385 32 09 B0 D1 	ld (sdcomp_0bpc),a
 1172 D1:B389 32 1B B0 D1 	ld (sdcomp_1bpc),a
 1173 D1:B38D 32 2D B0 D1 	ld (sdcomp_2bpc),a
 1174 D1:B391 -  -  -  -  	
 1175 D1:B391 3E DA -  -  	ld a,%11011010;jp c
 1176 D1:B393 32 3F B0 D1 	ld (sdcomp_3bpc),a
 1177 D1:B397 -  -  -  -  	
 1178 D1:B397 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1179 D1:B399 32 9F B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1180 D1:B39D 32 AA B1 D1 	ld (sdcomp_2bpc_1),a 
 1181 D1:B3A1 32 B5 B1 D1 	ld (sdcomp_3bpc_1),a 
 1182 D1:B3A5 -  -  -  -  	
 1183 D1:B3A5 37 -  -  -  	scf 
 1184 D1:B3A6 -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1185 D1:B3A6 D2 BD B3 D1 	jp nc, sdcomp_3bpc_flip	
 1186 D1:B3AA -  -  -  -  	
 1187 D1:B3AA 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1188 D1:B3AC 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1189 D1:B3B0 3E CB -  -  	ld a,%11001011 ;set 1,e
 1190 D1:B3B2 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1191 D1:B3B6 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1192 D1:B3B8 32 3D B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1193 D1:B3BC C9 -  -  -  	ret 
 1194 D1:B3BD -  -  -  -  	
 1195 D1:B3BD -  -  -  -  sdcomp_3bpc_flip:
 1196 D1:B3BD 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1197 D1:B3BF 32 3D B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1198 D1:B3C3 3E CB -  -  	ld a,%11001011 ;set 1,e
 1199 D1:B3C5 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1200 D1:B3C9 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1201 D1:B3CB 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1202 D1:B3CF -  -  -  -  	
 1203 D1:B3CF 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1204 D1:B3D1 32 C3 B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1205 D1:B3D5 32 C5 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1206 D1:B3D9 3E E0 -  -  	ld a,%11100000
 1207 D1:B3DB 32 CA B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1208 D1:B3DF -  -  -  -  	
 1209 D1:B3DF C9 -  -  -  	ret 
 1210 D1:B3E0 -  -  -  -  
 1211 D1:B3E0 -  -  -  -  sdcomp_set_4bpc:
 1212 D1:B3E0 3E DA -  -  	ld a,%11011010;jp c
 1213 D1:B3E2 -  -  -  -  
 1214 D1:B3E2 32 9F B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1215 D1:B3E6 32 AA B1 D1 	ld (sdcomp_2bpc_1),a 
 1216 D1:B3EA 32 B5 B1 D1 	ld (sdcomp_3bpc_1),a 
 1217 D1:B3EE -  -  -  -  	
 1218 D1:B3EE 37 -  -  -  	scf 
 1219 D1:B3EF -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1220 D1:B3EF D2 0C B4 D1 	jp nc, sdcomp_4bpc_flip	
 1221 D1:B3F3 3E DB -  -  	ld a,%11011011 ;set 3,e
 1222 D1:B3F5 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1223 D1:B3F9 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1224 D1:B3FB 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1225 D1:B3FF 3E CB -  -  	ld a,%11001011 ;set 1,e
 1226 D1:B401 32 3D B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1227 D1:B405 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1228 D1:B407 32 4F B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1229 D1:B40B C9 -  -  -  	ret 
 1230 D1:B40C -  -  -  -  sdcomp_4bpc_flip:
 1231 D1:B40C 3E DB -  -  	ld a,%11011011 ;set 3,e
 1232 D1:B40E 32 4F B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1233 D1:B412 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1234 D1:B414 32 3D B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1235 D1:B418 3E CB -  -  	ld a,%11001011 ;set 1,e
 1236 D1:B41A 32 2B B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1237 D1:B41E 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1238 D1:B420 32 19 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1239 D1:B424 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1240 D1:B426 32 C3 B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1241 D1:B42A 32 C5 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1242 D1:B42E 32 C7 B0 D1 	ld (sdcomp_traverse_4bpp),a 
 1243 D1:B432 -  -  -  -  	
 1244 D1:B432 3E F0 -  -  	ld a,%11110000
 1245 D1:B434 32 CA B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1246 D1:B438 -  -  -  -  	
 1247 D1:B438 C9 -  -  -  	ret 
 1248 D1:B439 -  -  -  -  	
 1249 D1:B439 -  -  -  -  	
 1250 D1:B439 -  -  -  -  sdcomp_set_noalpha:
 1251 D1:B439 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1252 D1:B43B 32 8A AF D1 	ld (sdcomp_no_alpha_1),a 
 1253 D1:B43F 3E DA -  -  	ld a,%11011010;jp c
 1254 D1:B441 32 84 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1255 D1:B445 32 BB B0 D1 	ld (sdcomp_no_alpha_3),a 
 1256 D1:B449 C9 -  -  -  	ret
 1257 D1:B44A -  -  -  -  	
 1258 D1:B44A -  -  -  -  sdcomp_reset_noalpha:
 1259 D1:B44A -  -  -  -  
 1260 D1:B44A 3E DA -  -  	ld a,%11011010;jp c
 1261 D1:B44C 32 8A AF D1 	ld (sdcomp_no_alpha_1),a 
 1262 D1:B450 3E D2 -  -  	ld a, %11010010 ;jp nc
 1263 D1:B452 32 84 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1264 D1:B456 3E CA -  -  	ld a, %11001010 ;jp z
 1265 D1:B458 32 BB B0 D1 	ld (sdcomp_no_alpha_3),a 
 1266 D1:B45C C9 -  -  -  	ret
 1267 D1:B45D -  -  -  -  
 1268 D1:B45D -  -  -  -  
 1269 D1:B45D -  -  -  -  sdcomp_set_offset:
 1270 D1:B45D 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1271 D1:B45F 32 B2 AF D1 	ld (sdcomp_offset_1),a 
 1272 D1:B463 32 76 AF D1 	ld (sdcomp_bit_offset),a 
 1273 D1:B467 3E 04 -  -  	ld a,%00000100 ;inc b 
 1274 D1:B469 32 6C B1 D1 	ld (sdcomp_offset_2),a 
 1275 D1:B46D -  -  -  -  	
 1276 D1:B46D C9 -  -  -  	ret 
 1277 D1:B46E -  -  -  -  
 1278 D1:B46E -  -  -  -  sdcomp_reset_offset:
 1279 D1:B46E 3E DA -  -  	ld a,%11011010;jp c
 1280 D1:B470 32 B2 AF D1 	ld (sdcomp_offset_1),a 
 1281 D1:B474 32 76 AF D1 	ld (sdcomp_bit_offset),a 
 1282 D1:B478 3E 00 -  -  	ld a,%00000000 ;nop
 1283 D1:B47A 32 6C B1 D1 	ld (sdcomp_offset_2),a 
 1284 D1:B47E C9 -  -  -  	ret 
 1285 D1:B47F -  -  -  -  	
 1286 D1:B47F -  -  -  -  sdcomp_set_flip:
 1287 D1:B47F 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1288 D1:B481 32 61 AF D1 	ld (sdcomp_flip_bitstream),a
 1289 D1:B485 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1290 D1:B487 32 63 AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1291 D1:B48B 3E DC -  -  	ld a, %11011100 ;call c 
 1292 D1:B48D 32 0C B2 D1 	ld (sdcomp_flip_traverse),a 
 1293 D1:B491 -  -  -  -  	
 1294 D1:B491 3E DA -  -  	ld a,%11011010;jp c
 1295 D1:B493 32 59 B3 D1 	ld (sdcomp_flip_2bpc),a
 1296 D1:B497 32 A6 B3 D1 	ld (sdcomp_flip_3bpc),a
 1297 D1:B49B 32 EF B3 D1 	ld (sdcomp_flip_4bpc),a
 1298 D1:B49F 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1299 D1:B4A1 32 D8 B1 D1 	ld (sdcomp_flip_setup),a 
 1300 D1:B4A5 -  -  -  -  	
 1301 D1:B4A5 C9 -  -  -  	ret 
 1302 D1:B4A6 -  -  -  -  
 1303 D1:B4A6 -  -  -  -  sdcomp_reset_flip:
 1304 D1:B4A6 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1305 D1:B4A8 32 61 AF D1 	ld (sdcomp_flip_bitstream),a
 1306 D1:B4AC 3E 23 -  -  	ld a, %00100011 ;inc hl 
 1307 D1:B4AE 32 63 AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1308 D1:B4B2 3E D4 -  -  	ld a, %11010100 ;call nc 
 1309 D1:B4B4 32 0C B2 D1 	ld (sdcomp_flip_traverse),a 
 1310 D1:B4B8 -  -  -  -  	
 1311 D1:B4B8 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1312 D1:B4BA 32 59 B3 D1 	ld (sdcomp_flip_2bpc),a
 1313 D1:B4BE 32 A6 B3 D1 	ld (sdcomp_flip_3bpc),a
 1314 D1:B4C2 32 EF B3 D1 	ld (sdcomp_flip_4bpc),a
 1315 D1:B4C6 3E DA -  -  	ld a,%11011010;jp c
 1316 D1:B4C8 32 D8 B1 D1 	ld (sdcomp_flip_setup),a 
 1317 D1:B4CC C9 -  -  -  	ret 
 1318 D1:B4CD -  -  -  -  
 1319 D1:B4CD -  -  -  -  
 1320 D1:B4CD -  -  -  -  sdcomp_set_fast:
 1321 D1:B4CD 3E DA -  -  	ld a,%11011010;jp c
 1322 D1:B4CF 32 2D B2 D1 	ld(sdcomp_fast_1),a 
 1323 D1:B4D3 32 46 B2 D1 	ld(sdcomp_fast_2),a 
 1324 D1:B4D7 32 6C B2 D1 	ld(sdcomp_fast_3),a 
 1325 D1:B4DB -  -  -  -  	
 1326 D1:B4DB C9 -  -  -  	ret 
 1327 D1:B4DC -  -  -  -  
 1328 D1:B4DC -  -  -  -  sdcomp_reset_fast:
 1329 D1:B4DC 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1330 D1:B4DE 32 2D B2 D1 	ld(sdcomp_fast_1),a 
 1331 D1:B4E2 32 46 B2 D1 	ld(sdcomp_fast_2),a 
 1332 D1:B4E6 32 6C B2 D1 	ld(sdcomp_fast_3),a 
 1333 D1:B4EA -  -  -  -  	
 1334 D1:B4EA C9 -  -  -  	ret 
 1335 D1:B4EB -  -  -  -  
 1336 D1:B4EB -  -  -  -  
 1337 D1:B4EB -  -  -  -  
 1338 D1:B4EB -  -  -  -  
 1339 D1:B4EB -  -  -  -  
 1340 D1:B4EB -  -  -  -  
Listing for file "ascent.asm"
  499 D1:B4EB -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B4EB -  -  -  -  
    2 D1:B4EB -  -  -  -  FGMaxSpriteHeight .equ 120
    3 D1:B4EB -  -  -  -  
    4 D1:B4EB -  -  -  -  draw_mg:
    5 D1:B4EB 2A D3 AB D1 	ld hl,(draw_buffer)
    6 D1:B4EF 22 CF B5 D1 	ld (dfgs_vram_top_1),hl
    7 D1:B4F3 22 6F B6 D1 	ld (dfgs_vram_top_2),hl
    8 D1:B4F7 01 00 96 00 	ld bc,160*240
    9 D1:B4FB 09 -  -  -  	add hl,bc
   10 D1:B4FC 22 27 B6 D1 	ld (dfgs_vram_bottom_1),hl 
   11 D1:B500 22 4A B6 D1 	ld (dfgs_vram_bottom_2),hl 
   12 D1:B504 22 BC B6 D1 	ld (dfgs_vram_bottom_3),hl 
   13 D1:B508 22 DF B6 D1 	ld (dfgs_vram_bottom_4),hl 
   14 D1:B50C -  -  -  -  	
   15 D1:B50C 2A CD AB D1 	ld hl,(cam_pos)
   16 D1:B510 CB 3C -  -  	srl h ;div by 2
   17 D1:B512 CB 1D -  -  	rr l 
   18 D1:B514 -  -  -  -  	
   19 D1:B514 01 EF 00 00 	ld bc,239
   20 D1:B518 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   21 D1:B519 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   22 D1:B51A 32 A0 B5 D1 	ld (dfgs_cam_height_1),a
   23 D1:B51E 32 0E B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   24 D1:B522 32 A2 B6 D1 	ld (dfgs_cam_height_3),a
   25 D1:B526 -  -  -  -  		
   26 D1:B526 ED 44 -  -  	neg 
   27 D1:B528 32 C4 B5 D1 	ld (dfgs_viewport_to_upper_frame),a
   28 D1:B52C -  -  -  -  	
   29 D1:B52C 01 00 00 00 	ld bc,0
   30 D1:B530 4C -  -  -  	ld c,h;msb ccam pos 
   31 D1:B531 0C -  -  -  	inc c 
   32 D1:B532 21 92 B9 D1 	ld hl,MG_Data_frame_table
   33 D1:B536 09 -  -  -  	add hl,bc
   34 D1:B537 09 -  -  -  	add hl,bc 
   35 D1:B538 09 -  -  -  	add hl,bc 	
   36 D1:B539 ED 27 -  -  	ld hl,(hl);upper frame 
   37 D1:B53B -  -  -  -  	
   38 D1:B53B CD 91 B5 D1 	call draw_fg_sprites
   39 D1:B53F C9 -  -  -  	ret
   40 D1:B540 -  -  -  -  
   41 D1:B540 -  -  -  -  
   42 D1:B540 -  -  -  -  
   43 D1:B540 -  -  -  -  draw_fg:
   44 D1:B540 2A D3 AB D1 	ld hl,(draw_buffer)
   45 D1:B544 22 CF B5 D1 	ld (dfgs_vram_top_1),hl
   46 D1:B548 22 6F B6 D1 	ld (dfgs_vram_top_2),hl
   47 D1:B54C 01 00 96 00 	ld bc,160*240
   48 D1:B550 09 -  -  -  	add hl,bc
   49 D1:B551 22 27 B6 D1 	ld (dfgs_vram_bottom_1),hl 
   50 D1:B555 22 4A B6 D1 	ld (dfgs_vram_bottom_2),hl 
   51 D1:B559 22 BC B6 D1 	ld (dfgs_vram_bottom_3),hl 
   52 D1:B55D 22 DF B6 D1 	ld (dfgs_vram_bottom_4),hl 
   53 D1:B561 -  -  -  -  	
   54 D1:B561 2A CD AB D1 	ld hl,(cam_pos)
   55 D1:B565 01 EF 00 00 	ld bc,239
   56 D1:B569 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   57 D1:B56A 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   58 D1:B56B 32 A0 B5 D1 	ld (dfgs_cam_height_1),a
   59 D1:B56F 32 0E B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   60 D1:B573 32 A2 B6 D1 	ld (dfgs_cam_height_3),a
   61 D1:B577 -  -  -  -  		
   62 D1:B577 ED 44 -  -  	neg 
   63 D1:B579 32 C4 B5 D1 	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
   64 D1:B57D -  -  -  -  	
   65 D1:B57D 01 00 00 00 	ld bc,0
   66 D1:B581 4C -  -  -  	ld c,h;msb ccam pos 
   67 D1:B582 0C -  -  -  	inc c 
   68 D1:B583 21 EA BA D1 	ld hl,FG_Data_frame_table
   69 D1:B587 09 -  -  -  	add hl,bc
   70 D1:B588 09 -  -  -  	add hl,bc 
   71 D1:B589 09 -  -  -  	add hl,bc 	
   72 D1:B58A -  -  -  -  
   73 D1:B58A ED 27 -  -  	ld hl,(hl);upper frame 
   74 D1:B58C -  -  -  -  
   75 D1:B58C CD 91 B5 D1 	call draw_fg_sprites
   76 D1:B590 C9 -  -  -  	ret
   77 D1:B591 -  -  -  -  
   78 D1:B591 -  -  -  -  
   79 D1:B591 -  -  -  -  
   80 D1:B591 -  -  -  -  
   81 D1:B591 -  -  -  -  ;hl = upper frame data
   82 D1:B591 -  -  -  -   
   83 D1:B591 -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   84 D1:B591 -  -  -  -  draw_fg_sprites:
   85 D1:B591 -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   86 D1:B591 ED 17 -  -  	ld de,(hl)
   87 D1:B593 ED 53 15 B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
   88 D1:B598 -  -  -  -  	
   89 D1:B598 11 00 00 00 	ld de,0
   90 D1:B59C 23 -  -  -  	inc hl 
   91 D1:B59D 23 -  -  -  	inc hl
   92 D1:B59E 23 -  -  -  	inc hl;past data table 
   93 D1:B59F -  -  -  -  	;hl is number of elements
   94 D1:B59F -  -  -  -  	
   95 D1:B59F -  -  -  -  	
   96 D1:B59F -  -  -  -  	;if cam is far below upper frame, can skip upper frame 
   97 D1:B59F -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   98 D1:B59F 3E 00 -  -  	ld a,0 
   99 D1:B5A1 FE 78 -  -  	cp FGMaxSpriteHeight
  100 D1:B5A3 D2 B5 B5 D1 	jp nc, dfgs_do_upper_loop
  101 D1:B5A7 -  -  -  -  	;cam too low for upper frame sprites to be drawn
  102 D1:B5A7 01 00 00 00 	ld bc,0
  103 D1:B5AB 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  104 D1:B5AC 09 -  -  -  	add hl,bc 
  105 D1:B5AD 09 -  -  -  	add hl,bc 
  106 D1:B5AE 09 -  -  -  	add hl,bc 
  107 D1:B5AF 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  108 D1:B5B0 23 -  -  -  	inc hl;start of next frame
  109 D1:B5B1 C3 F1 B5 D1 	jp dfgs_mid_start ;skip upper loop
  110 D1:B5B5 -  -  -  -  	
  111 D1:B5B5 -  -  -  -  	
  112 D1:B5B5 -  -  -  -  dfgs_do_upper_loop:	
  113 D1:B5B5 08 -  -  -  	ex af,af' ;'
  114 D1:B5B6 -  -  -  -  	
  115 D1:B5B6 7E -  -  -  	ld a,(hl);number of elements
  116 D1:B5B7 -  -  -  -  	;TESTING
  117 D1:B5B7 -  -  -  -  	;call write_a_to_ram
  118 D1:B5B7 -  -  -  -  	;call prgmpause
  119 D1:B5B7 -  -  -  -  	;TESTING
  120 D1:B5B7 -  -  -  -  	
  121 D1:B5B7 3C -  -  -  	inc a
  122 D1:B5B8 08 -  -  -  	ex af,af' ;'
  123 D1:B5B9 23 -  -  -  	inc hl;hl points to first sprite in upper frame  
  124 D1:B5BA -  -  -  -  
  125 D1:B5BA -  -  -  -  dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 
  126 D1:B5BA -  -  -  -  
  127 D1:B5BA 08 -  -  -  	ex af,af';'
  128 D1:B5BB 3D -  -  -  	dec a ;dec number of elements
  129 D1:B5BC -  -  -  -  	;call write_a_to_ram
  130 D1:B5BC -  -  -  -  	
  131 D1:B5BC CA F1 B5 D1 	jp z,dfgs_mid_start 
  132 D1:B5C0 08 -  -  -  	ex af,af';'
  133 D1:B5C1 -  -  -  -  
  134 D1:B5C1 7E -  -  -  	ld a,(hl);sprite y value 
  135 D1:B5C2 23 -  -  -  	inc hl ;to height
  136 D1:B5C3 -  -  -  -  	
  137 D1:B5C3 -  -  -  -  	;call write_a_to_ram
  138 D1:B5C3 -  -  -  -  	;call prgmpause
  139 D1:B5C3 -  -  -  -  	
  140 D1:B5C3 -  -  -  -  	
  141 D1:B5C3 -  -  -  -  dfgs_viewport_to_upper_frame .equ $ + 1
  142 D1:B5C3 C6 00 -  -  	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
  143 D1:B5C5 DA EA B5 D1 	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
  144 D1:B5C9 BE -  -  -  	cp (hl) ;compare to sprite height 
  145 D1:B5CA D2 EA B5 D1 	jp nc, dfgs_upper_skip
  146 D1:B5CE -  -  -  -  	;a now holds number of lines to skip drawing
  147 D1:B5CE -  -  -  -  
  148 D1:B5CE -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  149 D1:B5CE 11 00 00 00 	ld de,0;load top of vram 
  150 D1:B5D2 E5 -  -  -  	push hl ;save height ptr
  151 D1:B5D3 CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  152 D1:B5D7 -  -  -  -  	
  153 D1:B5D7 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  154 D1:B5D9 CA E5 B5 D1 	jp z,dfgs_upper_fast
  155 D1:B5DD CD 29 AF D1 	call draw_slow_sprite_top_cut
  156 D1:B5E1 C3 E9 B5 D1 	jp dfgs_upper_skip_2
  157 D1:B5E5 -  -  -  -  dfgs_upper_fast:
  158 D1:B5E5 CD AB AE D1 	call draw_fast_sprite_top_cut
  159 D1:B5E9 -  -  -  -  dfgs_upper_skip_2:
  160 D1:B5E9 E1 -  -  -  	pop hl ;hl holds (height)
  161 D1:B5EA -  -  -  -  	
  162 D1:B5EA -  -  -  -  
  163 D1:B5EA -  -  -  -  dfgs_upper_skip:
  164 D1:B5EA 23 -  -  -  	inc hl ;to x
  165 D1:B5EB 23 -  -  -  	inc hl ;to index 
  166 D1:B5EC 23 -  -  -  	inc hl;to y 
  167 D1:B5ED -  -  -  -  	
  168 D1:B5ED -  -  -  -  	;ld a,$AA
  169 D1:B5ED -  -  -  -  	;call write_a_to_ram
  170 D1:B5ED -  -  -  -  	;call prgmpause
  171 D1:B5ED -  -  -  -  	
  172 D1:B5ED C3 BA B5 D1 	jp dfgs_upper_loop
  173 D1:B5F1 -  -  -  -  	
  174 D1:B5F1 -  -  -  -  	
  175 D1:B5F1 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  176 D1:B5F1 -  -  -  -  	
  177 D1:B5F1 ED 17 -  -  	ld de,(hl) ;load sprite table ptr 
  178 D1:B5F3 ED 53 15 B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  179 D1:B5F8 11 00 00 00 	ld de,0
  180 D1:B5FC 23 -  -  -  	inc hl 
  181 D1:B5FD 23 -  -  -  	inc hl
  182 D1:B5FE 23 -  -  -  	inc hl;past sprite table ptr
  183 D1:B5FF 08 -  -  -  	ex af,af' ;'
  184 D1:B600 7E -  -  -  	ld a,(hl);number of elements
  185 D1:B601 -  -  -  -  	
  186 D1:B601 -  -  -  -  	
  187 D1:B601 -  -  -  -  
  188 D1:B601 -  -  -  -  	
  189 D1:B601 3C -  -  -  	inc a 
  190 D1:B602 08 -  -  -  	ex af,af' ;'
  191 D1:B603 23 -  -  -  	inc hl ;to first y val 
  192 D1:B604 -  -  -  -  dfgs_mid_loop:
  193 D1:B604 -  -  -  -  	
  194 D1:B604 08 -  -  -  	ex af,af';'
  195 D1:B605 3D -  -  -  	dec a 
  196 D1:B606 -  -  -  -  	;call write_a_to_ram
  197 D1:B606 CA 8E B6 D1 	jp z,dfgs_lower_start ;check for end of data
  198 D1:B60A 08 -  -  -  	ex af,af';'
  199 D1:B60B -  -  -  -  
  200 D1:B60B -  -  -  -  	;ld a, $AB
  201 D1:B60B -  -  -  -  	;call write_a_to_ram
  202 D1:B60B -  -  -  -  
  203 D1:B60B -  -  -  -  
  204 D1:B60B 7E -  -  -  	ld a,(hl);y val of sprite in dataframe
  205 D1:B60C -  -  -  -  	;call write_a_to_ram
  206 D1:B60C 23 -  -  -  	inc hl ;to height
  207 D1:B60D -  -  -  -  dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
  208 D1:B60D D6 00 -  -  	sub 0;subtract cam pos
  209 D1:B60F CA 17 B6 D1 	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
  210 D1:B613 D2 69 B6 D1 	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
  211 D1:B617 -  -  -  -  dfgs_mid_sprite_topline:
  212 D1:B617 -  -  -  -  
  213 D1:B617 -  -  -  -  
  214 D1:B617 -  -  -  -  	;Sprite is below viewport bound, either full or bottom cut 
  215 D1:B617 ED 44 -  -  	neg ;a holds number of lines sprite is below top of viewport 
  216 D1:B619 -  -  -  -  
  217 D1:B619 -  -  -  -  	;need to check if sprite is partially or entirely below veiwport
  218 D1:B619 -  -  -  -  	
  219 D1:B619 D6 F0 -  -  	sub 240
  220 D1:B61B D2 42 B6 D1 	jp nc, dfgs_mid_skip ;sprite is entirely below viewport 
  221 D1:B61F -  -  -  -  	;otherwise, a holds -lines to draw 
  222 D1:B61F ED 44 -  -  	neg ;a holds lines to draw 
  223 D1:B621 BE -  -  -  	cp (hl) ;compare to sprite height 
  224 D1:B622 DA 49 B6 D1 	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
  225 D1:B626 -  -  -  -  	;otherwise, draw full sprite 
  226 D1:B626 -  -  -  -  	
  227 D1:B626 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  228 D1:B626 11 00 00 00 	ld de,0;load bottom of vram 
  229 D1:B62A E5 -  -  -  	push hl ;save height ptr
  230 D1:B62B CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  231 D1:B62F -  -  -  -  	
  232 D1:B62F CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  233 D1:B631 CA 3D B6 D1 	jp z,dfgs_mid_full_fast
  234 D1:B635 CD EB AE D1 	call draw_slow_sprite_full
  235 D1:B639 C3 41 B6 D1 	jp dfgs_mid_skip_1
  236 D1:B63D -  -  -  -  dfgs_mid_full_fast:
  237 D1:B63D CD D1 AE D1 	call draw_fast_sprite_full
  238 D1:B641 -  -  -  -  dfgs_mid_skip_1:
  239 D1:B641 E1 -  -  -  	pop hl ;hl holds (height)
  240 D1:B642 -  -  -  -  	
  241 D1:B642 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  242 D1:B642 23 -  -  -  	inc hl ;x
  243 D1:B643 23 -  -  -  	inc hl ;index 
  244 D1:B644 23 -  -  -  	inc hl;to y 
  245 D1:B645 -  -  -  -  	
  246 D1:B645 C3 04 B6 D1 	jp dfgs_mid_loop
  247 D1:B649 -  -  -  -  	
  248 D1:B649 -  -  -  -  
  249 D1:B649 -  -  -  -  dfgs_mid_bottom_cut:
  250 D1:B649 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  251 D1:B649 11 00 00 00 	ld de,0;load bottom of vram 
  252 D1:B64D E5 -  -  -  	push hl ;save height ptr
  253 D1:B64E CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  254 D1:B652 -  -  -  -  	
  255 D1:B652 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  256 D1:B654 CA 60 B6 D1 	jp z,dfgs_mid_bcut_fast
  257 D1:B658 CD 56 AF D1 	call draw_slow_sprite_bottom_cut
  258 D1:B65C C3 64 B6 D1 	jp dfgs_mid_skip_2
  259 D1:B660 -  -  -  -  dfgs_mid_bcut_fast:
  260 D1:B660 CD 8E AE D1 	call draw_fast_sprite_bottom_cut
  261 D1:B664 -  -  -  -  dfgs_mid_skip_2:
  262 D1:B664 E1 -  -  -  	pop hl ;hl holds (height)
  263 D1:B665 C3 42 B6 D1 	jp dfgs_mid_skip
  264 D1:B669 -  -  -  -  
  265 D1:B669 -  -  -  -  dfgs_mid_sprite_above:
  266 D1:B669 -  -  -  -  	;a holds lines to skip 
  267 D1:B669 BE -  -  -  	cp (hl) ;compare to height
  268 D1:B66A D2 42 B6 D1 	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport
  269 D1:B66E -  -  -  -  
  270 D1:B66E -  -  -  -  dfgs_vram_top_2 .equ $ + 1
  271 D1:B66E 11 00 00 00 	ld de,0;top of vram 
  272 D1:B672 E5 -  -  -  	push hl ;save height ptr
  273 D1:B673 CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  274 D1:B677 -  -  -  -  	
  275 D1:B677 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  276 D1:B679 CA 85 B6 D1 	jp z,dfgs_mid_tcut_fast
  277 D1:B67D CD 29 AF D1 	call draw_slow_sprite_top_cut
  278 D1:B681 C3 89 B6 D1 	jp dfgs_mid_skip_3
  279 D1:B685 -  -  -  -  dfgs_mid_tcut_fast:
  280 D1:B685 CD AB AE D1 	call draw_fast_sprite_top_cut
  281 D1:B689 -  -  -  -  dfgs_mid_skip_3:
  282 D1:B689 E1 -  -  -  	pop hl ;hl holds (height)
  283 D1:B68A C3 42 B6 D1 	jp dfgs_mid_skip
  284 D1:B68E -  -  -  -  	
  285 D1:B68E -  -  -  -  	
  286 D1:B68E -  -  -  -  	
  287 D1:B68E -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  288 D1:B68E -  -  -  -  dfgs_lower_start:
  289 D1:B68E -  -  -  -  	
  290 D1:B68E ED 17 -  -  	ld de,(hl) ;load sprite table ptr
  291 D1:B690 ED 53 15 B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  292 D1:B695 11 00 00 00 	ld de,0
  293 D1:B699 23 -  -  -  	inc hl 
  294 D1:B69A 23 -  -  -  	inc hl
  295 D1:B69B 23 -  -  -  	inc hl;past data table 
  296 D1:B69C -  -  -  -  	
  297 D1:B69C 08 -  -  -  	ex af,af' ;'
  298 D1:B69D 7E -  -  -  	ld a,(hl);number of elements
  299 D1:B69E 3C -  -  -  	inc a 
  300 D1:B69F 08 -  -  -  	ex af,af' ;'
  301 D1:B6A0 23 -  -  -  	inc hl
  302 D1:B6A1 -  -  -  -  	
  303 D1:B6A1 -  -  -  -  
  304 D1:B6A1 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  305 D1:B6A1 3E 00 -  -  	ld a, 0
  306 D1:B6A3 D6 EF -  -  	sub 239
  307 D1:B6A5 D0 -  -  -  	ret nc;if bottom frame is offscreen 
  308 D1:B6A6 -  -  -  -  
  309 D1:B6A6 -  -  -  -  	;a holds y value of viewport bottom line in lower frame 
  310 D1:B6A6 32 B1 B6 D1 	ld (dfgs_viewport_bottom_y),a
  311 D1:B6AA -  -  -  -  
  312 D1:B6AA -  -  -  -  dfgs_lower_loop:
  313 D1:B6AA -  -  -  -  
  314 D1:B6AA 08 -  -  -  	ex af,af';'
  315 D1:B6AB 3D -  -  -  	dec a 
  316 D1:B6AC C8 -  -  -  	ret z
  317 D1:B6AD 08 -  -  -  	ex af,af';'
  318 D1:B6AE -  -  -  -  	
  319 D1:B6AE 7E -  -  -  	ld a,(hl);y
  320 D1:B6AF 23 -  -  -  	inc hl ;inc to height
  321 D1:B6B0 -  -  -  -  dfgs_viewport_bottom_y .equ $ + 1
  322 D1:B6B0 D6 00 -  -  	sub a,0;subtract y val of viewport bottom
  323 D1:B6B2 DA D7 B6 D1 	jp c,dfgs_lower_skip;sprite below screen
  324 D1:B6B6 -  -  -  -  	
  325 D1:B6B6 -  -  -  -  	;a holds number of lines to draw 
  326 D1:B6B6 BE -  -  -  	cp (hl) ;compare to sprite height 
  327 D1:B6B7 DA DE B6 D1 	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
  328 D1:B6BB -  -  -  -  	
  329 D1:B6BB -  -  -  -  	;draw full sprite 
  330 D1:B6BB -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  331 D1:B6BB 11 00 00 00 	ld de,0;load bottom of vram 
  332 D1:B6BF E5 -  -  -  	push hl ;save height ptr
  333 D1:B6C0 CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  334 D1:B6C4 -  -  -  -  	
  335 D1:B6C4 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  336 D1:B6C6 CA D2 B6 D1 	jp z,dfgs_lower_full_fast
  337 D1:B6CA CD EB AE D1 	call draw_slow_sprite_full
  338 D1:B6CE C3 D6 B6 D1 	jp dfgs_lower_skip_1
  339 D1:B6D2 -  -  -  -  dfgs_lower_full_fast:
  340 D1:B6D2 CD D1 AE D1 	call draw_fast_sprite_full
  341 D1:B6D6 -  -  -  -  dfgs_lower_skip_1:
  342 D1:B6D6 E1 -  -  -  	pop hl ;hl holds (height)
  343 D1:B6D7 -  -  -  -  
  344 D1:B6D7 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  345 D1:B6D7 23 -  -  -  	inc hl ;x 
  346 D1:B6D8 23 -  -  -  	inc hl ;index 
  347 D1:B6D9 23 -  -  -  	inc hl;to y 
  348 D1:B6DA -  -  -  -  
  349 D1:B6DA C3 AA B6 D1 	jp dfgs_lower_loop
  350 D1:B6DE -  -  -  -  	
  351 D1:B6DE -  -  -  -  dfgs_lower_bottom_cut: 
  352 D1:B6DE -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  353 D1:B6DE 11 00 00 00 	ld de,0;load bottom of vram 
  354 D1:B6E2 E5 -  -  -  	push hl ;save height ptr
  355 D1:B6E3 CD FE B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  356 D1:B6E7 -  -  -  -  	
  357 D1:B6E7 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  358 D1:B6E9 CA F5 B6 D1 	jp z,dfgs_lower_bcut_fast ;even= fast
  359 D1:B6ED CD 56 AF D1 	call draw_slow_sprite_bottom_cut
  360 D1:B6F1 C3 F9 B6 D1 	jp dfgs_lower_skip_2
  361 D1:B6F5 -  -  -  -  dfgs_lower_bcut_fast:
  362 D1:B6F5 CD 8E AE D1 	call draw_fast_sprite_bottom_cut
  363 D1:B6F9 -  -  -  -  dfgs_lower_skip_2:
  364 D1:B6F9 E1 -  -  -  	pop hl ;hl holds (height)
  365 D1:B6FA C3 D7 B6 D1 	jp dfgs_lower_skip
  366 D1:B6FE -  -  -  -  	
  367 D1:B6FE -  -  -  -  	
  368 D1:B6FE -  -  -  -  	
  369 D1:B6FE -  -  -  -  	
  370 D1:B6FE -  -  -  -  	
  371 D1:B6FE -  -  -  -  	
  372 D1:B6FE -  -  -  -  	
  373 D1:B6FE -  -  -  -  	
  374 D1:B6FE -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  375 D1:B6FE -  -  -  -  ;(hl) = height 	
  376 D1:B6FE -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  377 D1:B6FE -  -  -  -  
  378 D1:B6FE -  -  -  -  ;Subtracts a lines from de (initial vram pos),
  379 D1:B6FE -  -  -  -  ;returns hl = sprite data, de = new vram position
  380 D1:B6FE -  -  -  -  dfgs_setup_draw:
  381 D1:B6FE 23 -  -  -  	inc hl ;x pos 
  382 D1:B6FF 01 00 00 00 	ld bc,0
  383 D1:B703 4E -  -  -  	ld c,(hl); x pos
  384 D1:B704 23 -  -  -  	inc hl;to index
  385 D1:B705 E5 -  -  -  	push hl;save sprite index 
  386 D1:B706 26 A0 -  -  	ld h,160
  387 D1:B708 6F -  -  -  	ld l,a ;number of lines to subtract 
  388 D1:B709 ED 6C -  -  	mlt hl;subtract from vram
  389 D1:B70B 37 -  -  -  	scf 
  390 D1:B70C 3F -  -  -  	ccf
  391 D1:B70D EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  392 D1:B70E ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  393 D1:B710 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  394 D1:B711 EB -  -  -  	ex de,hl;put in de
  395 D1:B712 E1 -  -  -  	pop hl;back to frame data 
  396 D1:B713 4E -  -  -  	ld c,(hl);sprite index
  397 D1:B714 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  398 D1:B714 21 00 00 00 	ld hl,0 ;load sprite table 
  399 D1:B718 09 -  -  -  	add hl,bc
  400 D1:B719 09 -  -  -  	add hl,bc 
  401 D1:B71A 09 -  -  -  	add hl,bc;move to sprite ptr
  402 D1:B71B -  -  -  -  	;call prgmpause
  403 D1:B71B ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  404 D1:B71D -  -  -  -  
  405 D1:B71D C9 -  -  -  	ret
  406 D1:B71E -  -  -  -  
  407 D1:B71E -  -  -  -  	
  408 D1:B71E -  -  -  -  	
  409 D1:B71E -  -  -  -  	
  410 D1:B71E -  -  -  -  	
  411 D1:B71E -  -  -  -  	
  412 D1:B71E -  -  -  -  	
  413 D1:B71E -  -  -  -  	
  414 D1:B71E -  -  -  -  	
  415 D1:B71E -  -  -  -  	
  416 D1:B71E -  -  -  -  	
  417 D1:B71E -  -  -  -  	
  418 D1:B71E -  -  -  -  	
Listing for file "ascent.asm"
  500 D1:B71E -  -  -  -  #include "SpriteDecompressManager.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\SpriteDecompressManager.txt"
    1 D1:B71E -  -  -  -  
    2 D1:B71E -  -  -  -  
    3 D1:B71E -  -  -  -  decompress_queue_start .equ vram
    4 D1:B71E -  -  -  -  
    5 D1:B71E -  -  -  -  decompress_queue_end .equ vram + (7*64) ;Max queue length of 64 TODO change back
    6 D1:B71E -  -  -  -  
    7 D1:B71E -  -  -  -  decompress_tail_ptr:
    8 D1:B71E 06 00 D4 -  	.dl decompress_queue_start + 6  ;points to sprite being currently decompressed (parameters byte)
    9 D1:B721 -  -  -  -  
   10 D1:B721 -  -  -  -  decompress_head_ptr: ;points to where next element will be added to queue
   11 D1:B721 00 00 D4 -  	.dl decompress_queue_start
   12 D1:B724 -  -  -  -  
   13 D1:B724 -  -  -  -  ;Decompress queue format
   14 D1:B724 -  -  -  -  ; .dl Sprite data ptr, decompress location, parameters (7 = fast, 6 = offset, 5 = flip, 4 =started decompressing 3 = finished decompressing )
   15 D1:B724 -  -  -  -  
   16 D1:B724 -  -  -  -  setup_decompress_queue: ;clears memory in queue
   17 D1:B724 3E FF -  -  	ld a,$FF
   18 D1:B726 01 C0 01 00 	ld bc, 7*64
   19 D1:B72A 21 00 00 D4 	ld hl, decompress_queue_start
   20 D1:B72E CD E0 10 02 	call _MemSet
   21 D1:B732 C9 -  -  -  	ret 
   22 D1:B733 -  -  -  -  
   23 D1:B733 -  -  -  -  ;bc = sprite data ptr, de = decompress location, a = params
   24 D1:B733 -  -  -  -  ;adds sprite to queue
   25 D1:B733 -  -  -  -  add_to_decompress_queue:
   26 D1:B733 2A 21 B7 D1 	ld hl, (decompress_head_ptr)
   27 D1:B737 ED 0F -  -  	ld (hl), bc 
   28 D1:B739 23 -  -  -  	inc hl
   29 D1:B73A 23 -  -  -  	inc hl 
   30 D1:B73B 23 -  -  -  	inc hl 
   31 D1:B73C -  -  -  -  
   32 D1:B73C ED 1F -  -  	ld (hl),de
   33 D1:B73E -  -  -  -  	
   34 D1:B73E 23 -  -  -  	inc hl 
   35 D1:B73F 23 -  -  -  	inc hl 
   36 D1:B740 23 -  -  -  	inc hl 
   37 D1:B741 -  -  -  -  	
   38 D1:B741 77 -  -  -  	ld (hl), a 
   39 D1:B742 23 -  -  -  	inc hl ;start of next element 
   40 D1:B743 -  -  -  -  	
   41 D1:B743 E5 -  -  -  	push hl 
   42 D1:B744 11 C0 01 D4 	ld de, decompress_queue_end
   43 D1:B748 37 -  -  -  	scf
   44 D1:B749 3F -  -  -  	ccf
   45 D1:B74A ED 52 -  -  	sbc hl,de ;check if we have reached end of queue to wrap around
   46 D1:B74C E1 -  -  -  	pop hl
   47 D1:B74D CA 56 B7 D1 	jp z, a2dq_back_to_start
   48 D1:B751 -  -  -  -  	
   49 D1:B751 22 21 B7 D1 	ld (decompress_head_ptr),hl
   50 D1:B755 -  -  -  -  	;ld a,$AB ;testing
   51 D1:B755 -  -  -  -  	;call write_a_to_ram
   52 D1:B755 C9 -  -  -  	ret
   53 D1:B756 -  -  -  -  	
   54 D1:B756 -  -  -  -  a2dq_back_to_start:
   55 D1:B756 -  -  -  -  	;ld a,$AA ;testing
   56 D1:B756 -  -  -  -  	;call write_a_to_ram
   57 D1:B756 -  -  -  -  
   58 D1:B756 21 00 00 D4 	ld hl,decompress_queue_start
   59 D1:B75A 22 21 B7 D1 	ld (decompress_head_ptr),hl
   60 D1:B75E C9 -  -  -  	ret
   61 D1:B75F -  -  -  -  	
   62 D1:B75F -  -  -  -  	
   63 D1:B75F -  -  -  -  
   64 D1:B75F -  -  -  -  
   65 D1:B75F -  -  -  -  ;Runs after frame has been rendered. Checks through decompress queue and continues sprite decompressions
   66 D1:B75F -  -  -  -  	;if has ended, return. at end of queue
   67 D1:B75F -  -  -  -  	;if not started, begin decompression and set start flag
   68 D1:B75F -  -  -  -  	;if has started, but not ended, continue decompression 
   69 D1:B75F -  -  -  -  	;if started and ended, move to next element 
   70 D1:B75F -  -  -  -  continue_decompressions:
   71 D1:B75F 2A 1E B7 D1 	ld hl, (decompress_tail_ptr)
   72 D1:B763 7E -  -  -  	ld a,(hl) ;decompress params 
   73 D1:B764 CB 5F -  -  	bit 3,a 
   74 D1:B766 C0 -  -  -  	ret nz ;sprite is done decompressing, at end of queue 
   75 D1:B767 -  -  -  -  	
   76 D1:B767 -  -  -  -  	;testing
   77 D1:B767 -  -  -  -  	;push af
   78 D1:B767 -  -  -  -  	;ld a,$55
   79 D1:B767 -  -  -  -  	;call write_a_to_ram
   80 D1:B767 -  -  -  -  	;pop af
   81 D1:B767 -  -  -  -  	
   82 D1:B767 -  -  -  -  	
   83 D1:B767 -  -  -  -  	
   84 D1:B767 -  -  -  -  	
   85 D1:B767 CB 67 -  -  	bit 4,a
   86 D1:B769 CA A5 B7 D1 	jp z, cd_begin_decompression
   87 D1:B76D -  -  -  -  	
   88 D1:B76D -  -  -  -  	;has started,not ended 
   89 D1:B76D CD CB B2 D1 	call sdcomp_continue 
   90 D1:B771 B7 -  -  -  	or a 
   91 D1:B772 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
   92 D1:B773 -  -  -  -  
   93 D1:B773 -  -  -  -  cd_done_decompressing:
   94 D1:B773 -  -  -  -  	;sprite finished decompressing
   95 D1:B773 2A 1E B7 D1 	ld hl, (decompress_tail_ptr)	
   96 D1:B777 CB DE -  -  	set 3,(hl) ;set finished flag
   97 D1:B779 11 07 00 00 	ld de,7 
   98 D1:B77D 19 -  -  -  	add hl,de ;points to next element in queue
   99 D1:B77E -  -  -  -  	
  100 D1:B77E E5 -  -  -  	push hl 
  101 D1:B77F 11 C0 01 D4 	ld de, decompress_queue_end
  102 D1:B783 37 -  -  -  	scf
  103 D1:B784 3F -  -  -  	ccf
  104 D1:B785 ED 52 -  -  	sbc hl,de ;check if need to wrap to start of queue
  105 D1:B787 E1 -  -  -  	pop hl
  106 D1:B788 D2 94 B7 D1 	jp nc, cd_back_to_start
  107 D1:B78C 22 1E B7 D1 	ld (decompress_tail_ptr),hl
  108 D1:B790 C3 5F B7 D1 	jp continue_decompressions ;Move on to next sprite 
  109 D1:B794 -  -  -  -  	
  110 D1:B794 -  -  -  -  cd_back_to_start:
  111 D1:B794 21 00 00 D4 	ld hl,decompress_queue_start
  112 D1:B798 11 06 00 00 	ld de,6 ;tail points to the parameters byte
  113 D1:B79C 19 -  -  -  	add hl,de
  114 D1:B79D 22 1E B7 D1 	ld (decompress_tail_ptr),hl
  115 D1:B7A1 C3 5F B7 D1 	jp continue_decompressions ;Move on to next sprite 
  116 D1:B7A5 -  -  -  -  
  117 D1:B7A5 -  -  -  -  cd_begin_decompression:
  118 D1:B7A5 -  -  -  -  
  119 D1:B7A5 -  -  -  -  	;testing
  120 D1:B7A5 -  -  -  -  	;push af 
  121 D1:B7A5 -  -  -  -  	;ld a,$AA
  122 D1:B7A5 -  -  -  -  	;call write_a_to_ram
  123 D1:B7A5 -  -  -  -  	;pop af
  124 D1:B7A5 -  -  -  -  	
  125 D1:B7A5 -  -  -  -  	;setup and begin decompressing
  126 D1:B7A5 CB E6 -  -  	set 4,(hl) ;set start flag
  127 D1:B7A7 F5 -  -  -  	push af 
  128 D1:B7A8 CB 7F -  -  	bit 7,a 
  129 D1:B7AA C4 CD B4 D1 	call nz, sdcomp_set_fast
  130 D1:B7AE F1 -  -  -  	pop af 
  131 D1:B7AF -  -  -  -  	
  132 D1:B7AF F5 -  -  -  	push af 
  133 D1:B7B0 CB 7F -  -  	bit 7,a 
  134 D1:B7B2 CC DC B4 D1 	call z, sdcomp_reset_fast
  135 D1:B7B6 F1 -  -  -  	pop af 
  136 D1:B7B7 -  -  -  -  	
  137 D1:B7B7 F5 -  -  -  	push af 
  138 D1:B7B8 CB 77 -  -  	bit 6,a 
  139 D1:B7BA C4 5D B4 D1 	call nz, sdcomp_set_offset
  140 D1:B7BE F1 -  -  -  	pop af 
  141 D1:B7BF -  -  -  -  	
  142 D1:B7BF F5 -  -  -  	push af 
  143 D1:B7C0 CB 77 -  -  	bit 6,a 
  144 D1:B7C2 CC 6E B4 D1 	call z, sdcomp_reset_offset
  145 D1:B7C6 F1 -  -  -  	pop af 
  146 D1:B7C7 -  -  -  -  	
  147 D1:B7C7 F5 -  -  -  	push af 
  148 D1:B7C8 CB 6F -  -  	bit 5,a 
  149 D1:B7CA C4 7F B4 D1 	call nz, sdcomp_set_flip
  150 D1:B7CE F1 -  -  -  	pop af 
  151 D1:B7CF -  -  -  -  	
  152 D1:B7CF F5 -  -  -  	push af 
  153 D1:B7D0 CB 6F -  -  	bit 5,a 
  154 D1:B7D2 CC A6 B4 D1 	call z, sdcomp_reset_flip
  155 D1:B7D6 F1 -  -  -  	pop af 
  156 D1:B7D7 -  -  -  -  	
  157 D1:B7D7 2A 1E B7 D1 	ld hl, (decompress_tail_ptr) ;may be unnessecary
  158 D1:B7DB -  -  -  -  	
  159 D1:B7DB 2B -  -  -  	dec hl 
  160 D1:B7DC 2B -  -  -  	dec hl 
  161 D1:B7DD 2B -  -  -  	dec hl 
  162 D1:B7DE ED 17 -  -  	ld de,(hl) ;load decompress location
  163 D1:B7E0 -  -  -  -  
  164 D1:B7E0 2B -  -  -  	dec hl 
  165 D1:B7E1 2B -  -  -  	dec hl 
  166 D1:B7E2 2B -  -  -  	dec hl 
  167 D1:B7E3 ED 27 -  -  	ld hl,(hl) ;load sprite data ptr
  168 D1:B7E5 -  -  -  -  
  169 D1:B7E5 CD 2E B1 D1 	call sprite_decompress
  170 D1:B7E9 B7 -  -  -  	or a 
  171 D1:B7EA C0 -  -  -  	ret nz ;sprite not yet done decompressing 
  172 D1:B7EB C3 73 B7 D1 	jp cd_done_decompressing
  173 D1:B7EF -  -  -  -  
  174 D1:B7EF -  -  -  -  
  175 D1:B7EF -  -  -  -  ;Checks to see if cam has moved to a new frame and decompressions need to be added to queue
  176 D1:B7EF -  -  -  -  check_for_decompress_calls:
  177 D1:B7EF 3A 37 B8 D1 	ld a, (last_decompressed_cam_pos)
  178 D1:B7F3 47 -  -  -  	ld b,a ;put last decompressed pos in b
  179 D1:B7F4 3A CE AB D1 	ld a, (cam_pos + 1) ;Current frame cam is in
  180 D1:B7F8 32 37 B8 D1 	ld (last_decompressed_cam_pos),a ;store this frame as the last decompressed frame 
  181 D1:B7FC -  -  -  -  	;need to check if cam has moved up or down since last time
  182 D1:B7FC B8 -  -  -  	cp a,b 
  183 D1:B7FD -  -  -  -  	
  184 D1:B7FD -  -  -  -  	
  185 D1:B7FD C8 -  -  -  	ret z ;if same, no new things to add to queue 
  186 D1:B7FE D2 0A B8 D1 	jp nc, cfdc_cam_move_up ;camera has moved up since last time 
  187 D1:B802 -  -  -  -  	
  188 D1:B802 -  -  -  -  	;cam has moved down since last time 
  189 D1:B802 21 B2 BC D1 	ld hl, decompress_calls_table_down
  190 D1:B806 C3 0E B8 D1 	jp cfdc_add_calls_to_queue
  191 D1:B80A -  -  -  -  	
  192 D1:B80A -  -  -  -  	
  193 D1:B80A -  -  -  -  cfdc_cam_move_up:
  194 D1:B80A 21 2E BC D1 	ld hl, decompress_calls_table_up
  195 D1:B80E -  -  -  -  
  196 D1:B80E -  -  -  -  	;a = cam frame, hl = decompress call table (up or down)
  197 D1:B80E -  -  -  -  cfdc_add_calls_to_queue:
  198 D1:B80E -  -  -  -  
  199 D1:B80E -  -  -  -  	;call write_a_to_ram
  200 D1:B80E -  -  -  -  
  201 D1:B80E 01 00 00 00 	ld bc,0
  202 D1:B812 4F -  -  -  	ld c,a
  203 D1:B813 09 -  -  -  	add hl,bc 
  204 D1:B814 09 -  -  -  	add hl,bc 
  205 D1:B815 09 -  -  -  	add hl,bc 
  206 D1:B816 ED 27 -  -  	ld hl,(hl) ;hl now points to correct decompress frame 
  207 D1:B818 -  -  -  -  	
  208 D1:B818 08 -  -  -  	ex af,af' ;'
  209 D1:B819 7E -  -  -  	ld a,(hl) ;a' holds num elements 
  210 D1:B81A -  -  -  -  	
  211 D1:B81A -  -  -  -  	;call write_a_to_ram
  212 D1:B81A -  -  -  -  	
  213 D1:B81A -  -  -  -  	;call prgmpause
  214 D1:B81A -  -  -  -  	
  215 D1:B81A 3C -  -  -  	inc a ;to be decd later
  216 D1:B81B 08 -  -  -  	ex af,af' ;'
  217 D1:B81C -  -  -  -  	
  218 D1:B81C 23 -  -  -  	inc hl ;points to first sprite data 
  219 D1:B81D -  -  -  -  cfdc_add_to_queue_loop:
  220 D1:B81D 08 -  -  -  	ex af,af' ;'
  221 D1:B81E -  -  -  -  	;call write_a_to_ram
  222 D1:B81E 3D -  -  -  	dec a ;account for cases where frame has 0 elements 
  223 D1:B81F C8 -  -  -  	ret z
  224 D1:B820 08 -  -  -  	ex af,af' ;'
  225 D1:B821 ED 07 -  -  	ld bc ,(hl) ;load sprite data 
  226 D1:B823 23 -  -  -  	inc hl 
  227 D1:B824 23 -  -  -  	inc hl
  228 D1:B825 23 -  -  -  	inc hl 
  229 D1:B826 ED 17 -  -  	ld de,(hl) ;load decomp location 
  230 D1:B828 23 -  -  -  	inc hl 
  231 D1:B829 23 -  -  -  	inc hl
  232 D1:B82A 23 -  -  -  	inc hl 
  233 D1:B82B 7E -  -  -  	ld a,(hl) ;ld params
  234 D1:B82C 23 -  -  -  	inc hl 
  235 D1:B82D E5 -  -  -  	push hl
  236 D1:B82E CD 33 B7 D1 	call add_to_decompress_queue
  237 D1:B832 E1 -  -  -  	pop hl
  238 D1:B833 C3 1D B8 D1 	jp cfdc_add_to_queue_loop
  239 D1:B837 -  -  -  -  	
  240 D1:B837 -  -  -  -  	
  241 D1:B837 -  -  -  -  
  242 D1:B837 -  -  -  -  
  243 D1:B837 -  -  -  -  last_decompressed_cam_pos:
  244 D1:B837 00 -  -  -  	.db 0 ;camera frame last time checking for decomp was called 
  245 D1:B838 -  -  -  -  	
  246 D1:B838 -  -  -  -  	
  247 D1:B838 -  -  -  -  
  248 D1:B838 -  -  -  -  
  249 D1:B838 -  -  -  -  
  250 D1:B838 -  -  -  -  
  251 D1:B838 -  -  -  -  
  252 D1:B838 -  -  -  -  
  253 D1:B838 -  -  -  -  
  254 D1:B838 -  -  -  -  
  255 D1:B838 -  -  -  -  
  256 D1:B838 -  -  -  -  
  257 D1:B838 -  -  -  -  
  258 D1:B838 -  -  -  -  
  259 D1:B838 -  -  -  -  
  260 D1:B838 -  -  -  -  
  261 D1:B838 -  -  -  -  
  262 D1:B838 -  -  -  -  
  263 D1:B838 -  -  -  -  
  264 D1:B838 -  -  -  -  
  265 D1:B838 -  -  -  -  
  266 D1:B838 -  -  -  -  
  267 D1:B838 -  -  -  -  
  268 D1:B838 -  -  -  -  
  269 D1:B838 -  -  -  -  
  270 D1:B838 -  -  -  -  
  271 D1:B838 -  -  -  -  
Listing for file "ascent.asm"
  501 D1:B838 -  -  -  -  #include "getInputs.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\getInputs.txt"
    1 D1:B838 -  -  -  -  
    2 D1:B838 -  -  -  -  
    3 D1:B838 -  -  -  -  
    4 D1:B838 -  -  -  -  get_inputs:
    5 D1:B838 21 00 00 F5 	ld	hl,DI_Mode		; register for keypad mode
    6 D1:B83C 36 02 -  -  	ld	(hl),2			; set single scan mode
    7 D1:B83E -  -  -  -  
    8 D1:B83E AF -  -  -  	xor	a,a
    9 D1:B83F -  -  -  -  scan_wait:
   10 D1:B83F BE -  -  -  	cp	a,(hl)			; wait for keypad idle mode
   11 D1:B840 20 FD -  -  	jr	nz,scan_wait
   12 D1:B842 -  -  -  -  	
   13 D1:B842 -  -  -  -  	; https://wikiti.brandonw.net/index.php?title=84PCE:Ports:A000
   14 D1:B842 -  -  -  -  	
   15 D1:B842 3A 1E 00 F5 	ld	a,(kbdG7) ; $F5001E
   16 D1:B846 CB 5F -  -   	bit	kbitUp,a
   17 D1:B848 C2 53 B8 D1 	jp nz, input_cam_up
   18 D1:B84C -  -  -  -  	
   19 D1:B84C -  -  -  -  	
   20 D1:B84C CB 47 -  -  	bit	kbitDown,a
   21 D1:B84E C2 6A B8 D1 	jp nz, input_cam_down
   22 D1:B852 C9 -  -  -  	ret
   23 D1:B853 -  -  -  -  	
   24 D1:B853 -  -  -  -  	
   25 D1:B853 -  -  -  -  input_cam_up:
   26 D1:B853 -  -  -  -  	;Move cam
   27 D1:B853 2A CD AB D1 	ld hl,(cam_pos)
   28 D1:B857 -  -  -  -  	
   29 D1:B857 E5 -  -  -  	push hl 
   30 D1:B858 01 C4 09 00 	ld bc,2500
   31 D1:B85C ED 42 -  -  	sbc hl,bc 
   32 D1:B85E E1 -  -  -  	pop hl 
   33 D1:B85F D0 -  -  -  	ret nc
   34 D1:B860 -  -  -  -  	
   35 D1:B860 -  -  -  -  	
   36 D1:B860 23 -  -  -  	inc hl
   37 D1:B861 23 -  -  -  	inc hl
   38 D1:B862 23 -  -  -  	inc hl
   39 D1:B863 23 -  -  -  	inc hl
   40 D1:B864 23 -  -  -  	inc hl
   41 D1:B865 22 CD AB D1 	ld (cam_pos),hl
   42 D1:B869 C9 -  -  -  	ret
   43 D1:B86A -  -  -  -  
   44 D1:B86A -  -  -  -  
   45 D1:B86A -  -  -  -  input_cam_down:
   46 D1:B86A -  -  -  -  	;Move cam
   47 D1:B86A 2A CD AB D1 	ld hl,(cam_pos)
   48 D1:B86E -  -  -  -  	
   49 D1:B86E E5 -  -  -  	push hl 
   50 D1:B86F 01 05 00 00 	ld bc,5 
   51 D1:B873 ED 42 -  -  	sbc hl,bc 
   52 D1:B875 E1 -  -  -  	pop hl 
   53 D1:B876 D8 -  -  -  	ret c 
   54 D1:B877 -  -  -  -  	
   55 D1:B877 -  -  -  -  	
   56 D1:B877 2B -  -  -  	dec hl
   57 D1:B878 2B -  -  -  	dec hl
   58 D1:B879 2B -  -  -  	dec hl
   59 D1:B87A 2B -  -  -  	dec hl
   60 D1:B87B 22 CD AB D1 	ld (cam_pos),hl
   61 D1:B87F C9 -  -  -  	ret
   62 D1:B880 -  -  -  -  	
   63 D1:B880 -  -  -  -  	
   64 D1:B880 -  -  -  -  	
Listing for file "ascent.asm"
  502 D1:B880 -  -  -  -  ;#include "levelData.txt"
  503 D1:B880 -  -  -  -  ;#include "FGLevelData.txt"
  504 D1:B880 -  -  -  -  
  505 D1:B880 -  -  -  -  #include "generated/BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\BG_Data.txt"
    1 D1:B880 -  -  -  -  BG_Data_frame_table:
    2 D1:B880 8A B9 D1 -  	.dl BG_Data_0
    3 D1:B883 62 B9 D1 -  	.dl BG_Data_1
    4 D1:B886 4E B9 D1 -  	.dl BG_Data_2
    5 D1:B889 0E B9 D1 -  	.dl BG_Data_3
    6 D1:B88C F6 B8 D1 -  	.dl BG_Data_4
    7 D1:B88F D6 B8 D1 -  	.dl BG_Data_5
    8 D1:B892 CE B8 D1 -  	.dl BG_Data_6
    9 D1:B895 C6 B8 D1 -  	.dl BG_Data_7
   10 D1:B898 AE B8 D1 -  	.dl BG_Data_8
   11 D1:B89B 9E B8 D1 -  	.dl BG_Data_9
   12 D1:B89E -  -  -  -  
   13 D1:B89E -  -  -  -  
   14 D1:B89E -  -  -  -  
   15 D1:B89E -  -  -  -  BG_Data_9:
   16 D1:B89E 71 BF D1 -  	.dl Sprite_Table_0
   17 D1:B8A1 03 -  -  -  	.db 3
   18 D1:B8A2 9C 20 3B 14 	.db 156, 32, 59, 20
   19 D1:B8A6 62 20 61 15 	.db 98, 32, 97, 21
   20 D1:B8AA 9C 20 3B 14 	.db 156, 32, 59, 20
   21 D1:B8AE -  -  -  -  
   22 D1:B8AE -  -  -  -  BG_Data_8:
   23 D1:B8AE 71 BF D1 -  	.dl Sprite_Table_0
   24 D1:B8B1 05 -  -  -  	.db 5
   25 D1:B8B2 89 20 0F 14 	.db 137, 32, 15, 20
   26 D1:B8B6 A6 20 21 15 	.db 166, 32, 33, 21
   27 D1:B8BA BA 20 39 15 	.db 186, 32, 57, 21
   28 D1:B8BE CB 20 50 15 	.db 203, 32, 80, 21
   29 D1:B8C2 E2 20 63 14 	.db 226, 32, 99, 20
   30 D1:B8C6 -  -  -  -  
   31 D1:B8C6 -  -  -  -  BG_Data_7:
   32 D1:B8C6 71 BF D1 -  	.dl Sprite_Table_0
   33 D1:B8C9 01 -  -  -  	.db 1
   34 D1:B8CA 54 20 5C 14 	.db 84, 32, 92, 20
   35 D1:B8CE -  -  -  -  
   36 D1:B8CE -  -  -  -  BG_Data_6:
   37 D1:B8CE 71 BF D1 -  	.dl Sprite_Table_0
   38 D1:B8D1 01 -  -  -  	.db 1
   39 D1:B8D2 6F 20 14 15 	.db 111, 32, 20, 21
   40 D1:B8D6 -  -  -  -  
   41 D1:B8D6 -  -  -  -  BG_Data_5:
   42 D1:B8D6 71 BF D1 -  	.dl Sprite_Table_0
   43 D1:B8D9 07 -  -  -  	.db 7
   44 D1:B8DA A9 0F 6F 19 	.db 169, 15, 111, 25
   45 D1:B8DE 87 20 7E 15 	.db 135, 32, 126, 21
   46 D1:B8E2 EC 0F 2D 19 	.db 236, 15, 45, 25
   47 D1:B8E6 B0 0F 1C 18 	.db 176, 15, 28, 24
   48 D1:B8EA 84 0F 38 19 	.db 132, 15, 56, 25
   49 D1:B8EE B7 0F 52 18 	.db 183, 15, 82, 24
   50 D1:B8F2 7A 0F 5A 19 	.db 122, 15, 90, 25
   51 D1:B8F6 -  -  -  -  
   52 D1:B8F6 -  -  -  -  BG_Data_4:
   53 D1:B8F6 71 BF D1 -  	.dl Sprite_Table_0
   54 D1:B8F9 05 -  -  -  	.db 5
   55 D1:B8FA 78 20 10 14 	.db 120, 32, 16, 20
   56 D1:B8FE 13 20 5B 16 	.db 19, 32, 91, 22
   57 D1:B902 25 20 39 16 	.db 37, 32, 57, 22
   58 D1:B906 0A 20 16 17 	.db 10, 32, 22, 23
   59 D1:B90A ED 0F 08 18 	.db 237, 15, 8, 24
   60 D1:B90E -  -  -  -  
   61 D1:B90E -  -  -  -  BG_Data_3:
   62 D1:B90E 71 BF D1 -  	.dl Sprite_Table_0
   63 D1:B911 0F -  -  -  	.db 15
   64 D1:B912 46 20 74 17 	.db 70, 32, 116, 23
   65 D1:B916 46 20 67 17 	.db 70, 32, 103, 23
   66 D1:B91A 46 20 5B 16 	.db 70, 32, 91, 22
   67 D1:B91E 46 20 4F 16 	.db 70, 32, 79, 22
   68 D1:B922 47 20 3D 16 	.db 71, 32, 61, 22
   69 D1:B926 46 20 2F 17 	.db 70, 32, 47, 23
   70 D1:B92A 34 20 1E 17 	.db 52, 32, 30, 23
   71 D1:B92E 16 20 11 17 	.db 22, 32, 17, 23
   72 D1:B932 09 20 26 16 	.db 9, 32, 38, 22
   73 D1:B936 09 20 3F 16 	.db 9, 32, 63, 22
   74 D1:B93A 0B 20 55 17 	.db 11, 32, 85, 23
   75 D1:B93E 0C 20 6A 16 	.db 12, 32, 106, 22
   76 D1:B942 0C 20 80 16 	.db 12, 32, 128, 22
   77 D1:B946 EB 20 0F 16 	.db 235, 32, 15, 22
   78 D1:B94A EC 0F 93 19 	.db 236, 15, 147, 25
   79 D1:B94E -  -  -  -  
   80 D1:B94E -  -  -  -  BG_Data_2:
   81 D1:B94E 71 BF D1 -  	.dl Sprite_Table_0
   82 D1:B951 04 -  -  -  	.db 4
   83 D1:B952 47 20 07 15 	.db 71, 32, 7, 21
   84 D1:B956 9F 20 5B 16 	.db 159, 32, 91, 22
   85 D1:B95A 0C 20 3F 17 	.db 12, 32, 63, 23
   86 D1:B95E DF 0F 8F 18 	.db 223, 15, 143, 24
   87 D1:B962 -  -  -  -  
   88 D1:B962 -  -  -  -  BG_Data_1:
   89 D1:B962 71 BF D1 -  	.dl Sprite_Table_0
   90 D1:B965 09 -  -  -  	.db 9
   91 D1:B966 56 20 89 15 	.db 86, 32, 137, 21
   92 D1:B96A 89 20 19 14 	.db 137, 32, 25, 20
   93 D1:B96E 56 20 89 15 	.db 86, 32, 137, 21
   94 D1:B972 56 20 89 15 	.db 86, 32, 137, 21
   95 D1:B976 D2 20 91 14 	.db 210, 32, 145, 20
   96 D1:B97A B0 20 90 15 	.db 176, 32, 144, 21
   97 D1:B97E 9B 20 33 14 	.db 155, 32, 51, 20
   98 D1:B982 63 20 00 15 	.db 99, 32, 0, 21
   99 D1:B986 9F 20 00 14 	.db 159, 32, 0, 20
  100 D1:B98A -  -  -  -  
  101 D1:B98A -  -  -  -  BG_Data_0:
  102 D1:B98A 71 BF D1 -  	.dl Sprite_Table_0
  103 D1:B98D 01 -  -  -  	.db 1
  104 D1:B98E 6F 20 31 14 	.db 111, 32, 49, 20
  105 D1:B992 -  -  -  -  
  106 D1:B992 -  -  -  -  
  107 D1:B992 -  -  -  -  
Listing for file "ascent.asm"
  506 D1:B992 -  -  -  -  #include "generated/MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\MG_Data.txt"
    1 D1:B992 -  -  -  -  MG_Data_frame_table:
    2 D1:B992 BA BA D1 -  	.dl MG_Data_0
    3 D1:B995 6E BA D1 -  	.dl MG_Data_1
    4 D1:B998 32 BA D1 -  	.dl MG_Data_2
    5 D1:B99B 1A BA D1 -  	.dl MG_Data_3
    6 D1:B99E 0A BA D1 -  	.dl MG_Data_4
    7 D1:B9A1 FE B9 D1 -  	.dl MG_Data_5
    8 D1:B9A4 F2 B9 D1 -  	.dl MG_Data_6
    9 D1:B9A7 EA B9 D1 -  	.dl MG_Data_7
   10 D1:B9AA DA B9 D1 -  	.dl MG_Data_8
   11 D1:B9AD D2 B9 D1 -  	.dl MG_Data_9
   12 D1:B9B0 BE B9 D1 -  	.dl MG_Data_10
   13 D1:B9B3 B6 B9 D1 -  	.dl MG_Data_11
   14 D1:B9B6 -  -  -  -  
   15 D1:B9B6 -  -  -  -  
   16 D1:B9B6 -  -  -  -  
   17 D1:B9B6 -  -  -  -  MG_Data_11:
   18 D1:B9B6 71 BF D1 -  	.dl Sprite_Table_0
   19 D1:B9B9 01 -  -  -  	.db 1
   20 D1:B9BA 6C 18 24 06 	.db 108, 24, 36, 6
   21 D1:B9BE -  -  -  -  
   22 D1:B9BE -  -  -  -  MG_Data_10:
   23 D1:B9BE 71 BF D1 -  	.dl Sprite_Table_0
   24 D1:B9C1 04 -  -  -  	.db 4
   25 D1:B9C2 4C 18 49 05 	.db 76, 24, 73, 5
   26 D1:B9C6 A1 18 19 12 	.db 161, 24, 25, 18
   27 D1:B9CA 41 18 65 13 	.db 65, 24, 101, 19
   28 D1:B9CE A1 18 19 12 	.db 161, 24, 25, 18
   29 D1:B9D2 -  -  -  -  
   30 D1:B9D2 -  -  -  -  MG_Data_9:
   31 D1:B9D2 71 BF D1 -  	.dl Sprite_Table_0
   32 D1:B9D5 01 -  -  -  	.db 1
   33 D1:B9D6 5E 18 66 05 	.db 94, 24, 102, 5
   34 D1:B9DA -  -  -  -  
   35 D1:B9DA -  -  -  -  MG_Data_8:
   36 D1:B9DA 71 BF D1 -  	.dl Sprite_Table_0
   37 D1:B9DD 03 -  -  -  	.db 3
   38 D1:B9DE BB 18 41 06 	.db 187, 24, 65, 6
   39 D1:B9E2 50 18 5D 10 	.db 80, 24, 93, 16
   40 D1:B9E6 40 18 0A 11 	.db 64, 24, 10, 17
   41 D1:B9EA -  -  -  -  
   42 D1:B9EA -  -  -  -  MG_Data_7:
   43 D1:B9EA 71 BF D1 -  	.dl Sprite_Table_0
   44 D1:B9ED 01 -  -  -  	.db 1
   45 D1:B9EE 8D 18 21 05 	.db 141, 24, 33, 5
   46 D1:B9F2 -  -  -  -  
   47 D1:B9F2 -  -  -  -  MG_Data_6:
   48 D1:B9F2 71 BF D1 -  	.dl Sprite_Table_0
   49 D1:B9F5 02 -  -  -  	.db 2
   50 D1:B9F6 8A 18 5A 06 	.db 138, 24, 90, 6
   51 D1:B9FA 8E 18 17 06 	.db 142, 24, 23, 6
   52 D1:B9FE -  -  -  -  
   53 D1:B9FE -  -  -  -  MG_Data_5:
   54 D1:B9FE 71 BF D1 -  	.dl Sprite_Table_0
   55 D1:BA01 02 -  -  -  	.db 2
   56 D1:BA02 71 18 1F 05 	.db 113, 24, 31, 5
   57 D1:BA06 D1 18 36 05 	.db 209, 24, 54, 5
   58 D1:BA0A -  -  -  -  
   59 D1:BA0A -  -  -  -  MG_Data_4:
   60 D1:BA0A 71 BF D1 -  	.dl Sprite_Table_0
   61 D1:BA0D 03 -  -  -  	.db 3
   62 D1:BA0E 2E 18 19 06 	.db 46, 24, 25, 6
   63 D1:BA12 63 18 63 06 	.db 99, 24, 99, 6
   64 D1:BA16 83 18 44 06 	.db 131, 24, 68, 6
   65 D1:BA1A -  -  -  -  
   66 D1:BA1A -  -  -  -  MG_Data_3:
   67 D1:BA1A 71 BF D1 -  	.dl Sprite_Table_0
   68 D1:BA1D 05 -  -  -  	.db 5
   69 D1:BA1E 2C 18 22 05 	.db 44, 24, 34, 5
   70 D1:BA22 8D 18 2D 06 	.db 141, 24, 45, 6
   71 D1:BA26 A4 18 53 05 	.db 164, 24, 83, 5
   72 D1:BA2A 66 18 8B 05 	.db 102, 24, 139, 5
   73 D1:BA2E D6 18 07 05 	.db 214, 24, 7, 5
   74 D1:BA32 -  -  -  -  
   75 D1:BA32 -  -  -  -  MG_Data_2:
   76 D1:BA32 71 BF D1 -  	.dl Sprite_Table_0
   77 D1:BA35 0E -  -  -  	.db 14
   78 D1:BA36 26 18 93 02 	.db 38, 24, 147, 2
   79 D1:BA3A 47 18 3E 00 	.db 71, 24, 62, 0
   80 D1:BA3E 6E 18 17 02 	.db 110, 24, 23, 2
   81 D1:BA42 AA 18 29 00 	.db 170, 24, 41, 0
   82 D1:BA46 A5 18 56 00 	.db 165, 24, 86, 0
   83 D1:BA4A A4 18 71 02 	.db 164, 24, 113, 2
   84 D1:BA4E 0A 18 5F 00 	.db 10, 24, 95, 0
   85 D1:BA52 0D 18 4D 02 	.db 13, 24, 77, 2
   86 D1:BA56 03 18 39 00 	.db 3, 24, 57, 0
   87 D1:BA5A 10 18 00 00 	.db 16, 24, 0, 0
   88 D1:BA5E 78 18 7B 02 	.db 120, 24, 123, 2
   89 D1:BA62 69 18 60 00 	.db 105, 24, 96, 0
   90 D1:BA66 BC 18 51 06 	.db 188, 24, 81, 6
   91 D1:BA6A 85 18 94 06 	.db 133, 24, 148, 6
   92 D1:BA6E -  -  -  -  
   93 D1:BA6E -  -  -  -  MG_Data_1:
   94 D1:BA6E 71 BF D1 -  	.dl Sprite_Table_0
   95 D1:BA71 12 -  -  -  	.db 18
   96 D1:BA72 24 18 24 00 	.db 36, 24, 36, 0
   97 D1:BA76 CD 18 78 06 	.db 205, 24, 120, 6
   98 D1:BA7A DD 18 69 00 	.db 221, 24, 105, 0
   99 D1:BA7E F3 18 65 02 	.db 243, 24, 101, 2
  100 D1:BA82 EE 18 3F 00 	.db 238, 24, 63, 0
  101 D1:BA86 C5 18 20 02 	.db 197, 24, 32, 2
  102 D1:BA8A D6 18 18 00 	.db 214, 24, 24, 0
  103 D1:BA8E EA 18 1A 02 	.db 234, 24, 26, 2
  104 D1:BA92 FD 18 00 02 	.db 253, 24, 0, 2
  105 D1:BA96 AD 18 55 02 	.db 173, 24, 85, 2
  106 D1:BA9A 99 18 35 00 	.db 153, 24, 53, 0
  107 D1:BA9E 73 18 21 02 	.db 115, 24, 33, 2
  108 D1:BAA2 60 18 46 00 	.db 96, 24, 70, 0
  109 D1:BAA6 42 18 68 00 	.db 66, 24, 104, 0
  110 D1:BAAA 08 18 57 00 	.db 8, 24, 87, 0
  111 D1:BAAE 11 18 41 00 	.db 17, 24, 65, 0
  112 D1:BAB2 BC 18 8D 05 	.db 188, 24, 141, 5
  113 D1:BAB6 7E 18 70 0F 	.db 126, 24, 112, 15
  114 D1:BABA -  -  -  -  
  115 D1:BABA -  -  -  -  MG_Data_0:
  116 D1:BABA 71 BF D1 -  	.dl Sprite_Table_0
  117 D1:BABD 0B -  -  -  	.db 11
  118 D1:BABE 54 18 0D 00 	.db 84, 24, 13, 0
  119 D1:BAC2 54 18 0D 00 	.db 84, 24, 13, 0
  120 D1:BAC6 9E 18 3D 00 	.db 158, 24, 61, 0
  121 D1:BACA B9 18 53 00 	.db 185, 24, 83, 0
  122 D1:BACE DF 18 7D 00 	.db 223, 24, 125, 0
  123 D1:BAD2 8B 18 80 00 	.db 139, 24, 128, 0
  124 D1:BAD6 75 18 69 02 	.db 117, 24, 105, 2
  125 D1:BADA 6F 18 5D 02 	.db 111, 24, 93, 2
  126 D1:BADE 69 18 52 00 	.db 105, 24, 82, 0
  127 D1:BAE2 67 18 48 00 	.db 103, 24, 72, 0
  128 D1:BAE6 E6 18 27 00 	.db 230, 24, 39, 0
  129 D1:BAEA -  -  -  -  
  130 D1:BAEA -  -  -  -  
  131 D1:BAEA -  -  -  -  
Listing for file "ascent.asm"
  507 D1:BAEA -  -  -  -  #include "generated/FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\FG_Data.txt"
    1 D1:BAEA -  -  -  -  FG_Data_frame_table:
    2 D1:BAEA 12 BC D1 -  	.dl FG_Data_0
    3 D1:BAED F6 BB D1 -  	.dl FG_Data_1
    4 D1:BAF0 E2 BB D1 -  	.dl FG_Data_2
    5 D1:BAF3 BE BB D1 -  	.dl FG_Data_3
    6 D1:BAF6 B2 BB D1 -  	.dl FG_Data_4
    7 D1:BAF9 AA BB D1 -  	.dl FG_Data_5
    8 D1:BAFC 9A BB D1 -  	.dl FG_Data_6
    9 D1:BAFF 86 BB D1 -  	.dl FG_Data_7
   10 D1:BB02 7E BB D1 -  	.dl FG_Data_8
   11 D1:BB05 76 BB D1 -  	.dl FG_Data_9
   12 D1:BB08 66 BB D1 -  	.dl FG_Data_10
   13 D1:BB0B 52 BB D1 -  	.dl FG_Data_11
   14 D1:BB0E 46 BB D1 -  	.dl FG_Data_12
   15 D1:BB11 3A BB D1 -  	.dl FG_Data_13
   16 D1:BB14 2A BB D1 -  	.dl FG_Data_14
   17 D1:BB17 1A BB D1 -  	.dl FG_Data_15
   18 D1:BB1A -  -  -  -  
   19 D1:BB1A -  -  -  -  
   20 D1:BB1A -  -  -  -  
   21 D1:BB1A -  -  -  -  FG_Data_15:
   22 D1:BB1A 71 BF D1 -  	.dl Sprite_Table_0
   23 D1:BB1D 03 -  -  -  	.db 3
   24 D1:BB1E 40 0F 6C 0D 	.db 64, 15, 108, 13
   25 D1:BB22 43 0F 31 0D 	.db 67, 15, 49, 13
   26 D1:BB26 85 0F 6A 0E 	.db 133, 15, 106, 14
   27 D1:BB2A -  -  -  -  
   28 D1:BB2A -  -  -  -  FG_Data_14:
   29 D1:BB2A 71 BF D1 -  	.dl Sprite_Table_0
   30 D1:BB2D 03 -  -  -  	.db 3
   31 D1:BB2E 61 0F 15 0D 	.db 97, 15, 21, 13
   32 D1:BB32 B0 0F 5D 0D 	.db 176, 15, 93, 13
   33 D1:BB36 A9 0F 2F 0E 	.db 169, 15, 47, 14
   34 D1:BB3A -  -  -  -  
   35 D1:BB3A -  -  -  -  FG_Data_13:
   36 D1:BB3A 71 BF D1 -  	.dl Sprite_Table_0
   37 D1:BB3D 02 -  -  -  	.db 2
   38 D1:BB3E AC 2E 5F 0C 	.db 172, 46, 95, 12
   39 D1:BB42 67 2E 2E 0C 	.db 103, 46, 46, 12
   40 D1:BB46 -  -  -  -  
   41 D1:BB46 -  -  -  -  FG_Data_12:
   42 D1:BB46 71 BF D1 -  	.dl Sprite_Table_0
   43 D1:BB49 02 -  -  -  	.db 2
   44 D1:BB4A 75 2E 54 01 	.db 117, 46, 84, 1
   45 D1:BB4E 6B 30 1D 0A 	.db 107, 48, 29, 10
   46 D1:BB52 -  -  -  -  
   47 D1:BB52 -  -  -  -  FG_Data_11:
   48 D1:BB52 71 BF D1 -  	.dl Sprite_Table_0
   49 D1:BB55 04 -  -  -  	.db 4
   50 D1:BB56 4F 2E 37 01 	.db 79, 46, 55, 1
   51 D1:BB5A BD 2E 6B 01 	.db 189, 46, 107, 1
   52 D1:BB5E B8 30 27 0A 	.db 184, 48, 39, 10
   53 D1:BB62 49 30 64 0B 	.db 73, 48, 100, 11
   54 D1:BB66 -  -  -  -  
   55 D1:BB66 -  -  -  -  FG_Data_10:
   56 D1:BB66 71 BF D1 -  	.dl Sprite_Table_0
   57 D1:BB69 03 -  -  -  	.db 3
   58 D1:BB6A 6E 2E 20 01 	.db 110, 46, 32, 1
   59 D1:BB6E CD 30 32 0A 	.db 205, 48, 50, 10
   60 D1:BB72 AF 30 64 0B 	.db 175, 48, 100, 11
   61 D1:BB76 -  -  -  -  
   62 D1:BB76 -  -  -  -  FG_Data_9:
   63 D1:BB76 71 BF D1 -  	.dl Sprite_Table_0
   64 D1:BB79 01 -  -  -  	.db 1
   65 D1:BB7A 93 30 53 0A 	.db 147, 48, 83, 10
   66 D1:BB7E -  -  -  -  
   67 D1:BB7E -  -  -  -  FG_Data_8:
   68 D1:BB7E 71 BF D1 -  	.dl Sprite_Table_0
   69 D1:BB81 01 -  -  -  	.db 1
   70 D1:BB82 92 30 28 0A 	.db 146, 48, 40, 10
   71 D1:BB86 -  -  -  -  
   72 D1:BB86 -  -  -  -  FG_Data_7:
   73 D1:BB86 71 BF D1 -  	.dl Sprite_Table_0
   74 D1:BB89 04 -  -  -  	.db 4
   75 D1:BB8A 59 0F 44 08 	.db 89, 15, 68, 8
   76 D1:BB8E 30 0F 6C 09 	.db 48, 15, 108, 9
   77 D1:BB92 9E 0F 2A 09 	.db 158, 15, 42, 9
   78 D1:BB96 A6 0F 60 09 	.db 166, 15, 96, 9
   79 D1:BB9A -  -  -  -  
   80 D1:BB9A -  -  -  -  FG_Data_6:
   81 D1:BB9A 71 BF D1 -  	.dl Sprite_Table_0
   82 D1:BB9D 03 -  -  -  	.db 3
   83 D1:BB9E 5E 0F 14 08 	.db 94, 15, 20, 8
   84 D1:BBA2 93 0F 39 09 	.db 147, 15, 57, 9
   85 D1:BBA6 6C 2E 6B 01 	.db 108, 46, 107, 1
   86 D1:BBAA -  -  -  -  
   87 D1:BBAA -  -  -  -  FG_Data_5:
   88 D1:BBAA 71 BF D1 -  	.dl Sprite_Table_0
   89 D1:BBAD 01 -  -  -  	.db 1
   90 D1:BBAE 57 2E 28 01 	.db 87, 46, 40, 1
   91 D1:BBB2 -  -  -  -  
   92 D1:BBB2 -  -  -  -  FG_Data_4:
   93 D1:BBB2 71 BF D1 -  	.dl Sprite_Table_0
   94 D1:BBB5 02 -  -  -  	.db 2
   95 D1:BBB6 54 2E 1A 07 	.db 84, 46, 26, 7
   96 D1:BBBA A7 2E 3A 01 	.db 167, 46, 58, 1
   97 D1:BBBE -  -  -  -  
   98 D1:BBBE -  -  -  -  FG_Data_3:
   99 D1:BBBE 71 BF D1 -  	.dl Sprite_Table_0
  100 D1:BBC1 08 -  -  -  	.db 8
  101 D1:BBC2 A4 18 43 05 	.db 164, 24, 67, 5
  102 D1:BBC6 95 18 78 05 	.db 149, 24, 120, 5
  103 D1:BBCA D7 18 6C 05 	.db 215, 24, 108, 5
  104 D1:BBCE 4E 18 6E 05 	.db 78, 24, 110, 5
  105 D1:BBD2 56 18 50 05 	.db 86, 24, 80, 5
  106 D1:BBD6 C2 18 19 06 	.db 194, 24, 25, 6
  107 D1:BBDA 82 18 17 05 	.db 130, 24, 23, 5
  108 D1:BBDE 99 18 3D 05 	.db 153, 24, 61, 5
  109 D1:BBE2 -  -  -  -  
  110 D1:BBE2 -  -  -  -  FG_Data_2:
  111 D1:BBE2 71 BF D1 -  	.dl Sprite_Table_0
  112 D1:BBE5 04 -  -  -  	.db 4
  113 D1:BBE6 9D 2E 88 04 	.db 157, 46, 136, 4
  114 D1:BBEA 79 2E 00 04 	.db 121, 46, 0, 4
  115 D1:BBEE D2 2E 4B 04 	.db 210, 46, 75, 4
  116 D1:BBF2 AC 2E 00 01 	.db 172, 46, 0, 1
  117 D1:BBF6 -  -  -  -  
  118 D1:BBF6 -  -  -  -  FG_Data_1:
  119 D1:BBF6 71 BF D1 -  	.dl Sprite_Table_0
  120 D1:BBF9 06 -  -  -  	.db 6
  121 D1:BBFA 3F 18 58 02 	.db 63, 24, 88, 2
  122 D1:BBFE 73 2E 00 03 	.db 115, 46, 0, 3
  123 D1:BC02 A6 2E 89 03 	.db 166, 46, 137, 3
  124 D1:BC06 51 18 75 00 	.db 81, 24, 117, 0
  125 D1:BC0A 6C 18 42 00 	.db 108, 24, 66, 0
  126 D1:BC0E D3 2E 37 03 	.db 211, 46, 55, 3
  127 D1:BC12 -  -  -  -  
  128 D1:BC12 -  -  -  -  FG_Data_0:
  129 D1:BC12 71 BF D1 -  	.dl Sprite_Table_0
  130 D1:BC15 06 -  -  -  	.db 6
  131 D1:BC16 5F 18 0C 00 	.db 95, 24, 12, 0
  132 D1:BC1A 85 2E 30 01 	.db 133, 46, 48, 1
  133 D1:BC1E 98 18 16 00 	.db 152, 24, 22, 0
  134 D1:BC22 CF 2E 58 01 	.db 207, 46, 88, 1
  135 D1:BC26 77 18 71 02 	.db 119, 24, 113, 2
  136 D1:BC2A D9 2E 2B 01 	.db 217, 46, 43, 1
  137 D1:BC2E -  -  -  -  
  138 D1:BC2E -  -  -  -  
  139 D1:BC2E -  -  -  -  
Listing for file "ascent.asm"
  508 D1:BC2E -  -  -  -  #include "generated/DecompressCalls.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\DecompressCalls.txt"
    1 D1:BC2E -  -  -  -  decompress_calls_table_up:
    2 D1:BC2E 36 BD D1 -  	.dl decompress_frame_up_0
    3 D1:BC31 92 BD D1 -  	.dl decompress_frame_up_1
    4 D1:BC34 9A BD D1 -  	.dl decompress_frame_up_2
    5 D1:BC37 9B BD D1 -  	.dl decompress_frame_up_3
    6 D1:BC3A AA BD D1 -  	.dl decompress_frame_up_4
    7 D1:BC3D B2 BD D1 -  	.dl decompress_frame_up_5
    8 D1:BC40 BA BD D1 -  	.dl decompress_frame_up_6
    9 D1:BC43 BB BD D1 -  	.dl decompress_frame_up_7
   10 D1:BC46 C3 BD D1 -  	.dl decompress_frame_up_8
   11 D1:BC49 C4 BD D1 -  	.dl decompress_frame_up_9
   12 D1:BC4C C5 BD D1 -  	.dl decompress_frame_up_10
   13 D1:BC4F CD BD D1 -  	.dl decompress_frame_up_11
   14 D1:BC52 DC BD D1 -  	.dl decompress_frame_up_12
   15 D1:BC55 EB BD D1 -  	.dl decompress_frame_up_13
   16 D1:BC58 EC BD D1 -  	.dl decompress_frame_up_14
   17 D1:BC5B ED BD D1 -  	.dl decompress_frame_up_15
   18 D1:BC5E EE BD D1 -  	.dl decompress_frame_up_16
   19 D1:BC61 FD BD D1 -  	.dl decompress_frame_up_17
   20 D1:BC64 FE BD D1 -  	.dl decompress_frame_up_18
   21 D1:BC67 FF BD D1 -  	.dl decompress_frame_up_19
   22 D1:BC6A 00 BE D1 -  	.dl decompress_frame_up_20
   23 D1:BC6D 01 BE D1 -  	.dl decompress_frame_up_21
   24 D1:BC70 02 BE D1 -  	.dl decompress_frame_up_22
   25 D1:BC73 03 BE D1 -  	.dl decompress_frame_up_23
   26 D1:BC76 04 BE D1 -  	.dl decompress_frame_up_24
   27 D1:BC79 05 BE D1 -  	.dl decompress_frame_up_25
   28 D1:BC7C 06 BE D1 -  	.dl decompress_frame_up_26
   29 D1:BC7F 07 BE D1 -  	.dl decompress_frame_up_27
   30 D1:BC82 08 BE D1 -  	.dl decompress_frame_up_28
   31 D1:BC85 09 BE D1 -  	.dl decompress_frame_up_29
   32 D1:BC88 0A BE D1 -  	.dl decompress_frame_up_30
   33 D1:BC8B 0B BE D1 -  	.dl decompress_frame_up_31
   34 D1:BC8E 0C BE D1 -  	.dl decompress_frame_up_32
   35 D1:BC91 0D BE D1 -  	.dl decompress_frame_up_33
   36 D1:BC94 0E BE D1 -  	.dl decompress_frame_up_34
   37 D1:BC97 0F BE D1 -  	.dl decompress_frame_up_35
   38 D1:BC9A 10 BE D1 -  	.dl decompress_frame_up_36
   39 D1:BC9D 11 BE D1 -  	.dl decompress_frame_up_37
   40 D1:BCA0 12 BE D1 -  	.dl decompress_frame_up_38
   41 D1:BCA3 13 BE D1 -  	.dl decompress_frame_up_39
   42 D1:BCA6 14 BE D1 -  	.dl decompress_frame_up_40
   43 D1:BCA9 15 BE D1 -  	.dl decompress_frame_up_41
   44 D1:BCAC 16 BE D1 -  	.dl decompress_frame_up_42
   45 D1:BCAF 17 BE D1 -  	.dl decompress_frame_up_43
   46 D1:BCB2 -  -  -  -  
   47 D1:BCB2 -  -  -  -  
   48 D1:BCB2 -  -  -  -  decompress_calls_table_down:
   49 D1:BCB2 18 BE D1 -  	.dl decompress_frame_down_0
   50 D1:BCB5 19 BE D1 -  	.dl decompress_frame_down_1
   51 D1:BCB8 1A BE D1 -  	.dl decompress_frame_down_2
   52 D1:BCBB 1B BE D1 -  	.dl decompress_frame_down_3
   53 D1:BCBE 23 BE D1 -  	.dl decompress_frame_down_4
   54 D1:BCC1 2B BE D1 -  	.dl decompress_frame_down_5
   55 D1:BCC4 2C BE D1 -  	.dl decompress_frame_down_6
   56 D1:BCC7 3B BE D1 -  	.dl decompress_frame_down_7
   57 D1:BCCA 3C BE D1 -  	.dl decompress_frame_down_8
   58 D1:BCCD 4B BE D1 -  	.dl decompress_frame_down_9
   59 D1:BCD0 5A BE D1 -  	.dl decompress_frame_down_10
   60 D1:BCD3 5B BE D1 -  	.dl decompress_frame_down_11
   61 D1:BCD6 5C BE D1 -  	.dl decompress_frame_down_12
   62 D1:BCD9 5D BE D1 -  	.dl decompress_frame_down_13
   63 D1:BCDC 65 BE D1 -  	.dl decompress_frame_down_14
   64 D1:BCDF 74 BE D1 -  	.dl decompress_frame_down_15
   65 D1:BCE2 7C BE D1 -  	.dl decompress_frame_down_16
   66 D1:BCE5 7D BE D1 -  	.dl decompress_frame_down_17
   67 D1:BCE8 8C BE D1 -  	.dl decompress_frame_down_18
   68 D1:BCEB 8D BE D1 -  	.dl decompress_frame_down_19
   69 D1:BCEE 8E BE D1 -  	.dl decompress_frame_down_20
   70 D1:BCF1 9D BE D1 -  	.dl decompress_frame_down_21
   71 D1:BCF4 9E BE D1 -  	.dl decompress_frame_down_22
   72 D1:BCF7 9F BE D1 -  	.dl decompress_frame_down_23
   73 D1:BCFA A0 BE D1 -  	.dl decompress_frame_down_24
   74 D1:BCFD C4 BE D1 -  	.dl decompress_frame_down_25
   75 D1:BD00 C5 BE D1 -  	.dl decompress_frame_down_26
   76 D1:BD03 CD BE D1 -  	.dl decompress_frame_down_27
   77 D1:BD06 CE BE D1 -  	.dl decompress_frame_down_28
   78 D1:BD09 DD BE D1 -  	.dl decompress_frame_down_29
   79 D1:BD0C DE BE D1 -  	.dl decompress_frame_down_30
   80 D1:BD0F DF BE D1 -  	.dl decompress_frame_down_31
   81 D1:BD12 E0 BE D1 -  	.dl decompress_frame_down_32
   82 D1:BD15 E1 BE D1 -  	.dl decompress_frame_down_33
   83 D1:BD18 E2 BE D1 -  	.dl decompress_frame_down_34
   84 D1:BD1B E3 BE D1 -  	.dl decompress_frame_down_35
   85 D1:BD1E E4 BE D1 -  	.dl decompress_frame_down_36
   86 D1:BD21 E5 BE D1 -  	.dl decompress_frame_down_37
   87 D1:BD24 E6 BE D1 -  	.dl decompress_frame_down_38
   88 D1:BD27 E7 BE D1 -  	.dl decompress_frame_down_39
   89 D1:BD2A E8 BE D1 -  	.dl decompress_frame_down_40
   90 D1:BD2D E9 BE D1 -  	.dl decompress_frame_down_41
   91 D1:BD30 EA BE D1 -  	.dl decompress_frame_down_42
   92 D1:BD33 EB BE D1 -  	.dl decompress_frame_down_43
   93 D1:BD36 -  -  -  -  
   94 D1:BD36 -  -  -  -  
   95 D1:BD36 -  -  -  -  
   96 D1:BD36 -  -  -  -  decompress_frame_up_0:
   97 D1:BD36 0D -  -  -  	.db 13
   98 D1:BD37 BF BF D1 C1 
              01 D4 -  -  	.dl Banana1, Banana1_Slow_0
   99 D1:BD3D 00 -  -  -  	.db %00000000
  100 D1:BD3E 56 C0 D1 DA 
              02 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_0
  101 D1:BD44 80 -  -  -  	.db %10000000
  102 D1:BD45 BF BF D1 6B 
              05 D4 -  -  	.dl Banana1, Banana1_Slow_O_0
  103 D1:BD4B 40 -  -  -  	.db %01000000
  104 D1:BD4C 56 C0 D1 82 
              06 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_F_0
  105 D1:BD52 A0 -  -  -  	.db %10100000
  106 D1:BD53 56 C0 D1 13 
              09 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_F_0
  107 D1:BD59 60 -  -  -  	.db %01100000
  108 D1:BD5A BF BF D1 2F 
              0C D4 -  -  	.dl Banana1, Banana1_Slow_O_F_0
  109 D1:BD60 60 -  -  -  	.db %01100000
  110 D1:BD61 BF BF D1 47 
              0D D4 -  -  	.dl Banana1, Banana1_Slow_F_0
  111 D1:BD67 20 -  -  -  	.db %00100000
  112 D1:BD68 52 C5 D1 5F 
              0E D4 -  -  	.dl SquiggleL, SquiggleL_Slow_0
  113 D1:BD6E 00 -  -  -  	.db %00000000
  114 D1:BD6F C8 C5 D1 FF 
              0F D4 -  -  	.dl Banana5, Banana5_Slow_0
  115 D1:BD75 00 -  -  -  	.db %00000000
  116 D1:BD76 C8 C5 D1 77 
              11 D4 -  -  	.dl Banana5, Banana5_Slow_O_0
  117 D1:BD7C 40 -  -  -  	.db %01000000
  118 D1:BD7D C8 C5 D1 F5 
              12 D4 -  -  	.dl Banana5, Banana5_Slow_O_F_0
  119 D1:BD83 60 -  -  -  	.db %01100000
  120 D1:BD84 C8 C5 D1 73 
              14 D4 -  -  	.dl Banana5, Banana5_Slow_F_0
  121 D1:BD8A 20 -  -  -  	.db %00100000
  122 D1:BD8B B2 C6 D1 EB 
              15 D4 -  -  	.dl OrangeDot, OrangeDot_Slow_O_0
  123 D1:BD91 40 -  -  -  	.db %01000000
  124 D1:BD92 -  -  -  -  
  125 D1:BD92 -  -  -  -  decompress_frame_up_1:
  126 D1:BD92 01 -  -  -  	.db 1
  127 D1:BD93 56 C0 D1 97 
              16 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_0
  128 D1:BD99 40 -  -  -  	.db %01000000
  129 D1:BD9A -  -  -  -  
  130 D1:BD9A -  -  -  -  decompress_frame_up_2:
  131 D1:BD9A 00 -  -  -  	.db 0
  132 D1:BD9B -  -  -  -  
  133 D1:BD9B -  -  -  -  decompress_frame_up_3:
  134 D1:BD9B 02 -  -  -  	.db 2
  135 D1:BD9C 67 C2 D1 B3 
              19 D4 -  -  	.dl Bluething, Bluething_Slow_O_0
  136 D1:BDA2 40 -  -  -  	.db %01000000
  137 D1:BDA3 67 C2 D1 BF 
              1A D4 -  -  	.dl Bluething, Bluething_Slow_0
  138 D1:BDA9 00 -  -  -  	.db %00000000
  139 D1:BDAA -  -  -  -  
  140 D1:BDAA -  -  -  -  decompress_frame_up_4:
  141 D1:BDAA 01 -  -  -  	.db 1
  142 D1:BDAB B2 C6 D1 83 
              06 D4 -  -  	.dl OrangeDot, OrangeDot_Slow_0
  143 D1:BDB1 00 -  -  -  	.db %00000000
  144 D1:BDB2 -  -  -  -  
  145 D1:BDB2 -  -  -  -  decompress_frame_up_5:
  146 D1:BDB2 01 -  -  -  	.db 1
  147 D1:BDB3 88 C2 D1 B3 
              1B D4 -  -  	.dl Shittlogo, Shittlogo_Slow_O_0
  148 D1:BDB9 40 -  -  -  	.db %01000000
  149 D1:BDBA -  -  -  -  
  150 D1:BDBA -  -  -  -  decompress_frame_up_6:
  151 D1:BDBA 00 -  -  -  	.db 0
  152 D1:BDBB -  -  -  -  
  153 D1:BDBB -  -  -  -  decompress_frame_up_7:
  154 D1:BDBB 01 -  -  -  	.db 1
  155 D1:BDBC 88 C2 D1 CF 
              20 D4 -  -  	.dl Shittlogo, Shittlogo_Slow_0
  156 D1:BDC2 00 -  -  -  	.db %00000000
  157 D1:BDC3 -  -  -  -  
  158 D1:BDC3 -  -  -  -  decompress_frame_up_8:
  159 D1:BDC3 00 -  -  -  	.db 0
  160 D1:BDC4 -  -  -  -  
  161 D1:BDC4 -  -  -  -  decompress_frame_up_9:
  162 D1:BDC4 00 -  -  -  	.db 0
  163 D1:BDC5 -  -  -  -  
  164 D1:BDC5 -  -  -  -  decompress_frame_up_10:
  165 D1:BDC5 01 -  -  -  	.db 1
  166 D1:BDC6 56 C0 D1 2F 
              07 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_1
  167 D1:BDCC 40 -  -  -  	.db %01000000
  168 D1:BDCD -  -  -  -  
  169 D1:BDCD -  -  -  -  decompress_frame_up_11:
  170 D1:BDCD 02 -  -  -  	.db 2
  171 D1:BDCE 67 C2 D1 C1 
              01 D4 -  -  	.dl Bluething, Bluething_Slow_O_1
  172 D1:BDD4 40 -  -  -  	.db %01000000
  173 D1:BDD5 67 C2 D1 6B 
              05 D4 -  -  	.dl Bluething, Bluething_Slow_1
  174 D1:BDDB 00 -  -  -  	.db %00000000
  175 D1:BDDC -  -  -  -  
  176 D1:BDDC -  -  -  -  decompress_frame_up_12:
  177 D1:BDDC 02 -  -  -  	.db 2
  178 D1:BDDD 52 C5 D1 4B 
              0A D4 -  -  	.dl SquiggleL, SquiggleL_Slow_O_F_0
  179 D1:BDE3 60 -  -  -  	.db %01100000
  180 D1:BDE4 52 C5 D1 5F 
              0E D4 -  -  	.dl SquiggleL, SquiggleL_Slow_F_0
  181 D1:BDEA 20 -  -  -  	.db %00100000
  182 D1:BDEB -  -  -  -  
  183 D1:BDEB -  -  -  -  decompress_frame_up_13:
  184 D1:BDEB 00 -  -  -  	.db 0
  185 D1:BDEC -  -  -  -  
  186 D1:BDEC -  -  -  -  decompress_frame_up_14:
  187 D1:BDEC 00 -  -  -  	.db 0
  188 D1:BDED -  -  -  -  
  189 D1:BDED -  -  -  -  decompress_frame_up_15:
  190 D1:BDED 00 -  -  -  	.db 0
  191 D1:BDEE -  -  -  -  
  192 D1:BDEE -  -  -  -  decompress_frame_up_16:
  193 D1:BDEE 02 -  -  -  	.db 2
  194 D1:BDEF 52 C5 D1 CD 
              02 D4 -  -  	.dl SquiggleL, SquiggleL_Slow_1
  195 D1:BDF5 00 -  -  -  	.db %00000000
  196 D1:BDF6 52 C5 D1 2F 
              07 D4 -  -  	.dl SquiggleL, SquiggleL_Slow_O_0
  197 D1:BDFC 40 -  -  -  	.db %01000000
  198 D1:BDFD -  -  -  -  
  199 D1:BDFD -  -  -  -  decompress_frame_up_17:
  200 D1:BDFD 00 -  -  -  	.db 0
  201 D1:BDFE -  -  -  -  
  202 D1:BDFE -  -  -  -  decompress_frame_up_18:
  203 D1:BDFE 00 -  -  -  	.db 0
  204 D1:BDFF -  -  -  -  
  205 D1:BDFF -  -  -  -  decompress_frame_up_19:
  206 D1:BDFF 00 -  -  -  	.db 0
  207 D1:BE00 -  -  -  -  
  208 D1:BE00 -  -  -  -  decompress_frame_up_20:
  209 D1:BE00 00 -  -  -  	.db 0
  210 D1:BE01 -  -  -  -  
  211 D1:BE01 -  -  -  -  decompress_frame_up_21:
  212 D1:BE01 00 -  -  -  	.db 0
  213 D1:BE02 -  -  -  -  
  214 D1:BE02 -  -  -  -  decompress_frame_up_22:
  215 D1:BE02 00 -  -  -  	.db 0
  216 D1:BE03 -  -  -  -  
  217 D1:BE03 -  -  -  -  decompress_frame_up_23:
  218 D1:BE03 00 -  -  -  	.db 0
  219 D1:BE04 -  -  -  -  
  220 D1:BE04 -  -  -  -  decompress_frame_up_24:
  221 D1:BE04 00 -  -  -  	.db 0
  222 D1:BE05 -  -  -  -  
  223 D1:BE05 -  -  -  -  decompress_frame_up_25:
  224 D1:BE05 00 -  -  -  	.db 0
  225 D1:BE06 -  -  -  -  
  226 D1:BE06 -  -  -  -  decompress_frame_up_26:
  227 D1:BE06 00 -  -  -  	.db 0
  228 D1:BE07 -  -  -  -  
  229 D1:BE07 -  -  -  -  decompress_frame_up_27:
  230 D1:BE07 00 -  -  -  	.db 0
  231 D1:BE08 -  -  -  -  
  232 D1:BE08 -  -  -  -  decompress_frame_up_28:
  233 D1:BE08 00 -  -  -  	.db 0
  234 D1:BE09 -  -  -  -  
  235 D1:BE09 -  -  -  -  decompress_frame_up_29:
  236 D1:BE09 00 -  -  -  	.db 0
  237 D1:BE0A -  -  -  -  
  238 D1:BE0A -  -  -  -  decompress_frame_up_30:
  239 D1:BE0A 00 -  -  -  	.db 0
  240 D1:BE0B -  -  -  -  
  241 D1:BE0B -  -  -  -  decompress_frame_up_31:
  242 D1:BE0B 00 -  -  -  	.db 0
  243 D1:BE0C -  -  -  -  
  244 D1:BE0C -  -  -  -  decompress_frame_up_32:
  245 D1:BE0C 00 -  -  -  	.db 0
  246 D1:BE0D -  -  -  -  
  247 D1:BE0D -  -  -  -  decompress_frame_up_33:
  248 D1:BE0D 00 -  -  -  	.db 0
  249 D1:BE0E -  -  -  -  
  250 D1:BE0E -  -  -  -  decompress_frame_up_34:
  251 D1:BE0E 00 -  -  -  	.db 0
  252 D1:BE0F -  -  -  -  
  253 D1:BE0F -  -  -  -  decompress_frame_up_35:
  254 D1:BE0F 00 -  -  -  	.db 0
  255 D1:BE10 -  -  -  -  
  256 D1:BE10 -  -  -  -  decompress_frame_up_36:
  257 D1:BE10 00 -  -  -  	.db 0
  258 D1:BE11 -  -  -  -  
  259 D1:BE11 -  -  -  -  decompress_frame_up_37:
  260 D1:BE11 00 -  -  -  	.db 0
  261 D1:BE12 -  -  -  -  
  262 D1:BE12 -  -  -  -  decompress_frame_up_38:
  263 D1:BE12 00 -  -  -  	.db 0
  264 D1:BE13 -  -  -  -  
  265 D1:BE13 -  -  -  -  decompress_frame_up_39:
  266 D1:BE13 00 -  -  -  	.db 0
  267 D1:BE14 -  -  -  -  
  268 D1:BE14 -  -  -  -  decompress_frame_up_40:
  269 D1:BE14 00 -  -  -  	.db 0
  270 D1:BE15 -  -  -  -  
  271 D1:BE15 -  -  -  -  decompress_frame_up_41:
  272 D1:BE15 00 -  -  -  	.db 0
  273 D1:BE16 -  -  -  -  
  274 D1:BE16 -  -  -  -  decompress_frame_up_42:
  275 D1:BE16 00 -  -  -  	.db 0
  276 D1:BE17 -  -  -  -  
  277 D1:BE17 -  -  -  -  decompress_frame_up_43:
  278 D1:BE17 00 -  -  -  	.db 0
  279 D1:BE18 -  -  -  -  
  280 D1:BE18 -  -  -  -  
  281 D1:BE18 -  -  -  -  
  282 D1:BE18 -  -  -  -  decompress_frame_down_0:
  283 D1:BE18 00 -  -  -  	.db 0
  284 D1:BE19 -  -  -  -  
  285 D1:BE19 -  -  -  -  decompress_frame_down_1:
  286 D1:BE19 00 -  -  -  	.db 0
  287 D1:BE1A -  -  -  -  
  288 D1:BE1A -  -  -  -  decompress_frame_down_2:
  289 D1:BE1A 00 -  -  -  	.db 0
  290 D1:BE1B -  -  -  -  
  291 D1:BE1B -  -  -  -  decompress_frame_down_3:
  292 D1:BE1B 01 -  -  -  	.db 1
  293 D1:BE1C 56 C0 D1 82 
              06 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_F_0
  294 D1:BE22 A0 -  -  -  	.db %10100000
  295 D1:BE23 -  -  -  -  
  296 D1:BE23 -  -  -  -  decompress_frame_down_4:
  297 D1:BE23 01 -  -  -  	.db 1
  298 D1:BE24 56 C0 D1 13 
              09 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_F_0
  299 D1:BE2A 60 -  -  -  	.db %01100000
  300 D1:BE2B -  -  -  -  
  301 D1:BE2B -  -  -  -  decompress_frame_down_5:
  302 D1:BE2B 00 -  -  -  	.db 0
  303 D1:BE2C -  -  -  -  
  304 D1:BE2C -  -  -  -  decompress_frame_down_6:
  305 D1:BE2C 02 -  -  -  	.db 2
  306 D1:BE2D 56 C0 D1 97 
              16 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_0
  307 D1:BE33 40 -  -  -  	.db %01000000
  308 D1:BE34 52 C5 D1 5F 
              0E D4 -  -  	.dl SquiggleL, SquiggleL_Slow_0
  309 D1:BE3A 00 -  -  -  	.db %00000000
  310 D1:BE3B -  -  -  -  
  311 D1:BE3B -  -  -  -  decompress_frame_down_7:
  312 D1:BE3B 00 -  -  -  	.db 0
  313 D1:BE3C -  -  -  -  
  314 D1:BE3C -  -  -  -  decompress_frame_down_8:
  315 D1:BE3C 02 -  -  -  	.db 2
  316 D1:BE3D BF BF D1 C1 
              01 D4 -  -  	.dl Banana1, Banana1_Slow_0
  317 D1:BE43 00 -  -  -  	.db %00000000
  318 D1:BE44 BF BF D1 6B 
              05 D4 -  -  	.dl Banana1, Banana1_Slow_O_0
  319 D1:BE4A 40 -  -  -  	.db %01000000
  320 D1:BE4B -  -  -  -  
  321 D1:BE4B -  -  -  -  decompress_frame_down_9:
  322 D1:BE4B 02 -  -  -  	.db 2
  323 D1:BE4C 67 C2 D1 B3 
              19 D4 -  -  	.dl Bluething, Bluething_Slow_O_0
  324 D1:BE52 40 -  -  -  	.db %01000000
  325 D1:BE53 67 C2 D1 BF 
              1A D4 -  -  	.dl Bluething, Bluething_Slow_0
  326 D1:BE59 00 -  -  -  	.db %00000000
  327 D1:BE5A -  -  -  -  
  328 D1:BE5A -  -  -  -  decompress_frame_down_10:
  329 D1:BE5A 00 -  -  -  	.db 0
  330 D1:BE5B -  -  -  -  
  331 D1:BE5B -  -  -  -  decompress_frame_down_11:
  332 D1:BE5B 00 -  -  -  	.db 0
  333 D1:BE5C -  -  -  -  
  334 D1:BE5C -  -  -  -  decompress_frame_down_12:
  335 D1:BE5C 00 -  -  -  	.db 0
  336 D1:BE5D -  -  -  -  
  337 D1:BE5D -  -  -  -  decompress_frame_down_13:
  338 D1:BE5D 01 -  -  -  	.db 1
  339 D1:BE5E 88 C2 D1 CF 
              20 D4 -  -  	.dl Shittlogo, Shittlogo_Slow_0
  340 D1:BE64 00 -  -  -  	.db %00000000
  341 D1:BE65 -  -  -  -  
  342 D1:BE65 -  -  -  -  decompress_frame_down_14:
  343 D1:BE65 02 -  -  -  	.db 2
  344 D1:BE66 56 C0 D1 DA 
              02 D4 -  -  	.dl Banana1Large, Banana1Large_Fast_0
  345 D1:BE6C 80 -  -  -  	.db %10000000
  346 D1:BE6D 88 C2 D1 B3 
              1B D4 -  -  	.dl Shittlogo, Shittlogo_Slow_O_0
  347 D1:BE73 40 -  -  -  	.db %01000000
  348 D1:BE74 -  -  -  -  
  349 D1:BE74 -  -  -  -  decompress_frame_down_15:
  350 D1:BE74 01 -  -  -  	.db 1
  351 D1:BE75 56 C0 D1 2F 
              07 D4 -  -  	.dl Banana1Large, Banana1Large_Slow_O_1
  352 D1:BE7B 40 -  -  -  	.db %01000000
  353 D1:BE7C -  -  -  -  
  354 D1:BE7C -  -  -  -  decompress_frame_down_16:
  355 D1:BE7C 00 -  -  -  	.db 0
  356 D1:BE7D -  -  -  -  
  357 D1:BE7D -  -  -  -  decompress_frame_down_17:
  358 D1:BE7D 02 -  -  -  	.db 2
  359 D1:BE7E 67 C2 D1 C1 
              01 D4 -  -  	.dl Bluething, Bluething_Slow_O_1
  360 D1:BE84 40 -  -  -  	.db %01000000
  361 D1:BE85 67 C2 D1 6B 
              05 D4 -  -  	.dl Bluething, Bluething_Slow_1
  362 D1:BE8B 00 -  -  -  	.db %00000000
  363 D1:BE8C -  -  -  -  
  364 D1:BE8C -  -  -  -  decompress_frame_down_18:
  365 D1:BE8C 00 -  -  -  	.db 0
  366 D1:BE8D -  -  -  -  
  367 D1:BE8D -  -  -  -  decompress_frame_down_19:
  368 D1:BE8D 00 -  -  -  	.db 0
  369 D1:BE8E -  -  -  -  
  370 D1:BE8E -  -  -  -  decompress_frame_down_20:
  371 D1:BE8E 02 -  -  -  	.db 2
  372 D1:BE8F 52 C5 D1 4B 
              0A D4 -  -  	.dl SquiggleL, SquiggleL_Slow_O_F_0
  373 D1:BE95 60 -  -  -  	.db %01100000
  374 D1:BE96 52 C5 D1 5F 
              0E D4 -  -  	.dl SquiggleL, SquiggleL_Slow_F_0
  375 D1:BE9C 20 -  -  -  	.db %00100000
  376 D1:BE9D -  -  -  -  
  377 D1:BE9D -  -  -  -  decompress_frame_down_21:
  378 D1:BE9D 00 -  -  -  	.db 0
  379 D1:BE9E -  -  -  -  
  380 D1:BE9E -  -  -  -  decompress_frame_down_22:
  381 D1:BE9E 00 -  -  -  	.db 0
  382 D1:BE9F -  -  -  -  
  383 D1:BE9F -  -  -  -  decompress_frame_down_23:
  384 D1:BE9F 00 -  -  -  	.db 0
  385 D1:BEA0 -  -  -  -  
  386 D1:BEA0 -  -  -  -  decompress_frame_down_24:
  387 D1:BEA0 05 -  -  -  	.db 5
  388 D1:BEA1 BF BF D1 2F 
              0C D4 -  -  	.dl Banana1, Banana1_Slow_O_F_0
  389 D1:BEA7 60 -  -  -  	.db %01100000
  390 D1:BEA8 52 C5 D1 CD 
              02 D4 -  -  	.dl SquiggleL, SquiggleL_Slow_1
  391 D1:BEAE 00 -  -  -  	.db %00000000
  392 D1:BEAF 52 C5 D1 2F 
              07 D4 -  -  	.dl SquiggleL, SquiggleL_Slow_O_0
  393 D1:BEB5 40 -  -  -  	.db %01000000
  394 D1:BEB6 C8 C5 D1 F5 
              12 D4 -  -  	.dl Banana5, Banana5_Slow_O_F_0
  395 D1:BEBC 60 -  -  -  	.db %01100000
  396 D1:BEBD C8 C5 D1 73 
              14 D4 -  -  	.dl Banana5, Banana5_Slow_F_0
  397 D1:BEC3 20 -  -  -  	.db %00100000
  398 D1:BEC4 -  -  -  -  
  399 D1:BEC4 -  -  -  -  decompress_frame_down_25:
  400 D1:BEC4 00 -  -  -  	.db 0
  401 D1:BEC5 -  -  -  -  
  402 D1:BEC5 -  -  -  -  decompress_frame_down_26:
  403 D1:BEC5 01 -  -  -  	.db 1
  404 D1:BEC6 BF BF D1 47 
              0D D4 -  -  	.dl Banana1, Banana1_Slow_F_0
  405 D1:BECC 20 -  -  -  	.db %00100000
  406 D1:BECD -  -  -  -  
  407 D1:BECD -  -  -  -  decompress_frame_down_27:
  408 D1:BECD 00 -  -  -  	.db 0
  409 D1:BECE -  -  -  -  
  410 D1:BECE -  -  -  -  decompress_frame_down_28:
  411 D1:BECE 02 -  -  -  	.db 2
  412 D1:BECF B2 C6 D1 EB 
              15 D4 -  -  	.dl OrangeDot, OrangeDot_Slow_O_0
  413 D1:BED5 40 -  -  -  	.db %01000000
  414 D1:BED6 B2 C6 D1 83 
              06 D4 -  -  	.dl OrangeDot, OrangeDot_Slow_0
  415 D1:BEDC 00 -  -  -  	.db %00000000
  416 D1:BEDD -  -  -  -  
  417 D1:BEDD -  -  -  -  decompress_frame_down_29:
  418 D1:BEDD 00 -  -  -  	.db 0
  419 D1:BEDE -  -  -  -  
  420 D1:BEDE -  -  -  -  decompress_frame_down_30:
  421 D1:BEDE 00 -  -  -  	.db 0
  422 D1:BEDF -  -  -  -  
  423 D1:BEDF -  -  -  -  decompress_frame_down_31:
  424 D1:BEDF 00 -  -  -  	.db 0
  425 D1:BEE0 -  -  -  -  
  426 D1:BEE0 -  -  -  -  decompress_frame_down_32:
  427 D1:BEE0 00 -  -  -  	.db 0
  428 D1:BEE1 -  -  -  -  
  429 D1:BEE1 -  -  -  -  decompress_frame_down_33:
  430 D1:BEE1 00 -  -  -  	.db 0
  431 D1:BEE2 -  -  -  -  
  432 D1:BEE2 -  -  -  -  decompress_frame_down_34:
  433 D1:BEE2 00 -  -  -  	.db 0
  434 D1:BEE3 -  -  -  -  
  435 D1:BEE3 -  -  -  -  decompress_frame_down_35:
  436 D1:BEE3 00 -  -  -  	.db 0
  437 D1:BEE4 -  -  -  -  
  438 D1:BEE4 -  -  -  -  decompress_frame_down_36:
  439 D1:BEE4 00 -  -  -  	.db 0
  440 D1:BEE5 -  -  -  -  
  441 D1:BEE5 -  -  -  -  decompress_frame_down_37:
  442 D1:BEE5 00 -  -  -  	.db 0
  443 D1:BEE6 -  -  -  -  
  444 D1:BEE6 -  -  -  -  decompress_frame_down_38:
  445 D1:BEE6 00 -  -  -  	.db 0
  446 D1:BEE7 -  -  -  -  
  447 D1:BEE7 -  -  -  -  decompress_frame_down_39:
  448 D1:BEE7 00 -  -  -  	.db 0
  449 D1:BEE8 -  -  -  -  
  450 D1:BEE8 -  -  -  -  decompress_frame_down_40:
  451 D1:BEE8 00 -  -  -  	.db 0
  452 D1:BEE9 -  -  -  -  
  453 D1:BEE9 -  -  -  -  decompress_frame_down_41:
  454 D1:BEE9 00 -  -  -  	.db 0
  455 D1:BEEA -  -  -  -  
  456 D1:BEEA -  -  -  -  decompress_frame_down_42:
  457 D1:BEEA 00 -  -  -  	.db 0
  458 D1:BEEB -  -  -  -  
  459 D1:BEEB -  -  -  -  decompress_frame_down_43:
  460 D1:BEEB 00 -  -  -  	.db 0
Listing for file "ascent.asm"
  509 D1:BEEC -  -  -  -  #include "generated/Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Palette_Setup.txt"
    1 D1:BEEC -  -  -  -  setup_palette_1:
    2 D1:BEEC 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:BEF0 3E 65 -  -  	ld a,%01100101
    4 D1:BEF2 77 -  -  -  	ld (hl),a 
    5 D1:BEF3 23 -  -  -  	inc hl
    6 D1:BEF4 3E 6B -  -  	ld a,%01101011
    7 D1:BEF6 77 -  -  -  	ld (hl),a 
    8 D1:BEF7 23 -  -  -  	inc hl
    9 D1:BEF8 3E 61 -  -  	ld a,%01100001
   10 D1:BEFA 77 -  -  -  	ld (hl),a 
   11 D1:BEFB 23 -  -  -  	inc hl
   12 D1:BEFC 3E 4E -  -  	ld a,%01001110
   13 D1:BEFE 77 -  -  -  	ld (hl),a 
   14 D1:BEFF 23 -  -  -  	inc hl
   15 D1:BF00 3E 80 -  -  	ld a,%10000000
   16 D1:BF02 77 -  -  -  	ld (hl),a 
   17 D1:BF03 23 -  -  -  	inc hl
   18 D1:BF04 3E 10 -  -  	ld a,%00010000
   19 D1:BF06 77 -  -  -  	ld (hl),a 
   20 D1:BF07 23 -  -  -  	inc hl
   21 D1:BF08 3E F9 -  -  	ld a,%11111001
   22 D1:BF0A 77 -  -  -  	ld (hl),a 
   23 D1:BF0B 23 -  -  -  	inc hl
   24 D1:BF0C 3E 0A -  -  	ld a,%00001010
   25 D1:BF0E 77 -  -  -  	ld (hl),a 
   26 D1:BF0F 23 -  -  -  	inc hl
   27 D1:BF10 3E 1F -  -  	ld a,%00011111
   28 D1:BF12 77 -  -  -  	ld (hl),a 
   29 D1:BF13 23 -  -  -  	inc hl
   30 D1:BF14 3E 81 -  -  	ld a,%10000001
   31 D1:BF16 77 -  -  -  	ld (hl),a 
   32 D1:BF17 23 -  -  -  	inc hl
   33 D1:BF18 3E A2 -  -  	ld a,%10100010
   34 D1:BF1A 77 -  -  -  	ld (hl),a 
   35 D1:BF1B 23 -  -  -  	inc hl
   36 D1:BF1C 3E 12 -  -  	ld a,%00010010
   37 D1:BF1E 77 -  -  -  	ld (hl),a 
   38 D1:BF1F 23 -  -  -  	inc hl
   39 D1:BF20 3E 00 -  -  	ld a,%00000000
   40 D1:BF22 77 -  -  -  	ld (hl),a 
   41 D1:BF23 23 -  -  -  	inc hl
   42 D1:BF24 3E 00 -  -  	ld a,%00000000
   43 D1:BF26 77 -  -  -  	ld (hl),a 
   44 D1:BF27 23 -  -  -  	inc hl
   45 D1:BF28 3E F9 -  -  	ld a,%11111001
   46 D1:BF2A 77 -  -  -  	ld (hl),a 
   47 D1:BF2B 23 -  -  -  	inc hl
   48 D1:BF2C 3E 0A -  -  	ld a,%00001010
   49 D1:BF2E 77 -  -  -  	ld (hl),a 
   50 D1:BF2F 23 -  -  -  	inc hl
   51 D1:BF30 3E FF -  -  	ld a,%11111111
   52 D1:BF32 77 -  -  -  	ld (hl),a 
   53 D1:BF33 23 -  -  -  	inc hl
   54 D1:BF34 3E FF -  -  	ld a,%11111111
   55 D1:BF36 77 -  -  -  	ld (hl),a 
   56 D1:BF37 23 -  -  -  	inc hl
   57 D1:BF38 3E 20 -  -  	ld a,%00100000
   58 D1:BF3A 77 -  -  -  	ld (hl),a 
   59 D1:BF3B 23 -  -  -  	inc hl
   60 D1:BF3C 3E 6A -  -  	ld a,%01101010
   61 D1:BF3E 77 -  -  -  	ld (hl),a 
   62 D1:BF3F 23 -  -  -  	inc hl
   63 D1:BF40 3E 1F -  -  	ld a,%00011111
   64 D1:BF42 77 -  -  -  	ld (hl),a 
   65 D1:BF43 23 -  -  -  	inc hl
   66 D1:BF44 3E 81 -  -  	ld a,%10000001
   67 D1:BF46 77 -  -  -  	ld (hl),a 
   68 D1:BF47 23 -  -  -  	inc hl
   69 D1:BF48 3E 1F -  -  	ld a,%00011111
   70 D1:BF4A 77 -  -  -  	ld (hl),a 
   71 D1:BF4B 23 -  -  -  	inc hl
   72 D1:BF4C 3E 81 -  -  	ld a,%10000001
   73 D1:BF4E 77 -  -  -  	ld (hl),a 
   74 D1:BF4F 23 -  -  -  	inc hl
   75 D1:BF50 3E 1F -  -  	ld a,%00011111
   76 D1:BF52 77 -  -  -  	ld (hl),a 
   77 D1:BF53 23 -  -  -  	inc hl
   78 D1:BF54 3E 81 -  -  	ld a,%10000001
   79 D1:BF56 77 -  -  -  	ld (hl),a 
   80 D1:BF57 23 -  -  -  	inc hl
   81 D1:BF58 3E 1F -  -  	ld a,%00011111
   82 D1:BF5A 77 -  -  -  	ld (hl),a 
   83 D1:BF5B 23 -  -  -  	inc hl
   84 D1:BF5C 3E 81 -  -  	ld a,%10000001
   85 D1:BF5E 77 -  -  -  	ld (hl),a 
   86 D1:BF5F 23 -  -  -  	inc hl
   87 D1:BF60 3E C6 -  -  	ld a,%11000110
   88 D1:BF62 77 -  -  -  	ld (hl),a 
   89 D1:BF63 23 -  -  -  	inc hl
   90 D1:BF64 3E 98 -  -  	ld a,%10011000
   91 D1:BF66 77 -  -  -  	ld (hl),a 
   92 D1:BF67 23 -  -  -  	inc hl
   93 D1:BF68 3E 07 -  -  	ld a,%00000111
   94 D1:BF6A 77 -  -  -  	ld (hl),a 
   95 D1:BF6B 23 -  -  -  	inc hl
   96 D1:BF6C 3E 1D -  -  	ld a,%00011101
   97 D1:BF6E 77 -  -  -  	ld (hl),a 
   98 D1:BF6F 23 -  -  -  	inc hl
   99 D1:BF70 C9 -  -  -  	ret 
Listing for file "ascent.asm"
  510 D1:BF71 -  -  -  -  #include "generated/Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Tables.txt"
    1 D1:BF71 -  -  -  -  Sprite_Table_0:
    2 D1:BF71 C1 01 D4 -  	.dl Banana1_Slow_0
    3 D1:BF74 DA 02 D4 -  	.dl Banana1Large_Fast_0
    4 D1:BF77 6B 05 D4 -  	.dl Banana1_Slow_O_0
    5 D1:BF7A 82 06 D4 -  	.dl Banana1Large_Fast_F_0
    6 D1:BF7D 13 09 D4 -  	.dl Banana1Large_Slow_O_F_0
    7 D1:BF80 2F 0C D4 -  	.dl Banana1_Slow_O_F_0
    8 D1:BF83 47 0D D4 -  	.dl Banana1_Slow_F_0
    9 D1:BF86 97 16 D4 -  	.dl Banana1Large_Slow_O_0
   10 D1:BF89 B3 19 D4 -  	.dl Bluething_Slow_O_0
   11 D1:BF8C BF 1A D4 -  	.dl Bluething_Slow_0
   12 D1:BF8F B3 1B D4 -  	.dl Shittlogo_Slow_O_0
   13 D1:BF92 CF 20 D4 -  	.dl Shittlogo_Slow_0
   14 D1:BF95 2F 07 D4 -  	.dl Banana1Large_Slow_O_1
   15 D1:BF98 6B 05 D4 -  	.dl Bluething_Slow_1
   16 D1:BF9B C1 01 D4 -  	.dl Bluething_Slow_O_1
   17 D1:BF9E 5F 0E D4 -  	.dl SquiggleL_Slow_0
   18 D1:BFA1 4B 0A D4 -  	.dl SquiggleL_Slow_O_F_0
   19 D1:BFA4 5F 0E D4 -  	.dl SquiggleL_Slow_F_0
   20 D1:BFA7 2F 07 D4 -  	.dl SquiggleL_Slow_O_0
   21 D1:BFAA CD 02 D4 -  	.dl SquiggleL_Slow_1
   22 D1:BFAD FF 0F D4 -  	.dl Banana5_Slow_0
   23 D1:BFB0 77 11 D4 -  	.dl Banana5_Slow_O_0
   24 D1:BFB3 F5 12 D4 -  	.dl Banana5_Slow_O_F_0
   25 D1:BFB6 73 14 D4 -  	.dl Banana5_Slow_F_0
   26 D1:BFB9 EB 15 D4 -  	.dl OrangeDot_Slow_O_0
   27 D1:BFBC 83 06 D4 -  	.dl OrangeDot_Slow_0
   28 D1:BFBF -  -  -  -  
   29 D1:BFBF -  -  -  -  Sprite_Table_1:
   30 D1:BFBF -  -  -  -  
Listing for file "ascent.asm"
  511 D1:BFBF -  -  -  -  #include "generated/Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Data.txt"
    1 D1:BFBF -  -  -  -  Banana1:
    2 D1:BFBF 20 -  -  -  	.db %00100000
    3 D1:BFC0 18 18 -  -  	.db 24, 24
    4 D1:BFC2 E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:BFCA 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:BFD2 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:BFDA 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:BFE2 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:BFEA FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:BFF2 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:BFFA FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:C002 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:C00A -  -  -  -  
   14 D1:C00A 21 00 -  -  	.db %00100001, %00000000
   15 D1:C00C -  -  -  -  
   16 D1:C00C 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:C014 AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:C01C 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:C024 A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:C02C 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:C034 A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:C03C AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:C044 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:C04C AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:C054 55 40 -  -  	.db %01010101, %01000000
   26 D1:C056 -  -  -  -  
   27 D1:C056 -  -  -  -  
   28 D1:C056 -  -  -  -  Banana1Large:
   29 D1:C056 20 -  -  -  	.db %00100000
   30 D1:C057 2E 2E -  -  	.db 46, 46
   31 D1:C059 FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:C061 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:C069 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:C071 F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:C079 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:C081 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:C089 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:C091 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:C099 FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:C0A1 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:C0A9 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:C0B1 F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:C0B9 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:C0C1 FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:C0C9 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:C0D1 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:C0D9 FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:C0E1 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:C0E9 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:C0F1 FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:C0F9 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:C101 FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:C109 FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:C111 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:C119 FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:C121 FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:C129 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:C131 FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:C139 C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:C141 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:C149 FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:C151 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:C159 FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:C161 C0 -  -  -  	.db %11000000
   65 D1:C162 -  -  -  -  
   66 D1:C162 21 00 -  -  	.db %00100001, %00000000
   67 D1:C164 -  -  -  -  
   68 D1:C164 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:C16C 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:C174 A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:C17C AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:C184 AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:C18C A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:C194 A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:C19C AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:C1A4 AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:C1AC A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:C1B4 AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:C1BC 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:C1C4 AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:C1CC AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:C1D4 A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:C1DC AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:C1E4 AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:C1EC AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:C1F4 AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:C1FC AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:C204 AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:C20C AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:C214 AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:C21C AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:C224 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:C22C 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:C234 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:C23C 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:C244 A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:C24C 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:C254 A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:C25C 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:C264 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:C267 -  -  -  -  
  102 D1:C267 -  -  -  -  
  103 D1:C267 -  -  -  -  Bluething:
  104 D1:C267 08 -  -  -  	.db %00001000
  105 D1:C268 0F 0F -  -  	.db 15, 15
  106 D1:C26A 3F E0 FF E3 
              C1 E7 7D CD 	.db %00111111, %11100000, %11111111, %11100011, %11000001, %11100111, %01111101, %11001101
  107 D1:C272 19 DA 39 B6 
              F3 CD 77 9A 	.db %00011001, %11011010, %00111001, %10110110, %11110011, %11001101, %01110111, %10011010
  108 D1:C27A EE 7A DC F2 
              38 7C 70 FF 	.db %11101110, %01111010, %11011100, %11110010, %00111000, %01111100, %01110000, %11111111
  109 D1:C282 C0 7F 80 78 
              00 -  -  -  	.db %11000000, %01111111, %10000000, %01111000, %00000000
  110 D1:C287 -  -  -  -  
  111 D1:C287 30 -  -  -  	.db %00110000
  112 D1:C288 -  -  -  -  
  113 D1:C288 -  -  -  -  
  114 D1:C288 -  -  -  -  
  115 D1:C288 -  -  -  -  Shittlogo:
  116 D1:C288 20 -  -  -  	.db %00100000
  117 D1:C289 30 30 -  -  	.db 48, 48
  118 D1:C28B 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  119 D1:C293 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  120 D1:C29B 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  121 D1:C2A3 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  122 D1:C2AB FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  123 D1:C2B3 FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  124 D1:C2BB 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  125 D1:C2C3 FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  126 D1:C2CB FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  127 D1:C2D3 F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  128 D1:C2DB FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  129 D1:C2E3 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  130 D1:C2EB 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  131 D1:C2F3 FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  132 D1:C2FB FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  133 D1:C303 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  134 D1:C30B FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  135 D1:C313 FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  136 D1:C31B 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  137 D1:C323 FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  138 D1:C32B FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  139 D1:C333 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  140 D1:C33B FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  141 D1:C343 FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  142 D1:C34B 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  143 D1:C353 FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  144 D1:C35B FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  145 D1:C363 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  146 D1:C36B FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  147 D1:C373 FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  148 D1:C37B 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  149 D1:C383 FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  150 D1:C38B FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  151 D1:C393 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  152 D1:C39B 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  153 D1:C3A3 E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  154 D1:C3AB -  -  -  -  
  155 D1:C3AB 45 60 -  -  	.db %01000101, %01100000
  156 D1:C3AD -  -  -  -  
  157 D1:C3AD 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  158 D1:C3B5 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  159 D1:C3BD 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  160 D1:C3C5 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  161 D1:C3CD 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  162 D1:C3D5 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  163 D1:C3DD 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  164 D1:C3E5 A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  165 D1:C3ED 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  166 D1:C3F5 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  167 D1:C3FD 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  168 D1:C405 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  169 D1:C40D AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  170 D1:C415 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  171 D1:C41D 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  172 D1:C425 AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  173 D1:C42D AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  174 D1:C435 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  175 D1:C43D AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  176 D1:C445 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  177 D1:C44D AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  178 D1:C455 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  179 D1:C45D 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  180 D1:C465 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  181 D1:C46D AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  182 D1:C475 A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  183 D1:C47D 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  184 D1:C485 AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  185 D1:C48D 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  186 D1:C495 AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  187 D1:C49D A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  188 D1:C4A5 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  189 D1:C4AD 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  190 D1:C4B5 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  191 D1:C4BD 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  192 D1:C4C5 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  193 D1:C4CD 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  194 D1:C4D5 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  195 D1:C4DD 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  196 D1:C4E5 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  197 D1:C4ED 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  198 D1:C4F5 A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  199 D1:C4FD AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  200 D1:C505 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  201 D1:C50D 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  202 D1:C515 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  203 D1:C51D 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  204 D1:C525 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  205 D1:C52D 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  206 D1:C535 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  207 D1:C53D 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  208 D1:C545 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  209 D1:C54D 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  210 D1:C552 -  -  -  -  
  211 D1:C552 -  -  -  -  
  212 D1:C552 -  -  -  -  SquiggleL:
  213 D1:C552 08 -  -  -  	.db %00001000
  214 D1:C553 26 18 -  -  	.db 38, 24
  215 D1:C555 00 00 07 FF 
              80 00 00 1F 	.db %00000000, %00000000, %00000111, %11111111, %10000000, %00000000, %00000000, %00011111
  216 D1:C55D FE 00 00 00 
              7F FF C0 00 	.db %11111110, %00000000, %00000000, %00000000, %01111111, %11111111, %11000000, %00000000
  217 D1:C565 01 FF FF 00 
              00 07 FF FC 	.db %00000001, %11111111, %11111111, %00000000, %00000000, %00000111, %11111111, %11111100
  218 D1:C56D 00 00 1F 1F 
              F0 00 00 7C 	.db %00000000, %00000000, %00011111, %00011111, %11110000, %00000000, %00000000, %01111100
  219 D1:C575 7F C1 FC 01 
              F0 1F 07 F0 	.db %01111111, %11000001, %11111100, %00000001, %11110000, %00011111, %00000111, %11110000
  220 D1:C57D 07 C0 7C 1F 
              C0 1F 01 F3 	.db %00000111, %11000000, %01111100, %00011111, %11000000, %00011111, %00000001, %11110011
  221 D1:C585 FF F8 7C 07 
              CF FF E1 F0 	.db %11111111, %11111000, %01111100, %00000111, %11001111, %11111111, %11100001, %11110000
  222 D1:C58D 1F 3F FF FF 
              C0 00 FF FF 	.db %00011111, %00111111, %11111111, %11111111, %11000000, %00000000, %11111111, %11111111
  223 D1:C595 FF 00 0F E0 
              FF F0 00 3F 	.db %11111111, %00000000, %00001111, %11100000, %11111111, %11110000, %00000000, %00111111
  224 D1:C59D 83 FF C0 00 
              FE 0F FF 00 	.db %10000011, %11111111, %11000000, %00000000, %11111110, %00001111, %11111111, %00000000
  225 D1:C5A5 03 F8 0F FC 
              00 0F E0 3F 	.db %00000011, %11111000, %00001111, %11111100, %00000000, %00001111, %11100000, %00111111
  226 D1:C5AD F0 00 3E 00 
              1F C0 00 F8 	.db %11110000, %00000000, %00111110, %00000000, %00011111, %11000000, %00000000, %11111000
  227 D1:C5B5 00 7F 00 03 
              E0 01 FC 00 	.db %00000000, %01111111, %00000000, %00000011, %11100000, %00000001, %11111100, %00000000
  228 D1:C5BD 0F 80 00 00 
              00 3E 00 00 	.db %00001111, %10000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000000
  229 D1:C5C5 00 00 -  -  	.db %00000000, %00000000
  230 D1:C5C7 -  -  -  -  
  231 D1:C5C7 50 -  -  -  	.db %01010000
  232 D1:C5C8 -  -  -  -  
  233 D1:C5C8 -  -  -  -  
  234 D1:C5C8 -  -  -  -  
  235 D1:C5C8 -  -  -  -  Banana5:
  236 D1:C5C8 20 -  -  -  	.db %00100000
  237 D1:C5C9 20 20 -  -  	.db 32, 32
  238 D1:C5CB 00 00 00 3C 
              00 00 00 FC 	.db %00000000, %00000000, %00000000, %00111100, %00000000, %00000000, %00000000, %11111100
  239 D1:C5D3 00 00 03 FC 
              00 00 07 FC 	.db %00000000, %00000000, %00000011, %11111100, %00000000, %00000000, %00000111, %11111100
  240 D1:C5DB 00 00 0F FC 
              00 00 3F FC 	.db %00000000, %00000000, %00001111, %11111100, %00000000, %00000000, %00111111, %11111100
  241 D1:C5E3 00 00 7F FC 
              00 00 FF F8 	.db %00000000, %00000000, %01111111, %11111100, %00000000, %00000000, %11111111, %11111000
  242 D1:C5EB 00 03 FF F0 
              00 07 FF F0 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000111, %11111111, %11110000
  243 D1:C5F3 00 1F FF E0 
              00 3F FF E0 	.db %00000000, %00011111, %11111111, %11100000, %00000000, %00111111, %11111111, %11100000
  244 D1:C5FB 00 7F FF C0 
              01 FF FF 80 	.db %00000000, %01111111, %11111111, %11000000, %00000001, %11111111, %11111111, %10000000
  245 D1:C603 01 FF FF 00 
              03 FF FE 00 	.db %00000001, %11111111, %11111111, %00000000, %00000011, %11111111, %11111110, %00000000
  246 D1:C60B 07 FF FE 00 
              0F FF FC 00 	.db %00000111, %11111111, %11111110, %00000000, %00001111, %11111111, %11111100, %00000000
  247 D1:C613 1F FF F8 00 
              1F FF F0 00 	.db %00011111, %11111111, %11111000, %00000000, %00011111, %11111111, %11110000, %00000000
  248 D1:C61B 3F FF C0 00 
              3F FF 80 00 	.db %00111111, %11111111, %11000000, %00000000, %00111111, %11111111, %10000000, %00000000
  249 D1:C623 7F FF 00 00 
              7F FC 00 00 	.db %01111111, %11111111, %00000000, %00000000, %01111111, %11111100, %00000000, %00000000
  250 D1:C62B FF F8 00 00 
              FF E0 00 00 	.db %11111111, %11111000, %00000000, %00000000, %11111111, %11100000, %00000000, %00000000
  251 D1:C633 FF C0 00 00 
              FF 80 00 00 	.db %11111111, %11000000, %00000000, %00000000, %11111111, %10000000, %00000000, %00000000
  252 D1:C63B FF 00 00 00 
              FC 00 00 00 	.db %11111111, %00000000, %00000000, %00000000, %11111100, %00000000, %00000000, %00000000
  253 D1:C643 F8 00 00 00 
              F8 00 00 00 	.db %11111000, %00000000, %00000000, %00000000, %11111000, %00000000, %00000000, %00000000
  254 D1:C64B -  -  -  -  
  255 D1:C64B 21 00 -  -  	.db %00100001, %00000000
  256 D1:C64D -  -  -  -  
  257 D1:C64D 00 50 05 A0 
              05 A8 01 6A 	.db %00000000, %01010000, %00000101, %10100000, %00000101, %10101000, %00000001, %01101010
  258 D1:C655 6A 55 A9 AA 
              56 A9 AA 55 	.db %01101010, %01010101, %10101001, %10101010, %01010110, %10101001, %10101010, %01010101
  259 D1:C65D AA 66 A5 5A 
              A6 6A 56 AA 	.db %10101010, %01100110, %10100101, %01011010, %10100110, %01101010, %01010110, %10101010
  260 D1:C665 66 A5 5A AA 
              A6 A9 5A AA 	.db %01100110, %10100101, %01011010, %10101010, %10100110, %10101001, %01011010, %10101010
  261 D1:C66D 66 A9 56 AA 
              99 9A 55 6A 	.db %01100110, %10101001, %01010110, %10101010, %10011001, %10011010, %01010101, %01101010
  262 D1:C675 AA 99 A9 6A 
              AA AA 6A 5A 	.db %10101010, %10011001, %10101001, %01101010, %10101010, %10101010, %01101010, %01011010
  263 D1:C67D AA AA 9A 96 
              AA AA A6 65 	.db %10101010, %10101010, %10011010, %10010110, %10101010, %10101010, %10100110, %01100101
  264 D1:C685 6A AA AA 66 
              55 AA AA A6 	.db %01101010, %10101010, %10101010, %01100110, %01010101, %10101010, %10101010, %10100110
  265 D1:C68D 65 6A AA A9 
              99 56 AA A6 	.db %01100101, %01101010, %10101010, %10101001, %10011001, %01010110, %10101010, %10100110
  266 D1:C695 66 5A AA 99 
              95 5A A6 66 	.db %01100110, %01011010, %10101010, %10011001, %10010101, %01011010, %10100110, %01100110
  267 D1:C69D 95 AA 66 A5 
              6A 99 A5 5A 	.db %10010101, %10101010, %01100110, %10100101, %01101010, %10011001, %10100101, %01011010
  268 D1:C6A5 99 A5 59 9A 
              56 66 55 02 	.db %10011001, %10100101, %01011001, %10011010, %01010110, %01100110, %01010101, %00000010
  269 D1:C6AD 55 00 60 04 
              00 -  -  -  	.db %01010101, %00000000, %01100000, %00000100, %00000000
  270 D1:C6B2 -  -  -  -  
  271 D1:C6B2 -  -  -  -  
  272 D1:C6B2 -  -  -  -  OrangeDot:
  273 D1:C6B2 08 -  -  -  	.db %00001000
  274 D1:C6B3 0F 0F -  -  	.db 15, 15
  275 D1:C6B5 03 C0 0F C0 
              7F E1 FF E7 	.db %00000011, %11000000, %00001111, %11000000, %01111111, %11100001, %11111111, %11100111
  276 D1:C6BD FF DF FF FF 
              FF FF FF FF 	.db %11111111, %11011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  277 D1:C6C5 FF FF FF FF 
              FB FF E3 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111011, %11111111, %11100011, %11111111
  278 D1:C6CD C3 FF 01 F8 
              00 -  -  -  	.db %11000011, %11111111, %00000001, %11111000, %00000000
  279 D1:C6D2 -  -  -  -  
  280 D1:C6D2 90 -  -  -  	.db %10010000
  281 D1:C6D3 -  -  -  -  
  282 D1:C6D3 -  -  -  -  
  283 D1:C6D3 -  -  -  -  
Listing for file "ascent.asm"
  512 D1:C6D3 -  -  -  -  #include "generated/SpriteEquates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\SpriteEquates.txt"
    1 D1:C6D3 -  -  -  -  Banana1_Slow_0 .equ 13894081 ; vRam + 1 - 281
    2 D1:C6D3 -  -  -  -  Banana1Large_Fast_0 .equ 13894362 ; vRam + 282 - 939
    3 D1:C6D3 -  -  -  -  Banana1_Slow_O_0 .equ 13895019 ; vRam + 939 - 1218
    4 D1:C6D3 -  -  -  -  Banana1Large_Fast_F_0 .equ 13895298 ; vRam + 1218 - 1875
    5 D1:C6D3 -  -  -  -  Banana1Large_Slow_O_F_0 .equ 13895955 ; vRam + 1875 - 2670
    6 D1:C6D3 -  -  -  -  Banana1_Slow_O_F_0 .equ 13896751 ; vRam + 2671 - 2950
    7 D1:C6D3 -  -  -  -  Banana1_Slow_F_0 .equ 13897031 ; vRam + 2951 - 3231
    8 D1:C6D3 -  -  -  -  SquiggleL_Slow_0 .equ 13897311 ; vRam + 3231 - 3646
    9 D1:C6D3 -  -  -  -  Banana5_Slow_0 .equ 13897727 ; vRam + 3647 - 4022
   10 D1:C6D3 -  -  -  -  Banana5_Slow_O_0 .equ 13898103 ; vRam + 4023 - 4405
   11 D1:C6D3 -  -  -  -  Banana5_Slow_O_F_0 .equ 13898485 ; vRam + 4405 - 4787
   12 D1:C6D3 -  -  -  -  Banana5_Slow_F_0 .equ 13898867 ; vRam + 4787 - 5162
   13 D1:C6D3 -  -  -  -  OrangeDot_Slow_O_0 .equ 13899243 ; vRam + 5163 - 5334
   14 D1:C6D3 -  -  -  -  Banana1Large_Slow_O_0 .equ 13899415 ; vRam + 5335 - 6130
   15 D1:C6D3 -  -  -  -  Bluething_Slow_O_0 .equ 13900211 ; vRam + 6131 - 6398
   16 D1:C6D3 -  -  -  -  Bluething_Slow_0 .equ 13900479 ; vRam + 6399 - 6643
   17 D1:C6D3 -  -  -  -  OrangeDot_Slow_0 .equ 13895299 ; vRam + 1219 - 1391
   18 D1:C6D3 -  -  -  -  Shittlogo_Slow_O_0 .equ 13900723 ; vRam + 6643 - 7951
   19 D1:C6D3 -  -  -  -  Shittlogo_Slow_0 .equ 13902031 ; vRam + 7951 - 9278
   20 D1:C6D3 -  -  -  -  Banana1Large_Slow_O_1 .equ 13895471 ; vRam + 1391 - 2186
   21 D1:C6D3 -  -  -  -  Bluething_Slow_O_1 .equ 13894081 ; vRam + 1 - 268
   22 D1:C6D3 -  -  -  -  Bluething_Slow_1 .equ 13895019 ; vRam + 939 - 1183
   23 D1:C6D3 -  -  -  -  SquiggleL_Slow_O_F_0 .equ 13896267 ; vRam + 2187 - 2607
   24 D1:C6D3 -  -  -  -  SquiggleL_Slow_F_0 .equ 13897311 ; vRam + 3231 - 3646
   25 D1:C6D3 -  -  -  -  SquiggleL_Slow_1 .equ 13894349 ; vRam + 269 - 684
   26 D1:C6D3 -  -  -  -  SquiggleL_Slow_O_0 .equ 13895471 ; vRam + 1391 - 1811
Listing for file "ascent.asm"
  513 D1:C6D3 -  -  -  -  
  514 D1:C6D3 -  -  -  -  
  515 D1:C6D3 -  -  -  -  ;
  516 D1:C6D3 -  -  -  -  ;#include "TestingSpriteData.txt"
  517 D1:C6D3 -  -  -  -  ;#include "TestGeneratedSpriteData.txt"
  518 D1:C6D3 -  -  -  -  ;#include "Sprite_Data.txt"
  519 D1:C6D3 -  -  -  -  ;#include "FG_Data.txt"
  520 D1:C6D3 -  -  -  -  ;#include "MG_Data.txt"
  521 D1:C6D3 -  -  -  -  ;#include "BG_Data.txt"
  522 D1:C6D3 -  -  -  -  ;#include "Palette_Setup.txt"
  523 D1:C6D3 -  -  -  -  ;#include "Equates.txt"
  524 D1:C6D3 -  -  -  -  ;#include "Decompress_Calls.txt"
  525 D1:C6D3 -  -  -  -  ;#include "Sprite_Tables.txt"
  526 D1:C6D3 -  -  -  -  ;#include "TestingBGData.txt"
  527 D1:C6D3 -  -  -  -  ;#include "TestingFGData.txt"
  528 D1:C6D3 -  -  -  -  
  529 D1:C6D3 -  -  -  -  
