    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD A9 BE D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C -  -  -  -  
   26 D1:A89C -  -  -  -  
   27 D1:A89C -  -  -  -  
   28 D1:A89C -  -  -  -  	;call sdcomp_set_fast
   29 D1:A89C -  -  -  -  	;call sdcomp_set_flip
   30 D1:A89C -  -  -  -  	;call sdcomp_reset_offset
   31 D1:A89C -  -  -  -  	;ld hl, Tree_5 
   32 D1:A89C -  -  -  -  	;ld de, Tree_5_Fast_F_0
   33 D1:A89C -  -  -  -  	;call sdcomp_set_2bpc
   34 D1:A89C -  -  -  -  	;call sprite_decompress
   35 D1:A89C -  -  -  -  	
   36 D1:A89C -  -  -  -  	;call sdcomp_set_fast
   37 D1:A89C -  -  -  -  	;call sdcomp_reset_flip
   38 D1:A89C -  -  -  -  	;call sdcomp_reset_offset
   39 D1:A89C -  -  -  -  	;ld hl, Moss_0 
   40 D1:A89C -  -  -  -  	;ld de, Moss_0_Fast_0
   41 D1:A89C -  -  -  -  	;call sprite_decompress
   42 D1:A89C -  -  -  -  	
   43 D1:A89C -  -  -  -  	;call prgmpause
   44 D1:A89C -  -  -  -  	;call prgmpause
   45 D1:A89C -  -  -  -  
   46 D1:A89C CD 7A B8 D1 	call setup_decompress_queue
   47 D1:A8A0 -  -  -  -  	
   48 D1:A8A0 -  -  -  -  	
   49 D1:A8A0 -  -  -  -  	;call draw_fg
   50 D1:A8A0 -  -  -  -  	
   51 D1:A8A0 3E 00 -  -  	ld a,0
   52 D1:A8A2 CD 60 B9 D1 	call cfdc_cam_move_up ;need to skip here for frame 0
   53 D1:A8A6 -  -  -  -  	
   54 D1:A8A6 -  -  -  -  	;call prgmpause
   55 D1:A8A6 -  -  -  -  
   56 D1:A8A6 CD B5 B8 D1 	call continue_decompressions
   57 D1:A8AA -  -  -  -  	
   58 D1:A8AA -  -  -  -  	
   59 D1:A8AA -  -  -  -  ;	call decompress_calls
   60 D1:A8AA -  -  -  -  	
   61 D1:A8AA -  -  -  -  
   62 D1:A8AA -  -  -  -  	
   63 D1:A8AA -  -  -  -  	;gen purp timers
   64 D1:A8AA -  -  -  -  		; 76543210	
   65 D1:A8AA 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   66 D1:A8AC 32 30 00 F2 	ld ($F20030),a
   67 D1:A8B0 -  -  -  -  	;	  fedcba98
   68 D1:A8B0 3E 02 -  -  	ld a,%00000010;count up
   69 D1:A8B2 32 31 00 F2 	ld ($F20031),a
   70 D1:A8B6 -  -  -  -  	
   71 D1:A8B6 21 00 2C D5 	ld hl,vRam + (160*240*2)
   72 D1:A8BA 22 BB AB D1 	ld (draw_buffer),hl
   73 D1:A8BE 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   74 D1:A8C2 22 10 00 E3 	ld (mpLcdBase),hl
   75 D1:A8C6 -  -  -  -  	
   76 D1:A8C6 -  -  -  -  
   77 D1:A8C6 -  -  -  -  	
   78 D1:A8C6 21 56 00 00 	ld hl,86
   79 D1:A8CA 22 B5 AB D1 	ld (cam_pos),hl
   80 D1:A8CE -  -  -  -  
   81 D1:A8CE -  -  -  -  
   82 D1:A8CE -  -  -  -  	;call draw_mg
   83 D1:A8CE -  -  -  -  
   84 D1:A8CE CD 0A AD D1 	call setup_bg ;after initial decompressions and cam setup
   85 D1:A8D2 -  -  -  -  	
   86 D1:A8D2 -  -  -  -  main_loop:
   87 D1:A8D2 -  -  -  -  
   88 D1:A8D2 -  -  -  -  	
   89 D1:A8D2 -  -  -  -  
   90 D1:A8D2 -  -  -  -  	;clear timer
   91 D1:A8D2 3E 00 -  -  	ld a,0
   92 D1:A8D4 32 00 00 F2 	ld ($F20000),a;32768hz
   93 D1:A8D8 32 01 00 F2 	ld ($F20001),a;128hz
   94 D1:A8DC 32 02 00 F2 	ld ($F20002),a;0.5hz
   95 D1:A8E0 32 03 00 F2 	ld ($F20003),a
   96 D1:A8E4 -  -  -  -  	
   97 D1:A8E4 -  -  -  -  	;Instructions here 
   98 D1:A8E4 -  -  -  -  	
   99 D1:A8E4 -  -  -  -  	
  100 D1:A8E4 -  -  -  -  	;call input_cam_up
  101 D1:A8E4 CD 8E B9 D1 	call get_inputs
  102 D1:A8E8 -  -  -  -  	
  103 D1:A8E8 CD 52 AC D1 	call move_bg
  104 D1:A8EC -  -  -  -  
  105 D1:A8EC -  -  -  -  
  106 D1:A8EC -  -  -  -  	; TESTING move bg time
  107 D1:A8EC 21 00 00 00 	ld hl,0
  108 D1:A8F0 3A 00 00 F2 	ld a,($F20000);32768hz
  109 D1:A8F4 6F -  -  -  	ld l,a
  110 D1:A8F5 3A 01 00 F2 	ld a,($F20001);128hz 
  111 D1:A8F9 67 -  -  -  	ld h,a
  112 D1:A8FA CB 3C -  -  	srl h ;div by 8
  113 D1:A8FC CB 1D -  -  	rr l 
  114 D1:A8FE CB 3C -  -  	srl h
  115 D1:A900 CB 1D -  -  	rr l 
  116 D1:A902 CB 3C -  -  	srl h
  117 D1:A904 CB 1D -  -  	rr l 
  118 D1:A906 7D -  -  -  	ld a,l
  119 D1:A907 3C -  -  -  	inc a ;Cant have time be 1, BC must be >1 for _MemSet
  120 D1:A908 3C -  -  -  	inc a
  121 D1:A909 3C -  -  -  	inc a
  122 D1:A90A 32 C1 AB D1 	ld (move_bg_time),a
  123 D1:A90E -  -  -  -  
  124 D1:A90E -  -  -  -  	
  125 D1:A90E -  -  -  -  	
  126 D1:A90E CD 1E AC D1 	call draw_bg
  127 D1:A912 -  -  -  -  
  128 D1:A912 -  -  -  -  	
  129 D1:A912 -  -  -  -  	
  130 D1:A912 -  -  -  -  	;TEsting
  131 D1:A912 21 00 00 00 	ld hl,0
  132 D1:A916 3A 00 00 F2 	ld a,($F20000);32768hz
  133 D1:A91A 6F -  -  -  	ld l,a
  134 D1:A91B 3A 01 00 F2 	ld a,($F20001);128hz 
  135 D1:A91F 67 -  -  -  	ld h,a
  136 D1:A920 CB 3C -  -  	srl h ;div by 8
  137 D1:A922 CB 1D -  -  	rr l 
  138 D1:A924 CB 3C -  -  	srl h
  139 D1:A926 CB 1D -  -  	rr l 
  140 D1:A928 CB 3C -  -  	srl h
  141 D1:A92A CB 1D -  -  	rr l 
  142 D1:A92C 7D -  -  -  	ld a,l
  143 D1:A92D 32 C2 AB D1 	ld (draw_bg_time),a
  144 D1:A931 -  -  -  -  	
  145 D1:A931 -  -  -  -  	;TEST CLEAR BUFFER
  146 D1:A931 -  -  -  -  	;ld hl,BG_buffer
  147 D1:A931 -  -  -  -  	;ld de,(draw_buffer)
  148 D1:A931 -  -  -  -  	;ld bc, 160*240
  149 D1:A931 -  -  -  -  	;ldir
  150 D1:A931 -  -  -  -  	
  151 D1:A931 CD 08 B5 D1 	call draw_mg
  152 D1:A935 -  -  -  -  	
  153 D1:A935 -  -  -  -  	;TEsting
  154 D1:A935 21 00 00 00 	ld hl,0
  155 D1:A939 3A 00 00 F2 	ld a,($F20000);32768hz
  156 D1:A93D 6F -  -  -  	ld l,a
  157 D1:A93E 3A 01 00 F2 	ld a,($F20001);128hz 
  158 D1:A942 67 -  -  -  	ld h,a
  159 D1:A943 CB 3C -  -  	srl h ;div by 8
  160 D1:A945 CB 1D -  -  	rr l 
  161 D1:A947 CB 3C -  -  	srl h
  162 D1:A949 CB 1D -  -  	rr l 
  163 D1:A94B CB 3C -  -  	srl h
  164 D1:A94D CB 1D -  -  	rr l 
  165 D1:A94F 7D -  -  -  	ld a,l
  166 D1:A950 32 C3 AB D1 	ld (draw_mg_time),a
  167 D1:A954 -  -  -  -  	
  168 D1:A954 -  -  -  -  	;call draw_fg
  169 D1:A954 -  -  -  -  	
  170 D1:A954 -  -  -  -  	
  171 D1:A954 -  -  -  -  	;TEsting
  172 D1:A954 21 00 00 00 	ld hl,0
  173 D1:A958 3A 00 00 F2 	ld a,($F20000);32768hz
  174 D1:A95C 6F -  -  -  	ld l,a
  175 D1:A95D 3A 01 00 F2 	ld a,($F20001);128hz 
  176 D1:A961 67 -  -  -  	ld h,a
  177 D1:A962 CB 3C -  -  	srl h ;div by 8
  178 D1:A964 CB 1D -  -  	rr l 
  179 D1:A966 CB 3C -  -  	srl h
  180 D1:A968 CB 1D -  -  	rr l 
  181 D1:A96A CB 3C -  -  	srl h
  182 D1:A96C CB 1D -  -  	rr l 
  183 D1:A96E 7D -  -  -  	ld a,l
  184 D1:A96F 32 C4 AB D1 	ld (draw_fg_time),a
  185 D1:A973 -  -  -  -  	
  186 D1:A973 21 00 00 00 	ld hl,0
  187 D1:A977 -  -  -  -  	
  188 D1:A977 -  -  -  -  	; for debug longest frame draw time
  189 D1:A977 3A 00 00 F2 	ld a,($F20000)
  190 D1:A97B 6F -  -  -  	ld l,a
  191 D1:A97C 3A 01 00 F2 	ld a,($F20001);128hz 
  192 D1:A980 67 -  -  -  	ld h,a
  193 D1:A981 E5 -  -  -  	push hl
  194 D1:A982 ED 4B C6 AB 
              D1 -  -  -  	ld bc,(longestFrame)
  195 D1:A987 ED 42 -  -  	sbc hl,bc 
  196 D1:A989 DA 9B A9 D1 	jp c,longest_frame_skip
  197 D1:A98D -  -  -  -  	
  198 D1:A98D E1 -  -  -  	pop hl 
  199 D1:A98E E5 -  -  -  	push hl 
  200 D1:A98F 22 C6 AB D1 	ld (longestFrame),hl 
  201 D1:A993 2A B5 AB D1 	ld hl,(cam_pos)
  202 D1:A997 22 C9 AB D1 	ld (longestFramePos),hl
  203 D1:A99B -  -  -  -  longest_frame_skip:
  204 D1:A99B E1 -  -  -  	pop hl 
  205 D1:A99C -  -  -  -  	
  206 D1:A99C -  -  -  -  		
  207 D1:A99C 2A CF AB D1 	ld hl,(frameCount)
  208 D1:A9A0 23 -  -  -  	inc hl
  209 D1:A9A1 22 CF AB D1 	ld (frameCount),hl
  210 D1:A9A5 -  -  -  -  	
  211 D1:A9A5 -  -  -  -  
  212 D1:A9A5 -  -  -  -  	
  213 D1:A9A5 -  -  -  -  	;check if lcd has drawn first frame
  214 D1:A9A5 -  -  -  -  
  215 D1:A9A5 CD 45 B9 D1 	call check_for_decompress_calls
  216 D1:A9A9 -  -  -  -  	;Sprite decompression will occur here
  217 D1:A9A9 CD B5 B8 D1 	call continue_decompressions
  218 D1:A9AD -  -  -  -  	
  219 D1:A9AD -  -  -  -  	;TEsting
  220 D1:A9AD 21 00 00 00 	ld hl,0
  221 D1:A9B1 3A 00 00 F2 	ld a,($F20000);32768hz
  222 D1:A9B5 6F -  -  -  	ld l,a
  223 D1:A9B6 3A 01 00 F2 	ld a,($F20001);128hz 
  224 D1:A9BA 67 -  -  -  	ld h,a
  225 D1:A9BB CB 3C -  -  	srl h ;div by 4
  226 D1:A9BD CB 1D -  -  	rr l 
  227 D1:A9BF CB 3C -  -  	srl h
  228 D1:A9C1 CB 1D -  -  	rr l 
  229 D1:A9C3 CB 3C -  -  	srl h
  230 D1:A9C5 CB 1D -  -  	rr l 
  231 D1:A9C7 7D -  -  -  	ld a,l
  232 D1:A9C8 32 C5 AB D1 	ld (decompress_time),a
  233 D1:A9CC -  -  -  -  
  234 D1:A9CC -  -  -  -  
  235 D1:A9CC -  -  -  -  	
  236 D1:A9CC -  -  -  -  
  237 D1:A9CC -  -  -  -  	;Draw time bar at top of screen 
  238 D1:A9CC 2A BB AB D1 	ld hl, (draw_buffer)
  239 D1:A9D0 01 00 00 00 	ld bc,0 
  240 D1:A9D4 3A C5 AB D1 	ld a,(decompress_time)
  241 D1:A9D8 4F -  -  -  	ld c,a 
  242 D1:A9D9 3E 55 -  -  	ld a, $55
  243 D1:A9DB CD E0 10 02 	call _MemSet
  244 D1:A9DF -  -  -  -  	
  245 D1:A9DF 2A BB AB D1 	ld hl, (draw_buffer)
  246 D1:A9E3 01 00 00 00 	ld bc,0 
  247 D1:A9E7 3A C4 AB D1 	ld a,(draw_fg_time)
  248 D1:A9EB 4F -  -  -  	ld c,a 
  249 D1:A9EC 3E 44 -  -  	ld a, $44
  250 D1:A9EE CD E0 10 02 	call _MemSet
  251 D1:A9F2 -  -  -  -  	
  252 D1:A9F2 2A BB AB D1 	ld hl, (draw_buffer)
  253 D1:A9F6 01 00 00 00 	ld bc,0 
  254 D1:A9FA 3A C3 AB D1 	ld a,(draw_mg_time)
  255 D1:A9FE 4F -  -  -  	ld c,a 
  256 D1:A9FF 3E 33 -  -  	ld a, $33
  257 D1:AA01 CD E0 10 02 	call _MemSet
  258 D1:AA05 -  -  -  -  
  259 D1:AA05 2A BB AB D1 	ld hl, (draw_buffer)
  260 D1:AA09 01 00 00 00 	ld bc,0 
  261 D1:AA0D 3A C2 AB D1 	ld a,(draw_bg_time)
  262 D1:AA11 4F -  -  -  	ld c,a 
  263 D1:AA12 3E 22 -  -  	ld a, $22
  264 D1:AA14 CD E0 10 02 	call _MemSet
  265 D1:AA18 -  -  -  -  	
  266 D1:AA18 -  -  -  -  	
  267 D1:AA18 -  -  -  -  	
  268 D1:AA18 2A BB AB D1 	ld hl, (draw_buffer)
  269 D1:AA1C 01 00 00 00 	ld bc,0 
  270 D1:AA20 3A C1 AB D1 	ld a,(move_bg_time)
  271 D1:AA24 4F -  -  -  	ld c,a 
  272 D1:AA25 3E 11 -  -  	ld a, $11
  273 D1:AA27 CD E0 10 02 	call _MemSet
  274 D1:AA2B -  -  -  -  
  275 D1:AA2B -  -  -  -  	
  276 D1:AA2B 2A BB AB D1 	ld hl, (draw_buffer)
  277 D1:AA2F 01 88 00 00 	ld bc, 136  ; =1000/4 /2 for 2pix/bit 
  278 D1:AA33 09 -  -  -  	add hl,bc 
  279 D1:AA34 3E 55 -  -  	ld a,$55
  280 D1:AA36 77 -  -  -  	ld (hl),a 
  281 D1:AA37 -  -  -  -  	
  282 D1:AA37 -  -  -  -  	
  283 D1:AA37 -  -  -  -  	;Again for thick line
  284 D1:AA37 -  -  -  -  	
  285 D1:AA37 2A BB AB D1 	ld hl, (draw_buffer)
  286 D1:AA3B 01 A0 00 00 	ld bc,160
  287 D1:AA3F 09 -  -  -  	add hl,bc 
  288 D1:AA40 3A C5 AB D1 	ld a,(decompress_time)
  289 D1:AA44 4F -  -  -  	ld c,a 
  290 D1:AA45 3E 55 -  -  	ld a, $55
  291 D1:AA47 CD E0 10 02 	call _MemSet
  292 D1:AA4B -  -  -  -  	
  293 D1:AA4B 2A BB AB D1 	ld hl, (draw_buffer)
  294 D1:AA4F 01 A0 00 00 	ld bc,160
  295 D1:AA53 09 -  -  -  	add hl,bc 
  296 D1:AA54 3A C4 AB D1 	ld a,(draw_fg_time)
  297 D1:AA58 4F -  -  -  	ld c,a 
  298 D1:AA59 3E 44 -  -  	ld a, $44
  299 D1:AA5B CD E0 10 02 	call _MemSet
  300 D1:AA5F -  -  -  -  	
  301 D1:AA5F 2A BB AB D1 	ld hl, (draw_buffer)
  302 D1:AA63 01 A0 00 00 	ld bc,160
  303 D1:AA67 09 -  -  -  	add hl,bc
  304 D1:AA68 3A C3 AB D1 	ld a,(draw_mg_time)
  305 D1:AA6C 4F -  -  -  	ld c,a 
  306 D1:AA6D 3E 33 -  -  	ld a, $33
  307 D1:AA6F CD E0 10 02 	call _MemSet
  308 D1:AA73 -  -  -  -  
  309 D1:AA73 2A BB AB D1 	ld hl, (draw_buffer)
  310 D1:AA77 01 A0 00 00 	ld bc,160
  311 D1:AA7B 09 -  -  -  	add hl,bc
  312 D1:AA7C 3A C2 AB D1 	ld a,(draw_bg_time)
  313 D1:AA80 4F -  -  -  	ld c,a 
  314 D1:AA81 3E 22 -  -  	ld a, $22
  315 D1:AA83 CD E0 10 02 	call _MemSet
  316 D1:AA87 -  -  -  -  	
  317 D1:AA87 2A BB AB D1 	ld hl, (draw_buffer)
  318 D1:AA8B 01 A0 00 00 	ld bc,160
  319 D1:AA8F 09 -  -  -  	add hl,bc
  320 D1:AA90 3A C1 AB D1 	ld a,(move_bg_time)
  321 D1:AA94 4F -  -  -  	ld c,a 
  322 D1:AA95 3E 11 -  -  	ld a, $11
  323 D1:AA97 CD E0 10 02 	call _MemSet
  324 D1:AA9B -  -  -  -  
  325 D1:AA9B 2A BB AB D1 	ld hl, (draw_buffer)
  326 D1:AA9F 01 28 01 00 	ld bc,296
  327 D1:AAA3 09 -  -  -  	add hl,bc 
  328 D1:AAA4 3E 55 -  -  	ld a,$55
  329 D1:AAA6 77 -  -  -  	ld (hl),a 
  330 D1:AAA7 -  -  -  -  	
  331 D1:AAA7 -  -  -  -  	
  332 D1:AAA7 -  -  -  -  
  333 D1:AAA7 -  -  -  -  
  334 D1:AAA7 -  -  -  -  	
  335 D1:AAA7 -  -  -  -  
  336 D1:AAA7 -  -  -  -  	;swap draw buffers
  337 D1:AAA7 2A 10 00 E3 	ld hl,(mpLcdBase)
  338 D1:AAAB ED 5B BB AB 
              D1 -  -  -  	ld de,(draw_buffer)
  339 D1:AAB0 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  340 D1:AAB5 22 BB AB D1 	ld (draw_buffer),hl
  341 D1:AAB9 -  -  -  -  
  342 D1:AAB9 -  -  -  -  
  343 D1:AAB9 -  -  -  -  	;wait until finished drawing second frame
  344 D1:AAB9 -  -  -  -  	;Need to check clock here, there wont always be decompression to wait for
  345 D1:AAB9 -  -  -  -  main_clock_check_loop:
  346 D1:AAB9 3A 01 00 F2 	ld a,($F20001);128hz clock
  347 D1:AABD FE 03 -  -  	cp %00000011 ;check if reached 3 
  348 D1:AABF DA B9 AA D1 	jp c,main_clock_check_loop ;msb <= 2, can continue  
  349 D1:AAC3 3A 00 00 F2 	ld a,($F20000);32768hz clock
  350 D1:AAC7 FE E8 -  -  	cp %11101000;check if reached value 
  351 D1:AAC9 DA B9 AA D1 	jp c,main_clock_check_loop ;msb = 3 and lsb < value, can continue
  352 D1:AACD -  -  -  -  	
  353 D1:AACD -  -  -  -  
  354 D1:AACD -  -  -  -  
  355 D1:AACD -  -  -  -  clear_int:      
  356 D1:AACD 21 28 00 E3     ld hl, mpLcdIcr
  357 D1:AAD1 CB D6 -  -      set 2, (hl)            ; clear interrupt
  358 D1:AAD3 21 20 00 E3     ld hl, mpLcdRis
  359 D1:AAD7 -  -  -  -  wait_int:
  360 D1:AAD7 CB 56 -  -      bit 2, (hl)
  361 D1:AAD9 28 FC -  -      jr z, wait_int  
  362 D1:AADB -  -  -  -  
  363 D1:AADB -  -  -  -  
  364 D1:AADB 21 00 00 00 	ld hl,0
  365 D1:AADF -  -  -  -  	
  366 D1:AADF 3A 02 00 F2 	ld a,($F20002)
  367 D1:AAE3 67 -  -  -  	ld h,a
  368 D1:AAE4 3A 01 00 F2 	ld a,($F20001)
  369 D1:AAE8 6F -  -  -  	ld l,a
  370 D1:AAE9 ED 4B CC AB 
              D1 -  -  -  	ld bc,(totalTime)
  371 D1:AAEE 09 -  -  -  	add hl,bc 
  372 D1:AAEF 22 CC AB D1 	ld (totalTime),hl 
  373 D1:AAF3 -  -  -  -  	
  374 D1:AAF3 -  -  -  -  	
  375 D1:AAF3 -  -  -  -  	
  376 D1:AAF3 -  -  -  -  	
  377 D1:AAF3 -  -  -  -  
  378 D1:AAF3 -  -  -  -  	
  379 D1:AAF3 -  -  -  -  
  380 D1:AAF3 C2 D2 A8 D1 	jp nz,main_loop
  381 D1:AAF7 -  -  -  -  		
  382 D1:AAF7 -  -  -  -  	;print debug times 
  383 D1:AAF7 21 00 00 D4 	ld hl,vRam
  384 D1:AAFB 22 10 00 E3 	ld (mpLcdBase),hl
  385 D1:AAFF CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  386 D1:AB03 3E 2D -  -  	ld	a,lcdBpp16
  387 D1:AB05 32 18 00 E3 	ld (mpLcdCtrl),a
  388 D1:AB09 -  -  -  -  	
  389 D1:AB09 3E 00 -  -  	ld a,0
  390 D1:AB0B 32 95 05 D0 	ld (curRow),a
  391 D1:AB0F 32 96 05 D0 	ld (curCol),a
  392 D1:AB13 2A C6 AB D1 	ld hl,(longestFrame)
  393 D1:AB17 CD E0 1E 02 	call _DispHL
  394 D1:AB1B 3E 01 -  -  	ld a,1
  395 D1:AB1D 32 95 05 D0 	ld (curRow),a
  396 D1:AB21 3E 00 -  -  	ld a,0
  397 D1:AB23 32 96 05 D0 	ld (curCol),a
  398 D1:AB27 2A C9 AB D1 	ld hl,(longestFramePos)
  399 D1:AB2B CD E0 1E 02 	call _DispHL
  400 D1:AB2F 3E 02 -  -  	ld a,2
  401 D1:AB31 32 95 05 D0 	ld (curRow),a
  402 D1:AB35 3E 00 -  -  	ld a,0
  403 D1:AB37 32 96 05 D0 	ld (curCol),a
  404 D1:AB3B 2A CC AB D1 	ld hl,(totalTime)
  405 D1:AB3F CD E0 1E 02 	call _DispHL
  406 D1:AB43 3E 03 -  -  	ld a,3
  407 D1:AB45 32 95 05 D0 	ld (curRow),a
  408 D1:AB49 3E 00 -  -  	ld a,0
  409 D1:AB4B 32 96 05 D0 	ld (curCol),a
  410 D1:AB4F 2A CF AB D1 	ld hl,(frameCount)
  411 D1:AB53 CD E0 1E 02 	call _DispHL
  412 D1:AB57 -  -  -  -  	
  413 D1:AB57 CD A8 AB D1 	call prgmpause
  414 D1:AB5B CD A8 AB D1 	call prgmpause
  415 D1:AB5F -  -  -  -  	
  416 D1:AB5F -  -  -  -  	
  417 D1:AB5F -  -  -  -  exit_prgm:
  418 D1:AB5F 21 00 00 D4 	ld hl,vRam
  419 D1:AB63 22 10 00 E3 	ld (mpLcdBase),hl
  420 D1:AB67 CD 10 08 02 	call _ClrScrnFull
  421 D1:AB6B 3E 2D -  -  	ld	a,lcdBpp16
  422 D1:AB6D 32 18 00 E3 	ld	(mpLcdCtrl),a
  423 D1:AB71 CD 3C 1A 02 	call _DrawStatusBar
  424 D1:AB75 -  -  -  -  	
  425 D1:AB75 FB -  -  -  	ei				; reset screen back to normal
  426 D1:AB76 C9 -  -  -  	ret			; return to os
  427 D1:AB77 -  -  -  -  
  428 D1:AB77 -  -  -  -  
  429 D1:AB77 -  -  -  -  printHL:;=================REMOVE
  430 D1:AB77 E5 -  -  -  	push hl
  431 D1:AB78 21 00 00 D4 	ld hl,vRam
  432 D1:AB7C 22 10 00 E3 	ld (mpLcdBase),hl
  433 D1:AB80 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  434 D1:AB84 3E 2D -  -  	ld	a,lcdBpp16
  435 D1:AB86 32 18 00 E3 	ld (mpLcdCtrl),a
  436 D1:AB8A E1 -  -  -  	pop hl
  437 D1:AB8B CD E0 1E 02 	call _DispHL
  438 D1:AB8F FB -  -  -  	ei
  439 D1:AB90 CD 8C 0D 02 	call _GetKey
  440 D1:AB94 F3 -  -  -  	di
  441 D1:AB95 C3 5F AB D1 	jp exit_prgm
  442 D1:AB99 -  -  -  -  
  443 D1:AB99 -  -  -  -  
  444 D1:AB99 -  -  -  -  write_a_to_ram:
  445 D1:AB99 F5 -  -  -  	push af 
  446 D1:AB9A E5 -  -  -  	push hl 
  447 D1:AB9B -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  448 D1:AB9B 21 00 60 D4 	ld hl, $d46000
  449 D1:AB9F 77 -  -  -  	ld (hl),a 
  450 D1:ABA0 23 -  -  -  	inc hl 
  451 D1:ABA1 22 9C AB D1 	ld (write_a_to_ram_addr),hl 
  452 D1:ABA5 E1 -  -  -  	pop hl 
  453 D1:ABA6 F1 -  -  -  	pop af 
  454 D1:ABA7 C9 -  -  -  	ret 
  455 D1:ABA8 -  -  -  -  
  456 D1:ABA8 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  457 D1:ABA8 F5 -  -  -  	push af
  458 D1:ABA9 D5 -  -  -  	push de 
  459 D1:ABAA E5 -  -  -  	push hl 
  460 D1:ABAB FB -  -  -  	ei
  461 D1:ABAC CD 8C 0D 02 	call _GetKey
  462 D1:ABB0 F3 -  -  -  	di
  463 D1:ABB1 E1 -  -  -  	pop hl 
  464 D1:ABB2 D1 -  -  -  	pop de 
  465 D1:ABB3 F1 -  -  -  	pop af
  466 D1:ABB4 C9 -  -  -  	ret
  467 D1:ABB5 -  -  -  -  
  468 D1:ABB5 -  -  -  -  cam_pos:;y position of lowest visible line in fg layer
  469 D1:ABB5 00 00 00 -  	.dl 0
  470 D1:ABB8 -  -  -  -  bg_cam_pos: ;y position of lowest visible line in bg layer (= cam pos / 4)
  471 D1:ABB8 00 00 00 -  	.dl 0
  472 D1:ABBB -  -  -  -  
  473 D1:ABBB -  -  -  -  
  474 D1:ABBB -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  475 D1:ABBB 00 2C D5 -  	.dl $d52c00
  476 D1:ABBE -  -  -  -  	
  477 D1:ABBE -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  478 D1:ABBE 00 00 00 -  	.dl 0
  479 D1:ABC1 -  -  -  -  BG_buffer .equ vram + (160*240) ;Start of BG buffer 
  480 D1:ABC1 -  -  -  -  
  481 D1:ABC1 -  -  -  -  
  482 D1:ABC1 -  -  -  -  ;d40000 = Decompressed sprite data
  483 D1:ABC1 -  -  -  -  ;d49600 = BG buffer
  484 D1:ABC1 -  -  -  -  ;d52c00 = Frame draw buffer 1 
  485 D1:ABC1 -  -  -  -  ;d5c200 = frame draw buffer 2
  486 D1:ABC1 -  -  -  -  
  487 D1:ABC1 -  -  -  -  ;pixelShadow .equ $D031F6 
  488 D1:ABC1 -  -  -  -  
  489 D1:ABC1 -  -  -  -  move_bg_time:
  490 D1:ABC1 00 -  -  -  	.db 0
  491 D1:ABC2 -  -  -  -  draw_bg_time:
  492 D1:ABC2 00 -  -  -  	.db 0
  493 D1:ABC3 -  -  -  -  draw_mg_time:
  494 D1:ABC3 00 -  -  -  	.db 0
  495 D1:ABC4 -  -  -  -  draw_fg_time:
  496 D1:ABC4 00 -  -  -  	.db 0
  497 D1:ABC5 -  -  -  -  decompress_time:
  498 D1:ABC5 00 -  -  -  	.db 0
  499 D1:ABC6 -  -  -  -  
  500 D1:ABC6 -  -  -  -  
  501 D1:ABC6 -  -  -  -  longestFrame:
  502 D1:ABC6 00 00 00 -  	.dl 0
  503 D1:ABC9 -  -  -  -  longestFramePos:
  504 D1:ABC9 00 00 00 -  	.dl 0
  505 D1:ABCC -  -  -  -  totalTime:
  506 D1:ABCC 00 00 00 -  	.dl 0
  507 D1:ABCF -  -  -  -  frameCount:
  508 D1:ABCF 00 00 00 -  	.dl 0
  509 D1:ABD2 -  -  -  -  hasLagged:
  510 D1:ABD2 00 00 00 -  	.dl 0
  511 D1:ABD5 -  -  -  -  
  512 D1:ABD5 -  -  -  -  sd_test_a:
  513 D1:ABD5 00 00 00 -  	.dl 0 
  514 D1:ABD8 -  -  -  -  
  515 D1:ABD8 -  -  -  -  
  516 D1:ABD8 -  -  -  -  
  517 D1:ABD8 -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:ABD8 -  -  -  -  
    2 D1:ABD8 -  -  -  -  
    3 D1:ABD8 -  -  -  -  
    4 D1:ABD8 -  -  -  -  time_test_start:
    5 D1:ABD8 -  -  -  -  
    6 D1:ABD8 -  -  -  -  		; 76543210	
    7 D1:ABD8 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:ABDA 32 30 00 F2 	ld ($F20030),a
    9 D1:ABDE -  -  -  -  	;	  fedcba98
   10 D1:ABDE 3E 02 -  -  	ld a,%00000010;count up
   11 D1:ABE0 32 31 00 F2 	ld ($F20031),a
   12 D1:ABE4 3E 00 -  -  	ld a,0
   13 D1:ABE6 32 00 00 F2 	ld ($F20000),a
   14 D1:ABEA 32 01 00 F2 	ld ($F20001),a
   15 D1:ABEE 32 02 00 F2 	ld ($F20002),a
   16 D1:ABF2 32 03 00 F2 	ld ($F20003),a
   17 D1:ABF6 -  -  -  -  	
   18 D1:ABF6 21 2C 01 00 	ld hl,300
   19 D1:ABFA -  -  -  -  	
   20 D1:ABFA -  -  -  -  time_testing_loop:
   21 D1:ABFA E5 -  -  -  	push hl
   22 D1:ABFB 01 E8 03 00 	ld bc,1000
   23 D1:ABFF -  -  -  -  time_testing_loop_2:
   24 D1:ABFF C5 -  -  -  	push bc
   25 D1:AC00 -  -  -  -  	;instruction here
   26 D1:AC00 -  -  -  -  	
   27 D1:AC00 -  -  -  -  	
   28 D1:AC00 -  -  -  -  	;Instruction end
   29 D1:AC00 C1 -  -  -  	pop bc
   30 D1:AC01 0B -  -  -  	dec bc
   31 D1:AC02 79 -  -  -  	ld a,c
   32 D1:AC03 B0 -  -  -  	or b
   33 D1:AC04 C2 FF AB D1 	jp nz,time_testing_loop_2
   34 D1:AC08 E1 -  -  -  	pop hl
   35 D1:AC09 2B -  -  -  	dec hl
   36 D1:AC0A 7D -  -  -  	ld a,l
   37 D1:AC0B B4 -  -  -  	or h
   38 D1:AC0C C2 FA AB D1 	jp nz,time_testing_loop
   39 D1:AC10 -  -  -  -  	
   40 D1:AC10 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AC14 6F -  -  -  	ld l,a
   42 D1:AC15 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AC19 67 -  -  -  	ld h,a
   44 D1:AC1A C3 77 AB D1 	jp printHL;div by 128 for time
   45 D1:AC1E -  -  -  -  	
   46 D1:AC1E -  -  -  -  
   47 D1:AC1E -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AC1E -  -  -  -  
   49 D1:AC1E -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AC1E -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AC1E -  -  -  -  
   52 D1:AC1E -  -  -  -  
   53 D1:AC1E -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AC1E -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AC1E -  -  -  -  
   56 D1:AC1E -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AC1E -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AC1E -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AC1E -  -  -  -  ;.24 screens/frame
   60 D1:AC1E -  -  -  -  
   61 D1:AC1E -  -  -  -  
   62 D1:AC1E -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AC1E -  -  -  -  ;8.75RT 7.6clk
   64 D1:AC1E -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AC1E -  -  -  -  ;.446 screens/frame
   66 D1:AC1E -  -  -  -  
   67 D1:AC1E -  -  -  -  
   68 D1:AC1E -  -  -  -  
   69 D1:AC1E -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AC1E -  -  -  -  ;22.15RT,20.35clk
   71 D1:AC1E -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AC1E -  -  -  -  ;.78 screens/frame
   73 D1:AC1E -  -  -  -  
   74 D1:AC1E -  -  -  -  
   75 D1:AC1E -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AC1E -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AC1E -  -  -  -  ;.47 = FAST
   78 D1:AC1E -  -  -  -  
   79 D1:AC1E -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AC1E -  -  -  -  
   81 D1:AC1E -  -  -  -  
   82 D1:AC1E -  -  -  -  
   83 D1:AC1E -  -  -  -  
   84 D1:AC1E -  -  -  -  
   85 D1:AC1E -  -  -  -  
   86 D1:AC1E -  -  -  -  
   87 D1:AC1E -  -  -  -  
   88 D1:AC1E -  -  -  -  
Listing for file "ascent.asm"
  518 D1:AC1E -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AC1E -  -  -  -  
    2 D1:AC1E -  -  -  -  
    3 D1:AC1E -  -  -  -  BGMaxSpriteHeight .equ 120
    4 D1:AC1E -  -  -  -  
    5 D1:AC1E -  -  -  -  
    6 D1:AC1E -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    7 D1:AC1E CD 52 AC D1 	call move_bg
    8 D1:AC22 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    9 D1:AC26 ED 4B BE AB 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
   10 D1:AC2B 37 -  -  -  	scf 
   11 D1:AC2C 3F -  -  -  	ccf 
   12 D1:AC2D ED 42 -  -  	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
   13 D1:AC2F E5 -  -  -  	push hl 
   14 D1:AC30 C1 -  -  -  	pop bc	;put into bc for ldir 
   15 D1:AC31 2A BE AB D1 	ld hl,(BG_draw_buffer)
   16 D1:AC35 ED 5B BB AB 
              D1 -  -  -  	ld de,(draw_buffer)
   17 D1:AC3A ED B0 -  -  	ldir
   18 D1:AC3C 2A BE AB D1 	ld hl,(BG_draw_buffer) ;loop point in buffer
   19 D1:AC40 01 00 96 D4 	ld bc,BG_buffer ;start of buffer
   20 D1:AC44 37 -  -  -  	scf 
   21 D1:AC45 3F -  -  -  	ccf 
   22 D1:AC46 ED 42 -  -  	sbc hl,bc ;number of bytes from start to loop point 
   23 D1:AC48 C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   24 D1:AC49 E5 -  -  -  	push hl 
   25 D1:AC4A C1 -  -  -  	pop bc
   26 D1:AC4B 21 00 96 D4 	ld hl,BG_buffer 
   27 D1:AC4F ED B0 -  -  	ldir 
   28 D1:AC51 C9 -  -  -  	ret 
   29 D1:AC52 -  -  -  -  	
   30 D1:AC52 -  -  -  -  	
   31 D1:AC52 -  -  -  -  ;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
   32 D1:AC52 -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   33 D1:AC52 -  -  -  -  move_bg:
   34 D1:AC52 2A B5 AB D1 	ld hl,(cam_pos);load cam pos 
   35 D1:AC56 CB 3C -  -  	srl h
   36 D1:AC58 CB 1D -  -  	rr l
   37 D1:AC5A CB 3C -  -  	srl h
   38 D1:AC5C CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   39 D1:AC5E -  -  -  -  	;hl holds bg cam pos, lowest visible line of bg layer 
   40 D1:AC5E ED 4B B8 AB 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   41 D1:AC63 37 -  -  -  	scf
   42 D1:AC64 3F -  -  -  	ccf
   43 D1:AC65 ED 42 -  -  	sbc hl,bc ;compare to the updated location
   44 D1:AC67 C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   45 D1:AC68 DA 74 AC D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   46 D1:AC6C CD C3 AC D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   47 D1:AC70 C3 52 AC D1 	jp move_bg ;repeat until bg is in correct pos
   48 D1:AC74 -  -  -  -  move_bg_down:
   49 D1:AC74 CD 7C AC D1 	call dec_bg
   50 D1:AC78 C3 52 AC D1 	jp move_bg ;repeat until bg is in correct pos
   51 D1:AC7C -  -  -  -  
   52 D1:AC7C -  -  -  -  
   53 D1:AC7C -  -  -  -  dec_bg:;move bg cam down 1px 
   54 D1:AC7C -  -  -  -  
   55 D1:AC7C -  -  -  -  	
   56 D1:AC7C -  -  -  -  	;Testibng
   57 D1:AC7C -  -  -  -  	;ld a,$AD
   58 D1:AC7C -  -  -  -  	;call write_a_to_ram
   59 D1:AC7C -  -  -  -  	
   60 D1:AC7C -  -  -  -  
   61 D1:AC7C -  -  -  -  	;write on draw buffer line 
   62 D1:AC7C 2A BE AB D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   63 D1:AC80 22 09 AE D1 	ld (dbgl_vram_line_start),hl 
   64 D1:AC84 -  -  -  -  	
   65 D1:AC84 2A B8 AB D1 	ld hl,(bg_cam_pos)
   66 D1:AC88 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   67 D1:AC89 22 B8 AB D1 	ld (bg_cam_pos),hl 
   68 D1:AC8D -  -  -  -  	
   69 D1:AC8D 01 00 00 00 	ld bc,0 ;clear bc reg
   70 D1:AC91 4C -  -  -  	ld c,h;bottom y value msb 
   71 D1:AC92 7D -  -  -  	ld a,l ;bottom y value lsb 
   72 D1:AC93 21 CF B9 D1 	ld hl,BG_Data_frame_table
   73 D1:AC97 0C -  -  -  	inc c 
   74 D1:AC98 09 -  -  -  	add hl,bc 
   75 D1:AC99 09 -  -  -  	add hl,bc 
   76 D1:AC9A 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   77 D1:AC9B ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   78 D1:AC9D CD 61 AD D1 	call draw_bg_line
   79 D1:ACA1 -  -  -  -  	
   80 D1:ACA1 -  -  -  -  
   81 D1:ACA1 -  -  -  -  	;move buffer pos
   82 D1:ACA1 2A BE AB D1 	ld hl,(BG_draw_buffer)
   83 D1:ACA5 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
   84 D1:ACA9 37 -  -  -  	scf 
   85 D1:ACAA 3F -  -  -  	ccf 
   86 D1:ACAB ED 42 -  -  	sbc hl,bc ;compare to current line 
   87 D1:ACAD 2A BE AB D1 	ld hl,(BG_draw_buffer)
   88 D1:ACB1 C2 B9 AC D1 	jp nz,dec_bg_bottom_skip
   89 D1:ACB5 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   90 D1:ACB9 -  -  -  -  dec_bg_bottom_skip:
   91 D1:ACB9 01 A0 00 00 	ld bc,160 
   92 D1:ACBD 09 -  -  -  	add hl,bc
   93 D1:ACBE 22 BE AB D1 	ld (BG_draw_buffer),hl 
   94 D1:ACC2 C9 -  -  -  	ret
   95 D1:ACC3 -  -  -  -  
   96 D1:ACC3 -  -  -  -  
   97 D1:ACC3 -  -  -  -  inc_bg:;move cam up 
   98 D1:ACC3 -  -  -  -  
   99 D1:ACC3 -  -  -  -  	
  100 D1:ACC3 -  -  -  -  	;Testibng
  101 D1:ACC3 -  -  -  -  	;ld a,$AC
  102 D1:ACC3 -  -  -  -  	;call write_a_to_ram
  103 D1:ACC3 -  -  -  -  	
  104 D1:ACC3 -  -  -  -  
  105 D1:ACC3 2A BE AB D1 	ld hl,(BG_draw_buffer)
  106 D1:ACC7 01 00 96 D4 	ld bc,BG_buffer
  107 D1:ACCB 37 -  -  -  	scf 
  108 D1:ACCC 3F -  -  -  	ccf 
  109 D1:ACCD ED 42 -  -  	sbc hl,bc ;compare current drawing line to top of bg buffer 
  110 D1:ACCF 2A BE AB D1 	ld hl,(BG_draw_buffer)
  111 D1:ACD3 C2 DB AC D1 	jp nz,inc_bg_top_skip ;if they are not equal, continue
  112 D1:ACD7 21 00 2C D5 	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
  113 D1:ACDB -  -  -  -  inc_bg_top_skip:
  114 D1:ACDB 01 A0 00 00 	ld bc,160 
  115 D1:ACDF 37 -  -  -  	scf
  116 D1:ACE0 3F -  -  -  	ccf 
  117 D1:ACE1 ED 42 -  -  	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
  118 D1:ACE3 22 BE AB D1 	ld (BG_draw_buffer),hl 
  119 D1:ACE7 22 09 AE D1 	ld (dbgl_vram_line_start),hl 
  120 D1:ACEB 2A B8 AB D1 	ld hl,(bg_cam_pos)
  121 D1:ACEF 23 -  -  -  	inc hl 
  122 D1:ACF0 22 B8 AB D1 	ld (bg_cam_pos),hl ;incremnet cam pos 
  123 D1:ACF4 01 EF 00 00 	ld bc,239
  124 D1:ACF8 09 -  -  -  	add hl,bc ;gets uppermost visible line y value in bg layer
  125 D1:ACF9 4C -  -  -  	ld c,h;cam pos msb 
  126 D1:ACFA 7D -  -  -  	ld a,l ;a holds line number in target frame 
  127 D1:ACFB 21 CF B9 D1 	ld hl,BG_Data_frame_table
  128 D1:ACFF 0C -  -  -  	inc c ;inc to get to upper frame 
  129 D1:AD00 09 -  -  -  	add hl,bc 
  130 D1:AD01 09 -  -  -  	add hl,bc 
  131 D1:AD02 09 -  -  -  	add hl,bc 
  132 D1:AD03 ED 27 -  -  	ld hl,(hl)
  133 D1:AD05 CD 61 AD D1 	call draw_bg_line
  134 D1:AD09 C9 -  -  -  	ret
  135 D1:AD0A -  -  -  -  	
  136 D1:AD0A -  -  -  -  
  137 D1:AD0A -  -  -  -  
  138 D1:AD0A -  -  -  -  
  139 D1:AD0A -  -  -  -  
  140 D1:AD0A -  -  -  -  setup_bg: ;Draws entire BG buffer when loading game 
  141 D1:AD0A 2A B5 AB D1 	ld hl,(cam_pos)
  142 D1:AD0E CB 3C -  -  	srl h
  143 D1:AD10 CB 1D -  -  	rr l
  144 D1:AD12 CB 3C -  -  	srl h
  145 D1:AD14 CB 1D -  -  	rr l ;div by 4
  146 D1:AD16 -  -  -  -  	;hl holds bg cam pos 
  147 D1:AD16 22 B8 AB D1 	ld (bg_cam_pos),hl
  148 D1:AD1A -  -  -  -  	
  149 D1:AD1A 01 EF 00 00 	ld bc,239
  150 D1:AD1E 09 -  -  -  	add hl,bc;hl holds y position of uppermost visible line in bg layer 
  151 D1:AD1F -  -  -  -  	
  152 D1:AD1F 23 -  -  -  	inc hl;to be dec in loop
  153 D1:AD20 E5 -  -  -  	push hl ;save uppermost line y val
  154 D1:AD21 21 00 96 D4 	ld hl,BG_buffer ;start of bg drawing buffer 
  155 D1:AD25 22 BE AB D1 	ld (BG_draw_buffer),hl ;set current bg line drawing location 
  156 D1:AD29 E5 -  -  -  	push hl 
  157 D1:AD2A -  -  -  -  	
  158 D1:AD2A 3E F0 -  -  	ld a,240 ;num loops
  159 D1:AD2C 32 54 AD D1 	ld (setup_bg_loop_count),a
  160 D1:AD30 -  -  -  -  setup_bg_loop:
  161 D1:AD30 -  -  -  -  
  162 D1:AD30 E1 -  -  -  	pop hl;vram draw pos, next line of bg drawn here 
  163 D1:AD31 22 09 AE D1 	ld (dbgl_vram_line_start),hl ;set drawing pos 
  164 D1:AD35 01 A0 00 00 	ld bc,160
  165 D1:AD39 09 -  -  -  	add hl,bc 
  166 D1:AD3A EB -  -  -  	ex de,hl ;put next vram pos in de 
  167 D1:AD3B E1 -  -  -  	pop hl;uppermost line y val
  168 D1:AD3C 2B -  -  -  	dec hl ;dec line y value (move to next lowest line)
  169 D1:AD3D E5 -  -  -  	push hl;push uppermost line y val
  170 D1:AD3E D5 -  -  -  	push de ;push vram pos 
  171 D1:AD3F 01 00 00 00 	ld bc,0
  172 D1:AD43 4C -  -  -  	ld c,h;cam pos msb 
  173 D1:AD44 7D -  -  -  	ld a,l ;a holds line number in current frame 
  174 D1:AD45 21 CF B9 D1 	ld hl,BG_Data_frame_table
  175 D1:AD49 0C -  -  -  	inc c ;add 1 to get to upper frame
  176 D1:AD4A 09 -  -  -  	add hl,bc 
  177 D1:AD4B 09 -  -  -  	add hl,bc 
  178 D1:AD4C 09 -  -  -  	add hl,bc 
  179 D1:AD4D ED 27 -  -  	ld hl,(hl) ;hl now points to upper frame data 
  180 D1:AD4F CD 61 AD D1 	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
  181 D1:AD53 -  -  -  -  	
  182 D1:AD53 -  -  -  -  setup_bg_loop_count .equ $ + 1
  183 D1:AD53 3E 00 -  -  	ld a,0
  184 D1:AD55 3D -  -  -  	dec a ;dec loop counter
  185 D1:AD56 32 54 AD D1 	ld (setup_bg_loop_count),a
  186 D1:AD5A C2 30 AD D1 	jp nz,setup_bg_loop 
  187 D1:AD5E E1 -  -  -  	pop hl ;pop vram pos 
  188 D1:AD5F E1 -  -  -  	pop hl ;pop current line number 
  189 D1:AD60 C9 -  -  -  	ret 
  190 D1:AD61 -  -  -  -  
  191 D1:AD61 -  -  -  -  
  192 D1:AD61 -  -  -  -  
  193 D1:AD61 -  -  -  -  
  194 D1:AD61 -  -  -  -  
  195 D1:AD61 -  -  -  -  
  196 D1:AD61 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  197 D1:AD61 -  -  -  -  ;for drawing BG, only 1 line is drawn at a time.
  198 D1:AD61 -  -  -  -  ;therefore only check sprites in the above frame that may extend downwards, 
  199 D1:AD61 -  -  -  -  ;and the sprites in the target frame which contains the y position of the line being drawn
  200 D1:AD61 -  -  -  -  ;set dbgl_vram_line_start before calling 
  201 D1:AD61 -  -  -  -  draw_bg_line:
  202 D1:AD61 E5 -  -  -  	push hl ;upper frame sprite table pointer 
  203 D1:AD62 F5 -  -  -  	push af ;save line number 
  204 D1:AD63 3E FF -  -  	ld a,$FF ;Set all of line to FF to clear it with color 16
  205 D1:AD65 01 A0 00 00 	ld bc,160
  206 D1:AD69 2A 09 AE D1 	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
  207 D1:AD6D CD E0 10 02 	call _MemSet ;Clear all of line 
  208 D1:AD71 F1 -  -  -  	pop af ;return line number 
  209 D1:AD72 E1 -  -  -  	pop hl ;return upper frame ptr 
  210 D1:AD73 -  -  -  -  
  211 D1:AD73 -  -  -  -  
  212 D1:AD73 -  -  -  -  
  213 D1:AD73 32 EB AD D1 	ld (dbgl_line_num),a ;write line num to required positions 
  214 D1:AD77 -  -  -  -  	
  215 D1:AD77 ED 44 -  -  	neg
  216 D1:AD79 CA 87 AD D1 	jp z, dbgl_skip_upper_loop ;need to check 0 case, negative 0 = 0
  217 D1:AD7D 32 B8 AD D1 	ld (dbgl_lines_to_top_of_target_frame),a ;a holds lines from top of frame (1 indexed)
  218 D1:AD81 FE 78 -  -  	cp BGMaxSpriteHeight
  219 D1:AD83 DA 97 AD D1 	jp c, dbgl_do_upper_loop
  220 D1:AD87 -  -  -  -  dbgl_skip_upper_loop:
  221 D1:AD87 -  -  -  -  	;Upper sprites are too far to be seen in this line, skip upper loop 
  222 D1:AD87 23 -  -  -  	inc hl 
  223 D1:AD88 23 -  -  -  	inc hl
  224 D1:AD89 23 -  -  -  	inc hl ;hl points to number of elements 
  225 D1:AD8A 01 00 00 00 	ld bc,0
  226 D1:AD8E 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  227 D1:AD8F 09 -  -  -  	add hl,bc 
  228 D1:AD90 09 -  -  -  	add hl,bc 
  229 D1:AD91 09 -  -  -  	add hl,bc 
  230 D1:AD92 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  231 D1:AD93 C3 D0 AD D1 	jp dbgl_lower_start ;skip upper loop
  232 D1:AD97 -  -  -  -  	
  233 D1:AD97 -  -  -  -  dbgl_do_upper_loop:
  234 D1:AD97 ED 17 -  -  	ld de,(hl) ;DE points to sprite table 
  235 D1:AD99 ED 53 1A AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr
  236 D1:AD9E 23 -  -  -  	inc hl
  237 D1:AD9F 23 -  -  -  	inc hl
  238 D1:ADA0 23 -  -  -  	inc hl ;to frame data start 
  239 D1:ADA1 08 -  -  -  	ex af,af' ;'
  240 D1:ADA2 7E -  -  -  	ld a,(hl);number of elements = num loops
  241 D1:ADA3 3C -  -  -  	inc a ;add 1 bc termination is checked at start of loop 
  242 D1:ADA4 08 -  -  -  	ex af,af' ;'
  243 D1:ADA5 -  -  -  -  	
  244 D1:ADA5 11 00 00 00 	ld de,0
  245 D1:ADA9 01 00 00 00 	ld bc,0
  246 D1:ADAD -  -  -  -  	;upper frame, checking for sprites that carry into lower frame
  247 D1:ADAD -  -  -  -  dbgl_upper_loop:
  248 D1:ADAD 08 -  -  -  	ex af,af' ;'
  249 D1:ADAE 3D -  -  -  	dec a 
  250 D1:ADAF CA D0 AD D1 	jp z,dbgl_lower_start
  251 D1:ADB3 08 -  -  -  	ex af,af' ;'
  252 D1:ADB4 23 -  -  -  	inc hl ;to Y
  253 D1:ADB5 7E -  -  -  	ld a,(hl); y value of sprite in upper frame 
  254 D1:ADB6 23 -  -  -  	inc hl;to height
  255 D1:ADB7 -  -  -  -  dbgl_lines_to_top_of_target_frame .equ $ + 1
  256 D1:ADB7 C6 00 -  -  	add a,0 ;a holds line number in sprite to draw (0 indexed)
  257 D1:ADB9 DA CA AD D1 	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
  258 D1:ADBD BE -  -  -  	cp (hl) ;compare to sprite height 
  259 D1:ADBE D2 CA AD D1 	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
  260 D1:ADC2 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  261 D1:ADC2 CD 03 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  262 D1:ADC6 -  -  -  -  	;hl pts to sprite index
  263 D1:ADC6 C3 AD AD D1 	jp dbgl_upper_loop
  264 D1:ADCA -  -  -  -  	
  265 D1:ADCA -  -  -  -  dbgl_upper_skip_sprite:
  266 D1:ADCA 23 -  -  -  	inc hl ;to x 
  267 D1:ADCB 23 -  -  -  	inc hl ;to index 
  268 D1:ADCC C3 AD AD D1 	jp dbgl_upper_loop
  269 D1:ADD0 -  -  -  -  	
  270 D1:ADD0 -  -  -  -  	
  271 D1:ADD0 -  -  -  -  dbgl_lower_start:
  272 D1:ADD0 -  -  -  -  ;LOWER FRAME START 
  273 D1:ADD0 -  -  -  -  	;After breaking upper loop, hl is pointing to the sprite index of the last element in the upper frame 
  274 D1:ADD0 23 -  -  -  	inc hl ;hl now points to sprite table of the lower frame 
  275 D1:ADD1 ED 17 -  -  	ld de,(hl)
  276 D1:ADD3 ED 53 1A AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr 
  277 D1:ADD8 11 00 00 00 	ld de,0;clear d upper 
  278 D1:ADDC 23 -  -  -  	inc hl
  279 D1:ADDD 23 -  -  -  	inc hl
  280 D1:ADDE 23 -  -  -  	inc hl;to num elements
  281 D1:ADDF -  -  -  -  	
  282 D1:ADDF 08 -  -  -  	ex af,af' ;'
  283 D1:ADE0 7E -  -  -  	ld a,(hl);number of elements
  284 D1:ADE1 3C -  -  -  	inc a 
  285 D1:ADE2 08 -  -  -  	ex af,af' ;'
  286 D1:ADE3 -  -  -  -  	
  287 D1:ADE3 -  -  -  -  	
  288 D1:ADE3 -  -  -  -  dbgl_lower_loop:
  289 D1:ADE3 08 -  -  -  	ex af,af' ;'
  290 D1:ADE4 3D -  -  -  	dec a 
  291 D1:ADE5 C8 -  -  -  	ret z
  292 D1:ADE6 08 -  -  -  	ex af,af' ;'
  293 D1:ADE7 23 -  -  -  	inc hl ;to y
  294 D1:ADE8 7E -  -  -  	ld a,(hl) ;y pos of sprite in lower frame 
  295 D1:ADE9 23 -  -  -  	inc hl;to height
  296 D1:ADEA -  -  -  -  dbgl_line_num .equ $ + 1
  297 D1:ADEA D6 00 -  -  	sub 0;subtract line num 
  298 D1:ADEC DA FD AD D1 	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
  299 D1:ADF0 -  -  -  -  	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
  300 D1:ADF0 BE -  -  -  	cp (hl) ;compare to sprite height -1
  301 D1:ADF1 D2 FD AD D1 	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
  302 D1:ADF5 -  -  -  -  	
  303 D1:ADF5 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  304 D1:ADF5 CD 03 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  305 D1:ADF9 -  -  -  -  	;hl pts to sprite index
  306 D1:ADF9 C3 E3 AD D1 	jp dbgl_lower_loop
  307 D1:ADFD -  -  -  -  	
  308 D1:ADFD -  -  -  -  dbgl_lower_skip_sprite:
  309 D1:ADFD 23 -  -  -  	inc hl ;to x 
  310 D1:ADFE 23 -  -  -  	inc hl ;to index 
  311 D1:ADFF C3 E3 AD D1 	jp dbgl_lower_loop
  312 D1:AE03 -  -  -  -  
  313 D1:AE03 -  -  -  -  ;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
  314 D1:AE03 -  -  -  -  dbgl_setup_and_draw:
  315 D1:AE03 23 -  -  -  	inc hl;to x pos
  316 D1:AE04 5E -  -  -  	ld e,(hl);e holds x pos 
  317 D1:AE05 23 -  -  -  	inc hl 
  318 D1:AE06 4E -  -  -  	ld c,(hl);sprite index 
  319 D1:AE07 E5 -  -  -  	push hl ;save location in data 
  320 D1:AE08 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  321 D1:AE08 21 00 00 00 	ld hl,0
  322 D1:AE0C 19 -  -  -  	add hl,de;add x pos 
  323 D1:AE0D EB -  -  -  	ex de,hl;put vram pos into de 
  324 D1:AE0E -  -  -  -  	
  325 D1:AE0E 26 A0 -  -  	ld h,160
  326 D1:AE10 6F -  -  -  	ld l,a ;number of lines to subtract 
  327 D1:AE11 ED 6C -  -  	mlt hl;bytes to subtract from vram
  328 D1:AE13 37 -  -  -  	scf 
  329 D1:AE14 3F -  -  -  	ccf
  330 D1:AE15 EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  331 D1:AE16 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  332 D1:AE18 EB -  -  -  	ex de,hl;put in de
  333 D1:AE19 -  -  -  -  	
  334 D1:AE19 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  335 D1:AE19 21 00 00 00 	ld hl,0
  336 D1:AE1D 09 -  -  -  	add hl,bc
  337 D1:AE1E 09 -  -  -  	add hl,bc 
  338 D1:AE1F 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  339 D1:AE20 ED 27 -  -  	ld hl,(hl);hl holds sprite data
  340 D1:AE22 -  -  -  -  
  341 D1:AE22 -  -  -  -  
  342 D1:AE22 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  343 D1:AE24 CA 30 AE D1 	jp z,dbgl_fast_sprite ;if even address, fast sprite 
  344 D1:AE28 CD 02 AF D1 	call draw_slow_sprite_single_line
  345 D1:AE2C C3 34 AE D1 	jp dbgl_slow_sprite
  346 D1:AE30 -  -  -  -  dbgl_fast_sprite:
  347 D1:AE30 CD 84 AE D1 	call draw_fast_sprite_single_line
  348 D1:AE34 -  -  -  -  dbgl_slow_sprite:
  349 D1:AE34 -  -  -  -  	
  350 D1:AE34 11 00 00 00 	ld de,0;clear de 
  351 D1:AE38 01 00 00 00 	ld bc,0
  352 D1:AE3C E1 -  -  -  	pop hl;back to data
  353 D1:AE3D C9 -  -  -  	ret
  354 D1:AE3E -  -  -  -  	
  355 D1:AE3E -  -  -  -  
  356 D1:AE3E -  -  -  -  
  357 D1:AE3E -  -  -  -  
  358 D1:AE3E -  -  -  -  
  359 D1:AE3E -  -  -  -  
  360 D1:AE3E -  -  -  -  
  361 D1:AE3E -  -  -  -  
  362 D1:AE3E -  -  -  -  
  363 D1:AE3E -  -  -  -  
  364 D1:AE3E -  -  -  -  ; dbgl_upper_loop:
  365 D1:AE3E -  -  -  -  	; ld a,(hl);y
  366 D1:AE3E -  -  -  -  	; inc hl;to height
  367 D1:AE3E -  -  -  -  	; sub (hl);subtract height
  368 D1:AE3E -  -  -  -  	;a is y value of bottom row of sprite
  369 D1:AE3E -  -  -  -  	; jp nc,dbgl_upper_skip;if no carry into next frame (most sprites will do this so want this to be fast)
  370 D1:AE3E -  -  -  -  	
  371 D1:AE3E -  -  -  -  	;sprite extends into target frame
  372 D1:AE3E -  -  -  -  ; dbgl_line_num .equ $ + 1
  373 D1:AE3E -  -  -  -  	; sub 0 ;compare to line number in target frame
  374 D1:AE3E -  -  -  -  	; jp c,dbgl_upper_cont;if linenum is >  bottom row
  375 D1:AE3E -  -  -  -  	; jp z,dbgl_upper_cont;if = bottom row
  376 D1:AE3E -  -  -  -  ; dbgl_upper_skip:
  377 D1:AE3E -  -  -  -  	; inc hl;to x
  378 D1:AE3E -  -  -  -  	; inc hl;to index 
  379 D1:AE3E -  -  -  -  	; inc hl;to y
  380 D1:AE3E -  -  -  -  	; ex af,af';'
  381 D1:AE3E -  -  -  -  	; dec a ;dec number of loops 
  382 D1:AE3E -  -  -  -  	; jp z,dbgl_lower_start 
  383 D1:AE3E -  -  -  -  	; ex af,af';'
  384 D1:AE3E -  -  -  -  	; jp dbgl_upper_loop
  385 D1:AE3E -  -  -  -  	
  386 D1:AE3E -  -  -  -  ; dbgl_upper_cont:
  387 D1:AE3E -  -  -  -  	;a = bottom row - linenum
  388 D1:AE3E -  -  -  -  	; add a,(hl);add height-1 
  389 D1:AE3E -  -  -  -  	;a holds 0 indexed line num within sprite
  390 D1:AE3E -  -  -  -  	; call dbgl_setup_and_draw
  391 D1:AE3E -  -  -  -  	; inc hl;to y
  392 D1:AE3E -  -  -  -  	; ex af,af';'
  393 D1:AE3E -  -  -  -  	; dec a 
  394 D1:AE3E -  -  -  -  	; jp z,dbgl_lower_start 
  395 D1:AE3E -  -  -  -  	; ex af,af';'
  396 D1:AE3E -  -  -  -  	; jp dbgl_upper_loop
  397 D1:AE3E -  -  -  -  
  398 D1:AE3E -  -  -  -  
  399 D1:AE3E -  -  -  -  
  400 D1:AE3E -  -  -  -  
  401 D1:AE3E -  -  -  -  
  402 D1:AE3E -  -  -  -  
  403 D1:AE3E -  -  -  -  
  404 D1:AE3E -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  405 D1:AE3E -  -  -  -  ; draw_bg_sprite_line:
  406 D1:AE3E -  -  -  -  	; push hl;save 
  407 D1:AE3E -  -  -  -  	; ld l,(hl);sprite width in px
  408 D1:AE3E -  -  -  -  	; ld h,a ;lines to skip
  409 D1:AE3E -  -  -  -  	; ld a,l;width 
  410 D1:AE3E -  -  -  -  	; mlt hl;widt*lines skipped 
  411 D1:AE3E -  -  -  -  	; pop bc 
  412 D1:AE3E -  -  -  -  	; add hl,bc;skip to target line data 
  413 D1:AE3E -  -  -  -  	; inc hl 
  414 D1:AE3E -  -  -  -  	;hl is pointing to start of line data 
  415 D1:AE3E -  -  -  -  	; sra a;divide width by 2 
  416 D1:AE3E -  -  -  -  	; ld b,a;b holds number of loops 
  417 D1:AE3E -  -  -  -  ; dbgsl_loop:
  418 D1:AE3E -  -  -  -  	; ld a,(de); load vram data 
  419 D1:AE3E -  -  -  -  	; and (hl);and with mask 
  420 D1:AE3E -  -  -  -  	; inc hl ;to color data 
  421 D1:AE3E -  -  -  -  	; or (hl);or w color data 
  422 D1:AE3E -  -  -  -  	; ld (de),a;write to vram  
  423 D1:AE3E -  -  -  -  	; inc de
  424 D1:AE3E -  -  -  -  	; inc hl;to mask data
  425 D1:AE3E -  -  -  -  	; djnz dbgsl_loop
  426 D1:AE3E -  -  -  -  	; ret 
  427 D1:AE3E -  -  -  -  	
  428 D1:AE3E -  -  -  -  
  429 D1:AE3E -  -  -  -  
  430 D1:AE3E -  -  -  -  
  431 D1:AE3E -  -  -  -  
  432 D1:AE3E -  -  -  -  
  433 D1:AE3E -  -  -  -  
  434 D1:AE3E -  -  -  -  
  435 D1:AE3E -  -  -  -  
  436 D1:AE3E -  -  -  -  
  437 D1:AE3E -  -  -  -  
  438 D1:AE3E -  -  -  -  
  439 D1:AE3E -  -  -  -  
Listing for file "ascent.asm"
  519 D1:AE3E -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:AE3E -  -  -  -  
    2 D1:AE3E -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:AE3E -  -  -  -  setup_sprite_bottom_cut:
    4 D1:AE3E 1B -  -  -  	dec de
    5 D1:AE3F 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:AE43 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:AE44 E5 -  -  -  	push hl ;save data 
    8 D1:AE45 09 -  -  -  	add hl,bc
    9 D1:AE46 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:AE47 E1 -  -  -  	pop hl ;return to start of data
   11 D1:AE48 4E -  -  -  	ld c,(hl) ;height
   12 D1:AE49 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:AE4A C9 -  -  -  	ret 
   14 D1:AE4B -  -  -  -  
   15 D1:AE4B -  -  -  -  setup_sprite_top_cut:
   16 D1:AE4B 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:AE4C 01 00 00 00 	ld bc,0
   18 D1:AE50 4F -  -  -  	ld c,a ;lines to skip (1 indexed)
   19 D1:AE51 D5 -  -  -  	push de
   20 D1:AE52 11 00 00 00 	ld de,0
   21 D1:AE56 E5 -  -  -  	push hl
   22 D1:AE57 5E -  -  -  	ld e,(hl);height
   23 D1:AE58 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:AE59 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:AE5A E1 -  -  -  	pop hl;start of data
   26 D1:AE5B 19 -  -  -  	add hl,de
   27 D1:AE5C 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:AE5D 23 -  -  -  	inc hl;hl is pixel data
   29 D1:AE5E D1 -  -  -  	pop de;back to vram
   30 D1:AE5F 79 -  -  -  	ld a,c;loops to skip
   31 D1:AE60 C9 -  -  -  	ret 
   32 D1:AE61 -  -  -  -  
   33 D1:AE61 -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:AE61 -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:AE61 1B -  -  -  	dec de
   36 D1:AE62 01 00 00 00 	ld bc,0
   37 D1:AE66 4F -  -  -  	ld c,a ;line to draw
   38 D1:AE67 D5 -  -  -  	push de ;save vram 
   39 D1:AE68 11 00 00 00 	ld de,0
   40 D1:AE6C E5 -  -  -  	push hl
   41 D1:AE6D 5E -  -  -  	ld e,(hl);height
   42 D1:AE6E 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:AE6F 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:AE70 23 -  -  -  	inc hl 
   45 D1:AE71 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:AE72 E1 -  -  -  	pop hl;start of data
   47 D1:AE73 19 -  -  -  	add hl,de
   48 D1:AE74 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:AE75 D1 -  -  -  	pop de;back to vram
   50 D1:AE76 79 -  -  -  	ld a,c;loops to skip
   51 D1:AE77 C9 -  -  -  	ret 
   52 D1:AE78 -  -  -  -  
   53 D1:AE78 -  -  -  -  
   54 D1:AE78 -  -  -  -  
   55 D1:AE78 -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:AE78 3C -  -  -  	inc a 
   57 D1:AE79 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:AE79 -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:AE79 CD 3E AE D1 	call setup_sprite_bottom_cut
   60 D1:AE7D 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:AE7E 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:AE7F EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:AE80 C3 C7 AE D1 	jp dfgs_loop
   64 D1:AE84 -  -  -  -  
   65 D1:AE84 -  -  -  -  
   66 D1:AE84 -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:AE84 -  -  -  -  draw_fast_sprite_single_line:
   68 D1:AE84 B7 -  -  -  	or a 
   69 D1:AE85 CA 78 AE D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:AE89 -  -  -  -  	;we know a is not 0 here 
   71 D1:AE89 CD 61 AE D1 	call setup_sprite_single_line
   72 D1:AE8D -  -  -  -  	
   73 D1:AE8D C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AE8E 01 00 00 00 	ld bc,0
   75 D1:AE92 -  -  -  -  	
   76 D1:AE92 C3 9F AE D1 	jp draw_fast_sprite_top_loop 
   77 D1:AE96 -  -  -  -  
   78 D1:AE96 -  -  -  -  
   79 D1:AE96 -  -  -  -  
   80 D1:AE96 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (1 indexed)
   81 D1:AE96 -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AE96 CD 4B AE D1 	call setup_sprite_top_cut
   83 D1:AE9A C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AE9B 01 00 00 00 	ld bc,0 
   85 D1:AE9F -  -  -  -  	
   86 D1:AE9F -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AE9F 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AEA0 EB -  -  -  	ex de,hl;hl is vram
   89 D1:AEA1 09 -  -  -  	add hl,bc
   90 D1:AEA2 EB -  -  -  	ex de,hl;hl is data
   91 D1:AEA3 23 -  -  -  	inc hl
   92 D1:AEA4 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AEA5 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AEA6 EB -  -  -  	ex de,hl;hl is vram
   95 D1:AEA7 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AEA8 13 -  -  -  	inc de
   97 D1:AEA9 EB -  -  -  	ex de,hl;hl is data
   98 D1:AEAA 3D -  -  -  	dec a
   99 D1:AEAB C2 9F AE D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AEAF -  -  -  -  	
  101 D1:AEAF -  -  -  -  	
  102 D1:AEAF C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AEB0 78 -  -  -  	ld a,b
  104 D1:AEB1 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AEB2 -  -  -  -  		
  106 D1:AEB2 01 00 00 00 	ld bc,0
  107 D1:AEB6 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AEB7 EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AEB8 C3 C7 AE D1 	jp dfgs_loop
  110 D1:AEBC -  -  -  -  
  111 D1:AEBC -  -  -  -  
  112 D1:AEBC -  -  -  -  ;de = vram , hl = data
  113 D1:AEBC -  -  -  -  draw_fast_sprite_full:
  114 D1:AEBC 1B -  -  -  	dec de
  115 D1:AEBD 01 00 00 00 	ld bc,0
  116 D1:AEC1 4E -  -  -  	ld c,(hl);height
  117 D1:AEC2 09 -  -  -  	add hl,bc
  118 D1:AEC3 7E -  -  -  	ld a,(hl);total loops
  119 D1:AEC4 23 -  -  -  	inc hl
  120 D1:AEC5 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AEC6 EB -  -  -  	ex de,hl
  122 D1:AEC7 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AEC7 -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AEC7 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AEC8 EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AEC9 23 -  -  -  	inc hl
  127 D1:AECA 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AECB 23 -  -  -  	inc hl
  129 D1:AECC ED B0 -  -  	ldir
  130 D1:AECE 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AECF EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AED0 3D -  -  -  	dec a
  133 D1:AED1 C2 C7 AE D1 	jp nz,dfgs_loop
  134 D1:AED5 C9 -  -  -  	ret
  135 D1:AED6 -  -  -  -  	
  136 D1:AED6 -  -  -  -  	
  137 D1:AED6 -  -  -  -  	
  138 D1:AED6 -  -  -  -  	
  139 D1:AED6 -  -  -  -  
  140 D1:AED6 -  -  -  -  
  141 D1:AED6 -  -  -  -  ;hl = data, de = vram
  142 D1:AED6 -  -  -  -  draw_slow_sprite_full:
  143 D1:AED6 01 00 00 00 	ld bc,0
  144 D1:AEDA 4E -  -  -  	ld c,(hl);height
  145 D1:AEDB 09 -  -  -  	add hl,bc
  146 D1:AEDC 7E -  -  -  	ld a,(hl);num loops
  147 D1:AEDD 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AEDE D9 -  -  -  	exx;into shadow 
  149 D1:AEDF 47 -  -  -  	ld b,a ;number of loops
  150 D1:AEE0 -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AEE0 -  -  -  -  dsfgs_line_loop:
  152 D1:AEE0 D9 -  -  -  	exx;out of shadow
  153 D1:AEE1 23 -  -  -  	inc hl;gap length
  154 D1:AEE2 4E -  -  -  	ld c,(hl);gap length
  155 D1:AEE3 EB -  -  -  	ex de,hl;hl is vram
  156 D1:AEE4 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AEE5 EB -  -  -  	ex de,hl;hl is data
  158 D1:AEE6 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AEE7 1A -  -  -  	ld a,(de);vram data
  160 D1:AEE8 A6 -  -  -  	and (hl)
  161 D1:AEE9 23 -  -  -  	inc hl;pixel data
  162 D1:AEEA B6 -  -  -  	or (hl)
  163 D1:AEEB 12 -  -  -  	ld (de),a
  164 D1:AEEC 23 -  -  -  	inc hl;ldir length
  165 D1:AEED -  -  -  -  	
  166 D1:AEED 13 -  -  -  	inc de;move to next pixel
  167 D1:AEEE -  -  -  -  	
  168 D1:AEEE 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AEEF 23 -  -  -  	inc hl;data
  170 D1:AEF0 4F -  -  -  	ld c,a
  171 D1:AEF1 B7 -  -  -  	or a
  172 D1:AEF2 CA F8 AE D1 	jp z,dsfgs_ldir_skip
  173 D1:AEF6 ED B0 -  -  	ldir
  174 D1:AEF8 -  -  -  -  dsfgs_ldir_skip:
  175 D1:AEF8 1A -  -  -  	ld a,(de);vram data
  176 D1:AEF9 A6 -  -  -  	and (hl)
  177 D1:AEFA 23 -  -  -  	inc hl;pixel data
  178 D1:AEFB B6 -  -  -  	or (hl)
  179 D1:AEFC 12 -  -  -  	ld (de),a
  180 D1:AEFD -  -  -  -  	
  181 D1:AEFD D9 -  -  -  	exx ;into shadow
  182 D1:AEFE 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AF00 D9 -  -  -  	exx ;out 
  184 D1:AF01 C9 -  -  -  	ret
  185 D1:AF02 -  -  -  -  
  186 D1:AF02 -  -  -  -  
  187 D1:AF02 -  -  -  -  
  188 D1:AF02 -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AF02 -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AF02 -  -  -  -  
  191 D1:AF02 B7 -  -  -  	or a 
  192 D1:AF03 CA 40 AF D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AF07 -  -  -  -  	;we know a is not 0 here
  194 D1:AF07 CD 61 AE D1 	call setup_sprite_single_line
  195 D1:AF0B C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AF0C 01 00 00 00 	ld bc,0
  197 D1:AF10 -  -  -  -  	
  198 D1:AF10 C3 1D AF D1 	jp slow_sprite_data_traverse 
  199 D1:AF14 -  -  -  -  	
  200 D1:AF14 -  -  -  -  
  201 D1:AF14 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:AF14 -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:AF14 CD 4B AE D1 	call setup_sprite_top_cut
  204 D1:AF18 C5 -  -  -  	push bc;save total and skipped loops
  205 D1:AF19 01 00 00 00 	ld bc,0
  206 D1:AF1D -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:AF1D -  -  -  -  slow_sprite_data_traverse:
  208 D1:AF1D 4E -  -  -  	ld c,(hl);gap length
  209 D1:AF1E EB -  -  -  	ex de,hl;hl is vram
  210 D1:AF1F 09 -  -  -  	add hl,bc
  211 D1:AF20 EB -  -  -  	ex de,hl
  212 D1:AF21 -  -  -  -  	
  213 D1:AF21 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:AF22 23 -  -  -  	inc hl
  215 D1:AF23 23 -  -  -  	inc hl;ldir length
  216 D1:AF24 4E -  -  -  	ld c,(hl)
  217 D1:AF25 09 -  -  -  	add hl,bc
  218 D1:AF26 EB -  -  -  	ex de,hl
  219 D1:AF27 09 -  -  -  	add hl,bc
  220 D1:AF28 EB -  -  -  	ex de,hl
  221 D1:AF29 13 -  -  -  	inc de;inc for leading pix 
  222 D1:AF2A 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:AF2B 23 -  -  -  	inc hl
  224 D1:AF2C 23 -  -  -  	inc hl;gap length
  225 D1:AF2D -  -  -  -  	
  226 D1:AF2D 3D -  -  -  	dec a 
  227 D1:AF2E C2 1D AF D1 	jp nz,slow_sprite_data_traverse
  228 D1:AF32 -  -  -  -  
  229 D1:AF32 -  -  -  -  
  230 D1:AF32 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:AF33 78 -  -  -  	ld a,b
  232 D1:AF34 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:AF35 01 00 00 00 	ld bc,0;clear bc 
  234 D1:AF39 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:AF3A D9 -  -  -  	exx ;toshadow
  236 D1:AF3B 47 -  -  -  	ld b,a 
  237 D1:AF3C C3 E0 AE D1 	jp dsfgs_line_loop
  238 D1:AF40 -  -  -  -  	
  239 D1:AF40 -  -  -  -  	
  240 D1:AF40 -  -  -  -  	
  241 D1:AF40 -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:AF40 3C -  -  -  	inc a 
  243 D1:AF41 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:AF41 -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:AF41 -  -  -  -  
  246 D1:AF41 CD 3E AE D1 	call setup_sprite_bottom_cut
  247 D1:AF45 -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:AF45 D9 -  -  -  	exx ;toshadow
  249 D1:AF46 47 -  -  -  	ld b,a
  250 D1:AF47 C3 E0 AE D1 	jp dsfgs_line_loop
  251 D1:AF4B -  -  -  -  
  252 D1:AF4B -  -  -  -  
  253 D1:AF4B -  -  -  -  
  254 D1:AF4B -  -  -  -  
  255 D1:AF4B -  -  -  -  
  256 D1:AF4B -  -  -  -  
  257 D1:AF4B -  -  -  -  
  258 D1:AF4B -  -  -  -  
  259 D1:AF4B -  -  -  -  
  260 D1:AF4B -  -  -  -  
  261 D1:AF4B -  -  -  -  
  262 D1:AF4B -  -  -  -  
  263 D1:AF4B -  -  -  -  
  264 D1:AF4B -  -  -  -  
  265 D1:AF4B -  -  -  -  
  266 D1:AF4B -  -  -  -  
  267 D1:AF4B -  -  -  -  
  268 D1:AF4B -  -  -  -  
  269 D1:AF4B -  -  -  -  
  270 D1:AF4B -  -  -  -  
  271 D1:AF4B -  -  -  -  
  272 D1:AF4B -  -  -  -  
  273 D1:AF4B -  -  -  -  
  274 D1:AF4B -  -  -  -  
  275 D1:AF4B -  -  -  -  
  276 D1:AF4B -  -  -  -  
  277 D1:AF4B -  -  -  -  
  278 D1:AF4B -  -  -  -  
  279 D1:AF4B -  -  -  -  
  280 D1:AF4B -  -  -  -  
  281 D1:AF4B -  -  -  -  
  282 D1:AF4B -  -  -  -  
  283 D1:AF4B -  -  -  -  
  284 D1:AF4B -  -  -  -  
  285 D1:AF4B -  -  -  -  
  286 D1:AF4B -  -  -  -  
  287 D1:AF4B -  -  -  -   
  288 D1:AF4B -  -  -  -  
  289 D1:AF4B -  -  -  -  
  290 D1:AF4B -  -  -  -  
  291 D1:AF4B -  -  -  -  
  292 D1:AF4B -  -  -  -  
  293 D1:AF4B -  -  -  -  
  294 D1:AF4B -  -  -  -  
  295 D1:AF4B -  -  -  -  
  296 D1:AF4B -  -  -  -  
  297 D1:AF4B -  -  -  -  
  298 D1:AF4B -  -  -  -  
  299 D1:AF4B -  -  -  -  
  300 D1:AF4B -  -  -  -  
  301 D1:AF4B -  -  -  -  
  302 D1:AF4B -  -  -  -  
  303 D1:AF4B -  -  -  -  
  304 D1:AF4B -  -  -  -  
  305 D1:AF4B -  -  -  -  
  306 D1:AF4B -  -  -  -  
  307 D1:AF4B -  -  -  -  
  308 D1:AF4B -  -  -  -  
  309 D1:AF4B -  -  -  -  
  310 D1:AF4B -  -  -  -  
  311 D1:AF4B -  -  -  -  
  312 D1:AF4B -  -  -  -  
  313 D1:AF4B -  -  -  -  
  314 D1:AF4B -  -  -  -  
  315 D1:AF4B -  -  -  -  
  316 D1:AF4B -  -  -  -  
  317 D1:AF4B -  -  -  -  
  318 D1:AF4B -  -  -  -  
  319 D1:AF4B -  -  -  -  
  320 D1:AF4B -  -  -  -  
  321 D1:AF4B -  -  -  -  
  322 D1:AF4B -  -  -  -  
  323 D1:AF4B -  -  -  -  
  324 D1:AF4B -  -  -  -  
  325 D1:AF4B -  -  -  -  
  326 D1:AF4B -  -  -  -  
  327 D1:AF4B -  -  -  -  
  328 D1:AF4B -  -  -  -  
  329 D1:AF4B -  -  -  -  
  330 D1:AF4B -  -  -  -  
  331 D1:AF4B -  -  -  -  
  332 D1:AF4B -  -  -  -  
  333 D1:AF4B -  -  -  -  
  334 D1:AF4B -  -  -  -  
  335 D1:AF4B -  -  -  -  
  336 D1:AF4B -  -  -  -  
  337 D1:AF4B -  -  -  -  
  338 D1:AF4B -  -  -  -  
  339 D1:AF4B -  -  -  -  
  340 D1:AF4B -  -  -  -  
  341 D1:AF4B -  -  -  -  
  342 D1:AF4B -  -  -  -  
  343 D1:AF4B -  -  -  -  	
  344 D1:AF4B -  -  -  -  	
Listing for file "ascent.asm"
  520 D1:AF4B -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:AF4B -  -  -  -  
    2 D1:AF4B -  -  -  -  
    3 D1:AF4B -  -  -  -  
    4 D1:AF4B -  -  -  -  
    5 D1:AF4B -  -  -  -  
    6 D1:AF4B -  -  -  -  
    7 D1:AF4B -  -  -  -  
    8 D1:AF4B -  -  -  -  
    9 D1:AF4B -  -  -  -  ;REGISTER USEAGE
   10 D1:AF4B -  -  -  -  ;HL = sprite color data byte
   11 D1:AF4B -  -  -  -  ;C = bit selector for color data 
   12 D1:AF4B -  -  -  -  ;HL' = alpha data byte
   13 D1:AF4B -  -  -  -  ;C' = bit selector for alpha data
   14 D1:AF4B -  -  -  -  ;DE = output sprite data location
   15 D1:AF4B -  -  -  -  ;DE' = loops/line write location 
   16 D1:AF4B -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:AF4B -  -  -  -  
   18 D1:AF4B -  -  -  -  ;SETUP ----------------
   19 D1:AF4B -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:AF4B -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:AF4B -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:AF4B -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:AF4B -  -  -  -  ;------------
   24 D1:AF4B -  -  -  -  
   25 D1:AF4B -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:AF4B -  -  -  -  
   27 D1:AF4B -  -  -  -  
   28 D1:AF4B -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:AF4B -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:AF4B -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:AF4B -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:AF4B -  -  -  -  ;write pixel mask and color data
   33 D1:AF4B -  -  -  -  
   34 D1:AF4B -  -  -  -  ;LDIR ROUTINE
   35 D1:AF4B -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:AF4B -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:AF4B -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:AF4B -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:AF4B -  -  -  -  ;IF FAST, GOTO END
   40 D1:AF4B -  -  -  -  
   41 D1:AF4B -  -  -  -  ;trailing pixels
   42 D1:AF4B -  -  -  -  ;11,10,01 in alpha data 
   43 D1:AF4B -  -  -  -  
   44 D1:AF4B -  -  -  -  ;END AND RESTART
   45 D1:AF4B -  -  -  -  ;Increment loops/line counter
   46 D1:AF4B -  -  -  -  ;check if end of line and write loops/line
   47 D1:AF4B -  -  -  -  
   48 D1:AF4B -  -  -  -  ;store registers and check if interrupt is required
   49 D1:AF4B -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:AF4B -  -  -  -  ;otherwise return to start of loop
   51 D1:AF4B -  -  -  -  
   52 D1:AF4B -  -  -  -  ;
   53 D1:AF4B -  -  -  -  
   54 D1:AF4B -  -  -  -  
   55 D1:AF4B -  -  -  -  
   56 D1:AF4B -  -  -  -  
   57 D1:AF4B -  -  -  -  
   58 D1:AF4B -  -  -  -  
   59 D1:AF4B -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:AF4B -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:AF4B -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:AF4B CB 09 -  -  	rrc c;rlc flip
   63 D1:AF4D D0 -  -  -  	ret nc
   64 D1:AF4E -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:AF4E 23 -  -  -  	inc hl;dec hl flip
   66 D1:AF4F C9 -  -  -  	ret
   67 D1:AF50 -  -  -  -  
   68 D1:AF50 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:AF50 -  -  -  -  
   70 D1:AF50 -  -  -  -  ;IN SHADOW
   71 D1:AF50 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:AF50 -  -  -  -  ;C IS BITMASK
   73 D1:AF50 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:AF50 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:AF50 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:AF50 -  -  -  -  ; next call returns first bit in next row  
   77 D1:AF50 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:AF50 -  -  -  -  	;ld a,$A2;test 
   79 D1:AF50 -  -  -  -  	;call write_a_to_ram
   80 D1:AF50 79 -  -  -  	ld a,c 
   81 D1:AF51 -  -  -  -  	;call write_a_to_ram 
   82 D1:AF51 7E -  -  -  	ld a,(hl)
   83 D1:AF52 -  -  -  -  	;call write_a_to_ram
   84 D1:AF52 -  -  -  -  	
   85 D1:AF52 37 -  -  -  	scf 
   86 D1:AF53 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:AF53 DA 60 AF D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:AF57 -  -  -  -  
   89 D1:AF57 -  -  -  -  	;ld a,$A3
   90 D1:AF57 -  -  -  -  	;call write_a_to_ram 
   91 D1:AF57 -  -  -  -  	
   92 D1:AF57 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:AF59 32 C3 AF D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:AF5D -  -  -  -  	
   95 D1:AF5D 3E 00 -  -  	ld a,0
   96 D1:AF5F C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:AF60 -  -  -  -  
   98 D1:AF60 -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:AF60 -  -  -  -  	
  100 D1:AF60 -  -  -  -  	
  101 D1:AF60 -  -  -  -  	
  102 D1:AF60 -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:AF60 37 -  -  -  	scf
  104 D1:AF61 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:AF61 DA 6E AF D1 	jp c,sdcomp_bit_offset_skip
  106 D1:AF65 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:AF67 32 61 AF D1 	ld (sdcomp_bit_offset),a
  108 D1:AF6B -  -  -  -  	;ld a,$A9
  109 D1:AF6B -  -  -  -  	;call write_a_to_ram
  110 D1:AF6B 3E 00 -  -  	ld a,0
  111 D1:AF6D C9 -  -  -  	ret ;return 0 first bit
  112 D1:AF6E -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:AF6E -  -  -  -  		
  114 D1:AF6E -  -  -  -  	;ld a,$EF
  115 D1:AF6E -  -  -  -  	;call write_a_to_ram
  116 D1:AF6E 7E -  -  -  	ld a,(hl)
  117 D1:AF6F -  -  -  -  	;push af 
  118 D1:AF6F -  -  -  -  	;call write_a_to_ram
  119 D1:AF6F -  -  -  -  	;ld a,c
  120 D1:AF6F -  -  -  -  	;call write_a_to_ram
  121 D1:AF6F -  -  -  -  	;pop af 
  122 D1:AF6F -  -  -  -  	
  123 D1:AF6F -  -  -  -  	
  124 D1:AF6F A1 -  -  -  	and c 
  125 D1:AF70 CD 4B AF D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AF74 -  -  -  -  	;a holds data to return
  127 D1:AF74 -  -  -  -  	;call write_a_to_ram
  128 D1:AF74 37 -  -  -  	scf 
  129 D1:AF75 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AF75 DA 7B AF D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AF79 3E 01 -  -  	ld a,1
  132 D1:AF7B -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AF7B -  -  -  -  	
  134 D1:AF7B -  -  -  -  	
  135 D1:AF7B 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AF7C 3D -  -  -  	dec a 
  137 D1:AF7D -  -  -  -  	;call write_a_to_ram
  138 D1:AF7D C2 A9 AF D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AF81 -  -  -  -  	
  140 D1:AF81 -  -  -  -  	;HAve read last bit in line  
  141 D1:AF81 -  -  -  -  	
  142 D1:AF81 -  -  -  -  	;ld a,$AC;Test
  143 D1:AF81 -  -  -  -  	;call write_a_to_ram;Test
  144 D1:AF81 -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AF81 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AF81 3E 00 -  -  	ld a,0
  147 D1:AF83 3D -  -  -  	dec a 
  148 D1:AF84 32 82 AF D1 	ld (sdcomp_lines_remaining),a
  149 D1:AF88 -  -  -  -  	;call write_a_to_ram
  150 D1:AF88 C2 92 AF D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AF8C -  -  -  -  	;end of last line reached 
  152 D1:AF8C 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AF8E 32 08 B2 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AF92 -  -  -  -  	;ld a,$E9
  155 D1:AF92 -  -  -  -  	;call write_a_to_ram;TEST 
  156 D1:AF92 -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AF92 -  -  -  -  	
  158 D1:AF92 -  -  -  -  
  159 D1:AF92 -  -  -  -  	
  160 D1:AF92 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AF94 32 E3 B1 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AF98 32 53 AF D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AF9C -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AF9C 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AF9D -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AF9D DA A7 AF D1 	jp c,sdcomp_offset_1_skip
  167 D1:AFA1 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AFA3 32 61 AF D1 	ld (sdcomp_bit_offset),a
  169 D1:AFA7 -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AFA7 -  -  -  -  	
  171 D1:AFA7 -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AFA7 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AFA9 -  -  -  -  	
  174 D1:AFA9 -  -  -  -  	;call write_a_to_ram
  175 D1:AFA9 -  -  -  -  	
  176 D1:AFA9 -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AFA9 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AFAA -  -  -  -  	
  179 D1:AFAA -  -  -  -  	;push af ;testing
  180 D1:AFAA -  -  -  -  	;ld a,$A0
  181 D1:AFAA -  -  -  -  	;call write_a_to_ram
  182 D1:AFAA -  -  -  -  	;pop af 
  183 D1:AFAA -  -  -  -  	;call write_a_to_ram
  184 D1:AFAA -  -  -  -  	
  185 D1:AFAA C9 -  -  -  	ret 
  186 D1:AFAB -  -  -  -  	
  187 D1:AFAB -  -  -  -  
  188 D1:AFAB -  -  -  -  
  189 D1:AFAB -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AFAB -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AFAB -  -  -  -  	;ld a,$A1
  192 D1:AFAB -  -  -  -  	;call write_a_to_ram
  193 D1:AFAB -  -  -  -  	
  194 D1:AFAB -  -  -  -  	;ld a,c ;test
  195 D1:AFAB -  -  -  -  	;call write_a_to_ram 
  196 D1:AFAB -  -  -  -  	;ld a,(hl) ;test
  197 D1:AFAB -  -  -  -  	;call write_a_to_ram
  198 D1:AFAB -  -  -  -  	
  199 D1:AFAB 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AFAD 32 C3 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AFB1 -  -  -  -  	
  202 D1:AFB1 CD 50 AF D1 	call sdcomp_get_next_alpha
  203 D1:AFB5 B7 -  -  -  	or a 
  204 D1:AFB6 CA C0 AF D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AFBA 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AFBC -  -  -  -  	;call write_a_to_ram
  207 D1:AFBC C3 CF AF D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AFC0 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AFC0 3E 00 -  -  	ld a,0
  210 D1:AFC2 -  -  -  -  	
  211 D1:AFC2 37 -  -  -  	scf 
  212 D1:AFC3 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AFC3 DA CF AF D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AFC7 F5 -  -  -  	push af 
  215 D1:AFC8 -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AFC8 -  -  -  -  	
  217 D1:AFC8 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AFCA 32 EA B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AFCE -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AFCE -  -  -  -  	;ld a,$A4
  221 D1:AFCE -  -  -  -  	;call write_a_to_ram
  222 D1:AFCE F1 -  -  -  	pop af 
  223 D1:AFCF -  -  -  -  	
  224 D1:AFCF -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AFCF -  -  -  -  
  226 D1:AFCF -  -  -  -  	
  227 D1:AFCF 32 E5 AF D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AFD3 -  -  -  -  	
  229 D1:AFD3 CD 50 AF D1 	call sdcomp_get_next_alpha
  230 D1:AFD7 B7 -  -  -  	or a 
  231 D1:AFD8 CA E2 AF D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AFDC 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AFDE C3 E4 AF D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AFE2 -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AFE2 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AFE4 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AFE4 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AFE4 F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AFE6 -  -  -  -  	
  240 D1:AFE6 C9 -  -  -  	ret 
  241 D1:AFE7 -  -  -  -  	
  242 D1:AFE7 -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AFE7 -  -  -  -  
  244 D1:AFE7 -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AFE7 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AFE7 CD F0 AF D1 	call sdcomp_get_next_color
  247 D1:AFEB 0F -  -  -  	rrca 
  248 D1:AFEC 0F -  -  -  	rrca 
  249 D1:AFED 0F -  -  -  	rrca 
  250 D1:AFEE 0F -  -  -  	rrca
  251 D1:AFEF C9 -  -  -  	ret 
  252 D1:AFF0 -  -  -  -  
  253 D1:AFF0 -  -  -  -  
  254 D1:AFF0 -  -  -  -  
  255 D1:AFF0 -  -  -  -  ;bit orders
  256 D1:AFF0 -  -  -  -  ;	noflip   flip 
  257 D1:AFF0 -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AFF0 -  -  -  -  ;3bpp 210	 012
  259 D1:AFF0 -  -  -  -  ;2bpp 10	 01
  260 D1:AFF0 -  -  -  -  ;1bpp 0		 0
  261 D1:AFF0 -  -  -  -  
  262 D1:AFF0 -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AFF0 -  -  -  -  sdcomp_get_next_color:
  264 D1:AFF0 D5 -  -  -  	push de ;save data write location
  265 D1:AFF1 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AFF3 -  -  -  -  	
  267 D1:AFF3 37 -  -  -  	scf
  268 D1:AFF4 -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AFF4 D2 3E B0 D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AFF8 -  -  -  -  	
  271 D1:AFF8 -  -  -  -  	;ld a,$C1
  272 D1:AFF8 -  -  -  -  	;call write_a_to_ram
  273 D1:AFF8 -  -  -  -  	
  274 D1:AFF8 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AFF9 -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AFF9 A1 -  -  -  	and c
  277 D1:AFFA -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AFFA CD 4B AF D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:AFFE B7 -  -  -  	or a
  280 D1:AFFF CA 05 B0 D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:B003 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:B003 CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:B005 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:B005 -  -  -  -  	
  285 D1:B005 37 -  -  -  	scf
  286 D1:B006 -  -  -  -  sdcomp_1bpc .equ $
  287 D1:B006 D2 3E B0 D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:B00A -  -  -  -  
  289 D1:B00A -  -  -  -  	;ld a,$C2
  290 D1:B00A -  -  -  -  	;call write_a_to_ram
  291 D1:B00A -  -  -  -  	
  292 D1:B00A 7E -  -  -  	ld a,(hl)
  293 D1:B00B -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:B00B A1 -  -  -  	and c 
  295 D1:B00C -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:B00C CD 4B AF D1 	call sdcomp_next_in_bitstream
  297 D1:B010 B7 -  -  -  	or a
  298 D1:B011 CA 17 B0 D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:B015 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:B015 CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:B017 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:B017 -  -  -  -  	
  303 D1:B017 37 -  -  -  	scf
  304 D1:B018 -  -  -  -  sdcomp_2bpc .equ $ ;if 2bpc jump to end
  305 D1:B018 D2 3E B0 D1 	jp nc,sdcomp_get_color_from_index
  306 D1:B01C -  -  -  -  	
  307 D1:B01C 7E -  -  -  	ld a,(hl)
  308 D1:B01D A1 -  -  -  	and c 
  309 D1:B01E CD 4B AF D1 	call sdcomp_next_in_bitstream
  310 D1:B022 B7 -  -  -  	or a
  311 D1:B023 CA 29 B0 D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:B027 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:B027 CB D3 -  -  	set 2,e 
  314 D1:B029 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:B029 -  -  -  -  	
  316 D1:B029 37 -  -  -  	scf
  317 D1:B02A -  -  -  -  sdcomp_3bpc .equ $
  318 D1:B02A D2 3E B0 D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:B02E -  -  -  -  
  320 D1:B02E -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:B02E 7E -  -  -  	ld a,(hl)
  322 D1:B02F A1 -  -  -  	and c 
  323 D1:B030 CD 4B AF D1 	call sdcomp_next_in_bitstream
  324 D1:B034 B7 -  -  -  	or a
  325 D1:B035 CA 3B B0 D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:B039 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:B039 CB DB -  -  	set 3,e 
  328 D1:B03B -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:B03B -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:B03B 7B -  -  -  	ld a,e 
  331 D1:B03C D1 -  -  -  	pop de 
  332 D1:B03D C9 -  -  -  	ret 
  333 D1:B03E -  -  -  -  
  334 D1:B03E -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:B03E -  -  -  -  	
  336 D1:B03E -  -  -  -  	;ld a,$DD
  337 D1:B03E -  -  -  -  	;call write_a_to_ram
  338 D1:B03E -  -  -  -  	;ld a,e 
  339 D1:B03E -  -  -  -  	;call write_a_to_ram
  340 D1:B03E -  -  -  -  	
  341 D1:B03E -  -  -  -  	
  342 D1:B03E CB 53 -  -  	bit 2,e 
  343 D1:B040 CA 62 B0 D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:B044 -  -  -  -  	
  345 D1:B044 -  -  -  -  	;Bit 2 = 1 
  346 D1:B044 CB 4B -  -  	bit 1,e 
  347 D1:B046 CA 56 B0 D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:B04A -  -  -  -  
  349 D1:B04A -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:B04A -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:B04A 3E 00 -  -  	ld a,0
  352 D1:B04C CB 43 -  -  	bit 0,e 
  353 D1:B04E CA 84 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:B052 C3 80 B0 D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:B056 -  -  -  -  
  356 D1:B056 -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:B056 -  -  -  -  	;2 = 1 1 = 0 
  358 D1:B056 -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:B056 3E 00 -  -  	ld a,0
  360 D1:B058 CB 43 -  -  	bit 0,e 
  361 D1:B05A CA 84 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:B05E C3 80 B0 D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:B062 -  -  -  -  	
  364 D1:B062 -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:B062 -  -  -  -  	;bit 2 was 0 
  366 D1:B062 CB 4B -  -  	bit 1,e 
  367 D1:B064 CA 74 B0 D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:B068 -  -  -  -  	
  369 D1:B068 -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:B068 -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:B068 3E 00 -  -  	ld a,0
  372 D1:B06A CB 43 -  -  	bit 0,e 
  373 D1:B06C CA 84 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:B070 C3 80 B0 D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:B074 -  -  -  -  	
  376 D1:B074 -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:B074 -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:B074 -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:B074 3E 00 -  -  	ld a,0
  380 D1:B076 -  -  -  -  	
  381 D1:B076 CB 43 -  -  	bit 0,e 
  382 D1:B078 CA 84 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:B07C C3 80 B0 D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:B080 -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:B080 E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:B082 D1 -  -  -  	pop de 
  387 D1:B083 -  -  -  -  	
  388 D1:B083 -  -  -  -  	;push af 
  389 D1:B083 -  -  -  -  	;ld a,$C0
  390 D1:B083 -  -  -  -  	;call write_a_to_ram
  391 D1:B083 -  -  -  -  	;pop af 
  392 D1:B083 -  -  -  -  	;call write_a_to_ram
  393 D1:B083 -  -  -  -  	
  394 D1:B083 C9 -  -  -  	ret 
  395 D1:B084 -  -  -  -  	
  396 D1:B084 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:B084 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:B086 0F -  -  -  	rrca 
  399 D1:B087 0F -  -  -  	rrca 
  400 D1:B088 0F -  -  -  	rrca 
  401 D1:B089 0F -  -  -  	rrca 
  402 D1:B08A D1 -  -  -  	pop de 
  403 D1:B08B -  -  -  -  	
  404 D1:B08B -  -  -  -  	;push af 
  405 D1:B08B -  -  -  -  	;ld a,$C0
  406 D1:B08B -  -  -  -  	;call write_a_to_ram
  407 D1:B08B -  -  -  -  	;pop af 
  408 D1:B08B -  -  -  -  	;call write_a_to_ram
  409 D1:B08B -  -  -  -  	
  410 D1:B08B C9 -  -  -  	ret 
  411 D1:B08C -  -  -  -  
  412 D1:B08C -  -  -  -  
  413 D1:B08C -  -  -  -  
  414 D1:B08C -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:B08C -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:B08C -  -  -  -  ;in shadow ,destroys a
  417 D1:B08C -  -  -  -  sdcomp_traverse_line_data:
  418 D1:B08C D9 -  -  -  	exx ;OUT 
  419 D1:B08D -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:B08D 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:B091 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:B091 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:B093 D9 -  -  -  	exx;toshadow 
  424 D1:B094 -  -  -  -  	
  425 D1:B094 -  -  -  -  	;load end of previous alpha data line 
  426 D1:B094 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:B094 21 00 00 00 	ld hl,0
  428 D1:B098 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:B098 0E 00 -  -  	ld c,0
  430 D1:B09A -  -  -  -  sdcomp_traverse_initial:
  431 D1:B09A D5 -  -  -  	push de
  432 D1:B09B -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:B09B 1E 00 -  -  	ld e, 0
  434 D1:B09D -  -  -  -  	;e holds sprite width 
  435 D1:B09D -  -  -  -  	
  436 D1:B09D -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:B09D -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:B09D CB 09 -  -  	rrc c 
  439 D1:B09F D2 A4 B0 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:B0A3 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:B0A4 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:B0A4 7E -  -  -  	ld a,(hl)
  443 D1:B0A5 A1 -  -  -  	and c ;read alpha data 
  444 D1:B0A6 -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:B0A6 CA BC B0 D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:B0AA D9 -  -  -  	exx;out of shadow 
  447 D1:B0AB -  -  -  -  
  448 D1:B0AB CB 09 -  -  	rrc c ;rotate mask
  449 D1:B0AD -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:B0AD CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:B0AF -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:B0AF CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:B0B1 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:B0B1 CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:B0B3 -  -  -  -  	
  456 D1:B0B3 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:B0B3 79 -  -  -  	ld a,c
  458 D1:B0B4 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:B0B4 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:B0B6 CA BB B0 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:B0BA 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:B0BB -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:B0BB D9 -  -  -  	exx ;toshadow
  464 D1:B0BC -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:B0BC 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:B0BD C2 9D B0 D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:B0C1 D1 -  -  -  	pop de  ;back to write location 
  468 D1:B0C2 -  -  -  -  	;set new end of line pointers 
  469 D1:B0C2 -  -  -  -  	
  470 D1:B0C2 -  -  -  -  	;ld a,$BB 
  471 D1:B0C2 -  -  -  -  	;call write_a_to_ram 
  472 D1:B0C2 -  -  -  -  	;ld a,(hl) 
  473 D1:B0C2 -  -  -  -  	;call write_a_to_ram 
  474 D1:B0C2 -  -  -  -  	;ld a,c 
  475 D1:B0C2 -  -  -  -  	;call write_a_to_ram 
  476 D1:B0C2 -  -  -  -  	
  477 D1:B0C2 -  -  -  -  	
  478 D1:B0C2 22 95 B0 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:B0C6 79 -  -  -  	ld a,c
  480 D1:B0C7 32 99 B0 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:B0CB D9 -  -  -  	exx ;out
  482 D1:B0CC 22 8E B0 D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:B0D0 79 -  -  -  	ld a,c 
  484 D1:B0D1 32 92 B0 D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:B0D5 -  -  -  -  	
  486 D1:B0D5 -  -  -  -  	;ld a,(hl) 
  487 D1:B0D5 -  -  -  -  	;call write_a_to_ram 
  488 D1:B0D5 -  -  -  -  	;ld a,c 
  489 D1:B0D5 -  -  -  -  	;call write_a_to_ram 
  490 D1:B0D5 -  -  -  -  	
  491 D1:B0D5 D9 -  -  -  	exx;to shadow 
  492 D1:B0D6 C9 -  -  -  	ret
  493 D1:B0D7 -  -  -  -  
  494 D1:B0D7 -  -  -  -  
  495 D1:B0D7 -  -  -  -  
  496 D1:B0D7 -  -  -  -  
  497 D1:B0D7 -  -  -  -  
  498 D1:B0D7 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  499 D1:B0D7 -  -  -  -  sdcomp_write_ldir_data_loop:
  500 D1:B0D7 CD F0 AF D1 	call sdcomp_get_next_color
  501 D1:B0DB 47 -  -  -  	ld b,a;first pixel
  502 D1:B0DC CD E7 AF D1 	call sdcomp_get_next_color_leading_nibble
  503 D1:B0E0 B0 -  -  -  	or b
  504 D1:B0E1 -  -  -  -  	
  505 D1:B0E1 -  -  -  -  	
  506 D1:B0E1 12 -  -  -  	ld (de),a;write color data
  507 D1:B0E2 13 -  -  -  	inc de
  508 D1:B0E3 D9 -  -  -  	exx;to shadow
  509 D1:B0E4 05 -  -  -  	dec b;ldir length counter
  510 D1:B0E5 D9 -  -  -  	exx
  511 D1:B0E6 C2 D7 B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  512 D1:B0EA C9 -  -  -  	ret
  513 D1:B0EB -  -  -  -  	
  514 D1:B0EB -  -  -  -  
  515 D1:B0EB -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  516 D1:B0EB -  -  -  -  sdcomp_write_leading_or_end_pixels:
  517 D1:B0EB D5 -  -  -  	push de ;output location	
  518 D1:B0EC 47 -  -  -  	ld b,a;save for later
  519 D1:B0ED CB 67 -  -  	bit 4,a ;check if first pixel has color 
  520 D1:B0EF 3E 00 -  -  	ld a,0
  521 D1:B0F1 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  522 D1:B0F3 CA FD B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  523 D1:B0F7 -  -  -  -  	;has first color
  524 D1:B0F7 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  525 D1:B0F9 CD F0 AF D1 	call sdcomp_get_next_color
  526 D1:B0FD -  -  -  -  sdcomp_leading_pixel_first_skip:
  527 D1:B0FD -  -  -  -  	;a is either $00 or $0color1
  528 D1:B0FD -  -  -  -  	
  529 D1:B0FD 1E FF -  -  	ld e,%11111111;assuming no colors
  530 D1:B0FF -  -  -  -  	
  531 D1:B0FF CB 40 -  -  	bit 0,b;check second pixel alpha
  532 D1:B101 47 -  -  -  	ld b,a;save for later 
  533 D1:B102 3E 00 -  -  	ld a,0
  534 D1:B104 CA 0E B1 D1 	jp z,sdcomp_leading_pixel_second_skip;
  535 D1:B108 -  -  -  -  	;has second color 
  536 D1:B108 CD E7 AF D1 	call sdcomp_get_next_color_leading_nibble
  537 D1:B10C -  -  -  -  	;a = color2 0 
  538 D1:B10C 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  539 D1:B10E -  -  -  -  	
  540 D1:B10E -  -  -  -  sdcomp_leading_pixel_second_skip:
  541 D1:B10E -  -  -  -  	;a is either 00 or c2 0 
  542 D1:B10E -  -  -  -  	;b is either 00 or 0 c1 
  543 D1:B10E B0 -  -  -  	or b 
  544 D1:B10F 47 -  -  -  	ld b,a;final color data
  545 D1:B110 7A -  -  -  	ld a,d 
  546 D1:B111 A3 -  -  -  	and e ;final mask data 
  547 D1:B112 -  -  -  -  	
  548 D1:B112 D1 -  -  -  	pop de;return to pointer 
  549 D1:B113 -  -  -  -  	
  550 D1:B113 12 -  -  -  	ld (de),a;write mask data 
  551 D1:B114 13 -  -  -  	inc de 
  552 D1:B115 78 -  -  -  	ld a,b;color data 
  553 D1:B116 12 -  -  -  	ld (de),a;write color data 
  554 D1:B117 -  -  -  -  	
  555 D1:B117 -  -  -  -  	
  556 D1:B117 -  -  -  -  	
  557 D1:B117 -  -  -  -  	;call write_a_to_ram
  558 D1:B117 -  -  -  -  	
  559 D1:B117 13 -  -  -  	inc de 
  560 D1:B118 C9 -  -  -  	ret 
  561 D1:B119 -  -  -  -  
  562 D1:B119 -  -  -  -  
  563 D1:B119 -  -  -  -  
  564 D1:B119 -  -  -  -  ;ENTRY POINT 
  565 D1:B119 -  -  -  -  
  566 D1:B119 -  -  -  -  
  567 D1:B119 -  -  -  -  ;hl = sprite data start, de = main data decompress location
  568 D1:B119 -  -  -  -  sprite_decompress:
  569 D1:B119 -  -  -  -  
  570 D1:B119 -  -  -  -  
  571 D1:B119 -  -  -  -  	;SETUP ===========================================================================================================
  572 D1:B119 -  -  -  -  
  573 D1:B119 -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  574 D1:B119 -  -  -  -  
  575 D1:B119 -  -  -  -  	;HL pointing to flags registers
  576 D1:B119 -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  577 D1:B119 -  -  -  -  	;set bpc mode 
  578 D1:B119 CB 7E -  -  	bit 7,(hl)
  579 D1:B11B C4 EF B3 D1 	call nz,sdcomp_set_4bpc
  580 D1:B11F CB 76 -  -  	bit 6,(hl)
  581 D1:B121 C4 8C B3 D1 	call nz,sdcomp_set_3bpc 
  582 D1:B125 CB 6E -  -  	bit 5,(hl)
  583 D1:B127 C4 39 B3 D1 	call nz,sdcomp_set_2bpc 
  584 D1:B12B CB 66 -  -  	bit 4,(hl)
  585 D1:B12D C4 04 B3 D1 	call nz,sdcomp_set_1bpc 
  586 D1:B131 CB 5E -  -  	bit 3,(hl)
  587 D1:B133 C4 E9 B2 D1 	call nz,sdcomp_set_0bpc 
  588 D1:B137 CB 56 -  -  	bit 2,(hl)
  589 D1:B139 C4 56 B4 D1 	call nz,sdcomp_set_noalpha
  590 D1:B13D CB 56 -  -  	bit 2,(hl)
  591 D1:B13F CC 67 B4 D1 	call z,sdcomp_reset_noalpha
  592 D1:B143 -  -  -  -  	
  593 D1:B143 -  -  -  -  	
  594 D1:B143 3E 00 -  -  	ld a,0
  595 D1:B145 32 71 B2 D1 	ld (sdcomp_loops_per_line_counter),a ;reset loops counter
  596 D1:B149 3E DA -  -  	ld a,%11011010;jp c 
  597 D1:B14B 32 C3 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  598 D1:B14F -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  599 D1:B14F -  -  -  -  	
  600 D1:B14F 23 -  -  -  	inc hl ;hl points to width in px 
  601 D1:B150 -  -  -  -  	
  602 D1:B150 -  -  -  -  	
  603 D1:B150 7E -  -  -  	ld a,(hl) 
  604 D1:B151 32 9C B0 D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  605 D1:B155 32 A8 AF D1 	ld (sdcomp_sprite_width_2),a
  606 D1:B159 47 -  -  -  	ld b,a;width
  607 D1:B15A 08 -  -  -  	ex af,af' ;'
  608 D1:B15B 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  609 D1:B15C 08 -  -  -  	ex af,af' ;' 
  610 D1:B15D -  -  -  -  
  611 D1:B15D -  -  -  -  
  612 D1:B15D -  -  -  -  sdcomp_offset_2 .equ $ 
  613 D1:B15D 00 -  -  -  	nop ;replace with inc b for offset 
  614 D1:B15E -  -  -  -  
  615 D1:B15E -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  616 D1:B15E 04 -  -  -  	inc b ;round up on odd sprites
  617 D1:B15F CB 38 -  -  	srl b;divide by 2
  618 D1:B161 -  -  -  -  	
  619 D1:B161 -  -  -  -  	
  620 D1:B161 3E A0 -  -  	ld a,160
  621 D1:B163 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  622 D1:B164 32 E8 B1 D1 	ld (sdcomp_gap_btwn_rows),a 
  623 D1:B168 -  -  -  -  	
  624 D1:B168 -  -  -  -  	;call write_a_to_ram
  625 D1:B168 -  -  -  -  	;ld a,$BE
  626 D1:B168 -  -  -  -  	;call write_a_to_ram
  627 D1:B168 -  -  -  -  	;ld a,b 
  628 D1:B168 -  -  -  -  	;call write_a_to_ram
  629 D1:B168 -  -  -  -  	
  630 D1:B168 -  -  -  -  	
  631 D1:B168 7E -  -  -  	ld a,(hl);load width again
  632 D1:B169 -  -  -  -  	
  633 D1:B169 47 -  -  -  	ld b,a 
  634 D1:B16A -  -  -  -  	
  635 D1:B16A -  -  -  -  
  636 D1:B16A 23 -  -  -  	inc hl ;hl points to height 
  637 D1:B16B 7E -  -  -  	ld a,(hl);height
  638 D1:B16C 32 82 AF D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  639 D1:B170 -  -  -  -  	
  640 D1:B170 -  -  -  -  	
  641 D1:B170 -  -  -  -  
  642 D1:B170 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  643 D1:B171 13 -  -  -  	inc de 
  644 D1:B172 -  -  -  -  	
  645 D1:B172 23 -  -  -  	inc hl ;HL points to start of alpha data 
  646 D1:B173 -  -  -  -  
  647 D1:B173 E5 -  -  -  	push hl ;Save alpha data 
  648 D1:B174 -  -  -  -  	
  649 D1:B174 -  -  -  -  	
  650 D1:B174 -  -  -  -  	;Need to find start of color data
  651 D1:B174 -  -  -  -  	;at this point a = height, b = width 
  652 D1:B174 -  -  -  -  	
  653 D1:B174 37 -  -  -  	scf
  654 D1:B175 -  -  -  -  	
  655 D1:B175 -  -  -  -  sdcomp_no_alpha_2 .equ $
  656 D1:B175 D2 8E B1 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  657 D1:B179 -  -  -  -  	
  658 D1:B179 -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  659 D1:B179 -  -  -  -  	
  660 D1:B179 E5 -  -  -  	push hl
  661 D1:B17A 67 -  -  -  	ld h,a;height
  662 D1:B17B 68 -  -  -  	ld l,b;width
  663 D1:B17C ED 6C -  -  	mlt hl;number of pixels
  664 D1:B17E -  -  -  -  	;rounds up to nearest multiple of 8
  665 D1:B17E 2B -  -  -  	dec hl
  666 D1:B17F CB 3C -  -  	srl h
  667 D1:B181 CB 1D -  -  	rr l
  668 D1:B183 CB 3C -  -  	srl h
  669 D1:B185 CB 1D -  -  	rr l 
  670 D1:B187 CB 3C -  -  	srl h 
  671 D1:B189 CB 1D -  -  	rr l 
  672 D1:B18B 23 -  -  -  	inc hl 
  673 D1:B18C C1 -  -  -  	pop bc ;initial hl location
  674 D1:B18D -  -  -  -  	;add number of bytes to skip 
  675 D1:B18D 09 -  -  -  	add hl,bc ;HL points to start of color data 
  676 D1:B18E -  -  -  -  	
  677 D1:B18E -  -  -  -  	
  678 D1:B18E -  -  -  -  	
  679 D1:B18E -  -  -  -  sdcomp_no_alpha_2_skip:
  680 D1:B18E -  -  -  -  
  681 D1:B18E -  -  -  -  	
  682 D1:B18E -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  683 D1:B18E -  -  -  -  
  684 D1:B18E -  -  -  -  	
  685 D1:B18E 47 -  -  -  	ld b,a ;save for after
  686 D1:B18F -  -  -  -  	;GET LOCAL PALETTE DATA
  687 D1:B18F -  -  -  -  	
  688 D1:B18F 37 -  -  -  	scf 
  689 D1:B190 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  690 D1:B190 D2 9A B1 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  691 D1:B194 -  -  -  -  	
  692 D1:B194 7E -  -  -  	ld a,(hl);color data 	
  693 D1:B195 32 75 B0 D1 	ld (sdcomp_indexed_color_data_1),a 
  694 D1:B199 23 -  -  -  	inc hl 
  695 D1:B19A -  -  -  -  	
  696 D1:B19A -  -  -  -  sdcomp_1bpc_1_skip:	
  697 D1:B19A -  -  -  -  
  698 D1:B19A -  -  -  -  
  699 D1:B19A 37 -  -  -  	scf 
  700 D1:B19B -  -  -  -  sdcomp_2bpc_1 .equ $ 
  701 D1:B19B D2 A5 B1 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  702 D1:B19F -  -  -  -  	
  703 D1:B19F 7E -  -  -  	ld a,(hl);color data 
  704 D1:B1A0 32 69 B0 D1 	ld (sdcomp_indexed_color_data_2),a 
  705 D1:B1A4 23 -  -  -  	inc hl 
  706 D1:B1A5 -  -  -  -  	
  707 D1:B1A5 -  -  -  -  sdcomp_2bpc_1_skip:	
  708 D1:B1A5 -  -  -  -  
  709 D1:B1A5 -  -  -  -  
  710 D1:B1A5 37 -  -  -  	scf 
  711 D1:B1A6 -  -  -  -  sdcomp_3bpc_1 .equ $ 
  712 D1:B1A6 DA B6 B1 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  713 D1:B1AA -  -  -  -  	
  714 D1:B1AA 7E -  -  -  	ld a,(hl);color data 
  715 D1:B1AB 32 57 B0 D1 	ld (sdcomp_indexed_color_data_3),a 
  716 D1:B1AF 23 -  -  -  	inc hl 
  717 D1:B1B0 7E -  -  -  	ld a,(hl);color data 
  718 D1:B1B1 32 4B B0 D1 	ld (sdcomp_indexed_color_data_4),a 
  719 D1:B1B5 23 -  -  -  	inc hl 
  720 D1:B1B6 -  -  -  -  	
  721 D1:B1B6 -  -  -  -  sdcomp_3bpc_1_skip:	
  722 D1:B1B6 -  -  -  -  
  723 D1:B1B6 -  -  -  -  	
  724 D1:B1B6 D5 -  -  -  	push de ;loops/line data location
  725 D1:B1B7 EB -  -  -  	ex de,hl
  726 D1:B1B8 78 -  -  -  	ld a,b
  727 D1:B1B9 01 00 00 00 	ld bc,0
  728 D1:B1BD 4F -  -  -  	ld c,a;height 
  729 D1:B1BE 09 -  -  -  	add hl,bc
  730 D1:B1BF EB -  -  -  	ex de,hl;de points to data write location
  731 D1:B1C0 -  -  -  -  	
  732 D1:B1C0 -  -  -  -  	
  733 D1:B1C0 D9 -  -  -  	exx;in to shadow
  734 D1:B1C1 D1 -  -  -  	pop de 
  735 D1:B1C2 E1 -  -  -  	pop hl ;alpha data stored from earlier
  736 D1:B1C3 0E 80 -  -  	ld c,%10000000;alpha mask
  737 D1:B1C5 D9 -  -  -  	exx;out 
  738 D1:B1C6 0E 80 -  -  	ld c,%10000000;color mask
  739 D1:B1C8 -  -  -  -  	
  740 D1:B1C8 -  -  -  -  	;HL now points to pixel color data 
  741 D1:B1C8 -  -  -  -  	;HL' points to pixel alpha data 
  742 D1:B1C8 -  -  -  -  	;C holds color mask
  743 D1:B1C8 -  -  -  -  	;C' holds alpha mask
  744 D1:B1C8 -  -  -  -  	;DE' holds loops/line output data location
  745 D1:B1C8 -  -  -  -  	;DE holds main data output location
  746 D1:B1C8 -  -  -  -  	;A holds height
  747 D1:B1C8 -  -  -  -  	;A' holds bits remaining in row
  748 D1:B1C8 -  -  -  -  
  749 D1:B1C8 -  -  -  -  
  750 D1:B1C8 37 -  -  -  	scf 
  751 D1:B1C9 -  -  -  -  sdcomp_flip_setup .equ $
  752 D1:B1C9 DA D9 B1 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  753 D1:B1CD -  -  -  -  
  754 D1:B1CD -  -  -  -  	
  755 D1:B1CD 2B -  -  -  	dec hl;dec color pointer
  756 D1:B1CE 0E 01 -  -  	ld c, %00000001
  757 D1:B1D0 D9 -  -  -  	exx;to shadow 
  758 D1:B1D1 2B -  -  -  	dec hl;dec alpha pointer
  759 D1:B1D2 0E 01 -  -  	ld c, %00000001;alpha mask
  760 D1:B1D4 CD 9A B0 D1 	call sdcomp_traverse_initial
  761 D1:B1D8 D9 -  -  -  	exx ;out of shadow 
  762 D1:B1D9 -  -  -  -  	
  763 D1:B1D9 -  -  -  -  	
  764 D1:B1D9 -  -  -  -  
  765 D1:B1D9 -  -  -  -  	;TODO jump to BG routine here
  766 D1:B1D9 -  -  -  -  	;END SETUP ======================================================================================================
  767 D1:B1D9 -  -  -  -  	
  768 D1:B1D9 -  -  -  -  	
  769 D1:B1D9 -  -  -  -  sdcomp_find_gap_length:
  770 D1:B1D9 -  -  -  -  	
  771 D1:B1D9 -  -  -  -  	
  772 D1:B1D9 -  -  -  -  	
  773 D1:B1D9 -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  774 D1:B1D9 -  -  -  -  ;this will occur if:
  775 D1:B1D9 -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  776 D1:B1D9 -  -  -  -  ;
  777 D1:B1D9 -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  778 D1:B1D9 -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  779 D1:B1D9 -  -  -  -  	
  780 D1:B1D9 D9 -  -  -  	exx ;to shadow
  781 D1:B1DA -  -  -  -  	
  782 D1:B1DA -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  783 D1:B1DA 06 00 -  -  	ld b,0;00 pairs found 
  784 D1:B1DC 3E 00 -  -  	ld a,0 ;reset
  785 D1:B1DE 32 DB B1 D1 	ld (sdcomp_add_1_gap_length),a 
  786 D1:B1E2 -  -  -  -  
  787 D1:B1E2 -  -  -  -  sdcomp_find_gap_length_loop:
  788 D1:B1E2 -  -  -  -  
  789 D1:B1E2 37 -  -  -  	scf 
  790 D1:B1E3 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  791 D1:B1E3 DA 0C B2 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  792 D1:B1E7 -  -  -  -  	
  793 D1:B1E7 -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  794 D1:B1E7 -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  795 D1:B1E7 3E 00 -  -  	ld a,0
  796 D1:B1E9 80 -  -  -  	add a,b 
  797 D1:B1EA -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  798 D1:B1EA 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  799 D1:B1EB 47 -  -  -  	ld b,a 
  800 D1:B1EC 3E 00 -  -  	ld a,%00000000 ;nop 
  801 D1:B1EE 32 EA B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  802 D1:B1F2 3E DA -  -  	ld a,%11011010;jp c
  803 D1:B1F4 32 53 AF D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  804 D1:B1F8 32 E3 B1 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  805 D1:B1FC -  -  -  -  	
  806 D1:B1FC 37 -  -  -  	scf
  807 D1:B1FD -  -  -  -  sdcomp_flip_traverse .equ $
  808 D1:B1FD D4 8C B0 D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  809 D1:B201 -  -  -  -  		
  810 D1:B201 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  811 D1:B201 3A 71 B2 D1 	ld a,(sdcomp_loops_per_line_counter)
  812 D1:B205 12 -  -  -  	ld (de),a ;write loops/line data 
  813 D1:B206 13 -  -  -  	inc de
  814 D1:B207 -  -  -  -  	
  815 D1:B207 -  -  -  -  	
  816 D1:B207 37 -  -  -  	scf 
  817 D1:B208 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  818 D1:B208 D2 E0 B2 D1 	jp nc,sdcomp_end
  819 D1:B20C -  -  -  -  
  820 D1:B20C -  -  -  -  	
  821 D1:B20C -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  822 D1:B20C CD AB AF D1 	call sdcomp_get_next_alpha_pair
  823 D1:B210 -  -  -  -  	;call write_a_to_ram
  824 D1:B210 04 -  -  -  	inc b 
  825 D1:B211 -  -  -  -  
  826 D1:B211 -  -  -  -  	;push af ;TEST
  827 D1:B211 -  -  -  -  	;ld a,$AB;TEST
  828 D1:B211 -  -  -  -  	;call write_a_to_ram
  829 D1:B211 -  -  -  -  	
  830 D1:B211 -  -  -  -  	;call write_a_to_ram
  831 D1:B211 -  -  -  -  	;pop af ;TEST
  832 D1:B211 -  -  -  -  	
  833 D1:B211 B7 -  -  -  	or a
  834 D1:B212 CA E2 B1 D1 	jp z,sdcomp_find_gap_length_loop
  835 D1:B216 -  -  -  -  	
  836 D1:B216 -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  837 D1:B216 -  -  -  -  	
  838 D1:B216 F5 -  -  -  	push af; save leading pixel alpha data 
  839 D1:B217 -  -  -  -  	;B holds number of 00 pairs + 1
  840 D1:B217 -  -  -  -  	
  841 D1:B217 -  -  -  -  	;ld a,$AA ;test
  842 D1:B217 -  -  -  -  	;call write_a_to_ram
  843 D1:B217 -  -  -  -  	;ld a,b ;test
  844 D1:B217 -  -  -  -  	;call write_a_to_ram
  845 D1:B217 -  -  -  -  	
  846 D1:B217 -  -  -  -  	
  847 D1:B217 -  -  -  -  	
  848 D1:B217 -  -  -  -  	;Write gap length data to output
  849 D1:B217 78 -  -  -  	ld a,b 
  850 D1:B218 D9 -  -  -  	exx;out of shadow 
  851 D1:B219 12 -  -  -  	ld (de),a;GAP LENGTH 
  852 D1:B21A 13 -  -  -  	inc de 
  853 D1:B21B D9 -  -  -  	exx;into shadow 	
  854 D1:B21C -  -  -  -  	
  855 D1:B21C -  -  -  -  	
  856 D1:B21C -  -  -  -  ;LEADING PIXELS ===================================================================================================
  857 D1:B21C F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  858 D1:B21D -  -  -  -  	
  859 D1:B21D 37 -  -  -  	scf 
  860 D1:B21E -  -  -  -  sdcomp_fast_1 .equ $ 
  861 D1:B21E D2 28 B2 D1 	jp nc, sdcomp_ldir_start 
  862 D1:B222 -  -  -  -  	
  863 D1:B222 D9 -  -  -  	exx;out of shadow
  864 D1:B223 CD EB B0 D1 	call sdcomp_write_leading_or_end_pixels
  865 D1:B227 D9 -  -  -  	exx;into shadow 
  866 D1:B228 -  -  -  -  	
  867 D1:B228 -  -  -  -  
  868 D1:B228 -  -  -  -  	
  869 D1:B228 -  -  -  -  ;LDIR ==============================================================================================================	
  870 D1:B228 -  -  -  -  	;Count number of 11 pairs for LDIR section
  871 D1:B228 -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  872 D1:B228 -  -  -  -  	;
  873 D1:B228 -  -  -  -  	
  874 D1:B228 -  -  -  -  	;If ending is 11 -> 00 
  875 D1:B228 -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  876 D1:B228 -  -  -  -  	;Will need to reduce b by 1 
  877 D1:B228 -  -  -  -  	
  878 D1:B228 -  -  -  -  	;If ending is 11 ->01/10
  879 D1:B228 -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  880 D1:B228 -  -  -  -  	
  881 D1:B228 -  -  -  -  sdcomp_ldir_start:
  882 D1:B228 -  -  -  -  
  883 D1:B228 -  -  -  -  ;	ld a, %11010010 ;jp nc 
  884 D1:B228 -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  885 D1:B228 -  -  -  -  
  886 D1:B228 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  887 D1:B22A -  -  -  -  sdcomp_ldir_loop:
  888 D1:B22A CD AB AF D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  889 D1:B22E 04 -  -  -  	inc b 
  890 D1:B22F -  -  -  -  	
  891 D1:B22F -  -  -  -  	;push af 
  892 D1:B22F -  -  -  -  	;ld a,$DE 
  893 D1:B22F -  -  -  -  	;call write_a_to_ram
  894 D1:B22F -  -  -  -  	;pop af
  895 D1:B22F -  -  -  -  	;call write_a_to_ram
  896 D1:B22F -  -  -  -  	
  897 D1:B22F -  -  -  -  ;	scf 
  898 D1:B22F -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  899 D1:B22F -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  900 D1:B22F -  -  -  -  	
  901 D1:B22F EE FF -  -  	xor %11111111 ;flip all bits  (CPL does not set flags :(  )
  902 D1:B231 CA 2A B2 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  903 D1:B235 2F -  -  -  	cpl ; flip back 
  904 D1:B236 -  -  -  -  sdcomp_ldir_loop_end:
  905 D1:B236 -  -  -  -  
  906 D1:B236 -  -  -  -  	
  907 D1:B236 -  -  -  -  	;at this point b holds # 11 pairs +1 
  908 D1:B236 37 -  -  -  	scf 
  909 D1:B237 -  -  -  -  sdcomp_fast_2 .equ $ 
  910 D1:B237 D2 52 B2 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  911 D1:B23B -  -  -  -  
  912 D1:B23B -  -  -  -  	
  913 D1:B23B -  -  -  -  	
  914 D1:B23B 05 -  -  -  	dec b ;b holds # 11 pairs 
  915 D1:B23C CA 65 B2 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  916 D1:B240 B7 -  -  -  	or a
  917 D1:B241 C2 52 B2 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  918 D1:B245 -  -  -  -  	
  919 D1:B245 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  920 D1:B245 -  -  -  -  	
  921 D1:B245 -  -  -  -  	;ld a,$DF
  922 D1:B245 -  -  -  -  	;call write_a_to_ram
  923 D1:B245 -  -  -  -  	
  924 D1:B245 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  925 D1:B245 -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  926 D1:B245 3E 01 -  -  	ld a,1;start w 1 gap len
  927 D1:B247 32 DB B1 D1 	ld (sdcomp_add_1_gap_length),a 
  928 D1:B24B 3E FF -  -  	ld a,$ff;ending pixels 11
  929 D1:B24D -  -  -  -  	
  930 D1:B24D 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  931 D1:B24E CA 65 B2 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  932 D1:B252 -  -  -  -  	;b holds ldir length 
  933 D1:B252 -  -  -  -  	
  934 D1:B252 -  -  -  -  
  935 D1:B252 -  -  -  -  ;b holds ldir length, a holds ending pixels
  936 D1:B252 -  -  -  -  sdcomp_ldir_write:
  937 D1:B252 -  -  -  -  
  938 D1:B252 -  -  -  -  	;b holds 11 pairs found 
  939 D1:B252 -  -  -  -  	
  940 D1:B252 -  -  -  -  	;push af;TEST
  941 D1:B252 -  -  -  -  	;ld a,$DA 
  942 D1:B252 -  -  -  -  	;call write_a_to_ram
  943 D1:B252 -  -  -  -  	;ld a,b 
  944 D1:B252 -  -  -  -  	;call write_a_to_ram
  945 D1:B252 -  -  -  -  	;pop af ;TEST
  946 D1:B252 -  -  -  -  
  947 D1:B252 F5 -  -  -  	push af;save ending pixels
  948 D1:B253 78 -  -  -  	ld a,b
  949 D1:B254 D9 -  -  -  	exx ;out 
  950 D1:B255 12 -  -  -  	ld (de),a;write ldir length
  951 D1:B256 13 -  -  -  	inc de 
  952 D1:B257 CD D7 B0 D1 	call sdcomp_write_ldir_data_loop
  953 D1:B25B -  -  -  -  
  954 D1:B25B F1 -  -  -  	pop af;return ending pixels
  955 D1:B25C -  -  -  -  	
  956 D1:B25C 37 -  -  -  	scf
  957 D1:B25D -  -  -  -  sdcomp_fast_3 .equ $ 
  958 D1:B25D D2 70 B2 D1 	jp nc,sdcomp_inc_loops_per_line ;skip ending pixels
  959 D1:B261 -  -  -  -  	
  960 D1:B261 C3 6C B2 D1 	jp sdcomp_write_end_pixels
  961 D1:B265 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  962 D1:B265 -  -  -  -  
  963 D1:B265 -  -  -  -  
  964 D1:B265 -  -  -  -  	;push af ;TEST
  965 D1:B265 -  -  -  -  	;ld a,$DB
  966 D1:B265 -  -  -  -  	;call write_a_to_ram
  967 D1:B265 -  -  -  -  	;pop af ;TEST
  968 D1:B265 -  -  -  -  	;call write_a_to_ram
  969 D1:B265 -  -  -  -  
  970 D1:B265 F5 -  -  -  	push af;save end pixels
  971 D1:B266 -  -  -  -  	
  972 D1:B266 D9 -  -  -  	exx;out of shadow
  973 D1:B267 3E 00 -  -  	ld a,0
  974 D1:B269 12 -  -  -  	ld (de),a ;write 0 as ldir length
  975 D1:B26A 13 -  -  -  	inc de 
  976 D1:B26B F1 -  -  -  	pop af;return ending pixels
  977 D1:B26C -  -  -  -  
  978 D1:B26C -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  979 D1:B26C -  -  -  -  
  980 D1:B26C -  -  -  -  sdcomp_write_end_pixels:
  981 D1:B26C -  -  -  -  ;not in shadow
  982 D1:B26C -  -  -  -  	
  983 D1:B26C -  -  -  -  	;test
  984 D1:B26C -  -  -  -  	;push af 
  985 D1:B26C -  -  -  -  	;ld a,$E0
  986 D1:B26C -  -  -  -  	;call write_a_to_ram
  987 D1:B26C -  -  -  -  	;pop af 
  988 D1:B26C -  -  -  -  	
  989 D1:B26C -  -  -  -  
  990 D1:B26C CD EB B0 D1 	call sdcomp_write_leading_or_end_pixels
  991 D1:B270 -  -  -  -  	
  992 D1:B270 -  -  -  -  	
  993 D1:B270 -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  994 D1:B270 -  -  -  -  	;ld a,2
  995 D1:B270 -  -  -  -  	;dec a 
  996 D1:B270 -  -  -  -  	;jp z,sdcomp_end
  997 D1:B270 -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  998 D1:B270 -  -  -  -  
  999 D1:B270 -  -  -  -  sdcomp_inc_loops_per_line:	
 1000 D1:B270 -  -  -  -  	;INC LOOP/LINE count
 1001 D1:B270 -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
 1002 D1:B270 3E 00 -  -  	ld a,0;inc number of loops
 1003 D1:B272 3C -  -  -  	inc a 
 1004 D1:B273 32 71 B2 D1 	ld (sdcomp_loops_per_line_counter),a
 1005 D1:B277 -  -  -  -  
 1006 D1:B277 -  -  -  -  
 1007 D1:B277 -  -  -  -  	;jp sdcomp_find_gap_length ;TESTING REMOVE
 1008 D1:B277 -  -  -  -  	
 1009 D1:B277 -  -  -  -  	;Check the timer to see if we need to begin rendering next frame 
 1010 D1:B277 -  -  -  -  	;1090 cycles @ 32768hz ~= 1 frame (1/30s)
 1011 D1:B277 -  -  -  -  	;Should stop decompressions at 1000 cycles?
 1012 D1:B277 -  -  -  -  	; = %00000011, 11101000
 1013 D1:B277 -  -  -  -  sdcomp_clock_check_loop:
 1014 D1:B277 3A 01 00 F2 	ld a,($F20001);128hz clock
 1015 D1:B27B FE 03 -  -  	cp %00000011 ;check if reached 3 
 1016 D1:B27D DA D9 B1 D1 	jp c,sdcomp_find_gap_length ;msb <= 2, can continue  
 1017 D1:B281 3A 00 00 F2 	ld a,($F20000);32768hz clock
 1018 D1:B285 FE E8 -  -  	cp %11101000;check if reached value 
 1019 D1:B287 DA D9 B1 D1 	jp c,sdcomp_find_gap_length ;msb = 3 and lsb < value, can continue
 1020 D1:B28B -  -  -  -  	
 1021 D1:B28B -  -  -  -  	;Past clock threshold, need to stop decompressions
 1022 D1:B28B -  -  -  -  
 1023 D1:B28B -  -  -  -  
 1024 D1:B28B -  -  -  -  	;TODO can prob not need to save (a) register
 1025 D1:B28B -  -  -  -  sdcomp_interrupt:
 1026 D1:B28B -  -  -  -  
 1027 D1:B28B -  -  -  -  
 1028 D1:B28B -  -  -  -  	;not in shadow 
 1029 D1:B28B 22 BD B2 D1 	ld (sdcomp_cont_hl),hl 
 1030 D1:B28F EB -  -  -  	ex de,hl
 1031 D1:B290 22 C1 B2 D1 	ld (sdcomp_cont_de),hl 
 1032 D1:B294 C5 -  -  -  	push bc
 1033 D1:B295 E1 -  -  -  	pop hl
 1034 D1:B296 22 C5 B2 D1 	ld (sdcomp_cont_bc),hl
 1035 D1:B29A 32 C9 B2 D1 	ld (sdcomp_cont_a),a 
 1036 D1:B29E D9 -  -  -  	exx 
 1037 D1:B29F 08 -  -  -  	ex af,af' ;'
 1038 D1:B2A0 22 CD B2 D1 	ld (sdcomp_cont_hlP),hl 
 1039 D1:B2A4 EB -  -  -  	ex de,hl
 1040 D1:B2A5 22 D1 B2 D1 	ld (sdcomp_cont_deP),hl 
 1041 D1:B2A9 C5 -  -  -  	push bc 
 1042 D1:B2AA E1 -  -  -  	pop hl
 1043 D1:B2AB 22 D5 B2 D1 	ld (sdcomp_cont_bcP),hl
 1044 D1:B2AF 32 D9 B2 D1 	ld (sdcomp_cont_aP),a 
 1045 D1:B2B3 -  -  -  -  	
 1046 D1:B2B3 -  -  -  -  	
 1047 D1:B2B3 3E AA -  -  	ld a, $AA
 1048 D1:B2B5 CD 99 AB D1 	call write_a_to_ram
 1049 D1:B2B9 -  -  -  -  	
 1050 D1:B2B9 3E 01 -  -  	ld a,1 ;Return 1 if interrupted
 1051 D1:B2BB C9 -  -  -  	ret 
 1052 D1:B2BC -  -  -  -  	
 1053 D1:B2BC -  -  -  -  sdcomp_continue:
 1054 D1:B2BC -  -  -  -  	;not in shadow 
 1055 D1:B2BC -  -  -  -  sdcomp_cont_hl .equ $ + 1
 1056 D1:B2BC 21 00 00 00 	ld hl,0
 1057 D1:B2C0 -  -  -  -  sdcomp_cont_de .equ $ + 1
 1058 D1:B2C0 11 00 00 00 	ld de,0
 1059 D1:B2C4 -  -  -  -  sdcomp_cont_bc .equ $ + 1
 1060 D1:B2C4 01 00 00 00 	ld bc,0
 1061 D1:B2C8 -  -  -  -  sdcomp_cont_a .equ $ + 1
 1062 D1:B2C8 3E 00 -  -  	ld a,0
 1063 D1:B2CA D9 -  -  -  	exx 
 1064 D1:B2CB 08 -  -  -  	ex af,af' ;'
 1065 D1:B2CC -  -  -  -  sdcomp_cont_hlP .equ $ + 1
 1066 D1:B2CC 21 00 00 00 	ld hl,0
 1067 D1:B2D0 -  -  -  -  sdcomp_cont_deP .equ $ + 1
 1068 D1:B2D0 11 00 00 00 	ld de,0
 1069 D1:B2D4 -  -  -  -  sdcomp_cont_bcP .equ $ + 1
 1070 D1:B2D4 01 00 00 00 	ld bc,0
 1071 D1:B2D8 -  -  -  -  sdcomp_cont_aP .equ $ + 1
 1072 D1:B2D8 3E 00 -  -  	ld a,0	
 1073 D1:B2DA -  -  -  -  	
 1074 D1:B2DA D9 -  -  -  	exx ;out of shadow 
 1075 D1:B2DB 08 -  -  -  	ex af,af' ;'
 1076 D1:B2DC -  -  -  -  
 1077 D1:B2DC C3 D9 B1 D1 	jp sdcomp_find_gap_length
 1078 D1:B2E0 -  -  -  -  
 1079 D1:B2E0 -  -  -  -  	
 1080 D1:B2E0 -  -  -  -  
 1081 D1:B2E0 -  -  -  -  sdcomp_end:
 1082 D1:B2E0 -  -  -  -  	
 1083 D1:B2E0 -  -  -  -  	;ld a,$69
 1084 D1:B2E0 -  -  -  -  	;call write_a_to_ram
 1085 D1:B2E0 -  -  -  -  	
 1086 D1:B2E0 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1087 D1:B2E2 32 08 B2 D1 	ld (sdcomp_end_reached_flag),a 
 1088 D1:B2E6 -  -  -  -  	
 1089 D1:B2E6 3E 00 -  -  	ld a,0 ;return 0 if finished decompressing 
 1090 D1:B2E8 C9 -  -  -  	ret 
 1091 D1:B2E9 -  -  -  -  
 1092 D1:B2E9 -  -  -  -  
 1093 D1:B2E9 -  -  -  -  ;bit orders
 1094 D1:B2E9 -  -  -  -  ;	noflip   flip 
 1095 D1:B2E9 -  -  -  -  ;4bpp 3210 	 0123
 1096 D1:B2E9 -  -  -  -  ;3bpp 210	 012
 1097 D1:B2E9 -  -  -  -  ;2bpp 10	 01
 1098 D1:B2E9 -  -  -  -  ;1bpp 0		 0
 1099 D1:B2E9 -  -  -  -  
 1100 D1:B2E9 -  -  -  -  
 1101 D1:B2E9 -  -  -  -  sdcomp_set_0bpc:
 1102 D1:B2E9 3E DA -  -  	ld a,%11011010;jp c
 1103 D1:B2EB 32 F4 AF D1 	ld (sdcomp_0bpc),a
 1104 D1:B2EF -  -  -  -  	
 1105 D1:B2EF 32 9B B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1106 D1:B2F3 32 A6 B1 D1 	ld (sdcomp_3bpc_1),a 
 1107 D1:B2F7 -  -  -  -  	
 1108 D1:B2F7 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1109 D1:B2F9 32 90 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1110 D1:B2FD 3E 00 -  -  	ld a,%00000000
 1111 D1:B2FF 32 B5 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1112 D1:B303 C9 -  -  -  	ret 
 1113 D1:B304 -  -  -  -  	
 1114 D1:B304 -  -  -  -  sdcomp_set_1bpc:
 1115 D1:B304 3E D2 -  -  	ld a,%11010010;jp nc
 1116 D1:B306 32 F4 AF D1 	ld (sdcomp_0bpc),a
 1117 D1:B30A 3E DA -  -  	ld a,%11011010;jp c
 1118 D1:B30C 32 06 B0 D1 	ld (sdcomp_1bpc),a
 1119 D1:B310 -  -  -  -  	
 1120 D1:B310 32 9B B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1121 D1:B314 32 A6 B1 D1 	ld (sdcomp_3bpc_1),a 
 1122 D1:B318 -  -  -  -  	
 1123 D1:B318 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1124 D1:B31A 32 90 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1125 D1:B31E -  -  -  -  	
 1126 D1:B31E -  -  -  -  	
 1127 D1:B31E 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1128 D1:B320 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1129 D1:B324 -  -  -  -  	
 1130 D1:B324 3E 80 -  -  	ld a,%10000000
 1131 D1:B326 32 B5 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1132 D1:B32A -  -  -  -  	
 1133 D1:B32A 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1134 D1:B32C 32 AE B0 D1 	ld (sdcomp_traverse_2bpp),a
 1135 D1:B330 32 B0 B0 D1 	ld (sdcomp_traverse_3bpp),a
 1136 D1:B334 32 B2 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1137 D1:B338 C9 -  -  -  	ret 
 1138 D1:B339 -  -  -  -  
 1139 D1:B339 -  -  -  -  sdcomp_set_2bpc:
 1140 D1:B339 3E D2 -  -  	ld a,%11010010;jp nc
 1141 D1:B33B 32 F4 AF D1 	ld (sdcomp_0bpc),a
 1142 D1:B33F 32 06 B0 D1 	ld (sdcomp_1bpc),a
 1143 D1:B343 -  -  -  -  	
 1144 D1:B343 3E DA -  -  	ld a,%11011010;jp c
 1145 D1:B345 32 18 B0 D1 	ld (sdcomp_2bpc),a
 1146 D1:B349 -  -  -  -  	
 1147 D1:B349 32 A6 B1 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1148 D1:B34D -  -  -  -  	
 1149 D1:B34D 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1150 D1:B34F 32 90 B1 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1151 D1:B353 32 9B B1 D1 	ld (sdcomp_2bpc_1),a 
 1152 D1:B357 -  -  -  -  	
 1153 D1:B357 37 -  -  -  	scf 
 1154 D1:B358 -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1155 D1:B358 D2 69 B3 D1 	jp nc, sdcomp_2bpc_flip
 1156 D1:B35C -  -  -  -  	
 1157 D1:B35C 3E CB -  -  	ld a,%11001011 ;set 1,e
 1158 D1:B35E 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1159 D1:B362 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1160 D1:B364 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1161 D1:B368 -  -  -  -  	
 1162 D1:B368 C9 -  -  -  	ret 
 1163 D1:B369 -  -  -  -  	
 1164 D1:B369 -  -  -  -  sdcomp_2bpc_flip:
 1165 D1:B369 3E CB -  -  	ld a,%11001011 ;set 1,e
 1166 D1:B36B 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1167 D1:B36F 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1168 D1:B371 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1169 D1:B375 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1170 D1:B377 32 AE B0 D1 	ld (sdcomp_traverse_2bpp),a
 1171 D1:B37B -  -  -  -  
 1172 D1:B37B 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1173 D1:B37D 32 B0 B0 D1 	ld (sdcomp_traverse_3bpp),a
 1174 D1:B381 32 B2 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1175 D1:B385 -  -  -  -  	
 1176 D1:B385 3E C0 -  -  	ld a,%11000000
 1177 D1:B387 32 B5 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1178 D1:B38B C9 -  -  -  	ret 
 1179 D1:B38C -  -  -  -  
 1180 D1:B38C -  -  -  -  
 1181 D1:B38C -  -  -  -  sdcomp_set_3bpc:
 1182 D1:B38C -  -  -  -  	
 1183 D1:B38C 3E D2 -  -  	ld a,%11010010;jp nc
 1184 D1:B38E 32 F4 AF D1 	ld (sdcomp_0bpc),a
 1185 D1:B392 32 06 B0 D1 	ld (sdcomp_1bpc),a
 1186 D1:B396 32 18 B0 D1 	ld (sdcomp_2bpc),a
 1187 D1:B39A -  -  -  -  	
 1188 D1:B39A 3E DA -  -  	ld a,%11011010;jp c
 1189 D1:B39C 32 2A B0 D1 	ld (sdcomp_3bpc),a
 1190 D1:B3A0 -  -  -  -  	
 1191 D1:B3A0 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1192 D1:B3A2 32 90 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1193 D1:B3A6 32 9B B1 D1 	ld (sdcomp_2bpc_1),a 
 1194 D1:B3AA 32 A6 B1 D1 	ld (sdcomp_3bpc_1),a 
 1195 D1:B3AE -  -  -  -  	
 1196 D1:B3AE 37 -  -  -  	scf 
 1197 D1:B3AF -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1198 D1:B3AF D2 C6 B3 D1 	jp nc, sdcomp_3bpc_flip	
 1199 D1:B3B3 -  -  -  -  	
 1200 D1:B3B3 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1201 D1:B3B5 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1202 D1:B3B9 3E CB -  -  	ld a,%11001011 ;set 1,e
 1203 D1:B3BB 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1204 D1:B3BF 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1205 D1:B3C1 32 28 B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1206 D1:B3C5 -  -  -  -  	
 1207 D1:B3C5 C9 -  -  -  	ret 
 1208 D1:B3C6 -  -  -  -  	
 1209 D1:B3C6 -  -  -  -  sdcomp_3bpc_flip:
 1210 D1:B3C6 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1211 D1:B3C8 32 28 B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1212 D1:B3CC 3E CB -  -  	ld a,%11001011 ;set 1,e
 1213 D1:B3CE 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1214 D1:B3D2 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1215 D1:B3D4 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1216 D1:B3D8 -  -  -  -  	
 1217 D1:B3D8 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1218 D1:B3DA 32 AE B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1219 D1:B3DE 32 B0 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1220 D1:B3E2 -  -  -  -  	
 1221 D1:B3E2 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1222 D1:B3E4 32 B2 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1223 D1:B3E8 -  -  -  -  	
 1224 D1:B3E8 3E E0 -  -  	ld a,%11100000
 1225 D1:B3EA 32 B5 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1226 D1:B3EE -  -  -  -  	
 1227 D1:B3EE C9 -  -  -  	ret 
 1228 D1:B3EF -  -  -  -  
 1229 D1:B3EF -  -  -  -  sdcomp_set_4bpc:
 1230 D1:B3EF -  -  -  -  
 1231 D1:B3EF 3E D2 -  -  	ld a,%11010010;jp nc
 1232 D1:B3F1 32 F4 AF D1 	ld (sdcomp_0bpc),a
 1233 D1:B3F5 32 06 B0 D1 	ld (sdcomp_1bpc),a
 1234 D1:B3F9 32 18 B0 D1 	ld (sdcomp_2bpc),a
 1235 D1:B3FD -  -  -  -  
 1236 D1:B3FD 3E DA -  -  	ld a,%11011010;jp c
 1237 D1:B3FF -  -  -  -  
 1238 D1:B3FF 32 90 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1239 D1:B403 32 9B B1 D1 	ld (sdcomp_2bpc_1),a 
 1240 D1:B407 32 A6 B1 D1 	ld (sdcomp_3bpc_1),a 
 1241 D1:B40B -  -  -  -  	
 1242 D1:B40B 37 -  -  -  	scf 
 1243 D1:B40C -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1244 D1:B40C D2 29 B4 D1 	jp nc, sdcomp_4bpc_flip	
 1245 D1:B410 3E DB -  -  	ld a,%11011011 ;set 3,e
 1246 D1:B412 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1247 D1:B416 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1248 D1:B418 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1249 D1:B41C 3E CB -  -  	ld a,%11001011 ;set 1,e
 1250 D1:B41E 32 28 B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1251 D1:B422 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1252 D1:B424 32 3A B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1253 D1:B428 C9 -  -  -  	ret 
 1254 D1:B429 -  -  -  -  sdcomp_4bpc_flip:
 1255 D1:B429 3E DB -  -  	ld a,%11011011 ;set 3,e
 1256 D1:B42B 32 3A B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1257 D1:B42F 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1258 D1:B431 32 28 B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1259 D1:B435 3E CB -  -  	ld a,%11001011 ;set 1,e
 1260 D1:B437 32 16 B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1261 D1:B43B 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1262 D1:B43D 32 04 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1263 D1:B441 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1264 D1:B443 32 AE B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1265 D1:B447 32 B0 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1266 D1:B44B 32 B2 B0 D1 	ld (sdcomp_traverse_4bpp),a 
 1267 D1:B44F -  -  -  -  	
 1268 D1:B44F 3E F0 -  -  	ld a,%11110000
 1269 D1:B451 32 B5 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1270 D1:B455 -  -  -  -  	
 1271 D1:B455 C9 -  -  -  	ret 
 1272 D1:B456 -  -  -  -  	
 1273 D1:B456 -  -  -  -  	
 1274 D1:B456 -  -  -  -  sdcomp_set_noalpha:
 1275 D1:B456 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1276 D1:B458 32 75 AF D1 	ld (sdcomp_no_alpha_1),a 
 1277 D1:B45C 3E DA -  -  	ld a,%11011010;jp c
 1278 D1:B45E 32 75 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1279 D1:B462 32 A6 B0 D1 	ld (sdcomp_no_alpha_3),a 
 1280 D1:B466 C9 -  -  -  	ret
 1281 D1:B467 -  -  -  -  	
 1282 D1:B467 -  -  -  -  sdcomp_reset_noalpha:
 1283 D1:B467 -  -  -  -  
 1284 D1:B467 3E DA -  -  	ld a,%11011010;jp c
 1285 D1:B469 32 75 AF D1 	ld (sdcomp_no_alpha_1),a 
 1286 D1:B46D 3E D2 -  -  	ld a, %11010010 ;jp nc
 1287 D1:B46F 32 75 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1288 D1:B473 3E CA -  -  	ld a, %11001010 ;jp z
 1289 D1:B475 32 A6 B0 D1 	ld (sdcomp_no_alpha_3),a 
 1290 D1:B479 C9 -  -  -  	ret
 1291 D1:B47A -  -  -  -  
 1292 D1:B47A -  -  -  -  
 1293 D1:B47A -  -  -  -  sdcomp_set_offset:
 1294 D1:B47A 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1295 D1:B47C 32 9D AF D1 	ld (sdcomp_offset_1),a 
 1296 D1:B480 32 61 AF D1 	ld (sdcomp_bit_offset),a 
 1297 D1:B484 3E 04 -  -  	ld a,%00000100 ;inc b 
 1298 D1:B486 32 5D B1 D1 	ld (sdcomp_offset_2),a 
 1299 D1:B48A -  -  -  -  	
 1300 D1:B48A C9 -  -  -  	ret 
 1301 D1:B48B -  -  -  -  
 1302 D1:B48B -  -  -  -  sdcomp_reset_offset:
 1303 D1:B48B 3E DA -  -  	ld a,%11011010;jp c
 1304 D1:B48D 32 9D AF D1 	ld (sdcomp_offset_1),a 
 1305 D1:B491 32 61 AF D1 	ld (sdcomp_bit_offset),a 
 1306 D1:B495 3E 00 -  -  	ld a,%00000000 ;nop
 1307 D1:B497 32 5D B1 D1 	ld (sdcomp_offset_2),a 
 1308 D1:B49B C9 -  -  -  	ret 
 1309 D1:B49C -  -  -  -  	
 1310 D1:B49C -  -  -  -  sdcomp_set_flip:
 1311 D1:B49C 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1312 D1:B49E 32 4C AF D1 	ld (sdcomp_flip_bitstream),a
 1313 D1:B4A2 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1314 D1:B4A4 32 4E AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1315 D1:B4A8 3E DC -  -  	ld a, %11011100 ;call c 
 1316 D1:B4AA 32 FD B1 D1 	ld (sdcomp_flip_traverse),a 
 1317 D1:B4AE -  -  -  -  	
 1318 D1:B4AE 3E DA -  -  	ld a,%11011010;jp c
 1319 D1:B4B0 32 58 B3 D1 	ld (sdcomp_flip_2bpc),a
 1320 D1:B4B4 32 AF B3 D1 	ld (sdcomp_flip_3bpc),a
 1321 D1:B4B8 32 0C B4 D1 	ld (sdcomp_flip_4bpc),a
 1322 D1:B4BC 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1323 D1:B4BE 32 C9 B1 D1 	ld (sdcomp_flip_setup),a 
 1324 D1:B4C2 -  -  -  -  	
 1325 D1:B4C2 C9 -  -  -  	ret 
 1326 D1:B4C3 -  -  -  -  
 1327 D1:B4C3 -  -  -  -  sdcomp_reset_flip:
 1328 D1:B4C3 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1329 D1:B4C5 32 4C AF D1 	ld (sdcomp_flip_bitstream),a
 1330 D1:B4C9 3E 23 -  -  	ld a, %00100011 ;inc hl 
 1331 D1:B4CB 32 4E AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1332 D1:B4CF 3E D4 -  -  	ld a, %11010100 ;call nc 
 1333 D1:B4D1 32 FD B1 D1 	ld (sdcomp_flip_traverse),a 
 1334 D1:B4D5 -  -  -  -  	
 1335 D1:B4D5 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1336 D1:B4D7 32 58 B3 D1 	ld (sdcomp_flip_2bpc),a
 1337 D1:B4DB 32 AF B3 D1 	ld (sdcomp_flip_3bpc),a
 1338 D1:B4DF 32 0C B4 D1 	ld (sdcomp_flip_4bpc),a
 1339 D1:B4E3 3E DA -  -  	ld a,%11011010;jp c
 1340 D1:B4E5 32 C9 B1 D1 	ld (sdcomp_flip_setup),a 
 1341 D1:B4E9 C9 -  -  -  	ret 
 1342 D1:B4EA -  -  -  -  
 1343 D1:B4EA -  -  -  -  
 1344 D1:B4EA -  -  -  -  sdcomp_set_fast:
 1345 D1:B4EA 3E DA -  -  	ld a,%11011010;jp c
 1346 D1:B4EC 32 1E B2 D1 	ld(sdcomp_fast_1),a 
 1347 D1:B4F0 32 37 B2 D1 	ld(sdcomp_fast_2),a 
 1348 D1:B4F4 32 5D B2 D1 	ld(sdcomp_fast_3),a 
 1349 D1:B4F8 -  -  -  -  	
 1350 D1:B4F8 C9 -  -  -  	ret 
 1351 D1:B4F9 -  -  -  -  
 1352 D1:B4F9 -  -  -  -  sdcomp_reset_fast:
 1353 D1:B4F9 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1354 D1:B4FB 32 1E B2 D1 	ld(sdcomp_fast_1),a 
 1355 D1:B4FF 32 37 B2 D1 	ld(sdcomp_fast_2),a 
 1356 D1:B503 32 5D B2 D1 	ld(sdcomp_fast_3),a 
 1357 D1:B507 -  -  -  -  	
 1358 D1:B507 C9 -  -  -  	ret 
 1359 D1:B508 -  -  -  -  
 1360 D1:B508 -  -  -  -  
 1361 D1:B508 -  -  -  -  
 1362 D1:B508 -  -  -  -  
 1363 D1:B508 -  -  -  -  
 1364 D1:B508 -  -  -  -  
Listing for file "ascent.asm"
  521 D1:B508 -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B508 -  -  -  -  
    2 D1:B508 -  -  -  -  FGMaxSpriteHeight .equ 120
    3 D1:B508 -  -  -  -  
    4 D1:B508 -  -  -  -  draw_mg:
    5 D1:B508 2A BB AB D1 	ld hl,(draw_buffer)
    6 D1:B50C 22 17 B6 D1 	ld (dfgs_vram_top_1),hl
    7 D1:B510 22 C2 B6 D1 	ld (dfgs_vram_top_2),hl
    8 D1:B514 01 00 96 00 	ld bc,160*240
    9 D1:B518 09 -  -  -  	add hl,bc
   10 D1:B519 22 7D B6 D1 	ld (dfgs_vram_bottom_1),hl 
   11 D1:B51D 22 9D B6 D1 	ld (dfgs_vram_bottom_2),hl 
   12 D1:B521 22 29 B7 D1 	ld (dfgs_vram_bottom_3),hl 
   13 D1:B525 22 49 B7 D1 	ld (dfgs_vram_bottom_4),hl 
   14 D1:B529 -  -  -  -  	
   15 D1:B529 2A B5 AB D1 	ld hl,(cam_pos)
   16 D1:B52D CB 3C -  -  	srl h ;div by 2
   17 D1:B52F CB 1D -  -  	rr l 
   18 D1:B531 -  -  -  -  	
   19 D1:B531 01 EF 00 00 	ld bc,239
   20 D1:B535 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   21 D1:B536 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   22 D1:B537 32 DA B5 D1 	ld (dfgs_cam_height_1),a
   23 D1:B53B 32 66 B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   24 D1:B53F 32 FA B6 D1 	ld (dfgs_cam_height_3),a
   25 D1:B543 32 14 B7 D1 	ld (dfgs_cam_height_4),a	
   26 D1:B547 ED 44 -  -  	neg 
   27 D1:B549 32 0C B6 D1 	ld (dfgs_viewport_to_upper_frame),a ;1 = top line of VP is top line of middle frame
   28 D1:B54D ED 44 -  -  	neg 
   29 D1:B54F D6 EF -  -  	sub 239
   30 D1:B551 32 1D B7 D1 	ld (dfgs_viewport_bottom_y),a
   31 D1:B555 -  -  -  -  	
   32 D1:B555 01 00 00 00 	ld bc,0
   33 D1:B559 4C -  -  -  	ld c,h;msb ccam pos 
   34 D1:B55A 0C -  -  -  	inc c 
   35 D1:B55B 21 11 BA D1 	ld hl,MG_Data_frame_table
   36 D1:B55F 09 -  -  -  	add hl,bc
   37 D1:B560 09 -  -  -  	add hl,bc 
   38 D1:B561 09 -  -  -  	add hl,bc 	
   39 D1:B562 ED 27 -  -  	ld hl,(hl);upper frame 
   40 D1:B564 -  -  -  -  	
   41 D1:B564 -  -  -  -  	
   42 D1:B564 CD C6 B5 D1 	call draw_fg_sprites
   43 D1:B568 C9 -  -  -  	ret
   44 D1:B569 -  -  -  -  
   45 D1:B569 -  -  -  -  
   46 D1:B569 -  -  -  -  
   47 D1:B569 -  -  -  -  draw_fg:
   48 D1:B569 2A BB AB D1 	ld hl,(draw_buffer)
   49 D1:B56D 22 17 B6 D1 	ld (dfgs_vram_top_1),hl
   50 D1:B571 22 C2 B6 D1 	ld (dfgs_vram_top_2),hl
   51 D1:B575 01 00 96 00 	ld bc,160*240
   52 D1:B579 09 -  -  -  	add hl,bc
   53 D1:B57A 22 7D B6 D1 	ld (dfgs_vram_bottom_1),hl 
   54 D1:B57E 22 9D B6 D1 	ld (dfgs_vram_bottom_2),hl 
   55 D1:B582 22 29 B7 D1 	ld (dfgs_vram_bottom_3),hl 
   56 D1:B586 22 49 B7 D1 	ld (dfgs_vram_bottom_4),hl 
   57 D1:B58A -  -  -  -  	
   58 D1:B58A 2A B5 AB D1 	ld hl,(cam_pos)
   59 D1:B58E 01 EF 00 00 	ld bc,239
   60 D1:B592 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   61 D1:B593 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   62 D1:B594 32 DA B5 D1 	ld (dfgs_cam_height_1),a
   63 D1:B598 32 66 B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   64 D1:B59C 32 FA B6 D1 	ld (dfgs_cam_height_3),a
   65 D1:B5A0 32 14 B7 D1 	ld (dfgs_cam_height_4),a
   66 D1:B5A4 ED 44 -  -  	neg 
   67 D1:B5A6 32 0C B6 D1 	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
   68 D1:B5AA ED 44 -  -  	neg 
   69 D1:B5AC D6 EF -  -  	sub 239
   70 D1:B5AE 32 1D B7 D1 	ld (dfgs_viewport_bottom_y),a
   71 D1:B5B2 -  -  -  -  	
   72 D1:B5B2 01 00 00 00 	ld bc,0
   73 D1:B5B6 4C -  -  -  	ld c,h;msb ccam pos 
   74 D1:B5B7 0C -  -  -  	inc c 
   75 D1:B5B8 21 8E BA D1 	ld hl,FG_Data_frame_table
   76 D1:B5BC 09 -  -  -  	add hl,bc
   77 D1:B5BD 09 -  -  -  	add hl,bc 
   78 D1:B5BE 09 -  -  -  	add hl,bc 	
   79 D1:B5BF -  -  -  -  
   80 D1:B5BF ED 27 -  -  	ld hl,(hl);upper frame 
   81 D1:B5C1 -  -  -  -  
   82 D1:B5C1 CD C6 B5 D1 	call draw_fg_sprites
   83 D1:B5C5 C9 -  -  -  	ret
   84 D1:B5C6 -  -  -  -  
   85 D1:B5C6 -  -  -  -  
   86 D1:B5C6 -  -  -  -  ; Upper Frame =======================================================================================================
   87 D1:B5C6 -  -  -  -  ; Upper Frame =======================================================================================================
   88 D1:B5C6 -  -  -  -  ;hl = upper frame data
   89 D1:B5C6 -  -  -  -   
   90 D1:B5C6 -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   91 D1:B5C6 -  -  -  -  draw_fg_sprites:
   92 D1:B5C6 -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   93 D1:B5C6 ED 17 -  -  	ld de,(hl)
   94 D1:B5C8 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
   95 D1:B5CD ED 53 C0 B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_2),de 
   96 D1:B5D2 -  -  -  -  	
   97 D1:B5D2 11 00 00 00 	ld de,0
   98 D1:B5D6 23 -  -  -  	inc hl 
   99 D1:B5D7 23 -  -  -  	inc hl
  100 D1:B5D8 23 -  -  -  	inc hl;past data table 
  101 D1:B5D9 -  -  -  -  	;hl is number of elements
  102 D1:B5D9 -  -  -  -  	
  103 D1:B5D9 -  -  -  -  	
  104 D1:B5D9 -  -  -  -  	;if cam is far below upper frame, can skip upper frame 
  105 D1:B5D9 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
  106 D1:B5D9 3E 00 -  -  	ld a,0 
  107 D1:B5DB FE 78 -  -  	cp FGMaxSpriteHeight
  108 D1:B5DD D2 EF B5 D1 	jp nc, dfgs_do_upper_loop
  109 D1:B5E1 -  -  -  -  	;cam too low for upper frame sprites to be drawn
  110 D1:B5E1 01 00 00 00 	ld bc,0
  111 D1:B5E5 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  112 D1:B5E6 09 -  -  -  	add hl,bc 
  113 D1:B5E7 09 -  -  -  	add hl,bc 
  114 D1:B5E8 09 -  -  -  	add hl,bc 
  115 D1:B5E9 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  116 D1:B5EA 23 -  -  -  	inc hl;start of next frame
  117 D1:B5EB C3 36 B6 D1 	jp dfgs_mid_start ;skip upper loop
  118 D1:B5EF -  -  -  -  	
  119 D1:B5EF -  -  -  -  	
  120 D1:B5EF -  -  -  -  dfgs_do_upper_loop:	
  121 D1:B5EF 08 -  -  -  	ex af,af' ;'
  122 D1:B5F0 -  -  -  -  	
  123 D1:B5F0 7E -  -  -  	ld a,(hl);number of elements
  124 D1:B5F1 -  -  -  -  	;TESTING
  125 D1:B5F1 -  -  -  -  	;call write_a_to_ram
  126 D1:B5F1 -  -  -  -  	;call prgmpause
  127 D1:B5F1 -  -  -  -  	;TESTING
  128 D1:B5F1 -  -  -  -  	
  129 D1:B5F1 3C -  -  -  	inc a ;to be decd later
  130 D1:B5F2 08 -  -  -  	ex af,af' ;'
  131 D1:B5F3 23 -  -  -  	inc hl;hl points to first sprite in upper frame  
  132 D1:B5F4 -  -  -  -  
  133 D1:B5F4 -  -  -  -  dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 
  134 D1:B5F4 -  -  -  -  
  135 D1:B5F4 08 -  -  -  	ex af,af';'
  136 D1:B5F5 3D -  -  -  	dec a ;dec number of elements
  137 D1:B5F6 -  -  -  -  	;call write_a_to_ram
  138 D1:B5F6 CA 36 B6 D1 	jp z,dfgs_mid_start 
  139 D1:B5FA 08 -  -  -  	ex af,af';'
  140 D1:B5FB -  -  -  -  
  141 D1:B5FB 7E -  -  -  	ld a,(hl);sprite y value 
  142 D1:B5FC 23 -  -  -  	inc hl ;to height
  143 D1:B5FD -  -  -  -  	
  144 D1:B5FD -  -  -  -  	;call write_a_to_ram
  145 D1:B5FD -  -  -  -  	;call prgmpause
  146 D1:B5FD CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  147 D1:B5FF C2 8B B7 D1 	jp nz, dfgs_sg_upper ;goto group loop 
  148 D1:B603 -  -  -  -  	
  149 D1:B603 -  -  -  -  	;otherwise single sprite, call draw routine 
  150 D1:B603 CD 0B B6 D1 	call dfgs_draw_upper_sprite
  151 D1:B607 -  -  -  -  	
  152 D1:B607 C3 F4 B5 D1 	jp dfgs_upper_loop
  153 D1:B60B -  -  -  -  	
  154 D1:B60B -  -  -  -  
  155 D1:B60B -  -  -  -  ;Can be used for normal sprites and in sprite groups 
  156 D1:B60B -  -  -  -  ;a holds y pos in upper frame, hl pts to sprite height 
  157 D1:B60B -  -  -  -  dfgs_draw_upper_sprite:
  158 D1:B60B -  -  -  -  
  159 D1:B60B -  -  -  -  dfgs_viewport_to_upper_frame .equ $ + 1
  160 D1:B60B C6 00 -  -  	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
  161 D1:B60D -  -  -  -  	;call write_a_to_ram
  162 D1:B60D DA 32 B6 D1 	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
  163 D1:B611 BE -  -  -  	cp (hl) ;compare to sprite height 
  164 D1:B612 D2 32 B6 D1 	jp nc, dfgs_upper_skip ;skips drawing too many lines, sprite is not on screen
  165 D1:B616 -  -  -  -  	;a holds number of lines to skip drawing
  166 D1:B616 -  -  -  -  
  167 D1:B616 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  168 D1:B616 11 00 00 00 	ld de,0;load top of vram 
  169 D1:B61A E5 -  -  -  	push hl ;save height ptr
  170 D1:B61B CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  171 D1:B61F -  -  -  -  	
  172 D1:B61F CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  173 D1:B621 CA 2D B6 D1 	jp z,dfgs_upper_fast
  174 D1:B625 CD 14 AF D1 	call draw_slow_sprite_top_cut
  175 D1:B629 C3 31 B6 D1 	jp dfgs_upper_skip_2
  176 D1:B62D -  -  -  -  dfgs_upper_fast:
  177 D1:B62D CD 96 AE D1 	call draw_fast_sprite_top_cut
  178 D1:B631 -  -  -  -  dfgs_upper_skip_2:
  179 D1:B631 E1 -  -  -  	pop hl ;hl holds (height)
  180 D1:B632 -  -  -  -  	
  181 D1:B632 -  -  -  -  
  182 D1:B632 -  -  -  -  dfgs_upper_skip:
  183 D1:B632 -  -  -  -  
  184 D1:B632 23 -  -  -  	inc hl ;to x
  185 D1:B633 23 -  -  -  	inc hl ;to index 
  186 D1:B634 23 -  -  -  	inc hl;to y 
  187 D1:B635 -  -  -  -  	
  188 D1:B635 C9 -  -  -  	ret ;end of dfgs_draw_upper_sprite
  189 D1:B636 -  -  -  -  	
  190 D1:B636 -  -  -  -  	;ld a,$AA
  191 D1:B636 -  -  -  -  	;call write_a_to_ram
  192 D1:B636 -  -  -  -  	;call prgmpause
  193 D1:B636 -  -  -  -  	
  194 D1:B636 -  -  -  -  
  195 D1:B636 -  -  -  -  ;MIDDLE FRAME ====================================================================================================
  196 D1:B636 -  -  -  -  	
  197 D1:B636 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  198 D1:B636 -  -  -  -  	
  199 D1:B636 -  -  -  -  	;call prgmpause
  200 D1:B636 -  -  -  -  	
  201 D1:B636 ED 17 -  -  	ld de,(hl) ;load sprite table ptr 
  202 D1:B638 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  203 D1:B63D ED 53 01 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_3),de 
  204 D1:B642 11 00 00 00 	ld de,0
  205 D1:B646 23 -  -  -  	inc hl 
  206 D1:B647 23 -  -  -  	inc hl
  207 D1:B648 23 -  -  -  	inc hl;past sprite table ptr
  208 D1:B649 08 -  -  -  	ex af,af' ;'
  209 D1:B64A 7E -  -  -  	ld a,(hl);number of elements
  210 D1:B64B 3C -  -  -  	inc a 
  211 D1:B64C 08 -  -  -  	ex af,af' ;'
  212 D1:B64D -  -  -  -  	
  213 D1:B64D 23 -  -  -  	inc hl ;to first y val 
  214 D1:B64E -  -  -  -  dfgs_mid_loop:
  215 D1:B64E -  -  -  -  	
  216 D1:B64E 08 -  -  -  	ex af,af';'
  217 D1:B64F 3D -  -  -  	dec a 
  218 D1:B650 -  -  -  -  	;call write_a_to_ram
  219 D1:B650 CA E1 B6 D1 	jp z,dfgs_lower_start ;check for end of data
  220 D1:B654 -  -  -  -  	
  221 D1:B654 08 -  -  -  	ex af,af';'
  222 D1:B655 -  -  -  -  
  223 D1:B655 -  -  -  -  	;ld a, $AB
  224 D1:B655 -  -  -  -  	;call write_a_to_ram
  225 D1:B655 -  -  -  -  
  226 D1:B655 7E -  -  -  	ld a,(hl);y val of sprite in dataframe
  227 D1:B656 -  -  -  -  	;call write_a_to_ram
  228 D1:B656 23 -  -  -  	inc hl ;to height
  229 D1:B657 -  -  -  -  	
  230 D1:B657 CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  231 D1:B659 C2 CC B7 D1 	jp nz, dfgs_sg_mid ;goto group loop 
  232 D1:B65D -  -  -  -  	
  233 D1:B65D -  -  -  -  	
  234 D1:B65D -  -  -  -  	
  235 D1:B65D -  -  -  -  	;otherwise, draw single sprite 
  236 D1:B65D CD 65 B6 D1 	call dfgs_draw_mid_sprite
  237 D1:B661 -  -  -  -  
  238 D1:B661 -  -  -  -  	
  239 D1:B661 C3 4E B6 D1 	jp dfgs_mid_loop
  240 D1:B665 -  -  -  -  	
  241 D1:B665 -  -  -  -  	
  242 D1:B665 -  -  -  -  	
  243 D1:B665 -  -  -  -  	;a = ypos in mid frame, hl pts to height
  244 D1:B665 -  -  -  -  dfgs_draw_mid_sprite:	
  245 D1:B665 -  -  -  -  	
  246 D1:B665 -  -  -  -  	;call write_a_to_ram
  247 D1:B665 -  -  -  -  	
  248 D1:B665 -  -  -  -  dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
  249 D1:B665 D6 00 -  -  	sub 0;subtract cam pos
  250 D1:B667 -  -  -  -  	;call write_a_to_ram
  251 D1:B667 -  -  -  -  
  252 D1:B667 CA 6F B6 D1 	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
  253 D1:B66B D2 BC B6 D1 	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
  254 D1:B66F -  -  -  -  dfgs_mid_sprite_topline:
  255 D1:B66F -  -  -  -  
  256 D1:B66F -  -  -  -  	;Sprite is below viewport bound, either full or bottom cut 
  257 D1:B66F -  -  -  -  	
  258 D1:B66F -  -  -  -  	;a = sprite y - cam pos 
  259 D1:B66F 3D -  -  -  	dec a ;for case where sprite pos = cam pos
  260 D1:B670 C6 F0 -  -  	add a,240 
  261 D1:B672 -  -  -  -  
  262 D1:B672 D2 98 B6 D1 	jp nc, dfgs_mid_skip
  263 D1:B676 -  -  -  -  	;a holds y pos above bottom of vp (0 indexed )
  264 D1:B676 3C -  -  -  	inc a 
  265 D1:B677 -  -  -  -  	
  266 D1:B677 -  -  -  -  	
  267 D1:B677 -  -  -  -  	
  268 D1:B677 BE -  -  -  	cp (hl) ;compare to sprite height 
  269 D1:B678 DA 9C B6 D1 	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
  270 D1:B67C -  -  -  -  	;otherwise, draw full sprite 
  271 D1:B67C -  -  -  -  	
  272 D1:B67C -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  273 D1:B67C 11 00 00 00 	ld de,0;load bottom of vram 
  274 D1:B680 E5 -  -  -  	push hl ;save height ptr
  275 D1:B681 CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  276 D1:B685 -  -  -  -  	
  277 D1:B685 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  278 D1:B687 CA 93 B6 D1 	jp z,dfgs_mid_full_fast
  279 D1:B68B CD D6 AE D1 	call draw_slow_sprite_full
  280 D1:B68F C3 97 B6 D1 	jp dfgs_mid_skip_1
  281 D1:B693 -  -  -  -  dfgs_mid_full_fast:
  282 D1:B693 CD BC AE D1 	call draw_fast_sprite_full
  283 D1:B697 -  -  -  -  dfgs_mid_skip_1:
  284 D1:B697 E1 -  -  -  	pop hl ;hl holds (height)
  285 D1:B698 -  -  -  -  	
  286 D1:B698 -  -  -  -  	
  287 D1:B698 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  288 D1:B698 23 -  -  -  	inc hl ;x
  289 D1:B699 23 -  -  -  	inc hl ;index 
  290 D1:B69A 23 -  -  -  	inc hl;to y 
  291 D1:B69B -  -  -  -  	
  292 D1:B69B -  -  -  -  	
  293 D1:B69B -  -  -  -  	
  294 D1:B69B C9 -  -  -  	ret
  295 D1:B69C -  -  -  -  	
  296 D1:B69C -  -  -  -  
  297 D1:B69C -  -  -  -  dfgs_mid_bottom_cut:
  298 D1:B69C -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1  ;Bottom Cut SPRITE, a = lines above bottom of viewport
  299 D1:B69C 11 00 00 00 	ld de,0;load bottom of vram 
  300 D1:B6A0 E5 -  -  -  	push hl ;save height ptr
  301 D1:B6A1 CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  302 D1:B6A5 -  -  -  -  	
  303 D1:B6A5 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  304 D1:B6A7 CA B3 B6 D1 	jp z,dfgs_mid_bcut_fast
  305 D1:B6AB CD 41 AF D1 	call draw_slow_sprite_bottom_cut
  306 D1:B6AF C3 B7 B6 D1 	jp dfgs_mid_skip_2
  307 D1:B6B3 -  -  -  -  dfgs_mid_bcut_fast:
  308 D1:B6B3 CD 79 AE D1 	call draw_fast_sprite_bottom_cut
  309 D1:B6B7 -  -  -  -  dfgs_mid_skip_2:
  310 D1:B6B7 E1 -  -  -  	pop hl ;hl holds (height)
  311 D1:B6B8 C3 98 B6 D1 	jp dfgs_mid_skip
  312 D1:B6BC -  -  -  -  
  313 D1:B6BC -  -  -  -  dfgs_mid_sprite_above:
  314 D1:B6BC -  -  -  -  	
  315 D1:B6BC -  -  -  -  	;a holds lines to skip 
  316 D1:B6BC BE -  -  -  	cp (hl) ;compare to height
  317 D1:B6BD D2 98 B6 D1 	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport
  318 D1:B6C1 -  -  -  -  
  319 D1:B6C1 -  -  -  -  dfgs_vram_top_2 .equ $ + 1
  320 D1:B6C1 11 00 00 00 	ld de,0;top of vram 
  321 D1:B6C5 E5 -  -  -  	push hl ;save height ptr
  322 D1:B6C6 CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  323 D1:B6CA -  -  -  -  	
  324 D1:B6CA CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  325 D1:B6CC CA D8 B6 D1 	jp z,dfgs_mid_tcut_fast
  326 D1:B6D0 CD 14 AF D1 	call draw_slow_sprite_top_cut
  327 D1:B6D4 C3 DC B6 D1 	jp dfgs_mid_skip_3
  328 D1:B6D8 -  -  -  -  dfgs_mid_tcut_fast:
  329 D1:B6D8 CD 96 AE D1 	call draw_fast_sprite_top_cut
  330 D1:B6DC -  -  -  -  dfgs_mid_skip_3:
  331 D1:B6DC E1 -  -  -  	pop hl ;hl holds (height)
  332 D1:B6DD C3 98 B6 D1 	jp dfgs_mid_skip
  333 D1:B6E1 -  -  -  -  	
  334 D1:B6E1 -  -  -  -  	
  335 D1:B6E1 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================		
  336 D1:B6E1 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  337 D1:B6E1 -  -  -  -  dfgs_lower_start:
  338 D1:B6E1 -  -  -  -  	
  339 D1:B6E1 ED 17 -  -  	ld de,(hl) ;load sprite table ptr
  340 D1:B6E3 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  341 D1:B6E8 ED 53 41 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_4),de
  342 D1:B6ED 11 00 00 00 	ld de,0
  343 D1:B6F1 23 -  -  -  	inc hl 
  344 D1:B6F2 23 -  -  -  	inc hl
  345 D1:B6F3 23 -  -  -  	inc hl;past data table 
  346 D1:B6F4 -  -  -  -  	
  347 D1:B6F4 08 -  -  -  	ex af,af' ;'
  348 D1:B6F5 7E -  -  -  	ld a,(hl);number of elements
  349 D1:B6F6 3C -  -  -  	inc a 
  350 D1:B6F7 08 -  -  -  	ex af,af' ;'
  351 D1:B6F8 23 -  -  -  	inc hl
  352 D1:B6F9 -  -  -  -  	
  353 D1:B6F9 -  -  -  -  
  354 D1:B6F9 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  355 D1:B6F9 3E 00 -  -  	ld a, 0
  356 D1:B6FB D6 EF -  -  	sub 239
  357 D1:B6FD D0 -  -  -  	ret nc;if bottom frame is offscreen 
  358 D1:B6FE -  -  -  -  
  359 D1:B6FE -  -  -  -  	;a holds y value of viewport bottom line in lower frame 
  360 D1:B6FE -  -  -  -  	
  361 D1:B6FE -  -  -  -  
  362 D1:B6FE -  -  -  -  dfgs_lower_loop:
  363 D1:B6FE -  -  -  -  
  364 D1:B6FE 08 -  -  -  	ex af,af';'
  365 D1:B6FF 3D -  -  -  	dec a 
  366 D1:B700 C8 -  -  -  	ret z
  367 D1:B701 08 -  -  -  	ex af,af';'
  368 D1:B702 -  -  -  -  	
  369 D1:B702 7E -  -  -  	ld a,(hl);y
  370 D1:B703 -  -  -  -  	;call write_a_to_ram
  371 D1:B703 23 -  -  -  	inc hl ;inc to height
  372 D1:B704 -  -  -  -  	
  373 D1:B704 CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  374 D1:B706 C2 0D B8 D1 	jp nz, dfgs_sg_lower ;goto group loop 
  375 D1:B70A -  -  -  -  	
  376 D1:B70A -  -  -  -  	;otherwise, draw single sprite 
  377 D1:B70A CD 12 B7 D1 	call dfgs_draw_lower_sprite
  378 D1:B70E -  -  -  -  	
  379 D1:B70E C3 FE B6 D1 	jp dfgs_lower_loop
  380 D1:B712 -  -  -  -  
  381 D1:B712 -  -  -  -  	
  382 D1:B712 -  -  -  -  dfgs_draw_lower_sprite: ;a = ypos, hl pts to height
  383 D1:B712 -  -  -  -  	;call write_a_to_ram
  384 D1:B712 47 -  -  -  	ld b,a ;save
  385 D1:B713 -  -  -  -  dfgs_cam_height_4 .equ $ + 1 
  386 D1:B713 3E 00 -  -  	ld a, 0 ;check if bottom frame is in VP at all
  387 D1:B715 D6 EF -  -  	sub 239
  388 D1:B717 D2 44 B7 D1 	jp nc,dfgs_lower_skip
  389 D1:B71B 78 -  -  -  	ld a,b
  390 D1:B71C -  -  -  -  dfgs_viewport_bottom_y .equ $ + 1
  391 D1:B71C D6 00 -  -  	sub 0;subtract y val of viewport bottom
  392 D1:B71E -  -  -  -  
  393 D1:B71E DA 44 B7 D1 	jp c,dfgs_lower_skip;sprite below screen
  394 D1:B722 -  -  -  -  	
  395 D1:B722 -  -  -  -  	;push af 
  396 D1:B722 -  -  -  -  	;ld a,$A0
  397 D1:B722 -  -  -  -  	;call write_a_to_ram
  398 D1:B722 -  -  -  -  	;pop af
  399 D1:B722 -  -  -  -  	
  400 D1:B722 -  -  -  -  	
  401 D1:B722 3C -  -  -  	inc a
  402 D1:B723 -  -  -  -  	;a holds number of lines to draw 
  403 D1:B723 BE -  -  -  	cp (hl) ;compare to sprite height 
  404 D1:B724 DA 48 B7 D1 	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
  405 D1:B728 -  -  -  -  	
  406 D1:B728 -  -  -  -  	;draw full sprite 
  407 D1:B728 -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  408 D1:B728 11 00 00 00 	ld de,0;load bottom of vram 
  409 D1:B72C E5 -  -  -  	push hl ;save height ptr
  410 D1:B72D CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  411 D1:B731 -  -  -  -  	
  412 D1:B731 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  413 D1:B733 CA 3F B7 D1 	jp z,dfgs_lower_full_fast
  414 D1:B737 CD D6 AE D1 	call draw_slow_sprite_full
  415 D1:B73B C3 43 B7 D1 	jp dfgs_lower_skip_1
  416 D1:B73F -  -  -  -  dfgs_lower_full_fast:
  417 D1:B73F CD BC AE D1 	call draw_fast_sprite_full
  418 D1:B743 -  -  -  -  dfgs_lower_skip_1:
  419 D1:B743 E1 -  -  -  	pop hl ;hl holds (height)
  420 D1:B744 -  -  -  -  
  421 D1:B744 -  -  -  -  	
  422 D1:B744 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  423 D1:B744 23 -  -  -  	inc hl ;x 
  424 D1:B745 23 -  -  -  	inc hl ;index 
  425 D1:B746 23 -  -  -  	inc hl;to y 
  426 D1:B747 -  -  -  -  	;call write_a_to_ram
  427 D1:B747 -  -  -  -  	;ld a,$AD
  428 D1:B747 -  -  -  -  	;call write_a_to_ram
  429 D1:B747 C9 -  -  -  	ret
  430 D1:B748 -  -  -  -  	
  431 D1:B748 -  -  -  -  dfgs_lower_bottom_cut: 
  432 D1:B748 -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  433 D1:B748 11 00 00 00 	ld de,0;load bottom of vram 
  434 D1:B74C E5 -  -  -  	push hl ;save height ptr
  435 D1:B74D CD 4D B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  436 D1:B751 -  -  -  -  	
  437 D1:B751 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  438 D1:B753 CA 5F B7 D1 	jp z,dfgs_lower_bcut_fast ;even= fast
  439 D1:B757 CD 41 AF D1 	call draw_slow_sprite_bottom_cut
  440 D1:B75B C3 63 B7 D1 	jp dfgs_lower_skip_2
  441 D1:B75F -  -  -  -  dfgs_lower_bcut_fast:
  442 D1:B75F CD 79 AE D1 	call draw_fast_sprite_bottom_cut
  443 D1:B763 -  -  -  -  dfgs_lower_skip_2:
  444 D1:B763 E1 -  -  -  	pop hl ;hl holds (height)
  445 D1:B764 C3 44 B7 D1 	jp dfgs_lower_skip
  446 D1:B768 -  -  -  -  	
  447 D1:B768 -  -  -  -  
  448 D1:B768 -  -  -  -  ;===================================================================================================================
  449 D1:B768 -  -  -  -  ;SPRITE GROUPS =====================================================================================================
  450 D1:B768 -  -  -  -  
  451 D1:B768 -  -  -  -  dfgs_sg_setup:
  452 D1:B768 23 -  -  -  	inc hl ;hl points to xPos of sprite group 
  453 D1:B769 7E -  -  -  	ld a,(hl)
  454 D1:B76A 32 61 B8 D1 	ld (dfgs_sg_x_origin),a 
  455 D1:B76E -  -  -  -  	
  456 D1:B76E -  -  -  -  	;call write_a_to_ram
  457 D1:B76E 01 00 00 00 	ld bc,0
  458 D1:B772 23 -  -  -  	inc hl ; index 
  459 D1:B773 4E -  -  -  	ld c,(hl) ;sprite group index 
  460 D1:B774 23 -  -  -  	inc hl; to next sprite 
  461 D1:B775 -  -  -  -  		
  462 D1:B775 21 EF C7 D1 	ld hl, Sprite_Groups_Table
  463 D1:B779 09 -  -  -  	add hl,bc 
  464 D1:B77A 09 -  -  -  	add hl,bc 
  465 D1:B77B 09 -  -  -  	add hl,bc 
  466 D1:B77C -  -  -  -  	;hl now points to correct sprite group ptr 
  467 D1:B77C ED 27 -  -  	ld hl, (hl)
  468 D1:B77E -  -  -  -  	;hl pts to sprite table for this group 
  469 D1:B77E ED 17 -  -  	ld de,(hl)
  470 D1:B780 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1), de ;NEed to undo after loop is done 
  471 D1:B785 -  -  -  -  
  472 D1:B785 23 -  -  -  	inc hl
  473 D1:B786 23 -  -  -  	inc hl 	
  474 D1:B787 23 -  -  -  	inc hl ;to num sprites 
  475 D1:B788 -  -  -  -  
  476 D1:B788 7E -  -  -  	ld a,(hl) ;num sprites in group
  477 D1:B789 23 -  -  -  	inc hl;first sprite y 
  478 D1:B78A C9 -  -  -  	ret
  479 D1:B78B -  -  -  -  	
  480 D1:B78B -  -  -  -  	;Sprite group in upper frame. a holds y pos of sprite group. HL points to height (unused)
  481 D1:B78B -  -  -  -  dfgs_sg_upper:	
  482 D1:B78B 32 99 B7 D1 	ld (dfgs_sg_upper_y_origin),a
  483 D1:B78F E5 -  -  -  	push hl ;save frame data location (height ptr)
  484 D1:B790 CD 68 B7 D1 	call dfgs_sg_setup ;returns with a = num sprites
  485 D1:B794 -  -  -  -   
  486 D1:B794 32 AD B7 D1 	ld (dfgs_sg_upper_count),a 
  487 D1:B798 -  -  -  -  	
  488 D1:B798 -  -  -  -  dfgs_sg_upper_loop:
  489 D1:B798 -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  490 D1:B798 -  -  -  -  	;if no carry, sprite is still in upper frame, a holds pos in upper frame 
  491 D1:B798 -  -  -  -  	;if carry sprite is entirely in mid frame, a holds y pos in mid frame 
  492 D1:B798 -  -  -  -  dfgs_sg_upper_y_origin .equ $ + 1 
  493 D1:B798 3E 00 -  -  	ld a, 0
  494 D1:B79A 96 -  -  -  	sub a,(hl)
  495 D1:B79B -  -  -  -  	;call write_a_to_ram
  496 D1:B79B 23 -  -  -  	inc hl ;to height
  497 D1:B79C D2 A8 B7 D1 	jp nc, dfgs_sg_upper_draw_upper
  498 D1:B7A0 -  -  -  -  	
  499 D1:B7A0 CD 65 B6 D1 	call dfgs_draw_mid_sprite
  500 D1:B7A4 C3 AC B7 D1 	jp dfgs_sg_upper_continue
  501 D1:B7A8 -  -  -  -  	;otherwise, sprite is entirely in mid frame, a holds y pos in mid frame
  502 D1:B7A8 -  -  -  -  	
  503 D1:B7A8 -  -  -  -  	
  504 D1:B7A8 -  -  -  -  dfgs_sg_upper_draw_upper:
  505 D1:B7A8 CD 0B B6 D1 	call dfgs_draw_upper_sprite
  506 D1:B7AC -  -  -  -  dfgs_sg_upper_continue:
  507 D1:B7AC -  -  -  -  dfgs_sg_upper_count .equ $ + 1
  508 D1:B7AC 3E 00 -  -  	ld a, 0
  509 D1:B7AE 3D -  -  -  	dec a 
  510 D1:B7AF 32 AD B7 D1 	ld (dfgs_sg_upper_count),a 
  511 D1:B7B3 C2 98 B7 D1 	jp nz, dfgs_sg_upper_loop 
  512 D1:B7B7 -  -  -  -  	;otherwise, end of sprite group 
  513 D1:B7B7 32 61 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  514 D1:B7BB E1 -  -  -  	pop hl ;return to height ptr of data frame obj
  515 D1:B7BC 23 -  -  -  	inc hl
  516 D1:B7BD 23 -  -  -  	inc hl
  517 D1:B7BE 23 -  -  -  	inc hl ;to y pos of next sprite
  518 D1:B7BF -  -  -  -  dfgs_sprite_pointers_2 .equ $ + 1
  519 D1:B7BF 11 00 00 00 	ld de, 0
  520 D1:B7C3 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  521 D1:B7C8 -  -  -  -  
  522 D1:B7C8 C3 F4 B5 D1 	jp dfgs_upper_loop
  523 D1:B7CC -  -  -  -  	
  524 D1:B7CC -  -  -  -  
  525 D1:B7CC -  -  -  -  
  526 D1:B7CC -  -  -  -  ;SG MID =========================================================================================================
  527 D1:B7CC -  -  -  -  	;Sprite group in middle frame. a holds y pos of sprite group. HL points to height (unused)
  528 D1:B7CC -  -  -  -  dfgs_sg_mid:	
  529 D1:B7CC E5 -  -  -  	push hl
  530 D1:B7CD 32 DA B7 D1 	ld (dfgs_sg_mid_y_origin),a
  531 D1:B7D1 CD 68 B7 D1 	call dfgs_sg_setup 
  532 D1:B7D5 -  -  -  -  	
  533 D1:B7D5 32 EE B7 D1 	ld (dfgs_sg_mid_count),a
  534 D1:B7D9 -  -  -  -  	
  535 D1:B7D9 -  -  -  -  dfgs_sg_mid_loop:
  536 D1:B7D9 -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  537 D1:B7D9 -  -  -  -  	;if no carry, sprite is still in mid frame, a holds pos in mid frame 
  538 D1:B7D9 -  -  -  -  	;if carry sprite is entirely in lower frame, a holds y pos in lower frame 
  539 D1:B7D9 -  -  -  -  dfgs_sg_mid_y_origin .equ $ + 1 
  540 D1:B7D9 3E 00 -  -  	ld a, 0
  541 D1:B7DB 96 -  -  -  	sub a,(hl)
  542 D1:B7DC 23 -  -  -  	inc hl ;to height
  543 D1:B7DD D2 E9 B7 D1 	jp nc, dfgs_sg_mid_draw_mid
  544 D1:B7E1 -  -  -  -  	
  545 D1:B7E1 CD 12 B7 D1 	call dfgs_draw_lower_sprite
  546 D1:B7E5 C3 ED B7 D1 	jp dfgs_sg_mid_continue
  547 D1:B7E9 -  -  -  -  
  548 D1:B7E9 -  -  -  -  		
  549 D1:B7E9 -  -  -  -  dfgs_sg_mid_draw_mid:
  550 D1:B7E9 CD 65 B6 D1 	call dfgs_draw_mid_sprite
  551 D1:B7ED -  -  -  -  dfgs_sg_mid_continue:
  552 D1:B7ED -  -  -  -  dfgs_sg_mid_count .equ $ + 1
  553 D1:B7ED 3E 00 -  -  	ld a, 0
  554 D1:B7EF 3D -  -  -  	dec a 
  555 D1:B7F0 32 EE B7 D1 	ld (dfgs_sg_mid_count),a 
  556 D1:B7F4 C2 D9 B7 D1 	jp nz, dfgs_sg_mid_loop 
  557 D1:B7F8 -  -  -  -  	;otherwise, end of sprite group 
  558 D1:B7F8 32 61 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  559 D1:B7FC E1 -  -  -  	pop hl ;return to height ptr of data frame obj
  560 D1:B7FD 23 -  -  -  	inc hl
  561 D1:B7FE 23 -  -  -  	inc hl
  562 D1:B7FF 23 -  -  -  	inc hl ;to y pos of next sprite
  563 D1:B800 -  -  -  -  dfgs_sprite_pointers_3 .equ $ + 1
  564 D1:B800 11 00 00 00 	ld de, 0
  565 D1:B804 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  566 D1:B809 -  -  -  -  
  567 D1:B809 C3 4E B6 D1 	jp dfgs_mid_loop
  568 D1:B80D -  -  -  -  	
  569 D1:B80D -  -  -  -  	
  570 D1:B80D -  -  -  -  ;SG Lower =========================================================================================================
  571 D1:B80D -  -  -  -  	;Sprite group in lower frame. a holds y pos of sprite group. HL points to height (unused)
  572 D1:B80D -  -  -  -  dfgs_sg_lower:	
  573 D1:B80D 32 1B B8 D1 	ld (dfgs_sg_lower_y_origin),a
  574 D1:B811 E5 -  -  -  	push hl
  575 D1:B812 CD 68 B7 D1 	call dfgs_sg_setup 
  576 D1:B816 32 2E B8 D1 	ld (dfgs_sg_lower_count),a
  577 D1:B81A -  -  -  -  	;call write_a_to_ram
  578 D1:B81A -  -  -  -  dfgs_sg_lower_loop:
  579 D1:B81A -  -  -  -  
  580 D1:B81A -  -  -  -  	;call prgmpause
  581 D1:B81A -  -  -  -  
  582 D1:B81A -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  583 D1:B81A -  -  -  -  	;if no carry, sprite is still in lower frame, a holds pos in lower frame 
  584 D1:B81A -  -  -  -  	;if carry sprite is offscreen
  585 D1:B81A -  -  -  -  dfgs_sg_lower_y_origin .equ $ + 1 
  586 D1:B81A 3E 00 -  -  	ld a, 0
  587 D1:B81C 96 -  -  -  	sub a,(hl)
  588 D1:B81D -  -  -  -  	;call write_a_to_ram
  589 D1:B81D 23 -  -  -  	inc hl ;to height
  590 D1:B81E D2 29 B8 D1 	jp nc, dfgs_sg_lower_draw_lower
  591 D1:B822 -  -  -  -  	
  592 D1:B822 23 -  -  -  	inc hl 
  593 D1:B823 23 -  -  -  	inc hl
  594 D1:B824 23 -  -  -  	inc hl 
  595 D1:B825 C3 2D B8 D1 	jp dfgs_sg_lower_continue
  596 D1:B829 -  -  -  -  	;otherwise, sprite is entirely below lower frame, skip
  597 D1:B829 -  -  -  -  	
  598 D1:B829 -  -  -  -  	
  599 D1:B829 -  -  -  -  dfgs_sg_lower_draw_lower:
  600 D1:B829 CD 12 B7 D1 	call dfgs_draw_lower_sprite
  601 D1:B82D -  -  -  -  dfgs_sg_lower_continue:
  602 D1:B82D -  -  -  -  dfgs_sg_lower_count .equ $ + 1
  603 D1:B82D 3E 00 -  -  	ld a, 0
  604 D1:B82F -  -  -  -  	;call write_a_to_ram
  605 D1:B82F 3D -  -  -  	dec a 
  606 D1:B830 32 2E B8 D1 	ld (dfgs_sg_lower_count),a 
  607 D1:B834 C2 1A B8 D1 	jp nz, dfgs_sg_lower_loop 
  608 D1:B838 -  -  -  -  	;otherwise, end of sprite group 
  609 D1:B838 32 61 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  610 D1:B83C E1 -  -  -  	pop hl ;return to height ptr of data frame obj
  611 D1:B83D 23 -  -  -  	inc hl
  612 D1:B83E 23 -  -  -  	inc hl
  613 D1:B83F 23 -  -  -  	inc hl ;to y pos of next sprite
  614 D1:B840 -  -  -  -  dfgs_sprite_pointers_4 .equ $ + 1
  615 D1:B840 11 00 00 00 	ld de, 0
  616 D1:B844 ED 53 67 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  617 D1:B849 -  -  -  -  
  618 D1:B849 C3 FE B6 D1 	jp dfgs_lower_loop
  619 D1:B84D -  -  -  -  	
  620 D1:B84D -  -  -  -  	
  621 D1:B84D -  -  -  -  	
  622 D1:B84D -  -  -  -  	
  623 D1:B84D -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  624 D1:B84D -  -  -  -  ;(hl) = height 	
  625 D1:B84D -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  626 D1:B84D -  -  -  -  
  627 D1:B84D -  -  -  -  ;Subtracts a lines from de (initial vram pos),
  628 D1:B84D -  -  -  -  ;returns hl = sprite data, de = new vram position
  629 D1:B84D -  -  -  -  dfgs_setup_draw:
  630 D1:B84D 23 -  -  -  	inc hl ;x pos 
  631 D1:B84E 01 00 00 00 	ld bc,0
  632 D1:B852 4E -  -  -  	ld c,(hl); x pos
  633 D1:B853 23 -  -  -  	inc hl;to index
  634 D1:B854 E5 -  -  -  	push hl;save sprite index 
  635 D1:B855 26 A0 -  -  	ld h,160
  636 D1:B857 6F -  -  -  	ld l,a ;number of lines to subtract 
  637 D1:B858 ED 6C -  -  	mlt hl;subtract from vram
  638 D1:B85A 37 -  -  -  	scf 
  639 D1:B85B 3F -  -  -  	ccf
  640 D1:B85C EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  641 D1:B85D ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  642 D1:B85F 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  643 D1:B860 -  -  -  -  dfgs_sg_x_origin .equ $ + 1 ;TODO set
  644 D1:B860 0E 00 -  -  	ld c, 0
  645 D1:B862 09 -  -  -  	add hl,bc;add sprite group x pos offset (if applicable)
  646 D1:B863 EB -  -  -  	ex de,hl;put in de
  647 D1:B864 E1 -  -  -  	pop hl;back to frame data 
  648 D1:B865 4E -  -  -  	ld c,(hl);sprite index
  649 D1:B866 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  650 D1:B866 21 00 00 00 	ld hl,0 ;load sprite table 
  651 D1:B86A 09 -  -  -  	add hl,bc
  652 D1:B86B 09 -  -  -  	add hl,bc 
  653 D1:B86C 09 -  -  -  	add hl,bc;move to sprite ptr
  654 D1:B86D -  -  -  -  	;call prgmpause
  655 D1:B86D ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  656 D1:B86F -  -  -  -  
  657 D1:B86F C9 -  -  -  	ret
  658 D1:B870 -  -  -  -  
  659 D1:B870 -  -  -  -  	
  660 D1:B870 -  -  -  -  dfgs_test:
  661 D1:B870 C3 70 B8 D1 	jp dfgs_test
  662 D1:B874 -  -  -  -  	
  663 D1:B874 -  -  -  -  	
  664 D1:B874 -  -  -  -  	
  665 D1:B874 -  -  -  -  	
  666 D1:B874 -  -  -  -  	
  667 D1:B874 -  -  -  -  	
  668 D1:B874 -  -  -  -  	
  669 D1:B874 -  -  -  -  	
  670 D1:B874 -  -  -  -  	
  671 D1:B874 -  -  -  -  	
Listing for file "ascent.asm"
  522 D1:B874 -  -  -  -  #include "SpriteDecompressManager.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\SpriteDecompressManager.txt"
    1 D1:B874 -  -  -  -  
    2 D1:B874 -  -  -  -  
    3 D1:B874 -  -  -  -  decompress_queue_start .equ vram
    4 D1:B874 -  -  -  -  
    5 D1:B874 -  -  -  -  decompress_queue_end .equ vram + (7*64) ;Max queue length of 64 TODO change back
    6 D1:B874 -  -  -  -  
    7 D1:B874 -  -  -  -  decompress_tail_ptr:
    8 D1:B874 06 00 D4 -  	.dl decompress_queue_start + 6  ;points to sprite being currently decompressed (parameters byte)
    9 D1:B877 -  -  -  -  
   10 D1:B877 -  -  -  -  decompress_head_ptr: ;points to where next element will be added to queue
   11 D1:B877 00 00 D4 -  	.dl decompress_queue_start
   12 D1:B87A -  -  -  -  
   13 D1:B87A -  -  -  -  ;Decompress queue format
   14 D1:B87A -  -  -  -  ; .dl Sprite data ptr, decompress location, parameters (7 = fast, 6 = offset, 5 = flip, 4 =started decompressing 3 = finished decompressing )
   15 D1:B87A -  -  -  -  
   16 D1:B87A -  -  -  -  setup_decompress_queue: ;clears memory in queue
   17 D1:B87A 3E FF -  -  	ld a,$FF
   18 D1:B87C 01 C0 01 00 	ld bc, 7*64
   19 D1:B880 21 00 00 D4 	ld hl, decompress_queue_start
   20 D1:B884 CD E0 10 02 	call _MemSet
   21 D1:B888 C9 -  -  -  	ret 
   22 D1:B889 -  -  -  -  
   23 D1:B889 -  -  -  -  ;bc = sprite data ptr, de = decompress location, a = params
   24 D1:B889 -  -  -  -  ;adds sprite to queue
   25 D1:B889 -  -  -  -  add_to_decompress_queue:
   26 D1:B889 2A 77 B8 D1 	ld hl, (decompress_head_ptr)
   27 D1:B88D ED 0F -  -  	ld (hl), bc 
   28 D1:B88F 23 -  -  -  	inc hl
   29 D1:B890 23 -  -  -  	inc hl 
   30 D1:B891 23 -  -  -  	inc hl 
   31 D1:B892 -  -  -  -  
   32 D1:B892 ED 1F -  -  	ld (hl),de
   33 D1:B894 -  -  -  -  	
   34 D1:B894 23 -  -  -  	inc hl 
   35 D1:B895 23 -  -  -  	inc hl 
   36 D1:B896 23 -  -  -  	inc hl 
   37 D1:B897 -  -  -  -  	
   38 D1:B897 77 -  -  -  	ld (hl), a 
   39 D1:B898 23 -  -  -  	inc hl ;start of next element 
   40 D1:B899 -  -  -  -  	
   41 D1:B899 E5 -  -  -  	push hl 
   42 D1:B89A 11 C0 01 D4 	ld de, decompress_queue_end
   43 D1:B89E 37 -  -  -  	scf
   44 D1:B89F 3F -  -  -  	ccf
   45 D1:B8A0 ED 52 -  -  	sbc hl,de ;check if we have reached end of queue to wrap around
   46 D1:B8A2 E1 -  -  -  	pop hl
   47 D1:B8A3 CA AC B8 D1 	jp z, a2dq_back_to_start
   48 D1:B8A7 -  -  -  -  	
   49 D1:B8A7 22 77 B8 D1 	ld (decompress_head_ptr),hl
   50 D1:B8AB -  -  -  -  	;ld a,$AB ;testing
   51 D1:B8AB -  -  -  -  	;call write_a_to_ram
   52 D1:B8AB C9 -  -  -  	ret
   53 D1:B8AC -  -  -  -  	
   54 D1:B8AC -  -  -  -  a2dq_back_to_start:
   55 D1:B8AC -  -  -  -  	;ld a,$AA ;testing
   56 D1:B8AC -  -  -  -  	;call write_a_to_ram
   57 D1:B8AC -  -  -  -  
   58 D1:B8AC 21 00 00 D4 	ld hl,decompress_queue_start
   59 D1:B8B0 22 77 B8 D1 	ld (decompress_head_ptr),hl
   60 D1:B8B4 C9 -  -  -  	ret
   61 D1:B8B5 -  -  -  -  	
   62 D1:B8B5 -  -  -  -  	
   63 D1:B8B5 -  -  -  -  
   64 D1:B8B5 -  -  -  -  
   65 D1:B8B5 -  -  -  -  ;Runs after frame has been rendered. Checks through decompress queue and continues sprite decompressions
   66 D1:B8B5 -  -  -  -  	;if has ended, return. at end of queue
   67 D1:B8B5 -  -  -  -  	;if not started, begin decompression and set start flag
   68 D1:B8B5 -  -  -  -  	;if has started, but not ended, continue decompression 
   69 D1:B8B5 -  -  -  -  	;if started and ended, move to next element 
   70 D1:B8B5 -  -  -  -  continue_decompressions:
   71 D1:B8B5 2A 74 B8 D1 	ld hl, (decompress_tail_ptr)
   72 D1:B8B9 7E -  -  -  	ld a,(hl) ;decompress params 
   73 D1:B8BA CB 5F -  -  	bit 3,a 
   74 D1:B8BC C0 -  -  -  	ret nz ;sprite is done decompressing, at end of queue 
   75 D1:B8BD -  -  -  -  	
   76 D1:B8BD -  -  -  -  	;testing
   77 D1:B8BD -  -  -  -  	;push af
   78 D1:B8BD -  -  -  -  	;ld a,$55
   79 D1:B8BD -  -  -  -  	;call write_a_to_ram
   80 D1:B8BD -  -  -  -  	;pop af
   81 D1:B8BD -  -  -  -  	
   82 D1:B8BD -  -  -  -  	
   83 D1:B8BD -  -  -  -  	
   84 D1:B8BD -  -  -  -  	
   85 D1:B8BD CB 67 -  -  	bit 4,a
   86 D1:B8BF CA FB B8 D1 	jp z, cd_begin_decompression
   87 D1:B8C3 -  -  -  -  	
   88 D1:B8C3 -  -  -  -  	;has started,not ended 
   89 D1:B8C3 CD BC B2 D1 	call sdcomp_continue 
   90 D1:B8C7 B7 -  -  -  	or a 
   91 D1:B8C8 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
   92 D1:B8C9 -  -  -  -  
   93 D1:B8C9 -  -  -  -  cd_done_decompressing:
   94 D1:B8C9 -  -  -  -  	;sprite finished decompressing
   95 D1:B8C9 2A 74 B8 D1 	ld hl, (decompress_tail_ptr)	
   96 D1:B8CD CB DE -  -  	set 3,(hl) ;set finished flag
   97 D1:B8CF 11 07 00 00 	ld de,7 
   98 D1:B8D3 19 -  -  -  	add hl,de ;points to next element in queue
   99 D1:B8D4 -  -  -  -  	
  100 D1:B8D4 E5 -  -  -  	push hl 
  101 D1:B8D5 11 C0 01 D4 	ld de, decompress_queue_end
  102 D1:B8D9 37 -  -  -  	scf
  103 D1:B8DA 3F -  -  -  	ccf
  104 D1:B8DB ED 52 -  -  	sbc hl,de ;check if need to wrap to start of queue
  105 D1:B8DD E1 -  -  -  	pop hl
  106 D1:B8DE D2 EA B8 D1 	jp nc, cd_back_to_start
  107 D1:B8E2 22 74 B8 D1 	ld (decompress_tail_ptr),hl
  108 D1:B8E6 C3 B5 B8 D1 	jp continue_decompressions ;Move on to next sprite 
  109 D1:B8EA -  -  -  -  	
  110 D1:B8EA -  -  -  -  cd_back_to_start:
  111 D1:B8EA 21 00 00 D4 	ld hl,decompress_queue_start
  112 D1:B8EE 11 06 00 00 	ld de,6 ;tail points to the parameters byte
  113 D1:B8F2 19 -  -  -  	add hl,de
  114 D1:B8F3 22 74 B8 D1 	ld (decompress_tail_ptr),hl
  115 D1:B8F7 C3 B5 B8 D1 	jp continue_decompressions ;Move on to next sprite 
  116 D1:B8FB -  -  -  -  
  117 D1:B8FB -  -  -  -  cd_begin_decompression:
  118 D1:B8FB -  -  -  -  
  119 D1:B8FB -  -  -  -  	;testing
  120 D1:B8FB -  -  -  -  	;push af 
  121 D1:B8FB -  -  -  -  	;ld a,$AA
  122 D1:B8FB -  -  -  -  	;call write_a_to_ram
  123 D1:B8FB -  -  -  -  	;pop af
  124 D1:B8FB -  -  -  -  	
  125 D1:B8FB -  -  -  -  	;setup and begin decompressing
  126 D1:B8FB CB E6 -  -  	set 4,(hl) ;set start flag
  127 D1:B8FD F5 -  -  -  	push af 
  128 D1:B8FE CB 7F -  -  	bit 7,a 
  129 D1:B900 C4 EA B4 D1 	call nz, sdcomp_set_fast
  130 D1:B904 F1 -  -  -  	pop af 
  131 D1:B905 -  -  -  -  	
  132 D1:B905 F5 -  -  -  	push af 
  133 D1:B906 CB 7F -  -  	bit 7,a 
  134 D1:B908 CC F9 B4 D1 	call z, sdcomp_reset_fast
  135 D1:B90C F1 -  -  -  	pop af 
  136 D1:B90D -  -  -  -  	
  137 D1:B90D F5 -  -  -  	push af 
  138 D1:B90E CB 77 -  -  	bit 6,a 
  139 D1:B910 C4 7A B4 D1 	call nz, sdcomp_set_offset
  140 D1:B914 F1 -  -  -  	pop af 
  141 D1:B915 -  -  -  -  	
  142 D1:B915 F5 -  -  -  	push af 
  143 D1:B916 CB 77 -  -  	bit 6,a 
  144 D1:B918 CC 8B B4 D1 	call z, sdcomp_reset_offset
  145 D1:B91C F1 -  -  -  	pop af 
  146 D1:B91D -  -  -  -  	
  147 D1:B91D F5 -  -  -  	push af 
  148 D1:B91E CB 6F -  -  	bit 5,a 
  149 D1:B920 C4 9C B4 D1 	call nz, sdcomp_set_flip
  150 D1:B924 F1 -  -  -  	pop af 
  151 D1:B925 -  -  -  -  	
  152 D1:B925 F5 -  -  -  	push af 
  153 D1:B926 CB 6F -  -  	bit 5,a 
  154 D1:B928 CC C3 B4 D1 	call z, sdcomp_reset_flip
  155 D1:B92C F1 -  -  -  	pop af 
  156 D1:B92D -  -  -  -  	
  157 D1:B92D 2A 74 B8 D1 	ld hl, (decompress_tail_ptr) ;may be unnessecary
  158 D1:B931 -  -  -  -  	
  159 D1:B931 2B -  -  -  	dec hl 
  160 D1:B932 2B -  -  -  	dec hl 
  161 D1:B933 2B -  -  -  	dec hl 
  162 D1:B934 ED 17 -  -  	ld de,(hl) ;load decompress location
  163 D1:B936 -  -  -  -  
  164 D1:B936 2B -  -  -  	dec hl 
  165 D1:B937 2B -  -  -  	dec hl 
  166 D1:B938 2B -  -  -  	dec hl 
  167 D1:B939 ED 27 -  -  	ld hl,(hl) ;load sprite data ptr
  168 D1:B93B -  -  -  -  
  169 D1:B93B CD 19 B1 D1 	call sprite_decompress
  170 D1:B93F B7 -  -  -  	or a 
  171 D1:B940 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
  172 D1:B941 C3 C9 B8 D1 	jp cd_done_decompressing
  173 D1:B945 -  -  -  -  
  174 D1:B945 -  -  -  -  
  175 D1:B945 -  -  -  -  ;Checks to see if cam has moved to a new frame and decompressions need to be added to queue
  176 D1:B945 -  -  -  -  check_for_decompress_calls:
  177 D1:B945 3A 8D B9 D1 	ld a, (last_decompressed_cam_pos)
  178 D1:B949 47 -  -  -  	ld b,a ;put last decompressed pos in b
  179 D1:B94A 3A B6 AB D1 	ld a, (cam_pos + 1) ;Current frame cam is in
  180 D1:B94E 32 8D B9 D1 	ld (last_decompressed_cam_pos),a ;store this frame as the last decompressed frame 
  181 D1:B952 -  -  -  -  	;need to check if cam has moved up or down since last time
  182 D1:B952 B8 -  -  -  	cp a,b 
  183 D1:B953 -  -  -  -  	
  184 D1:B953 -  -  -  -  	
  185 D1:B953 C8 -  -  -  	ret z ;if same, no new things to add to queue 
  186 D1:B954 D2 60 B9 D1 	jp nc, cfdc_cam_move_up ;camera has moved up since last time 
  187 D1:B958 -  -  -  -  	
  188 D1:B958 -  -  -  -  	;cam has moved down since last time 
  189 D1:B958 21 84 BB D1 	ld hl, decompress_calls_table_down
  190 D1:B95C C3 64 B9 D1 	jp cfdc_add_calls_to_queue
  191 D1:B960 -  -  -  -  	
  192 D1:B960 -  -  -  -  	
  193 D1:B960 -  -  -  -  cfdc_cam_move_up:
  194 D1:B960 21 30 BB D1 	ld hl, decompress_calls_table_up
  195 D1:B964 -  -  -  -  
  196 D1:B964 -  -  -  -  	;a = cam frame, hl = decompress call table (up or down)
  197 D1:B964 -  -  -  -  cfdc_add_calls_to_queue:
  198 D1:B964 -  -  -  -  
  199 D1:B964 -  -  -  -  	;call write_a_to_ram
  200 D1:B964 -  -  -  -  
  201 D1:B964 01 00 00 00 	ld bc,0
  202 D1:B968 4F -  -  -  	ld c,a
  203 D1:B969 09 -  -  -  	add hl,bc 
  204 D1:B96A 09 -  -  -  	add hl,bc 
  205 D1:B96B 09 -  -  -  	add hl,bc 
  206 D1:B96C ED 27 -  -  	ld hl,(hl) ;hl now points to correct decompress frame 
  207 D1:B96E -  -  -  -  	
  208 D1:B96E 08 -  -  -  	ex af,af' ;'
  209 D1:B96F 7E -  -  -  	ld a,(hl) ;a' holds num elements 
  210 D1:B970 -  -  -  -  	
  211 D1:B970 -  -  -  -  	;call write_a_to_ram
  212 D1:B970 -  -  -  -  	
  213 D1:B970 -  -  -  -  	;call prgmpause
  214 D1:B970 -  -  -  -  	
  215 D1:B970 3C -  -  -  	inc a ;to be decd later
  216 D1:B971 08 -  -  -  	ex af,af' ;'
  217 D1:B972 -  -  -  -  	
  218 D1:B972 23 -  -  -  	inc hl ;points to first sprite data 
  219 D1:B973 -  -  -  -  cfdc_add_to_queue_loop:
  220 D1:B973 08 -  -  -  	ex af,af' ;'
  221 D1:B974 -  -  -  -  	;call write_a_to_ram
  222 D1:B974 3D -  -  -  	dec a ;account for cases where frame has 0 elements 
  223 D1:B975 C8 -  -  -  	ret z
  224 D1:B976 08 -  -  -  	ex af,af' ;'
  225 D1:B977 ED 07 -  -  	ld bc ,(hl) ;load sprite data 
  226 D1:B979 23 -  -  -  	inc hl 
  227 D1:B97A 23 -  -  -  	inc hl
  228 D1:B97B 23 -  -  -  	inc hl 
  229 D1:B97C ED 17 -  -  	ld de,(hl) ;load decomp location 
  230 D1:B97E 23 -  -  -  	inc hl 
  231 D1:B97F 23 -  -  -  	inc hl
  232 D1:B980 23 -  -  -  	inc hl 
  233 D1:B981 7E -  -  -  	ld a,(hl) ;ld params
  234 D1:B982 23 -  -  -  	inc hl 
  235 D1:B983 E5 -  -  -  	push hl
  236 D1:B984 CD 89 B8 D1 	call add_to_decompress_queue
  237 D1:B988 E1 -  -  -  	pop hl
  238 D1:B989 C3 73 B9 D1 	jp cfdc_add_to_queue_loop
  239 D1:B98D -  -  -  -  	
  240 D1:B98D -  -  -  -  	
  241 D1:B98D -  -  -  -  
  242 D1:B98D -  -  -  -  
  243 D1:B98D -  -  -  -  last_decompressed_cam_pos:
  244 D1:B98D 00 -  -  -  	.db 0 ;camera frame last time checking for decomp was called 
  245 D1:B98E -  -  -  -  	
  246 D1:B98E -  -  -  -  	
  247 D1:B98E -  -  -  -  
  248 D1:B98E -  -  -  -  
  249 D1:B98E -  -  -  -  
  250 D1:B98E -  -  -  -  
  251 D1:B98E -  -  -  -  
  252 D1:B98E -  -  -  -  
  253 D1:B98E -  -  -  -  
  254 D1:B98E -  -  -  -  
  255 D1:B98E -  -  -  -  
  256 D1:B98E -  -  -  -  
  257 D1:B98E -  -  -  -  
  258 D1:B98E -  -  -  -  
  259 D1:B98E -  -  -  -  
  260 D1:B98E -  -  -  -  
  261 D1:B98E -  -  -  -  
  262 D1:B98E -  -  -  -  
  263 D1:B98E -  -  -  -  
  264 D1:B98E -  -  -  -  
  265 D1:B98E -  -  -  -  
  266 D1:B98E -  -  -  -  
  267 D1:B98E -  -  -  -  
  268 D1:B98E -  -  -  -  
  269 D1:B98E -  -  -  -  
  270 D1:B98E -  -  -  -  
  271 D1:B98E -  -  -  -  
Listing for file "ascent.asm"
  523 D1:B98E -  -  -  -  #include "getInputs.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\getInputs.txt"
    1 D1:B98E -  -  -  -  
    2 D1:B98E -  -  -  -  
    3 D1:B98E -  -  -  -  
    4 D1:B98E -  -  -  -  get_inputs:
    5 D1:B98E 21 00 00 F5 	ld	hl,DI_Mode		; register for keypad mode
    6 D1:B992 36 02 -  -  	ld	(hl),2			; set single scan mode
    7 D1:B994 -  -  -  -  
    8 D1:B994 AF -  -  -  	xor	a,a
    9 D1:B995 -  -  -  -  scan_wait:
   10 D1:B995 BE -  -  -  	cp	a,(hl)			; wait for keypad idle mode
   11 D1:B996 20 FD -  -  	jr	nz,scan_wait
   12 D1:B998 -  -  -  -  	
   13 D1:B998 -  -  -  -  	; https://wikiti.brandonw.net/index.php?title=84PCE:Ports:A000
   14 D1:B998 -  -  -  -  	
   15 D1:B998 3A 1E 00 F5 	ld	a,(kbdG7) ; $F5001E
   16 D1:B99C CB 5F -  -   	bit	kbitUp,a
   17 D1:B99E C2 A9 B9 D1 	jp nz, input_cam_up
   18 D1:B9A2 -  -  -  -  	
   19 D1:B9A2 -  -  -  -  	
   20 D1:B9A2 CB 47 -  -  	bit	kbitDown,a
   21 D1:B9A4 C2 BC B9 D1 	jp nz, input_cam_down
   22 D1:B9A8 C9 -  -  -  	ret
   23 D1:B9A9 -  -  -  -  	
   24 D1:B9A9 -  -  -  -  	
   25 D1:B9A9 -  -  -  -  input_cam_up:
   26 D1:B9A9 -  -  -  -  	;Move cam
   27 D1:B9A9 2A B5 AB D1 	ld hl,(cam_pos)
   28 D1:B9AD -  -  -  -  	
   29 D1:B9AD E5 -  -  -  	push hl 
   30 D1:B9AE 01 D0 07 00 	ld bc,2000
   31 D1:B9B2 ED 42 -  -  	sbc hl,bc 
   32 D1:B9B4 E1 -  -  -  	pop hl 
   33 D1:B9B5 D0 -  -  -  	ret nc
   34 D1:B9B6 -  -  -  -  	
   35 D1:B9B6 -  -  -  -  
   36 D1:B9B6 23 -  -  -  	inc hl
   37 D1:B9B7 22 B5 AB D1 	ld (cam_pos),hl
   38 D1:B9BB C9 -  -  -  	ret
   39 D1:B9BC -  -  -  -  
   40 D1:B9BC -  -  -  -  
   41 D1:B9BC -  -  -  -  input_cam_down:
   42 D1:B9BC -  -  -  -  	;Move cam
   43 D1:B9BC 2A B5 AB D1 	ld hl,(cam_pos)
   44 D1:B9C0 -  -  -  -  	
   45 D1:B9C0 E5 -  -  -  	push hl 
   46 D1:B9C1 01 01 00 00 	ld bc,1 
   47 D1:B9C5 ED 42 -  -  	sbc hl,bc 
   48 D1:B9C7 E1 -  -  -  	pop hl 
   49 D1:B9C8 D8 -  -  -  	ret c 
   50 D1:B9C9 -  -  -  -  	
   51 D1:B9C9 2B -  -  -  	dec hl
   52 D1:B9CA 22 B5 AB D1 	ld (cam_pos),hl
   53 D1:B9CE C9 -  -  -  	ret
   54 D1:B9CF -  -  -  -  	
   55 D1:B9CF -  -  -  -  	
   56 D1:B9CF -  -  -  -  	
Listing for file "ascent.asm"
  524 D1:B9CF -  -  -  -  ;#include "levelData.txt"
  525 D1:B9CF -  -  -  -  ;#include "FGLevelData.txt"
  526 D1:B9CF -  -  -  -  
  527 D1:B9CF -  -  -  -  #include "generated/BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\BG_Data.txt"
    1 D1:B9CF -  -  -  -  BG_Data_frame_table:
    2 D1:B9CF 09 BA D1 -  	.dl BG_Data_0
    3 D1:B9D2 01 BA D1 -  	.dl BG_Data_1
    4 D1:B9D5 F9 B9 D1 -  	.dl BG_Data_2
    5 D1:B9D8 F1 B9 D1 -  	.dl BG_Data_3
    6 D1:B9DB E9 B9 D1 -  	.dl BG_Data_4
    7 D1:B9DE E1 B9 D1 -  	.dl BG_Data_5
    8 D1:B9E1 -  -  -  -  
    9 D1:B9E1 -  -  -  -  
   10 D1:B9E1 -  -  -  -  
   11 D1:B9E1 -  -  -  -  BG_Data_5:
   12 D1:B9E1 2E BF D1 -  	.dl Sprite_Table_0
   13 D1:B9E4 01 -  -  -  	.db 1
   14 D1:B9E5 3F 10 14 2F 	.db 63, 16, 20, 47
   15 D1:B9E9 -  -  -  -  
   16 D1:B9E9 -  -  -  -  BG_Data_4:
   17 D1:B9E9 2E BF D1 -  	.dl Sprite_Table_0
   18 D1:B9EC 01 -  -  -  	.db 1
   19 D1:B9ED 73 10 0E 2F 	.db 115, 16, 14, 47
   20 D1:B9F1 -  -  -  -  
   21 D1:B9F1 -  -  -  -  BG_Data_3:
   22 D1:B9F1 2E BF D1 -  	.dl Sprite_Table_0
   23 D1:B9F4 01 -  -  -  	.db 1
   24 D1:B9F5 3E 10 17 28 	.db 62, 16, 23, 40
   25 D1:B9F9 -  -  -  -  
   26 D1:B9F9 -  -  -  -  BG_Data_2:
   27 D1:B9F9 2E BF D1 -  	.dl Sprite_Table_0
   28 D1:B9FC 01 -  -  -  	.db 1
   29 D1:B9FD 37 10 0F 2F 	.db 55, 16, 15, 47
   30 D1:BA01 -  -  -  -  
   31 D1:BA01 -  -  -  -  BG_Data_1:
   32 D1:BA01 2E BF D1 -  	.dl Sprite_Table_0
   33 D1:BA04 01 -  -  -  	.db 1
   34 D1:BA05 63 10 13 28 	.db 99, 16, 19, 40
   35 D1:BA09 -  -  -  -  
   36 D1:BA09 -  -  -  -  BG_Data_0:
   37 D1:BA09 2E BF D1 -  	.dl Sprite_Table_0
   38 D1:BA0C 01 -  -  -  	.db 1
   39 D1:BA0D 1F 10 13 28 	.db 31, 16, 19, 40
   40 D1:BA11 -  -  -  -  
   41 D1:BA11 -  -  -  -  
   42 D1:BA11 -  -  -  -  
Listing for file "ascent.asm"
  528 D1:BA11 -  -  -  -  #include "generated/MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\MG_Data.txt"
    1 D1:BA11 -  -  -  -  MG_Data_frame_table:
    2 D1:BA11 76 BA D1 -  	.dl MG_Data_0
    3 D1:BA14 5E BA D1 -  	.dl MG_Data_1
    4 D1:BA17 4E BA D1 -  	.dl MG_Data_2
    5 D1:BA1A 3E BA D1 -  	.dl MG_Data_3
    6 D1:BA1D 36 BA D1 -  	.dl MG_Data_4
    7 D1:BA20 2E BA D1 -  	.dl MG_Data_5
    8 D1:BA23 26 BA D1 -  	.dl MG_Data_6
    9 D1:BA26 -  -  -  -  
   10 D1:BA26 -  -  -  -  
   11 D1:BA26 -  -  -  -  
   12 D1:BA26 -  -  -  -  MG_Data_6:
   13 D1:BA26 2E BF D1 -  	.dl Sprite_Table_0
   14 D1:BA29 01 -  -  -  	.db 1
   15 D1:BA2A 32 10 0F 28 	.db 50, 16, 15, 40
   16 D1:BA2E -  -  -  -  
   17 D1:BA2E -  -  -  -  MG_Data_5:
   18 D1:BA2E 2E BF D1 -  	.dl Sprite_Table_0
   19 D1:BA31 01 -  -  -  	.db 1
   20 D1:BA32 29 10 0F 28 	.db 41, 16, 15, 40
   21 D1:BA36 -  -  -  -  
   22 D1:BA36 -  -  -  -  MG_Data_4:
   23 D1:BA36 2E BF D1 -  	.dl Sprite_Table_0
   24 D1:BA39 01 -  -  -  	.db 1
   25 D1:BA3A 56 10 0F 28 	.db 86, 16, 15, 40
   26 D1:BA3E -  -  -  -  
   27 D1:BA3E -  -  -  -  MG_Data_3:
   28 D1:BA3E 2E BF D1 -  	.dl Sprite_Table_0
   29 D1:BA41 03 -  -  -  	.db 3
   30 D1:BA42 42 10 0C 2F 	.db 66, 16, 12, 47
   31 D1:BA46 00 FF 10 01 	.db 0,255,16,1 ;SG_1
   32 D1:BA4A 01 FF 1C 00 	.db 1,255,28,0 ;SG_0
   33 D1:BA4E -  -  -  -  
   34 D1:BA4E -  -  -  -  MG_Data_2:
   35 D1:BA4E 2E BF D1 -  	.dl Sprite_Table_0
   36 D1:BA51 03 -  -  -  	.db 3
   37 D1:BA52 37 10 16 2F 	.db 55, 16, 22, 47
   38 D1:BA56 02 FF 10 01 	.db 2,255,16,1 ;SG_1
   39 D1:BA5A B4 FF 1C 00 	.db 180,255,28,0 ;SG_0
   40 D1:BA5E -  -  -  -  
   41 D1:BA5E -  -  -  -  MG_Data_1:
   42 D1:BA5E 2E BF D1 -  	.dl Sprite_Table_0
   43 D1:BA61 05 -  -  -  	.db 5
   44 D1:BA62 00 10 5A 2F 	.db 0, 16, 90, 47
   45 D1:BA66 01 FF 04 00 	.db 1,255,4,0 ;SG_0
   46 D1:BA6A 50 FF 10 00 	.db 80,255,16,0 ;SG_0
   47 D1:BA6E 32 FF 10 01 	.db 50,255,16,1 ;SG_1
   48 D1:BA72 FF FF 1C 00 	.db 255,255,28,0 ;SG_0
   49 D1:BA76 -  -  -  -  
   50 D1:BA76 -  -  -  -  MG_Data_0:
   51 D1:BA76 2E BF D1 -  	.dl Sprite_Table_0
   52 D1:BA79 05 -  -  -  	.db 5
   53 D1:BA7A 14 0C 02 09 	.db 20,12,2,9 ;tree_0_fast
   54 D1:BA7E 1E 0C 02 0A 	.db 30,12,2,10 ;tree_4_fast
   55 D1:BA82 50 FF 04 00 	.db 80,255,4,0 ;SG_0
   56 D1:BA86 5E FF 04 00 	.db 94,255,4,0 ;SG_0
   57 D1:BA8A 32 0C 08 09 	.db 50,12,8,9 ;tree_0_fast
   58 D1:BA8E -  -  -  -  
   59 D1:BA8E -  -  -  -  
   60 D1:BA8E -  -  -  -  
   61 D1:BA8E -  -  -  -  
Listing for file "ascent.asm"
  529 D1:BA8E -  -  -  -  #include "generated/FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\FG_Data.txt"
    1 D1:BA8E -  -  -  -  FG_Data_frame_table:
    2 D1:BA8E 24 BB D1 -  	.dl FG_Data_0
    3 D1:BA91 18 BB D1 -  	.dl FG_Data_1
    4 D1:BA94 10 BB D1 -  	.dl FG_Data_2
    5 D1:BA97 08 BB D1 -  	.dl FG_Data_3
    6 D1:BA9A 00 BB D1 -  	.dl FG_Data_4
    7 D1:BA9D F8 BA D1 -  	.dl FG_Data_5
    8 D1:BAA0 F0 BA D1 -  	.dl FG_Data_6
    9 D1:BAA3 E8 BA D1 -  	.dl FG_Data_7
   10 D1:BAA6 E0 BA D1 -  	.dl FG_Data_8
   11 D1:BAA9 D8 BA D1 -  	.dl FG_Data_9
   12 D1:BAAC D0 BA D1 -  	.dl FG_Data_10
   13 D1:BAAF C8 BA D1 -  	.dl FG_Data_11
   14 D1:BAB2 C0 BA D1 -  	.dl FG_Data_12
   15 D1:BAB5 B8 BA D1 -  	.dl FG_Data_13
   16 D1:BAB8 -  -  -  -  
   17 D1:BAB8 -  -  -  -  
   18 D1:BAB8 -  -  -  -  
   19 D1:BAB8 -  -  -  -  FG_Data_13:
   20 D1:BAB8 2E BF D1 -  	.dl Sprite_Table_0
   21 D1:BABB 01 -  -  -  	.db 1
   22 D1:BABC 4D 10 0F 01 	.db 77, 16, 15, 1
   23 D1:BAC0 -  -  -  -  
   24 D1:BAC0 -  -  -  -  FG_Data_12:
   25 D1:BAC0 2E BF D1 -  	.dl Sprite_Table_0
   26 D1:BAC3 01 -  -  -  	.db 1
   27 D1:BAC4 29 10 11 01 	.db 41, 16, 17, 1
   28 D1:BAC8 -  -  -  -  
   29 D1:BAC8 -  -  -  -  FG_Data_11:
   30 D1:BAC8 2E BF D1 -  	.dl Sprite_Table_0
   31 D1:BACB 01 -  -  -  	.db 1
   32 D1:BACC 41 10 11 01 	.db 65, 16, 17, 1
   33 D1:BAD0 -  -  -  -  
   34 D1:BAD0 -  -  -  -  FG_Data_10:
   35 D1:BAD0 2E BF D1 -  	.dl Sprite_Table_0
   36 D1:BAD3 01 -  -  -  	.db 1
   37 D1:BAD4 4F 10 11 01 	.db 79, 16, 17, 1
   38 D1:BAD8 -  -  -  -  
   39 D1:BAD8 -  -  -  -  FG_Data_9:
   40 D1:BAD8 2E BF D1 -  	.dl Sprite_Table_0
   41 D1:BADB 01 -  -  -  	.db 1
   42 D1:BADC 52 10 0B 00 	.db 82, 16, 11, 0
   43 D1:BAE0 -  -  -  -  
   44 D1:BAE0 -  -  -  -  FG_Data_8:
   45 D1:BAE0 2E BF D1 -  	.dl Sprite_Table_0
   46 D1:BAE3 01 -  -  -  	.db 1
   47 D1:BAE4 39 10 14 00 	.db 57, 16, 20, 0
   48 D1:BAE8 -  -  -  -  
   49 D1:BAE8 -  -  -  -  FG_Data_7:
   50 D1:BAE8 2E BF D1 -  	.dl Sprite_Table_0
   51 D1:BAEB 01 -  -  -  	.db 1
   52 D1:BAEC 35 10 0F 00 	.db 53, 16, 15, 0
   53 D1:BAF0 -  -  -  -  
   54 D1:BAF0 -  -  -  -  FG_Data_6:
   55 D1:BAF0 2E BF D1 -  	.dl Sprite_Table_0
   56 D1:BAF3 01 -  -  -  	.db 1
   57 D1:BAF4 51 10 0D 00 	.db 81, 16, 13, 0
   58 D1:BAF8 -  -  -  -  
   59 D1:BAF8 -  -  -  -  FG_Data_5:
   60 D1:BAF8 2E BF D1 -  	.dl Sprite_Table_0
   61 D1:BAFB 01 -  -  -  	.db 1
   62 D1:BAFC 3B 10 0F 00 	.db 59, 16, 15, 0
   63 D1:BB00 -  -  -  -  
   64 D1:BB00 -  -  -  -  FG_Data_4:
   65 D1:BB00 2E BF D1 -  	.dl Sprite_Table_0
   66 D1:BB03 01 -  -  -  	.db 1
   67 D1:BB04 69 10 11 01 	.db 105, 16, 17, 1
   68 D1:BB08 -  -  -  -  
   69 D1:BB08 -  -  -  -  FG_Data_3:
   70 D1:BB08 2E BF D1 -  	.dl Sprite_Table_0
   71 D1:BB0B 01 -  -  -  	.db 1
   72 D1:BB0C 2C 10 0A 01 	.db 44, 16, 10, 1
   73 D1:BB10 -  -  -  -  
   74 D1:BB10 -  -  -  -  FG_Data_2:
   75 D1:BB10 2E BF D1 -  	.dl Sprite_Table_0
   76 D1:BB13 01 -  -  -  	.db 1
   77 D1:BB14 29 10 0B 01 	.db 41, 16, 11, 1
   78 D1:BB18 -  -  -  -  
   79 D1:BB18 -  -  -  -  FG_Data_1:
   80 D1:BB18 2E BF D1 -  	.dl Sprite_Table_0
   81 D1:BB1B 02 -  -  -  	.db 2
   82 D1:BB1C 42 10 0F 01 	.db 66, 16, 15, 1
   83 D1:BB20 AF 10 0A 01 	.db 175, 16, 10, 1
   84 D1:BB24 -  -  -  -  
   85 D1:BB24 -  -  -  -  FG_Data_0:
   86 D1:BB24 2E BF D1 -  	.dl Sprite_Table_0
   87 D1:BB27 02 -  -  -  	.db 2
   88 D1:BB28 31 10 06 00 	.db 49, 16, 6, 0
   89 D1:BB2C 31 10 06 00 	.db 49, 16, 6, 0
   90 D1:BB30 -  -  -  -  
   91 D1:BB30 -  -  -  -  
   92 D1:BB30 -  -  -  -  
Listing for file "ascent.asm"
  530 D1:BB30 -  -  -  -  #include "generated/DecompressCalls.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\DecompressCalls.txt"
    1 D1:BB30 -  -  -  -  decompress_calls_table_up:
    2 D1:BB30 D8 BB D1 -  	.dl decompress_frame_up_0
    3 D1:BB33 29 BD D1 -  	.dl decompress_frame_up_1
    4 D1:BB36 2A BD D1 -  	.dl decompress_frame_up_2
    5 D1:BB39 2B BD D1 -  	.dl decompress_frame_up_3
    6 D1:BB3C 2C BD D1 -  	.dl decompress_frame_up_4
    7 D1:BB3F 2D BD D1 -  	.dl decompress_frame_up_5
    8 D1:BB42 2E BD D1 -  	.dl decompress_frame_up_6
    9 D1:BB45 2F BD D1 -  	.dl decompress_frame_up_7
   10 D1:BB48 30 BD D1 -  	.dl decompress_frame_up_8
   11 D1:BB4B 31 BD D1 -  	.dl decompress_frame_up_9
   12 D1:BB4E 32 BD D1 -  	.dl decompress_frame_up_10
   13 D1:BB51 33 BD D1 -  	.dl decompress_frame_up_11
   14 D1:BB54 34 BD D1 -  	.dl decompress_frame_up_12
   15 D1:BB57 35 BD D1 -  	.dl decompress_frame_up_13
   16 D1:BB5A 36 BD D1 -  	.dl decompress_frame_up_14
   17 D1:BB5D 37 BD D1 -  	.dl decompress_frame_up_15
   18 D1:BB60 38 BD D1 -  	.dl decompress_frame_up_16
   19 D1:BB63 39 BD D1 -  	.dl decompress_frame_up_17
   20 D1:BB66 3A BD D1 -  	.dl decompress_frame_up_18
   21 D1:BB69 3B BD D1 -  	.dl decompress_frame_up_19
   22 D1:BB6C 3C BD D1 -  	.dl decompress_frame_up_20
   23 D1:BB6F 3D BD D1 -  	.dl decompress_frame_up_21
   24 D1:BB72 3E BD D1 -  	.dl decompress_frame_up_22
   25 D1:BB75 3F BD D1 -  	.dl decompress_frame_up_23
   26 D1:BB78 40 BD D1 -  	.dl decompress_frame_up_24
   27 D1:BB7B 41 BD D1 -  	.dl decompress_frame_up_25
   28 D1:BB7E 42 BD D1 -  	.dl decompress_frame_up_26
   29 D1:BB81 43 BD D1 -  	.dl decompress_frame_up_27
   30 D1:BB84 -  -  -  -  
   31 D1:BB84 -  -  -  -  
   32 D1:BB84 -  -  -  -  decompress_calls_table_down:
   33 D1:BB84 44 BD D1 -  	.dl decompress_frame_down_0
   34 D1:BB87 45 BD D1 -  	.dl decompress_frame_down_1
   35 D1:BB8A 46 BD D1 -  	.dl decompress_frame_down_2
   36 D1:BB8D 47 BD D1 -  	.dl decompress_frame_down_3
   37 D1:BB90 48 BD D1 -  	.dl decompress_frame_down_4
   38 D1:BB93 7D BE D1 -  	.dl decompress_frame_down_5
   39 D1:BB96 7E BE D1 -  	.dl decompress_frame_down_6
   40 D1:BB99 7F BE D1 -  	.dl decompress_frame_down_7
   41 D1:BB9C 80 BE D1 -  	.dl decompress_frame_down_8
   42 D1:BB9F 81 BE D1 -  	.dl decompress_frame_down_9
   43 D1:BBA2 82 BE D1 -  	.dl decompress_frame_down_10
   44 D1:BBA5 83 BE D1 -  	.dl decompress_frame_down_11
   45 D1:BBA8 8B BE D1 -  	.dl decompress_frame_down_12
   46 D1:BBAB 8C BE D1 -  	.dl decompress_frame_down_13
   47 D1:BBAE 8D BE D1 -  	.dl decompress_frame_down_14
   48 D1:BBB1 8E BE D1 -  	.dl decompress_frame_down_15
   49 D1:BBB4 96 BE D1 -  	.dl decompress_frame_down_16
   50 D1:BBB7 97 BE D1 -  	.dl decompress_frame_down_17
   51 D1:BBBA 98 BE D1 -  	.dl decompress_frame_down_18
   52 D1:BBBD 99 BE D1 -  	.dl decompress_frame_down_19
   53 D1:BBC0 9A BE D1 -  	.dl decompress_frame_down_20
   54 D1:BBC3 A2 BE D1 -  	.dl decompress_frame_down_21
   55 D1:BBC6 A3 BE D1 -  	.dl decompress_frame_down_22
   56 D1:BBC9 A4 BE D1 -  	.dl decompress_frame_down_23
   57 D1:BBCC A5 BE D1 -  	.dl decompress_frame_down_24
   58 D1:BBCF A6 BE D1 -  	.dl decompress_frame_down_25
   59 D1:BBD2 A7 BE D1 -  	.dl decompress_frame_down_26
   60 D1:BBD5 A8 BE D1 -  	.dl decompress_frame_down_27
   61 D1:BBD8 -  -  -  -  
   62 D1:BBD8 -  -  -  -  
   63 D1:BBD8 -  -  -  -  
   64 D1:BBD8 -  -  -  -  decompress_frame_up_0:
   65 D1:BBD8 30 -  -  -  	.db 48
   66 D1:BBD9 BE BF D1 C1 
              01 D4 -  -  	.dl Moss_1, Moss_1_Slow_O_0
   67 D1:BBDF 40 -  -  -  	.db %01000000
   68 D1:BBE0 BE BF D1 9E 
              02 D4 -  -  	.dl Moss_1, Moss_1_Fast_0
   69 D1:BBE6 80 -  -  -  	.db %10000000
   70 D1:BBE7 F5 BF D1 2C 
              03 D4 -  -  	.dl Tree_0, Tree_0_Fast_0
   71 D1:BBED 80 -  -  -  	.db %10000000
   72 D1:BBEE 41 C0 D1 DE 
              03 D4 -  -  	.dl Tree_3, Tree_3_Fast_0
   73 D1:BBF4 80 -  -  -  	.db %10000000
   74 D1:BBF5 8E C0 D1 94 
              04 D4 -  -  	.dl Tree_6, Tree_6_Fast_0
   75 D1:BBFB 80 -  -  -  	.db %10000000
   76 D1:BBFC B6 C0 D1 4A 
              05 D4 -  -  	.dl Tree_8, Tree_8_Fast_0
   77 D1:BC02 80 -  -  -  	.db %10000000
   78 D1:BC03 DE C0 D1 00 
              06 D4 -  -  	.dl Tree_5, Tree_5_Fast_F_0
   79 D1:BC09 A0 -  -  -  	.db %10100000
   80 D1:BC0A 8E C0 D1 B6 
              06 D4 -  -  	.dl Tree_6, Tree_6_Fast_F_0
   81 D1:BC10 A0 -  -  -  	.db %10100000
   82 D1:BC11 2B C1 D1 6C 
              07 D4 -  -  	.dl Tree_2, Tree_2_Fast_F_0
   83 D1:BC17 A0 -  -  -  	.db %10100000
   84 D1:BC18 76 C1 D1 1E 
              08 D4 -  -  	.dl Tree_1, Tree_1_Fast_0
   85 D1:BC1E 80 -  -  -  	.db %10000000
   86 D1:BC1F C2 C1 D1 D2 
              08 D4 -  -  	.dl Tree_7, Tree_7_Fast_0
   87 D1:BC25 80 -  -  -  	.db %10000000
   88 D1:BC26 EA C1 D1 88 
              09 D4 -  -  	.dl Tree_9, Tree_9_Fast_0
   89 D1:BC2C 80 -  -  -  	.db %10000000
   90 D1:BC2D C2 C1 D1 3E 
              0A D4 -  -  	.dl Tree_7, Tree_7_Fast_F_0
   91 D1:BC33 A0 -  -  -  	.db %10100000
   92 D1:BC34 2B C1 D1 F4 
              0A D4 -  -  	.dl Tree_2, Tree_2_Fast_0
   93 D1:BC3A 80 -  -  -  	.db %10000000
   94 D1:BC3B 12 C2 D1 A6 
              0B D4 -  -  	.dl Tree_4, Tree_4_Fast_0
   95 D1:BC41 80 -  -  -  	.db %10000000
   96 D1:BC42 EA C1 D1 5C 
              0C D4 -  -  	.dl Tree_9, Tree_9_Fast_F_0
   97 D1:BC48 A0 -  -  -  	.db %10100000
   98 D1:BC49 76 C1 D1 12 
              0D D4 -  -  	.dl Tree_1, Tree_1_Fast_F_0
   99 D1:BC4F A0 -  -  -  	.db %10100000
  100 D1:BC50 41 C0 D1 C6 
              0D D4 -  -  	.dl Tree_3, Tree_3_Fast_F_0
  101 D1:BC56 A0 -  -  -  	.db %10100000
  102 D1:BC57 B6 C0 D1 7C 
              0E D4 -  -  	.dl Tree_8, Tree_8_Fast_F_0
  103 D1:BC5D A0 -  -  -  	.db %10100000
  104 D1:BC5E 12 C2 D1 32 
              0F D4 -  -  	.dl Tree_4, Tree_4_Fast_F_0
  105 D1:BC64 A0 -  -  -  	.db %10100000
  106 D1:BC65 F5 BF D1 E8 
              0F D4 -  -  	.dl Tree_0, Tree_0_Fast_F_0
  107 D1:BC6B A0 -  -  -  	.db %10100000
  108 D1:BC6C 5F C2 D1 9A 
              10 D4 -  -  	.dl Moss_0, Moss_0_Fast_0
  109 D1:BC72 80 -  -  -  	.db %10000000
  110 D1:BC73 5F C2 D1 24 
              11 D4 -  -  	.dl Moss_0, Moss_0_Fast_F_0
  111 D1:BC79 A0 -  -  -  	.db %10100000
  112 D1:BC7A 95 C2 D1 AE 
              11 D4 -  -  	.dl Moss_2, Moss_2_Fast_0
  113 D1:BC80 80 -  -  -  	.db %10000000
  114 D1:BC81 95 C2 D1 46 
              12 D4 -  -  	.dl Moss_2, Moss_2_Fast_F_0
  115 D1:BC87 A0 -  -  -  	.db %10100000
  116 D1:BC88 CF C2 D1 DD 
              12 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_0
  117 D1:BC8E 40 -  -  -  	.db %01000000
  118 D1:BC8F 0F C3 D1 93 
              13 D4 -  -  	.dl Vines_2, Vines_2_Slow_0
  119 D1:BC95 00 -  -  -  	.db %00000000
  120 D1:BC96 56 C3 D1 6F 
              14 D4 -  -  	.dl Vines_1, Vines_1_Slow_O_0
  121 D1:BC9C 40 -  -  -  	.db %01000000
  122 D1:BC9D CF C2 D1 FB 
              14 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_F_0
  123 D1:BCA3 60 -  -  -  	.db %01100000
  124 D1:BCA4 0F C3 D1 B1 
              15 D4 -  -  	.dl Vines_2, Vines_2_Slow_F_0
  125 D1:BCAA 20 -  -  -  	.db %00100000
  126 D1:BCAB CF C2 D1 8B 
              16 D4 -  -  	.dl Vines_3, Vines_3_Slow_F_0
  127 D1:BCB1 20 -  -  -  	.db %00100000
  128 D1:BCB2 56 C3 D1 3B 
              17 D4 -  -  	.dl Vines_1, Vines_1_Slow_0
  129 D1:BCB8 00 -  -  -  	.db %00000000
  130 D1:BCB9 80 C3 D1 CB 
              17 D4 -  -  	.dl Vines_8, Vines_8_Slow_0
  131 D1:BCBF 00 -  -  -  	.db %00000000
  132 D1:BCC0 0F C3 D1 95 
              18 D4 -  -  	.dl Vines_2, Vines_2_Slow_O_0
  133 D1:BCC6 40 -  -  -  	.db %01000000
  134 D1:BCC7 CF C2 D1 6D 
              19 D4 -  -  	.dl Vines_3, Vines_3_Slow_0
  135 D1:BCCD 00 -  -  -  	.db %00000000
  136 D1:BCCE AE C3 D1 1D 
              1A D4 -  -  	.dl Vines_5, Vines_5_Slow_O_0
  137 D1:BCD4 40 -  -  -  	.db %01000000
  138 D1:BCD5 FB C3 D1 0D 
              1B D4 -  -  	.dl Vines_7, Vines_7_Slow_0
  139 D1:BCDB 00 -  -  -  	.db %00000000
  140 D1:BCDC 80 C3 D1 CD 
              1B D4 -  -  	.dl Vines_8, Vines_8_Slow_F_0
  141 D1:BCE2 20 -  -  -  	.db %00100000
  142 D1:BCE3 AE C3 D1 97 
              1C D4 -  -  	.dl Vines_5, Vines_5_Slow_O_F_0
  143 D1:BCE9 60 -  -  -  	.db %01100000
  144 D1:BCEA 27 C4 D1 85 
              1D D4 -  -  	.dl Vines_4, Vines_4_Slow_O_0
  145 D1:BCF0 40 -  -  -  	.db %01000000
  146 D1:BCF1 5E C4 D1 37 
              1E D4 -  -  	.dl Vines_9, Vines_9_Slow_O_0
  147 D1:BCF7 40 -  -  -  	.db %01000000
  148 D1:BCF8 91 C4 D1 E9 
              1E D4 -  -  	.dl Vines_10, Vines_10_Slow_O_0
  149 D1:BCFE 40 -  -  -  	.db %01000000
  150 D1:BCFF CE C4 D1 A8 
              1F D4 -  -  	.dl Branches_15, Branches_15_Fast_0
  151 D1:BD05 80 -  -  -  	.db %10000000
  152 D1:BD06 90 C5 D1 E4 
              20 D4 -  -  	.dl Branches_3, Branches_3_Fast_F_0
  153 D1:BD0C A0 -  -  -  	.db %10100000
  154 D1:BD0D 3C C6 D1 FE 
              21 D4 -  -  	.dl Branches_5, Branches_5_Fast_0
  155 D1:BD13 80 -  -  -  	.db %10000000
  156 D1:BD14 D2 C6 D1 F0 
              22 D4 -  -  	.dl Branches_11, Branches_11_Fast_0
  157 D1:BD1A 80 -  -  -  	.db %10000000
  158 D1:BD1B 7B C7 D1 F8 
              23 D4 -  -  	.dl Branches_6, Branches_6_Fast_F_0
  159 D1:BD21 A0 -  -  -  	.db %10100000
  160 D1:BD22 95 C2 D1 B5 
              24 D4 -  -  	.dl Moss_2, Moss_2_Slow_O_0
  161 D1:BD28 40 -  -  -  	.db %01000000
  162 D1:BD29 -  -  -  -  
  163 D1:BD29 -  -  -  -  decompress_frame_up_1:
  164 D1:BD29 00 -  -  -  	.db 0
  165 D1:BD2A -  -  -  -  
  166 D1:BD2A -  -  -  -  decompress_frame_up_2:
  167 D1:BD2A 00 -  -  -  	.db 0
  168 D1:BD2B -  -  -  -  
  169 D1:BD2B -  -  -  -  decompress_frame_up_3:
  170 D1:BD2B 00 -  -  -  	.db 0
  171 D1:BD2C -  -  -  -  
  172 D1:BD2C -  -  -  -  decompress_frame_up_4:
  173 D1:BD2C 00 -  -  -  	.db 0
  174 D1:BD2D -  -  -  -  
  175 D1:BD2D -  -  -  -  decompress_frame_up_5:
  176 D1:BD2D 00 -  -  -  	.db 0
  177 D1:BD2E -  -  -  -  
  178 D1:BD2E -  -  -  -  decompress_frame_up_6:
  179 D1:BD2E 00 -  -  -  	.db 0
  180 D1:BD2F -  -  -  -  
  181 D1:BD2F -  -  -  -  decompress_frame_up_7:
  182 D1:BD2F 00 -  -  -  	.db 0
  183 D1:BD30 -  -  -  -  
  184 D1:BD30 -  -  -  -  decompress_frame_up_8:
  185 D1:BD30 00 -  -  -  	.db 0
  186 D1:BD31 -  -  -  -  
  187 D1:BD31 -  -  -  -  decompress_frame_up_9:
  188 D1:BD31 00 -  -  -  	.db 0
  189 D1:BD32 -  -  -  -  
  190 D1:BD32 -  -  -  -  decompress_frame_up_10:
  191 D1:BD32 00 -  -  -  	.db 0
  192 D1:BD33 -  -  -  -  
  193 D1:BD33 -  -  -  -  decompress_frame_up_11:
  194 D1:BD33 00 -  -  -  	.db 0
  195 D1:BD34 -  -  -  -  
  196 D1:BD34 -  -  -  -  decompress_frame_up_12:
  197 D1:BD34 00 -  -  -  	.db 0
  198 D1:BD35 -  -  -  -  
  199 D1:BD35 -  -  -  -  decompress_frame_up_13:
  200 D1:BD35 00 -  -  -  	.db 0
  201 D1:BD36 -  -  -  -  
  202 D1:BD36 -  -  -  -  decompress_frame_up_14:
  203 D1:BD36 00 -  -  -  	.db 0
  204 D1:BD37 -  -  -  -  
  205 D1:BD37 -  -  -  -  decompress_frame_up_15:
  206 D1:BD37 00 -  -  -  	.db 0
  207 D1:BD38 -  -  -  -  
  208 D1:BD38 -  -  -  -  decompress_frame_up_16:
  209 D1:BD38 00 -  -  -  	.db 0
  210 D1:BD39 -  -  -  -  
  211 D1:BD39 -  -  -  -  decompress_frame_up_17:
  212 D1:BD39 00 -  -  -  	.db 0
  213 D1:BD3A -  -  -  -  
  214 D1:BD3A -  -  -  -  decompress_frame_up_18:
  215 D1:BD3A 00 -  -  -  	.db 0
  216 D1:BD3B -  -  -  -  
  217 D1:BD3B -  -  -  -  decompress_frame_up_19:
  218 D1:BD3B 00 -  -  -  	.db 0
  219 D1:BD3C -  -  -  -  
  220 D1:BD3C -  -  -  -  decompress_frame_up_20:
  221 D1:BD3C 00 -  -  -  	.db 0
  222 D1:BD3D -  -  -  -  
  223 D1:BD3D -  -  -  -  decompress_frame_up_21:
  224 D1:BD3D 00 -  -  -  	.db 0
  225 D1:BD3E -  -  -  -  
  226 D1:BD3E -  -  -  -  decompress_frame_up_22:
  227 D1:BD3E 00 -  -  -  	.db 0
  228 D1:BD3F -  -  -  -  
  229 D1:BD3F -  -  -  -  decompress_frame_up_23:
  230 D1:BD3F 00 -  -  -  	.db 0
  231 D1:BD40 -  -  -  -  
  232 D1:BD40 -  -  -  -  decompress_frame_up_24:
  233 D1:BD40 00 -  -  -  	.db 0
  234 D1:BD41 -  -  -  -  
  235 D1:BD41 -  -  -  -  decompress_frame_up_25:
  236 D1:BD41 00 -  -  -  	.db 0
  237 D1:BD42 -  -  -  -  
  238 D1:BD42 -  -  -  -  decompress_frame_up_26:
  239 D1:BD42 00 -  -  -  	.db 0
  240 D1:BD43 -  -  -  -  
  241 D1:BD43 -  -  -  -  decompress_frame_up_27:
  242 D1:BD43 00 -  -  -  	.db 0
  243 D1:BD44 -  -  -  -  
  244 D1:BD44 -  -  -  -  
  245 D1:BD44 -  -  -  -  
  246 D1:BD44 -  -  -  -  decompress_frame_down_0:
  247 D1:BD44 00 -  -  -  	.db 0
  248 D1:BD45 -  -  -  -  
  249 D1:BD45 -  -  -  -  decompress_frame_down_1:
  250 D1:BD45 00 -  -  -  	.db 0
  251 D1:BD46 -  -  -  -  
  252 D1:BD46 -  -  -  -  decompress_frame_down_2:
  253 D1:BD46 00 -  -  -  	.db 0
  254 D1:BD47 -  -  -  -  
  255 D1:BD47 -  -  -  -  decompress_frame_down_3:
  256 D1:BD47 00 -  -  -  	.db 0
  257 D1:BD48 -  -  -  -  
  258 D1:BD48 -  -  -  -  decompress_frame_down_4:
  259 D1:BD48 2C -  -  -  	.db 44
  260 D1:BD49 F5 BF D1 2C 
              03 D4 -  -  	.dl Tree_0, Tree_0_Fast_0
  261 D1:BD4F 80 -  -  -  	.db %10000000
  262 D1:BD50 41 C0 D1 DE 
              03 D4 -  -  	.dl Tree_3, Tree_3_Fast_0
  263 D1:BD56 80 -  -  -  	.db %10000000
  264 D1:BD57 8E C0 D1 94 
              04 D4 -  -  	.dl Tree_6, Tree_6_Fast_0
  265 D1:BD5D 80 -  -  -  	.db %10000000
  266 D1:BD5E B6 C0 D1 4A 
              05 D4 -  -  	.dl Tree_8, Tree_8_Fast_0
  267 D1:BD64 80 -  -  -  	.db %10000000
  268 D1:BD65 DE C0 D1 00 
              06 D4 -  -  	.dl Tree_5, Tree_5_Fast_F_0
  269 D1:BD6B A0 -  -  -  	.db %10100000
  270 D1:BD6C 8E C0 D1 B6 
              06 D4 -  -  	.dl Tree_6, Tree_6_Fast_F_0
  271 D1:BD72 A0 -  -  -  	.db %10100000
  272 D1:BD73 2B C1 D1 6C 
              07 D4 -  -  	.dl Tree_2, Tree_2_Fast_F_0
  273 D1:BD79 A0 -  -  -  	.db %10100000
  274 D1:BD7A 76 C1 D1 1E 
              08 D4 -  -  	.dl Tree_1, Tree_1_Fast_0
  275 D1:BD80 80 -  -  -  	.db %10000000
  276 D1:BD81 C2 C1 D1 D2 
              08 D4 -  -  	.dl Tree_7, Tree_7_Fast_0
  277 D1:BD87 80 -  -  -  	.db %10000000
  278 D1:BD88 EA C1 D1 88 
              09 D4 -  -  	.dl Tree_9, Tree_9_Fast_0
  279 D1:BD8E 80 -  -  -  	.db %10000000
  280 D1:BD8F C2 C1 D1 3E 
              0A D4 -  -  	.dl Tree_7, Tree_7_Fast_F_0
  281 D1:BD95 A0 -  -  -  	.db %10100000
  282 D1:BD96 2B C1 D1 F4 
              0A D4 -  -  	.dl Tree_2, Tree_2_Fast_0
  283 D1:BD9C 80 -  -  -  	.db %10000000
  284 D1:BD9D 12 C2 D1 A6 
              0B D4 -  -  	.dl Tree_4, Tree_4_Fast_0
  285 D1:BDA3 80 -  -  -  	.db %10000000
  286 D1:BDA4 EA C1 D1 5C 
              0C D4 -  -  	.dl Tree_9, Tree_9_Fast_F_0
  287 D1:BDAA A0 -  -  -  	.db %10100000
  288 D1:BDAB 76 C1 D1 12 
              0D D4 -  -  	.dl Tree_1, Tree_1_Fast_F_0
  289 D1:BDB1 A0 -  -  -  	.db %10100000
  290 D1:BDB2 41 C0 D1 C6 
              0D D4 -  -  	.dl Tree_3, Tree_3_Fast_F_0
  291 D1:BDB8 A0 -  -  -  	.db %10100000
  292 D1:BDB9 B6 C0 D1 7C 
              0E D4 -  -  	.dl Tree_8, Tree_8_Fast_F_0
  293 D1:BDBF A0 -  -  -  	.db %10100000
  294 D1:BDC0 12 C2 D1 32 
              0F D4 -  -  	.dl Tree_4, Tree_4_Fast_F_0
  295 D1:BDC6 A0 -  -  -  	.db %10100000
  296 D1:BDC7 F5 BF D1 E8 
              0F D4 -  -  	.dl Tree_0, Tree_0_Fast_F_0
  297 D1:BDCD A0 -  -  -  	.db %10100000
  298 D1:BDCE 5F C2 D1 9A 
              10 D4 -  -  	.dl Moss_0, Moss_0_Fast_0
  299 D1:BDD4 80 -  -  -  	.db %10000000
  300 D1:BDD5 5F C2 D1 24 
              11 D4 -  -  	.dl Moss_0, Moss_0_Fast_F_0
  301 D1:BDDB A0 -  -  -  	.db %10100000
  302 D1:BDDC 95 C2 D1 46 
              12 D4 -  -  	.dl Moss_2, Moss_2_Fast_F_0
  303 D1:BDE2 A0 -  -  -  	.db %10100000
  304 D1:BDE3 CF C2 D1 DD 
              12 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_0
  305 D1:BDE9 40 -  -  -  	.db %01000000
  306 D1:BDEA 0F C3 D1 93 
              13 D4 -  -  	.dl Vines_2, Vines_2_Slow_0
  307 D1:BDF0 00 -  -  -  	.db %00000000
  308 D1:BDF1 56 C3 D1 6F 
              14 D4 -  -  	.dl Vines_1, Vines_1_Slow_O_0
  309 D1:BDF7 40 -  -  -  	.db %01000000
  310 D1:BDF8 CF C2 D1 FB 
              14 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_F_0
  311 D1:BDFE 60 -  -  -  	.db %01100000
  312 D1:BDFF 0F C3 D1 B1 
              15 D4 -  -  	.dl Vines_2, Vines_2_Slow_F_0
  313 D1:BE05 20 -  -  -  	.db %00100000
  314 D1:BE06 CF C2 D1 8B 
              16 D4 -  -  	.dl Vines_3, Vines_3_Slow_F_0
  315 D1:BE0C 20 -  -  -  	.db %00100000
  316 D1:BE0D 56 C3 D1 3B 
              17 D4 -  -  	.dl Vines_1, Vines_1_Slow_0
  317 D1:BE13 00 -  -  -  	.db %00000000
  318 D1:BE14 80 C3 D1 CB 
              17 D4 -  -  	.dl Vines_8, Vines_8_Slow_0
  319 D1:BE1A 00 -  -  -  	.db %00000000
  320 D1:BE1B 0F C3 D1 95 
              18 D4 -  -  	.dl Vines_2, Vines_2_Slow_O_0
  321 D1:BE21 40 -  -  -  	.db %01000000
  322 D1:BE22 CF C2 D1 6D 
              19 D4 -  -  	.dl Vines_3, Vines_3_Slow_0
  323 D1:BE28 00 -  -  -  	.db %00000000
  324 D1:BE29 AE C3 D1 1D 
              1A D4 -  -  	.dl Vines_5, Vines_5_Slow_O_0
  325 D1:BE2F 40 -  -  -  	.db %01000000
  326 D1:BE30 FB C3 D1 0D 
              1B D4 -  -  	.dl Vines_7, Vines_7_Slow_0
  327 D1:BE36 00 -  -  -  	.db %00000000
  328 D1:BE37 80 C3 D1 CD 
              1B D4 -  -  	.dl Vines_8, Vines_8_Slow_F_0
  329 D1:BE3D 20 -  -  -  	.db %00100000
  330 D1:BE3E AE C3 D1 97 
              1C D4 -  -  	.dl Vines_5, Vines_5_Slow_O_F_0
  331 D1:BE44 60 -  -  -  	.db %01100000
  332 D1:BE45 27 C4 D1 85 
              1D D4 -  -  	.dl Vines_4, Vines_4_Slow_O_0
  333 D1:BE4B 40 -  -  -  	.db %01000000
  334 D1:BE4C 5E C4 D1 37 
              1E D4 -  -  	.dl Vines_9, Vines_9_Slow_O_0
  335 D1:BE52 40 -  -  -  	.db %01000000
  336 D1:BE53 91 C4 D1 E9 
              1E D4 -  -  	.dl Vines_10, Vines_10_Slow_O_0
  337 D1:BE59 40 -  -  -  	.db %01000000
  338 D1:BE5A CE C4 D1 A8 
              1F D4 -  -  	.dl Branches_15, Branches_15_Fast_0
  339 D1:BE60 80 -  -  -  	.db %10000000
  340 D1:BE61 90 C5 D1 E4 
              20 D4 -  -  	.dl Branches_3, Branches_3_Fast_F_0
  341 D1:BE67 A0 -  -  -  	.db %10100000
  342 D1:BE68 3C C6 D1 FE 
              21 D4 -  -  	.dl Branches_5, Branches_5_Fast_0
  343 D1:BE6E 80 -  -  -  	.db %10000000
  344 D1:BE6F D2 C6 D1 F0 
              22 D4 -  -  	.dl Branches_11, Branches_11_Fast_0
  345 D1:BE75 80 -  -  -  	.db %10000000
  346 D1:BE76 7B C7 D1 F8 
              23 D4 -  -  	.dl Branches_6, Branches_6_Fast_F_0
  347 D1:BE7C A0 -  -  -  	.db %10100000
  348 D1:BE7D -  -  -  -  
  349 D1:BE7D -  -  -  -  decompress_frame_down_5:
  350 D1:BE7D 00 -  -  -  	.db 0
  351 D1:BE7E -  -  -  -  
  352 D1:BE7E -  -  -  -  decompress_frame_down_6:
  353 D1:BE7E 00 -  -  -  	.db 0
  354 D1:BE7F -  -  -  -  
  355 D1:BE7F -  -  -  -  decompress_frame_down_7:
  356 D1:BE7F 00 -  -  -  	.db 0
  357 D1:BE80 -  -  -  -  
  358 D1:BE80 -  -  -  -  decompress_frame_down_8:
  359 D1:BE80 00 -  -  -  	.db 0
  360 D1:BE81 -  -  -  -  
  361 D1:BE81 -  -  -  -  decompress_frame_down_9:
  362 D1:BE81 00 -  -  -  	.db 0
  363 D1:BE82 -  -  -  -  
  364 D1:BE82 -  -  -  -  decompress_frame_down_10:
  365 D1:BE82 00 -  -  -  	.db 0
  366 D1:BE83 -  -  -  -  
  367 D1:BE83 -  -  -  -  decompress_frame_down_11:
  368 D1:BE83 01 -  -  -  	.db 1
  369 D1:BE84 BE BF D1 C1 
              01 D4 -  -  	.dl Moss_1, Moss_1_Slow_O_0
  370 D1:BE8A 40 -  -  -  	.db %01000000
  371 D1:BE8B -  -  -  -  
  372 D1:BE8B -  -  -  -  decompress_frame_down_12:
  373 D1:BE8B 00 -  -  -  	.db 0
  374 D1:BE8C -  -  -  -  
  375 D1:BE8C -  -  -  -  decompress_frame_down_13:
  376 D1:BE8C 00 -  -  -  	.db 0
  377 D1:BE8D -  -  -  -  
  378 D1:BE8D -  -  -  -  decompress_frame_down_14:
  379 D1:BE8D 00 -  -  -  	.db 0
  380 D1:BE8E -  -  -  -  
  381 D1:BE8E -  -  -  -  decompress_frame_down_15:
  382 D1:BE8E 01 -  -  -  	.db 1
  383 D1:BE8F BE BF D1 9E 
              02 D4 -  -  	.dl Moss_1, Moss_1_Fast_0
  384 D1:BE95 80 -  -  -  	.db %10000000
  385 D1:BE96 -  -  -  -  
  386 D1:BE96 -  -  -  -  decompress_frame_down_16:
  387 D1:BE96 00 -  -  -  	.db 0
  388 D1:BE97 -  -  -  -  
  389 D1:BE97 -  -  -  -  decompress_frame_down_17:
  390 D1:BE97 00 -  -  -  	.db 0
  391 D1:BE98 -  -  -  -  
  392 D1:BE98 -  -  -  -  decompress_frame_down_18:
  393 D1:BE98 00 -  -  -  	.db 0
  394 D1:BE99 -  -  -  -  
  395 D1:BE99 -  -  -  -  decompress_frame_down_19:
  396 D1:BE99 00 -  -  -  	.db 0
  397 D1:BE9A -  -  -  -  
  398 D1:BE9A -  -  -  -  decompress_frame_down_20:
  399 D1:BE9A 01 -  -  -  	.db 1
  400 D1:BE9B 95 C2 D1 AE 
              11 D4 -  -  	.dl Moss_2, Moss_2_Fast_0
  401 D1:BEA1 80 -  -  -  	.db %10000000
  402 D1:BEA2 -  -  -  -  
  403 D1:BEA2 -  -  -  -  decompress_frame_down_21:
  404 D1:BEA2 00 -  -  -  	.db 0
  405 D1:BEA3 -  -  -  -  
  406 D1:BEA3 -  -  -  -  decompress_frame_down_22:
  407 D1:BEA3 00 -  -  -  	.db 0
  408 D1:BEA4 -  -  -  -  
  409 D1:BEA4 -  -  -  -  decompress_frame_down_23:
  410 D1:BEA4 00 -  -  -  	.db 0
  411 D1:BEA5 -  -  -  -  
  412 D1:BEA5 -  -  -  -  decompress_frame_down_24:
  413 D1:BEA5 00 -  -  -  	.db 0
  414 D1:BEA6 -  -  -  -  
  415 D1:BEA6 -  -  -  -  decompress_frame_down_25:
  416 D1:BEA6 00 -  -  -  	.db 0
  417 D1:BEA7 -  -  -  -  
  418 D1:BEA7 -  -  -  -  decompress_frame_down_26:
  419 D1:BEA7 00 -  -  -  	.db 0
  420 D1:BEA8 -  -  -  -  
  421 D1:BEA8 -  -  -  -  decompress_frame_down_27:
  422 D1:BEA8 00 -  -  -  	.db 0
Listing for file "ascent.asm"
  531 D1:BEA9 -  -  -  -  #include "generated/Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Palette_Setup.txt"
    1 D1:BEA9 -  -  -  -  setup_palette_1:
    2 D1:BEA9 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:BEAD 3E 40 -  -  	ld a,%01000000
    4 D1:BEAF 77 -  -  -  	ld (hl),a 
    5 D1:BEB0 23 -  -  -  	inc hl
    6 D1:BEB1 3E 10 -  -  	ld a,%00010000
    7 D1:BEB3 77 -  -  -  	ld (hl),a 
    8 D1:BEB4 23 -  -  -  	inc hl
    9 D1:BEB5 3E C1 -  -  	ld a,%11000001
   10 D1:BEB7 77 -  -  -  	ld (hl),a 
   11 D1:BEB8 23 -  -  -  	inc hl
   12 D1:BEB9 3E A8 -  -  	ld a,%10101000
   13 D1:BEBB 77 -  -  -  	ld (hl),a 
   14 D1:BEBC 23 -  -  -  	inc hl
   15 D1:BEBD 3E C6 -  -  	ld a,%11000110
   16 D1:BEBF 77 -  -  -  	ld (hl),a 
   17 D1:BEC0 23 -  -  -  	inc hl
   18 D1:BEC1 3E D1 -  -  	ld a,%11010001
   19 D1:BEC3 77 -  -  -  	ld (hl),a 
   20 D1:BEC4 23 -  -  -  	inc hl
   21 D1:BEC5 3E 2A -  -  	ld a,%00101010
   22 D1:BEC7 77 -  -  -  	ld (hl),a 
   23 D1:BEC8 23 -  -  -  	inc hl
   24 D1:BEC9 3E 2E -  -  	ld a,%00101110
   25 D1:BECB 77 -  -  -  	ld (hl),a 
   26 D1:BECC 23 -  -  -  	inc hl
   27 D1:BECD 3E 65 -  -  	ld a,%01100101
   28 D1:BECF 77 -  -  -  	ld (hl),a 
   29 D1:BED0 23 -  -  -  	inc hl
   30 D1:BED1 3E 95 -  -  	ld a,%10010101
   31 D1:BED3 77 -  -  -  	ld (hl),a 
   32 D1:BED4 23 -  -  -  	inc hl
   33 D1:BED5 3E A2 -  -  	ld a,%10100010
   34 D1:BED7 77 -  -  -  	ld (hl),a 
   35 D1:BED8 23 -  -  -  	inc hl
   36 D1:BED9 3E 12 -  -  	ld a,%00010010
   37 D1:BEDB 77 -  -  -  	ld (hl),a 
   38 D1:BEDC 23 -  -  -  	inc hl
   39 D1:BEDD 3E 00 -  -  	ld a,%00000000
   40 D1:BEDF 77 -  -  -  	ld (hl),a 
   41 D1:BEE0 23 -  -  -  	inc hl
   42 D1:BEE1 3E 00 -  -  	ld a,%00000000
   43 D1:BEE3 77 -  -  -  	ld (hl),a 
   44 D1:BEE4 23 -  -  -  	inc hl
   45 D1:BEE5 3E F9 -  -  	ld a,%11111001
   46 D1:BEE7 77 -  -  -  	ld (hl),a 
   47 D1:BEE8 23 -  -  -  	inc hl
   48 D1:BEE9 3E 0A -  -  	ld a,%00001010
   49 D1:BEEB 77 -  -  -  	ld (hl),a 
   50 D1:BEEC 23 -  -  -  	inc hl
   51 D1:BEED 3E FF -  -  	ld a,%11111111
   52 D1:BEEF 77 -  -  -  	ld (hl),a 
   53 D1:BEF0 23 -  -  -  	inc hl
   54 D1:BEF1 3E FF -  -  	ld a,%11111111
   55 D1:BEF3 77 -  -  -  	ld (hl),a 
   56 D1:BEF4 23 -  -  -  	inc hl
   57 D1:BEF5 3E 20 -  -  	ld a,%00100000
   58 D1:BEF7 77 -  -  -  	ld (hl),a 
   59 D1:BEF8 23 -  -  -  	inc hl
   60 D1:BEF9 3E 6A -  -  	ld a,%01101010
   61 D1:BEFB 77 -  -  -  	ld (hl),a 
   62 D1:BEFC 23 -  -  -  	inc hl
   63 D1:BEFD 3E 1F -  -  	ld a,%00011111
   64 D1:BEFF 77 -  -  -  	ld (hl),a 
   65 D1:BF00 23 -  -  -  	inc hl
   66 D1:BF01 3E 81 -  -  	ld a,%10000001
   67 D1:BF03 77 -  -  -  	ld (hl),a 
   68 D1:BF04 23 -  -  -  	inc hl
   69 D1:BF05 3E 1F -  -  	ld a,%00011111
   70 D1:BF07 77 -  -  -  	ld (hl),a 
   71 D1:BF08 23 -  -  -  	inc hl
   72 D1:BF09 3E 81 -  -  	ld a,%10000001
   73 D1:BF0B 77 -  -  -  	ld (hl),a 
   74 D1:BF0C 23 -  -  -  	inc hl
   75 D1:BF0D 3E 1F -  -  	ld a,%00011111
   76 D1:BF0F 77 -  -  -  	ld (hl),a 
   77 D1:BF10 23 -  -  -  	inc hl
   78 D1:BF11 3E 81 -  -  	ld a,%10000001
   79 D1:BF13 77 -  -  -  	ld (hl),a 
   80 D1:BF14 23 -  -  -  	inc hl
   81 D1:BF15 3E 1F -  -  	ld a,%00011111
   82 D1:BF17 77 -  -  -  	ld (hl),a 
   83 D1:BF18 23 -  -  -  	inc hl
   84 D1:BF19 3E 81 -  -  	ld a,%10000001
   85 D1:BF1B 77 -  -  -  	ld (hl),a 
   86 D1:BF1C 23 -  -  -  	inc hl
   87 D1:BF1D 3E C6 -  -  	ld a,%11000110
   88 D1:BF1F 77 -  -  -  	ld (hl),a 
   89 D1:BF20 23 -  -  -  	inc hl
   90 D1:BF21 3E 98 -  -  	ld a,%10011000
   91 D1:BF23 77 -  -  -  	ld (hl),a 
   92 D1:BF24 23 -  -  -  	inc hl
   93 D1:BF25 3E 07 -  -  	ld a,%00000111
   94 D1:BF27 77 -  -  -  	ld (hl),a 
   95 D1:BF28 23 -  -  -  	inc hl
   96 D1:BF29 3E 1D -  -  	ld a,%00011101
   97 D1:BF2B 77 -  -  -  	ld (hl),a 
   98 D1:BF2C 23 -  -  -  	inc hl
   99 D1:BF2D C9 -  -  -  	ret 
Listing for file "ascent.asm"
  532 D1:BF2E -  -  -  -  #include "generated/Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Tables.txt"
    1 D1:BF2E -  -  -  -  Sprite_Table_0:
    2 D1:BF2E C1 01 D4 -  	.dl Moss_1_Slow_O_0
    3 D1:BF31 9E 02 D4 -  	.dl Moss_1_Fast_0
    4 D1:BF34 3B 17 D4 -  	.dl Vines_1_Slow_0
    5 D1:BF37 8B 16 D4 -  	.dl Vines_3_Slow_F_0
    6 D1:BF3A B1 15 D4 -  	.dl Vines_2_Slow_F_0
    7 D1:BF3D FB 14 D4 -  	.dl Vines_3_Slow_O_F_0 ;5
    8 D1:BF40 6F 14 D4 -  	.dl Vines_1_Slow_O_0
    9 D1:BF43 93 13 D4 -  	.dl Vines_2_Slow_0
   10 D1:BF46 DD 12 D4 -  	.dl Vines_3_Slow_O_0
   11 D1:BF49 2C 03 D4 -  	.dl Tree_0_Fast_0
   12 D1:BF4C A6 0B D4 -  	.dl Tree_4_Fast_0 ;10
   13 D1:BF4F D2 08 D4 -  	.dl Tree_7_Fast_0
   14 D1:BF52 5C 0C D4 -  	.dl Tree_9_Fast_F_0
   15 D1:BF55 B6 06 D4 -  	.dl Tree_6_Fast_F_0
   16 D1:BF58 00 06 D4 -  	.dl Tree_5_Fast_F_0
   17 D1:BF5B 12 0D D4 -  	.dl Tree_1_Fast_F_0 ;15
   18 D1:BF5E 3E 0A D4 -  	.dl Tree_7_Fast_F_0
   19 D1:BF61 DE 03 D4 -  	.dl Tree_3_Fast_0
   20 D1:BF64 94 04 D4 -  	.dl Tree_6_Fast_0
   21 D1:BF67 88 09 D4 -  	.dl Tree_9_Fast_0
   22 D1:BF6A F4 0A D4 -  	.dl Tree_2_Fast_0
   23 D1:BF6D 32 0F D4 -  	.dl Tree_4_Fast_F_0
   24 D1:BF70 6C 07 D4 -  	.dl Tree_2_Fast_F_0
   25 D1:BF73 C6 0D D4 -  	.dl Tree_3_Fast_F_0
   26 D1:BF76 1E 08 D4 -  	.dl Tree_1_Fast_0
   27 D1:BF79 4A 05 D4 -  	.dl Tree_8_Fast_0
   28 D1:BF7C 7C 0E D4 -  	.dl Tree_8_Fast_F_0
   29 D1:BF7F E8 0F D4 -  	.dl Tree_0_Fast_F_0
   30 D1:BF82 0D 1B D4 -  	.dl Vines_7_Slow_0
   31 D1:BF85 CD 1B D4 -  	.dl Vines_8_Slow_F_0
   32 D1:BF88 85 1D D4 -  	.dl Vines_4_Slow_O_0
   33 D1:BF8B 37 1E D4 -  	.dl Vines_9_Slow_O_0
   34 D1:BF8E E9 1E D4 -  	.dl Vines_10_Slow_O_0
   35 D1:BF91 A8 1F D4 -  	.dl Branches_15_Fast_0
   36 D1:BF94 E4 20 D4 -  	.dl Branches_3_Fast_F_0
   37 D1:BF97 1D 1A D4 -  	.dl Vines_5_Slow_O_0
   38 D1:BF9A FE 21 D4 -  	.dl Branches_5_Fast_0
   39 D1:BF9D 97 1C D4 -  	.dl Vines_5_Slow_O_F_0
   40 D1:BFA0 6D 19 D4 -  	.dl Vines_3_Slow_0
   41 D1:BFA3 CB 17 D4 -  	.dl Vines_8_Slow_0
   42 D1:BFA6 AE 11 D4 -  	.dl Moss_2_Fast_0
   43 D1:BFA9 24 11 D4 -  	.dl Moss_0_Fast_F_0
   44 D1:BFAC 46 12 D4 -  	.dl Moss_2_Fast_F_0
   45 D1:BFAF 9A 10 D4 -  	.dl Moss_0_Fast_0
   46 D1:BFB2 F0 22 D4 -  	.dl Branches_11_Fast_0
   47 D1:BFB5 95 18 D4 -  	.dl Vines_2_Slow_O_0
   48 D1:BFB8 F8 23 D4 -  	.dl Branches_6_Fast_F_0
   49 D1:BFBB B5 24 D4 -  	.dl Moss_2_Slow_O_0
   50 D1:BFBE -  -  -  -  
   51 D1:BFBE -  -  -  -  Sprite_Table_1:
   52 D1:BFBE -  -  -  -  
Listing for file "ascent.asm"
  533 D1:BFBE -  -  -  -  #include "generated/Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Data.txt"
    1 D1:BFBE -  -  -  -  Moss_1:
    2 D1:BFBE 10 -  -  -  	.db %00010000
    3 D1:BFBF 10 10 -  -  	.db 16, 16
    4 D1:BFC1 00 3C 30 FC 
              30 FC 3F CC 	.db %00000000, %00111100, %00110000, %11111100, %00110000, %11111100, %00111111, %11001100
    5 D1:BFC9 FC FC FC C0 
              FF FC 33 CF 	.db %11111100, %11111100, %11111100, %11000000, %11111111, %11111100, %00110011, %11001111
    6 D1:BFD1 3F C3 3F FF 
              3F 3C 3F 3C 	.db %00111111, %11000011, %00111111, %11111111, %00111111, %00111100, %00111111, %00111100
    7 D1:BFD9 3F F0 3F F0 
              3C 00 3C 00 	.db %00111111, %11110000, %00111111, %11110000, %00111100, %00000000, %00111100, %00000000
    8 D1:BFE1 -  -  -  -  
    9 D1:BFE1 34 -  -  -  	.db %00110100
   10 D1:BFE2 -  -  -  -  
   11 D1:BFE2 10 14 10 04 
              10 41 B1 41 	.db %00010000, %00010100, %00010000, %00000100, %00010000, %01000001, %10110001, %01000001
   12 D1:BFEA 00 0E 23 0F 
              41 00 2C 01 	.db %00000000, %00001110, %00100011, %00001111, %01000001, %00000000, %00101100, %00000001
   13 D1:BFF2 03 44 40 -  	.db %00000011, %01000100, %01000000
   14 D1:BFF5 -  -  -  -  
   15 D1:BFF5 -  -  -  -  
   16 D1:BFF5 -  -  -  -  Tree_0:
   17 D1:BFF5 10 -  -  -  	.db %00010000
   18 D1:BFF6 18 0C -  -  	.db 24, 12
   19 D1:BFF8 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   20 D1:C000 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   21 D1:C008 FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
   22 D1:C010 3F FF FF FF 
              FF FF FF FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   23 D1:C018 FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
   24 D1:C01C -  -  -  -  
   25 D1:C01C 01 -  -  -  	.db %00000001
   26 D1:C01D -  -  -  -  
   27 D1:C01D 00 06 04 00 
              06 32 01 82 	.db %00000000, %00000110, %00000100, %00000000, %00000110, %00110010, %00000001, %10000010
   28 D1:C025 10 01 86 00 
              01 04 31 00 	.db %00010000, %00000001, %10000110, %00000000, %00000001, %00000100, %00110001, %00000000
   29 D1:C02D 08 40 10 62 
              0C 43 80 30 	.db %00001000, %01000000, %00010000, %01100010, %00001100, %01000011, %10000000, %00110000
   30 D1:C035 0C 0D 00 0C 
              1C 00 50 38 	.db %00001100, %00001101, %00000000, %00001100, %00011100, %00000000, %01010000, %00111000
   31 D1:C03D 00 00 30 80 	.db %00000000, %00000000, %00110000, %10000000
   32 D1:C041 -  -  -  -  
   33 D1:C041 -  -  -  -  
   34 D1:C041 -  -  -  -  Tree_3:
   35 D1:C041 24 -  -  -  	.db %00100100
   36 D1:C042 18 0C -  -  	.db 24, 12
   37 D1:C044 01 20 -  -  	.db %00000001, %00100000
   38 D1:C046 -  -  -  -  
   39 D1:C046 14 00 05 14 
              01 5A 14 01 	.db %00010100, %00000000, %00000101, %00010100, %00000001, %01011010, %00010100, %00000001
   40 D1:C04E 15 15 01 5A 
              15 04 14 15 	.db %00010101, %00010101, %00000001, %01011010, %00010101, %00000100, %00010100, %00010101
   41 D1:C056 01 66 05 10 
              00 15 81 65 	.db %00000001, %01100110, %00000101, %00010000, %00000000, %00010101, %10000001, %01100101
   42 D1:C05E 05 00 00 51 
              85 69 05 05 	.db %00000101, %00000000, %00000000, %01010001, %10000101, %01101001, %00000101, %00000101
   43 D1:C066 01 51 85 59 
              14 15 00 51 	.db %00000001, %01010001, %10000101, %01011001, %00010100, %00010101, %00000000, %01010001
   44 D1:C06E 45 55 14 14 
              00 54 45 65 	.db %01000101, %01010101, %00010100, %00010100, %00000000, %01010100, %01000101, %01100101
   45 D1:C076 10 50 00 54 
              85 65 04 50 	.db %00010000, %01010000, %00000000, %01010100, %10000101, %01100101, %00000100, %01010000
   46 D1:C07E 50 14 06 25 
              14 40 54 04 	.db %01010000, %00010100, %00000110, %00100101, %00010100, %01000000, %01010100, %00000100
   47 D1:C086 00 55 00 10 
              14 00 00 55 	.db %00000000, %01010101, %00000000, %00010000, %00010100, %00000000, %00000000, %01010101
   48 D1:C08E -  -  -  -  
   49 D1:C08E -  -  -  -  
   50 D1:C08E -  -  -  -  Tree_6:
   51 D1:C08E 14 -  -  -  	.db %00010100
   52 D1:C08F 18 0C -  -  	.db 24, 12
   53 D1:C091 12 -  -  -  	.db %00010010
   54 D1:C092 -  -  -  -  
   55 D1:C092 10 04 63 10 
              0C 67 10 4C 	.db %00010000, %00000100, %01100011, %00010000, %00001100, %01100111, %00010000, %01001100
   56 D1:C09A 67 10 4D 67 
              20 CC 77 01 	.db %01100111, %00010000, %01001101, %01100111, %00100000, %11001100, %01110111, %00000001
   57 D1:C0A2 CC 77 11 8E 
              77 53 86 4F 	.db %11001100, %01110111, %00010001, %10001110, %01110111, %01010011, %10000110, %01001111
   58 D1:C0AA 53 80 4F 43 
              10 9F 02 18 	.db %01010011, %10000000, %01001111, %01000011, %00010000, %10011111, %00000010, %00011000
   59 D1:C0B2 BF 00 19 34 	.db %10111111, %00000000, %00011001, %00110100
   60 D1:C0B6 -  -  -  -  
   61 D1:C0B6 -  -  -  -  
   62 D1:C0B6 -  -  -  -  Tree_8:
   63 D1:C0B6 14 -  -  -  	.db %00010100
   64 D1:C0B7 18 0C -  -  	.db 24, 12
   65 D1:C0B9 21 -  -  -  	.db %00100001
   66 D1:C0BA -  -  -  -  
   67 D1:C0BA 40 20 22 50 
              20 30 58 20 	.db %01000000, %00100000, %00100010, %01010000, %00100000, %00110000, %01011000, %00100000
   68 D1:C0C2 30 58 20 39 
              18 A0 39 18 	.db %00110000, %01011000, %00100000, %00111001, %00011000, %10100000, %00111001, %00011000
   69 D1:C0CA C0 18 1C 80 
              88 0D 00 CC 	.db %11000000, %00011000, %00011100, %10000000, %10001000, %00001101, %00000000, %11001100
   70 D1:C0D2 0C 01 CC 0C 
              00 CC 08 20 	.db %00001100, %00000001, %11001100, %00001100, %00000000, %11001100, %00001000, %00100000
   71 D1:C0DA C9 00 60 C0 	.db %11001001, %00000000, %01100000, %11000000
   72 D1:C0DE -  -  -  -  
   73 D1:C0DE -  -  -  -  
   74 D1:C0DE -  -  -  -  Tree_5:
   75 D1:C0DE 24 -  -  -  	.db %00100100
   76 D1:C0DF 18 0C -  -  	.db 24, 12
   77 D1:C0E1 01 20 -  -  	.db %00000001, %00100000
   78 D1:C0E3 -  -  -  -  
   79 D1:C0E3 05 00 01 05 
              11 95 01 05 	.db %00000101, %00000000, %00000001, %00000101, %00010001, %10010101, %00000001, %00000101
   80 D1:C0EB 41 54 41 95 
              01 45 41 54 	.db %01000001, %01010100, %01000001, %10010101, %00000001, %01000101, %01000001, %01010100
   81 D1:C0F3 50 65 01 04 
              41 80 50 55 	.db %01010000, %01100101, %00000001, %00000100, %01000001, %10000000, %01010000, %01010101
   82 D1:C0FB 51 01 40 00 
              54 15 11 01 	.db %01010001, %00000001, %01000000, %00000000, %01010100, %00010101, %00010001, %00000001
   83 D1:C103 40 10 58 55 
              05 41 10 50 	.db %01000000, %00010000, %01011000, %01010101, %00000101, %01000001, %00010000, %01010000
   84 D1:C10B 50 55 05 00 
              55 10 60 59 	.db %01010000, %01010101, %00000101, %00000000, %01010101, %00010000, %01100000, %01011001
   85 D1:C113 05 01 45 10 
              61 65 15 01 	.db %00000101, %00000001, %01000101, %00010000, %01100001, %01100101, %00010101, %00000001
   86 D1:C11B 45 41 61 95 
              05 11 05 51 	.db %01000101, %01000001, %01100001, %10010101, %00000101, %00010001, %00000101, %01010001
   87 D1:C123 55 95 05 45 
              04 11 11 45 	.db %01010101, %10010101, %00000101, %01000101, %00000100, %00010001, %00010001, %01000101
   88 D1:C12B -  -  -  -  
   89 D1:C12B -  -  -  -  
   90 D1:C12B -  -  -  -  Tree_2:
   91 D1:C12B 10 -  -  -  	.db %00010000
   92 D1:C12C 18 0C -  -  	.db 24, 12
   93 D1:C12E FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   94 D1:C136 FF FF FF FF 
              3F FF FF 3F 	.db %11111111, %11111111, %11111111, %11111111, %00111111, %11111111, %11111111, %00111111
   95 D1:C13E FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
   96 D1:C146 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   97 D1:C14E FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
   98 D1:C152 -  -  -  -  
   99 D1:C152 01 -  -  -  	.db %00000001
  100 D1:C153 -  -  -  -  
  101 D1:C153 00 00 06 00 
              40 C6 04 60 	.db %00000000, %00000000, %00000110, %00000000, %01000000, %11000110, %00000100, %01100000
  102 D1:C15B CC 04 70 CC 
              01 C7 90 03 	.db %11001100, %00000100, %01110000, %11001100, %00000001, %11000111, %10010000, %00000011
  103 D1:C163 2E 00 0F 18 
              40 0C 60 00 	.db %00101110, %00000000, %00001111, %00011000, %01000000, %00001100, %01100000, %00000000
  104 D1:C16B 00 33 00 06 
              37 00 C6 06 	.db %00000000, %00110011, %00000000, %00000110, %00110111, %00000000, %11000110, %00000110
  105 D1:C173 00 C1 00 -  	.db %00000000, %11000001, %00000000
  106 D1:C176 -  -  -  -  
  107 D1:C176 -  -  -  -  
  108 D1:C176 -  -  -  -  Tree_1:
  109 D1:C176 10 -  -  -  	.db %00010000
  110 D1:C177 18 0C -  -  	.db 24, 12
  111 D1:C179 3F FF FF 3F 
              FF FF FF FF 	.db %00111111, %11111111, %11111111, %00111111, %11111111, %11111111, %11111111, %11111111
  112 D1:C181 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  113 D1:C189 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  114 D1:C191 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  115 D1:C199 FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
  116 D1:C19D -  -  -  -  
  117 D1:C19D 01 -  -  -  	.db %00000001
  118 D1:C19E -  -  -  -  
  119 D1:C19E 04 38 0C 00 
              E0 30 00 C6 	.db %00000100, %00111000, %00001100, %00000000, %11100000, %00110000, %00000000, %11000110
  120 D1:C1A6 60 00 C6 00 
              0C 27 00 1C 	.db %01100000, %00000000, %11000110, %00000000, %00001100, %00100111, %00000000, %00011100
  121 D1:C1AE 13 00 1C 00 
              00 18 31 A0 	.db %00010011, %00000000, %00011100, %00000000, %00000000, %00011000, %00110001, %10100000
  122 D1:C1B6 08 71 90 08 
              E1 C0 00 C8 	.db %00001000, %01110001, %10010000, %00001000, %11100001, %11000000, %00000000, %11001000
  123 D1:C1BE C0 00 04 00 	.db %11000000, %00000000, %00000100, %00000000
  124 D1:C1C2 -  -  -  -  
  125 D1:C1C2 -  -  -  -  
  126 D1:C1C2 -  -  -  -  Tree_7:
  127 D1:C1C2 14 -  -  -  	.db %00010100
  128 D1:C1C3 18 0C -  -  	.db 24, 12
  129 D1:C1C5 12 -  -  -  	.db %00010010
  130 D1:C1C6 -  -  -  -  
  131 D1:C1C6 70 60 19 70 
              64 19 3A 64 	.db %01110000, %01100000, %00011001, %01110000, %01100100, %00011001, %00111010, %01100100
  132 D1:C1CE 3F 5B 46 3F 
              21 4E 37 28 	.db %00111111, %01011011, %01000110, %00111111, %00100001, %01001110, %00110111, %00101000
  133 D1:C1D6 4E 67 08 DE 
              67 18 DD 76 	.db %01001110, %01100111, %00001000, %11011110, %01100111, %00011000, %11011101, %01110110
  134 D1:C1DE 00 D8 F6 00 
              19 66 19 08 	.db %00000000, %11011000, %11110110, %00000000, %00011001, %01100110, %00011001, %00001000
  135 D1:C1E6 66 10 08 06 	.db %01100110, %00010000, %00001000, %00000110
  136 D1:C1EA -  -  -  -  
  137 D1:C1EA -  -  -  -  
  138 D1:C1EA -  -  -  -  Tree_9:
  139 D1:C1EA 14 -  -  -  	.db %00010100
  140 D1:C1EB 18 0C -  -  	.db 24, 12
  141 D1:C1ED 21 -  -  -  	.db %00100001
  142 D1:C1EE -  -  -  -  
  143 D1:C1EE 00 00 18 34 
              00 1C 38 01 	.db %00000000, %00000000, %00011000, %00110100, %00000000, %00011100, %00111000, %00000001
  144 D1:C1F6 3F 30 01 0E 
              30 00 0C 31 	.db %00111111, %00110000, %00000001, %00001110, %00110000, %00000000, %00001100, %00110001
  145 D1:C1FE 00 0C 39 00 
              4C 19 80 44 	.db %00000000, %00001100, %00111001, %00000000, %01001100, %00011001, %10000000, %01000100
  146 D1:C206 18 C0 40 13 
              C0 70 C3 80 	.db %00011000, %11000000, %01000000, %00010011, %11000000, %01110000, %11000011, %10000000
  147 D1:C20E 70 40 00 30 	.db %01110000, %01000000, %00000000, %00110000
  148 D1:C212 -  -  -  -  
  149 D1:C212 -  -  -  -  
  150 D1:C212 -  -  -  -  Tree_4:
  151 D1:C212 24 -  -  -  	.db %00100100
  152 D1:C213 18 0C -  -  	.db 24, 12
  153 D1:C215 01 20 -  -  	.db %00000001, %00100000
  154 D1:C217 -  -  -  -  
  155 D1:C217 10 51 00 50 
              11 16 14 51 	.db %00010000, %01010001, %00000000, %01010000, %00010001, %00010110, %00010100, %01010001
  156 D1:C21F 01 50 95 56 
              14 51 05 50 	.db %00000001, %01010000, %10010101, %01010110, %00010100, %01010001, %00000101, %01010000
  157 D1:C227 52 55 04 51 
              55 48 52 55 	.db %01010010, %01010101, %00000100, %01010001, %01010101, %01001000, %01010010, %01010101
  158 D1:C22F 14 51 01 48 
              52 55 14 51 	.db %00010100, %01010001, %00000001, %01001000, %01010010, %01010101, %00010100, %01010001
  159 D1:C237 41 05 19 55 
              10 41 41 45 	.db %01000001, %00000101, %00011001, %01010101, %00010000, %01000001, %01000001, %01000101
  160 D1:C23F 19 56 00 45 
              41 46 18 56 	.db %00011001, %01010110, %00000000, %01000101, %01000001, %01000110, %00011000, %01010110
  161 D1:C247 05 51 41 42 
              16 15 45 51 	.db %00000101, %01010001, %01000001, %01000010, %00010110, %00010101, %01000101, %01010001
  162 D1:C24F 01 42 11 59 
              00 11 00 42 	.db %00000001, %01000010, %00010001, %01011001, %00000000, %00010001, %00000000, %01000010
  163 D1:C257 14 15 00 01 
              00 44 15 55 	.db %00010100, %00010101, %00000000, %00000001, %00000000, %01000100, %00010101, %01010101
  164 D1:C25F -  -  -  -  
  165 D1:C25F -  -  -  -  
  166 D1:C25F -  -  -  -  Moss_0:
  167 D1:C25F 10 -  -  -  	.db %00010000
  168 D1:C260 10 10 -  -  	.db 16, 16
  169 D1:C262 00 03 00 33 
              00 F3 3C FF 	.db %00000000, %00000011, %00000000, %00110011, %00000000, %11110011, %00111100, %11111111
  170 D1:C26A FC CF 3F FF 
              F3 FC F3 FC 	.db %11111100, %11001111, %00111111, %11111111, %11110011, %11111100, %11110011, %11111100
  171 D1:C272 FF FF FF FF 
              FF 0C FF 0C 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00001100, %11111111, %00001100
  172 D1:C27A 3F 00 3C 00 
              0C 00 0C 00 	.db %00111111, %00000000, %00111100, %00000000, %00001100, %00000000, %00001100, %00000000
  173 D1:C282 -  -  -  -  
  174 D1:C282 34 -  -  -  	.db %00110100
  175 D1:C283 -  -  -  -  
  176 D1:C283 54 51 01 46 
              90 04 42 04 	.db %01010100, %01010001, %00000001, %01000110, %10010000, %00000100, %01000010, %00000100
  177 D1:C28B 60 41 80 40 
              3C 40 50 1C 	.db %01100000, %01000001, %10000000, %01000000, %00111100, %01000000, %01010000, %00011100
  178 D1:C293 1D 50 -  -  	.db %00011101, %01010000
  179 D1:C295 -  -  -  -  
  180 D1:C295 -  -  -  -  
  181 D1:C295 -  -  -  -  Moss_2:
  182 D1:C295 10 -  -  -  	.db %00010000
  183 D1:C296 10 10 -  -  	.db 16, 16
  184 D1:C298 3F 00 3F F0 
              3F F0 3F FC 	.db %00111111, %00000000, %00111111, %11110000, %00111111, %11110000, %00111111, %11111100
  185 D1:C2A0 FC FC FC FC 
              0F FC 03 FC 	.db %11111100, %11111100, %11111100, %11111100, %00001111, %11111100, %00000011, %11111100
  186 D1:C2A8 FF FC FF FF 
              FF F3 FF 3F 	.db %11111111, %11111100, %11111111, %11111111, %11111111, %11110011, %11111111, %00111111
  187 D1:C2B0 FF FF 33 FF 
              30 F0 30 30 	.db %11111111, %11111111, %00110011, %11111111, %00110000, %11110000, %00110000, %00110000
  188 D1:C2B8 -  -  -  -  
  189 D1:C2B8 34 -  -  -  	.db %00110100
  190 D1:C2B9 -  -  -  -  
  191 D1:C2B9 00 08 00 06 
              04 18 50 84 	.db %00000000, %00001000, %00000000, %00000110, %00000100, %00011000, %01010000, %10000100
  192 D1:C2C1 21 81 7C 04 
              C0 10 00 50 	.db %00100001, %10000001, %01111100, %00000100, %11000000, %00010000, %00000000, %01010000
  193 D1:C2C9 08 40 00 4C 
              05 D7 -  -  	.db %00001000, %01000000, %00000000, %01001100, %00000101, %11010111
  194 D1:C2CF -  -  -  -  
  195 D1:C2CF -  -  -  -  
  196 D1:C2CF -  -  -  -  Vines_3:
  197 D1:C2CF 10 -  -  -  	.db %00010000
  198 D1:C2D0 18 10 -  -  	.db 24, 16
  199 D1:C2D2 00 00 01 00 
              00 03 00 00 	.db %00000000, %00000000, %00000001, %00000000, %00000000, %00000011, %00000000, %00000000
  200 D1:C2DA 37 00 00 3E 
              00 00 1C 00 	.db %00110111, %00000000, %00000000, %00111110, %00000000, %00000000, %00011100, %00000000
  201 D1:C2E2 10 78 00 30 
              F8 00 1F EC 	.db %00010000, %01111000, %00000000, %00110000, %11111000, %00000000, %00011111, %11101100
  202 D1:C2EA 18 0F CC 18 
              3F 80 0B FE 	.db %00011000, %00001111, %11001100, %00011000, %00111111, %10000000, %00001011, %11111110
  203 D1:C2F2 00 FF F8 00 
              FF C0 00 01 	.db %00000000, %11111111, %11111000, %00000000, %11111111, %11000000, %00000000, %00000001
  204 D1:C2FA 00 00 03 00 
              00 03 00 00 	.db %00000000, %00000000, %00000011, %00000000, %00000000, %00000011, %00000000, %00000000
  205 D1:C302 -  -  -  -  
  206 D1:C302 34 -  -  -  	.db %00110100
  207 D1:C303 -  -  -  -  
  208 D1:C303 03 1B 18 70 
              3C 1F 07 81 	.db %00000011, %00011011, %00011000, %01110000, %00111100, %00011111, %00000111, %10000001
  209 D1:C30B E0 7F FF FE 	.db %11100000, %01111111, %11111111, %11111110
  210 D1:C30F -  -  -  -  
  211 D1:C30F -  -  -  -  
  212 D1:C30F -  -  -  -  Vines_2:
  213 D1:C30F 10 -  -  -  	.db %00010000
  214 D1:C310 16 13 -  -  	.db 22, 19
  215 D1:C312 00 00 04 00 
              00 30 00 39 	.db %00000000, %00000000, %00000100, %00000000, %00000000, %00110000, %00000000, %00111001
  216 D1:C31A C0 00 6F 00 
              10 78 00 63 	.db %11000000, %00000000, %01101111, %00000000, %00010000, %01111000, %00000000, %01100011
  217 D1:C322 C0 01 9F 00 
              07 F0 00 0F 	.db %11000000, %00000001, %10011111, %00000000, %00000111, %11110000, %00000000, %00001111
  218 D1:C32A C0 00 7D 80 
              63 E6 01 DF 	.db %11000000, %00000000, %01111101, %10000000, %01100011, %11100110, %00000001, %11011111
  219 D1:C332 80 01 F6 00 
              0F 80 00 F8 	.db %10000000, %00000001, %11110110, %00000000, %00001111, %10000000, %00000000, %11111000
  220 D1:C33A 00 1F F8 00 
              3C E0 01 E0 	.db %00000000, %00011111, %11111000, %00000000, %00111100, %11100000, %00000001, %11100000
  221 D1:C342 00 0E 00 00 
              00 -  -  -  	.db %00000000, %00001110, %00000000, %00000000, %00000000
  222 D1:C347 -  -  -  -  
  223 D1:C347 34 -  -  -  	.db %00110100
  224 D1:C348 -  -  -  -  
  225 D1:C348 21 86 30 C3 
              83 3C F8 7C 	.db %00100001, %10000110, %00110000, %11000011, %10000011, %00111100, %11111000, %01111100
  226 D1:C350 1E 7C E7 0F 
              CF 9B -  -  	.db %00011110, %01111100, %11100111, %00001111, %11001111, %10011011
  227 D1:C356 -  -  -  -  
  228 D1:C356 -  -  -  -  
  229 D1:C356 -  -  -  -  Vines_1:
  230 D1:C356 10 -  -  -  	.db %00010000
  231 D1:C357 18 09 -  -  	.db 24, 9
  232 D1:C359 00 06 30 18 
              0E 33 F8 0C 	.db %00000000, %00000110, %00110000, %00011000, %00001110, %00110011, %11111000, %00001100
  233 D1:C361 1F FC 07 FF 
              FF FF F0 1F 	.db %00011111, %11111100, %00000111, %11111111, %11111111, %11111111, %11110000, %00011111
  234 D1:C369 FE 80 30 00 
              E0 30 00 60 	.db %11111110, %10000000, %00110000, %00000000, %11100000, %00110000, %00000000, %01100000
  235 D1:C371 30 00 00 -  	.db %00110000, %00000000, %00000000
  236 D1:C374 -  -  -  -  
  237 D1:C374 34 -  -  -  	.db %00110100
  238 D1:C375 -  -  -  -  
  239 D1:C375 00 00 00 F0 
              03 FF 00 FF 	.db %00000000, %00000000, %00000000, %11110000, %00000011, %11111111, %00000000, %11111111
  240 D1:C37D FF FF FC -  	.db %11111111, %11111111, %11111100
  241 D1:C380 -  -  -  -  
  242 D1:C380 -  -  -  -  
  243 D1:C380 -  -  -  -  Vines_8:
  244 D1:C380 10 -  -  -  	.db %00010000
  245 D1:C381 0A 18 -  -  	.db 10, 24
  246 D1:C383 07 01 C1 F0 
              3C 07 01 C1 	.db %00000111, %00000001, %11000001, %11110000, %00111100, %00000111, %00000001, %11000001
  247 D1:C38B FC 3B 0E 03 
              80 E0 38 0E 	.db %11111100, %00111011, %00001110, %00000011, %10000000, %11100000, %00111000, %00001110
  248 D1:C393 07 A1 FB 78 
              FC 07 03 80 	.db %00000111, %10100001, %11111011, %01111000, %11111100, %00000111, %00000011, %10000000
  249 D1:C39B E0 3E 0D 87 
              01 C0 -  -  	.db %11100000, %00111110, %00001101, %10000111, %00000001, %11000000
  250 D1:C3A1 -  -  -  -  
  251 D1:C3A1 34 -  -  -  	.db %00110100
  252 D1:C3A2 -  -  -  -  
  253 D1:C3A2 24 66 D8 F7 
              B6 DB 3B E3 	.db %00100100, %01100110, %11011000, %11110111, %10110110, %11011011, %00111011, %11100011
  254 D1:C3AA 86 C9 7B B6 	.db %10000110, %11001001, %01111011, %10110110
  255 D1:C3AE -  -  -  -  
  256 D1:C3AE -  -  -  -  
  257 D1:C3AE -  -  -  -  Vines_5:
  258 D1:C3AE 10 -  -  -  	.db %00010000
  259 D1:C3AF 14 17 -  -  	.db 20, 23
  260 D1:C3B1 00 00 30 00 
              1B 00 01 B0 	.db %00000000, %00000000, %00110000, %00000000, %00011011, %00000000, %00000001, %10110000
  261 D1:C3B9 00 07 00 00 
              F0 00 0E 00 	.db %00000000, %00000111, %00000000, %00000000, %11110000, %00000000, %00001110, %00000000
  262 D1:C3C1 31 C0 01 B8 
              00 0F 80 01 	.db %00110001, %11000000, %00000001, %10111000, %00000000, %00001111, %10000000, %00000001
  263 D1:C3C9 F0 00 3E 00 
              47 E0 0F F8 	.db %11110000, %00000000, %00111110, %00000000, %01000111, %11100000, %00001111, %11111000
  264 D1:C3D1 00 5F 00 03 
              E8 00 3C C0 	.db %00000000, %01011111, %00000000, %00000011, %11101000, %00000000, %00111100, %11000000
  265 D1:C3D9 0F 8C 00 F0 
              00 3D 00 07 	.db %00001111, %10001100, %00000000, %11110000, %00000000, %00111101, %00000000, %00000111
  266 D1:C3E1 D8 00 79 00 
              0F 00 00 E0 	.db %11011000, %00000000, %01111001, %00000000, %00001111, %00000000, %00000000, %11100000
  267 D1:C3E9 00 00 -  -  	.db %00000000, %00000000
  268 D1:C3EB -  -  -  -  
  269 D1:C3EB 34 -  -  -  	.db %00110100
  270 D1:C3EC -  -  -  -  
  271 D1:C3EC 00 59 B0 84 
              67 38 F0 38 	.db %00000000, %01011001, %10110000, %10000100, %01100111, %00111000, %11110000, %00111000
  272 D1:C3F4 E7 BE 7D C6 
              7D E6 C0 -  	.db %11100111, %10111110, %01111101, %11000110, %01111101, %11100110, %11000000
  273 D1:C3FB -  -  -  -  
  274 D1:C3FB -  -  -  -  
  275 D1:C3FB -  -  -  -  Vines_7:
  276 D1:C3FB 10 -  -  -  	.db %00010000
  277 D1:C3FC 0A 18 -  -  	.db 10, 24
  278 D1:C3FE C0 30 0C 03 
              90 EC 3F 07 	.db %11000000, %00110000, %00001100, %00000011, %10010000, %11101100, %00111111, %00000111
  279 D1:C406 00 C0 78 1E 
              03 80 E0 3C 	.db %00000000, %11000000, %01111000, %00011110, %00000011, %10000000, %11100000, %00111100
  280 D1:C40E 07 00 C0 F0 
              3C 03 B0 7C 	.db %00000111, %00000000, %11000000, %11110000, %00111100, %00000011, %10110000, %01111100
  281 D1:C416 1C 03 00 E0 
              38 06 -  -  	.db %00011100, %00000011, %00000000, %11100000, %00111000, %00000110
  282 D1:C41C -  -  -  -  
  283 D1:C41C 43 -  -  -  	.db %01000011
  284 D1:C41D -  -  -  -  
  285 D1:C41D 54 CE 79 6F 
              49 36 FE 9D 	.db %01010100, %11001110, %01111001, %01101111, %01001001, %00110110, %11111110, %10011101
  286 D1:C425 EF 4A -  -  	.db %11101111, %01001010
  287 D1:C427 -  -  -  -  
  288 D1:C427 -  -  -  -  
  289 D1:C427 -  -  -  -  Vines_4:
  290 D1:C427 10 -  -  -  	.db %00010000
  291 D1:C428 18 0D -  -  	.db 24, 13
  292 D1:C42A 00 00 C7 00 
              00 DF 00 00 	.db %00000000, %00000000, %11000111, %00000000, %00000000, %11011111, %00000000, %00000000
  293 D1:C432 3F 00 00 FC 
              00 61 F8 20 	.db %00111111, %00000000, %00000000, %11111100, %00000000, %01100001, %11111000, %00100000
  294 D1:C43A 6F E0 60 3F 
              80 41 FE 80 	.db %01101111, %11100000, %01100000, %00111111, %10000000, %01000001, %11111110, %10000000
  295 D1:C442 CF F8 C0 FF 
              C0 40 7C C0 	.db %11001111, %11111000, %11000000, %11111111, %11000000, %01000000, %01111100, %11000000
  296 D1:C44A 00 01 80 00 
              00 80 00 -  	.db %00000000, %00000001, %10000000, %00000000, %00000000, %10000000, %00000000
  297 D1:C451 -  -  -  -  
  298 D1:C451 34 -  -  -  	.db %00110100
  299 D1:C452 -  -  -  -  
  300 D1:C452 00 33 C7 0F 
              01 C1 E0 F8 	.db %00000000, %00110011, %11000111, %00001111, %00000001, %11000001, %11100000, %11111000
  301 D1:C45A 1F F1 FF FE 	.db %00011111, %11110001, %11111111, %11111110
  302 D1:C45E -  -  -  -  
  303 D1:C45E -  -  -  -  
  304 D1:C45E -  -  -  -  Vines_9:
  305 D1:C45E 10 -  -  -  	.db %00010000
  306 D1:C45F 18 0B -  -  	.db 24, 11
  307 D1:C461 00 18 60 00 
              38 27 0C 27 	.db %00000000, %00011000, %01100000, %00000000, %00111000, %00100111, %00001100, %00100111
  308 D1:C469 FF 0C 3F FF 
              07 FF F8 1F 	.db %11111111, %00001100, %00111111, %11111111, %00000111, %11111111, %11111000, %00011111
  309 D1:C471 FE 08 7F F7 
              00 FE 43 00 	.db %11111110, %00001000, %01111111, %11110111, %00000000, %11111110, %01000011, %00000000
  310 D1:C479 F0 C0 00 E0 
              C0 00 C0 00 	.db %11110000, %11000000, %00000000, %11100000, %11000000, %00000000, %11000000, %00000000
  311 D1:C481 00 -  -  -  	.db %00000000
  312 D1:C482 -  -  -  -  
  313 D1:C482 34 -  -  -  	.db %00110100
  314 D1:C483 -  -  -  -  
  315 D1:C483 00 00 03 81 
              FF 81 FF 8F 	.db %00000000, %00000000, %00000011, %10000001, %11111111, %10000001, %11111111, %10001111
  316 D1:C48B FC 7F F3 FF 
              FF E0 -  -  	.db %11111100, %01111111, %11110011, %11111111, %11111111, %11100000
  317 D1:C491 -  -  -  -  
  318 D1:C491 -  -  -  -  
  319 D1:C491 -  -  -  -  Vines_10:
  320 D1:C491 10 -  -  -  	.db %00010000
  321 D1:C492 18 0E -  -  	.db 24, 14
  322 D1:C494 00 40 00 FC 
              E0 00 FF 80 	.db %00000000, %01000000, %00000000, %11111100, %11100000, %00000000, %11111111, %10000000
  323 D1:C49C 00 FF 83 00 
              1F E6 00 33 	.db %00000000, %11111111, %10000011, %00000000, %00011111, %11100110, %00000000, %00110011
  324 D1:C4A4 FC 00 10 FF 
              0C 00 1F CC 	.db %11111100, %00000000, %00010000, %11111111, %00001100, %00000000, %00011111, %11001100
  325 D1:C4AC 00 37 E8 00 
              31 F8 00 01 	.db %00000000, %00110111, %11101000, %00000000, %00110001, %11111000, %00000000, %00000001
  326 D1:C4B4 FC 00 03 3F 
              00 03 9F 00 	.db %11111100, %00000000, %00000011, %00111111, %00000000, %00000011, %10011111, %00000000
  327 D1:C4BC 00 07 -  -  	.db %00000000, %00000111
  328 D1:C4BE -  -  -  -  
  329 D1:C4BE 34 -  -  -  	.db %00110100
  330 D1:C4BF -  -  -  -  
  331 D1:C4BF 00 3E 1F C3 
              F0 FE 3F 07 	.db %00000000, %00111110, %00011111, %11000011, %11110000, %11111110, %00111111, %00000111
  332 D1:C4C7 83 F1 F9 F3 
              E3 FF 80 -  	.db %10000011, %11110001, %11111001, %11110011, %11100011, %11111111, %10000000
  333 D1:C4CE -  -  -  -  
  334 D1:C4CE -  -  -  -  
  335 D1:C4CE -  -  -  -  Branches_15:
  336 D1:C4CE 20 -  -  -  	.db %00100000
  337 D1:C4CF 18 17 -  -  	.db 24, 23
  338 D1:C4D1 00 CF 0F 00 
              FF FF 03 FF 	.db %00000000, %11001111, %00001111, %00000000, %11111111, %11111111, %00000011, %11111111
  339 D1:C4D9 FF 0F FF FF 
              0F FF FF 3F 	.db %11111111, %00001111, %11111111, %11111111, %00001111, %11111111, %11111111, %00111111
  340 D1:C4E1 FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
  341 D1:C4E9 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  342 D1:C4F1 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  343 D1:C4F9 FF FF FF FF 
              FF 3F FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00111111, %11111111, %11111111
  344 D1:C501 3F FF FF 3F 
              FF FF 3F FF 	.db %00111111, %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111
  345 D1:C509 FF 0F FF FF 
              0F FF FF 0F 	.db %11111111, %00001111, %11111111, %11111111, %00001111, %11111111, %11111111, %00001111
  346 D1:C511 FF FF 03 C3 
              FC -  -  -  	.db %11111111, %11111111, %00000011, %11000011, %11111100
  347 D1:C516 -  -  -  -  
  348 D1:C516 01 20 -  -  	.db %00000001, %00100000
  349 D1:C518 -  -  -  -  
  350 D1:C518 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  351 D1:C520 01 41 55 00 
              00 10 14 00 	.db %00000001, %01000001, %01010101, %00000000, %00000000, %00010000, %00010100, %00000000
  352 D1:C528 04 54 05 55 
              55 01 40 55 	.db %00000100, %01010100, %00000101, %01010101, %01010101, %00000001, %01000000, %01010101
  353 D1:C530 55 55 50 01 
              05 55 55 55 	.db %01010101, %01010101, %01010000, %00000001, %00000101, %01010101, %01010101, %01010101
  354 D1:C538 01 05 5A A9 
              55 50 00 15 	.db %00000001, %00000101, %01011010, %10101001, %01010101, %01010000, %00000000, %00010101
  355 D1:C540 55 5A AA A0 
              01 55 A9 6A 	.db %01010101, %01011010, %10101010, %10100000, %00000001, %01010101, %10101001, %01101010
  356 D1:C548 55 A0 00 55 
              AA AA AA A0 	.db %01010101, %10100000, %00000000, %01010101, %10101010, %10101010, %10101010, %10100000
  357 D1:C550 00 5A AA AA 
              AA A0 00 5A 	.db %00000000, %01011010, %10101010, %10101010, %10101010, %10100000, %00000000, %01011010
  358 D1:C558 AA AA AA 50 
              05 55 55 56 	.db %10101010, %10101010, %10101010, %01010000, %00000101, %01010101, %01010101, %01010110
  359 D1:C560 AA A0 04 55 
              6A A5 55 50 	.db %10101010, %10100000, %00000100, %01010101, %01101010, %10100101, %01010101, %01010000
  360 D1:C568 11 55 55 55 
              55 00 04 01 	.db %00010001, %01010101, %01010101, %01010101, %01010101, %00000000, %00000100, %00000001
  361 D1:C570 55 55 50 10 
              15 50 15 40 	.db %01010101, %01010101, %01010000, %00010000, %00010101, %01010000, %00010101, %01000000
  362 D1:C578 00 04 01 40 
              01 50 01 50 	.db %00000000, %00000100, %00000001, %01000000, %00000001, %01010000, %00000001, %01010000
  363 D1:C580 55 55 40 01 
              05 00 11 00 	.db %01010101, %01010101, %01000000, %00000001, %00000101, %00000000, %00010001, %00000000
  364 D1:C588 00 00 14 00 
              00 00 00 00 	.db %00000000, %00000000, %00010100, %00000000, %00000000, %00000000, %00000000, %00000000
  365 D1:C590 -  -  -  -  
  366 D1:C590 -  -  -  -  
  367 D1:C590 -  -  -  -  Branches_3:
  368 D1:C590 20 -  -  -  	.db %00100000
  369 D1:C591 18 14 -  -  	.db 24, 20
  370 D1:C593 00 00 0F 03 
              CC FF 0F FF 	.db %00000000, %00000000, %00001111, %00000011, %11001100, %11111111, %00001111, %11111111
  371 D1:C59B FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  372 D1:C5A3 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  373 D1:C5AB FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  374 D1:C5B3 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  375 D1:C5BB FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  376 D1:C5C3 FF FF FF FF 
              FF FF 30 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %00110000, %11111111
  377 D1:C5CB FF 00 0F 3F 	.db %11111111, %00000000, %00001111, %00111111
  378 D1:C5CF -  -  -  -  
  379 D1:C5CF 01 20 -  -  	.db %00000001, %00100000
  380 D1:C5D1 -  -  -  -  
  381 D1:C5D1 00 00 00 01 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000001, %00000000, %00000000, %00000000, %00000000
  382 D1:C5D9 05 00 05 00 
              14 00 51 50 	.db %00000101, %00000000, %00000101, %00000000, %00010100, %00000000, %01010001, %01010000
  383 D1:C5E1 00 15 55 55 
              55 05 55 40 	.db %00000000, %00010101, %01010101, %01010101, %01010101, %00000101, %01010101, %01000000
  384 D1:C5E9 00 00 69 55 
              55 55 55 55 	.db %00000000, %00000000, %01101001, %01010101, %01010101, %01010101, %01010101, %01010101
  385 D1:C5F1 15 5A A9 AA 
              AA A9 55 5A 	.db %00010101, %01011010, %10101001, %10101010, %10101010, %10101001, %01010101, %01011010
  386 D1:C5F9 AA 95 69 55 
              6A AA AA AA 	.db %10101010, %10010101, %01101001, %01010101, %01101010, %10101010, %10101010, %10101010
  387 D1:C601 AA AA AA AA 
              AA AA AA 9A 	.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10011010
  388 D1:C609 AA AA AA 95 
              AA AA 95 5A 	.db %10101010, %10101010, %10101010, %10010101, %10101010, %10101010, %10010101, %01011010
  389 D1:C611 55 AA AA 55 
              AA A5 A9 55 	.db %01010101, %10101010, %10101010, %01010101, %10101010, %10100101, %10101001, %01010101
  390 D1:C619 55 55 55 55 
              54 05 55 54 	.db %01010101, %01010101, %01010101, %01010101, %01010100, %00000101, %01010101, %01010100
  391 D1:C621 15 54 55 54 
              00 15 40 10 	.db %00010101, %01010100, %01010101, %01010100, %00000000, %00010101, %01000000, %00010000
  392 D1:C629 04 00 54 00 
              55 40 00 00 	.db %00000100, %00000000, %01010100, %00000000, %01010101, %01000000, %00000000, %00000000
  393 D1:C631 01 50 00 00 
              00 00 00 00 	.db %00000001, %01010000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  394 D1:C639 00 00 00 -  	.db %00000000, %00000000, %00000000
  395 D1:C63C -  -  -  -  
  396 D1:C63C -  -  -  -  
  397 D1:C63C -  -  -  -  Branches_5:
  398 D1:C63C 20 -  -  -  	.db %00100000
  399 D1:C63D 18 12 -  -  	.db 24, 18
  400 D1:C63F 00 0F 00 0F 
              FF CF FF FF 	.db %00000000, %00001111, %00000000, %00001111, %11111111, %11001111, %11111111, %11111111
  401 D1:C647 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  402 D1:C64F FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  403 D1:C657 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  404 D1:C65F FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  405 D1:C667 FF FF FF FF 
              FF 3C FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00111100, %11111111, %11111111
  406 D1:C66F 00 3F C0 00 
              0C 00 -  -  	.db %00000000, %00111111, %11000000, %00000000, %00001100, %00000000
  407 D1:C675 -  -  -  -  
  408 D1:C675 01 20 -  -  	.db %00000001, %00100000
  409 D1:C677 -  -  -  -  
  410 D1:C677 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  411 D1:C67F 00 01 04 00 
              05 40 55 40 	.db %00000000, %00000001, %00000100, %00000000, %00000101, %01000000, %01010101, %01000000
  412 D1:C687 00 05 40 15 
              55 55 01 50 	.db %00000000, %00000101, %01000000, %00010101, %01010101, %01010101, %00000001, %01010000
  413 D1:C68F 55 50 00 05 
              55 55 55 55 	.db %01010101, %01010000, %00000000, %00000101, %01010101, %01010101, %01010101, %01010101
  414 D1:C697 55 55 59 5A 
              AA AA A5 AA 	.db %01010101, %01010101, %01011001, %01011010, %10101010, %10101010, %10100101, %10101010
  415 D1:C69F AA AA 56 AA 
              6A AA 95 AA 	.db %10101010, %10101010, %01010110, %10101010, %01101010, %10101010, %10010101, %10101010
  416 D1:C6A7 A9 96 56 5A 
              AA A6 6A AA 	.db %10101001, %10010110, %01010110, %01011010, %10101010, %10100110, %01101010, %10101010
  417 D1:C6AF A5 AA A9 A5 
              54 05 55 55 	.db %10100101, %10101010, %10101001, %10100101, %01010100, %00000101, %01010101, %01010101
  418 D1:C6B7 55 50 55 55 
              45 55 00 50 	.db %01010101, %01010000, %01010101, %01010101, %01000101, %01010101, %00000000, %01010000
  419 D1:C6BF 00 00 14 01 
              55 50 00 00 	.db %00000000, %00000000, %00010100, %00000001, %01010101, %01010000, %00000000, %00000000
  420 D1:C6C7 01 55 00 00 
              00 00 00 00 	.db %00000001, %01010101, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  421 D1:C6CF 00 00 00 -  	.db %00000000, %00000000, %00000000
  422 D1:C6D2 -  -  -  -  
  423 D1:C6D2 -  -  -  -  
  424 D1:C6D2 -  -  -  -  Branches_11:
  425 D1:C6D2 20 -  -  -  	.db %00100000
  426 D1:C6D3 18 17 -  -  	.db 24, 23
  427 D1:C6D5 00 00 03 00 
              00 0F 00 00 	.db %00000000, %00000000, %00000011, %00000000, %00000000, %00001111, %00000000, %00000000
  428 D1:C6DD 3F 00 00 FF 
              00 0C FF 00 	.db %00111111, %00000000, %00000000, %11111111, %00000000, %00001100, %11111111, %00000000
  429 D1:C6E5 3F FF 0F FF 
              FF FF FF FF 	.db %00111111, %11111111, %00001111, %11111111, %11111111, %11111111, %11111111, %11111111
  430 D1:C6ED FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  431 D1:C6F5 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  432 D1:C6FD FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  433 D1:C705 FF FF FF FF 
              FF FC FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111100, %11111111, %11111111
  434 D1:C70D 30 FF FC 00 
              FF F0 00 FC 	.db %00110000, %11111111, %11111100, %00000000, %11111111, %11110000, %00000000, %11111100
  435 D1:C715 00 00 F0 00 
              00 -  -  -  	.db %00000000, %00000000, %11110000, %00000000, %00000000
  436 D1:C71A -  -  -  -  
  437 D1:C71A 01 20 -  -  	.db %00000001, %00100000
  438 D1:C71C -  -  -  -  
  439 D1:C71C 00 00 10 00 
              01 00 01 50 	.db %00000000, %00000000, %00010000, %00000000, %00000001, %00000000, %00000001, %01010000
  440 D1:C724 00 01 01 00 
              00 00 51 55 	.db %00000000, %00000001, %00000001, %00000000, %00000000, %00000000, %01010001, %01010101
  441 D1:C72C 00 00 10 04 
              41 55 15 00 	.db %00000000, %00000000, %00010000, %00000100, %01000001, %01010101, %00010101, %00000000
  442 D1:C734 01 51 55 5A 
              40 15 55 01 	.db %00000001, %01010001, %01010101, %01011010, %01000000, %00010101, %01010101, %00000001
  443 D1:C73C 55 A5 05 50 
              15 55 AA A6 	.db %01010101, %10100101, %00000101, %01010000, %00010101, %01010101, %10101010, %10100110
  444 D1:C744 50 55 55 5A 
              5A AA 55 A9 	.db %01010000, %01010101, %01010101, %01011010, %01011010, %10101010, %01010101, %10101001
  445 D1:C74C 6A A5 6A 95 
              59 56 AA AA 	.db %01101010, %10100101, %01101010, %10010101, %01011001, %01010110, %10101010, %10101010
  446 D1:C754 A9 55 55 AA 
              9A AA 55 41 	.db %10101001, %01010101, %01010101, %10101010, %10011010, %10101010, %01010101, %01000001
  447 D1:C75C 6A AA 99 55 
              10 14 A9 69 	.db %01101010, %10101010, %10011001, %01010101, %00010000, %00010100, %10101001, %01101001
  448 D1:C764 55 01 14 00 
              96 A5 51 55 	.db %01010101, %00000001, %00010100, %00000000, %10010110, %10100101, %01010001, %01010101
  449 D1:C76C 00 05 55 10 
              40 00 51 11 	.db %00000000, %00000101, %01010101, %00010000, %01000000, %00000000, %01010001, %00010001
  450 D1:C774 50 05 50 00 
              00 00 00 -  	.db %01010000, %00000101, %01010000, %00000000, %00000000, %00000000, %00000000
  451 D1:C77B -  -  -  -  
  452 D1:C77B -  -  -  -  
  453 D1:C77B -  -  -  -  Branches_6:
  454 D1:C77B 20 -  -  -  	.db %00100000
  455 D1:C77C 18 0E -  -  	.db 24, 14
  456 D1:C77E 00 00 0C 00 
              00 3F 0F 33 	.db %00000000, %00000000, %00001100, %00000000, %00000000, %00111111, %00001111, %00110011
  457 D1:C786 FF 3F FF FF 
              FF FF FF FF 	.db %11111111, %00111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  458 D1:C78E FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  459 D1:C796 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  460 D1:C79E FF FF FF FF 
              FF FF FF 0C 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %00001100
  461 D1:C7A6 3C 3F -  -  	.db %00111100, %00111111
  462 D1:C7A8 -  -  -  -  
  463 D1:C7A8 01 20 -  -  	.db %00000001, %00100000
  464 D1:C7AA -  -  -  -  
  465 D1:C7AA 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  466 D1:C7B2 00 10 50 10 
              00 54 10 04 	.db %00000000, %00010000, %01010000, %00010000, %00000000, %01010100, %00010000, %00000100
  467 D1:C7BA 05 50 00 01 
              55 55 55 05 	.db %00000101, %01010000, %00000000, %00000001, %01010101, %01010101, %01010101, %00000101
  468 D1:C7C2 55 55 69 55 
              6A A5 AA AA 	.db %01010101, %01010101, %01101001, %01010101, %01101010, %10100101, %10101010, %10101010
  469 D1:C7CA 96 96 A5 AA 
              A5 A5 6A AA 	.db %10010110, %10010110, %10100101, %10101010, %10100101, %10100101, %01101010, %10101010
  470 D1:C7D2 A6 95 6A 55 
              55 55 55 55 	.db %10100110, %10010101, %01101010, %01010101, %01010101, %01010101, %01010101, %01010101
  471 D1:C7DA 55 54 40 01 
              45 01 40 00 	.db %01010101, %01010100, %01000000, %00000001, %01000101, %00000001, %01000000, %00000000
  472 D1:C7E2 55 50 00 40 
              00 00 00 00 	.db %01010101, %01010000, %00000000, %01000000, %00000000, %00000000, %00000000, %00000000
  473 D1:C7EA 05 50 00 00 
              00 -  -  -  	.db %00000101, %01010000, %00000000, %00000000, %00000000
  474 D1:C7EF -  -  -  -  
  475 D1:C7EF -  -  -  -  
Listing for file "ascent.asm"
  534 D1:C7EF -  -  -  -  #include "generated/SpriteEquates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\SpriteEquates.txt"
    1 D1:C7EF -  -  -  -  Moss_1_Slow_O_0 .equ 13894081 ; vRam + 1 - 221
    2 D1:C7EF -  -  -  -  Moss_1_Fast_0 .equ 13894302 ; vRam + 222 - 364
    3 D1:C7EF -  -  -  -  Tree_0_Fast_0 .equ 13894444 ; vRam + 364 - 542
    4 D1:C7EF -  -  -  -  Tree_3_Fast_0 .equ 13894622 ; vRam + 542 - 723
    5 D1:C7EF -  -  -  -  Tree_6_Fast_0 .equ 13894804 ; vRam + 724 - 905
    6 D1:C7EF -  -  -  -  Tree_8_Fast_0 .equ 13894986 ; vRam + 906 - 1087
    7 D1:C7EF -  -  -  -  Tree_5_Fast_F_0 .equ 13895168 ; vRam + 1088 - 1269
    8 D1:C7EF -  -  -  -  Tree_6_Fast_F_0 .equ 13895350 ; vRam + 1270 - 1451
    9 D1:C7EF -  -  -  -  Tree_2_Fast_F_0 .equ 13895532 ; vRam + 1452 - 1629
   10 D1:C7EF -  -  -  -  Tree_1_Fast_0 .equ 13895710 ; vRam + 1630 - 1809
   11 D1:C7EF -  -  -  -  Tree_7_Fast_0 .equ 13895890 ; vRam + 1810 - 1991
   12 D1:C7EF -  -  -  -  Tree_9_Fast_0 .equ 13896072 ; vRam + 1992 - 2173
   13 D1:C7EF -  -  -  -  Tree_7_Fast_F_0 .equ 13896254 ; vRam + 2174 - 2355
   14 D1:C7EF -  -  -  -  Tree_2_Fast_0 .equ 13896436 ; vRam + 2356 - 2533
   15 D1:C7EF -  -  -  -  Tree_4_Fast_0 .equ 13896614 ; vRam + 2534 - 2715
   16 D1:C7EF -  -  -  -  Tree_9_Fast_F_0 .equ 13896796 ; vRam + 2716 - 2897
   17 D1:C7EF -  -  -  -  Tree_1_Fast_F_0 .equ 13896978 ; vRam + 2898 - 3077
   18 D1:C7EF -  -  -  -  Tree_3_Fast_F_0 .equ 13897158 ; vRam + 3078 - 3259
   19 D1:C7EF -  -  -  -  Tree_8_Fast_F_0 .equ 13897340 ; vRam + 3260 - 3441
   20 D1:C7EF -  -  -  -  Tree_4_Fast_F_0 .equ 13897522 ; vRam + 3442 - 3623
   21 D1:C7EF -  -  -  -  Tree_0_Fast_F_0 .equ 13897704 ; vRam + 3624 - 3802
   22 D1:C7EF -  -  -  -  Moss_0_Fast_0 .equ 13897882 ; vRam + 3802 - 3939
   23 D1:C7EF -  -  -  -  Moss_0_Fast_F_0 .equ 13898020 ; vRam + 3940 - 4077
   24 D1:C7EF -  -  -  -  Moss_2_Fast_0 .equ 13898158 ; vRam + 4078 - 4229
   25 D1:C7EF -  -  -  -  Moss_2_Fast_F_0 .equ 13898310 ; vRam + 4230 - 4381
   26 D1:C7EF -  -  -  -  Vines_3_Slow_O_0 .equ 13898461 ; vRam + 4381 - 4562
   27 D1:C7EF -  -  -  -  Vines_2_Slow_0 .equ 13898643 ; vRam + 4563 - 4782
   28 D1:C7EF -  -  -  -  Vines_1_Slow_O_0 .equ 13898863 ; vRam + 4783 - 4923
   29 D1:C7EF -  -  -  -  Vines_3_Slow_O_F_0 .equ 13899003 ; vRam + 4923 - 5105
   30 D1:C7EF -  -  -  -  Vines_2_Slow_F_0 .equ 13899185 ; vRam + 5105 - 5323
   31 D1:C7EF -  -  -  -  Vines_3_Slow_F_0 .equ 13899403 ; vRam + 5323 - 5498
   32 D1:C7EF -  -  -  -  Vines_1_Slow_0 .equ 13899579 ; vRam + 5499 - 5643
   33 D1:C7EF -  -  -  -  Vines_8_Slow_0 .equ 13899723 ; vRam + 5643 - 5844
   34 D1:C7EF -  -  -  -  Vines_2_Slow_O_0 .equ 13899925 ; vRam + 5845 - 6061
   35 D1:C7EF -  -  -  -  Vines_3_Slow_0 .equ 13900141 ; vRam + 6061 - 6237
   36 D1:C7EF -  -  -  -  Vines_5_Slow_O_0 .equ 13900317 ; vRam + 6237 - 6477
   37 D1:C7EF -  -  -  -  Vines_7_Slow_0 .equ 13900557 ; vRam + 6477 - 6668
   38 D1:C7EF -  -  -  -  Vines_8_Slow_F_0 .equ 13900749 ; vRam + 6669 - 6870
   39 D1:C7EF -  -  -  -  Vines_5_Slow_O_F_0 .equ 13900951 ; vRam + 6871 - 7109
   40 D1:C7EF -  -  -  -  Vines_4_Slow_O_0 .equ 13901189 ; vRam + 7109 - 7287
   41 D1:C7EF -  -  -  -  Vines_9_Slow_O_0 .equ 13901367 ; vRam + 7287 - 7464
   42 D1:C7EF -  -  -  -  Vines_10_Slow_O_0 .equ 13901545 ; vRam + 7465 - 7656
   43 D1:C7EF -  -  -  -  Branches_15_Fast_0 .equ 13901736 ; vRam + 7656 - 7971
   44 D1:C7EF -  -  -  -  Branches_3_Fast_F_0 .equ 13902052 ; vRam + 7972 - 8254
   45 D1:C7EF -  -  -  -  Branches_5_Fast_0 .equ 13902334 ; vRam + 8254 - 8495
   46 D1:C7EF -  -  -  -  Branches_11_Fast_0 .equ 13902576 ; vRam + 8496 - 8760
   47 D1:C7EF -  -  -  -  Branches_6_Fast_F_0 .equ 13902840 ; vRam + 8760 - 8948
   48 D1:C7EF -  -  -  -  Moss_2_Slow_O_0 .equ 13903029 ; vRam + 8949 - 9169
Listing for file "ascent.asm"
  535 D1:C7EF -  -  -  -  
  536 D1:C7EF -  -  -  -  
  537 D1:C7EF -  -  -  -  #include "testing/SpriteGroups.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\testing\SpriteGroups.txt"
    1 D1:C7EF -  -  -  -  Sprite_Groups_Table:
    2 D1:C7EF F5 C7 D1 -  	.dl sprite_group_test_1
    3 D1:C7F2 0D C8 D1 -  	.dl sprite_group_test_2
    4 D1:C7F5 -  -  -  -  	
    5 D1:C7F5 -  -  -  -  	
    6 D1:C7F5 -  -  -  -  	
    7 D1:C7F5 -  -  -  -  	
    8 D1:C7F5 -  -  -  -  	
    9 D1:C7F5 -  -  -  -  	
   10 D1:C7F5 -  -  -  -  	
   11 D1:C7F5 -  -  -  -  sprite_group_test_1:
   12 D1:C7F5 -  -  -  -  	;.dl sprite table (All sprites in a group must share a table)
   13 D1:C7F5 -  -  -  -  	;.db num sprites 
   14 D1:C7F5 -  -  -  -  	;.db yOffset, height, xOffset, sprite index
   15 D1:C7F5 -  -  -  -  	;yOffset can range from 0 to 128 (px below origin) 
   16 D1:C7F5 -  -  -  -  	;Origin is in topleft of all sprites in group 
   17 D1:C7F5 2E BF D1 -  	.dl Sprite_Table_0
   18 D1:C7F8 05 -  -  -  	.db 5 
   19 D1:C7F9 00 0C 00 0F 	.db 0,12,0,15
   20 D1:C7FD 04 0C 18 0B 	.db 4,12,24,11
   21 D1:C801 0A 0C 50 0C 	.db 10,12,80,12
   22 D1:C805 1A 0C 04 0D 	.db 26,12,4,13
   23 D1:C809 28 0C 28 0E 	.db 40,12,40,14
   24 D1:C80D -  -  -  -  	
   25 D1:C80D -  -  -  -  
   26 D1:C80D -  -  -  -  
   27 D1:C80D -  -  -  -  sprite_group_test_2:
   28 D1:C80D -  -  -  -  	;.dl sprite table (All sprites in a group must share a table)
   29 D1:C80D -  -  -  -  	;.db num sprites 
   30 D1:C80D -  -  -  -  	;.db yOffset, height, xOffset, sprite index
   31 D1:C80D -  -  -  -  	;yOffset can range from 0 to 128 (px below origin) 
   32 D1:C80D -  -  -  -  	;Origin is in topleft of all sprites in group 
   33 D1:C80D 2E BF D1 -  	.dl Sprite_Table_0
   34 D1:C810 09 -  -  -  	.db 9
   35 D1:C811 00 0C 00 0E 	.db 0,12,0,14
   36 D1:C815 33 0C 3C 0E 	.db 51,12,60,14
   37 D1:C819 0F 0C 29 16 	.db 15,12,41,22
   38 D1:C81D 1A 0C 04 17 	.db 26,12,4,23
   39 D1:C821 00 0C 28 18 	.db 0,12,40,24
   40 D1:C825 05 0C 3C 14 	.db 05,12,60,20
   41 D1:C829 15 0C 10 15 	.db 21,12,16,21
   42 D1:C82D 01 0C 0A 16 	.db 1,12,10,22
   43 D1:C831 00 0C 3C 09 	.db 0,12,60,9
   44 D1:C835 -  -  -  -  	
   45 D1:C835 -  -  -  -  	
   46 D1:C835 -  -  -  -  	
   47 D1:C835 -  -  -  -  	
Listing for file "ascent.asm"
  538 D1:C835 -  -  -  -  ;#include "TestingSpriteData.txt"
  539 D1:C835 -  -  -  -  ;#include "TestGeneratedSpriteData.txt"
  540 D1:C835 -  -  -  -  ;#include "Sprite_Data.txt"
  541 D1:C835 -  -  -  -  ;#include "FG_Data.txt"
  542 D1:C835 -  -  -  -  ;#include "MG_Data.txt"
  543 D1:C835 -  -  -  -  ;#include "BG_Data.txt"
  544 D1:C835 -  -  -  -  ;#include "Palette_Setup.txt"
  545 D1:C835 -  -  -  -  ;#include "Equates.txt"
  546 D1:C835 -  -  -  -  ;#include "Decompress_Calls.txt"
  547 D1:C835 -  -  -  -  ;#include "Sprite_Tables.txt"
  548 D1:C835 -  -  -  -  ;#include "TestingBGData.txt"
  549 D1:C835 -  -  -  -  ;#include "TestingFGData.txt"
  550 D1:C835 -  -  -  -  
  551 D1:C835 -  -  -  -  
