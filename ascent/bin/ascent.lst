    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E -  -  -  -  	;jp time_test_start
   20 D1:A88E -  -  -  -  	
   21 D1:A88E 21 00 02 E3 	ld	hl,mpLcdPalette
   22 D1:A892 -  -  -  -  
   23 D1:A892 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   24 D1:A894 77 -  -  -  	ld	(hl),a
   25 D1:A895 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   26 D1:A897 23 -  -  -  	inc hl
   27 D1:A898 77 -  -  -  	ld	(hl),a
   28 D1:A899 23 -  -  -  	inc hl;1yellow
   29 D1:A89A 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   30 D1:A89C 77 -  -  -  	ld	(hl),a
   31 D1:A89D 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   32 D1:A89F 23 -  -  -  	inc hl
   33 D1:A8A0 77 -  -  -  	ld	(hl),a
   34 D1:A8A1 -  -  -  -  	
   35 D1:A8A1 23 -  -  -  	inc hl;2blue
   36 D1:A8A2 3E 1F -  -  	ld	a,%00011111 ;GGGBBBBB
   37 D1:A8A4 77 -  -  -  	ld	(hl),a
   38 D1:A8A5 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   39 D1:A8A7 23 -  -  -  	inc hl
   40 D1:A8A8 77 -  -  -  	ld	(hl),a
   41 D1:A8A9 -  -  -  -  	
   42 D1:A8A9 23 -  -  -  	inc hl;3r
   43 D1:A8AA 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   44 D1:A8AC 77 -  -  -  	ld	(hl),a
   45 D1:A8AD 3E 7C -  -  	ld  a,%01111100 ; GRRRRRGG
   46 D1:A8AF 23 -  -  -  	inc hl
   47 D1:A8B0 77 -  -  -  	ld	(hl),a
   48 D1:A8B1 -  -  -  -  	
   49 D1:A8B1 23 -  -  -  	inc hl;4g
   50 D1:A8B2 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   51 D1:A8B4 77 -  -  -  	ld	(hl),a
   52 D1:A8B5 3E 83 -  -  	ld  a,%10000011 ; GRRRRRGG
   53 D1:A8B7 23 -  -  -  	inc hl
   54 D1:A8B8 77 -  -  -  	ld	(hl),a
   55 D1:A8B9 -  -  -  -  	
   56 D1:A8B9 23 -  -  -  	inc hl;5 white
   57 D1:A8BA 3E FF -  -  	ld	a,%11111111 ;GGGBBBBB
   58 D1:A8BC 77 -  -  -  	ld	(hl),a
   59 D1:A8BD 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   60 D1:A8BF 23 -  -  -  	inc hl
   61 D1:A8C0 77 -  -  -  	ld	(hl),a
   62 D1:A8C1 -  -  -  -  
   63 D1:A8C1 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
   64 D1:A8C5 3E 25 -  -  	ld	a,lcdBpp4
   65 D1:A8C7 32 18 00 E3 	ld (mpLcdCtrl),a	
   66 D1:A8CB -  -  -  -  	
   67 D1:A8CB -  -  -  -  	
   68 D1:A8CB -  -  -  -  fg_sprite_1 .equ vRam + 1
   69 D1:A8CB -  -  -  -  fg_sprite_2 .equ vRam + 160 + 1
   70 D1:A8CB -  -  -  -  fg_sprite_3 .equ vRam + 320;fast
   71 D1:A8CB -  -  -  -  fg_sprite_4 .equ vRam + 480;fast
   72 D1:A8CB -  -  -  -  
   73 D1:A8CB -  -  -  -  
   74 D1:A8CB -  -  -  -  	;call fast_fg_sprite_set_flip
   75 D1:A8CB -  -  -  -  	;jp time_test_start
   76 D1:A8CB CD 52 B4 D1 	call sdcomp_reset_bg_sprite
   77 D1:A8CF CD 2E B4 D1 	call sdcomp_reset_fast_sprite
   78 D1:A8D3 CD 86 B2 D1 	call sdcomp_reset_flip
   79 D1:A8D7 CD B1 B2 D1 	call sdcomp_set_offset
   80 D1:A8DB 21 CA AD D1 	ld hl,testSpriteCompressed4
   81 D1:A8DF 11 01 00 D4 	ld de,fg_sprite_1
   82 D1:A8E3 CD F6 AE D1 	call sprite_decompress
   83 D1:A8E7 -  -  -  -  	
   84 D1:A8E7 -  -  -  -  	
   85 D1:A8E7 CD 43 B2 D1 	call sdcomp_set_flip
   86 D1:A8EB CD B1 B2 D1 	call sdcomp_set_offset
   87 D1:A8EF 21 83 AD D1 	ld hl,testSpriteCompressed
   88 D1:A8F3 11 A1 00 D4 	ld de,fg_sprite_2
   89 D1:A8F7 CD F6 AE D1 	call sprite_decompress
   90 D1:A8FB -  -  -  -  	
   91 D1:A8FB CD 86 B2 D1 	call sdcomp_reset_flip
   92 D1:A8FF CD 1F B4 D1 	call sdcomp_set_fast_sprite
   93 D1:A903 21 EA AD D1 	ld hl,testSpriteCompressedFast
   94 D1:A907 11 40 01 D4 	ld de,fg_sprite_3
   95 D1:A90B CD F6 AE D1 	call sprite_decompress
   96 D1:A90F -  -  -  -  	
   97 D1:A90F -  -  -  -  	
   98 D1:A90F CD 43 B2 D1 	call sdcomp_set_flip
   99 D1:A913 -  -  -  -  ;	call sdcomp_set_fast_sprite
  100 D1:A913 21 EA AD D1 	ld hl,testSpriteCompressedFast
  101 D1:A917 11 E0 01 D4 	ld de,fg_sprite_4
  102 D1:A91B CD F6 AE D1 	call sprite_decompress
  103 D1:A91F -  -  -  -  	
  104 D1:A91F 21 00 2C D5 	ld hl,vRam + (320*240)
  105 D1:A923 22 10 00 E3 	ld (mpLcdBase),hl
  106 D1:A927 22 EA B4 D1 	ld (dfgs_vram_top_1),hl
  107 D1:A92B 22 46 B5 D1 	ld (dfgs_vram_top_2),hl
  108 D1:A92F 01 60 95 00 	ld bc,160*239;bottom line of vram
  109 D1:A933 09 -  -  -  	add hl,bc 
  110 D1:A934 22 B2 B5 D1 	ld (dfgs_vram_bottom_1),hl 
  111 D1:A938 22 82 B5 D1 	ld (dfgs_vram_bottom_2),hl 
  112 D1:A93C 22 0E B6 D1 	ld (dfgs_vram_bottom_3),hl 
  113 D1:A940 22 3B B6 D1 	ld (dfgs_vram_bottom_4),hl 
  114 D1:A944 -  -  -  -  	
  115 D1:A944 3E FF -  -  	ld a,255
  116 D1:A946 -  -  -  -  	
  117 D1:A946 -  -  -  -  test_fg_loop:
  118 D1:A946 F5 -  -  -  	push af
  119 D1:A947 32 D1 B4 D1 	ld (dfgs_cam_height_1),a
  120 D1:A94B 32 25 B5 D1 	ld (dfgs_cam_height_2),a
  121 D1:A94F 32 EE B5 D1 	ld (dfgs_cam_height_3),a
  122 D1:A953 21 99 B6 D1 	ld hl,FG_Frame_2
  123 D1:A957 CD BB B4 D1 	call draw_fg_sprites
  124 D1:A95B -  -  -  -  	
  125 D1:A95B -  -  -  -  	
  126 D1:A95B 3E FF -  -  	ld a,255
  127 D1:A95D 01 00 96 00 	ld bc,160*240
  128 D1:A961 21 00 2C D5 	ld hl,vRam + (320*240)
  129 D1:A965 CD E0 10 02 	call _MemSet
  130 D1:A969 F1 -  -  -  	pop af 
  131 D1:A96A 3D -  -  -  	dec a 
  132 D1:A96B C2 46 A9 D1 	jp nz,test_fg_loop
  133 D1:A96F -  -  -  -  	
  134 D1:A96F -  -  -  -  #comment 	
  135 D1:A96F             	ld de,vRam +(160*40)
  136 D1:A96F             	ld hl,vRam
  137 D1:A96F             	ld a,2
  138 D1:A96F             	call draw_slow_sprite_bottom_cut
  139 D1:A96F             	
  140 D1:A96F             	
  141 D1:A96F             	ld de,vRam +(160*30)
  142 D1:A96F             	ld hl,vRam
  143 D1:A96F             	call draw_slow_sprite_full
  144 D1:A96F             	
  145 D1:A96F             	
  146 D1:A96F             	ld de,vRam +(160*40)+5
  147 D1:A96F             	ld hl,vRam+160
  148 D1:A96F             	ld a,3
  149 D1:A96F             	call draw_slow_sprite_top_cut
  150 D1:A96F             	
  151 D1:A96F             	ld de,vRam +(160*30)+5
  152 D1:A96F             	ld hl,vRam+160
  153 D1:A96F             	call draw_slow_sprite_full
  154 D1:A96F             	
  155 D1:A96F             	 #endcomment
  156 D1:A96F -  -  -  -  	
  157 D1:A96F -  -  -  -  	
  158 D1:A96F -  -  -  -  	
  159 D1:A96F -  -  -  -  ;	ld hl,vRam + (160*5)
  160 D1:A96F -  -  -  -  ;	ld (draw_bg_vram_addr),hl
  161 D1:A96F -  -  -  -  ;	ld hl,$000080
  162 D1:A96F -  -  -  -  ;	call draw_bg_line
  163 D1:A96F -  -  -  -  	
  164 D1:A96F -  -  -  -  	
  165 D1:A96F -  -  -  -  	
  166 D1:A96F -  -  -  -  	
  167 D1:A96F -  -  -  -  	;ld de,vram +(160*10)
  168 D1:A96F -  -  -  -  	;ld hl,testFastSprite+3
  169 D1:A96F -  -  -  -  	;exx
  170 D1:A96F -  -  -  -  	;ld b,8
  171 D1:A96F -  -  -  -  	;ld hl,8
  172 D1:A96F -  -  -  -  	;ld de,testFastSprite_t - 1
  173 D1:A96F -  -  -  -  	;ld c,%10000000
  174 D1:A96F -  -  -  -  	;call draw_fast_fg_sprite
  175 D1:A96F -  -  -  -  	
  176 D1:A96F -  -  -  -  	
  177 D1:A96F -  -  -  -  ;	ld de,vram +(160*20) - 1
  178 D1:A96F -  -  -  -  ;	ld hl,test_fast_sprite
  179 D1:A96F -  -  -  -  ;	ld a,1
  180 D1:A96F -  -  -  -  ;	call draw_fast_sprite_top_cut
  181 D1:A96F -  -  -  -  	
  182 D1:A96F -  -  -  -  	
  183 D1:A96F -  -  -  -  
  184 D1:A96F -  -  -  -  		
  185 D1:A96F 11 C5 2B D4 	ld de,vRam +(160*70) + 5
  186 D1:A973 21 E0 01 D4 	ld hl,fg_sprite_4
  187 D1:A977 3E 02 -  -  	ld a,2
  188 D1:A979 CD D7 AB D1 	call draw_fast_sprite_top_cut
  189 D1:A97D -  -  -  -  	
  190 D1:A97D -  -  -  -  	
  191 D1:A97D 11 65 31 D4 	ld de,vRam +(160*79) + 5
  192 D1:A981 21 E0 01 D4 	ld hl,fg_sprite_4
  193 D1:A985 3E 02 -  -  	ld a,2
  194 D1:A987 CD 0E AC D1 	call draw_fast_sprite_full
  195 D1:A98B -  -  -  -  	
  196 D1:A98B -  -  -  -  	
  197 D1:A98B 21 9F AC D1 	ld hl,testBGSprite
  198 D1:A98F 11 40 38 D4 	ld de,vRam + (160*90)
  199 D1:A993 3E 00 -  -  	ld a,0 
  200 D1:A995 CD AD AB D1 	call draw_bg_sprite_line
  201 D1:A999 -  -  -  -  	
  202 D1:A999 21 9F AC D1 	ld hl,testBGSprite
  203 D1:A99D 11 E0 38 D4 	ld de,vRam + (160*91)
  204 D1:A9A1 3E 01 -  -  	ld a,1
  205 D1:A9A3 CD AD AB D1 	call draw_bg_sprite_line
  206 D1:A9A7 -  -  -  -  	
  207 D1:A9A7 21 9F AC D1 	ld hl,testBGSprite
  208 D1:A9AB 11 80 39 D4 	ld de,vRam + (160*92)
  209 D1:A9AF 3E 02 -  -  	ld a,2 
  210 D1:A9B1 CD AD AB D1 	call draw_bg_sprite_line
  211 D1:A9B5 -  -  -  -  	
  212 D1:A9B5 21 9F AC D1 	ld hl,testBGSprite
  213 D1:A9B9 11 20 3A D4 	ld de,vRam + (160*93)
  214 D1:A9BD 3E 03 -  -  	ld a,3 
  215 D1:A9BF CD AD AB D1 	call draw_bg_sprite_line
  216 D1:A9C3 -  -  -  -  	
  217 D1:A9C3 21 9F AC D1 	ld hl,testBGSprite
  218 D1:A9C7 11 C0 3A D4 	ld de,vRam + (160*94)
  219 D1:A9CB 3E 04 -  -  	ld a,4 
  220 D1:A9CD CD AD AB D1 	call draw_bg_sprite_line
  221 D1:A9D1 -  -  -  -  	
  222 D1:A9D1 21 9F AC D1 	ld hl,testBGSprite
  223 D1:A9D5 11 A0 3C D4 	ld de,vRam + (160*97)
  224 D1:A9D9 3E 07 -  -  	ld a,7 
  225 D1:A9DB CD AD AB D1 	call draw_bg_sprite_line
  226 D1:A9DF -  -  -  -  	
  227 D1:A9DF -  -  -  -  	
  228 D1:A9DF -  -  -  -  	
  229 D1:A9DF 21 00 2C D5 	ld hl,vRam + (320*240)
  230 D1:A9E3 22 10 00 E3 	ld (mpLcdBase),hl
  231 D1:A9E7 -  -  -  -  	
  232 D1:A9E7 CD 2E B4 D1 	call sdcomp_reset_fast_sprite
  233 D1:A9EB CD 3D B4 D1 	call sdcomp_set_bg_sprite
  234 D1:A9EF CD 86 B2 D1 	call sdcomp_reset_flip
  235 D1:A9F3 -  -  -  -  	;call sdcomp_set_offset
  236 D1:A9F3 21 83 AD D1 	ld hl,testSpriteCompressed
  237 D1:A9F7 11 C0 03 D4 	ld de,vRam+(160*6)
  238 D1:A9FB CD F6 AE D1 	call sprite_decompress
  239 D1:A9FF -  -  -  -  	
  240 D1:A9FF -  -  -  -  	
  241 D1:A9FF -  -  -  -  testBG1 .equ vRam+(160*240)
  242 D1:A9FF -  -  -  -  testBG2 .equ testBG1 + 160
  243 D1:A9FF -  -  -  -  testBG3 .equ testBG2 + 160
  244 D1:A9FF -  -  -  -  testBG4 .equ testBG3 + 160
  245 D1:A9FF -  -  -  -  	
  246 D1:A9FF 21 34 AE D1 	ld hl,testBGSpriteComp
  247 D1:AA03 11 00 96 D4 	ld de,testBG1
  248 D1:AA07 CD F6 AE D1 	call sprite_decompress
  249 D1:AA0B -  -  -  -  	
  250 D1:AA0B 21 49 AE D1 	ld hl,testBGSpriteComp2
  251 D1:AA0F 11 A0 96 D4 	ld de,testBG2
  252 D1:AA13 CD F6 AE D1 	call sprite_decompress
  253 D1:AA17 -  -  -  -  	
  254 D1:AA17 21 57 AE D1 	ld hl,testBGSpriteComp3
  255 D1:AA1B 11 40 97 D4 	ld de,testBG3
  256 D1:AA1F CD F6 AE D1 	call sprite_decompress
  257 D1:AA23 -  -  -  -  	
  258 D1:AA23 CD 52 B4 D1 	call sdcomp_reset_bg_sprite
  259 D1:AA27 -  -  -  -  	
  260 D1:AA27 -  -  -  -  	
  261 D1:AA27 3E 00 -  -  	ld a,0
  262 D1:AA29 21 00 96 D4 	ld hl,$d49600
  263 D1:AA2D 11 00 2C D5 	ld de,vRam + (320*240)
  264 D1:AA31 CD AD AB D1 	call draw_bg_sprite_line
  265 D1:AA35 -  -  -  -  	
  266 D1:AA35 -  -  -  -  	
  267 D1:AA35 3E FF -  -  	ld a,255
  268 D1:AA37 21 00 2C D5 	ld hl,vRam + (320*240)
  269 D1:AA3B 22 91 AB D1 	ld (dbgl_vram_line_start),hl
  270 D1:AA3F 21 A8 AE D1 	ld hl,bg_data_frame_1
  271 D1:AA43 CD 12 AB D1 	call draw_bg_line 
  272 D1:AA47 -  -  -  -  	
  273 D1:AA47 -  -  -  -  
  274 D1:AA47 -  -  -  -  	
  275 D1:AA47 -  -  -  -  	
  276 D1:AA47 3E FF -  -  	ld a,255
  277 D1:AA49 21 00 2C D5 	ld hl,vRam + (320*240)
  278 D1:AA4D -  -  -  -  bg_draw_test_loop:
  279 D1:AA4D 22 91 AB D1 	ld (dbgl_vram_line_start),hl 
  280 D1:AA51 01 A0 00 00 	ld bc,160
  281 D1:AA55 09 -  -  -  	add hl,bc 
  282 D1:AA56 E5 -  -  -  	push hl
  283 D1:AA57 F5 -  -  -  	push af
  284 D1:AA58 21 A8 AE D1 	ld hl,bg_data_frame_1
  285 D1:AA5C CD 12 AB D1 	call draw_bg_line 
  286 D1:AA60 F1 -  -  -  	pop af
  287 D1:AA61 E1 -  -  -  	pop hl
  288 D1:AA62 3D -  -  -  	dec a
  289 D1:AA63 C2 4D AA D1 	jp nz,bg_draw_test_loop
  290 D1:AA67 -  -  -  -  
  291 D1:AA67 CD AD AA D1 	call prgmpause
  292 D1:AA6B -  -  -  -  	
  293 D1:AA6B 21 00 00 D4 	ld hl,vRam
  294 D1:AA6F 22 10 00 E3 	ld (mpLcdBase),hl
  295 D1:AA73 -  -  -  -  	
  296 D1:AA73 -  -  -  -  	
  297 D1:AA73 -  -  -  -  	
  298 D1:AA73 -  -  -  -  	
  299 D1:AA73 -  -  -  -  	
  300 D1:AA73 -  -  -  -  #comment 	ld hl,vRam+(160*6)
  301 D1:AA73             	ld de,vRam + (160*90) + 10
  302 D1:AA73             	ld a,0 
  303 D1:AA73             	call draw_bg_sprite_line
  304 D1:AA73             	
  305 D1:AA73             	ld hl,vRam+(160*6)
  306 D1:AA73             	ld de,vRam + (160*91) + 10
  307 D1:AA73             	ld a,1 
  308 D1:AA73             	call draw_bg_sprite_line
  309 D1:AA73             	
  310 D1:AA73             	ld hl,vRam+(160*6)
  311 D1:AA73             	ld de,vRam + (160*92) + 10
  312 D1:AA73             	ld a,2 
  313 D1:AA73             	call draw_bg_sprite_line
  314 D1:AA73             	ld hl,vRam+(160*6)
  315 D1:AA73             	ld de,vRam + (160*93) + 10
  316 D1:AA73             	ld a,3 
  317 D1:AA73             	call draw_bg_sprite_line
  318 D1:AA73             	ld hl,vRam+(160*6)
  319 D1:AA73             	ld de,vRam + (160*94) + 10
  320 D1:AA73             	ld a,4
  321 D1:AA73             	call draw_bg_sprite_line
  322 D1:AA73             	ld hl,vRam+(160*6)
  323 D1:AA73             	ld de,vRam + (160*95) + 10
  324 D1:AA73             	ld a,5 
  325 D1:AA73             	call draw_bg_sprite_line
  326 D1:AA73             	ld hl,vRam+(160*6)
  327 D1:AA73             	ld de,vRam + (160*96) + 10
  328 D1:AA73             	ld a,6 
  329 D1:AA73             	call draw_bg_sprite_line
  330 D1:AA73             	ld hl,vRam+(160*6)
  331 D1:AA73             	ld de,vRam + (160*97) + 10
  332 D1:AA73             	ld a,7 
  333 D1:AA73             	call draw_bg_sprite_line
  334 D1:AA73              #endcomment
  335 D1:AA73 -  -  -  -  	
  336 D1:AA73 -  -  -  -  	
  337 D1:AA73 -  -  -  -  	
  338 D1:AA73 -  -  -  -  	
  339 D1:AA73 -  -  -  -  	
  340 D1:AA73 -  -  -  -  
  341 D1:AA73 -  -  -  -  exit_prgm:
  342 D1:AA73 21 00 00 D4 	ld hl,vRam
  343 D1:AA77 22 10 00 E3 	ld (mpLcdBase),hl
  344 D1:AA7B CD 10 08 02 	call _ClrScrnFull
  345 D1:AA7F 3E 2D -  -  	ld	a,lcdBpp16
  346 D1:AA81 32 18 00 E3 	ld	(mpLcdCtrl),a
  347 D1:AA85 CD 3C 1A 02 	call _DrawStatusBar
  348 D1:AA89 -  -  -  -  	
  349 D1:AA89 FB -  -  -  	ei				; reset screen back to normal
  350 D1:AA8A C9 -  -  -  	ret			; return to os
  351 D1:AA8B -  -  -  -  
  352 D1:AA8B -  -  -  -  
  353 D1:AA8B -  -  -  -  printHL:;=================REMOVE
  354 D1:AA8B E5 -  -  -  	push hl
  355 D1:AA8C 21 00 00 D4 	ld hl,vRam
  356 D1:AA90 22 10 00 E3 	ld (mpLcdBase),hl
  357 D1:AA94 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  358 D1:AA98 3E 2D -  -  	ld	a,lcdBpp16
  359 D1:AA9A 32 18 00 E3 	ld (mpLcdCtrl),a
  360 D1:AA9E E1 -  -  -  	pop hl
  361 D1:AA9F CD E0 1E 02 	call _DispHL
  362 D1:AAA3 FB -  -  -  	ei
  363 D1:AAA4 CD 8C 0D 02 	call _GetKey
  364 D1:AAA8 F3 -  -  -  	di
  365 D1:AAA9 C3 73 AA D1 	jp exit_prgm
  366 D1:AAAD -  -  -  -  
  367 D1:AAAD -  -  -  -  
  368 D1:AAAD -  -  -  -  prgmpause:
  369 D1:AAAD D5 -  -  -  	push de 
  370 D1:AAAE E5 -  -  -  	push hl 
  371 D1:AAAF FB -  -  -  	ei
  372 D1:AAB0 CD 8C 0D 02 	call _GetKey
  373 D1:AAB4 F3 -  -  -  	di
  374 D1:AAB5 E1 -  -  -  	pop hl 
  375 D1:AAB6 D1 -  -  -  	pop de 
  376 D1:AAB7 C9 -  -  -  	ret
  377 D1:AAB8 -  -  -  -  
  378 D1:AAB8 -  -  -  -  test_addr:
  379 D1:AAB8 00 00 00 -  	.dl 0
  380 D1:AABB -  -  -  -  
  381 D1:AABB -  -  -  -  draw_buffer:
  382 D1:AABB 00 00 00 -  	.dl 0
  383 D1:AABE -  -  -  -  
  384 D1:AABE -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AABE -  -  -  -  
    2 D1:AABE -  -  -  -  
    3 D1:AABE -  -  -  -  
    4 D1:AABE -  -  -  -  time_test_start:
    5 D1:AABE -  -  -  -  
    6 D1:AABE -  -  -  -  		; 76543210	
    7 D1:AABE 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AAC0 32 30 00 F2 	ld ($F20030),a
    9 D1:AAC4 -  -  -  -  	;	  fedcba98
   10 D1:AAC4 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AAC6 32 31 00 F2 	ld ($F20031),a
   12 D1:AACA 3E 00 -  -  	ld a,0
   13 D1:AACC 32 00 00 F2 	ld ($F20000),a
   14 D1:AAD0 32 01 00 F2 	ld ($F20001),a
   15 D1:AAD4 32 02 00 F2 	ld ($F20002),a
   16 D1:AAD8 32 03 00 F2 	ld ($F20003),a
   17 D1:AADC -  -  -  -  	
   18 D1:AADC 21 2C 01 00 	ld hl,300
   19 D1:AAE0 -  -  -  -  	
   20 D1:AAE0 -  -  -  -  time_testing_loop:
   21 D1:AAE0 E5 -  -  -  	push hl
   22 D1:AAE1 01 E8 03 00 	ld bc,1000
   23 D1:AAE5 -  -  -  -  time_testing_loop_2:
   24 D1:AAE5 C5 -  -  -  	push bc
   25 D1:AAE6 -  -  -  -  	;instruction here
   26 D1:AAE6 11 C0 12 D4 	ld de,vram +(160*30)
   27 D1:AAEA 21 F0 AC D1 	ld hl,testSlowSprite
   28 D1:AAEE 3E 01 -  -  	ld a,1
   29 D1:AAF0 CD 57 AC D1 	call draw_slow_sprite_top_cut
   30 D1:AAF4 -  -  -  -  	;Instruction end
   31 D1:AAF4 C1 -  -  -  	pop bc
   32 D1:AAF5 0B -  -  -  	dec bc
   33 D1:AAF6 79 -  -  -  	ld a,c
   34 D1:AAF7 B0 -  -  -  	or b
   35 D1:AAF8 C2 E5 AA D1 	jp nz,time_testing_loop_2
   36 D1:AAFC E1 -  -  -  	pop hl
   37 D1:AAFD 2B -  -  -  	dec hl
   38 D1:AAFE 7D -  -  -  	ld a,l
   39 D1:AAFF B4 -  -  -  	or h
   40 D1:AB00 C2 E0 AA D1 	jp nz,time_testing_loop
   41 D1:AB04 -  -  -  -  	
   42 D1:AB04 3A 01 00 F2 	ld a,($F20001);128hz
   43 D1:AB08 6F -  -  -  	ld l,a
   44 D1:AB09 3A 02 00 F2 	ld a,($F20002);0.5hz
   45 D1:AB0D 67 -  -  -  	ld h,a
   46 D1:AB0E C3 8B AA D1 	jp printHL;div by 128 for time
   47 D1:AB12 -  -  -  -  	
   48 D1:AB12 -  -  -  -  
   49 D1:AB12 -  -  -  -  ;60fps = .0166sec/f	
   50 D1:AB12 -  -  -  -  
   51 D1:AB12 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   52 D1:AB12 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   53 D1:AB12 -  -  -  -  
   54 D1:AB12 -  -  -  -  
   55 D1:AB12 -  -  -  -  ;10,000 draw 1 bg line very complex 
   56 D1:AB12 -  -  -  -  ;9 sec  .07 of frame/instruction
   57 D1:AB12 -  -  -  -  
   58 D1:AB12 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   59 D1:AB12 -  -  -  -  ;16.4RT, 14.8CLK
   60 D1:AB12 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   61 D1:AB12 -  -  -  -  ;.24 screens/frame
   62 D1:AB12 -  -  -  -  
   63 D1:AB12 -  -  -  -  
   64 D1:AB12 -  -  -  -  ;300k slow sprite best case 12*5px
   65 D1:AB12 -  -  -  -  ;8.75RT 7.6clk
   66 D1:AB12 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   67 D1:AB12 -  -  -  -  ;.446 screens/frame
   68 D1:AB12 -  -  -  -  
   69 D1:AB12 -  -  -  -  
   70 D1:AB12 -  -  -  -  
   71 D1:AB12 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   72 D1:AB12 -  -  -  -  ;22.15RT,20.35clk
   73 D1:AB12 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   74 D1:AB12 -  -  -  -  ;.78 screens/frame
   75 D1:AB12 -  -  -  -  
   76 D1:AB12 -  -  -  -  
   77 D1:AB12 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   78 D1:AB12 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   79 D1:AB12 -  -  -  -  ;.47 = FAST
   80 D1:AB12 -  -  -  -  
   81 D1:AB12 -  -  -  -  ;50% fast sprites, 50% slow sprites
   82 D1:AB12 -  -  -  -  
   83 D1:AB12 -  -  -  -  
   84 D1:AB12 -  -  -  -  
   85 D1:AB12 -  -  -  -  
   86 D1:AB12 -  -  -  -  
   87 D1:AB12 -  -  -  -  
   88 D1:AB12 -  -  -  -  
   89 D1:AB12 -  -  -  -  
   90 D1:AB12 -  -  -  -  
Listing for file "ascent.asm"
  385 D1:AB12 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AB12 -  -  -  -  
    2 D1:AB12 -  -  -  -  
    3 D1:AB12 -  -  -  -  
    4 D1:AB12 -  -  -  -  ;hl = upper data frame, a = line number in target frame
    5 D1:AB12 -  -  -  -  draw_bg_line:
    6 D1:AB12 32 34 AB D1 	ld (dbgl_line_num),a
    7 D1:AB16 32 67 AB D1 	ld (dbgl_line_num_2),a
    8 D1:AB1A ED 17 -  -  	ld de,(hl)
    9 D1:AB1C ED 53 97 AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
   10 D1:AB21 23 -  -  -  	inc hl
   11 D1:AB22 23 -  -  -  	inc hl
   12 D1:AB23 23 -  -  -  	inc hl ;to frame data start 
   13 D1:AB24 11 00 00 00 	ld de,0
   14 D1:AB28 01 00 00 00 	ld bc,0
   15 D1:AB2C -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
   16 D1:AB2C -  -  -  -  dbgl_upper_loop:
   17 D1:AB2C 7E -  -  -  	ld a,(hl);y
   18 D1:AB2D 23 -  -  -  	inc hl;to height
   19 D1:AB2E 96 -  -  -  	sub (hl);subtract height
   20 D1:AB2F -  -  -  -  	;a is y value of bottom row of sprite
   21 D1:AB2F D2 3D AB D1 	jp nc,dbgl_upper_skip;if no carry into next frame
   22 D1:AB33 -  -  -  -  	;sprite extends into target frame
   23 D1:AB33 -  -  -  -  dbgl_line_num .equ $ + 1
   24 D1:AB33 D6 00 -  -  	sub 0 ;compare to line number in target frame
   25 D1:AB35 DA 4A AB D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
   26 D1:AB39 CA 4A AB D1 	jp z,dbgl_upper_cont;if = bottom row
   27 D1:AB3D -  -  -  -  dbgl_upper_skip:
   28 D1:AB3D 23 -  -  -  	inc hl;to x
   29 D1:AB3E 23 -  -  -  	inc hl;to index 
   30 D1:AB3F 7E -  -  -  	ld a,(hl);index
   31 D1:AB40 23 -  -  -  	inc hl;to y
   32 D1:AB41 B7 -  -  -  	or a 
   33 D1:AB42 C2 2C AB D1 	jp nz,dbgl_upper_loop
   34 D1:AB46 C3 56 AB D1 	jp dbgl_lower_start
   35 D1:AB4A -  -  -  -  dbgl_upper_cont:
   36 D1:AB4A -  -  -  -  	;a = bottom row - linenum
   37 D1:AB4A 86 -  -  -  	add a,(hl);add height-1 
   38 D1:AB4B -  -  -  -  	;a holds 0 indexed line num within sprite
   39 D1:AB4B CD 8B AB D1 	call dbgl_setup_and_draw
   40 D1:AB4F 7E -  -  -  	ld a,(hl);index
   41 D1:AB50 23 -  -  -  	inc hl
   42 D1:AB51 B7 -  -  -  	or a 
   43 D1:AB52 C2 2C AB D1 	jp nz,dbgl_upper_loop
   44 D1:AB56 -  -  -  -  	
   45 D1:AB56 -  -  -  -  dbgl_lower_start:
   46 D1:AB56 -  -  -  -  ;LOWER FRAME START 
   47 D1:AB56 -  -  -  -  	;hl pointing to sprite data table 
   48 D1:AB56 ED 17 -  -  	ld de,(hl)
   49 D1:AB58 ED 53 97 AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
   50 D1:AB5D 11 00 00 00 	ld de,0
   51 D1:AB61 23 -  -  -  	inc hl
   52 D1:AB62 23 -  -  -  	inc hl
   53 D1:AB63 23 -  -  -  	inc hl;to y 
   54 D1:AB64 -  -  -  -  dbgl_lower_loop:
   55 D1:AB64 7E -  -  -  	ld a,(hl)
   56 D1:AB65 23 -  -  -  	inc hl;to height-1
   57 D1:AB66 -  -  -  -  dbgl_line_num_2 .equ $ + 1
   58 D1:AB66 D6 00 -  -  	sub 0;subtract line num 
   59 D1:AB68 DA 75 AB D1 	jp c,dbgl_lower_skip;target line num is above sprite 
   60 D1:AB6C -  -  -  -  	;target is below or = sprite y value 
   61 D1:AB6C -  -  -  -  	;a holds 0 indexed sprite row 
   62 D1:AB6C BE -  -  -  	cp (hl);compare to height
   63 D1:AB6D DA 7F AB D1 	jp c,dbgl_lower_cont ;if height >= a 
   64 D1:AB71 CA 7F AB D1 	jp z,dbgl_lower_cont
   65 D1:AB75 -  -  -  -  dbgl_lower_skip:
   66 D1:AB75 23 -  -  -  	inc hl;to x  
   67 D1:AB76 23 -  -  -  	inc hl; to index
   68 D1:AB77 7E -  -  -  	ld a,(hl);index
   69 D1:AB78 23 -  -  -  	inc hl;to y
   70 D1:AB79 B7 -  -  -  	or a 
   71 D1:AB7A C2 64 AB D1 	jp nz,dbgl_lower_loop
   72 D1:AB7E C9 -  -  -  	ret
   73 D1:AB7F -  -  -  -  dbgl_lower_cont:
   74 D1:AB7F -  -  -  -  
   75 D1:AB7F CD 8B AB D1 	call dbgl_setup_and_draw
   76 D1:AB83 7E -  -  -  	ld a,(hl);index 
   77 D1:AB84 23 -  -  -  	inc hl;to y 
   78 D1:AB85 B7 -  -  -  	or a
   79 D1:AB86 C2 64 AB D1 	jp nz,dbgl_lower_loop
   80 D1:AB8A C9 -  -  -  	ret;end of target frame
   81 D1:AB8B -  -  -  -  
   82 D1:AB8B -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
   83 D1:AB8B -  -  -  -  dbgl_setup_and_draw:
   84 D1:AB8B 23 -  -  -  	inc hl;to x pos
   85 D1:AB8C 5E -  -  -  	ld e,(hl)
   86 D1:AB8D 23 -  -  -  	inc hl 
   87 D1:AB8E 4E -  -  -  	ld c,(hl);sprite index 
   88 D1:AB8F E5 -  -  -  	push hl
   89 D1:AB90 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
   90 D1:AB90 21 00 00 00 	ld hl,0
   91 D1:AB94 19 -  -  -  	add hl,de;add x pos 
   92 D1:AB95 EB -  -  -  	ex de,hl;put vram pos into de 
   93 D1:AB96 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
   94 D1:AB96 21 00 00 00 	ld hl,0
   95 D1:AB9A 09 -  -  -  	add hl,bc
   96 D1:AB9B 09 -  -  -  	add hl,bc 
   97 D1:AB9C 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
   98 D1:AB9D ED 27 -  -  	ld hl,(hl);hl holds sprite data
   99 D1:AB9F -  -  -  -  
  100 D1:AB9F CD AD AB D1 	call draw_bg_sprite_line;draw sprite line 
  101 D1:ABA3 11 00 00 00 	ld de,0;clear de 
  102 D1:ABA7 01 00 00 00 	ld bc,0
  103 D1:ABAB E1 -  -  -  	pop hl;back to data
  104 D1:ABAC C9 -  -  -  	ret
  105 D1:ABAD -  -  -  -  	
  106 D1:ABAD -  -  -  -  
  107 D1:ABAD -  -  -  -  
  108 D1:ABAD -  -  -  -  
  109 D1:ABAD -  -  -  -  
  110 D1:ABAD -  -  -  -  
  111 D1:ABAD -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  112 D1:ABAD -  -  -  -  draw_bg_sprite_line:
  113 D1:ABAD E5 -  -  -  	push hl;save 
  114 D1:ABAE 6E -  -  -  	ld l,(hl);sprite width in px
  115 D1:ABAF 67 -  -  -  	ld h,a ;lines to skip
  116 D1:ABB0 7D -  -  -  	ld a,l;width 
  117 D1:ABB1 ED 6C -  -  	mlt hl;widt*lines skipped 
  118 D1:ABB3 C1 -  -  -  	pop bc 
  119 D1:ABB4 09 -  -  -  	add hl,bc;skip to target line data 
  120 D1:ABB5 23 -  -  -  	inc hl 
  121 D1:ABB6 -  -  -  -  	;hl is pointing to start of line data 
  122 D1:ABB6 CB 2F -  -  	sra a;divide width by 2 
  123 D1:ABB8 47 -  -  -  	ld b,a;b holds number of loops 
  124 D1:ABB9 -  -  -  -  dbgsl_loop:
  125 D1:ABB9 1A -  -  -  	ld a,(de); load vram data 
  126 D1:ABBA A6 -  -  -  	and (hl);and with mask 
  127 D1:ABBB 23 -  -  -  	inc hl ;to color data 
  128 D1:ABBC B6 -  -  -  	or (hl);or w color data 
  129 D1:ABBD 12 -  -  -  	ld (de),a;write to vram  
  130 D1:ABBE 13 -  -  -  	inc de
  131 D1:ABBF 23 -  -  -  	inc hl;to mask data
  132 D1:ABC0 10 F7 -  -  	djnz dbgsl_loop
  133 D1:ABC2 C9 -  -  -  	ret 
  134 D1:ABC3 -  -  -  -  	
  135 D1:ABC3 -  -  -  -  
  136 D1:ABC3 -  -  -  -  
  137 D1:ABC3 -  -  -  -  
  138 D1:ABC3 -  -  -  -  
  139 D1:ABC3 -  -  -  -  
  140 D1:ABC3 -  -  -  -  
  141 D1:ABC3 -  -  -  -  
  142 D1:ABC3 -  -  -  -  
  143 D1:ABC3 -  -  -  -  
  144 D1:ABC3 -  -  -  -  
  145 D1:ABC3 -  -  -  -  
  146 D1:ABC3 -  -  -  -  
Listing for file "ascent.asm"
  386 D1:ABC3 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ABC3 -  -  -  -  
    2 D1:ABC3 -  -  -  -  
    3 D1:ABC3 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
    4 D1:ABC3 -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:ABC3 1B -  -  -  	dec de
    6 D1:ABC4 01 00 00 00 	ld bc,0
    7 D1:ABC8 4F -  -  -  	ld c,a
    8 D1:ABC9 E5 -  -  -  	push hl
    9 D1:ABCA 7E -  -  -  	ld a,(hl);height
   10 D1:ABCB 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:ABCC 4F -  -  -  	ld c,a;height
   12 D1:ABCD 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:ABCE E1 -  -  -  	pop hl
   14 D1:ABCF 23 -  -  -  	inc hl
   15 D1:ABD0 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:ABD1 -  -  -  -  
   17 D1:ABD1 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:ABD2 EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:ABD3 C3 19 AC D1 	jp dfgs_loop
   20 D1:ABD7 -  -  -  -  	
   21 D1:ABD7 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
   22 D1:ABD7 -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:ABD7 1B -  -  -  	dec de
   24 D1:ABD8 01 00 00 00 	ld bc,0
   25 D1:ABDC 4F -  -  -  	ld c,a
   26 D1:ABDD D5 -  -  -  	push de
   27 D1:ABDE 11 00 00 00 	ld de,0
   28 D1:ABE2 E5 -  -  -  	push hl
   29 D1:ABE3 5E -  -  -  	ld e,(hl);height
   30 D1:ABE4 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:ABE5 -  -  -  -  
   32 D1:ABE5 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:ABE6 E1 -  -  -  	pop hl;start of data
   34 D1:ABE7 19 -  -  -  	add hl,de
   35 D1:ABE8 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:ABE9 23 -  -  -  	inc hl;hl is pixel data
   37 D1:ABEA D1 -  -  -  	pop de
   38 D1:ABEB C5 -  -  -  	push bc;save total and skipped loops
   39 D1:ABEC 79 -  -  -  	ld a,c;loops to skip
   40 D1:ABED 01 00 00 00 	ld bc,0
   41 D1:ABF1 -  -  -  -  	
   42 D1:ABF1 -  -  -  -  
   43 D1:ABF1 -  -  -  -  draw_fast_sprite_top_loop:
   44 D1:ABF1 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:ABF2 EB -  -  -  	ex de,hl;hl is vram
   46 D1:ABF3 09 -  -  -  	add hl,bc
   47 D1:ABF4 EB -  -  -  	ex de,hl;hl is data
   48 D1:ABF5 23 -  -  -  	inc hl
   49 D1:ABF6 4E -  -  -  	ld c,(hl);ldir length
   50 D1:ABF7 09 -  -  -  	add hl,bc;add ldir length
   51 D1:ABF8 EB -  -  -  	ex de,hl;hl is vram
   52 D1:ABF9 09 -  -  -  	add hl,bc;add ldir length
   53 D1:ABFA 13 -  -  -  	inc de
   54 D1:ABFB EB -  -  -  	ex de,hl;hl is data
   55 D1:ABFC 3D -  -  -  	dec a
   56 D1:ABFD C2 F1 AB D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:AC01 -  -  -  -  	
   58 D1:AC01 -  -  -  -  	
   59 D1:AC01 C1 -  -  -  	pop bc
   60 D1:AC02 78 -  -  -  	ld a,b
   61 D1:AC03 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:AC04 -  -  -  -  		
   63 D1:AC04 01 00 00 00 	ld bc,0
   64 D1:AC08 4E -  -  -  	ld c,(hl)
   65 D1:AC09 EB -  -  -  	ex de,hl
   66 D1:AC0A C3 19 AC D1 	jp dfgs_loop
   67 D1:AC0E -  -  -  -  
   68 D1:AC0E -  -  -  -  
   69 D1:AC0E -  -  -  -  ;de = vram , hl = data
   70 D1:AC0E -  -  -  -  draw_fast_sprite_full:
   71 D1:AC0E 1B -  -  -  	dec de
   72 D1:AC0F 01 00 00 00 	ld bc,0
   73 D1:AC13 4E -  -  -  	ld c,(hl);height
   74 D1:AC14 09 -  -  -  	add hl,bc
   75 D1:AC15 7E -  -  -  	ld a,(hl);total loops
   76 D1:AC16 23 -  -  -  	inc hl
   77 D1:AC17 4E -  -  -  	ld c,(hl);first gap length
   78 D1:AC18 EB -  -  -  	ex de,hl
   79 D1:AC19 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   80 D1:AC19 -  -  -  -  dfgs_loop:;gap, colors
   81 D1:AC19 09 -  -  -  	add hl,bc;add alpha length
   82 D1:AC1A EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   83 D1:AC1B 23 -  -  -  	inc hl
   84 D1:AC1C 4E -  -  -  	ld c,(hl);get ldir length
   85 D1:AC1D 23 -  -  -  	inc hl
   86 D1:AC1E ED B0 -  -  	ldir
   87 D1:AC20 4E -  -  -  	ld c,(hl);load c with next alpha length
   88 D1:AC21 EB -  -  -  	ex de,hl;swap, hl is vram
   89 D1:AC22 3D -  -  -  	dec a
   90 D1:AC23 C2 19 AC D1 	jp nz,dfgs_loop
   91 D1:AC27 C9 -  -  -  	ret
   92 D1:AC28 -  -  -  -  	
   93 D1:AC28 -  -  -  -  	
   94 D1:AC28 -  -  -  -  	
   95 D1:AC28 -  -  -  -  	
   96 D1:AC28 -  -  -  -  
   97 D1:AC28 -  -  -  -  
   98 D1:AC28 -  -  -  -  ;hl = data, de = vram
   99 D1:AC28 -  -  -  -  draw_slow_sprite_full:
  100 D1:AC28 01 00 00 00 	ld bc,0
  101 D1:AC2C 4E -  -  -  	ld c,(hl);height
  102 D1:AC2D 09 -  -  -  	add hl,bc
  103 D1:AC2E 7E -  -  -  	ld a,(hl);num loops
  104 D1:AC2F D9 -  -  -  	exx
  105 D1:AC30 4F -  -  -  	ld c,a
  106 D1:AC31 D9 -  -  -  	exx
  107 D1:AC32 1B -  -  -  	dec de
  108 D1:AC33 -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  109 D1:AC33 -  -  -  -  dsfgs_line_loop:
  110 D1:AC33 23 -  -  -  	inc hl;gap length
  111 D1:AC34 4E -  -  -  	ld c,(hl);gap length
  112 D1:AC35 EB -  -  -  	ex de,hl;hl is vram
  113 D1:AC36 09 -  -  -  	add hl,bc;add aplha gap
  114 D1:AC37 EB -  -  -  	ex de,hl;hl is data
  115 D1:AC38 23 -  -  -  	inc hl;hl points to single pix mask
  116 D1:AC39 1A -  -  -  	ld a,(de);vram data
  117 D1:AC3A A6 -  -  -  	and (hl)
  118 D1:AC3B 23 -  -  -  	inc hl;pixel data
  119 D1:AC3C B6 -  -  -  	or (hl)
  120 D1:AC3D 12 -  -  -  	ld (de),a
  121 D1:AC3E 23 -  -  -  	inc hl;ldir length
  122 D1:AC3F -  -  -  -  	
  123 D1:AC3F 13 -  -  -  	inc de;move to next pixel
  124 D1:AC40 -  -  -  -  	
  125 D1:AC40 7E -  -  -  	ld a,(hl);ldir length
  126 D1:AC41 23 -  -  -  	inc hl;data
  127 D1:AC42 4F -  -  -  	ld c,a
  128 D1:AC43 B7 -  -  -  	or a
  129 D1:AC44 CA 4A AC D1 	jp z,dsfgs_ldir_skip
  130 D1:AC48 ED B0 -  -  	ldir
  131 D1:AC4A -  -  -  -  dsfgs_ldir_skip:
  132 D1:AC4A 1A -  -  -  	ld a,(de);vram data
  133 D1:AC4B A6 -  -  -  	and (hl)
  134 D1:AC4C 23 -  -  -  	inc hl;pixel data
  135 D1:AC4D B6 -  -  -  	or (hl)
  136 D1:AC4E 12 -  -  -  	ld (de),a
  137 D1:AC4F -  -  -  -  	
  138 D1:AC4F D9 -  -  -  	exx 
  139 D1:AC50 0D -  -  -  	dec c
  140 D1:AC51 D9 -  -  -  	exx
  141 D1:AC52 C2 33 AC D1 	jp nz,dsfgs_line_loop
  142 D1:AC56 C9 -  -  -  	ret
  143 D1:AC57 -  -  -  -  
  144 D1:AC57 -  -  -  -  
  145 D1:AC57 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  146 D1:AC57 -  -  -  -  draw_slow_sprite_top_cut:
  147 D1:AC57 -  -  -  -  
  148 D1:AC57 E5 -  -  -  	push hl
  149 D1:AC58 01 00 00 00 	ld bc,0
  150 D1:AC5C 4F -  -  -  	ld c,a
  151 D1:AC5D 09 -  -  -  	add hl,bc
  152 D1:AC5E 7E -  -  -  	ld a,(hl);loops to skip
  153 D1:AC5F 32 82 AC D1 	ld (dsstc_loops_skipped),a
  154 D1:AC63 D9 -  -  -  	exx
  155 D1:AC64 47 -  -  -  	ld b,a;loops to skip
  156 D1:AC65 D9 -  -  -  	exx
  157 D1:AC66 E1 -  -  -  	pop hl
  158 D1:AC67 4E -  -  -  	ld c,(hl)
  159 D1:AC68 09 -  -  -  	add hl,bc;total loops
  160 D1:AC69 7E -  -  -  	ld a,(hl);total loops
  161 D1:AC6A 23 -  -  -  	inc hl;gap length
  162 D1:AC6B -  -  -  -  
  163 D1:AC6B -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  164 D1:AC6B D9 -  -  -  	exx
  165 D1:AC6C -  -  -  -  slow_sprite_data_traverse:
  166 D1:AC6C D9 -  -  -  	exx
  167 D1:AC6D 4E -  -  -  	ld c,(hl);gap length
  168 D1:AC6E EB -  -  -  	ex de,hl;hl is vram
  169 D1:AC6F 09 -  -  -  	add hl,bc
  170 D1:AC70 EB -  -  -  	ex de,hl
  171 D1:AC71 -  -  -  -  	
  172 D1:AC71 23 -  -  -  	inc hl
  173 D1:AC72 23 -  -  -  	inc hl
  174 D1:AC73 23 -  -  -  	inc hl;ldir length
  175 D1:AC74 4E -  -  -  	ld c,(hl)
  176 D1:AC75 09 -  -  -  	add hl,bc
  177 D1:AC76 EB -  -  -  	ex de,hl
  178 D1:AC77 09 -  -  -  	add hl,bc
  179 D1:AC78 EB -  -  -  	ex de,hl
  180 D1:AC79 13 -  -  -  	inc de;single pix
  181 D1:AC7A 23 -  -  -  	inc hl
  182 D1:AC7B 23 -  -  -  	inc hl
  183 D1:AC7C 23 -  -  -  	inc hl;gap length
  184 D1:AC7D D9 -  -  -  	exx
  185 D1:AC7E 10 EC -  -  	djnz slow_sprite_data_traverse
  186 D1:AC80 D9 -  -  -  	exx
  187 D1:AC81 -  -  -  -  
  188 D1:AC81 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  189 D1:AC81 D6 00 -  -  	sub a,0;loops skipped
  190 D1:AC83 D9 -  -  -  	exx
  191 D1:AC84 4F -  -  -  	ld c,a
  192 D1:AC85 D9 -  -  -  	exx
  193 D1:AC86 -  -  -  -  	
  194 D1:AC86 1B -  -  -  	dec de
  195 D1:AC87 2B -  -  -  	dec hl	
  196 D1:AC88 C3 33 AC D1 	jp dsfgs_line_loop
  197 D1:AC8C -  -  -  -  	
  198 D1:AC8C -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  199 D1:AC8C -  -  -  -  draw_slow_sprite_bottom_cut:
  200 D1:AC8C 01 00 00 00 	ld bc,0
  201 D1:AC90 E5 -  -  -  	push hl
  202 D1:AC91 4F -  -  -  	ld c,a;height
  203 D1:AC92 09 -  -  -  	add hl,bc
  204 D1:AC93 7E -  -  -  	ld a,(hl);num loops
  205 D1:AC94 D9 -  -  -  	exx
  206 D1:AC95 4F -  -  -  	ld c,a
  207 D1:AC96 D9 -  -  -  	exx
  208 D1:AC97 E1 -  -  -  	pop hl
  209 D1:AC98 4E -  -  -  	ld c,(hl)
  210 D1:AC99 09 -  -  -  	add hl,bc
  211 D1:AC9A -  -  -  -  
  212 D1:AC9A 1B -  -  -  	dec de
  213 D1:AC9B C3 33 AC D1 	jp dsfgs_line_loop
  214 D1:AC9F -  -  -  -  
  215 D1:AC9F -  -  -  -  
  216 D1:AC9F -  -  -  -  
  217 D1:AC9F -  -  -  -  
  218 D1:AC9F -  -  -  -  
  219 D1:AC9F -  -  -  -  
  220 D1:AC9F -  -  -  -  
  221 D1:AC9F -  -  -  -  
  222 D1:AC9F -  -  -  -  
  223 D1:AC9F -  -  -  -  
  224 D1:AC9F -  -  -  -  
  225 D1:AC9F -  -  -  -  
  226 D1:AC9F -  -  -  -  
  227 D1:AC9F -  -  -  -  
  228 D1:AC9F -  -  -  -  
  229 D1:AC9F -  -  -  -  
  230 D1:AC9F -  -  -  -  
  231 D1:AC9F -  -  -  -  
  232 D1:AC9F -  -  -  -  
  233 D1:AC9F -  -  -  -  
  234 D1:AC9F -  -  -  -  
  235 D1:AC9F -  -  -  -  
  236 D1:AC9F -  -  -  -  
  237 D1:AC9F -  -  -  -  
  238 D1:AC9F -  -  -  -  
  239 D1:AC9F -  -  -  -  
  240 D1:AC9F -  -  -  -  
  241 D1:AC9F -  -  -  -  
  242 D1:AC9F -  -  -  -  
  243 D1:AC9F -  -  -  -  
  244 D1:AC9F -  -  -  -  
  245 D1:AC9F -  -  -  -  
  246 D1:AC9F -  -  -  -  
  247 D1:AC9F -  -  -  -  
  248 D1:AC9F -  -  -  -  
  249 D1:AC9F -  -  -  -   
  250 D1:AC9F -  -  -  -  
  251 D1:AC9F -  -  -  -  
  252 D1:AC9F -  -  -  -  
  253 D1:AC9F -  -  -  -  
  254 D1:AC9F -  -  -  -  
  255 D1:AC9F -  -  -  -  
  256 D1:AC9F -  -  -  -  
  257 D1:AC9F -  -  -  -  
  258 D1:AC9F -  -  -  -  
  259 D1:AC9F -  -  -  -  
  260 D1:AC9F -  -  -  -  
  261 D1:AC9F -  -  -  -  
  262 D1:AC9F -  -  -  -  
  263 D1:AC9F -  -  -  -  
  264 D1:AC9F -  -  -  -  
  265 D1:AC9F -  -  -  -  
  266 D1:AC9F -  -  -  -  
  267 D1:AC9F -  -  -  -  
  268 D1:AC9F -  -  -  -  
  269 D1:AC9F -  -  -  -  
  270 D1:AC9F -  -  -  -  
  271 D1:AC9F -  -  -  -  
  272 D1:AC9F -  -  -  -  
  273 D1:AC9F -  -  -  -  
  274 D1:AC9F -  -  -  -  
  275 D1:AC9F -  -  -  -  
  276 D1:AC9F -  -  -  -  
  277 D1:AC9F -  -  -  -  
  278 D1:AC9F -  -  -  -  
  279 D1:AC9F -  -  -  -  
  280 D1:AC9F -  -  -  -  
  281 D1:AC9F -  -  -  -  
  282 D1:AC9F -  -  -  -  
  283 D1:AC9F -  -  -  -  
  284 D1:AC9F -  -  -  -  
  285 D1:AC9F -  -  -  -  
  286 D1:AC9F -  -  -  -  
  287 D1:AC9F -  -  -  -  
  288 D1:AC9F -  -  -  -  
  289 D1:AC9F -  -  -  -  
  290 D1:AC9F -  -  -  -  
  291 D1:AC9F -  -  -  -  
  292 D1:AC9F -  -  -  -  
  293 D1:AC9F -  -  -  -  
  294 D1:AC9F -  -  -  -  
  295 D1:AC9F -  -  -  -  
  296 D1:AC9F -  -  -  -  
  297 D1:AC9F -  -  -  -  
  298 D1:AC9F -  -  -  -  
  299 D1:AC9F -  -  -  -  
  300 D1:AC9F -  -  -  -  
  301 D1:AC9F -  -  -  -  
  302 D1:AC9F -  -  -  -  
  303 D1:AC9F -  -  -  -  
  304 D1:AC9F -  -  -  -  
  305 D1:AC9F -  -  -  -  	
  306 D1:AC9F -  -  -  -  	
Listing for file "ascent.asm"
  387 D1:AC9F -  -  -  -  #include "spriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteData.txt"
    1 D1:AC9F -  -  -  -  
    2 D1:AC9F -  -  -  -  
    3 D1:AC9F -  -  -  -  
    4 D1:AC9F -  -  -  -  
    5 D1:AC9F -  -  -  -  ;BG SPRITES
    6 D1:AC9F -  -  -  -  ; width(px) rounded up
    7 D1:AC9F -  -  -  -  ;.db vram data mask, color data....
    8 D1:AC9F -  -  -  -  
    9 D1:AC9F -  -  -  -  testBGSprite:
   10 D1:AC9F 0A -  -  -  	.db 10
   11 D1:ACA0 00 35 FF 00 
              F0 03 0F 50 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$50,$F0,$05
   12 D1:ACAA FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   13 D1:ACB4 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   14 D1:ACBE 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   15 D1:ACC8 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   16 D1:ACD2 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   17 D1:ACDC 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   18 D1:ACE6 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03	
   19 D1:ACF0 -  -  -  -  ;53xx3xx55
   20 D1:ACF0 -  -  -  -  ;xxxxxx323
   21 D1:ACF0 -  -  -  -  ;222233x32
   22 D1:ACF0 -  -  -  -  ;53xx3xx55
   23 D1:ACF0 -  -  -  -  ;xxxxxx323	
   24 D1:ACF0 -  -  -  -  ;222233x32
   25 D1:ACF0 -  -  -  -  
   26 D1:ACF0 -  -  -  -  
   27 D1:ACF0 -  -  -  -  	
   28 D1:ACF0 -  -  -  -  ;FG _ SPRITES
   29 D1:ACF0 -  -  -  -  
   30 D1:ACF0 -  -  -  -  ;YBRGW
   31 D1:ACF0 -  -  -  -  
   32 D1:ACF0 -  -  -  -  ;SLOW_Sprite,  even pixel start
   33 D1:ACF0 -  -  -  -  ;.height
   34 D1:ACF0 -  -  -  -  ;.num loops per num lines
   35 D1:ACF0 -  -  -  -  
   36 D1:ACF0 -  -  -  -  ;.db alpha length(gap between single pixels, 0 for a gap of -1, 1 for no gap),single pixel mask(%00001111) or (%11111111) single pixel data (%data0000) or (%00000000),
   37 D1:ACF0 -  -  -  -  ; ldir length, main pixel data,pixel mask,pixel data.....
   38 D1:ACF0 -  -  -  -  
   39 D1:ACF0 -  -  -  -  testSlowSprite:
   40 D1:ACF0 05 -  -  -  	.db 5
   41 D1:ACF1 02 04 07 0B 
              0C -  -  -  	.db 2,4,7,11,12
   42 D1:ACF6 00 FF 00 02 
              35 35 FF 00 
              00 FF 00 02 
              24 24 FF 00 	.db 0,%11111111,%00000000,2,$35,$35,%11111111,%00000000,0,%11111111,%00000000,2,$24,$24,%11111111,%00000000
   43 D1:AD06 9B FF 00 02 
              31 31 F0 01 
              01 FF 00 01 
              11 FF 00 -  	.db 155, %11111111,%00000000,2,$31,$31,%11110000,$01,1,%11111111,%00000000,1,$11,%11111111,%00000000
   44 D1:AD15 9A 0F 50 01 
              53 FF 00 00 
              FF 00 01 35 
              F0 05 01 0F 
              50 00 FF 00 	.db 154,%00001111,$50,1,$53,%11111111,%00000000,0,%11111111,%00000000,1,$35,%11110000,$05,1,%00001111,$50,0,%11111111,%00000000
   45 D1:AD29 9A 0F 30 00 
              F0 03 00 FF 
              00 00 F0 03 
              01 0F 30 00 
              7F 00 00 0F 
              30 00 FF 00 	.db 154,%00001111,$30,0,%11110000,$03,0,%11111111,%00000000,0,%11110000,$03,1,%00001111,$30,0,%1111111,00000000,0,%00001111,$30,0,%11111111,%00000000
   46 D1:AD41 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   47 D1:AD4B -  -  -  -  	
   48 D1:AD4B -  -  -  -  	;WRWRXXGBGBXX
   49 D1:AD4B -  -  -  -  	
   50 D1:AD4B -  -  -  -  	;XXYRYRYXXXYY
   51 D1:AD4B -  -  -  -  	
   52 D1:AD4B -  -  -  -  	;XW RW XX WR WX XW
   53 D1:AD4B -  -  -  -  	
   54 D1:AD4B -  -  -  -  	;XR RX RX XR XR XX
   55 D1:AD4B -  -  -  -  	
   56 D1:AD4B -  -  -  -  	;XW WW WW WW WW WX
   57 D1:AD4B -  -  -  -  	
   58 D1:AD4B -  -  -  -  	
   59 D1:AD4B -  -  -  -  testSlowSpriteBestCase:
   60 D1:AD4B 05 -  -  -  	.db 5
   61 D1:AD4C 01 02 03 04 
              05 -  -  -  	.db 1,2,3,4,5
   62 D1:AD51 00 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 0,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   63 D1:AD5B 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   64 D1:AD65 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   65 D1:AD6F 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   66 D1:AD79 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   67 D1:AD83 -  -  -  -  	
   68 D1:AD83 -  -  -  -  ;XW WW WW WW WW WX
   69 D1:AD83 -  -  -  -  ;XW WW WW WW WW WX
   70 D1:AD83 -  -  -  -  ;XW WW WW WW WW WX
   71 D1:AD83 -  -  -  -  ;XW WW WW WW WW WX
   72 D1:AD83 -  -  -  -  ;XW WW WW WW WW WX
   73 D1:AD83 -  -  -  -  
   74 D1:AD83 -  -  -  -  ;YBRGW
   75 D1:AD83 -  -  -  -  
   76 D1:AD83 -  -  -  -  ;.db flags ( 4bpc,3bpc,2bpc,1bpc,0bpc,noalpha
   77 D1:AD83 -  -  -  -  ;.db width(px),height
   78 D1:AD83 -  -  -  -  ;.db alpha data 
   79 D1:AD83 -  -  -  -  ;.db color data
   80 D1:AD83 -  -  -  -  
   81 D1:AD83 -  -  -  -  	
   82 D1:AD83 -  -  -  -  testSpriteCompressed:
   83 D1:AD83 80 -  -  -  	.db %10000000;4bpc
   84 D1:AD84 08 08 -  -  	.db 8,8
   85 D1:AD86 -  -  -  -  ;.db $33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22
   86 D1:AD86 7E -  -  -  	.db %01111110;1
   87 D1:AD87 66 -  -  -  	.db %01100110;2
   88 D1:AD88 CE -  -  -  	.db %11001110;2
   89 D1:AD89 55 -  -  -  	.db %01010101;2
   90 D1:AD8A AA -  -  -  	.db %10101010;2
   91 D1:AD8B 6E -  -  -  	.db %01101110;2
   92 D1:AD8C 3B -  -  -  	.db %00111011;2
   93 D1:AD8D 67 -  -  -  	.db %01100111;2
   94 D1:AD8E 53 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 -  	.db $53,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55;indexed color data
   95 D1:ADB5 -  -  -  -  	;1 3 5 7 9 11 13 15
   96 D1:ADB5 -  -  -  -  	
   97 D1:ADB5 -  -  -  -  testSpriteCompressed2:
   98 D1:ADB5 03 04 -  -  	.db 3,4
   99 D1:ADB7 CD 50 -  -  	.db %11001101,%01010000
  100 D1:ADB9 23 23 23 23 
              23 -  -  -  	.db $23,$23,$23,$23,$23
  101 D1:ADBE -  -  -  -  	;110
  102 D1:ADBE -  -  -  -  	;011
  103 D1:ADBE -  -  -  -  	;010
  104 D1:ADBE -  -  -  -  	;101
  105 D1:ADBE -  -  -  -  	
  106 D1:ADBE -  -  -  -  
  107 D1:ADBE -  -  -  -  testSpriteCompressed3:
  108 D1:ADBE 05 04 -  -  	.db 5,4
  109 D1:ADC0 76 B2 70 -  	.db %01110110,%10110010,%01110000
  110 D1:ADC3 55 55 55 55 
              55 55 55 -  	.db $55,$55,$55,$55,$55,$55,$55
  111 D1:ADCA -  -  -  -  	;01110
  112 D1:ADCA -  -  -  -  	;11010
  113 D1:ADCA -  -  -  -  	;11001
  114 D1:ADCA -  -  -  -  	;00111
  115 D1:ADCA -  -  -  -  
  116 D1:ADCA -  -  -  -  
  117 D1:ADCA -  -  -  -  testSpriteCompressed4:
  118 D1:ADCA 40 -  -  -  	.db %01000000;3bpc
  119 D1:ADCB 09 04 -  -  	.db 9,4
  120 D1:ADCD 9D 5F F6 82 
              B0 -  -  -  	.db %10011101,%01011111,%11110110,%10000010,%10110000
  121 D1:ADD2 54 32 10 33 	.db $54,$32,$10,$33
  122 D1:ADD6 E3 8E 38 E3 
              8E 38 E3 8E 
              38 E3 E3 8E 
              38 E3 8E 38 
              E3 8E 38 E3 	.db %11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011
  123 D1:ADEA -  -  -  -  ;100111010  2 loop
  124 D1:ADEA -  -  -  -  ;101111111  1 loop
  125 D1:ADEA -  -  -  -  ;110110100  2 loop
  126 D1:ADEA -  -  -  -  ;000101011  2 loop
  127 D1:ADEA -  -  -  -  ;2357
  128 D1:ADEA -  -  -  -  testSpriteCompressedFast:
  129 D1:ADEA 20 -  -  -  	.db %00100000;4bpc
  130 D1:ADEB 08 08 -  -  	.db 8,8
  131 D1:ADED F0 -  -  -  	.db %11110000
  132 D1:ADEE 33 -  -  -  	.db %00110011
  133 D1:ADEF C3 -  -  -  	.db %11000011
  134 D1:ADF0 FF -  -  -  	.db %11111111
  135 D1:ADF1 F3 -  -  -  	.db %11110011
  136 D1:ADF2 CC -  -  -  	.db %11001100
  137 D1:ADF3 C0 -  -  -  	.db %11000000
  138 D1:ADF4 3F -  -  -  	.db %00111111
  139 D1:ADF5 54 32 -  -  	.db $54,$32
  140 D1:ADF7 C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 -  -  -  	.db %11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001
  141 D1:AE10 55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 	.db $55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22
  142 D1:AE34 -  -  -  -  	
  143 D1:AE34 -  -  -  -  	
  144 D1:AE34 -  -  -  -  	
  145 D1:AE34 -  -  -  -  testBGSpriteComp:
  146 D1:AE34 24 -  -  -  	.db %00100100;2bpc noalpha
  147 D1:AE35 08 08 -  -  	.db 8,8;8 wide 
  148 D1:AE37 23 45 -  -  	.db $23,$45;brgw
  149 D1:AE39 00 00 55 55 
              AA AA FF FF 	.db %00000000,%00000000,%01010101,%01010101,%10101010,%10101010,%11111111,%11111111
  150 D1:AE41 00 55 55 00 
              00 AA AA 00 	.db %00000000,%01010101,%01010101,%00000000,%00000000,%10101010,%10101010,%00000000
  151 D1:AE49 -  -  -  -  	
  152 D1:AE49 -  -  -  -  	
  153 D1:AE49 -  -  -  -  testBGSpriteComp2:
  154 D1:AE49 24 -  -  -  	.db %00100100;2bpc noalpha
  155 D1:AE4A 06 06 -  -  	.db 6,6;
  156 D1:AE4C 23 45 -  -  	.db $23,$45;brgw
  157 D1:AE4E 00 05 55 AA 
              AF FF -  -  	.db %00000000,%00000101,%01010101,%10101010,%10101111,%11111111
  158 D1:AE54 00 05 55 -  	.db %00000000,%00000101,%01010101
  159 D1:AE57 -  -  -  -  	
  160 D1:AE57 -  -  -  -  testBGSpriteComp3:
  161 D1:AE57 24 -  -  -  	.db %00100100;2bpc noalpha
  162 D1:AE58 06 01 -  -  	.db 6,1;
  163 D1:AE5A 23 45 -  -  	.db $23,$45;brgw
  164 D1:AE5C 00 00 -  -  	.db %00000000,%00000000
  165 D1:AE5E -  -  -  -  
  166 D1:AE5E -  -  -  -  	
  167 D1:AE5E -  -  -  -  	
  168 D1:AE5E -  -  -  -  	
  169 D1:AE5E -  -  -  -  ;FAST_SPRITE	
  170 D1:AE5E -  -  -  -  ;double pixel transparency, no gaps
  171 D1:AE5E -  -  -  -  ;.db height
  172 D1:AE5E -  -  -  -  ;.db num loops for num lines
  173 D1:AE5E -  -  -  -  ;.db to next ldir start, color length, data
  174 D1:AE5E -  -  -  -  
  175 D1:AE5E -  -  -  -  test_fast_sprite:;20x4px,complex
  176 D1:AE5E 04 -  -  -  	.db 4
  177 D1:AE5F 02 06 07 09 	.db 2,6,7,9
  178 D1:AE63 02 02 12 45 
              03 04 33 32 
              45 44 -  -  	.db 2,2,%00010010,%01000101,3,4,%00110011,%00110010,%01000101,%01000100 ;gap, length,    						XXBYWGXXXXXXRRBRWGGG
  179 D1:AE6D 97 02 21 21 
              01 02 35 35 
              01 01 43 01 
              01 35 -  -  	.db 151,2,%00100001,%00100001,1,2,%00110101,%00110101,1,1,%01000011,1,1,%00110101; 								XXYBYBXXWRWRXXRGXXWR
  180 D1:AE7B 96 0A 35 35 
              45 45 12 12 
              34 34 34 34 	.db 150,10,%00110101,%00110101,%01000101,%01000101,%00010010,%00010010,%00110100,%00110100,%00110100,%00110100; WRWRWGWGBYBYGRGRGRGR
  181 D1:AE87 98 05 55 11 
              22 33 44 01 
              02 44 53 -  	.db 152,5,%01010101,%00010001,%00100010,%00110011,%01000100,1,2,%01000100,%01010011;							XXXXWWYYBBRRGGXXGGRW
  182 D1:AE92 -  -  -  -  
  183 D1:AE92 -  -  -  -  
  184 D1:AE92 -  -  -  -  
  185 D1:AE92 -  -  -  -  ;COMPLEX_SPRITE
  186 D1:AE92 -  -  -  -  ;16 color, per pixel transparency, even or odd start
  187 D1:AE92 -  -  -  -  
  188 D1:AE92 -  -  -  -  
  189 D1:AE92 -  -  -  -  
  190 D1:AE92 -  -  -  -  
  191 D1:AE92 -  -  -  -  
  192 D1:AE92 -  -  -  -  
  193 D1:AE92 -  -  -  -  
  194 D1:AE92 -  -  -  -  
  195 D1:AE92 -  -  -  -  
  196 D1:AE92 -  -  -  -  
  197 D1:AE92 -  -  -  -  
  198 D1:AE92 -  -  -  -  
  199 D1:AE92 -  -  -  -  
  200 D1:AE92 -  -  -  -  
  201 D1:AE92 -  -  -  -  
  202 D1:AE92 -  -  -  -  
  203 D1:AE92 -  -  -  -  
  204 D1:AE92 -  -  -  -  
  205 D1:AE92 -  -  -  -  	
Listing for file "ascent.asm"
  388 D1:AE92 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:AE92 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:AE92 -  -  -  -  	;.dl lastSprite
    3 D1:AE92 -  -  -  -  	;.dl lastSpritecopy
    4 D1:AE92 -  -  -  -  	;.dl sprite2
    5 D1:AE92 -  -  -  -  	;.dl sprite3
    6 D1:AE92 -  -  -  -  
    7 D1:AE92 -  -  -  -  
    8 D1:AE92 -  -  -  -  
    9 D1:AE92 -  -  -  -  
   10 D1:AE92 -  -  -  -  bg_data_frame:
   11 D1:AE92 -  -  -  -  	;.db sprite data table pointer
   12 D1:AE92 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:AE92 -  -  -  -  	
   14 D1:AE92 -  -  -  -  
   15 D1:AE92 -  -  -  -  bg_sprite_pointers_1:
   16 D1:AE92 00 96 D4 -  	.dl testBG1
   17 D1:AE95 00 96 D4 -  	.dl testBG1;h = 7
   18 D1:AE98 A0 96 D4 -  	.dl testBG2;h = 5
   19 D1:AE9B 40 97 D4 -  	.dl testBG3;h = 0
   20 D1:AE9E E0 97 D4 -  	.dl testBG4
   21 D1:AEA1 -  -  -  -  
   22 D1:AEA1 -  -  -  -  bg_data_frame_0:
   23 D1:AEA1 92 AE D1 -  	.dl bg_sprite_pointers_1 
   24 D1:AEA4 C8 07 05 00 	.db 200,7,5,0
   25 D1:AEA8 -  -  -  -  	;upper 
   26 D1:AEA8 -  -  -  -  bg_data_frame_1:
   27 D1:AEA8 92 AE D1 -  	.dl bg_sprite_pointers_1
   28 D1:AEAB C8 07 05 01 	.db 200,7,5,1
   29 D1:AEAF 64 07 05 01 	.db 100,7,5,1
   30 D1:AEB3 08 07 05 01 	.db 8,7,5,1
   31 D1:AEB7 07 07 0A 01 	.db 7,7,10,1
   32 D1:AEBB 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:AEBF 05 07 14 01 	.db 5,7,20,1;X
   34 D1:AEC3 05 05 19 02 	.db 5,5,25,2
   35 D1:AEC7 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:AECB 03 05 23 02 	.db 3,5,35,2;X
   37 D1:AECF 00 05 28 02 	.db 0,5,40,2;X
   38 D1:AED3 00 00 2D 03 	.db 0,0,45,3
   39 D1:AED7 0A 00 32 03 	.db 10,0,50,3
   40 D1:AEDB 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:AEDF -  -  -  -  	
   42 D1:AEDF -  -  -  -  bg_data_frame_2:
   43 D1:AEDF 92 AE D1 -  	.dl bg_sprite_pointers_1
   44 D1:AEE2 FF 07 3C 01 	.db 255,7,60,1
   45 D1:AEE6 FE 07 41 01 	.db 254,7,65,1
   46 D1:AEEA 64 05 46 02 	.db 100,5,70,2
   47 D1:AEEE 64 00 4B 03 	.db 100,0,75,3
   48 D1:AEF2 32 07 50 00 	.db 50,7,80,0
   49 D1:AEF6 -  -  -  -  	
   50 D1:AEF6 -  -  -  -  	
Listing for file "ascent.asm"
  389 D1:AEF6 -  -  -  -  #include "spriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteDecompress.txt"
    1 D1:AEF6 -  -  -  -  
    2 D1:AEF6 -  -  -  -  
    3 D1:AEF6 -  -  -  -  ;hl = sprite data start, de = main data decompress location de' = loops/line data location
    4 D1:AEF6 -  -  -  -  sprite_decompress:
    5 D1:AEF6 3E D2 -  -  	ld a,%11010010;jp nc 
    6 D1:AEF8 32 EB AF D1 	ld (sdcomp_end_reached_flag),a;reset end reached flag
    7 D1:AEFC 3E 00 -  -  	ld a,0
    8 D1:AEFE 32 FB AF D1 	ld (sdcomp_loop_counter) ,a;reset loop counter
    9 D1:AF02 CD 0C B4 D1 	call sdcomp_reset_noalpha
   10 D1:AF06 -  -  -  -  ;set bpc mode 
   11 D1:AF06 CB 7E -  -  	bit 7,(hl)
   12 D1:AF08 C4 B8 B2 D1 	call nz,sdcomp_set_4bpp 
   13 D1:AF0C CB 76 -  -  	bit 6,(hl)
   14 D1:AF0E C4 0B B3 D1 	call nz,sdcomp_set_3bpp 
   15 D1:AF12 CB 6E -  -  	bit 5,(hl)
   16 D1:AF14 C4 5C B3 D1 	call nz,sdcomp_set_2bpp 
   17 D1:AF18 CB 66 -  -  	bit 4,(hl)
   18 D1:AF1A C4 A5 B3 D1 	call nz,sdcomp_set_1bpp 
   19 D1:AF1E CB 5E -  -  	bit 3,(hl)
   20 D1:AF20 C4 E4 B3 D1 	call nz,sdcomp_set_0bpp 
   21 D1:AF24 CB 56 -  -  	bit 2,(hl)
   22 D1:AF26 C4 FB B3 D1 	call nz,sdcomp_set_noalpha
   23 D1:AF2A 23 -  -  -  	inc hl
   24 D1:AF2B -  -  -  -  	
   25 D1:AF2B -  -  -  -  	
   26 D1:AF2B -  -  -  -  ;set zeroes btwn lines
   27 D1:AF2B 7E -  -  -  	ld a,(hl);width,in px
   28 D1:AF2C E5 -  -  -  	push hl 
   29 D1:AF2D 21 40 01 00 	ld hl,320
   30 D1:AF31 01 00 00 00 	ld bc,0
   31 D1:AF35 4F -  -  -  	ld c,a 
   32 D1:AF36 37 -  -  -  	scf 
   33 D1:AF37 3F -  -  -  	ccf 
   34 D1:AF38 ED 42 -  -  	sbc hl,bc;320 - width
   35 D1:AF3A 22 2D B1 D1 	ld (sdcomp_zeroes_between_lines),hl
   36 D1:AF3E E1 -  -  -  	pop hl 
   37 D1:AF3F 47 -  -  -  	ld b,a;width
   38 D1:AF40 08 -  -  -  	ex af,af' ;'
   39 D1:AF41 78 -  -  -  	ld a,b
   40 D1:AF42 32 61 B1 D1 	ld (sdcomp_sprite_width),a
   41 D1:AF46 08 -  -  -  	ex af,af' ;'
   42 D1:AF47 -  -  -  -  
   43 D1:AF47 -  -  -  -  	
   44 D1:AF47 37 -  -  -  	scf 
   45 D1:AF48 -  -  -  -  sdcomp_bg_sprite_1 .equ $
   46 D1:AF48 DA 55 AF D1 	jp c,sdcomp_bg_sprite_1_skip
   47 D1:AF4C -  -  -  -  	;a holds width 
   48 D1:AF4C CB 47 -  -  	bit 0,a ;round up a 
   49 D1:AF4E CA 53 AF D1 	jp z,sdcomp_bg_sprite_1_round_skip
   50 D1:AF52 3C -  -  -  	inc a 
   51 D1:AF53 -  -  -  -  sdcomp_bg_sprite_1_round_skip:
   52 D1:AF53 12 -  -  -  	ld (de),a ;load width 
   53 D1:AF54 13 -  -  -  	inc de
   54 D1:AF55 -  -  -  -  sdcomp_bg_sprite_1_skip:
   55 D1:AF55 -  -  -  -  
   56 D1:AF55 -  -  -  -  
   57 D1:AF55 -  -  -  -  
   58 D1:AF55 -  -  -  -  
   59 D1:AF55 -  -  -  -  
   60 D1:AF55 23 -  -  -  	inc hl;to height
   61 D1:AF56 7E -  -  -  	ld a,(hl);height
   62 D1:AF57 32 1B B1 D1 	ld (sdcomp_lines_remaining),a;load remaining lines
   63 D1:AF5B -  -  -  -  	
   64 D1:AF5B 37 -  -  -  	scf 
   65 D1:AF5C -  -  -  -  sdcomp_bg_sprite_2 .equ $
   66 D1:AF5C D2 62 AF D1 	jp nc,sdcomp_bg_sprite_2_skip
   67 D1:AF60 12 -  -  -  	ld (de),a;height
   68 D1:AF61 13 -  -  -  	inc de
   69 D1:AF62 -  -  -  -  sdcomp_bg_sprite_2_skip:
   70 D1:AF62 D5 -  -  -  	push de;loop/line data start 
   71 D1:AF63 D9 -  -  -  	exx;to shadow
   72 D1:AF64 D1 -  -  -  	pop de ;de' is loop/line data
   73 D1:AF65 D9 -  -  -  	exx
   74 D1:AF66 -  -  -  -  
   75 D1:AF66 -  -  -  -  ;find start of color data
   76 D1:AF66 23 -  -  -  	inc hl;alpha data start
   77 D1:AF67 E5 -  -  -  	push hl
   78 D1:AF68 -  -  -  -  	
   79 D1:AF68 37 -  -  -  	scf
   80 D1:AF69 -  -  -  -  sdcomp_no_alpha_1 .equ $
   81 D1:AF69 D2 82 AF D1 	jp nc, sdcomp_no_alpha_1_skip
   82 D1:AF6D E5 -  -  -  	push hl
   83 D1:AF6E 67 -  -  -  	ld h,a;height
   84 D1:AF6F 68 -  -  -  	ld l,b;width
   85 D1:AF70 ED 6C -  -  	mlt hl;number of pixels
   86 D1:AF72 2B -  -  -  	dec hl
   87 D1:AF73 CB 3C -  -  	srl h
   88 D1:AF75 CB 1D -  -  	rr l
   89 D1:AF77 CB 3C -  -  	srl h
   90 D1:AF79 CB 1D -  -  	rr l 
   91 D1:AF7B CB 3C -  -  	srl h 
   92 D1:AF7D CB 1D -  -  	rr l ;divide by 8
   93 D1:AF7F 23 -  -  -  	inc hl 
   94 D1:AF80 C1 -  -  -  	pop bc
   95 D1:AF81 09 -  -  -  	add hl,bc;hl holds start of color data
   96 D1:AF82 -  -  -  -  sdcomp_no_alpha_1_skip:
   97 D1:AF82 -  -  -  -  
   98 D1:AF82 -  -  -  -  	;HL POINTING TO COLOR DATA
   99 D1:AF82 -  -  -  -  
  100 D1:AF82 -  -  -  -  	
  101 D1:AF82 F5 -  -  -  	push af;save height
  102 D1:AF83 -  -  -  -  	
  103 D1:AF83 37 -  -  -  	scf 
  104 D1:AF84 -  -  -  -  sdcomp_get_indexed_color_1bpc .equ $ 
  105 D1:AF84 DA 8E AF D1 	jp c,sdcomp_get_indexed_color_1bpc_skip
  106 D1:AF88 7E -  -  -  	ld a,(hl);color data 
  107 D1:AF89 32 DE B1 D1 	ld (sdcomp_indexed_color_data),a 
  108 D1:AF8D 23 -  -  -  	inc hl 
  109 D1:AF8E -  -  -  -  sdcomp_get_indexed_color_1bpc_skip:
  110 D1:AF8E -  -  -  -  
  111 D1:AF8E 37 -  -  -  	scf 
  112 D1:AF8F -  -  -  -  sdcomp_get_indexed_color_2bpc .equ $ 
  113 D1:AF8F DA 99 AF D1 	jp c,sdcomp_get_indexed_color_2bpc_skip
  114 D1:AF93 7E -  -  -  	ld a,(hl);color data 
  115 D1:AF94 32 DF B1 D1 	ld (sdcomp_indexed_color_data+1),a 
  116 D1:AF98 23 -  -  -  	inc hl 
  117 D1:AF99 -  -  -  -  sdcomp_get_indexed_color_2bpc_skip:
  118 D1:AF99 -  -  -  -  
  119 D1:AF99 37 -  -  -  	scf 
  120 D1:AF9A -  -  -  -  sdcomp_get_indexed_color_3bpc .equ $ 
  121 D1:AF9A DA AA AF D1 	jp c,sdcomp_get_indexed_color_3bpc_skip
  122 D1:AF9E 7E -  -  -  	ld a,(hl);color data 
  123 D1:AF9F 32 E0 B1 D1 	ld (sdcomp_indexed_color_data+2),a 
  124 D1:AFA3 23 -  -  -  	inc hl 
  125 D1:AFA4 7E -  -  -  	ld a,(hl);color data 
  126 D1:AFA5 32 E1 B1 D1 	ld (sdcomp_indexed_color_data+3),a 
  127 D1:AFA9 23 -  -  -  	inc hl 
  128 D1:AFAA -  -  -  -  sdcomp_get_indexed_color_3bpc_skip:
  129 D1:AFAA -  -  -  -  
  130 D1:AFAA F1 -  -  -  	pop af
  131 D1:AFAB EB -  -  -  	ex de,hl
  132 D1:AFAC 01 00 00 00 	ld bc,0
  133 D1:AFB0 4F -  -  -  	ld c,a;height 
  134 D1:AFB1 09 -  -  -  	add hl,bc
  135 D1:AFB2 EB -  -  -  	ex de,hl;de points to data write location
  136 D1:AFB3 -  -  -  -  	
  137 D1:AFB3 -  -  -  -  	
  138 D1:AFB3 D9 -  -  -  	exx;to shadow 
  139 D1:AFB4 E1 -  -  -  	pop hl;alpha data	
  140 D1:AFB5 -  -  -  -  
  141 D1:AFB5 -  -  -  -  	;HL IS POINTING TO ALPHA DATA
  142 D1:AFB5 0E 80 -  -  	ld c,%10000000;alpha mask
  143 D1:AFB7 D9 -  -  -  	exx;out 
  144 D1:AFB8 0E 80 -  -  	ld c,%10000000;color mask
  145 D1:AFBA -  -  -  -  	
  146 D1:AFBA -  -  -  -  	
  147 D1:AFBA -  -  -  -  	
  148 D1:AFBA 37 -  -  -  	scf 
  149 D1:AFBB -  -  -  -  sdcomp_flip_1 .equ $
  150 D1:AFBB DA DB AF D1 	jp c,sdcomp_find_gap_length;continue if no flip
  151 D1:AFBF -  -  -  -  
  152 D1:AFBF D9 -  -  -  	exx;to shadow 
  153 D1:AFC0 2B -  -  -  	dec hl;dec alpha pointer
  154 D1:AFC1 22 FF B1 D1 	ld (sdcomp_alpha_data_line_end_byte),hl 
  155 D1:AFC5 3E 01 -  -  	ld a,%00000001;alpha mask
  156 D1:AFC7 32 03 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a 
  157 D1:AFCB D9 -  -  -  	exx ;out 
  158 D1:AFCC 2B -  -  -  	dec hl;dec color pointer
  159 D1:AFCD 22 F8 B1 D1 	ld (sdcomp_color_data_line_end_byte),hl 
  160 D1:AFD1 3E 01 -  -  	ld a,%00000001;color mask
  161 D1:AFD3 32 FC B1 D1 	ld (sdcomp_color_data_line_end_mask),a 
  162 D1:AFD7 -  -  -  -  	
  163 D1:AFD7 -  -  -  -  
  164 D1:AFD7 -  -  -  -  	
  165 D1:AFD7 -  -  -  -  	
  166 D1:AFD7 CD F7 B1 D1 	call sdcomp_traverse_line_data	
  167 D1:AFDB -  -  -  -  
  168 D1:AFDB -  -  -  -  ;START OF LOOP===================================================================================================
  169 D1:AFDB -  -  -  -  ;add amount to get from ending pixels to first nonzero pair
  170 D1:AFDB -  -  -  -  sdcomp_find_gap_length:
  171 D1:AFDB 37 -  -  -  	scf 
  172 D1:AFDC -  -  -  -  sdcomp_bg_sprite_3 .equ $
  173 D1:AFDC D2 67 B4 D1 	jp nc,sdcomp_bg_sprite_routine
  174 D1:AFE0 -  -  -  -  	
  175 D1:AFE0 D9 -  -  -  	exx ;toshadow
  176 D1:AFE1 06 00 -  -  	ld b,0;pairs found, always < 255 
  177 D1:AFE3 -  -  -  -  sdcomp_add_1_gap_length .equ $
  178 D1:AFE3 00 -  -  -  	nop
  179 D1:AFE4 3E 00 -  -  	ld a,0;nop
  180 D1:AFE6 32 E3 AF D1 	ld (sdcomp_add_1_gap_length),a
  181 D1:AFEA -  -  -  -  sdcomp_find_gap_length_loop:
  182 D1:AFEA -  -  -  -  	
  183 D1:AFEA 37 -  -  -  	scf 
  184 D1:AFEB -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  185 D1:AFEB D2 F0 B1 D1 	jp nc,sdcomp_end
  186 D1:AFEF -  -  -  -  
  187 D1:AFEF CD C8 B0 D1 	call sdcomp_get_next_alpha_pair
  188 D1:AFF3 -  -  -  -  	;a holds alpha data 
  189 D1:AFF3 04 -  -  -  	inc b
  190 D1:AFF4 B7 -  -  -  	or a 
  191 D1:AFF5 CA EA AF D1 	jp z,sdcomp_find_gap_length_loop
  192 D1:AFF9 -  -  -  -  	;END OF LOOP, B HOLDS NUMBER OF 00 PAIRS  +1
  193 D1:AFF9 -  -  -  -  		
  194 D1:AFF9 -  -  -  -  	
  195 D1:AFF9 F5 -  -  -  	push af;saves leading pixel alpha data
  196 D1:AFFA -  -  -  -  	;inc loop counter 
  197 D1:AFFA -  -  -  -  sdcomp_loop_counter .equ $ + 1
  198 D1:AFFA 3E 00 -  -  	ld a,0;inc number of loops
  199 D1:AFFC 3C -  -  -  	inc a 
  200 D1:AFFD 32 FB AF D1 	ld (sdcomp_loop_counter),a
  201 D1:B001 -  -  -  -  	
  202 D1:B001 78 -  -  -  	ld a,b 
  203 D1:B002 D9 -  -  -  	exx;out of shadow 
  204 D1:B003 12 -  -  -  	ld (de),a;GAP LENGTH 
  205 D1:B004 13 -  -  -  	inc de 
  206 D1:B005 D9 -  -  -  	exx;into shadow 	
  207 D1:B006 -  -  -  -  	
  208 D1:B006 F1 -  -  -  	pop af
  209 D1:B007 37 -  -  -  	scf
  210 D1:B008 -  -  -  -  sdcomp_fast_sprite_1 .equ $ 
  211 D1:B008 D2 3B B0 D1 	jp nc,sdcomp_ldir_start ;jp c if fast move to ldir loop 
  212 D1:B00C -  -  -  -  
  213 D1:B00C -  -  -  -  ;LEADING PIXELS
  214 D1:B00C -  -  -  -  	;a holds alpha data after gap, 11 01 10
  215 D1:B00C D9 -  -  -  	exx;out of shadow
  216 D1:B00D D5 -  -  -  	push de 
  217 D1:B00E -  -  -  -  	
  218 D1:B00E 47 -  -  -  	ld b,a;save for later
  219 D1:B00F CB 67 -  -  	bit 4,a ;check if first pixel has color 
  220 D1:B011 3E 00 -  -  	ld a,0
  221 D1:B013 16 FF -  -  	ld d,%11111111;assuming no colors 
  222 D1:B015 CA 1F B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  223 D1:B019 -  -  -  -  	;has first color
  224 D1:B019 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  225 D1:B01B CD EB B1 D1 	call sdcomp_get_next_color_ending_nibble
  226 D1:B01F -  -  -  -  sdcomp_leading_pixel_first_skip:
  227 D1:B01F -  -  -  -  	;a is either $00 or $0color1
  228 D1:B01F -  -  -  -  	
  229 D1:B01F 1E FF -  -  	ld e,%11111111;assuming no colors
  230 D1:B021 -  -  -  -  	
  231 D1:B021 CB 40 -  -  	bit 0,b;check second pixel alpha
  232 D1:B023 47 -  -  -  	ld b,a;save for later 
  233 D1:B024 3E 00 -  -  	ld a,0
  234 D1:B026 CA 30 B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  235 D1:B02A -  -  -  -  	;has second color 
  236 D1:B02A CD E2 B1 D1 	call sdcomp_get_next_color_leading_nibble
  237 D1:B02E -  -  -  -  	;a = color2 0 
  238 D1:B02E 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  239 D1:B030 -  -  -  -  	
  240 D1:B030 -  -  -  -  sdcomp_leading_pixel_second_skip:
  241 D1:B030 -  -  -  -  	;a is either 00 or c2 0 
  242 D1:B030 -  -  -  -  	;b is either 00 or 0 c1 
  243 D1:B030 B0 -  -  -  	or b 
  244 D1:B031 47 -  -  -  	ld b,a;final color data
  245 D1:B032 7A -  -  -  	ld a,d 
  246 D1:B033 A3 -  -  -  	and e ;final mask data 
  247 D1:B034 -  -  -  -  	
  248 D1:B034 D1 -  -  -  	pop de;return to pointer 
  249 D1:B035 -  -  -  -  	
  250 D1:B035 12 -  -  -  	ld (de),a;write mask data 
  251 D1:B036 13 -  -  -  	inc de 
  252 D1:B037 78 -  -  -  	ld a,b;color data 
  253 D1:B038 12 -  -  -  	ld (de),a;write color data 
  254 D1:B039 13 -  -  -  	inc de 
  255 D1:B03A D9 -  -  -  	exx;into shadow 
  256 D1:B03B -  -  -  -  	
  257 D1:B03B -  -  -  -  sdcomp_ldir_start:
  258 D1:B03B -  -  -  -  ;CHECK FOR LDIR 
  259 D1:B03B 06 00 -  -  	ld b,0;pairs found 
  260 D1:B03D -  -  -  -  sdcomp_ldir_loop:
  261 D1:B03D CD C8 B0 D1 	call sdcomp_get_next_alpha_pair
  262 D1:B041 04 -  -  -  	inc b
  263 D1:B042 EE FF -  -  	xor %11111111;flip bits
  264 D1:B044 CA 3D B0 D1 	jp z,sdcomp_ldir_loop;alpha data was 11
  265 D1:B048 -  -  -  -  	;b holds pairs found+1
  266 D1:B048 -  -  -  -  	
  267 D1:B048 37 -  -  -  	scf 
  268 D1:B049 -  -  -  -  sdcomp_fast_sprite_2 .equ $
  269 D1:B049 D2 66 B0 D1 	jp nc,sdcomp_ldir_write
  270 D1:B04D -  -  -  -  	;fast mode 
  271 D1:B04D -  -  -  -  	;b holds ldir length 
  272 D1:B04D -  -  -  -  	
  273 D1:B04D -  -  -  -  sdcomp_ldir_not_fast:
  274 D1:B04D EE FF -  -  	xor %11111111;flip back
  275 D1:B04F -  -  -  -  	;a holds first non 11 pair 
  276 D1:B04F 05 -  -  -  	dec b ;b holds pairs found
  277 D1:B050 CA 75 B0 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  278 D1:B054 B7 -  -  -  	or a
  279 D1:B055 C2 66 B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  280 D1:B059 -  -  -  -  	;ends in 00,ending pixels will be 11 
  281 D1:B059 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  282 D1:B059 3E 04 -  -  	ld a,%00000100;inc b 
  283 D1:B05B 32 E3 AF D1 	ld (sdcomp_add_1_gap_length),a 
  284 D1:B05F 3E FF -  -  	ld a,$ff;ending pixels 11
  285 D1:B061 -  -  -  -  	
  286 D1:B061 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  287 D1:B062 CA 75 B0 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  288 D1:B066 -  -  -  -  	;b holds ldir length 
  289 D1:B066 -  -  -  -  	
  290 D1:B066 -  -  -  -  ;b holds ldir length, a holds ending pixels
  291 D1:B066 -  -  -  -  sdcomp_ldir_write:
  292 D1:B066 F5 -  -  -  	push af;save ending pixels
  293 D1:B067 78 -  -  -  	ld a,b
  294 D1:B068 D9 -  -  -  	exx ;out 
  295 D1:B069 12 -  -  -  	ld (de),a;write ldir length
  296 D1:B06A 13 -  -  -  	inc de 
  297 D1:B06B CD B4 B0 D1 	call sdcomp_write_ldir_data_loop
  298 D1:B06F D9 -  -  -  	exx ;toshadow
  299 D1:B070 F1 -  -  -  	pop af;return ending pixels
  300 D1:B071 -  -  -  -  	
  301 D1:B071 -  -  -  -  	
  302 D1:B071 C3 7D B0 D1 	jp sdcomp_write_end_pixels
  303 D1:B075 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  304 D1:B075 F5 -  -  -  	push af;save end pixels
  305 D1:B076 -  -  -  -  	
  306 D1:B076 D9 -  -  -  	exx;out of shadow
  307 D1:B077 3E 00 -  -  	ld a,0
  308 D1:B079 12 -  -  -  	ld (de),a 
  309 D1:B07A 13 -  -  -  	inc de 
  310 D1:B07B D9 -  -  -  	exx 
  311 D1:B07C F1 -  -  -  	pop af;return ending pixels
  312 D1:B07D -  -  -  -  
  313 D1:B07D -  -  -  -  
  314 D1:B07D -  -  -  -  ;WRITE ENDING PIXELS 
  315 D1:B07D -  -  -  -  
  316 D1:B07D -  -  -  -  sdcomp_write_end_pixels:;a holds end pixels
  317 D1:B07D -  -  -  -  	
  318 D1:B07D D9 -  -  -  	exx;out of shadow
  319 D1:B07E -  -  -  -  	
  320 D1:B07E 37 -  -  -  	scf 
  321 D1:B07F -  -  -  -  sdcomp_fast_sprite_3 .equ $
  322 D1:B07F D2 DB AF D1 	jp nc,sdcomp_find_gap_length;if fast, back to gap length
  323 D1:B083 -  -  -  -  	
  324 D1:B083 -  -  -  -  	
  325 D1:B083 D5 -  -  -  	push de 
  326 D1:B084 -  -  -  -  	
  327 D1:B084 47 -  -  -  	ld b,a;save for later
  328 D1:B085 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  329 D1:B087 3E 00 -  -  	ld a,0
  330 D1:B089 16 FF -  -  	ld d,%11111111;assuming no colors 
  331 D1:B08B CA 95 B0 D1 	jp z,sdcomp_ending_pixel_first_skip
  332 D1:B08F -  -  -  -  	;has first color
  333 D1:B08F 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  334 D1:B091 CD EB B1 D1 	call sdcomp_get_next_color_ending_nibble
  335 D1:B095 -  -  -  -  sdcomp_ending_pixel_first_skip:
  336 D1:B095 -  -  -  -  	;a is either $00 or $0color1
  337 D1:B095 -  -  -  -  	
  338 D1:B095 1E FF -  -  	ld e,%11111111;assuming no colors
  339 D1:B097 -  -  -  -  	
  340 D1:B097 CB 40 -  -  	bit 0,b;check second pixel alpha
  341 D1:B099 47 -  -  -  	ld b,a;save for later 
  342 D1:B09A 3E 00 -  -  	ld a,0
  343 D1:B09C CA A6 B0 D1 	jp z,sdcomp_ending_pixel_second_skip;
  344 D1:B0A0 -  -  -  -  	;has second color 
  345 D1:B0A0 CD E2 B1 D1 	call sdcomp_get_next_color_leading_nibble
  346 D1:B0A4 -  -  -  -  	;a = color2 0 
  347 D1:B0A4 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  348 D1:B0A6 -  -  -  -  	
  349 D1:B0A6 -  -  -  -  sdcomp_ending_pixel_second_skip:
  350 D1:B0A6 -  -  -  -  	;a is either 00 or c2 0 
  351 D1:B0A6 -  -  -  -  	;b is either 00 or 0 c1 
  352 D1:B0A6 B0 -  -  -  	or b 
  353 D1:B0A7 47 -  -  -  	ld b,a;final color data
  354 D1:B0A8 7A -  -  -  	ld a,d 
  355 D1:B0A9 A3 -  -  -  	and e ;final mask data 
  356 D1:B0AA -  -  -  -  	
  357 D1:B0AA D1 -  -  -  	pop de;return to pointer 
  358 D1:B0AB -  -  -  -  	
  359 D1:B0AB 12 -  -  -  	ld (de),a;write mask data 
  360 D1:B0AC 13 -  -  -  	inc de 
  361 D1:B0AD 78 -  -  -  	ld a,b;color data 
  362 D1:B0AE 12 -  -  -  	ld (de),a;write color data 
  363 D1:B0AF 13 -  -  -  	inc de 
  364 D1:B0B0 -  -  -  -  	
  365 D1:B0B0 -  -  -  -  	
  366 D1:B0B0 C3 DB AF D1 	jp sdcomp_find_gap_length;BACK TO START
  367 D1:B0B4 -  -  -  -  	
  368 D1:B0B4 -  -  -  -  	
  369 D1:B0B4 -  -  -  -  
  370 D1:B0B4 -  -  -  -  
  371 D1:B0B4 -  -  -  -  
  372 D1:B0B4 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  373 D1:B0B4 -  -  -  -  sdcomp_write_ldir_data_loop:
  374 D1:B0B4 CD EB B1 D1 	call sdcomp_get_next_color_ending_nibble	
  375 D1:B0B8 47 -  -  -  	ld b,a;first pixel
  376 D1:B0B9 CD E2 B1 D1 	call sdcomp_get_next_color_leading_nibble
  377 D1:B0BD B0 -  -  -  	or b
  378 D1:B0BE -  -  -  -  	
  379 D1:B0BE -  -  -  -  	
  380 D1:B0BE 12 -  -  -  	ld (de),a;write color data
  381 D1:B0BF 13 -  -  -  	inc de
  382 D1:B0C0 D9 -  -  -  	exx;to shadow
  383 D1:B0C1 05 -  -  -  	dec b;ldir length counter
  384 D1:B0C2 D9 -  -  -  	exx
  385 D1:B0C3 C2 B4 B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  386 D1:B0C7 C9 -  -  -  	ret
  387 D1:B0C8 -  -  -  -  	
  388 D1:B0C8 -  -  -  -  	
  389 D1:B0C8 -  -  -  -  	
  390 D1:B0C8 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  391 D1:B0C8 -  -  -  -  sdcomp_get_next_alpha_pair:
  392 D1:B0C8 CD F1 B0 D1 	call sdcomp_get_next_alpha_bit
  393 D1:B0CC B7 -  -  -  	or a 
  394 D1:B0CD CA D7 B0 D1 	jp z,sdcomp_get_next_alpha_pair0
  395 D1:B0D1 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  396 D1:B0D3 C3 D9 B0 D1 	jp sdcomp_get_next_alpha_pair1
  397 D1:B0D7 -  -  -  -  sdcomp_get_next_alpha_pair0:
  398 D1:B0D7 3E 00 -  -  	ld a,0
  399 D1:B0D9 -  -  -  -  sdcomp_get_next_alpha_pair1:
  400 D1:B0D9 32 EF B0 D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  401 D1:B0DD -  -  -  -  	
  402 D1:B0DD CD F1 B0 D1 	call sdcomp_get_next_alpha_bit
  403 D1:B0E1 B7 -  -  -  	or a 
  404 D1:B0E2 CA EC B0 D1 	jp z,sdcomp_get_next_alpha_pair2
  405 D1:B0E6 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  406 D1:B0E8 C3 EE B0 D1 	jp sdcomp_get_next_alpha_pair3
  407 D1:B0EC -  -  -  -  sdcomp_get_next_alpha_pair2:
  408 D1:B0EC 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  409 D1:B0EE -  -  -  -  sdcomp_get_next_alpha_pair3:	
  410 D1:B0EE -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  411 D1:B0EE F6 00 -  -  	or 0;AND WITH FIRST BIT 
  412 D1:B0F0 -  -  -  -  	
  413 D1:B0F0 C9 -  -  -  	ret 
  414 D1:B0F1 -  -  -  -  
  415 D1:B0F1 -  -  -  -  
  416 D1:B0F1 -  -  -  -  ;in shadow
  417 D1:B0F1 -  -  -  -  sdcomp_get_next_alpha_bit:
  418 D1:B0F1 -  -  -  -  	
  419 D1:B0F1 37 -  -  -  	scf
  420 D1:B0F2 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  421 D1:B0F2 DA FF B0 D1 	jp c,sdcomp_bit_offset_skip
  422 D1:B0F6 3E DA -  -  	ld a,%11011010;jp c 
  423 D1:B0F8 32 F2 B0 D1 	ld (sdcomp_bit_offset),a
  424 D1:B0FC 3E 00 -  -  	ld a,0
  425 D1:B0FE C9 -  -  -  	ret ;return 0 first bit
  426 D1:B0FF -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  427 D1:B0FF -  -  -  -  	;CHECKS IF OUTSIDE OF SPRITE,VIRTUAL 0s
  428 D1:B0FF 08 -  -  -  	ex af,af' ;'
  429 D1:B100 B7 -  -  -  	or a
  430 D1:B101 CA 38 B1 D1 	jp z,sdcomp_line_end
  431 D1:B105 08 -  -  -  	ex af,af' ;'
  432 D1:B106 -  -  -  -  
  433 D1:B106 -  -  -  -  	;LOAD NEXT BIT
  434 D1:B106 -  -  -  -  	
  435 D1:B106 7E -  -  -  	ld a,(hl)
  436 D1:B107 A1 -  -  -  	and c 
  437 D1:B108 CD 66 B1 D1 	call sdcomp_next_in_bitstream;incs bitstream
  438 D1:B10C -  -  -  -  	
  439 D1:B10C 37 -  -  -  	scf 
  440 D1:B10D -  -  -  -  sdcomp_no_alpha_2 .equ $
  441 D1:B10D DA 13 B1 D1 	jp c,sdcomp_no_alpha_skip
  442 D1:B111 3E 01 -  -  	ld a,1
  443 D1:B113 -  -  -  -  sdcomp_no_alpha_skip:
  444 D1:B113 -  -  -  -  	
  445 D1:B113 -  -  -  -  	
  446 D1:B113 -  -  -  -  	;DEC WIDTH COUNTER
  447 D1:B113 08 -  -  -  	ex af,af' ;';to shadow
  448 D1:B114 3D -  -  -  	dec a;dec width counter
  449 D1:B115 C2 36 B1 D1 	jp nz,sdcomp_setup_line_gap_skip
  450 D1:B119 -  -  -  -  	
  451 D1:B119 -  -  -  -  	;END OF LINE REACHED, have just read alpha last bit of line
  452 D1:B119 -  -  -  -  	
  453 D1:B119 -  -  -  -  	;AT LINE END,WRITE LOOPS/LINE DATA
  454 D1:B119 F5 -  -  -  	push af;push shadow a 
  455 D1:B11A -  -  -  -  	;DEC NUMBER LINES REMAINING
  456 D1:B11A -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  457 D1:B11A 3E 00 -  -  	ld a,0
  458 D1:B11C 3D -  -  -  	dec a 
  459 D1:B11D 32 1B B1 D1 	ld (sdcomp_lines_remaining),a
  460 D1:B121 C2 2B B1 D1 	jp nz,sdcomp_set_end_flag_skip
  461 D1:B125 -  -  -  -  	;end of last line reached 
  462 D1:B125 3E DA -  -  	ld a,%11011010;jp c
  463 D1:B127 32 EB AF D1 	ld (sdcomp_end_reached_flag) , a
  464 D1:B12B -  -  -  -  sdcomp_set_end_flag_skip:
  465 D1:B12B -  -  -  -  	;SET UP NUMBER OF VIRTUAL ZEROES
  466 D1:B12B E5 -  -  -  	push hl
  467 D1:B12C -  -  -  -  sdcomp_zeroes_between_lines .equ $ + 1 
  468 D1:B12C 21 00 00 00 	ld hl,0;320-width
  469 D1:B130 22 3B B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  470 D1:B134 E1 -  -  -  	pop hl
  471 D1:B135 F1 -  -  -  	pop af 
  472 D1:B136 -  -  -  -  	
  473 D1:B136 -  -  -  -  	
  474 D1:B136 -  -  -  -  sdcomp_setup_line_gap_skip:
  475 D1:B136 08 -  -  -  	ex af,af' ;';out of shadow
  476 D1:B137 C9 -  -  -  	ret;A HOLDS 0 OR NOT 0
  477 D1:B138 -  -  -  -  	
  478 D1:B138 -  -  -  -  	
  479 D1:B138 -  -  -  -  	;IF OUTSIDE OF SPRITE,RETURN VIRTUAL 0
  480 D1:B138 -  -  -  -  sdcomp_line_end:
  481 D1:B138 08 -  -  -  	ex af,af' ;';out of shadow keep a' at 0 until next line start reached 
  482 D1:B139 E5 -  -  -  	push hl
  483 D1:B13A -  -  -  -  	;DEC REMAINING ZEROES
  484 D1:B13A -  -  -  -  sdcomp_remaining_zeroes_between_lines .equ $ + 1 
  485 D1:B13A 21 00 00 00 	ld hl,0;320 - width 
  486 D1:B13E 2B -  -  -  	dec hl
  487 D1:B13F 22 3B B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  488 D1:B143 7D -  -  -  	ld a,l
  489 D1:B144 B4 -  -  -  	or h
  490 D1:B145 E1 -  -  -  	pop hl
  491 D1:B146 CA 4D B1 D1 	jp z,sdcomp_line_gap_end;IF END OF VIRTUAL ZEROES
  492 D1:B14A 3E 00 -  -  	ld a,0
  493 D1:B14C C9 -  -  -  	ret;return 0
  494 D1:B14D -  -  -  -  	
  495 D1:B14D -  -  -  -  sdcomp_line_gap_end:
  496 D1:B14D -  -  -  -  	
  497 D1:B14D 37 -  -  -  	scf 
  498 D1:B14E -  -  -  -  sdcomp_bg_sprite_4 .equ $ 
  499 D1:B14E D2 58 B1 D1 	jp nc,sdcomp_bg_sprite_4_skip
  500 D1:B152 -  -  -  -  	
  501 D1:B152 3A FB AF D1 	ld a,(sdcomp_loop_counter)
  502 D1:B156 12 -  -  -  	ld (de),a;write loops per line data
  503 D1:B157 13 -  -  -  	inc de
  504 D1:B158 -  -  -  -  sdcomp_bg_sprite_4_skip:
  505 D1:B158 -  -  -  -  	
  506 D1:B158 D9 -  -  -  	exx;out
  507 D1:B159 -  -  -  -  
  508 D1:B159 37 -  -  -  	scf
  509 D1:B15A -  -  -  -  sdcomp_flip_7 .equ $ ;call c 
  510 D1:B15A D4 F7 B1 D1 	call nc,sdcomp_traverse_line_data
  511 D1:B15E -  -  -  -  
  512 D1:B15E D9 -  -  -  	exx ;in
  513 D1:B15F -  -  -  -  	
  514 D1:B15F 08 -  -  -  	ex af,af' ;';to shadow
  515 D1:B160 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  516 D1:B160 3E 00 -  -  	ld a,0;ld shadow a with width
  517 D1:B162 08 -  -  -  	ex af,af' ;';out of shadow
  518 D1:B163 3E 00 -  -  	ld a,0;ret 0
  519 D1:B165 C9 -  -  -  	ret
  520 D1:B166 -  -  -  -  
  521 D1:B166 -  -  -  -  
  522 D1:B166 -  -  -  -  
  523 D1:B166 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
  524 D1:B166 -  -  -  -  sdcomp_next_in_bitstream:
  525 D1:B166 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
  526 D1:B166 CB 09 -  -  	rrc c;rlc flip
  527 D1:B168 D0 -  -  -  	ret nc
  528 D1:B169 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
  529 D1:B169 23 -  -  -  	inc hl;dec hl flip
  530 D1:B16A C9 -  -  -  	ret
  531 D1:B16B -  -  -  -  
  532 D1:B16B -  -  -  -  
  533 D1:B16B -  -  -  -  
  534 D1:B16B -  -  -  -  
  535 D1:B16B -  -  -  -  
  536 D1:B16B -  -  -  -  
  537 D1:B16B -  -  -  -  ;bit orders
  538 D1:B16B -  -  -  -  ;	noflip   flip 
  539 D1:B16B -  -  -  -  ;4bpp 3210 	 0123
  540 D1:B16B -  -  -  -  ;3bpp 210	 012
  541 D1:B16B -  -  -  -  ;2bpp 10	 01
  542 D1:B16B -  -  -  -  ;1bpp 0		 0
  543 D1:B16B -  -  -  -  
  544 D1:B16B -  -  -  -  
  545 D1:B16B -  -  -  -  ;not in shadow,returns a=0000color
  546 D1:B16B -  -  -  -  sdcomp_get_color_data:
  547 D1:B16B D5 -  -  -  	push de 
  548 D1:B16C 1E 00 -  -  	ld e,0
  549 D1:B16E -  -  -  -  	
  550 D1:B16E 37 -  -  -  	scf
  551 D1:B16F -  -  -  -  sdcomp_0bpc .equ $ 
  552 D1:B16F D2 B9 B1 D1 	jp nc,sdcomp_get_color_from_index
  553 D1:B173 -  -  -  -  	
  554 D1:B173 7E -  -  -  	ld a,(hl)
  555 D1:B174 A1 -  -  -  	and c 
  556 D1:B175 CD 66 B1 D1 	call sdcomp_next_in_bitstream
  557 D1:B179 B7 -  -  -  	or a
  558 D1:B17A CA 80 B1 D1 	jp z,sdcomp_get_color_data_set_skip_1
  559 D1:B17E -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  560 D1:B17E CB C3 -  -  	set 0,e 
  561 D1:B180 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  562 D1:B180 -  -  -  -  	
  563 D1:B180 37 -  -  -  	scf
  564 D1:B181 -  -  -  -  sdcomp_1bpc .equ $
  565 D1:B181 D2 B9 B1 D1 	jp nc,sdcomp_get_color_from_index
  566 D1:B185 -  -  -  -  	
  567 D1:B185 -  -  -  -  	
  568 D1:B185 7E -  -  -  	ld a,(hl)
  569 D1:B186 A1 -  -  -  	and c 
  570 D1:B187 CD 66 B1 D1 	call sdcomp_next_in_bitstream
  571 D1:B18B B7 -  -  -  	or a
  572 D1:B18C CA 92 B1 D1 	jp z,sdcomp_get_color_data_set_skip_2
  573 D1:B190 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  574 D1:B190 CB CB -  -  	set 1,e 
  575 D1:B192 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  576 D1:B192 -  -  -  -  	
  577 D1:B192 37 -  -  -  	scf
  578 D1:B193 -  -  -  -  sdcomp_2bpc .equ $
  579 D1:B193 D2 B9 B1 D1 	jp nc,sdcomp_get_color_from_index
  580 D1:B197 -  -  -  -  	
  581 D1:B197 7E -  -  -  	ld a,(hl)
  582 D1:B198 A1 -  -  -  	and c 
  583 D1:B199 CD 66 B1 D1 	call sdcomp_next_in_bitstream
  584 D1:B19D B7 -  -  -  	or a
  585 D1:B19E CA A4 B1 D1 	jp z,sdcomp_get_color_data_set_skip_3
  586 D1:B1A2 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  587 D1:B1A2 CB D3 -  -  	set 2,e 
  588 D1:B1A4 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  589 D1:B1A4 -  -  -  -  	
  590 D1:B1A4 37 -  -  -  	scf
  591 D1:B1A5 -  -  -  -  sdcomp_3bpc .equ $
  592 D1:B1A5 D2 B9 B1 D1 	jp nc,sdcomp_get_color_from_index	
  593 D1:B1A9 -  -  -  -  
  594 D1:B1A9 7E -  -  -  	ld a,(hl)
  595 D1:B1AA A1 -  -  -  	and c 
  596 D1:B1AB CD 66 B1 D1 	call sdcomp_next_in_bitstream
  597 D1:B1AF B7 -  -  -  	or a
  598 D1:B1B0 CA B6 B1 D1 	jp z,sdcomp_get_color_data_set_skip_4
  599 D1:B1B4 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  600 D1:B1B4 CB DB -  -  	set 3,e 
  601 D1:B1B6 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  602 D1:B1B6 -  -  -  -  ;4bpp, interpret as color data 
  603 D1:B1B6 7B -  -  -  	ld a,e 
  604 D1:B1B7 D1 -  -  -  	pop de 
  605 D1:B1B8 C9 -  -  -  	ret 
  606 D1:B1B9 -  -  -  -  
  607 D1:B1B9 -  -  -  -  sdcomp_get_color_from_index:
  608 D1:B1B9 E5 -  -  -  	push hl 
  609 D1:B1BA C5 -  -  -  	push bc 
  610 D1:B1BB 01 00 00 00 	ld bc,0
  611 D1:B1BF 21 DE B1 D1 	ld hl,sdcomp_indexed_color_data
  612 D1:B1C3 4B -  -  -  	ld c,e ;index number
  613 D1:B1C4 CB 39 -  -  	srl c;div by 2
  614 D1:B1C6 09 -  -  -  	add hl,bc;add index
  615 D1:B1C7 7E -  -  -  	ld a,(hl)
  616 D1:B1C8 CB 43 -  -  	bit 0,e;check lsb
  617 D1:B1CA CA D4 B1 D1 	jp z,sdcomp_get_color_from_index_and_msn
  618 D1:B1CE E6 0F -  -  	and %00001111;a holds 0000color
  619 D1:B1D0 C1 -  -  -  	pop bc 
  620 D1:B1D1 E1 -  -  -  	pop hl 
  621 D1:B1D2 D1 -  -  -  	pop de 
  622 D1:B1D3 C9 -  -  -  	ret 
  623 D1:B1D4 -  -  -  -  	
  624 D1:B1D4 -  -  -  -  sdcomp_get_color_from_index_and_msn:
  625 D1:B1D4 E6 F0 -  -  	and %11110000
  626 D1:B1D6 0F -  -  -  	rrca 
  627 D1:B1D7 0F -  -  -  	rrca 
  628 D1:B1D8 0F -  -  -  	rrca 
  629 D1:B1D9 0F -  -  -  	rrca ;a holds 0000colro
  630 D1:B1DA C1 -  -  -  	pop bc 
  631 D1:B1DB E1 -  -  -  	pop hl 
  632 D1:B1DC D1 -  -  -  	pop de 
  633 D1:B1DD C9 -  -  -  	ret
  634 D1:B1DE -  -  -  -  	
  635 D1:B1DE -  -  -  -  sdcomp_indexed_color_data:;4bpc
  636 D1:B1DE 00 00 00 00 	.db 0,0,0,0
  637 D1:B1E2 -  -  -  -  
  638 D1:B1E2 -  -  -  -  
  639 D1:B1E2 -  -  -  -  
  640 D1:B1E2 -  -  -  -  
  641 D1:B1E2 -  -  -  -  
  642 D1:B1E2 -  -  -  -  ;not in shadow, returns a = color0000
  643 D1:B1E2 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  644 D1:B1E2 CD 6B B1 D1 	call sdcomp_get_color_data
  645 D1:B1E6 0F -  -  -  	rrca 
  646 D1:B1E7 0F -  -  -  	rrca 
  647 D1:B1E8 0F -  -  -  	rrca 
  648 D1:B1E9 0F -  -  -  	rrca
  649 D1:B1EA C9 -  -  -  	ret 
  650 D1:B1EB -  -  -  -  
  651 D1:B1EB -  -  -  -  
  652 D1:B1EB -  -  -  -  ;not in shadow, returns a = 0000color
  653 D1:B1EB -  -  -  -  sdcomp_get_next_color_ending_nibble:
  654 D1:B1EB CD 6B B1 D1 	call sdcomp_get_color_data
  655 D1:B1EF C9 -  -  -  	ret
  656 D1:B1F0 -  -  -  -  
  657 D1:B1F0 -  -  -  -  sdcomp_end:
  658 D1:B1F0 -  -  -  -  	;write final loop/line data
  659 D1:B1F0 3A FB AF D1 	ld a,(sdcomp_loop_counter)
  660 D1:B1F4 12 -  -  -  	ld (de),a;write loops per line data
  661 D1:B1F5 13 -  -  -  	inc de
  662 D1:B1F6 C9 -  -  -  	ret 
  663 D1:B1F7 -  -  -  -  
  664 D1:B1F7 -  -  -  -  
  665 D1:B1F7 -  -  -  -  
  666 D1:B1F7 -  -  -  -  
  667 D1:B1F7 -  -  -  -  
  668 D1:B1F7 -  -  -  -  
  669 D1:B1F7 -  -  -  -  
  670 D1:B1F7 -  -  -  -  ;not in shadow ,destroys a
  671 D1:B1F7 -  -  -  -  sdcomp_traverse_line_data:
  672 D1:B1F7 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  673 D1:B1F7 21 00 00 00 	ld hl,0
  674 D1:B1FB -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  675 D1:B1FB 0E 00 -  -  	ld c,0
  676 D1:B1FD D9 -  -  -  	exx;toshadow 
  677 D1:B1FE -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  678 D1:B1FE 21 00 00 00 	ld hl,0
  679 D1:B202 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  680 D1:B202 0E 00 -  -  	ld c,0
  681 D1:B204 D5 -  -  -  	push de
  682 D1:B205 3A 61 B1 D1 	ld a,(sdcomp_sprite_width)
  683 D1:B209 5F -  -  -  	ld e,a
  684 D1:B20A -  -  -  -  sdcomp_traverse_line_data_loop:
  685 D1:B20A CB 09 -  -  	rrc c 
  686 D1:B20C D2 11 B2 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip
  687 D1:B210 23 -  -  -  	inc hl
  688 D1:B211 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  689 D1:B211 7E -  -  -  	ld a,(hl)
  690 D1:B212 A1 -  -  -  	and c
  691 D1:B213 -  -  -  -  sdcomp_no_alpha_3 .equ $
  692 D1:B213 CA 29 B2 D1 	jp z,sdcomp_traverse_line_data_color_skip;jp c for no alpha
  693 D1:B217 D9 -  -  -  	exx;out of shadow 
  694 D1:B218 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  695 D1:B218 CB 09 -  -  	rrc c ;rotate mask
  696 D1:B21A -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  697 D1:B21A CB 09 -  -  	rrc c ;rrc a for 1bpc
  698 D1:B21C -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  699 D1:B21C CB 09 -  -  	rrc c;rrc a for 2bpc
  700 D1:B21E -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  701 D1:B21E CB 09 -  -  	rrc c
  702 D1:B220 -  -  -  -  	
  703 D1:B220 79 -  -  -  	ld a,c
  704 D1:B221 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  705 D1:B221 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000
  706 D1:B223 CA 28 B2 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  707 D1:B227 23 -  -  -  	inc hl
  708 D1:B228 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  709 D1:B228 D9 -  -  -  	exx ;toshadow
  710 D1:B229 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  711 D1:B229 1D -  -  -  	dec e
  712 D1:B22A C2 0A B2 D1 	jp nz,sdcomp_traverse_line_data_loop
  713 D1:B22E D1 -  -  -  	pop de  
  714 D1:B22F 22 FF B1 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  715 D1:B233 79 -  -  -  	ld a,c
  716 D1:B234 32 03 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  717 D1:B238 D9 -  -  -  	exx ;out
  718 D1:B239 22 F8 B1 D1 	ld (sdcomp_color_data_line_end_byte),hl
  719 D1:B23D 79 -  -  -  	ld a,c 
  720 D1:B23E 32 FC B1 D1 	ld (sdcomp_color_data_line_end_mask),a
  721 D1:B242 C9 -  -  -  	ret
  722 D1:B243 -  -  -  -  
  723 D1:B243 -  -  -  -  
  724 D1:B243 -  -  -  -  
  725 D1:B243 -  -  -  -  sdcomp_set_flip:
  726 D1:B243 3E D2 -  -  	ld a,%11010010;jp nc 
  727 D1:B245 32 BB AF D1 	ld (sdcomp_flip_1),a 
  728 D1:B249 -  -  -  -   
  729 D1:B249 3E DC -  -  	ld a,%11011100;call c 
  730 D1:B24B 32 5A B1 D1 	ld (sdcomp_flip_7),a
  731 D1:B24F -  -  -  -  	
  732 D1:B24F 3E 01 -  -  	ld a,%00000001;rlc 
  733 D1:B251 32 67 B1 D1 	ld (sdcomp_flip_bitstream),a
  734 D1:B255 3E 2B -  -  	ld a,%00101011;dec hl
  735 D1:B257 32 69 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  736 D1:B25B -  -  -  -  	
  737 D1:B25B -  -  -  -  	
  738 D1:B25B -  -  -  -  	;set reverse color reading
  739 D1:B25B 3E C3 -  -  	ld a,%11000011;set 0,e
  740 D1:B25D 32 7F B1 D1 	ld (sdcomp_color_bit_0),a 
  741 D1:B261 3E CB -  -  	ld a,%11001011;set 1,e
  742 D1:B263 32 91 B1 D1 	ld (sdcomp_color_bit_1),a 
  743 D1:B267 3E D3 -  -  	ld a,%11010011;set 2,e
  744 D1:B269 32 A3 B1 D1 	ld (sdcomp_color_bit_2),a 
  745 D1:B26D 3E DB -  -  	ld a,%11011011;set 3,e
  746 D1:B26F 32 B5 B1 D1 	ld (sdcomp_color_bit_3),a 
  747 D1:B273 -  -  -  -  	
  748 D1:B273 3E D8 -  -  	ld a,%11011000;ret c 
  749 D1:B275 32 F1 B2 D1 	ld (sdcomp_flip_4),a
  750 D1:B279 32 48 B3 D1 	ld (sdcomp_flip_5),a
  751 D1:B27D 32 97 B3 D1 	ld (sdcomp_flip_6),a
  752 D1:B281 32 DC B3 D1 	ld (sdcomp_flip_8),a
  753 D1:B285 -  -  -  -  	
  754 D1:B285 C9 -  -  -  	ret 
  755 D1:B286 -  -  -  -  	
  756 D1:B286 -  -  -  -  	
  757 D1:B286 -  -  -  -  sdcomp_reset_flip:
  758 D1:B286 3E DA -  -  	ld a,%11011010;jp c 
  759 D1:B288 32 BB AF D1 	ld (sdcomp_flip_1),a 
  760 D1:B28C -  -  -  -  
  761 D1:B28C 3E D4 -  -  	ld a,%11010100;call nc 
  762 D1:B28E 32 5A B1 D1 	ld (sdcomp_flip_7),a
  763 D1:B292 -  -  -  -  	
  764 D1:B292 3E 09 -  -  	ld a,%00001001;rrc 
  765 D1:B294 32 67 B1 D1 	ld (sdcomp_flip_bitstream),a
  766 D1:B298 3E 23 -  -  	ld a,%00100011;inc hl
  767 D1:B29A 32 69 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  768 D1:B29E -  -  -  -  	
  769 D1:B29E -  -  -  -  	
  770 D1:B29E 3E D0 -  -  	ld a,%11010000;ret nc 
  771 D1:B2A0 32 F1 B2 D1 	ld (sdcomp_flip_4),a
  772 D1:B2A4 32 48 B3 D1 	ld (sdcomp_flip_5),a
  773 D1:B2A8 32 97 B3 D1 	ld (sdcomp_flip_6),a
  774 D1:B2AC 32 DC B3 D1 	ld (sdcomp_flip_8),a
  775 D1:B2B0 -  -  -  -  	
  776 D1:B2B0 -  -  -  -  	
  777 D1:B2B0 C9 -  -  -  	ret 
  778 D1:B2B1 -  -  -  -  
  779 D1:B2B1 -  -  -  -  
  780 D1:B2B1 -  -  -  -  
  781 D1:B2B1 -  -  -  -  sdcomp_set_offset:
  782 D1:B2B1 3E D2 -  -  	ld a,%11010010;jp nc 
  783 D1:B2B3 32 F2 B0 D1 	ld (sdcomp_bit_offset),a
  784 D1:B2B7 C9 -  -  -  	ret
  785 D1:B2B8 -  -  -  -  
  786 D1:B2B8 -  -  -  -  
  787 D1:B2B8 -  -  -  -  
  788 D1:B2B8 -  -  -  -  
  789 D1:B2B8 -  -  -  -  ;0,1,2,3,4bpp modes
  790 D1:B2B8 -  -  -  -  ;destroys a 
  791 D1:B2B8 -  -  -  -  sdcomp_set_4bpp:
  792 D1:B2B8 3E D2 -  -  	ld a,%11010010;jp nc
  793 D1:B2BA 32 6F B1 D1 	ld (sdcomp_0bpc),a
  794 D1:B2BE 32 81 B1 D1 	ld (sdcomp_1bpc),a
  795 D1:B2C2 32 93 B1 D1 	ld (sdcomp_2bpc),a
  796 D1:B2C6 32 A5 B1 D1 	ld (sdcomp_3bpc),a
  797 D1:B2CA -  -  -  -  	
  798 D1:B2CA -  -  -  -  	
  799 D1:B2CA -  -  -  -  ;traverse data 
  800 D1:B2CA 3E 09 -  -  	ld a,%00001001;rrc c
  801 D1:B2CC 32 19 B2 D1 	ld (sdcomp_traverse_1bpp),a
  802 D1:B2D0 32 1B B2 D1 	ld (sdcomp_traverse_2bpp),a
  803 D1:B2D4 32 1D B2 D1 	ld (sdcomp_traverse_3bpp),a
  804 D1:B2D8 32 1F B2 D1 	ld (sdcomp_traverse_4bpp),a
  805 D1:B2DC -  -  -  -  	
  806 D1:B2DC 3E F0 -  -  	ld a,%11110000
  807 D1:B2DE 32 22 B2 D1 	ld (sdcomp_traverse_bit_check),a
  808 D1:B2E2 -  -  -  -  	
  809 D1:B2E2 -  -  -  -  ;setting indexed colors 
  810 D1:B2E2 3E DA -  -  	ld a,%11011010;jp c 
  811 D1:B2E4 32 84 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  812 D1:B2E8 32 8F AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  813 D1:B2EC 32 9A AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  814 D1:B2F0 -  -  -  -  	
  815 D1:B2F0 37 -  -  -  	scf 
  816 D1:B2F1 -  -  -  -  sdcomp_flip_4 .equ $
  817 D1:B2F1 D0 -  -  -  	ret nc 
  818 D1:B2F2 -  -  -  -  	;not flipped
  819 D1:B2F2 -  -  -  -  	
  820 D1:B2F2 3E DB -  -  	ld a,%11011011;set 3,e
  821 D1:B2F4 32 7F B1 D1 	ld (sdcomp_color_bit_0),a 
  822 D1:B2F8 3E D3 -  -  	ld a,%11010011;set 2,e
  823 D1:B2FA 32 91 B1 D1 	ld (sdcomp_color_bit_1),a 
  824 D1:B2FE 3E CB -  -  	ld a,%11001011;set 1,e
  825 D1:B300 32 A3 B1 D1 	ld (sdcomp_color_bit_2),a 
  826 D1:B304 3E C3 -  -  	ld a,%11000011;set 0,e
  827 D1:B306 32 B5 B1 D1 	ld (sdcomp_color_bit_3),a 
  828 D1:B30A C9 -  -  -  	ret 
  829 D1:B30B -  -  -  -  	
  830 D1:B30B -  -  -  -  
  831 D1:B30B -  -  -  -  sdcomp_set_3bpp:
  832 D1:B30B 3E D2 -  -  	ld a,%11010010;jp nc
  833 D1:B30D 32 6F B1 D1 	ld (sdcomp_0bpc),a
  834 D1:B311 32 81 B1 D1 	ld (sdcomp_1bpc),a
  835 D1:B315 32 93 B1 D1 	ld (sdcomp_2bpc),a
  836 D1:B319 -  -  -  -  	
  837 D1:B319 3E DA -  -  	ld a,%11011010;jp c 
  838 D1:B31B 32 A5 B1 D1 	ld (sdcomp_3bpc),a
  839 D1:B31F -  -  -  -  	
  840 D1:B31F -  -  -  -  ;traverse data	
  841 D1:B31F 3E 09 -  -  	ld a,%00001001;rrc c
  842 D1:B321 32 19 B2 D1 	ld (sdcomp_traverse_1bpp),a
  843 D1:B325 32 1B B2 D1 	ld (sdcomp_traverse_2bpp),a
  844 D1:B329 32 1D B2 D1 	ld (sdcomp_traverse_3bpp),a
  845 D1:B32D 3E 0F -  -  	ld a,%00001111;rrc a
  846 D1:B32F 32 1F B2 D1 	ld (sdcomp_traverse_4bpp),a
  847 D1:B333 -  -  -  -  	
  848 D1:B333 3E E0 -  -  	ld a,%11100000
  849 D1:B335 32 22 B2 D1 	ld (sdcomp_traverse_bit_check),a
  850 D1:B339 -  -  -  -  	
  851 D1:B339 -  -  -  -  ;setting indexed colors 
  852 D1:B339 3E D2 -  -  	ld a,%11010010;jp nc 
  853 D1:B33B 32 84 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  854 D1:B33F 32 8F AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  855 D1:B343 32 9A AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  856 D1:B347 -  -  -  -  	
  857 D1:B347 -  -  -  -  	
  858 D1:B347 -  -  -  -  	
  859 D1:B347 37 -  -  -  	scf 
  860 D1:B348 -  -  -  -  sdcomp_flip_5 .equ $
  861 D1:B348 D0 -  -  -  	ret nc 
  862 D1:B349 -  -  -  -  	;not flipped
  863 D1:B349 -  -  -  -  	
  864 D1:B349 3E D3 -  -  	ld a,%11010011;set 2,e
  865 D1:B34B 32 7F B1 D1 	ld (sdcomp_color_bit_0),a 
  866 D1:B34F 3E CB -  -  	ld a,%11001011;set 1,e
  867 D1:B351 32 91 B1 D1 	ld (sdcomp_color_bit_1),a 
  868 D1:B355 3E C3 -  -  	ld a,%11000011;set 0,e
  869 D1:B357 32 A3 B1 D1 	ld (sdcomp_color_bit_2),a 
  870 D1:B35B -  -  -  -  
  871 D1:B35B C9 -  -  -  	ret 
  872 D1:B35C -  -  -  -  
  873 D1:B35C -  -  -  -  sdcomp_set_2bpp:
  874 D1:B35C 3E D2 -  -  	ld a,%11010010;jp nc
  875 D1:B35E 32 6F B1 D1 	ld (sdcomp_0bpc),a
  876 D1:B362 32 81 B1 D1 	ld (sdcomp_1bpc),a
  877 D1:B366 -  -  -  -  	
  878 D1:B366 3E DA -  -  	ld a,%11011010;jp c 
  879 D1:B368 32 93 B1 D1 	ld (sdcomp_2bpc),a
  880 D1:B36C -  -  -  -  	
  881 D1:B36C -  -  -  -  ;traverse data	
  882 D1:B36C 3E 09 -  -  	ld a,%00001001;rrc c
  883 D1:B36E 32 19 B2 D1 	ld (sdcomp_traverse_1bpp),a
  884 D1:B372 32 1B B2 D1 	ld (sdcomp_traverse_2bpp),a
  885 D1:B376 3E 0F -  -  	ld a,%00001111;rrc a
  886 D1:B378 32 1D B2 D1 	ld (sdcomp_traverse_3bpp),a
  887 D1:B37C 32 1F B2 D1 	ld (sdcomp_traverse_4bpp),a
  888 D1:B380 -  -  -  -  	
  889 D1:B380 3E C0 -  -  	ld a,%11000000 
  890 D1:B382 32 22 B2 D1 	ld (sdcomp_traverse_bit_check),a
  891 D1:B386 -  -  -  -  ;setting indexed colors 
  892 D1:B386 3E D2 -  -  	ld a,%11010010;jp nc 
  893 D1:B388 32 84 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  894 D1:B38C 32 8F AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  895 D1:B390 3E DA -  -  	ld a,%11011010;jp c 
  896 D1:B392 32 9A AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  897 D1:B396 -  -  -  -  	
  898 D1:B396 37 -  -  -  	scf 
  899 D1:B397 -  -  -  -  sdcomp_flip_6 .equ $
  900 D1:B397 D0 -  -  -  	ret nc 
  901 D1:B398 -  -  -  -  	;not flipped
  902 D1:B398 -  -  -  -  	
  903 D1:B398 -  -  -  -  
  904 D1:B398 3E CB -  -  	ld a,%11001011;set 1,e
  905 D1:B39A 32 7F B1 D1 	ld (sdcomp_color_bit_0),a 
  906 D1:B39E 3E C3 -  -  	ld a,%11000011;set 0,e
  907 D1:B3A0 32 91 B1 D1 	ld (sdcomp_color_bit_1),a 
  908 D1:B3A4 -  -  -  -  
  909 D1:B3A4 C9 -  -  -  	ret 
  910 D1:B3A5 -  -  -  -  
  911 D1:B3A5 -  -  -  -  
  912 D1:B3A5 -  -  -  -  
  913 D1:B3A5 -  -  -  -  sdcomp_set_1bpp:
  914 D1:B3A5 3E D2 -  -  	ld a,%11010010;jp nc
  915 D1:B3A7 32 6F B1 D1 	ld (sdcomp_0bpc),a
  916 D1:B3AB -  -  -  -  	
  917 D1:B3AB 3E DA -  -  	ld a,%11011010;jp c 
  918 D1:B3AD 32 81 B1 D1 	ld (sdcomp_1bpc),a
  919 D1:B3B1 -  -  -  -  	
  920 D1:B3B1 -  -  -  -  ;traverse data	
  921 D1:B3B1 3E 09 -  -  	ld a,%00001001;rrc c
  922 D1:B3B3 32 19 B2 D1 	ld (sdcomp_traverse_1bpp),a
  923 D1:B3B7 3E 0F -  -  	ld a,%00001111;rrc a
  924 D1:B3B9 32 1B B2 D1 	ld (sdcomp_traverse_2bpp),a
  925 D1:B3BD 32 1D B2 D1 	ld (sdcomp_traverse_3bpp),a
  926 D1:B3C1 32 1F B2 D1 	ld (sdcomp_traverse_4bpp),a
  927 D1:B3C5 3E 80 -  -  	ld a,%10000000
  928 D1:B3C7 32 22 B2 D1 	ld (sdcomp_traverse_bit_check),a
  929 D1:B3CB -  -  -  -  ;setting indexed colors 
  930 D1:B3CB 3E D2 -  -  	ld a,%11010010;jp nc 
  931 D1:B3CD 32 84 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  932 D1:B3D1 3E DA -  -  	ld a,%11011010;jp c 
  933 D1:B3D3 32 8F AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  934 D1:B3D7 32 9A AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  935 D1:B3DB -  -  -  -  	
  936 D1:B3DB -  -  -  -  
  937 D1:B3DB 37 -  -  -  	scf 
  938 D1:B3DC -  -  -  -  sdcomp_flip_8 .equ $
  939 D1:B3DC D0 -  -  -  	ret nc 
  940 D1:B3DD -  -  -  -  	;not flipped
  941 D1:B3DD -  -  -  -  	
  942 D1:B3DD -  -  -  -  
  943 D1:B3DD 3E C3 -  -  	ld a,%11000011;set 0,e
  944 D1:B3DF 32 7F B1 D1 	ld (sdcomp_color_bit_0),a 
  945 D1:B3E3 -  -  -  -  
  946 D1:B3E3 C9 -  -  -  	ret 
  947 D1:B3E4 -  -  -  -  	
  948 D1:B3E4 -  -  -  -  
  949 D1:B3E4 -  -  -  -  sdcomp_set_0bpp:
  950 D1:B3E4 3E DA -  -  	ld a,%11011010;jp c 
  951 D1:B3E6 32 6F B1 D1 	ld (sdcomp_0bpc),a
  952 D1:B3EA -  -  -  -  
  953 D1:B3EA -  -  -  -  
  954 D1:B3EA 3E D2 -  -  	ld a,%11010010;jp nc 
  955 D1:B3EC 32 84 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  956 D1:B3F0 3E DA -  -  	ld a,%11011010;jp c 
  957 D1:B3F2 32 8F AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  958 D1:B3F6 32 9A AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  959 D1:B3FA -  -  -  -  	
  960 D1:B3FA C9 -  -  -  	ret 
  961 D1:B3FB -  -  -  -  	
  962 D1:B3FB -  -  -  -  sdcomp_set_noalpha:
  963 D1:B3FB 3E DA -  -  	ld a,%11011010;jp c 
  964 D1:B3FD 32 69 AF D1 	ld (sdcomp_no_alpha_1),a 
  965 D1:B401 32 13 B2 D1 	ld (sdcomp_no_alpha_3),a 
  966 D1:B405 3E D2 -  -  	ld a,%11010010;jp nc 
  967 D1:B407 32 0D B1 D1 	ld (sdcomp_no_alpha_2),a 
  968 D1:B40B C9 -  -  -  	ret 
  969 D1:B40C -  -  -  -  	
  970 D1:B40C -  -  -  -  sdcomp_reset_noalpha:
  971 D1:B40C 3E DA -  -  	ld a,%11011010;jp c 
  972 D1:B40E 32 0D B1 D1 	ld (sdcomp_no_alpha_2),a 
  973 D1:B412 3E D2 -  -  	ld a,%11010010;jp nc 
  974 D1:B414 32 69 AF D1 	ld (sdcomp_no_alpha_1),a 
  975 D1:B418 3E CA -  -  	ld a,%11001010;jp z
  976 D1:B41A 32 13 B2 D1 	ld (sdcomp_no_alpha_3),a 
  977 D1:B41E C9 -  -  -  	ret 
  978 D1:B41F -  -  -  -  
  979 D1:B41F -  -  -  -  
  980 D1:B41F -  -  -  -  sdcomp_set_fast_sprite:
  981 D1:B41F 3E DA -  -  	ld a,%11011010;jp c 
  982 D1:B421 32 08 B0 D1 	ld (sdcomp_fast_sprite_1),a 
  983 D1:B425 32 49 B0 D1 	ld (sdcomp_fast_sprite_2),a
  984 D1:B429 32 7F B0 D1 	ld (sdcomp_fast_sprite_3),a
  985 D1:B42D C9 -  -  -  	ret
  986 D1:B42E -  -  -  -  sdcomp_reset_fast_sprite:
  987 D1:B42E 3E D2 -  -  	ld a,%11010010;jp nc
  988 D1:B430 32 08 B0 D1 	ld (sdcomp_fast_sprite_1),a 
  989 D1:B434 32 49 B0 D1 	ld (sdcomp_fast_sprite_2),a
  990 D1:B438 32 7F B0 D1 	ld (sdcomp_fast_sprite_3),a
  991 D1:B43C C9 -  -  -  	ret
  992 D1:B43D -  -  -  -  	
  993 D1:B43D -  -  -  -  	
  994 D1:B43D -  -  -  -  sdcomp_set_bg_sprite:
  995 D1:B43D 3E D2 -  -  	ld a,%11010010;jp nc
  996 D1:B43F 32 48 AF D1 	ld (sdcomp_bg_sprite_1),a 
  997 D1:B443 3E DA -  -  	ld a,%11011010;jp c 
  998 D1:B445 32 5C AF D1 	ld (sdcomp_bg_sprite_2),a
  999 D1:B449 32 DC AF D1 	ld (sdcomp_bg_sprite_3),a
 1000 D1:B44D 32 4E B1 D1 	ld (sdcomp_bg_sprite_4),a
 1001 D1:B451 C9 -  -  -  	ret
 1002 D1:B452 -  -  -  -  
 1003 D1:B452 -  -  -  -  	
 1004 D1:B452 -  -  -  -  sdcomp_reset_bg_sprite:
 1005 D1:B452 3E DA -  -  	ld a,%11011010;jp c 
 1006 D1:B454 32 48 AF D1 	ld (sdcomp_bg_sprite_1),a 
 1007 D1:B458 3E D2 -  -  	ld a,%11010010;jp nc
 1008 D1:B45A 32 5C AF D1 	ld (sdcomp_bg_sprite_2),a
 1009 D1:B45E 32 DC AF D1 	ld (sdcomp_bg_sprite_3),a
 1010 D1:B462 32 4E B1 D1 	ld (sdcomp_bg_sprite_4),a
 1011 D1:B466 C9 -  -  -  	ret
 1012 D1:B467 -  -  -  -  
 1013 D1:B467 -  -  -  -  ;not in shadow 
 1014 D1:B467 -  -  -  -  sdcomp_bg_sprite_routine:
 1015 D1:B467 D9 -  -  -  	exx ;in 
 1016 D1:B468 D5 -  -  -  	push de 
 1017 D1:B469 D9 -  -  -  	exx ;out 
 1018 D1:B46A D1 -  -  -  	pop de ;transfer loops/line write location to be main write location
 1019 D1:B46B -  -  -  -  
 1020 D1:B46B -  -  -  -  ;not in shadow 
 1021 D1:B46B -  -  -  -  sdcomp_bg_sprite_loop:
 1022 D1:B46B D9 -  -  -  	exx;toshadow 
 1023 D1:B46C -  -  -  -  	
 1024 D1:B46C 08 -  -  -  	ex af,af' ;'
 1025 D1:B46D B7 -  -  -  	or a ;check if a' is zero, indicating virtual zeroes
 1026 D1:B46E F5 -  -  -  	push af 
 1027 D1:B46F 08 -  -  -  	ex af,af' ;'
 1028 D1:B470 F1 -  -  -  	pop af 
 1029 D1:B471 C2 7E B4 D1 	jp nz,sdcomp_bg_sprite_loop_skip
 1030 D1:B475 CD C8 B0 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1031 D1:B479 D9 -  -  -  	exx;out 
 1032 D1:B47A -  -  -  -  
 1033 D1:B47A C3 6B B4 D1 	jp sdcomp_bg_sprite_loop;keep looping until out of virtual 0s 
 1034 D1:B47E -  -  -  -  sdcomp_bg_sprite_loop_skip:;not in virt 0s 
 1035 D1:B47E CD C8 B0 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1036 D1:B482 D9 -  -  -  	exx;out 
 1037 D1:B483 -  -  -  -  	
 1038 D1:B483 -  -  -  -  	;write mask and color data 
 1039 D1:B483 D5 -  -  -  	push de 
 1040 D1:B484 -  -  -  -  	
 1041 D1:B484 47 -  -  -  	ld b,a;save for later
 1042 D1:B485 CB 67 -  -  	bit 4,a ;check if first pixel has color 
 1043 D1:B487 3E 00 -  -  	ld a,0
 1044 D1:B489 16 FF -  -  	ld d,%11111111;assuming no colors 
 1045 D1:B48B CA 95 B4 D1 	jp z,sdcomp_bg_pixel_first_skip
 1046 D1:B48F -  -  -  -  	;has first color
 1047 D1:B48F 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
 1048 D1:B491 CD EB B1 D1 	call sdcomp_get_next_color_ending_nibble
 1049 D1:B495 -  -  -  -  sdcomp_bg_pixel_first_skip:
 1050 D1:B495 -  -  -  -  	;a is either $00 or $0color1
 1051 D1:B495 -  -  -  -  	
 1052 D1:B495 1E FF -  -  	ld e,%11111111;assuming no colors
 1053 D1:B497 -  -  -  -  	
 1054 D1:B497 CB 40 -  -  	bit 0,b;check second pixel alpha
 1055 D1:B499 47 -  -  -  	ld b,a;save for later 
 1056 D1:B49A 3E 00 -  -  	ld a,0
 1057 D1:B49C CA A6 B4 D1 	jp z,sdcomp_bg_pixel_second_skip;
 1058 D1:B4A0 -  -  -  -  	;has second color 
 1059 D1:B4A0 CD E2 B1 D1 	call sdcomp_get_next_color_leading_nibble
 1060 D1:B4A4 -  -  -  -  	;a = color2 0 
 1061 D1:B4A4 1E 0F -  -  	ld e,%00001111;save first pixel of bg
 1062 D1:B4A6 -  -  -  -  	
 1063 D1:B4A6 -  -  -  -  sdcomp_bg_pixel_second_skip:
 1064 D1:B4A6 -  -  -  -  	;a is either 00 or c2 0 
 1065 D1:B4A6 -  -  -  -  	;b is either 00 or 0 c1 
 1066 D1:B4A6 B0 -  -  -  	or b 
 1067 D1:B4A7 47 -  -  -  	ld b,a;final color data
 1068 D1:B4A8 7A -  -  -  	ld a,d 
 1069 D1:B4A9 A3 -  -  -  	and e ;final mask data 
 1070 D1:B4AA -  -  -  -  	
 1071 D1:B4AA D1 -  -  -  	pop de;return to pointer 
 1072 D1:B4AB 12 -  -  -  	ld (de),a;write mask data 
 1073 D1:B4AC 13 -  -  -  	inc de 
 1074 D1:B4AD 78 -  -  -  	ld a,b;color data 
 1075 D1:B4AE 12 -  -  -  	ld (de),a;write color data 
 1076 D1:B4AF 13 -  -  -  	inc de 
 1077 D1:B4B0 -  -  -  -  	
 1078 D1:B4B0 -  -  -  -  	;check if end reached 
 1079 D1:B4B0 3A EB AF D1 	ld a,(sdcomp_end_reached_flag)
 1080 D1:B4B4 FE DA -  -  	cp %11011010;jp c
 1081 D1:B4B6 C2 6B B4 D1 	jp nz,sdcomp_bg_sprite_loop 
 1082 D1:B4BA C9 -  -  -  	ret 
 1083 D1:B4BB -  -  -  -  
 1084 D1:B4BB -  -  -  -  ;FIND GAP LENGTH
 1085 D1:B4BB -  -  -  -  ;read bitsteam in pairs
 1086 D1:B4BB -  -  -  -  ;gap length = number of full pairs found 
 1087 D1:B4BB -  -  -  -  
 1088 D1:B4BB -  -  -  -  ;STARTING PIXEL(S);have read either 11,01,10 in bitstream
 1089 D1:B4BB -  -  -  -  ;write either both, start,or end pixel 
 1090 D1:B4BB -  -  -  -  
 1091 D1:B4BB -  -  -  -  ;LDIR
 1092 D1:B4BB -  -  -  -  ;read number of pairs of 11 in bitstream 
 1093 D1:B4BB -  -  -  -  ;if 0 move to ending pixels
 1094 D1:B4BB -  -  -  -  ;if ends in 00, last full 11 pair will be ending pixels 
 1095 D1:B4BB -  -  -  -  ;write ldir length 
 1096 D1:B4BB -  -  -  -  ;if 0 move to next step
 1097 D1:B4BB -  -  -  -  ;else write ldir data 
 1098 D1:B4BB -  -  -  -  
 1099 D1:B4BB -  -  -  -  
 1100 D1:B4BB -  -  -  -  ;ENDING PIXEL(S)
 1101 D1:B4BB -  -  -  -  ;00 if there is nothing after leading pixels 
 1102 D1:B4BB -  -  -  -  ;11 10 01 otherwise
 1103 D1:B4BB -  -  -  -  
 1104 D1:B4BB -  -  -  -  ;BACK TO GAP LENGTH
 1105 D1:B4BB -  -  -  -  
 1106 D1:B4BB -  -  -  -  
 1107 D1:B4BB -  -  -  -  
 1108 D1:B4BB -  -  -  -  
 1109 D1:B4BB -  -  -  -  
 1110 D1:B4BB -  -  -  -  
 1111 D1:B4BB -  -  -  -  
 1112 D1:B4BB -  -  -  -  
 1113 D1:B4BB -  -  -  -  
 1114 D1:B4BB -  -  -  -  
 1115 D1:B4BB -  -  -  -  
 1116 D1:B4BB -  -  -  -  
 1117 D1:B4BB -  -  -  -  
 1118 D1:B4BB -  -  -  -  
 1119 D1:B4BB -  -  -  -  
 1120 D1:B4BB -  -  -  -  
 1121 D1:B4BB -  -  -  -  
 1122 D1:B4BB -  -  -  -  
 1123 D1:B4BB -  -  -  -  
 1124 D1:B4BB -  -  -  -  
 1125 D1:B4BB -  -  -  -  
 1126 D1:B4BB -  -  -  -  	
 1127 D1:B4BB -  -  -  -  	
 1128 D1:B4BB -  -  -  -  	
 1129 D1:B4BB -  -  -  -  	
Listing for file "ascent.asm"
  390 D1:B4BB -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B4BB -  -  -  -  
    2 D1:B4BB -  -  -  -  
    3 D1:B4BB -  -  -  -  ;hl = upper frame data 
    4 D1:B4BB -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
    5 D1:B4BB -  -  -  -  draw_fg_sprites:
    6 D1:B4BB -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
    7 D1:B4BB ED 17 -  -  	ld de,(hl)
    8 D1:B4BD ED 53 81 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
    9 D1:B4C2 -  -  -  -  	
   10 D1:B4C2 11 00 00 00 	ld de,0
   11 D1:B4C6 23 -  -  -  	inc hl 
   12 D1:B4C7 23 -  -  -  	inc hl
   13 D1:B4C8 23 -  -  -  	inc hl;past data table 
   14 D1:B4C9 -  -  -  -  dfgs_upper_loop:
   15 D1:B4C9 7E -  -  -  	ld a,(hl);sprite y value 
   16 D1:B4CA 23 -  -  -  	inc hl 
   17 D1:B4CB 96 -  -  -  	sub (hl);subtract height
   18 D1:B4CC D2 DA B4 D1 	jp nc,dfgs_upper_skip;if no carry,skip
   19 D1:B4D0 -  -  -  -  	
   20 D1:B4D0 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   21 D1:B4D0 D6 00 -  -  	sub 0 ;subtract camera height lsb 
   22 D1:B4D2 DA E7 B4 D1 	jp c,dfgs_upper_cont
   23 D1:B4D6 CA E7 B4 D1 	jp z,dfgs_upper_cont 
   24 D1:B4DA -  -  -  -  dfgs_upper_skip:
   25 D1:B4DA 23 -  -  -  	inc hl 
   26 D1:B4DB 23 -  -  -  	inc hl
   27 D1:B4DC 7E -  -  -  	ld a,(hl);index 
   28 D1:B4DD 23 -  -  -  	inc hl;to y 
   29 D1:B4DE B7 -  -  -  	or a
   30 D1:B4DF C2 C9 B4 D1 	jp nz,dfgs_upper_loop
   31 D1:B4E3 C3 14 B5 D1 	jp dfgs_mid_start
   32 D1:B4E7 -  -  -  -  	
   33 D1:B4E7 -  -  -  -  dfgs_upper_cont:
   34 D1:B4E7 -  -  -  -  	
   35 D1:B4E7 86 -  -  -  	add a,(hl);add height
   36 D1:B4E8 -  -  -  -  	;a now holds 0 indexed row, number of lines to skip drawing
   37 D1:B4E8 D9 -  -  -  	exx
   38 D1:B4E9 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
   39 D1:B4E9 11 00 00 00 	ld de,0;load top of vram 
   40 D1:B4ED D9 -  -  -  	exx;out shadow
   41 D1:B4EE -  -  -  -  	
   42 D1:B4EE CD 67 B6 D1 	call dfgs_setup_draw;toshadow	
   43 D1:B4F2 -  -  -  -  	
   44 D1:B4F2 CB 45 -  -  	bit 0,l 
   45 D1:B4F4 CA 00 B5 D1 	jp z,dfgs_upper_fast
   46 D1:B4F8 CD 57 AC D1 	call draw_slow_sprite_top_cut
   47 D1:B4FC C3 04 B5 D1 	jp dfgs_upper_skip_2
   48 D1:B500 -  -  -  -  dfgs_upper_fast:
   49 D1:B500 CD D7 AB D1 	call draw_fast_sprite_top_cut
   50 D1:B504 -  -  -  -  dfgs_upper_skip_2:
   51 D1:B504 D9 -  -  -  	exx ;out of shadow, hl holds index
   52 D1:B505 -  -  -  -  	
   53 D1:B505 11 00 00 00 	ld de,0 
   54 D1:B509 01 00 00 00 	ld bc,0
   55 D1:B50D 7E -  -  -  	ld a,(hl);index 
   56 D1:B50E 23 -  -  -  	inc hl;to y 
   57 D1:B50F B7 -  -  -  	or a	
   58 D1:B510 C2 C9 B4 D1 	jp nz,dfgs_upper_loop
   59 D1:B514 -  -  -  -  	
   60 D1:B514 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
   61 D1:B514 -  -  -  -  	
   62 D1:B514 ED 17 -  -  	ld de,(hl)
   63 D1:B516 ED 53 81 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
   64 D1:B51B 11 00 00 00 	ld de,0
   65 D1:B51F 23 -  -  -  	inc hl 
   66 D1:B520 23 -  -  -  	inc hl
   67 D1:B521 23 -  -  -  	inc hl;past data table 
   68 D1:B522 -  -  -  -  dfgs_mid_loop:
   69 D1:B522 7E -  -  -  	ld a,(hl);y val 
   70 D1:B523 23 -  -  -  	inc hl ;to height
   71 D1:B524 -  -  -  -  dfgs_cam_height_2 .equ $ + 1
   72 D1:B524 D6 00 -  -  	sub 0;subtract cam pos
   73 D1:B526 DA 74 B5 D1 	jp c,dfgs_mid_sprite_below ;sprite is below camera pos, either full or bottom cut 
   74 D1:B52A CA 74 B5 D1 	jp z,dfgs_mid_sprite_below 
   75 D1:B52E -  -  -  -  	;sprite start is above camera pos, top cut 
   76 D1:B52E BE -  -  -  	cp (hl);a holds numb lines below sprite y , compare to height
   77 D1:B52F DA 44 B5 D1 	jp c,dfgs_mid_above_cont
   78 D1:B533 CA 44 B5 D1 	jp z,dfgs_mid_above_cont
   79 D1:B537 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
   80 D1:B537 23 -  -  -  	inc hl 
   81 D1:B538 23 -  -  -  	inc hl
   82 D1:B539 7E -  -  -  	ld a,(hl);index 
   83 D1:B53A 23 -  -  -  	inc hl;to y 
   84 D1:B53B B7 -  -  -  	or a
   85 D1:B53C C2 22 B5 D1 	jp nz,dfgs_mid_loop
   86 D1:B540 C3 DD B5 D1 	jp dfgs_lower_start
   87 D1:B544 -  -  -  -  	
   88 D1:B544 -  -  -  -  dfgs_mid_above_cont:
   89 D1:B544 -  -  -  -  	;a = lines to skip 
   90 D1:B544 D9 -  -  -  	exx
   91 D1:B545 -  -  -  -  dfgs_vram_top_2 .equ $ + 1 
   92 D1:B545 11 00 00 00 	ld de,0
   93 D1:B549 D9 -  -  -  	exx
   94 D1:B54A -  -  -  -  	
   95 D1:B54A CD 67 B6 D1 	call dfgs_setup_draw;toshadow
   96 D1:B54E -  -  -  -  	
   97 D1:B54E CB 45 -  -  	bit 0,l 
   98 D1:B550 CA 5C B5 D1 	jp z,dfgs_mid_top_fast
   99 D1:B554 CD 57 AC D1 	call draw_slow_sprite_top_cut
  100 D1:B558 C3 60 B5 D1 	jp dfgs_mid_top_slow
  101 D1:B55C -  -  -  -  dfgs_mid_top_fast:
  102 D1:B55C CD D7 AB D1 	call draw_fast_sprite_top_cut
  103 D1:B560 -  -  -  -  dfgs_mid_top_slow:
  104 D1:B560 D9 -  -  -  	exx;out shadwo
  105 D1:B561 11 00 00 00 	ld de,0 
  106 D1:B565 01 00 00 00 	ld bc,0
  107 D1:B569 7E -  -  -  	ld a,(hl);index 
  108 D1:B56A 23 -  -  -  	inc hl;to y 
  109 D1:B56B B7 -  -  -  	or a
  110 D1:B56C C2 22 B5 D1 	jp nz,dfgs_mid_loop
  111 D1:B570 C3 DD B5 D1 	jp dfgs_lower_start
  112 D1:B574 -  -  -  -  
  113 D1:B574 -  -  -  -  dfgs_mid_sprite_below:;sprite start is = or below top of screen 
  114 D1:B574 -  -  -  -  	;can be full or bottom cut
  115 D1:B574 -  -  -  -  	;a holds distance of sprite below top of screen
  116 D1:B574 -  -  -  -  	;0 = top of screen 255 = 1 below ,254 = 2 below ... 17 = bottom of screen
  117 D1:B574 3D -  -  -  	dec a 
  118 D1:B575 D6 10 -  -  	sub 16;a holds dist from bottom
  119 D1:B577 DA 37 B5 D1 	jp c,dfgs_mid_skip
  120 D1:B57B BE -  -  -  	cp (hl);compare to height
  121 D1:B57C DA B0 B5 D1 	jp c,dfgs_mid_bottom_cut
  122 D1:B580 -  -  -  -  	
  123 D1:B580 -  -  -  -  	;full sprite
  124 D1:B580 D9 -  -  -  	exx
  125 D1:B581 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1
  126 D1:B581 11 00 00 00 	ld de,0
  127 D1:B585 D9 -  -  -  	exx
  128 D1:B586 CD 67 B6 D1 	call dfgs_setup_draw;toshadow
  129 D1:B58A CB 45 -  -  	bit 0,l
  130 D1:B58C CA 98 B5 D1 	jp z,dfgs_mid_full_fast
  131 D1:B590 CD 28 AC D1 	call draw_slow_sprite_full
  132 D1:B594 C3 9C B5 D1 	jp dfgs_mid_full_slow
  133 D1:B598 -  -  -  -  dfgs_mid_full_fast:
  134 D1:B598 CD 0E AC D1 	call draw_fast_sprite_full
  135 D1:B59C -  -  -  -  dfgs_mid_full_slow:
  136 D1:B59C D9 -  -  -  	exx
  137 D1:B59D 11 00 00 00 	ld de,0 
  138 D1:B5A1 01 00 00 00 	ld bc,0
  139 D1:B5A5 7E -  -  -  	ld a,(hl)
  140 D1:B5A6 23 -  -  -  	inc hl 
  141 D1:B5A7 B7 -  -  -  	or a 
  142 D1:B5A8 C2 22 B5 D1 	jp nz,dfgs_mid_loop
  143 D1:B5AC C3 DD B5 D1 	jp dfgs_lower_start
  144 D1:B5B0 -  -  -  -  	
  145 D1:B5B0 -  -  -  -  	
  146 D1:B5B0 -  -  -  -  dfgs_mid_bottom_cut:
  147 D1:B5B0 D9 -  -  -  	exx
  148 D1:B5B1 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1
  149 D1:B5B1 11 00 00 00 	ld de,0
  150 D1:B5B5 D9 -  -  -  	exx
  151 D1:B5B6 CD 67 B6 D1 	call dfgs_setup_draw
  152 D1:B5BA 3C -  -  -  	inc a;for bottom cuts
  153 D1:B5BB CB 45 -  -  	bit 0,l 
  154 D1:B5BD CA C9 B5 D1 	jp z,dfgs_mid_bottom_fast
  155 D1:B5C1 CD 8C AC D1 	call draw_slow_sprite_bottom_cut
  156 D1:B5C5 C3 CD B5 D1 	jp dfgs_mid_bottom_slow
  157 D1:B5C9 -  -  -  -  dfgs_mid_bottom_fast:
  158 D1:B5C9 CD C3 AB D1 	call draw_fast_sprite_bottom_cut
  159 D1:B5CD -  -  -  -  dfgs_mid_bottom_slow:
  160 D1:B5CD D9 -  -  -  	exx
  161 D1:B5CE 11 00 00 00 	ld de,0 
  162 D1:B5D2 01 00 00 00 	ld bc,0
  163 D1:B5D6 7E -  -  -  	ld a,(hl)
  164 D1:B5D7 23 -  -  -  	inc hl 
  165 D1:B5D8 B7 -  -  -  	or a 
  166 D1:B5D9 C2 22 B5 D1 	jp nz,dfgs_mid_loop
  167 D1:B5DD -  -  -  -  	
  168 D1:B5DD -  -  -  -  	
  169 D1:B5DD -  -  -  -  	
  170 D1:B5DD -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  171 D1:B5DD -  -  -  -  dfgs_lower_start:
  172 D1:B5DD -  -  -  -  	
  173 D1:B5DD ED 17 -  -  	ld de,(hl)
  174 D1:B5DF ED 53 81 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  175 D1:B5E4 11 00 00 00 	ld de,0
  176 D1:B5E8 23 -  -  -  	inc hl 
  177 D1:B5E9 23 -  -  -  	inc hl
  178 D1:B5EA 23 -  -  -  	inc hl;past data table 
  179 D1:B5EB -  -  -  -  
  180 D1:B5EB 3E EF -  -  	ld a,239
  181 D1:B5ED -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  182 D1:B5ED D6 00 -  -  	sub 0;cam pos 
  183 D1:B5EF D8 -  -  -  	ret c;if bottom frame is offscreen 
  184 D1:B5F0 C8 -  -  -  	ret z 
  185 D1:B5F1 -  -  -  -  	;a holds distance of top line of lower frame from bottom of screen starting from 1
  186 D1:B5F1 32 F8 B5 D1 	ld (dfgs_lower_frame_height),a
  187 D1:B5F5 -  -  -  -  
  188 D1:B5F5 -  -  -  -  dfgs_lower_loop:
  189 D1:B5F5 7E -  -  -  	ld a,(hl);y
  190 D1:B5F6 23 -  -  -  	inc hl
  191 D1:B5F7 -  -  -  -  dfgs_lower_frame_height .equ $ + 1
  192 D1:B5F7 C6 00 -  -  	add a,0;add frame height 
  193 D1:B5F9 DA 07 B6 D1 	jp c,dfgs_lower_cont;sprite onscreen
  194 D1:B5FD -  -  -  -  dfgs_lower_skip:;sprite offscreen
  195 D1:B5FD 23 -  -  -  	inc hl
  196 D1:B5FE 23 -  -  -  	inc hl
  197 D1:B5FF 7E -  -  -  	ld a,(hl)
  198 D1:B600 23 -  -  -  	inc hl 
  199 D1:B601 B7 -  -  -  	or a 
  200 D1:B602 C2 F5 B5 D1 	jp nz,dfgs_lower_loop
  201 D1:B606 C9 -  -  -  	ret
  202 D1:B607 -  -  -  -  	
  203 D1:B607 -  -  -  -  dfgs_lower_cont:
  204 D1:B607 -  -  -  -  	;a holds sprite dist from bottom of screen, from 0
  205 D1:B607 BE -  -  -  	cp (hl);compare to height
  206 D1:B608 DA 39 B6 D1 	jp c,dfgs_lower_bottom_cut
  207 D1:B60C -  -  -  -  	
  208 D1:B60C -  -  -  -  	;full sprite 
  209 D1:B60C D9 -  -  -  	exx
  210 D1:B60D -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1
  211 D1:B60D 11 00 00 00 	ld de,0
  212 D1:B611 D9 -  -  -  	exx
  213 D1:B612 CD 67 B6 D1 	call dfgs_setup_draw
  214 D1:B616 CB 45 -  -  	bit 0,l
  215 D1:B618 CA 24 B6 D1 	jp z,dfgs_lower_full_fast
  216 D1:B61C CD 28 AC D1 	call draw_slow_sprite_full
  217 D1:B620 C3 28 B6 D1 	jp dfgs_lower_full_slow
  218 D1:B624 -  -  -  -  dfgs_lower_full_fast:
  219 D1:B624 CD 0E AC D1 	call draw_fast_sprite_full
  220 D1:B628 -  -  -  -  dfgs_lower_full_slow:
  221 D1:B628 D9 -  -  -  	exx
  222 D1:B629 11 00 00 00 	ld de,0 
  223 D1:B62D 01 00 00 00 	ld bc,0
  224 D1:B631 7E -  -  -  	ld a,(hl)
  225 D1:B632 23 -  -  -  	inc hl 
  226 D1:B633 B7 -  -  -  	or a 
  227 D1:B634 C2 F5 B5 D1 	jp nz,dfgs_lower_loop
  228 D1:B638 C9 -  -  -  	ret
  229 D1:B639 -  -  -  -  	
  230 D1:B639 -  -  -  -  	
  231 D1:B639 -  -  -  -  dfgs_lower_bottom_cut:
  232 D1:B639 D9 -  -  -  	exx
  233 D1:B63A -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1
  234 D1:B63A 11 00 00 00 	ld de,0
  235 D1:B63E D9 -  -  -  	exx
  236 D1:B63F CD 67 B6 D1 	call dfgs_setup_draw
  237 D1:B643 3C -  -  -  	inc a;for bottom cuts
  238 D1:B644 CB 45 -  -  	bit 0,l 
  239 D1:B646 CA 52 B6 D1 	jp z,dfgs_lower_bottom_fast
  240 D1:B64A CD 8C AC D1 	call draw_slow_sprite_bottom_cut
  241 D1:B64E C3 56 B6 D1 	jp dfgs_lower_bottom_slow
  242 D1:B652 -  -  -  -  dfgs_lower_bottom_fast:
  243 D1:B652 CD C3 AB D1 	call draw_fast_sprite_bottom_cut
  244 D1:B656 -  -  -  -  dfgs_lower_bottom_slow:
  245 D1:B656 D9 -  -  -  	exx
  246 D1:B657 11 00 00 00 	ld de,0 
  247 D1:B65B 01 00 00 00 	ld bc,0
  248 D1:B65F 7E -  -  -  	ld a,(hl)
  249 D1:B660 23 -  -  -  	inc hl 
  250 D1:B661 B7 -  -  -  	or a 
  251 D1:B662 C2 F5 B5 D1 	jp nz,dfgs_lower_loop
  252 D1:B666 -  -  -  -  	
  253 D1:B666 C9 -  -  -  	ret
  254 D1:B667 -  -  -  -  	
  255 D1:B667 -  -  -  -  	
  256 D1:B667 -  -  -  -  	
  257 D1:B667 -  -  -  -  	
  258 D1:B667 -  -  -  -  	
  259 D1:B667 -  -  -  -  	
  260 D1:B667 -  -  -  -  	
  261 D1:B667 -  -  -  -  	
  262 D1:B667 -  -  -  -  	
  263 D1:B667 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  264 D1:B667 -  -  -  -  ;(hl) = height 	
  265 D1:B667 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  266 D1:B667 -  -  -  -  ;returns hl = sprite data, de = vram position
  267 D1:B667 -  -  -  -  dfgs_setup_draw:
  268 D1:B667 23 -  -  -  	inc hl
  269 D1:B668 01 00 00 00 	ld bc,0
  270 D1:B66C 4E -  -  -  	ld c,(hl); x pos
  271 D1:B66D 23 -  -  -  	inc hl;to index
  272 D1:B66E E5 -  -  -  	push hl
  273 D1:B66F C5 -  -  -  	push bc
  274 D1:B670 D9 -  -  -  	exx;toshadow
  275 D1:B671 C1 -  -  -  	pop bc
  276 D1:B672 26 A0 -  -  	ld h,160
  277 D1:B674 6F -  -  -  	ld l,a
  278 D1:B675 ED 6C -  -  	mlt hl;subtract from vram
  279 D1:B677 37 -  -  -  	scf 
  280 D1:B678 3F -  -  -  	ccf
  281 D1:B679 EB -  -  -  	ex de,hl;hl holds vram
  282 D1:B67A ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  283 D1:B67C 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  284 D1:B67D EB -  -  -  	ex de,hl;put in de
  285 D1:B67E E1 -  -  -  	pop hl;back to frame data 
  286 D1:B67F 4E -  -  -  	ld c,(hl);sprite index
  287 D1:B680 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  288 D1:B680 21 00 00 00 	ld hl,0 ;load sprite table 
  289 D1:B684 09 -  -  -  	add hl,bc
  290 D1:B685 09 -  -  -  	add hl,bc 
  291 D1:B686 09 -  -  -  	add hl,bc;move to sprite ptr
  292 D1:B687 -  -  -  -  	;call prgmpause
  293 D1:B687 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  294 D1:B689 -  -  -  -  
  295 D1:B689 C9 -  -  -  	ret
  296 D1:B68A -  -  -  -  
  297 D1:B68A -  -  -  -  	
  298 D1:B68A -  -  -  -  	
  299 D1:B68A -  -  -  -  	
  300 D1:B68A -  -  -  -  	
  301 D1:B68A -  -  -  -  	
  302 D1:B68A -  -  -  -  	
  303 D1:B68A -  -  -  -  	
  304 D1:B68A -  -  -  -  	
  305 D1:B68A -  -  -  -  	
  306 D1:B68A -  -  -  -  	
  307 D1:B68A -  -  -  -  	
  308 D1:B68A -  -  -  -  	
Listing for file "ascent.asm"
  391 D1:B68A -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B68A -  -  -  -  
    2 D1:B68A -  -  -  -  FG_sprite_table_1:
    3 D1:B68A 01 00 D4 -  	.dl fg_sprite_1;9*4
    4 D1:B68D 01 00 D4 -  	.dl fg_sprite_1
    5 D1:B690 A1 00 D4 -  	.dl fg_sprite_2;8*8
    6 D1:B693 40 01 D4 -  	.dl fg_sprite_3;8*8 fast
    7 D1:B696 E0 01 D4 -  	.dl fg_sprite_4;8*8 fast 
    8 D1:B699 -  -  -  -  	
    9 D1:B699 -  -  -  -  
   10 D1:B699 -  -  -  -  
   11 D1:B699 -  -  -  -  
   12 D1:B699 -  -  -  -  
   13 D1:B699 -  -  -  -  FG_Frame_2:
   14 D1:B699 8A B6 D1 -  	.dl FG_sprite_table_1
   15 D1:B69C 03 03 00 01 	.db 3,3,0,1
   16 D1:B6A0 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B6A4 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B6A8 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B6AC 32 07 14 02 	.db 50,7,20,2
   20 D1:B6B0 1E 07 19 03 	.db 30,7,25,3
   21 D1:B6B4 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B6B8 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B6BC 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B6C0 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B6C4 -  -  -  -  
   26 D1:B6C4 -  -  -  -  
   27 D1:B6C4 -  -  -  -  FG_Frame_1:
   28 D1:B6C4 -  -  -  -  	;.dl sprite table ptr
   29 D1:B6C4 -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B6C4 8A B6 D1 -  	.dl FG_sprite_table_1
   31 D1:B6C7 FF 03 3C 01 	.db 255,3,60,1
   32 D1:B6CB FF 07 46 02 	.db 255,7,70,2
   33 D1:B6CF FF 07 4B 03 	.db 255,7,75,3
   34 D1:B6D3 FF 07 50 04 	.db 255,7,80,4
   35 D1:B6D7 FE 03 55 01 	.db 254,3,85,1
   36 D1:B6DB FE 07 5A 04 	.db 254,7,90,4
   37 D1:B6DF C8 03 0A 01 	.db 200,3,10,1
   38 D1:B6E3 C8 07 0F 02 	.db 200,7,15,2
   39 D1:B6E7 C8 07 14 03 	.db 200,7,20,3
   40 D1:B6EB 32 07 0A 02 	.db 50,7,10,2
   41 D1:B6EF 0F 07 50 03 	.db 15,7,80,3
   42 D1:B6F3 10 07 41 03 	.db 16,7,65,3
   43 D1:B6F7 11 03 46 01 	.db 17,3,70,1
   44 D1:B6FB 09 07 0A 02 	.db 9,7,10,2
   45 D1:B6FF 08 07 14 02 	.db 8,7,20,2
   46 D1:B703 08 07 1E 03 	.db 8,7,30,3
   47 D1:B707 07 07 23 02 	.db 7,7,35,2
   48 D1:B70B 06 07 28 02 	.db 6,7,40,2
   49 D1:B70F 05 07 2D 02 	.db 5,7,45,2
   50 D1:B713 00 07 32 02 	.db 0,7,50,2
   51 D1:B717 04 07 37 03 	.db 4,7,55,3
   52 D1:B71B 02 07 3C 04 	.db 2,7,60,4
   53 D1:B71F 01 03 41 00 	.db 1,3,65,0
   54 D1:B723 -  -  -  -  	
   55 D1:B723 -  -  -  -  
   56 D1:B723 -  -  -  -  FG_Frame_0:
   57 D1:B723 8A B6 D1 -  	.dl FG_sprite_table_1
   58 D1:B726 FF 03 46 01 	.db 255,3,70,1
   59 D1:B72A FF 07 4B 02 	.db 255,7,75,2
   60 D1:B72E FF 07 5F 03 	.db 255,7,95,3
   61 D1:B732 FF 07 50 04 	.db 255,7,80,4
   62 D1:B736 FE 03 78 01 	.db 254,3,120,1
   63 D1:B73A FE 07 7D 04 	.db 254,7,125,4
   64 D1:B73E C8 03 0A 01 	.db 200,3,10,1
   65 D1:B742 C8 07 0F 02 	.db 200,7,15,2
   66 D1:B746 C8 07 14 03 	.db 200,7,20,3
   67 D1:B74A C8 03 00 00 	.db 200,3,0,0
   68 D1:B74E -  -  -  -  	
   69 D1:B74E -  -  -  -  	
   70 D1:B74E -  -  -  -  	
   71 D1:B74E -  -  -  -  
   72 D1:B74E -  -  -  -  	
   73 D1:B74E -  -  -  -  	
   74 D1:B74E -  -  -  -  	
   75 D1:B74E -  -  -  -  	
   76 D1:B74E -  -  -  -  	
   77 D1:B74E -  -  -  -  	
   78 D1:B74E -  -  -  -  	
Listing for file "ascent.asm"
  392 D1:B74E -  -  -  -  
  393 D1:B74E -  -  -  -  
