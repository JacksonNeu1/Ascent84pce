    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E -  -  -  -  	;jp time_test_start
   20 D1:A88E -  -  -  -  	
   21 D1:A88E 21 00 02 E3 	ld	hl,mpLcdPalette
   22 D1:A892 -  -  -  -  
   23 D1:A892 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   24 D1:A894 77 -  -  -  	ld	(hl),a
   25 D1:A895 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   26 D1:A897 23 -  -  -  	inc hl
   27 D1:A898 77 -  -  -  	ld	(hl),a
   28 D1:A899 23 -  -  -  	inc hl;1yellow
   29 D1:A89A 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   30 D1:A89C 77 -  -  -  	ld	(hl),a
   31 D1:A89D 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   32 D1:A89F 23 -  -  -  	inc hl
   33 D1:A8A0 77 -  -  -  	ld	(hl),a
   34 D1:A8A1 -  -  -  -  	
   35 D1:A8A1 23 -  -  -  	inc hl;2blue
   36 D1:A8A2 3E 1F -  -  	ld	a,%00011111 ;GGGBBBBB
   37 D1:A8A4 77 -  -  -  	ld	(hl),a
   38 D1:A8A5 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   39 D1:A8A7 23 -  -  -  	inc hl
   40 D1:A8A8 77 -  -  -  	ld	(hl),a
   41 D1:A8A9 -  -  -  -  	
   42 D1:A8A9 23 -  -  -  	inc hl;3r
   43 D1:A8AA 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   44 D1:A8AC 77 -  -  -  	ld	(hl),a
   45 D1:A8AD 3E 7C -  -  	ld  a,%01111100 ; GRRRRRGG
   46 D1:A8AF 23 -  -  -  	inc hl
   47 D1:A8B0 77 -  -  -  	ld	(hl),a
   48 D1:A8B1 -  -  -  -  	
   49 D1:A8B1 23 -  -  -  	inc hl;4g
   50 D1:A8B2 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   51 D1:A8B4 77 -  -  -  	ld	(hl),a
   52 D1:A8B5 3E 83 -  -  	ld  a,%10000011 ; GRRRRRGG
   53 D1:A8B7 23 -  -  -  	inc hl
   54 D1:A8B8 77 -  -  -  	ld	(hl),a
   55 D1:A8B9 -  -  -  -  	
   56 D1:A8B9 23 -  -  -  	inc hl;5 white
   57 D1:A8BA 3E FF -  -  	ld	a,%11111111 ;GGGBBBBB
   58 D1:A8BC 77 -  -  -  	ld	(hl),a
   59 D1:A8BD 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   60 D1:A8BF 23 -  -  -  	inc hl
   61 D1:A8C0 77 -  -  -  	ld	(hl),a
   62 D1:A8C1 -  -  -  -  
   63 D1:A8C1 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
   64 D1:A8C5 3E 25 -  -  	ld	a,lcdBpp4
   65 D1:A8C7 32 18 00 E3 	ld (mpLcdCtrl),a	
   66 D1:A8CB -  -  -  -  	
   67 D1:A8CB -  -  -  -  	
   68 D1:A8CB -  -  -  -  fg_sprite_1 .equ vRam + 1
   69 D1:A8CB -  -  -  -  fg_sprite_2 .equ vRam + 160 + 1
   70 D1:A8CB -  -  -  -  fg_sprite_3 .equ vRam + 320;fast
   71 D1:A8CB -  -  -  -  fg_sprite_4 .equ vRam + 480;fast
   72 D1:A8CB -  -  -  -  
   73 D1:A8CB -  -  -  -  
   74 D1:A8CB -  -  -  -  
   75 D1:A8CB -  -  -  -  
   76 D1:A8CB CD 51 B5 D1 	call sdcomp_set_bg_sprite
   77 D1:A8CF CD 42 B5 D1 	call sdcomp_reset_fast_sprite
   78 D1:A8D3 CD 8E B3 D1 	call sdcomp_reset_flip
   79 D1:A8D7 -  -  -  -  	;call sdcomp_set_offset
   80 D1:A8D7 21 6D AE D1 	ld hl,testBGSpriteComp4
   81 D1:A8DB 11 80 98 D4 	ld de, testBG4 + 160
   82 D1:A8DF CD F7 AF D1 	call sprite_decompress
   83 D1:A8E3 -  -  -  -  	
   84 D1:A8E3 -  -  -  -  	
   85 D1:A8E3 21 00 2C D5 	ld hl,vRam + (320*240)
   86 D1:A8E7 22 10 00 E3 	ld (mpLcdBase),hl
   87 D1:A8EB -  -  -  -  	
   88 D1:A8EB -  -  -  -  	
   89 D1:A8EB 21 80 98 D4 	ld hl,testBG4 + 160
   90 D1:A8EF 11 00 2C D5 	ld de,vRam + (320*240)
   91 D1:A8F3 3E 00 -  -  	ld a,0 
   92 D1:A8F5 CD D1 AB D1 	call draw_bg_sprite_line
   93 D1:A8F9 -  -  -  -  	
   94 D1:A8F9 21 80 98 D4 	ld hl,testBG4 + 160
   95 D1:A8FD 11 A0 2C D5 	ld de,vRam + (320*240) + 160
   96 D1:A901 3E 01 -  -  	ld a,1 
   97 D1:A903 CD D1 AB D1 	call draw_bg_sprite_line
   98 D1:A907 -  -  -  -  	
   99 D1:A907 21 80 98 D4 	ld hl,testBG4 + 160
  100 D1:A90B 11 40 2D D5 	ld de,vRam + (320*240) + (160 * 2)
  101 D1:A90F 3E 02 -  -  	ld a,2 
  102 D1:A911 CD D1 AB D1 	call draw_bg_sprite_line
  103 D1:A915 21 80 98 D4 	ld hl,testBG4 + 160
  104 D1:A919 11 E0 2D D5 	ld de,vRam + (320*240) + (160 * 3)
  105 D1:A91D 3E 03 -  -  	ld a,3 
  106 D1:A91F CD D1 AB D1 	call draw_bg_sprite_line
  107 D1:A923 21 80 98 D4 	ld hl,testBG4 + 160
  108 D1:A927 11 80 2E D5 	ld de,vRam + (320*240) + (160 * 4)
  109 D1:A92B 3E 04 -  -  	ld a,4
  110 D1:A92D CD D1 AB D1 	call draw_bg_sprite_line
  111 D1:A931 21 80 98 D4 	ld hl,testBG4 + 160
  112 D1:A935 11 20 2F D5 	ld de,vRam + (320*240) + (160 * 5)
  113 D1:A939 3E 05 -  -  	ld a,5 
  114 D1:A93B -  -  -  -  	
  115 D1:A93B -  -  -  -  	
  116 D1:A93B CD D1 AA D1 	call prgmpause
  117 D1:A93F -  -  -  -  
  118 D1:A93F -  -  -  -  	;call fast_fg_sprite_set_flip
  119 D1:A93F -  -  -  -  	;jp time_test_start
  120 D1:A93F CD 66 B5 D1 	call sdcomp_reset_bg_sprite
  121 D1:A943 CD 42 B5 D1 	call sdcomp_reset_fast_sprite
  122 D1:A947 CD 8E B3 D1 	call sdcomp_reset_flip
  123 D1:A94B CD B9 B3 D1 	call sdcomp_set_offset
  124 D1:A94F 21 D9 AD D1 	ld hl,testSpriteCompressed4
  125 D1:A953 11 01 00 D4 	ld de,fg_sprite_1
  126 D1:A957 CD F7 AF D1 	call sprite_decompress
  127 D1:A95B -  -  -  -  	
  128 D1:A95B -  -  -  -  	
  129 D1:A95B CD 4B B3 D1 	call sdcomp_set_flip
  130 D1:A95F CD B9 B3 D1 	call sdcomp_set_offset
  131 D1:A963 21 A7 AD D1 	ld hl,testSpriteCompressed
  132 D1:A967 11 A1 00 D4 	ld de,fg_sprite_2
  133 D1:A96B CD F7 AF D1 	call sprite_decompress
  134 D1:A96F -  -  -  -  	
  135 D1:A96F CD 8E B3 D1 	call sdcomp_reset_flip
  136 D1:A973 CD 33 B5 D1 	call sdcomp_set_fast_sprite
  137 D1:A977 21 F9 AD D1 	ld hl,testSpriteCompressedFast
  138 D1:A97B 11 40 01 D4 	ld de,fg_sprite_3
  139 D1:A97F CD F7 AF D1 	call sprite_decompress
  140 D1:A983 -  -  -  -  	
  141 D1:A983 -  -  -  -  	
  142 D1:A983 CD 4B B3 D1 	call sdcomp_set_flip
  143 D1:A987 -  -  -  -  ;	call sdcomp_set_fast_sprite
  144 D1:A987 21 F9 AD D1 	ld hl,testSpriteCompressedFast
  145 D1:A98B 11 E0 01 D4 	ld de,fg_sprite_4
  146 D1:A98F CD F7 AF D1 	call sprite_decompress
  147 D1:A993 -  -  -  -  	
  148 D1:A993 21 00 2C D5 	ld hl,vRam + (320*240)
  149 D1:A997 22 10 00 E3 	ld (mpLcdBase),hl
  150 D1:A99B 22 16 B6 D1 	ld (dfgs_vram_top_1),hl
  151 D1:A99F 22 72 B6 D1 	ld (dfgs_vram_top_2),hl
  152 D1:A9A3 01 60 95 00 	ld bc,160*239;bottom line of vram
  153 D1:A9A7 09 -  -  -  	add hl,bc 
  154 D1:A9A8 22 DE B6 D1 	ld (dfgs_vram_bottom_1),hl 
  155 D1:A9AC 22 AE B6 D1 	ld (dfgs_vram_bottom_2),hl 
  156 D1:A9B0 22 3A B7 D1 	ld (dfgs_vram_bottom_3),hl 
  157 D1:A9B4 22 67 B7 D1 	ld (dfgs_vram_bottom_4),hl 
  158 D1:A9B8 -  -  -  -  	
  159 D1:A9B8 3E FF -  -  	ld a,255
  160 D1:A9BA -  -  -  -  	
  161 D1:A9BA -  -  -  -  test_fg_loop:
  162 D1:A9BA F5 -  -  -  	push af
  163 D1:A9BB 32 FD B5 D1 	ld (dfgs_cam_height_1),a
  164 D1:A9BF 32 51 B6 D1 	ld (dfgs_cam_height_2),a
  165 D1:A9C3 32 1A B7 D1 	ld (dfgs_cam_height_3),a
  166 D1:A9C7 21 C5 B7 D1 	ld hl,FG_Frame_2
  167 D1:A9CB CD E7 B5 D1 	call draw_fg_sprites
  168 D1:A9CF -  -  -  -  	
  169 D1:A9CF -  -  -  -  	
  170 D1:A9CF 3E FF -  -  	ld a,255
  171 D1:A9D1 01 00 96 00 	ld bc,160*240
  172 D1:A9D5 21 00 2C D5 	ld hl,vRam + (320*240)
  173 D1:A9D9 CD E0 10 02 	call _MemSet
  174 D1:A9DD F1 -  -  -  	pop af 
  175 D1:A9DE 3D -  -  -  	dec a 
  176 D1:A9DF C2 BA A9 D1 	jp nz,test_fg_loop
  177 D1:A9E3 -  -  -  -  	
  178 D1:A9E3 -  -  -  -  	
  179 D1:A9E3 -  -  -  -  	
  180 D1:A9E3 -  -  -  -  fg_sprite_unity .equ vram + 480 + 160
  181 D1:A9E3 CD 66 B5 D1 	call sdcomp_reset_bg_sprite
  182 D1:A9E7 CD 42 B5 D1 	call sdcomp_reset_fast_sprite
  183 D1:A9EB CD 8E B3 D1 	call sdcomp_reset_flip
  184 D1:A9EF 21 A9 AE D1 	ld hl,test_unity_compressed_1
  185 D1:A9F3 11 80 02 D4 	ld de,fg_sprite_unity
  186 D1:A9F7 CD F7 AF D1 	call sprite_decompress
  187 D1:A9FB -  -  -  -  	
  188 D1:A9FB 11 08 5E D5 	ld de,vRam +(320*280) + 8
  189 D1:A9FF 21 80 02 D4 	ld hl,fg_sprite_unity
  190 D1:AA03 CD 4C AC D1 	call draw_slow_sprite_full
  191 D1:AA07 -  -  -  -  	
  192 D1:AA07 CD D1 AA D1 	call prgmpause
  193 D1:AA0B -  -  -  -  	
  194 D1:AA0B -  -  -  -  #comment 	
  195 D1:AA0B             	ld de,vRam +(160*40)
  196 D1:AA0B             	ld hl,vRam
  197 D1:AA0B             	ld a,2
  198 D1:AA0B             	call draw_slow_sprite_bottom_cut
  199 D1:AA0B             	
  200 D1:AA0B             	
  201 D1:AA0B             	ld de,vRam +(160*30)
  202 D1:AA0B             	ld hl,vRam
  203 D1:AA0B             	call draw_slow_sprite_full
  204 D1:AA0B             	
  205 D1:AA0B             	
  206 D1:AA0B             	ld de,vRam +(160*40)+5
  207 D1:AA0B             	ld hl,vRam+160
  208 D1:AA0B             	ld a,3
  209 D1:AA0B             	call draw_slow_sprite_top_cut
  210 D1:AA0B             	
  211 D1:AA0B             	ld de,vRam +(160*30)+5
  212 D1:AA0B             	ld hl,vRam+160
  213 D1:AA0B             	call draw_slow_sprite_full
  214 D1:AA0B             	
  215 D1:AA0B             	 #endcomment
  216 D1:AA0B -  -  -  -  	
  217 D1:AA0B -  -  -  -  	
  218 D1:AA0B -  -  -  -  	
  219 D1:AA0B -  -  -  -  ;	ld hl,vRam + (160*5)
  220 D1:AA0B -  -  -  -  ;	ld (draw_bg_vram_addr),hl
  221 D1:AA0B -  -  -  -  ;	ld hl,$000080
  222 D1:AA0B -  -  -  -  ;	call draw_bg_line
  223 D1:AA0B -  -  -  -  	
  224 D1:AA0B -  -  -  -  	
  225 D1:AA0B -  -  -  -  	
  226 D1:AA0B -  -  -  -  	
  227 D1:AA0B -  -  -  -  	;ld de,vram +(160*10)
  228 D1:AA0B -  -  -  -  	;ld hl,testFastSprite+3
  229 D1:AA0B -  -  -  -  	;exx
  230 D1:AA0B -  -  -  -  	;ld b,8
  231 D1:AA0B -  -  -  -  	;ld hl,8
  232 D1:AA0B -  -  -  -  	;ld de,testFastSprite_t - 1
  233 D1:AA0B -  -  -  -  	;ld c,%10000000
  234 D1:AA0B -  -  -  -  	;call draw_fast_fg_sprite
  235 D1:AA0B -  -  -  -  	
  236 D1:AA0B -  -  -  -  	
  237 D1:AA0B -  -  -  -  ;	ld de,vram +(160*20) - 1
  238 D1:AA0B -  -  -  -  ;	ld hl,test_fast_sprite
  239 D1:AA0B -  -  -  -  ;	ld a,1
  240 D1:AA0B -  -  -  -  ;	call draw_fast_sprite_top_cut
  241 D1:AA0B -  -  -  -  	
  242 D1:AA0B -  -  -  -  	
  243 D1:AA0B CD 42 B5 D1 	call sdcomp_reset_fast_sprite
  244 D1:AA0F CD 51 B5 D1 	call sdcomp_set_bg_sprite
  245 D1:AA13 CD 8E B3 D1 	call sdcomp_reset_flip
  246 D1:AA17 -  -  -  -  	;call sdcomp_set_offset
  247 D1:AA17 21 A7 AD D1 	ld hl,testSpriteCompressed
  248 D1:AA1B 11 C0 03 D4 	ld de,vRam+(160*6)
  249 D1:AA1F CD F7 AF D1 	call sprite_decompress
  250 D1:AA23 -  -  -  -  	
  251 D1:AA23 -  -  -  -  	
  252 D1:AA23 -  -  -  -  testBG1 .equ vRam+(160*240)
  253 D1:AA23 -  -  -  -  testBG2 .equ testBG1 + 160
  254 D1:AA23 -  -  -  -  testBG3 .equ testBG2 + 160
  255 D1:AA23 -  -  -  -  testBG4 .equ testBG3 + 160
  256 D1:AA23 -  -  -  -  	
  257 D1:AA23 21 43 AE D1 	ld hl,testBGSpriteComp
  258 D1:AA27 11 00 96 D4 	ld de,testBG1
  259 D1:AA2B CD F7 AF D1 	call sprite_decompress
  260 D1:AA2F -  -  -  -  	
  261 D1:AA2F 21 58 AE D1 	ld hl,testBGSpriteComp2
  262 D1:AA33 11 A0 96 D4 	ld de,testBG2
  263 D1:AA37 CD F7 AF D1 	call sprite_decompress
  264 D1:AA3B -  -  -  -  	
  265 D1:AA3B 21 66 AE D1 	ld hl,testBGSpriteComp3
  266 D1:AA3F 11 40 97 D4 	ld de,testBG3
  267 D1:AA43 CD F7 AF D1 	call sprite_decompress
  268 D1:AA47 -  -  -  -  	
  269 D1:AA47 CD 66 B5 D1 	call sdcomp_reset_bg_sprite
  270 D1:AA4B -  -  -  -  	
  271 D1:AA4B -  -  -  -  	
  272 D1:AA4B 3E 00 -  -  	ld a,0
  273 D1:AA4D 21 00 96 D4 	ld hl,$d49600
  274 D1:AA51 11 00 2C D5 	ld de,vRam + (320*240)
  275 D1:AA55 CD D1 AB D1 	call draw_bg_sprite_line
  276 D1:AA59 -  -  -  -  	
  277 D1:AA59 -  -  -  -  	
  278 D1:AA59 3E FF -  -  	ld a,255
  279 D1:AA5B 21 00 2C D5 	ld hl,vRam + (320*240)
  280 D1:AA5F 22 B5 AB D1 	ld (dbgl_vram_line_start),hl
  281 D1:AA63 21 A9 AF D1 	ld hl,bg_data_frame_1
  282 D1:AA67 CD 36 AB D1 	call draw_bg_line 
  283 D1:AA6B -  -  -  -  	
  284 D1:AA6B -  -  -  -  
  285 D1:AA6B -  -  -  -  	
  286 D1:AA6B -  -  -  -  	
  287 D1:AA6B 3E FF -  -  	ld a,255
  288 D1:AA6D 21 00 2C D5 	ld hl,vRam + (320*240)
  289 D1:AA71 -  -  -  -  bg_draw_test_loop:
  290 D1:AA71 22 B5 AB D1 	ld (dbgl_vram_line_start),hl 
  291 D1:AA75 01 A0 00 00 	ld bc,160
  292 D1:AA79 09 -  -  -  	add hl,bc 
  293 D1:AA7A E5 -  -  -  	push hl
  294 D1:AA7B F5 -  -  -  	push af
  295 D1:AA7C 21 A9 AF D1 	ld hl,bg_data_frame_1
  296 D1:AA80 CD 36 AB D1 	call draw_bg_line 
  297 D1:AA84 F1 -  -  -  	pop af
  298 D1:AA85 E1 -  -  -  	pop hl
  299 D1:AA86 3D -  -  -  	dec a
  300 D1:AA87 C2 71 AA D1 	jp nz,bg_draw_test_loop
  301 D1:AA8B -  -  -  -  
  302 D1:AA8B CD D1 AA D1 	call prgmpause
  303 D1:AA8F -  -  -  -  	
  304 D1:AA8F 21 00 00 D4 	ld hl,vRam
  305 D1:AA93 22 10 00 E3 	ld (mpLcdBase),hl
  306 D1:AA97 -  -  -  -  	
  307 D1:AA97 -  -  -  -  	
  308 D1:AA97 -  -  -  -  	
  309 D1:AA97 -  -  -  -  	
  310 D1:AA97 -  -  -  -  	
  311 D1:AA97 -  -  -  -  #comment 	ld hl,vRam+(160*6)
  312 D1:AA97             	ld de,vRam + (160*90) + 10
  313 D1:AA97             	ld a,0 
  314 D1:AA97             	call draw_bg_sprite_line
  315 D1:AA97             	
  316 D1:AA97             	ld hl,vRam+(160*6)
  317 D1:AA97             	ld de,vRam + (160*91) + 10
  318 D1:AA97             	ld a,1 
  319 D1:AA97             	call draw_bg_sprite_line
  320 D1:AA97             	
  321 D1:AA97             	ld hl,vRam+(160*6)
  322 D1:AA97             	ld de,vRam + (160*92) + 10
  323 D1:AA97             	ld a,2 
  324 D1:AA97             	call draw_bg_sprite_line
  325 D1:AA97             	ld hl,vRam+(160*6)
  326 D1:AA97             	ld de,vRam + (160*93) + 10
  327 D1:AA97             	ld a,3 
  328 D1:AA97             	call draw_bg_sprite_line
  329 D1:AA97             	ld hl,vRam+(160*6)
  330 D1:AA97             	ld de,vRam + (160*94) + 10
  331 D1:AA97             	ld a,4
  332 D1:AA97             	call draw_bg_sprite_line
  333 D1:AA97             	ld hl,vRam+(160*6)
  334 D1:AA97             	ld de,vRam + (160*95) + 10
  335 D1:AA97             	ld a,5 
  336 D1:AA97             	call draw_bg_sprite_line
  337 D1:AA97             	ld hl,vRam+(160*6)
  338 D1:AA97             	ld de,vRam + (160*96) + 10
  339 D1:AA97             	ld a,6 
  340 D1:AA97             	call draw_bg_sprite_line
  341 D1:AA97             	ld hl,vRam+(160*6)
  342 D1:AA97             	ld de,vRam + (160*97) + 10
  343 D1:AA97             	ld a,7 
  344 D1:AA97             	call draw_bg_sprite_line
  345 D1:AA97              #endcomment
  346 D1:AA97 -  -  -  -  	
  347 D1:AA97 -  -  -  -  	
  348 D1:AA97 -  -  -  -  	
  349 D1:AA97 -  -  -  -  	
  350 D1:AA97 -  -  -  -  	
  351 D1:AA97 -  -  -  -  
  352 D1:AA97 -  -  -  -  exit_prgm:
  353 D1:AA97 21 00 00 D4 	ld hl,vRam
  354 D1:AA9B 22 10 00 E3 	ld (mpLcdBase),hl
  355 D1:AA9F CD 10 08 02 	call _ClrScrnFull
  356 D1:AAA3 3E 2D -  -  	ld	a,lcdBpp16
  357 D1:AAA5 32 18 00 E3 	ld	(mpLcdCtrl),a
  358 D1:AAA9 CD 3C 1A 02 	call _DrawStatusBar
  359 D1:AAAD -  -  -  -  	
  360 D1:AAAD FB -  -  -  	ei				; reset screen back to normal
  361 D1:AAAE C9 -  -  -  	ret			; return to os
  362 D1:AAAF -  -  -  -  
  363 D1:AAAF -  -  -  -  
  364 D1:AAAF -  -  -  -  printHL:;=================REMOVE
  365 D1:AAAF E5 -  -  -  	push hl
  366 D1:AAB0 21 00 00 D4 	ld hl,vRam
  367 D1:AAB4 22 10 00 E3 	ld (mpLcdBase),hl
  368 D1:AAB8 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  369 D1:AABC 3E 2D -  -  	ld	a,lcdBpp16
  370 D1:AABE 32 18 00 E3 	ld (mpLcdCtrl),a
  371 D1:AAC2 E1 -  -  -  	pop hl
  372 D1:AAC3 CD E0 1E 02 	call _DispHL
  373 D1:AAC7 FB -  -  -  	ei
  374 D1:AAC8 CD 8C 0D 02 	call _GetKey
  375 D1:AACC F3 -  -  -  	di
  376 D1:AACD C3 97 AA D1 	jp exit_prgm
  377 D1:AAD1 -  -  -  -  
  378 D1:AAD1 -  -  -  -  
  379 D1:AAD1 -  -  -  -  prgmpause:
  380 D1:AAD1 D5 -  -  -  	push de 
  381 D1:AAD2 E5 -  -  -  	push hl 
  382 D1:AAD3 FB -  -  -  	ei
  383 D1:AAD4 CD 8C 0D 02 	call _GetKey
  384 D1:AAD8 F3 -  -  -  	di
  385 D1:AAD9 E1 -  -  -  	pop hl 
  386 D1:AADA D1 -  -  -  	pop de 
  387 D1:AADB C9 -  -  -  	ret
  388 D1:AADC -  -  -  -  
  389 D1:AADC -  -  -  -  test_addr:
  390 D1:AADC 00 00 00 -  	.dl 0
  391 D1:AADF -  -  -  -  
  392 D1:AADF -  -  -  -  draw_buffer:
  393 D1:AADF 00 00 00 -  	.dl 0
  394 D1:AAE2 -  -  -  -  
  395 D1:AAE2 -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AAE2 -  -  -  -  
    2 D1:AAE2 -  -  -  -  
    3 D1:AAE2 -  -  -  -  
    4 D1:AAE2 -  -  -  -  time_test_start:
    5 D1:AAE2 -  -  -  -  
    6 D1:AAE2 -  -  -  -  		; 76543210	
    7 D1:AAE2 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AAE4 32 30 00 F2 	ld ($F20030),a
    9 D1:AAE8 -  -  -  -  	;	  fedcba98
   10 D1:AAE8 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AAEA 32 31 00 F2 	ld ($F20031),a
   12 D1:AAEE 3E 00 -  -  	ld a,0
   13 D1:AAF0 32 00 00 F2 	ld ($F20000),a
   14 D1:AAF4 32 01 00 F2 	ld ($F20001),a
   15 D1:AAF8 32 02 00 F2 	ld ($F20002),a
   16 D1:AAFC 32 03 00 F2 	ld ($F20003),a
   17 D1:AB00 -  -  -  -  	
   18 D1:AB00 21 2C 01 00 	ld hl,300
   19 D1:AB04 -  -  -  -  	
   20 D1:AB04 -  -  -  -  time_testing_loop:
   21 D1:AB04 E5 -  -  -  	push hl
   22 D1:AB05 01 E8 03 00 	ld bc,1000
   23 D1:AB09 -  -  -  -  time_testing_loop_2:
   24 D1:AB09 C5 -  -  -  	push bc
   25 D1:AB0A -  -  -  -  	;instruction here
   26 D1:AB0A 11 C0 12 D4 	ld de,vram +(160*30)
   27 D1:AB0E 21 14 AD D1 	ld hl,testSlowSprite
   28 D1:AB12 3E 01 -  -  	ld a,1
   29 D1:AB14 CD 7B AC D1 	call draw_slow_sprite_top_cut
   30 D1:AB18 -  -  -  -  	;Instruction end
   31 D1:AB18 C1 -  -  -  	pop bc
   32 D1:AB19 0B -  -  -  	dec bc
   33 D1:AB1A 79 -  -  -  	ld a,c
   34 D1:AB1B B0 -  -  -  	or b
   35 D1:AB1C C2 09 AB D1 	jp nz,time_testing_loop_2
   36 D1:AB20 E1 -  -  -  	pop hl
   37 D1:AB21 2B -  -  -  	dec hl
   38 D1:AB22 7D -  -  -  	ld a,l
   39 D1:AB23 B4 -  -  -  	or h
   40 D1:AB24 C2 04 AB D1 	jp nz,time_testing_loop
   41 D1:AB28 -  -  -  -  	
   42 D1:AB28 3A 01 00 F2 	ld a,($F20001);128hz
   43 D1:AB2C 6F -  -  -  	ld l,a
   44 D1:AB2D 3A 02 00 F2 	ld a,($F20002);0.5hz
   45 D1:AB31 67 -  -  -  	ld h,a
   46 D1:AB32 C3 AF AA D1 	jp printHL;div by 128 for time
   47 D1:AB36 -  -  -  -  	
   48 D1:AB36 -  -  -  -  
   49 D1:AB36 -  -  -  -  ;60fps = .0166sec/f	
   50 D1:AB36 -  -  -  -  
   51 D1:AB36 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   52 D1:AB36 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   53 D1:AB36 -  -  -  -  
   54 D1:AB36 -  -  -  -  
   55 D1:AB36 -  -  -  -  ;10,000 draw 1 bg line very complex 
   56 D1:AB36 -  -  -  -  ;9 sec  .07 of frame/instruction
   57 D1:AB36 -  -  -  -  
   58 D1:AB36 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   59 D1:AB36 -  -  -  -  ;16.4RT, 14.8CLK
   60 D1:AB36 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   61 D1:AB36 -  -  -  -  ;.24 screens/frame
   62 D1:AB36 -  -  -  -  
   63 D1:AB36 -  -  -  -  
   64 D1:AB36 -  -  -  -  ;300k slow sprite best case 12*5px
   65 D1:AB36 -  -  -  -  ;8.75RT 7.6clk
   66 D1:AB36 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   67 D1:AB36 -  -  -  -  ;.446 screens/frame
   68 D1:AB36 -  -  -  -  
   69 D1:AB36 -  -  -  -  
   70 D1:AB36 -  -  -  -  
   71 D1:AB36 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   72 D1:AB36 -  -  -  -  ;22.15RT,20.35clk
   73 D1:AB36 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   74 D1:AB36 -  -  -  -  ;.78 screens/frame
   75 D1:AB36 -  -  -  -  
   76 D1:AB36 -  -  -  -  
   77 D1:AB36 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   78 D1:AB36 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   79 D1:AB36 -  -  -  -  ;.47 = FAST
   80 D1:AB36 -  -  -  -  
   81 D1:AB36 -  -  -  -  ;50% fast sprites, 50% slow sprites
   82 D1:AB36 -  -  -  -  
   83 D1:AB36 -  -  -  -  
   84 D1:AB36 -  -  -  -  
   85 D1:AB36 -  -  -  -  
   86 D1:AB36 -  -  -  -  
   87 D1:AB36 -  -  -  -  
   88 D1:AB36 -  -  -  -  
   89 D1:AB36 -  -  -  -  
   90 D1:AB36 -  -  -  -  
Listing for file "ascent.asm"
  396 D1:AB36 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AB36 -  -  -  -  
    2 D1:AB36 -  -  -  -  
    3 D1:AB36 -  -  -  -  
    4 D1:AB36 -  -  -  -  ;hl = upper data frame, a = line number in target frame
    5 D1:AB36 -  -  -  -  draw_bg_line:
    6 D1:AB36 32 58 AB D1 	ld (dbgl_line_num),a
    7 D1:AB3A 32 8B AB D1 	ld (dbgl_line_num_2),a
    8 D1:AB3E ED 17 -  -  	ld de,(hl)
    9 D1:AB40 ED 53 BB AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
   10 D1:AB45 23 -  -  -  	inc hl
   11 D1:AB46 23 -  -  -  	inc hl
   12 D1:AB47 23 -  -  -  	inc hl ;to frame data start 
   13 D1:AB48 11 00 00 00 	ld de,0
   14 D1:AB4C 01 00 00 00 	ld bc,0
   15 D1:AB50 -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
   16 D1:AB50 -  -  -  -  dbgl_upper_loop:
   17 D1:AB50 7E -  -  -  	ld a,(hl);y
   18 D1:AB51 23 -  -  -  	inc hl;to height
   19 D1:AB52 96 -  -  -  	sub (hl);subtract height
   20 D1:AB53 -  -  -  -  	;a is y value of bottom row of sprite
   21 D1:AB53 D2 61 AB D1 	jp nc,dbgl_upper_skip;if no carry into next frame
   22 D1:AB57 -  -  -  -  	;sprite extends into target frame
   23 D1:AB57 -  -  -  -  dbgl_line_num .equ $ + 1
   24 D1:AB57 D6 00 -  -  	sub 0 ;compare to line number in target frame
   25 D1:AB59 DA 6E AB D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
   26 D1:AB5D CA 6E AB D1 	jp z,dbgl_upper_cont;if = bottom row
   27 D1:AB61 -  -  -  -  dbgl_upper_skip:
   28 D1:AB61 23 -  -  -  	inc hl;to x
   29 D1:AB62 23 -  -  -  	inc hl;to index 
   30 D1:AB63 7E -  -  -  	ld a,(hl);index
   31 D1:AB64 23 -  -  -  	inc hl;to y
   32 D1:AB65 B7 -  -  -  	or a 
   33 D1:AB66 C2 50 AB D1 	jp nz,dbgl_upper_loop
   34 D1:AB6A C3 7A AB D1 	jp dbgl_lower_start
   35 D1:AB6E -  -  -  -  dbgl_upper_cont:
   36 D1:AB6E -  -  -  -  	;a = bottom row - linenum
   37 D1:AB6E 86 -  -  -  	add a,(hl);add height-1 
   38 D1:AB6F -  -  -  -  	;a holds 0 indexed line num within sprite
   39 D1:AB6F CD AF AB D1 	call dbgl_setup_and_draw
   40 D1:AB73 7E -  -  -  	ld a,(hl);index
   41 D1:AB74 23 -  -  -  	inc hl
   42 D1:AB75 B7 -  -  -  	or a 
   43 D1:AB76 C2 50 AB D1 	jp nz,dbgl_upper_loop
   44 D1:AB7A -  -  -  -  	
   45 D1:AB7A -  -  -  -  dbgl_lower_start:
   46 D1:AB7A -  -  -  -  ;LOWER FRAME START 
   47 D1:AB7A -  -  -  -  	;hl pointing to sprite data table 
   48 D1:AB7A ED 17 -  -  	ld de,(hl)
   49 D1:AB7C ED 53 BB AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
   50 D1:AB81 11 00 00 00 	ld de,0
   51 D1:AB85 23 -  -  -  	inc hl
   52 D1:AB86 23 -  -  -  	inc hl
   53 D1:AB87 23 -  -  -  	inc hl;to y 
   54 D1:AB88 -  -  -  -  dbgl_lower_loop:
   55 D1:AB88 7E -  -  -  	ld a,(hl)
   56 D1:AB89 23 -  -  -  	inc hl;to height-1
   57 D1:AB8A -  -  -  -  dbgl_line_num_2 .equ $ + 1
   58 D1:AB8A D6 00 -  -  	sub 0;subtract line num 
   59 D1:AB8C DA 99 AB D1 	jp c,dbgl_lower_skip;target line num is above sprite 
   60 D1:AB90 -  -  -  -  	;target is below or = sprite y value 
   61 D1:AB90 -  -  -  -  	;a holds 0 indexed sprite row 
   62 D1:AB90 BE -  -  -  	cp (hl);compare to height
   63 D1:AB91 DA A3 AB D1 	jp c,dbgl_lower_cont ;if height >= a 
   64 D1:AB95 CA A3 AB D1 	jp z,dbgl_lower_cont
   65 D1:AB99 -  -  -  -  dbgl_lower_skip:
   66 D1:AB99 23 -  -  -  	inc hl;to x  
   67 D1:AB9A 23 -  -  -  	inc hl; to index
   68 D1:AB9B 7E -  -  -  	ld a,(hl);index
   69 D1:AB9C 23 -  -  -  	inc hl;to y
   70 D1:AB9D B7 -  -  -  	or a 
   71 D1:AB9E C2 88 AB D1 	jp nz,dbgl_lower_loop
   72 D1:ABA2 C9 -  -  -  	ret
   73 D1:ABA3 -  -  -  -  dbgl_lower_cont:
   74 D1:ABA3 -  -  -  -  
   75 D1:ABA3 CD AF AB D1 	call dbgl_setup_and_draw
   76 D1:ABA7 7E -  -  -  	ld a,(hl);index 
   77 D1:ABA8 23 -  -  -  	inc hl;to y 
   78 D1:ABA9 B7 -  -  -  	or a
   79 D1:ABAA C2 88 AB D1 	jp nz,dbgl_lower_loop
   80 D1:ABAE C9 -  -  -  	ret;end of target frame
   81 D1:ABAF -  -  -  -  
   82 D1:ABAF -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
   83 D1:ABAF -  -  -  -  dbgl_setup_and_draw:
   84 D1:ABAF 23 -  -  -  	inc hl;to x pos
   85 D1:ABB0 5E -  -  -  	ld e,(hl)
   86 D1:ABB1 23 -  -  -  	inc hl 
   87 D1:ABB2 4E -  -  -  	ld c,(hl);sprite index 
   88 D1:ABB3 E5 -  -  -  	push hl
   89 D1:ABB4 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
   90 D1:ABB4 21 00 00 00 	ld hl,0
   91 D1:ABB8 19 -  -  -  	add hl,de;add x pos 
   92 D1:ABB9 EB -  -  -  	ex de,hl;put vram pos into de 
   93 D1:ABBA -  -  -  -  dbgl_sprite_pointers .equ $ + 1
   94 D1:ABBA 21 00 00 00 	ld hl,0
   95 D1:ABBE 09 -  -  -  	add hl,bc
   96 D1:ABBF 09 -  -  -  	add hl,bc 
   97 D1:ABC0 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
   98 D1:ABC1 ED 27 -  -  	ld hl,(hl);hl holds sprite data
   99 D1:ABC3 -  -  -  -  
  100 D1:ABC3 CD D1 AB D1 	call draw_bg_sprite_line;draw sprite line 
  101 D1:ABC7 11 00 00 00 	ld de,0;clear de 
  102 D1:ABCB 01 00 00 00 	ld bc,0
  103 D1:ABCF E1 -  -  -  	pop hl;back to data
  104 D1:ABD0 C9 -  -  -  	ret
  105 D1:ABD1 -  -  -  -  	
  106 D1:ABD1 -  -  -  -  
  107 D1:ABD1 -  -  -  -  
  108 D1:ABD1 -  -  -  -  
  109 D1:ABD1 -  -  -  -  
  110 D1:ABD1 -  -  -  -  
  111 D1:ABD1 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  112 D1:ABD1 -  -  -  -  draw_bg_sprite_line:
  113 D1:ABD1 E5 -  -  -  	push hl;save 
  114 D1:ABD2 6E -  -  -  	ld l,(hl);sprite width in px
  115 D1:ABD3 67 -  -  -  	ld h,a ;lines to skip
  116 D1:ABD4 7D -  -  -  	ld a,l;width 
  117 D1:ABD5 ED 6C -  -  	mlt hl;widt*lines skipped 
  118 D1:ABD7 C1 -  -  -  	pop bc 
  119 D1:ABD8 09 -  -  -  	add hl,bc;skip to target line data 
  120 D1:ABD9 23 -  -  -  	inc hl 
  121 D1:ABDA -  -  -  -  	;hl is pointing to start of line data 
  122 D1:ABDA CB 2F -  -  	sra a;divide width by 2 
  123 D1:ABDC 47 -  -  -  	ld b,a;b holds number of loops 
  124 D1:ABDD -  -  -  -  dbgsl_loop:
  125 D1:ABDD 1A -  -  -  	ld a,(de); load vram data 
  126 D1:ABDE A6 -  -  -  	and (hl);and with mask 
  127 D1:ABDF 23 -  -  -  	inc hl ;to color data 
  128 D1:ABE0 B6 -  -  -  	or (hl);or w color data 
  129 D1:ABE1 12 -  -  -  	ld (de),a;write to vram  
  130 D1:ABE2 13 -  -  -  	inc de
  131 D1:ABE3 23 -  -  -  	inc hl;to mask data
  132 D1:ABE4 10 F7 -  -  	djnz dbgsl_loop
  133 D1:ABE6 C9 -  -  -  	ret 
  134 D1:ABE7 -  -  -  -  	
  135 D1:ABE7 -  -  -  -  
  136 D1:ABE7 -  -  -  -  
  137 D1:ABE7 -  -  -  -  
  138 D1:ABE7 -  -  -  -  
  139 D1:ABE7 -  -  -  -  
  140 D1:ABE7 -  -  -  -  
  141 D1:ABE7 -  -  -  -  
  142 D1:ABE7 -  -  -  -  
  143 D1:ABE7 -  -  -  -  
  144 D1:ABE7 -  -  -  -  
  145 D1:ABE7 -  -  -  -  
  146 D1:ABE7 -  -  -  -  
Listing for file "ascent.asm"
  397 D1:ABE7 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ABE7 -  -  -  -  
    2 D1:ABE7 -  -  -  -  
    3 D1:ABE7 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
    4 D1:ABE7 -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:ABE7 1B -  -  -  	dec de
    6 D1:ABE8 01 00 00 00 	ld bc,0
    7 D1:ABEC 4F -  -  -  	ld c,a
    8 D1:ABED E5 -  -  -  	push hl
    9 D1:ABEE 7E -  -  -  	ld a,(hl);height
   10 D1:ABEF 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:ABF0 4F -  -  -  	ld c,a;height
   12 D1:ABF1 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:ABF2 E1 -  -  -  	pop hl
   14 D1:ABF3 23 -  -  -  	inc hl
   15 D1:ABF4 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:ABF5 -  -  -  -  
   17 D1:ABF5 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:ABF6 EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:ABF7 C3 3D AC D1 	jp dfgs_loop
   20 D1:ABFB -  -  -  -  	
   21 D1:ABFB -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
   22 D1:ABFB -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:ABFB 1B -  -  -  	dec de
   24 D1:ABFC 01 00 00 00 	ld bc,0
   25 D1:AC00 4F -  -  -  	ld c,a
   26 D1:AC01 D5 -  -  -  	push de
   27 D1:AC02 11 00 00 00 	ld de,0
   28 D1:AC06 E5 -  -  -  	push hl
   29 D1:AC07 5E -  -  -  	ld e,(hl);height
   30 D1:AC08 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:AC09 -  -  -  -  
   32 D1:AC09 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:AC0A E1 -  -  -  	pop hl;start of data
   34 D1:AC0B 19 -  -  -  	add hl,de
   35 D1:AC0C 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:AC0D 23 -  -  -  	inc hl;hl is pixel data
   37 D1:AC0E D1 -  -  -  	pop de
   38 D1:AC0F C5 -  -  -  	push bc;save total and skipped loops
   39 D1:AC10 79 -  -  -  	ld a,c;loops to skip
   40 D1:AC11 01 00 00 00 	ld bc,0
   41 D1:AC15 -  -  -  -  	
   42 D1:AC15 -  -  -  -  
   43 D1:AC15 -  -  -  -  draw_fast_sprite_top_loop:
   44 D1:AC15 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:AC16 EB -  -  -  	ex de,hl;hl is vram
   46 D1:AC17 09 -  -  -  	add hl,bc
   47 D1:AC18 EB -  -  -  	ex de,hl;hl is data
   48 D1:AC19 23 -  -  -  	inc hl
   49 D1:AC1A 4E -  -  -  	ld c,(hl);ldir length
   50 D1:AC1B 09 -  -  -  	add hl,bc;add ldir length
   51 D1:AC1C EB -  -  -  	ex de,hl;hl is vram
   52 D1:AC1D 09 -  -  -  	add hl,bc;add ldir length
   53 D1:AC1E 13 -  -  -  	inc de
   54 D1:AC1F EB -  -  -  	ex de,hl;hl is data
   55 D1:AC20 3D -  -  -  	dec a
   56 D1:AC21 C2 15 AC D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:AC25 -  -  -  -  	
   58 D1:AC25 -  -  -  -  	
   59 D1:AC25 C1 -  -  -  	pop bc
   60 D1:AC26 78 -  -  -  	ld a,b
   61 D1:AC27 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:AC28 -  -  -  -  		
   63 D1:AC28 01 00 00 00 	ld bc,0
   64 D1:AC2C 4E -  -  -  	ld c,(hl)
   65 D1:AC2D EB -  -  -  	ex de,hl
   66 D1:AC2E C3 3D AC D1 	jp dfgs_loop
   67 D1:AC32 -  -  -  -  
   68 D1:AC32 -  -  -  -  
   69 D1:AC32 -  -  -  -  ;de = vram , hl = data
   70 D1:AC32 -  -  -  -  draw_fast_sprite_full:
   71 D1:AC32 1B -  -  -  	dec de
   72 D1:AC33 01 00 00 00 	ld bc,0
   73 D1:AC37 4E -  -  -  	ld c,(hl);height
   74 D1:AC38 09 -  -  -  	add hl,bc
   75 D1:AC39 7E -  -  -  	ld a,(hl);total loops
   76 D1:AC3A 23 -  -  -  	inc hl
   77 D1:AC3B 4E -  -  -  	ld c,(hl);first gap length
   78 D1:AC3C EB -  -  -  	ex de,hl
   79 D1:AC3D -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   80 D1:AC3D -  -  -  -  dfgs_loop:;gap, colors
   81 D1:AC3D 09 -  -  -  	add hl,bc;add alpha length
   82 D1:AC3E EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   83 D1:AC3F 23 -  -  -  	inc hl
   84 D1:AC40 4E -  -  -  	ld c,(hl);get ldir length
   85 D1:AC41 23 -  -  -  	inc hl
   86 D1:AC42 ED B0 -  -  	ldir
   87 D1:AC44 4E -  -  -  	ld c,(hl);load c with next alpha length
   88 D1:AC45 EB -  -  -  	ex de,hl;swap, hl is vram
   89 D1:AC46 3D -  -  -  	dec a
   90 D1:AC47 C2 3D AC D1 	jp nz,dfgs_loop
   91 D1:AC4B C9 -  -  -  	ret
   92 D1:AC4C -  -  -  -  	
   93 D1:AC4C -  -  -  -  	
   94 D1:AC4C -  -  -  -  	
   95 D1:AC4C -  -  -  -  	
   96 D1:AC4C -  -  -  -  
   97 D1:AC4C -  -  -  -  
   98 D1:AC4C -  -  -  -  ;hl = data, de = vram
   99 D1:AC4C -  -  -  -  draw_slow_sprite_full:
  100 D1:AC4C 01 00 00 00 	ld bc,0
  101 D1:AC50 4E -  -  -  	ld c,(hl);height
  102 D1:AC51 09 -  -  -  	add hl,bc
  103 D1:AC52 7E -  -  -  	ld a,(hl);num loops
  104 D1:AC53 D9 -  -  -  	exx
  105 D1:AC54 4F -  -  -  	ld c,a
  106 D1:AC55 D9 -  -  -  	exx
  107 D1:AC56 1B -  -  -  	dec de
  108 D1:AC57 -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  109 D1:AC57 -  -  -  -  dsfgs_line_loop:
  110 D1:AC57 23 -  -  -  	inc hl;gap length
  111 D1:AC58 4E -  -  -  	ld c,(hl);gap length
  112 D1:AC59 EB -  -  -  	ex de,hl;hl is vram
  113 D1:AC5A 09 -  -  -  	add hl,bc;add aplha gap
  114 D1:AC5B EB -  -  -  	ex de,hl;hl is data
  115 D1:AC5C 23 -  -  -  	inc hl;hl points to single pix mask
  116 D1:AC5D 1A -  -  -  	ld a,(de);vram data
  117 D1:AC5E A6 -  -  -  	and (hl)
  118 D1:AC5F 23 -  -  -  	inc hl;pixel data
  119 D1:AC60 B6 -  -  -  	or (hl)
  120 D1:AC61 12 -  -  -  	ld (de),a
  121 D1:AC62 23 -  -  -  	inc hl;ldir length
  122 D1:AC63 -  -  -  -  	
  123 D1:AC63 13 -  -  -  	inc de;move to next pixel
  124 D1:AC64 -  -  -  -  	
  125 D1:AC64 7E -  -  -  	ld a,(hl);ldir length
  126 D1:AC65 23 -  -  -  	inc hl;data
  127 D1:AC66 4F -  -  -  	ld c,a
  128 D1:AC67 B7 -  -  -  	or a
  129 D1:AC68 CA 6E AC D1 	jp z,dsfgs_ldir_skip
  130 D1:AC6C ED B0 -  -  	ldir
  131 D1:AC6E -  -  -  -  dsfgs_ldir_skip:
  132 D1:AC6E 1A -  -  -  	ld a,(de);vram data
  133 D1:AC6F A6 -  -  -  	and (hl)
  134 D1:AC70 23 -  -  -  	inc hl;pixel data
  135 D1:AC71 B6 -  -  -  	or (hl)
  136 D1:AC72 12 -  -  -  	ld (de),a
  137 D1:AC73 -  -  -  -  	
  138 D1:AC73 D9 -  -  -  	exx 
  139 D1:AC74 0D -  -  -  	dec c
  140 D1:AC75 D9 -  -  -  	exx
  141 D1:AC76 C2 57 AC D1 	jp nz,dsfgs_line_loop
  142 D1:AC7A C9 -  -  -  	ret
  143 D1:AC7B -  -  -  -  
  144 D1:AC7B -  -  -  -  
  145 D1:AC7B -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  146 D1:AC7B -  -  -  -  draw_slow_sprite_top_cut:
  147 D1:AC7B -  -  -  -  
  148 D1:AC7B E5 -  -  -  	push hl
  149 D1:AC7C 01 00 00 00 	ld bc,0
  150 D1:AC80 4F -  -  -  	ld c,a
  151 D1:AC81 09 -  -  -  	add hl,bc
  152 D1:AC82 7E -  -  -  	ld a,(hl);loops to skip
  153 D1:AC83 32 A6 AC D1 	ld (dsstc_loops_skipped),a
  154 D1:AC87 D9 -  -  -  	exx
  155 D1:AC88 47 -  -  -  	ld b,a;loops to skip
  156 D1:AC89 D9 -  -  -  	exx
  157 D1:AC8A E1 -  -  -  	pop hl
  158 D1:AC8B 4E -  -  -  	ld c,(hl)
  159 D1:AC8C 09 -  -  -  	add hl,bc;total loops
  160 D1:AC8D 7E -  -  -  	ld a,(hl);total loops
  161 D1:AC8E 23 -  -  -  	inc hl;gap length
  162 D1:AC8F -  -  -  -  
  163 D1:AC8F -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  164 D1:AC8F D9 -  -  -  	exx
  165 D1:AC90 -  -  -  -  slow_sprite_data_traverse:
  166 D1:AC90 D9 -  -  -  	exx
  167 D1:AC91 4E -  -  -  	ld c,(hl);gap length
  168 D1:AC92 EB -  -  -  	ex de,hl;hl is vram
  169 D1:AC93 09 -  -  -  	add hl,bc
  170 D1:AC94 EB -  -  -  	ex de,hl
  171 D1:AC95 -  -  -  -  	
  172 D1:AC95 23 -  -  -  	inc hl
  173 D1:AC96 23 -  -  -  	inc hl
  174 D1:AC97 23 -  -  -  	inc hl;ldir length
  175 D1:AC98 4E -  -  -  	ld c,(hl)
  176 D1:AC99 09 -  -  -  	add hl,bc
  177 D1:AC9A EB -  -  -  	ex de,hl
  178 D1:AC9B 09 -  -  -  	add hl,bc
  179 D1:AC9C EB -  -  -  	ex de,hl
  180 D1:AC9D 13 -  -  -  	inc de;single pix
  181 D1:AC9E 23 -  -  -  	inc hl
  182 D1:AC9F 23 -  -  -  	inc hl
  183 D1:ACA0 23 -  -  -  	inc hl;gap length
  184 D1:ACA1 D9 -  -  -  	exx
  185 D1:ACA2 10 EC -  -  	djnz slow_sprite_data_traverse
  186 D1:ACA4 D9 -  -  -  	exx
  187 D1:ACA5 -  -  -  -  
  188 D1:ACA5 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  189 D1:ACA5 D6 00 -  -  	sub a,0;loops skipped
  190 D1:ACA7 D9 -  -  -  	exx
  191 D1:ACA8 4F -  -  -  	ld c,a
  192 D1:ACA9 D9 -  -  -  	exx
  193 D1:ACAA -  -  -  -  	
  194 D1:ACAA 1B -  -  -  	dec de
  195 D1:ACAB 2B -  -  -  	dec hl	
  196 D1:ACAC C3 57 AC D1 	jp dsfgs_line_loop
  197 D1:ACB0 -  -  -  -  	
  198 D1:ACB0 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  199 D1:ACB0 -  -  -  -  draw_slow_sprite_bottom_cut:
  200 D1:ACB0 01 00 00 00 	ld bc,0
  201 D1:ACB4 E5 -  -  -  	push hl
  202 D1:ACB5 4F -  -  -  	ld c,a;height
  203 D1:ACB6 09 -  -  -  	add hl,bc
  204 D1:ACB7 7E -  -  -  	ld a,(hl);num loops
  205 D1:ACB8 D9 -  -  -  	exx
  206 D1:ACB9 4F -  -  -  	ld c,a
  207 D1:ACBA D9 -  -  -  	exx
  208 D1:ACBB E1 -  -  -  	pop hl
  209 D1:ACBC 4E -  -  -  	ld c,(hl)
  210 D1:ACBD 09 -  -  -  	add hl,bc
  211 D1:ACBE -  -  -  -  
  212 D1:ACBE 1B -  -  -  	dec de
  213 D1:ACBF C3 57 AC D1 	jp dsfgs_line_loop
  214 D1:ACC3 -  -  -  -  
  215 D1:ACC3 -  -  -  -  
  216 D1:ACC3 -  -  -  -  
  217 D1:ACC3 -  -  -  -  
  218 D1:ACC3 -  -  -  -  
  219 D1:ACC3 -  -  -  -  
  220 D1:ACC3 -  -  -  -  
  221 D1:ACC3 -  -  -  -  
  222 D1:ACC3 -  -  -  -  
  223 D1:ACC3 -  -  -  -  
  224 D1:ACC3 -  -  -  -  
  225 D1:ACC3 -  -  -  -  
  226 D1:ACC3 -  -  -  -  
  227 D1:ACC3 -  -  -  -  
  228 D1:ACC3 -  -  -  -  
  229 D1:ACC3 -  -  -  -  
  230 D1:ACC3 -  -  -  -  
  231 D1:ACC3 -  -  -  -  
  232 D1:ACC3 -  -  -  -  
  233 D1:ACC3 -  -  -  -  
  234 D1:ACC3 -  -  -  -  
  235 D1:ACC3 -  -  -  -  
  236 D1:ACC3 -  -  -  -  
  237 D1:ACC3 -  -  -  -  
  238 D1:ACC3 -  -  -  -  
  239 D1:ACC3 -  -  -  -  
  240 D1:ACC3 -  -  -  -  
  241 D1:ACC3 -  -  -  -  
  242 D1:ACC3 -  -  -  -  
  243 D1:ACC3 -  -  -  -  
  244 D1:ACC3 -  -  -  -  
  245 D1:ACC3 -  -  -  -  
  246 D1:ACC3 -  -  -  -  
  247 D1:ACC3 -  -  -  -  
  248 D1:ACC3 -  -  -  -  
  249 D1:ACC3 -  -  -  -   
  250 D1:ACC3 -  -  -  -  
  251 D1:ACC3 -  -  -  -  
  252 D1:ACC3 -  -  -  -  
  253 D1:ACC3 -  -  -  -  
  254 D1:ACC3 -  -  -  -  
  255 D1:ACC3 -  -  -  -  
  256 D1:ACC3 -  -  -  -  
  257 D1:ACC3 -  -  -  -  
  258 D1:ACC3 -  -  -  -  
  259 D1:ACC3 -  -  -  -  
  260 D1:ACC3 -  -  -  -  
  261 D1:ACC3 -  -  -  -  
  262 D1:ACC3 -  -  -  -  
  263 D1:ACC3 -  -  -  -  
  264 D1:ACC3 -  -  -  -  
  265 D1:ACC3 -  -  -  -  
  266 D1:ACC3 -  -  -  -  
  267 D1:ACC3 -  -  -  -  
  268 D1:ACC3 -  -  -  -  
  269 D1:ACC3 -  -  -  -  
  270 D1:ACC3 -  -  -  -  
  271 D1:ACC3 -  -  -  -  
  272 D1:ACC3 -  -  -  -  
  273 D1:ACC3 -  -  -  -  
  274 D1:ACC3 -  -  -  -  
  275 D1:ACC3 -  -  -  -  
  276 D1:ACC3 -  -  -  -  
  277 D1:ACC3 -  -  -  -  
  278 D1:ACC3 -  -  -  -  
  279 D1:ACC3 -  -  -  -  
  280 D1:ACC3 -  -  -  -  
  281 D1:ACC3 -  -  -  -  
  282 D1:ACC3 -  -  -  -  
  283 D1:ACC3 -  -  -  -  
  284 D1:ACC3 -  -  -  -  
  285 D1:ACC3 -  -  -  -  
  286 D1:ACC3 -  -  -  -  
  287 D1:ACC3 -  -  -  -  
  288 D1:ACC3 -  -  -  -  
  289 D1:ACC3 -  -  -  -  
  290 D1:ACC3 -  -  -  -  
  291 D1:ACC3 -  -  -  -  
  292 D1:ACC3 -  -  -  -  
  293 D1:ACC3 -  -  -  -  
  294 D1:ACC3 -  -  -  -  
  295 D1:ACC3 -  -  -  -  
  296 D1:ACC3 -  -  -  -  
  297 D1:ACC3 -  -  -  -  
  298 D1:ACC3 -  -  -  -  
  299 D1:ACC3 -  -  -  -  
  300 D1:ACC3 -  -  -  -  
  301 D1:ACC3 -  -  -  -  
  302 D1:ACC3 -  -  -  -  
  303 D1:ACC3 -  -  -  -  
  304 D1:ACC3 -  -  -  -  
  305 D1:ACC3 -  -  -  -  	
  306 D1:ACC3 -  -  -  -  	
Listing for file "ascent.asm"
  398 D1:ACC3 -  -  -  -  #include "spriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteData.txt"
    1 D1:ACC3 -  -  -  -  
    2 D1:ACC3 -  -  -  -  
    3 D1:ACC3 -  -  -  -  
    4 D1:ACC3 -  -  -  -  
    5 D1:ACC3 -  -  -  -  ;BG SPRITES
    6 D1:ACC3 -  -  -  -  ; width(px) rounded up
    7 D1:ACC3 -  -  -  -  ;.db vram data mask, color data....
    8 D1:ACC3 -  -  -  -  
    9 D1:ACC3 -  -  -  -  testBGSprite:
   10 D1:ACC3 0A -  -  -  	.db 10
   11 D1:ACC4 00 35 FF 00 
              F0 03 0F 50 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$50,$F0,$05
   12 D1:ACCE FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   13 D1:ACD8 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   14 D1:ACE2 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   15 D1:ACEC FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   16 D1:ACF6 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   17 D1:AD00 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   18 D1:AD0A FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03	
   19 D1:AD14 -  -  -  -  ;53xx3xx55
   20 D1:AD14 -  -  -  -  ;xxxxxx323
   21 D1:AD14 -  -  -  -  ;222233x32
   22 D1:AD14 -  -  -  -  ;53xx3xx55
   23 D1:AD14 -  -  -  -  ;xxxxxx323	
   24 D1:AD14 -  -  -  -  ;222233x32
   25 D1:AD14 -  -  -  -  
   26 D1:AD14 -  -  -  -  
   27 D1:AD14 -  -  -  -  	
   28 D1:AD14 -  -  -  -  ;FG _ SPRITES
   29 D1:AD14 -  -  -  -  
   30 D1:AD14 -  -  -  -  ;YBRGW
   31 D1:AD14 -  -  -  -  
   32 D1:AD14 -  -  -  -  ;SLOW_Sprite,  even pixel start
   33 D1:AD14 -  -  -  -  ;.height
   34 D1:AD14 -  -  -  -  ;.num loops per num lines
   35 D1:AD14 -  -  -  -  
   36 D1:AD14 -  -  -  -  ;.db alpha length(gap between single pixels, 0 for a gap of -1, 1 for no gap),single pixel mask(%00001111) or (%11111111) single pixel data (%data0000) or (%00000000),
   37 D1:AD14 -  -  -  -  ; ldir length, main pixel data,pixel mask,pixel data.....
   38 D1:AD14 -  -  -  -  
   39 D1:AD14 -  -  -  -  testSlowSprite:
   40 D1:AD14 05 -  -  -  	.db 5
   41 D1:AD15 02 04 07 0B 
              0C -  -  -  	.db 2,4,7,11,12
   42 D1:AD1A 00 FF 00 02 
              35 35 FF 00 
              00 FF 00 02 
              24 24 FF 00 	.db 0,%11111111,%00000000,2,$35,$35,%11111111,%00000000,0,%11111111,%00000000,2,$24,$24,%11111111,%00000000
   43 D1:AD2A 9B FF 00 02 
              31 31 F0 01 
              01 FF 00 01 
              11 FF 00 -  	.db 155, %11111111,%00000000,2,$31,$31,%11110000,$01,1,%11111111,%00000000,1,$11,%11111111,%00000000
   44 D1:AD39 9A 0F 50 01 
              53 FF 00 00 
              FF 00 01 35 
              F0 05 01 0F 
              50 00 FF 00 	.db 154,%00001111,$50,1,$53,%11111111,%00000000,0,%11111111,%00000000,1,$35,%11110000,$05,1,%00001111,$50,0,%11111111,%00000000
   45 D1:AD4D 9A 0F 30 00 
              F0 03 00 FF 
              00 00 F0 03 
              01 0F 30 00 
              7F 00 00 0F 
              30 00 FF 00 	.db 154,%00001111,$30,0,%11110000,$03,0,%11111111,%00000000,0,%11110000,$03,1,%00001111,$30,0,%1111111,00000000,0,%00001111,$30,0,%11111111,%00000000
   46 D1:AD65 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   47 D1:AD6F -  -  -  -  	
   48 D1:AD6F -  -  -  -  	;WRWRXXGBGBXX
   49 D1:AD6F -  -  -  -  	
   50 D1:AD6F -  -  -  -  	;XXYRYRYXXXYY
   51 D1:AD6F -  -  -  -  	
   52 D1:AD6F -  -  -  -  	;XW RW XX WR WX XW
   53 D1:AD6F -  -  -  -  	
   54 D1:AD6F -  -  -  -  	;XR RX RX XR XR XX
   55 D1:AD6F -  -  -  -  	
   56 D1:AD6F -  -  -  -  	;XW WW WW WW WW WX
   57 D1:AD6F -  -  -  -  	
   58 D1:AD6F -  -  -  -  	
   59 D1:AD6F -  -  -  -  testSlowSpriteBestCase:
   60 D1:AD6F 05 -  -  -  	.db 5
   61 D1:AD70 01 02 03 04 
              05 -  -  -  	.db 1,2,3,4,5
   62 D1:AD75 00 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 0,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   63 D1:AD7F 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   64 D1:AD89 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   65 D1:AD93 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   66 D1:AD9D 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   67 D1:ADA7 -  -  -  -  	
   68 D1:ADA7 -  -  -  -  ;XW WW WW WW WW WX
   69 D1:ADA7 -  -  -  -  ;XW WW WW WW WW WX
   70 D1:ADA7 -  -  -  -  ;XW WW WW WW WW WX
   71 D1:ADA7 -  -  -  -  ;XW WW WW WW WW WX
   72 D1:ADA7 -  -  -  -  ;XW WW WW WW WW WX
   73 D1:ADA7 -  -  -  -  
   74 D1:ADA7 -  -  -  -  ;YBRGW
   75 D1:ADA7 -  -  -  -  
   76 D1:ADA7 -  -  -  -  ;.db flags ( 4bpc,3bpc,2bpc,1bpc,0bpc,noalpha
   77 D1:ADA7 -  -  -  -  ;.db width(px),height
   78 D1:ADA7 -  -  -  -  ;.db alpha data 
   79 D1:ADA7 -  -  -  -  ;.db color data
   80 D1:ADA7 -  -  -  -  
   81 D1:ADA7 -  -  -  -  	
   82 D1:ADA7 -  -  -  -  testSpriteCompressed:
   83 D1:ADA7 80 -  -  -  	.db %10000000;4bpc
   84 D1:ADA8 08 08 -  -  	.db 8,8
   85 D1:ADAA -  -  -  -  ;.db $33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22
   86 D1:ADAA 7E -  -  -  	.db %01111110;1
   87 D1:ADAB 66 -  -  -  	.db %01100110;2
   88 D1:ADAC CE -  -  -  	.db %11001110;2
   89 D1:ADAD 55 -  -  -  	.db %01010101;2
   90 D1:ADAE AA -  -  -  	.db %10101010;2
   91 D1:ADAF 6E -  -  -  	.db %01101110;2
   92 D1:ADB0 3B -  -  -  	.db %00111011;2
   93 D1:ADB1 67 -  -  -  	.db %01100111;2
   94 D1:ADB2 53 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 -  	.db $53,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55;indexed color data
   95 D1:ADD9 -  -  -  -  	;1 3 5 7 9 11 13 15
   96 D1:ADD9 -  -  -  -  	
   97 D1:ADD9 -  -  -  -  
   98 D1:ADD9 -  -  -  -  testSpriteCompressed4:
   99 D1:ADD9 40 -  -  -  	.db %01000000;3bpc
  100 D1:ADDA 09 04 -  -  	.db 9,4
  101 D1:ADDC 9D 5F F6 82 
              B0 -  -  -  	.db %10011101,%01011111,%11110110,%10000010,%10110000
  102 D1:ADE1 54 32 10 33 	.db $54,$32,$10,$33
  103 D1:ADE5 E3 8E 38 E3 
              8E 38 E3 8E 
              38 E3 E3 8E 
              38 E3 8E 38 
              E3 8E 38 E3 	.db %11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011
  104 D1:ADF9 -  -  -  -  ;100111010  2 loop
  105 D1:ADF9 -  -  -  -  ;101111111  1 loop
  106 D1:ADF9 -  -  -  -  ;110110100  2 loop
  107 D1:ADF9 -  -  -  -  ;000101011  2 loop
  108 D1:ADF9 -  -  -  -  ;2357
  109 D1:ADF9 -  -  -  -  testSpriteCompressedFast:
  110 D1:ADF9 20 -  -  -  	.db %00100000;4bpc
  111 D1:ADFA 08 08 -  -  	.db 8,8
  112 D1:ADFC F0 -  -  -  	.db %11110000
  113 D1:ADFD 33 -  -  -  	.db %00110011
  114 D1:ADFE C3 -  -  -  	.db %11000011
  115 D1:ADFF FF -  -  -  	.db %11111111
  116 D1:AE00 F3 -  -  -  	.db %11110011
  117 D1:AE01 CC -  -  -  	.db %11001100
  118 D1:AE02 C0 -  -  -  	.db %11000000
  119 D1:AE03 3F -  -  -  	.db %00111111
  120 D1:AE04 54 32 -  -  	.db $54,$32
  121 D1:AE06 C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 -  -  -  	.db %11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001
  122 D1:AE1F 55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 	.db $55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22
  123 D1:AE43 -  -  -  -  	
  124 D1:AE43 -  -  -  -  	
  125 D1:AE43 -  -  -  -  	
  126 D1:AE43 -  -  -  -  testBGSpriteComp:
  127 D1:AE43 24 -  -  -  	.db %00100100;2bpc noalpha
  128 D1:AE44 08 08 -  -  	.db 8,8;8 wide 
  129 D1:AE46 23 45 -  -  	.db $23,$45;brgw
  130 D1:AE48 00 00 55 55 
              AA AA FF FF 	.db %00000000,%00000000,%01010101,%01010101,%10101010,%10101010,%11111111,%11111111
  131 D1:AE50 00 55 55 00 
              00 AA AA 00 	.db %00000000,%01010101,%01010101,%00000000,%00000000,%10101010,%10101010,%00000000
  132 D1:AE58 -  -  -  -  	
  133 D1:AE58 -  -  -  -  	
  134 D1:AE58 -  -  -  -  testBGSpriteComp2:
  135 D1:AE58 24 -  -  -  	.db %00100100;2bpc noalpha
  136 D1:AE59 06 06 -  -  	.db 6,6;
  137 D1:AE5B 23 45 -  -  	.db $23,$45;brgw
  138 D1:AE5D 00 05 55 AA 
              AF FF -  -  	.db %00000000,%00000101,%01010101,%10101010,%10101111,%11111111
  139 D1:AE63 00 05 55 -  	.db %00000000,%00000101,%01010101
  140 D1:AE66 -  -  -  -  	
  141 D1:AE66 -  -  -  -  testBGSpriteComp3:
  142 D1:AE66 24 -  -  -  	.db %00100100;2bpc noalpha
  143 D1:AE67 06 01 -  -  	.db 6,1;
  144 D1:AE69 23 45 -  -  	.db $23,$45;brgw
  145 D1:AE6B 00 00 -  -  	.db %00000000,%00000000
  146 D1:AE6D -  -  -  -  
  147 D1:AE6D -  -  -  -  testBGSpriteComp4:
  148 D1:AE6D 08 -  -  -  	.db %00001000;0bpc alpha 
  149 D1:AE6E 07 04 -  -  	.db 7,4
  150 D1:AE70 EA 1D D2 60 	.db %11101010,%00011101,%11010010,%01100000
  151 D1:AE74 20 -  -  -  	.db $20
  152 D1:AE75 -  -  -  -  	
  153 D1:AE75 -  -  -  -  ;BBBXBXB
  154 D1:AE75 -  -  -  -  ;XXXXBBB
  155 D1:AE75 -  -  -  -  ;XBBBXBX
  156 D1:AE75 -  -  -  -  ;XBXXBBX	
  157 D1:AE75 -  -  -  -  	
  158 D1:AE75 -  -  -  -  ;FAST_SPRITE	
  159 D1:AE75 -  -  -  -  ;double pixel transparency, no gaps
  160 D1:AE75 -  -  -  -  ;.db height
  161 D1:AE75 -  -  -  -  ;.db num loops for num lines
  162 D1:AE75 -  -  -  -  ;.db to next ldir start, color length, data
  163 D1:AE75 -  -  -  -  
  164 D1:AE75 -  -  -  -  test_fast_sprite:;20x4px,complex
  165 D1:AE75 04 -  -  -  	.db 4
  166 D1:AE76 02 06 07 09 	.db 2,6,7,9
  167 D1:AE7A 02 02 12 45 
              03 04 33 32 
              45 44 -  -  	.db 2,2,%00010010,%01000101,3,4,%00110011,%00110010,%01000101,%01000100 ;gap, length,    						XXBYWGXXXXXXRRBRWGGG
  168 D1:AE84 97 02 21 21 
              01 02 35 35 
              01 01 43 01 
              01 35 -  -  	.db 151,2,%00100001,%00100001,1,2,%00110101,%00110101,1,1,%01000011,1,1,%00110101; 								XXYBYBXXWRWRXXRGXXWR
  169 D1:AE92 96 0A 35 35 
              45 45 12 12 
              34 34 34 34 	.db 150,10,%00110101,%00110101,%01000101,%01000101,%00010010,%00010010,%00110100,%00110100,%00110100,%00110100; WRWRWGWGBYBYGRGRGRGR
  170 D1:AE9E 98 05 55 11 
              22 33 44 01 
              02 44 53 -  	.db 152,5,%01010101,%00010001,%00100010,%00110011,%01000100,1,2,%01000100,%01010011;							XXXXWWYYBBRRGGXXGGRW
  171 D1:AEA9 -  -  -  -  
  172 D1:AEA9 -  -  -  -  
  173 D1:AEA9 -  -  -  -  
  174 D1:AEA9 -  -  -  -  ;COMPLEX_SPRITE
  175 D1:AEA9 -  -  -  -  ;16 color, per pixel transparency, even or odd start
  176 D1:AEA9 -  -  -  -  
  177 D1:AEA9 -  -  -  -  
  178 D1:AEA9 -  -  -  -  test_unity_compressed_1:
  179 D1:AEA9 20 -  -  -  .db %00100000
  180 D1:AEAA 20 20 -  -  .db 32, 32
  181 D1:AEAC FF FF FF FF 
              FF FF FF FF .db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  182 D1:AEB4 FF FF FF FF 
              FF FF FF FF .db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  183 D1:AEBC FF FF FF FF 
              FF FF FF FF .db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  184 D1:AEC4 CC CC CC CC 
              44 44 44 44 .db %11001100, %11001100, %11001100, %11001100, %01000100, %01000100, %01000100, %01000100
  185 D1:AECC 88 88 88 88 
              80 80 80 80 .db %10001000, %10001000, %10001000, %10001000, %10000000, %10000000, %10000000, %10000000
  186 D1:AED4 DB 6D B6 DB 
              AA AA AA AA .db %11011011, %01101101, %10110110, %11011011, %10101010, %10101010, %10101010, %10101010
  187 D1:AEDC 55 55 55 55 
              AA AA AA AA .db %01010101, %01010101, %01010101, %01010101, %10101010, %10101010, %10101010, %10101010
  188 D1:AEE4 55 55 55 55 
              BD CE F7 37 .db %01010101, %01010101, %01010101, %01010101, %10111101, %11001110, %11110111, %00110111
  189 D1:AEEC 19 98 7B DF 
              E5 33 44 84 .db %00011001, %10011000, %01111011, %11011111, %11100101, %00110011, %01000100, %10000100
  190 D1:AEF4 B1 64 19 3F 
              07 CF BC 78 .db %10110001, %01100100, %00011001, %00111111, %00000111, %11001111, %10111100, %01111000
  191 D1:AEFC 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  192 D1:AF04 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  193 D1:AF0C 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  194 D1:AF14 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  195 D1:AF1C 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  196 D1:AF24 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  197 D1:AF2C -  -  -  -  
  198 D1:AF2C 31 20 -  -  .db %00110001, %00100000
  199 D1:AF2E -  -  -  -  
  200 D1:AF2E 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  201 D1:AF36 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  202 D1:AF3E 55 55 55 55 
              55 55 55 55 .db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  203 D1:AF46 AA AA AA AA 
              AA AA AA AA .db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010
  204 D1:AF4E 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  205 D1:AF56 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  206 D1:AF5E 55 55 55 55 
              55 55 55 55 .db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  207 D1:AF66 55 AA AA AA 
              AA AA A5 55 .db %01010101, %10101010, %10101010, %10101010, %10101010, %10101010, %10100101, %01010101
  208 D1:AF6E 55 55 55 55 
              55 55 55 55 .db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  209 D1:AF76 55 55 55 55 
              55 55 50 00 .db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010000, %00000000
  210 D1:AF7E 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  211 D1:AF86 00 00 00 00 
              00 00 00 00 .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  212 D1:AF8E 00 00 00 00 
              00 -  -  -  .db %00000000, %00000000, %00000000, %00000000, %00000000
  213 D1:AF93 -  -  -  -  
  214 D1:AF93 -  -  -  -  
  215 D1:AF93 -  -  -  -  
  216 D1:AF93 -  -  -  -  
  217 D1:AF93 -  -  -  -  
  218 D1:AF93 -  -  -  -  
  219 D1:AF93 -  -  -  -  
  220 D1:AF93 -  -  -  -  
  221 D1:AF93 -  -  -  -  
  222 D1:AF93 -  -  -  -  
  223 D1:AF93 -  -  -  -  
  224 D1:AF93 -  -  -  -  
  225 D1:AF93 -  -  -  -  
  226 D1:AF93 -  -  -  -  
  227 D1:AF93 -  -  -  -  	
Listing for file "ascent.asm"
  399 D1:AF93 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:AF93 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:AF93 -  -  -  -  	;.dl lastSprite
    3 D1:AF93 -  -  -  -  	;.dl lastSpritecopy
    4 D1:AF93 -  -  -  -  	;.dl sprite2
    5 D1:AF93 -  -  -  -  	;.dl sprite3
    6 D1:AF93 -  -  -  -  
    7 D1:AF93 -  -  -  -  
    8 D1:AF93 -  -  -  -  
    9 D1:AF93 -  -  -  -  
   10 D1:AF93 -  -  -  -  bg_data_frame:
   11 D1:AF93 -  -  -  -  	;.db sprite data table pointer
   12 D1:AF93 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:AF93 -  -  -  -  	
   14 D1:AF93 -  -  -  -  
   15 D1:AF93 -  -  -  -  bg_sprite_pointers_1:
   16 D1:AF93 00 96 D4 -  	.dl testBG1
   17 D1:AF96 00 96 D4 -  	.dl testBG1;h = 7
   18 D1:AF99 A0 96 D4 -  	.dl testBG2;h = 5
   19 D1:AF9C 40 97 D4 -  	.dl testBG3;h = 0
   20 D1:AF9F E0 97 D4 -  	.dl testBG4
   21 D1:AFA2 -  -  -  -  
   22 D1:AFA2 -  -  -  -  bg_data_frame_0:
   23 D1:AFA2 93 AF D1 -  	.dl bg_sprite_pointers_1 
   24 D1:AFA5 C8 07 05 00 	.db 200,7,5,0
   25 D1:AFA9 -  -  -  -  	;upper 
   26 D1:AFA9 -  -  -  -  bg_data_frame_1:
   27 D1:AFA9 93 AF D1 -  	.dl bg_sprite_pointers_1
   28 D1:AFAC C8 07 05 01 	.db 200,7,5,1
   29 D1:AFB0 64 07 05 01 	.db 100,7,5,1
   30 D1:AFB4 08 07 05 01 	.db 8,7,5,1
   31 D1:AFB8 07 07 0A 01 	.db 7,7,10,1
   32 D1:AFBC 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:AFC0 05 07 14 01 	.db 5,7,20,1;X
   34 D1:AFC4 05 05 19 02 	.db 5,5,25,2
   35 D1:AFC8 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:AFCC 03 05 23 02 	.db 3,5,35,2;X
   37 D1:AFD0 00 05 28 02 	.db 0,5,40,2;X
   38 D1:AFD4 00 00 2D 03 	.db 0,0,45,3
   39 D1:AFD8 0A 00 32 03 	.db 10,0,50,3
   40 D1:AFDC 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:AFE0 -  -  -  -  	
   42 D1:AFE0 -  -  -  -  bg_data_frame_2:
   43 D1:AFE0 93 AF D1 -  	.dl bg_sprite_pointers_1
   44 D1:AFE3 FF 07 3C 01 	.db 255,7,60,1
   45 D1:AFE7 FE 07 41 01 	.db 254,7,65,1
   46 D1:AFEB 64 05 46 02 	.db 100,5,70,2
   47 D1:AFEF 64 00 4B 03 	.db 100,0,75,3
   48 D1:AFF3 32 07 50 00 	.db 50,7,80,0
   49 D1:AFF7 -  -  -  -  	
   50 D1:AFF7 -  -  -  -  	
Listing for file "ascent.asm"
  400 D1:AFF7 -  -  -  -  #include "spriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteDecompress.txt"
    1 D1:AFF7 -  -  -  -  
    2 D1:AFF7 -  -  -  -  
    3 D1:AFF7 -  -  -  -  ;hl = sprite data start, de = main data decompress location de' = loops/line data location
    4 D1:AFF7 -  -  -  -  sprite_decompress:
    5 D1:AFF7 3E D2 -  -  	ld a,%11010010;jp nc 
    6 D1:AFF9 32 F3 B0 D1 	ld (sdcomp_end_reached_flag),a;reset end reached flag
    7 D1:AFFD 3E 00 -  -  	ld a,0
    8 D1:AFFF 32 03 B1 D1 	ld (sdcomp_loop_counter) ,a;reset loop counter
    9 D1:B003 CD 20 B5 D1 	call sdcomp_reset_noalpha
   10 D1:B007 -  -  -  -  ;set bpc mode 
   11 D1:B007 CB 7E -  -  	bit 7,(hl)
   12 D1:B009 C4 CC B3 D1 	call nz,sdcomp_set_4bpp 
   13 D1:B00D CB 76 -  -  	bit 6,(hl)
   14 D1:B00F C4 1F B4 D1 	call nz,sdcomp_set_3bpp 
   15 D1:B013 CB 6E -  -  	bit 5,(hl)
   16 D1:B015 C4 70 B4 D1 	call nz,sdcomp_set_2bpp 
   17 D1:B019 CB 66 -  -  	bit 4,(hl)
   18 D1:B01B C4 B9 B4 D1 	call nz,sdcomp_set_1bpp 
   19 D1:B01F CB 5E -  -  	bit 3,(hl)
   20 D1:B021 C4 F8 B4 D1 	call nz,sdcomp_set_0bpp 
   21 D1:B025 CB 56 -  -  	bit 2,(hl)
   22 D1:B027 C4 0F B5 D1 	call nz,sdcomp_set_noalpha
   23 D1:B02B 23 -  -  -  	inc hl
   24 D1:B02C -  -  -  -  	
   25 D1:B02C -  -  -  -  	
   26 D1:B02C -  -  -  -  ;set zeroes btwn lines
   27 D1:B02C 7E -  -  -  	ld a,(hl);width,in px
   28 D1:B02D E5 -  -  -  	push hl 
   29 D1:B02E 21 40 01 00 	ld hl,320
   30 D1:B032 01 00 00 00 	ld bc,0
   31 D1:B036 4F -  -  -  	ld c,a 
   32 D1:B037 37 -  -  -  	scf 
   33 D1:B038 3F -  -  -  	ccf 
   34 D1:B039 ED 42 -  -  	sbc hl,bc;320 - width
   35 D1:B03B 22 35 B2 D1 	ld (sdcomp_zeroes_between_lines),hl
   36 D1:B03F E1 -  -  -  	pop hl 
   37 D1:B040 47 -  -  -  	ld b,a;width
   38 D1:B041 08 -  -  -  	ex af,af' ;'
   39 D1:B042 78 -  -  -  	ld a,b
   40 D1:B043 32 69 B2 D1 	ld (sdcomp_sprite_width),a
   41 D1:B047 08 -  -  -  	ex af,af' ;'
   42 D1:B048 -  -  -  -  
   43 D1:B048 -  -  -  -  	
   44 D1:B048 37 -  -  -  	scf 
   45 D1:B049 -  -  -  -  sdcomp_bg_sprite_1 .equ $
   46 D1:B049 DA 5D B0 D1 	jp c,sdcomp_bg_sprite_1_skip
   47 D1:B04D -  -  -  -  	;a holds width 
   48 D1:B04D -  -  -  -  sdcomp_offset_BG .equ $	
   49 D1:B04D 00 -  -  -  	nop ; inc a  
   50 D1:B04E CB 47 -  -  	bit 0,a ;round up a 
   51 D1:B050 CA 55 B0 D1 	jp z,sdcomp_bg_sprite_1_round_skip
   52 D1:B054 3C -  -  -  	inc a 
   53 D1:B055 -  -  -  -  sdcomp_bg_sprite_1_round_skip:
   54 D1:B055 12 -  -  -  	ld (de),a ;load width 
   55 D1:B056 13 -  -  -  	inc de
   56 D1:B057 3E 00 -  -  	ld a,0;nop 
   57 D1:B059 32 4D B0 D1 	ld (sdcomp_offset_BG),a 
   58 D1:B05D -  -  -  -  sdcomp_bg_sprite_1_skip:
   59 D1:B05D -  -  -  -  
   60 D1:B05D -  -  -  -  
   61 D1:B05D -  -  -  -  
   62 D1:B05D -  -  -  -  
   63 D1:B05D -  -  -  -  
   64 D1:B05D 23 -  -  -  	inc hl;to height
   65 D1:B05E 7E -  -  -  	ld a,(hl);height
   66 D1:B05F 32 23 B2 D1 	ld (sdcomp_lines_remaining),a;load remaining lines
   67 D1:B063 -  -  -  -  	
   68 D1:B063 37 -  -  -  	scf 
   69 D1:B064 -  -  -  -  sdcomp_bg_sprite_2 .equ $
   70 D1:B064 D2 6A B0 D1 	jp nc,sdcomp_bg_sprite_2_skip
   71 D1:B068 12 -  -  -  	ld (de),a;height
   72 D1:B069 13 -  -  -  	inc de
   73 D1:B06A -  -  -  -  sdcomp_bg_sprite_2_skip:
   74 D1:B06A D5 -  -  -  	push de;loop/line data start 
   75 D1:B06B D9 -  -  -  	exx;to shadow
   76 D1:B06C D1 -  -  -  	pop de ;de' is loop/line data
   77 D1:B06D D9 -  -  -  	exx
   78 D1:B06E -  -  -  -  
   79 D1:B06E -  -  -  -  ;find start of color data
   80 D1:B06E 23 -  -  -  	inc hl;alpha data start
   81 D1:B06F E5 -  -  -  	push hl
   82 D1:B070 -  -  -  -  	
   83 D1:B070 37 -  -  -  	scf
   84 D1:B071 -  -  -  -  sdcomp_no_alpha_1 .equ $
   85 D1:B071 D2 8A B0 D1 	jp nc, sdcomp_no_alpha_1_skip
   86 D1:B075 E5 -  -  -  	push hl
   87 D1:B076 67 -  -  -  	ld h,a;height
   88 D1:B077 68 -  -  -  	ld l,b;width
   89 D1:B078 ED 6C -  -  	mlt hl;number of pixels
   90 D1:B07A 2B -  -  -  	dec hl
   91 D1:B07B CB 3C -  -  	srl h
   92 D1:B07D CB 1D -  -  	rr l
   93 D1:B07F CB 3C -  -  	srl h
   94 D1:B081 CB 1D -  -  	rr l 
   95 D1:B083 CB 3C -  -  	srl h 
   96 D1:B085 CB 1D -  -  	rr l ;divide by 8
   97 D1:B087 23 -  -  -  	inc hl 
   98 D1:B088 C1 -  -  -  	pop bc
   99 D1:B089 09 -  -  -  	add hl,bc;hl holds start of color data
  100 D1:B08A -  -  -  -  sdcomp_no_alpha_1_skip:
  101 D1:B08A -  -  -  -  
  102 D1:B08A -  -  -  -  	;HL POINTING TO COLOR DATA
  103 D1:B08A -  -  -  -  
  104 D1:B08A -  -  -  -  	
  105 D1:B08A F5 -  -  -  	push af;save height
  106 D1:B08B -  -  -  -  	
  107 D1:B08B 37 -  -  -  	scf 
  108 D1:B08C -  -  -  -  sdcomp_get_indexed_color_1bpc .equ $ 
  109 D1:B08C DA 96 B0 D1 	jp c,sdcomp_get_indexed_color_1bpc_skip
  110 D1:B090 7E -  -  -  	ld a,(hl);color data 
  111 D1:B091 32 E6 B2 D1 	ld (sdcomp_indexed_color_data),a 
  112 D1:B095 23 -  -  -  	inc hl 
  113 D1:B096 -  -  -  -  sdcomp_get_indexed_color_1bpc_skip:
  114 D1:B096 -  -  -  -  
  115 D1:B096 37 -  -  -  	scf 
  116 D1:B097 -  -  -  -  sdcomp_get_indexed_color_2bpc .equ $ 
  117 D1:B097 DA A1 B0 D1 	jp c,sdcomp_get_indexed_color_2bpc_skip
  118 D1:B09B 7E -  -  -  	ld a,(hl);color data 
  119 D1:B09C 32 E7 B2 D1 	ld (sdcomp_indexed_color_data+1),a 
  120 D1:B0A0 23 -  -  -  	inc hl 
  121 D1:B0A1 -  -  -  -  sdcomp_get_indexed_color_2bpc_skip:
  122 D1:B0A1 -  -  -  -  
  123 D1:B0A1 37 -  -  -  	scf 
  124 D1:B0A2 -  -  -  -  sdcomp_get_indexed_color_3bpc .equ $ 
  125 D1:B0A2 DA B2 B0 D1 	jp c,sdcomp_get_indexed_color_3bpc_skip
  126 D1:B0A6 7E -  -  -  	ld a,(hl);color data 
  127 D1:B0A7 32 E8 B2 D1 	ld (sdcomp_indexed_color_data+2),a 
  128 D1:B0AB 23 -  -  -  	inc hl 
  129 D1:B0AC 7E -  -  -  	ld a,(hl);color data 
  130 D1:B0AD 32 E9 B2 D1 	ld (sdcomp_indexed_color_data+3),a 
  131 D1:B0B1 23 -  -  -  	inc hl 
  132 D1:B0B2 -  -  -  -  sdcomp_get_indexed_color_3bpc_skip:
  133 D1:B0B2 -  -  -  -  
  134 D1:B0B2 F1 -  -  -  	pop af
  135 D1:B0B3 EB -  -  -  	ex de,hl
  136 D1:B0B4 01 00 00 00 	ld bc,0
  137 D1:B0B8 4F -  -  -  	ld c,a;height 
  138 D1:B0B9 09 -  -  -  	add hl,bc
  139 D1:B0BA EB -  -  -  	ex de,hl;de points to data write location
  140 D1:B0BB -  -  -  -  	
  141 D1:B0BB -  -  -  -  	
  142 D1:B0BB D9 -  -  -  	exx;to shadow 
  143 D1:B0BC E1 -  -  -  	pop hl;alpha data	
  144 D1:B0BD -  -  -  -  
  145 D1:B0BD -  -  -  -  	;HL IS POINTING TO ALPHA DATA
  146 D1:B0BD 0E 80 -  -  	ld c,%10000000;alpha mask
  147 D1:B0BF D9 -  -  -  	exx;out 
  148 D1:B0C0 0E 80 -  -  	ld c,%10000000;color mask
  149 D1:B0C2 -  -  -  -  	
  150 D1:B0C2 -  -  -  -  	
  151 D1:B0C2 -  -  -  -  	
  152 D1:B0C2 37 -  -  -  	scf 
  153 D1:B0C3 -  -  -  -  sdcomp_flip_1 .equ $
  154 D1:B0C3 DA E3 B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  155 D1:B0C7 -  -  -  -  
  156 D1:B0C7 D9 -  -  -  	exx;to shadow 
  157 D1:B0C8 2B -  -  -  	dec hl;dec alpha pointer
  158 D1:B0C9 22 07 B3 D1 	ld (sdcomp_alpha_data_line_end_byte),hl 
  159 D1:B0CD 3E 01 -  -  	ld a,%00000001;alpha mask
  160 D1:B0CF 32 0B B3 D1 	ld (sdcomp_alpha_data_line_end_mask),a 
  161 D1:B0D3 D9 -  -  -  	exx ;out 
  162 D1:B0D4 2B -  -  -  	dec hl;dec color pointer
  163 D1:B0D5 22 00 B3 D1 	ld (sdcomp_color_data_line_end_byte),hl 
  164 D1:B0D9 3E 01 -  -  	ld a,%00000001;color mask
  165 D1:B0DB 32 04 B3 D1 	ld (sdcomp_color_data_line_end_mask),a 
  166 D1:B0DF -  -  -  -  	
  167 D1:B0DF -  -  -  -  
  168 D1:B0DF -  -  -  -  	
  169 D1:B0DF -  -  -  -  	
  170 D1:B0DF CD FF B2 D1 	call sdcomp_traverse_line_data	
  171 D1:B0E3 -  -  -  -  
  172 D1:B0E3 -  -  -  -  ;START OF LOOP===================================================================================================
  173 D1:B0E3 -  -  -  -  ;add amount to get from ending pixels to first nonzero pair
  174 D1:B0E3 -  -  -  -  sdcomp_find_gap_length:
  175 D1:B0E3 37 -  -  -  	scf 
  176 D1:B0E4 -  -  -  -  sdcomp_bg_sprite_3 .equ $
  177 D1:B0E4 D2 7B B5 D1 	jp nc,sdcomp_bg_sprite_routine
  178 D1:B0E8 -  -  -  -  	
  179 D1:B0E8 D9 -  -  -  	exx ;toshadow
  180 D1:B0E9 06 00 -  -  	ld b,0;pairs found, always < 255 
  181 D1:B0EB -  -  -  -  sdcomp_add_1_gap_length .equ $
  182 D1:B0EB 00 -  -  -  	nop
  183 D1:B0EC 3E 00 -  -  	ld a,0;nop
  184 D1:B0EE 32 EB B0 D1 	ld (sdcomp_add_1_gap_length),a
  185 D1:B0F2 -  -  -  -  sdcomp_find_gap_length_loop:
  186 D1:B0F2 -  -  -  -  	
  187 D1:B0F2 37 -  -  -  	scf 
  188 D1:B0F3 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  189 D1:B0F3 D2 F8 B2 D1 	jp nc,sdcomp_end
  190 D1:B0F7 -  -  -  -  
  191 D1:B0F7 CD D0 B1 D1 	call sdcomp_get_next_alpha_pair
  192 D1:B0FB -  -  -  -  	;a holds alpha data 
  193 D1:B0FB 04 -  -  -  	inc b
  194 D1:B0FC B7 -  -  -  	or a 
  195 D1:B0FD CA F2 B0 D1 	jp z,sdcomp_find_gap_length_loop
  196 D1:B101 -  -  -  -  	;END OF LOOP, B HOLDS NUMBER OF 00 PAIRS  +1
  197 D1:B101 -  -  -  -  		
  198 D1:B101 -  -  -  -  	
  199 D1:B101 F5 -  -  -  	push af;saves leading pixel alpha data
  200 D1:B102 -  -  -  -  	;inc loop counter 
  201 D1:B102 -  -  -  -  sdcomp_loop_counter .equ $ + 1
  202 D1:B102 3E 00 -  -  	ld a,0;inc number of loops
  203 D1:B104 3C -  -  -  	inc a 
  204 D1:B105 32 03 B1 D1 	ld (sdcomp_loop_counter),a
  205 D1:B109 -  -  -  -  	
  206 D1:B109 78 -  -  -  	ld a,b 
  207 D1:B10A D9 -  -  -  	exx;out of shadow 
  208 D1:B10B 12 -  -  -  	ld (de),a;GAP LENGTH 
  209 D1:B10C 13 -  -  -  	inc de 
  210 D1:B10D D9 -  -  -  	exx;into shadow 	
  211 D1:B10E -  -  -  -  	
  212 D1:B10E F1 -  -  -  	pop af
  213 D1:B10F 37 -  -  -  	scf
  214 D1:B110 -  -  -  -  sdcomp_fast_sprite_1 .equ $ 
  215 D1:B110 D2 43 B1 D1 	jp nc,sdcomp_ldir_start ;jp c if fast move to ldir loop 
  216 D1:B114 -  -  -  -  
  217 D1:B114 -  -  -  -  ;LEADING PIXELS
  218 D1:B114 -  -  -  -  	;a holds alpha data after gap, 11 01 10
  219 D1:B114 D9 -  -  -  	exx;out of shadow
  220 D1:B115 D5 -  -  -  	push de 
  221 D1:B116 -  -  -  -  	
  222 D1:B116 47 -  -  -  	ld b,a;save for later
  223 D1:B117 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  224 D1:B119 3E 00 -  -  	ld a,0
  225 D1:B11B 16 FF -  -  	ld d,%11111111;assuming no colors 
  226 D1:B11D CA 27 B1 D1 	jp z,sdcomp_leading_pixel_first_skip
  227 D1:B121 -  -  -  -  	;has first color
  228 D1:B121 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  229 D1:B123 CD F3 B2 D1 	call sdcomp_get_next_color_ending_nibble
  230 D1:B127 -  -  -  -  sdcomp_leading_pixel_first_skip:
  231 D1:B127 -  -  -  -  	;a is either $00 or $0color1
  232 D1:B127 -  -  -  -  	
  233 D1:B127 1E FF -  -  	ld e,%11111111;assuming no colors
  234 D1:B129 -  -  -  -  	
  235 D1:B129 CB 40 -  -  	bit 0,b;check second pixel alpha
  236 D1:B12B 47 -  -  -  	ld b,a;save for later 
  237 D1:B12C 3E 00 -  -  	ld a,0
  238 D1:B12E CA 38 B1 D1 	jp z,sdcomp_leading_pixel_second_skip;
  239 D1:B132 -  -  -  -  	;has second color 
  240 D1:B132 CD EA B2 D1 	call sdcomp_get_next_color_leading_nibble
  241 D1:B136 -  -  -  -  	;a = color2 0 
  242 D1:B136 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  243 D1:B138 -  -  -  -  	
  244 D1:B138 -  -  -  -  sdcomp_leading_pixel_second_skip:
  245 D1:B138 -  -  -  -  	;a is either 00 or c2 0 
  246 D1:B138 -  -  -  -  	;b is either 00 or 0 c1 
  247 D1:B138 B0 -  -  -  	or b 
  248 D1:B139 47 -  -  -  	ld b,a;final color data
  249 D1:B13A 7A -  -  -  	ld a,d 
  250 D1:B13B A3 -  -  -  	and e ;final mask data 
  251 D1:B13C -  -  -  -  	
  252 D1:B13C D1 -  -  -  	pop de;return to pointer 
  253 D1:B13D -  -  -  -  	
  254 D1:B13D 12 -  -  -  	ld (de),a;write mask data 
  255 D1:B13E 13 -  -  -  	inc de 
  256 D1:B13F 78 -  -  -  	ld a,b;color data 
  257 D1:B140 12 -  -  -  	ld (de),a;write color data 
  258 D1:B141 13 -  -  -  	inc de 
  259 D1:B142 D9 -  -  -  	exx;into shadow 
  260 D1:B143 -  -  -  -  	
  261 D1:B143 -  -  -  -  sdcomp_ldir_start:
  262 D1:B143 -  -  -  -  ;CHECK FOR LDIR 
  263 D1:B143 06 00 -  -  	ld b,0;pairs found 
  264 D1:B145 -  -  -  -  sdcomp_ldir_loop:
  265 D1:B145 CD D0 B1 D1 	call sdcomp_get_next_alpha_pair
  266 D1:B149 04 -  -  -  	inc b
  267 D1:B14A EE FF -  -  	xor %11111111;flip bits
  268 D1:B14C CA 45 B1 D1 	jp z,sdcomp_ldir_loop;alpha data was 11
  269 D1:B150 -  -  -  -  	;b holds pairs found+1
  270 D1:B150 -  -  -  -  	
  271 D1:B150 37 -  -  -  	scf 
  272 D1:B151 -  -  -  -  sdcomp_fast_sprite_2 .equ $
  273 D1:B151 D2 6E B1 D1 	jp nc,sdcomp_ldir_write
  274 D1:B155 -  -  -  -  	;fast mode 
  275 D1:B155 -  -  -  -  	;b holds ldir length 
  276 D1:B155 -  -  -  -  	
  277 D1:B155 -  -  -  -  sdcomp_ldir_not_fast:
  278 D1:B155 EE FF -  -  	xor %11111111;flip back
  279 D1:B157 -  -  -  -  	;a holds first non 11 pair 
  280 D1:B157 05 -  -  -  	dec b ;b holds pairs found
  281 D1:B158 CA 7D B1 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  282 D1:B15C B7 -  -  -  	or a
  283 D1:B15D C2 6E B1 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  284 D1:B161 -  -  -  -  	;ends in 00,ending pixels will be 11 
  285 D1:B161 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  286 D1:B161 3E 04 -  -  	ld a,%00000100;inc b 
  287 D1:B163 32 EB B0 D1 	ld (sdcomp_add_1_gap_length),a 
  288 D1:B167 3E FF -  -  	ld a,$ff;ending pixels 11
  289 D1:B169 -  -  -  -  	
  290 D1:B169 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  291 D1:B16A CA 7D B1 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  292 D1:B16E -  -  -  -  	;b holds ldir length 
  293 D1:B16E -  -  -  -  	
  294 D1:B16E -  -  -  -  ;b holds ldir length, a holds ending pixels
  295 D1:B16E -  -  -  -  sdcomp_ldir_write:
  296 D1:B16E F5 -  -  -  	push af;save ending pixels
  297 D1:B16F 78 -  -  -  	ld a,b
  298 D1:B170 D9 -  -  -  	exx ;out 
  299 D1:B171 12 -  -  -  	ld (de),a;write ldir length
  300 D1:B172 13 -  -  -  	inc de 
  301 D1:B173 CD BC B1 D1 	call sdcomp_write_ldir_data_loop
  302 D1:B177 D9 -  -  -  	exx ;toshadow
  303 D1:B178 F1 -  -  -  	pop af;return ending pixels
  304 D1:B179 -  -  -  -  	
  305 D1:B179 -  -  -  -  	
  306 D1:B179 C3 85 B1 D1 	jp sdcomp_write_end_pixels
  307 D1:B17D -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  308 D1:B17D F5 -  -  -  	push af;save end pixels
  309 D1:B17E -  -  -  -  	
  310 D1:B17E D9 -  -  -  	exx;out of shadow
  311 D1:B17F 3E 00 -  -  	ld a,0
  312 D1:B181 12 -  -  -  	ld (de),a 
  313 D1:B182 13 -  -  -  	inc de 
  314 D1:B183 D9 -  -  -  	exx 
  315 D1:B184 F1 -  -  -  	pop af;return ending pixels
  316 D1:B185 -  -  -  -  
  317 D1:B185 -  -  -  -  
  318 D1:B185 -  -  -  -  ;WRITE ENDING PIXELS 
  319 D1:B185 -  -  -  -  
  320 D1:B185 -  -  -  -  sdcomp_write_end_pixels:;a holds end pixels
  321 D1:B185 -  -  -  -  	
  322 D1:B185 D9 -  -  -  	exx;out of shadow
  323 D1:B186 -  -  -  -  	
  324 D1:B186 37 -  -  -  	scf 
  325 D1:B187 -  -  -  -  sdcomp_fast_sprite_3 .equ $
  326 D1:B187 D2 E3 B0 D1 	jp nc,sdcomp_find_gap_length;if fast, back to gap length
  327 D1:B18B -  -  -  -  	
  328 D1:B18B -  -  -  -  	
  329 D1:B18B D5 -  -  -  	push de 
  330 D1:B18C -  -  -  -  	
  331 D1:B18C 47 -  -  -  	ld b,a;save for later
  332 D1:B18D CB 67 -  -  	bit 4,a ;check if first pixel has color 
  333 D1:B18F 3E 00 -  -  	ld a,0
  334 D1:B191 16 FF -  -  	ld d,%11111111;assuming no colors 
  335 D1:B193 CA 9D B1 D1 	jp z,sdcomp_ending_pixel_first_skip
  336 D1:B197 -  -  -  -  	;has first color
  337 D1:B197 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  338 D1:B199 CD F3 B2 D1 	call sdcomp_get_next_color_ending_nibble
  339 D1:B19D -  -  -  -  sdcomp_ending_pixel_first_skip:
  340 D1:B19D -  -  -  -  	;a is either $00 or $0color1
  341 D1:B19D -  -  -  -  	
  342 D1:B19D 1E FF -  -  	ld e,%11111111;assuming no colors
  343 D1:B19F -  -  -  -  	
  344 D1:B19F CB 40 -  -  	bit 0,b;check second pixel alpha
  345 D1:B1A1 47 -  -  -  	ld b,a;save for later 
  346 D1:B1A2 3E 00 -  -  	ld a,0
  347 D1:B1A4 CA AE B1 D1 	jp z,sdcomp_ending_pixel_second_skip;
  348 D1:B1A8 -  -  -  -  	;has second color 
  349 D1:B1A8 CD EA B2 D1 	call sdcomp_get_next_color_leading_nibble
  350 D1:B1AC -  -  -  -  	;a = color2 0 
  351 D1:B1AC 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  352 D1:B1AE -  -  -  -  	
  353 D1:B1AE -  -  -  -  sdcomp_ending_pixel_second_skip:
  354 D1:B1AE -  -  -  -  	;a is either 00 or c2 0 
  355 D1:B1AE -  -  -  -  	;b is either 00 or 0 c1 
  356 D1:B1AE B0 -  -  -  	or b 
  357 D1:B1AF 47 -  -  -  	ld b,a;final color data
  358 D1:B1B0 7A -  -  -  	ld a,d 
  359 D1:B1B1 A3 -  -  -  	and e ;final mask data 
  360 D1:B1B2 -  -  -  -  	
  361 D1:B1B2 D1 -  -  -  	pop de;return to pointer 
  362 D1:B1B3 -  -  -  -  	
  363 D1:B1B3 12 -  -  -  	ld (de),a;write mask data 
  364 D1:B1B4 13 -  -  -  	inc de 
  365 D1:B1B5 78 -  -  -  	ld a,b;color data 
  366 D1:B1B6 12 -  -  -  	ld (de),a;write color data 
  367 D1:B1B7 13 -  -  -  	inc de 
  368 D1:B1B8 -  -  -  -  	
  369 D1:B1B8 -  -  -  -  	
  370 D1:B1B8 C3 E3 B0 D1 	jp sdcomp_find_gap_length;BACK TO START
  371 D1:B1BC -  -  -  -  	
  372 D1:B1BC -  -  -  -  	
  373 D1:B1BC -  -  -  -  
  374 D1:B1BC -  -  -  -  
  375 D1:B1BC -  -  -  -  
  376 D1:B1BC -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  377 D1:B1BC -  -  -  -  sdcomp_write_ldir_data_loop:
  378 D1:B1BC CD F3 B2 D1 	call sdcomp_get_next_color_ending_nibble	
  379 D1:B1C0 47 -  -  -  	ld b,a;first pixel
  380 D1:B1C1 CD EA B2 D1 	call sdcomp_get_next_color_leading_nibble
  381 D1:B1C5 B0 -  -  -  	or b
  382 D1:B1C6 -  -  -  -  	
  383 D1:B1C6 -  -  -  -  	
  384 D1:B1C6 12 -  -  -  	ld (de),a;write color data
  385 D1:B1C7 13 -  -  -  	inc de
  386 D1:B1C8 D9 -  -  -  	exx;to shadow
  387 D1:B1C9 05 -  -  -  	dec b;ldir length counter
  388 D1:B1CA D9 -  -  -  	exx
  389 D1:B1CB C2 BC B1 D1 	jp nz,sdcomp_write_ldir_data_loop
  390 D1:B1CF C9 -  -  -  	ret
  391 D1:B1D0 -  -  -  -  	
  392 D1:B1D0 -  -  -  -  	
  393 D1:B1D0 -  -  -  -  	
  394 D1:B1D0 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  395 D1:B1D0 -  -  -  -  sdcomp_get_next_alpha_pair:
  396 D1:B1D0 CD F9 B1 D1 	call sdcomp_get_next_alpha_bit
  397 D1:B1D4 B7 -  -  -  	or a 
  398 D1:B1D5 CA DF B1 D1 	jp z,sdcomp_get_next_alpha_pair0
  399 D1:B1D9 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  400 D1:B1DB C3 E1 B1 D1 	jp sdcomp_get_next_alpha_pair1
  401 D1:B1DF -  -  -  -  sdcomp_get_next_alpha_pair0:
  402 D1:B1DF 3E 00 -  -  	ld a,0
  403 D1:B1E1 -  -  -  -  sdcomp_get_next_alpha_pair1:
  404 D1:B1E1 32 F7 B1 D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  405 D1:B1E5 -  -  -  -  	
  406 D1:B1E5 CD F9 B1 D1 	call sdcomp_get_next_alpha_bit
  407 D1:B1E9 B7 -  -  -  	or a 
  408 D1:B1EA CA F4 B1 D1 	jp z,sdcomp_get_next_alpha_pair2
  409 D1:B1EE 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  410 D1:B1F0 C3 F6 B1 D1 	jp sdcomp_get_next_alpha_pair3
  411 D1:B1F4 -  -  -  -  sdcomp_get_next_alpha_pair2:
  412 D1:B1F4 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  413 D1:B1F6 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  414 D1:B1F6 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  415 D1:B1F6 F6 00 -  -  	or 0;AND WITH FIRST BIT 
  416 D1:B1F8 -  -  -  -  	
  417 D1:B1F8 C9 -  -  -  	ret 
  418 D1:B1F9 -  -  -  -  
  419 D1:B1F9 -  -  -  -  
  420 D1:B1F9 -  -  -  -  ;in shadow
  421 D1:B1F9 -  -  -  -  sdcomp_get_next_alpha_bit:
  422 D1:B1F9 -  -  -  -  	
  423 D1:B1F9 37 -  -  -  	scf
  424 D1:B1FA -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  425 D1:B1FA DA 07 B2 D1 	jp c,sdcomp_bit_offset_skip
  426 D1:B1FE 3E DA -  -  	ld a,%11011010;jp c 
  427 D1:B200 32 FA B1 D1 	ld (sdcomp_bit_offset),a
  428 D1:B204 3E 00 -  -  	ld a,0
  429 D1:B206 C9 -  -  -  	ret ;return 0 first bit
  430 D1:B207 -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  431 D1:B207 -  -  -  -  	;CHECKS IF OUTSIDE OF SPRITE,VIRTUAL 0s
  432 D1:B207 08 -  -  -  	ex af,af' ;'
  433 D1:B208 B7 -  -  -  	or a
  434 D1:B209 CA 40 B2 D1 	jp z,sdcomp_line_end
  435 D1:B20D 08 -  -  -  	ex af,af' ;'
  436 D1:B20E -  -  -  -  
  437 D1:B20E -  -  -  -  	;LOAD NEXT BIT
  438 D1:B20E -  -  -  -  	
  439 D1:B20E 7E -  -  -  	ld a,(hl)
  440 D1:B20F A1 -  -  -  	and c 
  441 D1:B210 CD 6E B2 D1 	call sdcomp_next_in_bitstream;incs bitstream
  442 D1:B214 -  -  -  -  	
  443 D1:B214 37 -  -  -  	scf 
  444 D1:B215 -  -  -  -  sdcomp_no_alpha_2 .equ $
  445 D1:B215 DA 1B B2 D1 	jp c,sdcomp_no_alpha_skip
  446 D1:B219 3E 01 -  -  	ld a,1
  447 D1:B21B -  -  -  -  sdcomp_no_alpha_skip:
  448 D1:B21B -  -  -  -  	
  449 D1:B21B -  -  -  -  	
  450 D1:B21B -  -  -  -  	;DEC WIDTH COUNTER
  451 D1:B21B 08 -  -  -  	ex af,af' ;';to shadow
  452 D1:B21C 3D -  -  -  	dec a;dec width counter
  453 D1:B21D C2 3E B2 D1 	jp nz,sdcomp_setup_line_gap_skip
  454 D1:B221 -  -  -  -  	
  455 D1:B221 -  -  -  -  	;END OF LINE REACHED, have just read alpha last bit of line
  456 D1:B221 -  -  -  -  	
  457 D1:B221 -  -  -  -  	;AT LINE END,WRITE LOOPS/LINE DATA
  458 D1:B221 F5 -  -  -  	push af;push shadow a 
  459 D1:B222 -  -  -  -  	;DEC NUMBER LINES REMAINING
  460 D1:B222 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  461 D1:B222 3E 00 -  -  	ld a,0
  462 D1:B224 3D -  -  -  	dec a 
  463 D1:B225 32 23 B2 D1 	ld (sdcomp_lines_remaining),a
  464 D1:B229 C2 33 B2 D1 	jp nz,sdcomp_set_end_flag_skip
  465 D1:B22D -  -  -  -  	;end of last line reached 
  466 D1:B22D 3E DA -  -  	ld a,%11011010;jp c
  467 D1:B22F 32 F3 B0 D1 	ld (sdcomp_end_reached_flag) , a
  468 D1:B233 -  -  -  -  sdcomp_set_end_flag_skip:
  469 D1:B233 -  -  -  -  	;SET UP NUMBER OF VIRTUAL ZEROES
  470 D1:B233 E5 -  -  -  	push hl
  471 D1:B234 -  -  -  -  sdcomp_zeroes_between_lines .equ $ + 1 
  472 D1:B234 21 00 00 00 	ld hl,0;320-width
  473 D1:B238 22 43 B2 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  474 D1:B23C E1 -  -  -  	pop hl
  475 D1:B23D F1 -  -  -  	pop af 
  476 D1:B23E -  -  -  -  	
  477 D1:B23E -  -  -  -  	
  478 D1:B23E -  -  -  -  sdcomp_setup_line_gap_skip:
  479 D1:B23E 08 -  -  -  	ex af,af' ;';out of shadow
  480 D1:B23F C9 -  -  -  	ret;A HOLDS 0 OR NOT 0
  481 D1:B240 -  -  -  -  	
  482 D1:B240 -  -  -  -  	
  483 D1:B240 -  -  -  -  	;IF OUTSIDE OF SPRITE,RETURN VIRTUAL 0
  484 D1:B240 -  -  -  -  sdcomp_line_end:
  485 D1:B240 08 -  -  -  	ex af,af' ;';out of shadow keep a' at 0 until next line start reached 
  486 D1:B241 E5 -  -  -  	push hl
  487 D1:B242 -  -  -  -  	;DEC REMAINING ZEROES
  488 D1:B242 -  -  -  -  sdcomp_remaining_zeroes_between_lines .equ $ + 1 
  489 D1:B242 21 00 00 00 	ld hl,0;320 - width 
  490 D1:B246 2B -  -  -  	dec hl
  491 D1:B247 22 43 B2 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  492 D1:B24B 7D -  -  -  	ld a,l
  493 D1:B24C B4 -  -  -  	or h
  494 D1:B24D E1 -  -  -  	pop hl
  495 D1:B24E CA 55 B2 D1 	jp z,sdcomp_line_gap_end;IF END OF VIRTUAL ZEROES
  496 D1:B252 3E 00 -  -  	ld a,0
  497 D1:B254 C9 -  -  -  	ret;return 0
  498 D1:B255 -  -  -  -  	
  499 D1:B255 -  -  -  -  sdcomp_line_gap_end:
  500 D1:B255 -  -  -  -  	
  501 D1:B255 37 -  -  -  	scf 
  502 D1:B256 -  -  -  -  sdcomp_bg_sprite_4 .equ $ 
  503 D1:B256 D2 60 B2 D1 	jp nc,sdcomp_bg_sprite_4_skip
  504 D1:B25A -  -  -  -  	
  505 D1:B25A 3A 03 B1 D1 	ld a,(sdcomp_loop_counter)
  506 D1:B25E 12 -  -  -  	ld (de),a;write loops per line data
  507 D1:B25F 13 -  -  -  	inc de
  508 D1:B260 -  -  -  -  sdcomp_bg_sprite_4_skip:
  509 D1:B260 -  -  -  -  	
  510 D1:B260 D9 -  -  -  	exx;out
  511 D1:B261 -  -  -  -  
  512 D1:B261 37 -  -  -  	scf
  513 D1:B262 -  -  -  -  sdcomp_flip_7 .equ $ ;call c 
  514 D1:B262 D4 FF B2 D1 	call nc,sdcomp_traverse_line_data
  515 D1:B266 -  -  -  -  
  516 D1:B266 D9 -  -  -  	exx ;in
  517 D1:B267 -  -  -  -  	
  518 D1:B267 08 -  -  -  	ex af,af' ;';to shadow
  519 D1:B268 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  520 D1:B268 3E 00 -  -  	ld a,0;ld shadow a with width
  521 D1:B26A 08 -  -  -  	ex af,af' ;';out of shadow
  522 D1:B26B 3E 00 -  -  	ld a,0;ret 0
  523 D1:B26D C9 -  -  -  	ret
  524 D1:B26E -  -  -  -  
  525 D1:B26E -  -  -  -  
  526 D1:B26E -  -  -  -  
  527 D1:B26E -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
  528 D1:B26E -  -  -  -  sdcomp_next_in_bitstream:
  529 D1:B26E -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
  530 D1:B26E CB 09 -  -  	rrc c;rlc flip
  531 D1:B270 D0 -  -  -  	ret nc
  532 D1:B271 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
  533 D1:B271 23 -  -  -  	inc hl;dec hl flip
  534 D1:B272 C9 -  -  -  	ret
  535 D1:B273 -  -  -  -  
  536 D1:B273 -  -  -  -  
  537 D1:B273 -  -  -  -  
  538 D1:B273 -  -  -  -  
  539 D1:B273 -  -  -  -  
  540 D1:B273 -  -  -  -  
  541 D1:B273 -  -  -  -  ;bit orders
  542 D1:B273 -  -  -  -  ;	noflip   flip 
  543 D1:B273 -  -  -  -  ;4bpp 3210 	 0123
  544 D1:B273 -  -  -  -  ;3bpp 210	 012
  545 D1:B273 -  -  -  -  ;2bpp 10	 01
  546 D1:B273 -  -  -  -  ;1bpp 0		 0
  547 D1:B273 -  -  -  -  
  548 D1:B273 -  -  -  -  
  549 D1:B273 -  -  -  -  ;not in shadow,returns a=0000color
  550 D1:B273 -  -  -  -  sdcomp_get_color_data:
  551 D1:B273 D5 -  -  -  	push de 
  552 D1:B274 1E 00 -  -  	ld e,0
  553 D1:B276 -  -  -  -  	
  554 D1:B276 37 -  -  -  	scf
  555 D1:B277 -  -  -  -  sdcomp_0bpc .equ $ 
  556 D1:B277 D2 C1 B2 D1 	jp nc,sdcomp_get_color_from_index
  557 D1:B27B -  -  -  -  	
  558 D1:B27B 7E -  -  -  	ld a,(hl)
  559 D1:B27C A1 -  -  -  	and c 
  560 D1:B27D CD 6E B2 D1 	call sdcomp_next_in_bitstream
  561 D1:B281 B7 -  -  -  	or a
  562 D1:B282 CA 88 B2 D1 	jp z,sdcomp_get_color_data_set_skip_1
  563 D1:B286 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  564 D1:B286 CB C3 -  -  	set 0,e 
  565 D1:B288 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  566 D1:B288 -  -  -  -  	
  567 D1:B288 37 -  -  -  	scf
  568 D1:B289 -  -  -  -  sdcomp_1bpc .equ $
  569 D1:B289 D2 C1 B2 D1 	jp nc,sdcomp_get_color_from_index
  570 D1:B28D -  -  -  -  	
  571 D1:B28D -  -  -  -  	
  572 D1:B28D 7E -  -  -  	ld a,(hl)
  573 D1:B28E A1 -  -  -  	and c 
  574 D1:B28F CD 6E B2 D1 	call sdcomp_next_in_bitstream
  575 D1:B293 B7 -  -  -  	or a
  576 D1:B294 CA 9A B2 D1 	jp z,sdcomp_get_color_data_set_skip_2
  577 D1:B298 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  578 D1:B298 CB CB -  -  	set 1,e 
  579 D1:B29A -  -  -  -  sdcomp_get_color_data_set_skip_2:
  580 D1:B29A -  -  -  -  	
  581 D1:B29A 37 -  -  -  	scf
  582 D1:B29B -  -  -  -  sdcomp_2bpc .equ $
  583 D1:B29B D2 C1 B2 D1 	jp nc,sdcomp_get_color_from_index
  584 D1:B29F -  -  -  -  	
  585 D1:B29F 7E -  -  -  	ld a,(hl)
  586 D1:B2A0 A1 -  -  -  	and c 
  587 D1:B2A1 CD 6E B2 D1 	call sdcomp_next_in_bitstream
  588 D1:B2A5 B7 -  -  -  	or a
  589 D1:B2A6 CA AC B2 D1 	jp z,sdcomp_get_color_data_set_skip_3
  590 D1:B2AA -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  591 D1:B2AA CB D3 -  -  	set 2,e 
  592 D1:B2AC -  -  -  -  sdcomp_get_color_data_set_skip_3:
  593 D1:B2AC -  -  -  -  	
  594 D1:B2AC 37 -  -  -  	scf
  595 D1:B2AD -  -  -  -  sdcomp_3bpc .equ $
  596 D1:B2AD D2 C1 B2 D1 	jp nc,sdcomp_get_color_from_index	
  597 D1:B2B1 -  -  -  -  
  598 D1:B2B1 7E -  -  -  	ld a,(hl)
  599 D1:B2B2 A1 -  -  -  	and c 
  600 D1:B2B3 CD 6E B2 D1 	call sdcomp_next_in_bitstream
  601 D1:B2B7 B7 -  -  -  	or a
  602 D1:B2B8 CA BE B2 D1 	jp z,sdcomp_get_color_data_set_skip_4
  603 D1:B2BC -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  604 D1:B2BC CB DB -  -  	set 3,e 
  605 D1:B2BE -  -  -  -  sdcomp_get_color_data_set_skip_4:
  606 D1:B2BE -  -  -  -  ;4bpp, interpret as color data 
  607 D1:B2BE 7B -  -  -  	ld a,e 
  608 D1:B2BF D1 -  -  -  	pop de 
  609 D1:B2C0 C9 -  -  -  	ret 
  610 D1:B2C1 -  -  -  -  
  611 D1:B2C1 -  -  -  -  sdcomp_get_color_from_index:
  612 D1:B2C1 E5 -  -  -  	push hl 
  613 D1:B2C2 C5 -  -  -  	push bc 
  614 D1:B2C3 01 00 00 00 	ld bc,0
  615 D1:B2C7 21 E6 B2 D1 	ld hl,sdcomp_indexed_color_data
  616 D1:B2CB 4B -  -  -  	ld c,e ;index number
  617 D1:B2CC CB 39 -  -  	srl c;div by 2
  618 D1:B2CE 09 -  -  -  	add hl,bc;add index
  619 D1:B2CF 7E -  -  -  	ld a,(hl)
  620 D1:B2D0 CB 43 -  -  	bit 0,e;check lsb
  621 D1:B2D2 CA DC B2 D1 	jp z,sdcomp_get_color_from_index_and_msn
  622 D1:B2D6 E6 0F -  -  	and %00001111;a holds 0000color
  623 D1:B2D8 C1 -  -  -  	pop bc 
  624 D1:B2D9 E1 -  -  -  	pop hl 
  625 D1:B2DA D1 -  -  -  	pop de 
  626 D1:B2DB C9 -  -  -  	ret 
  627 D1:B2DC -  -  -  -  	
  628 D1:B2DC -  -  -  -  sdcomp_get_color_from_index_and_msn:
  629 D1:B2DC E6 F0 -  -  	and %11110000
  630 D1:B2DE 0F -  -  -  	rrca 
  631 D1:B2DF 0F -  -  -  	rrca 
  632 D1:B2E0 0F -  -  -  	rrca 
  633 D1:B2E1 0F -  -  -  	rrca ;a holds 0000colro
  634 D1:B2E2 C1 -  -  -  	pop bc 
  635 D1:B2E3 E1 -  -  -  	pop hl 
  636 D1:B2E4 D1 -  -  -  	pop de 
  637 D1:B2E5 C9 -  -  -  	ret
  638 D1:B2E6 -  -  -  -  	
  639 D1:B2E6 -  -  -  -  sdcomp_indexed_color_data:;4bpc
  640 D1:B2E6 00 00 00 00 	.db 0,0,0,0
  641 D1:B2EA -  -  -  -  
  642 D1:B2EA -  -  -  -  
  643 D1:B2EA -  -  -  -  
  644 D1:B2EA -  -  -  -  
  645 D1:B2EA -  -  -  -  
  646 D1:B2EA -  -  -  -  ;not in shadow, returns a = color0000
  647 D1:B2EA -  -  -  -  sdcomp_get_next_color_leading_nibble:
  648 D1:B2EA CD 73 B2 D1 	call sdcomp_get_color_data
  649 D1:B2EE 0F -  -  -  	rrca 
  650 D1:B2EF 0F -  -  -  	rrca 
  651 D1:B2F0 0F -  -  -  	rrca 
  652 D1:B2F1 0F -  -  -  	rrca
  653 D1:B2F2 C9 -  -  -  	ret 
  654 D1:B2F3 -  -  -  -  
  655 D1:B2F3 -  -  -  -  
  656 D1:B2F3 -  -  -  -  ;not in shadow, returns a = 0000color
  657 D1:B2F3 -  -  -  -  sdcomp_get_next_color_ending_nibble:
  658 D1:B2F3 CD 73 B2 D1 	call sdcomp_get_color_data
  659 D1:B2F7 C9 -  -  -  	ret
  660 D1:B2F8 -  -  -  -  
  661 D1:B2F8 -  -  -  -  sdcomp_end:
  662 D1:B2F8 -  -  -  -  	;write final loop/line data
  663 D1:B2F8 3A 03 B1 D1 	ld a,(sdcomp_loop_counter)
  664 D1:B2FC 12 -  -  -  	ld (de),a;write loops per line data
  665 D1:B2FD 13 -  -  -  	inc de
  666 D1:B2FE C9 -  -  -  	ret 
  667 D1:B2FF -  -  -  -  
  668 D1:B2FF -  -  -  -  
  669 D1:B2FF -  -  -  -  
  670 D1:B2FF -  -  -  -  
  671 D1:B2FF -  -  -  -  
  672 D1:B2FF -  -  -  -  
  673 D1:B2FF -  -  -  -  
  674 D1:B2FF -  -  -  -  ;not in shadow ,destroys a
  675 D1:B2FF -  -  -  -  sdcomp_traverse_line_data:
  676 D1:B2FF -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  677 D1:B2FF 21 00 00 00 	ld hl,0
  678 D1:B303 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  679 D1:B303 0E 00 -  -  	ld c,0
  680 D1:B305 D9 -  -  -  	exx;toshadow 
  681 D1:B306 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  682 D1:B306 21 00 00 00 	ld hl,0
  683 D1:B30A -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  684 D1:B30A 0E 00 -  -  	ld c,0
  685 D1:B30C D5 -  -  -  	push de
  686 D1:B30D 3A 69 B2 D1 	ld a,(sdcomp_sprite_width)
  687 D1:B311 5F -  -  -  	ld e,a
  688 D1:B312 -  -  -  -  sdcomp_traverse_line_data_loop:
  689 D1:B312 CB 09 -  -  	rrc c 
  690 D1:B314 D2 19 B3 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip
  691 D1:B318 23 -  -  -  	inc hl
  692 D1:B319 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  693 D1:B319 7E -  -  -  	ld a,(hl)
  694 D1:B31A A1 -  -  -  	and c
  695 D1:B31B -  -  -  -  sdcomp_no_alpha_3 .equ $
  696 D1:B31B CA 31 B3 D1 	jp z,sdcomp_traverse_line_data_color_skip;jp c for no alpha
  697 D1:B31F D9 -  -  -  	exx;out of shadow 
  698 D1:B320 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  699 D1:B320 CB 09 -  -  	rrc c ;rotate mask
  700 D1:B322 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  701 D1:B322 CB 09 -  -  	rrc c ;rrc a for 1bpc
  702 D1:B324 -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  703 D1:B324 CB 09 -  -  	rrc c;rrc a for 2bpc
  704 D1:B326 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  705 D1:B326 CB 09 -  -  	rrc c
  706 D1:B328 -  -  -  -  	
  707 D1:B328 79 -  -  -  	ld a,c
  708 D1:B329 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  709 D1:B329 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000
  710 D1:B32B CA 30 B3 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  711 D1:B32F 23 -  -  -  	inc hl
  712 D1:B330 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  713 D1:B330 D9 -  -  -  	exx ;toshadow
  714 D1:B331 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  715 D1:B331 1D -  -  -  	dec e
  716 D1:B332 C2 12 B3 D1 	jp nz,sdcomp_traverse_line_data_loop
  717 D1:B336 D1 -  -  -  	pop de  
  718 D1:B337 22 07 B3 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  719 D1:B33B 79 -  -  -  	ld a,c
  720 D1:B33C 32 0B B3 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  721 D1:B340 D9 -  -  -  	exx ;out
  722 D1:B341 22 00 B3 D1 	ld (sdcomp_color_data_line_end_byte),hl
  723 D1:B345 79 -  -  -  	ld a,c 
  724 D1:B346 32 04 B3 D1 	ld (sdcomp_color_data_line_end_mask),a
  725 D1:B34A C9 -  -  -  	ret
  726 D1:B34B -  -  -  -  
  727 D1:B34B -  -  -  -  
  728 D1:B34B -  -  -  -  
  729 D1:B34B -  -  -  -  sdcomp_set_flip:
  730 D1:B34B 3E D2 -  -  	ld a,%11010010;jp nc 
  731 D1:B34D 32 C3 B0 D1 	ld (sdcomp_flip_1),a 
  732 D1:B351 -  -  -  -   
  733 D1:B351 3E DC -  -  	ld a,%11011100;call c 
  734 D1:B353 32 62 B2 D1 	ld (sdcomp_flip_7),a
  735 D1:B357 -  -  -  -  	
  736 D1:B357 3E 01 -  -  	ld a,%00000001;rlc 
  737 D1:B359 32 6F B2 D1 	ld (sdcomp_flip_bitstream),a
  738 D1:B35D 3E 2B -  -  	ld a,%00101011;dec hl
  739 D1:B35F 32 71 B2 D1 	ld (sdcomp_flip_bitstream_2),a
  740 D1:B363 -  -  -  -  	
  741 D1:B363 -  -  -  -  	
  742 D1:B363 -  -  -  -  	;set reverse color reading
  743 D1:B363 3E C3 -  -  	ld a,%11000011;set 0,e
  744 D1:B365 32 87 B2 D1 	ld (sdcomp_color_bit_0),a 
  745 D1:B369 3E CB -  -  	ld a,%11001011;set 1,e
  746 D1:B36B 32 99 B2 D1 	ld (sdcomp_color_bit_1),a 
  747 D1:B36F 3E D3 -  -  	ld a,%11010011;set 2,e
  748 D1:B371 32 AB B2 D1 	ld (sdcomp_color_bit_2),a 
  749 D1:B375 3E DB -  -  	ld a,%11011011;set 3,e
  750 D1:B377 32 BD B2 D1 	ld (sdcomp_color_bit_3),a 
  751 D1:B37B -  -  -  -  	
  752 D1:B37B 3E D8 -  -  	ld a,%11011000;ret c 
  753 D1:B37D 32 05 B4 D1 	ld (sdcomp_flip_4),a
  754 D1:B381 32 5C B4 D1 	ld (sdcomp_flip_5),a
  755 D1:B385 32 AB B4 D1 	ld (sdcomp_flip_6),a
  756 D1:B389 32 F0 B4 D1 	ld (sdcomp_flip_8),a
  757 D1:B38D -  -  -  -  	
  758 D1:B38D C9 -  -  -  	ret 
  759 D1:B38E -  -  -  -  	
  760 D1:B38E -  -  -  -  	
  761 D1:B38E -  -  -  -  sdcomp_reset_flip:
  762 D1:B38E 3E DA -  -  	ld a,%11011010;jp c 
  763 D1:B390 32 C3 B0 D1 	ld (sdcomp_flip_1),a 
  764 D1:B394 -  -  -  -  
  765 D1:B394 3E D4 -  -  	ld a,%11010100;call nc 
  766 D1:B396 32 62 B2 D1 	ld (sdcomp_flip_7),a
  767 D1:B39A -  -  -  -  	
  768 D1:B39A 3E 09 -  -  	ld a,%00001001;rrc 
  769 D1:B39C 32 6F B2 D1 	ld (sdcomp_flip_bitstream),a
  770 D1:B3A0 3E 23 -  -  	ld a,%00100011;inc hl
  771 D1:B3A2 32 71 B2 D1 	ld (sdcomp_flip_bitstream_2),a
  772 D1:B3A6 -  -  -  -  	
  773 D1:B3A6 -  -  -  -  	
  774 D1:B3A6 3E D0 -  -  	ld a,%11010000;ret nc 
  775 D1:B3A8 32 05 B4 D1 	ld (sdcomp_flip_4),a
  776 D1:B3AC 32 5C B4 D1 	ld (sdcomp_flip_5),a
  777 D1:B3B0 32 AB B4 D1 	ld (sdcomp_flip_6),a
  778 D1:B3B4 32 F0 B4 D1 	ld (sdcomp_flip_8),a
  779 D1:B3B8 -  -  -  -  	
  780 D1:B3B8 -  -  -  -  	
  781 D1:B3B8 C9 -  -  -  	ret 
  782 D1:B3B9 -  -  -  -  
  783 D1:B3B9 -  -  -  -  
  784 D1:B3B9 -  -  -  -  
  785 D1:B3B9 -  -  -  -  sdcomp_set_offset:
  786 D1:B3B9 3E D2 -  -  	ld a,%11010010;jp nc 
  787 D1:B3BB 32 FA B1 D1 	ld (sdcomp_bit_offset),a
  788 D1:B3BF 3E 3C -  -  	ld a, %00111100;inc a 
  789 D1:B3C1 32 4D B0 D1 	ld (sdcomp_offset_BG),a
  790 D1:B3C5 3E DA -  -  	ld a,%11011010;jp c
  791 D1:B3C7 32 9E B5 D1 	ld (sdcomp_offset_BG_2),a	
  792 D1:B3CB C9 -  -  -  	ret
  793 D1:B3CC -  -  -  -  
  794 D1:B3CC -  -  -  -  
  795 D1:B3CC -  -  -  -  
  796 D1:B3CC -  -  -  -  
  797 D1:B3CC -  -  -  -  ;0,1,2,3,4bpp modes
  798 D1:B3CC -  -  -  -  ;destroys a 
  799 D1:B3CC -  -  -  -  sdcomp_set_4bpp:
  800 D1:B3CC 3E D2 -  -  	ld a,%11010010;jp nc
  801 D1:B3CE 32 77 B2 D1 	ld (sdcomp_0bpc),a
  802 D1:B3D2 32 89 B2 D1 	ld (sdcomp_1bpc),a
  803 D1:B3D6 32 9B B2 D1 	ld (sdcomp_2bpc),a
  804 D1:B3DA 32 AD B2 D1 	ld (sdcomp_3bpc),a
  805 D1:B3DE -  -  -  -  	
  806 D1:B3DE -  -  -  -  	
  807 D1:B3DE -  -  -  -  ;traverse data 
  808 D1:B3DE 3E 09 -  -  	ld a,%00001001;rrc c
  809 D1:B3E0 32 21 B3 D1 	ld (sdcomp_traverse_1bpp),a
  810 D1:B3E4 32 23 B3 D1 	ld (sdcomp_traverse_2bpp),a
  811 D1:B3E8 32 25 B3 D1 	ld (sdcomp_traverse_3bpp),a
  812 D1:B3EC 32 27 B3 D1 	ld (sdcomp_traverse_4bpp),a
  813 D1:B3F0 -  -  -  -  	
  814 D1:B3F0 3E F0 -  -  	ld a,%11110000
  815 D1:B3F2 32 2A B3 D1 	ld (sdcomp_traverse_bit_check),a
  816 D1:B3F6 -  -  -  -  	
  817 D1:B3F6 -  -  -  -  ;setting indexed colors 
  818 D1:B3F6 3E DA -  -  	ld a,%11011010;jp c 
  819 D1:B3F8 32 8C B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  820 D1:B3FC 32 97 B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  821 D1:B400 32 A2 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a
  822 D1:B404 -  -  -  -  	
  823 D1:B404 37 -  -  -  	scf 
  824 D1:B405 -  -  -  -  sdcomp_flip_4 .equ $
  825 D1:B405 D0 -  -  -  	ret nc 
  826 D1:B406 -  -  -  -  	;not flipped
  827 D1:B406 -  -  -  -  	
  828 D1:B406 3E DB -  -  	ld a,%11011011;set 3,e
  829 D1:B408 32 87 B2 D1 	ld (sdcomp_color_bit_0),a 
  830 D1:B40C 3E D3 -  -  	ld a,%11010011;set 2,e
  831 D1:B40E 32 99 B2 D1 	ld (sdcomp_color_bit_1),a 
  832 D1:B412 3E CB -  -  	ld a,%11001011;set 1,e
  833 D1:B414 32 AB B2 D1 	ld (sdcomp_color_bit_2),a 
  834 D1:B418 3E C3 -  -  	ld a,%11000011;set 0,e
  835 D1:B41A 32 BD B2 D1 	ld (sdcomp_color_bit_3),a 
  836 D1:B41E C9 -  -  -  	ret 
  837 D1:B41F -  -  -  -  	
  838 D1:B41F -  -  -  -  
  839 D1:B41F -  -  -  -  sdcomp_set_3bpp:
  840 D1:B41F 3E D2 -  -  	ld a,%11010010;jp nc
  841 D1:B421 32 77 B2 D1 	ld (sdcomp_0bpc),a
  842 D1:B425 32 89 B2 D1 	ld (sdcomp_1bpc),a
  843 D1:B429 32 9B B2 D1 	ld (sdcomp_2bpc),a
  844 D1:B42D -  -  -  -  	
  845 D1:B42D 3E DA -  -  	ld a,%11011010;jp c 
  846 D1:B42F 32 AD B2 D1 	ld (sdcomp_3bpc),a
  847 D1:B433 -  -  -  -  	
  848 D1:B433 -  -  -  -  ;traverse data	
  849 D1:B433 3E 09 -  -  	ld a,%00001001;rrc c
  850 D1:B435 32 21 B3 D1 	ld (sdcomp_traverse_1bpp),a
  851 D1:B439 32 23 B3 D1 	ld (sdcomp_traverse_2bpp),a
  852 D1:B43D 32 25 B3 D1 	ld (sdcomp_traverse_3bpp),a
  853 D1:B441 3E 0F -  -  	ld a,%00001111;rrc a
  854 D1:B443 32 27 B3 D1 	ld (sdcomp_traverse_4bpp),a
  855 D1:B447 -  -  -  -  	
  856 D1:B447 3E E0 -  -  	ld a,%11100000
  857 D1:B449 32 2A B3 D1 	ld (sdcomp_traverse_bit_check),a
  858 D1:B44D -  -  -  -  	
  859 D1:B44D -  -  -  -  ;setting indexed colors 
  860 D1:B44D 3E D2 -  -  	ld a,%11010010;jp nc 
  861 D1:B44F 32 8C B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  862 D1:B453 32 97 B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  863 D1:B457 32 A2 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a
  864 D1:B45B -  -  -  -  	
  865 D1:B45B -  -  -  -  	
  866 D1:B45B -  -  -  -  	
  867 D1:B45B 37 -  -  -  	scf 
  868 D1:B45C -  -  -  -  sdcomp_flip_5 .equ $
  869 D1:B45C D0 -  -  -  	ret nc 
  870 D1:B45D -  -  -  -  	;not flipped
  871 D1:B45D -  -  -  -  	
  872 D1:B45D 3E D3 -  -  	ld a,%11010011;set 2,e
  873 D1:B45F 32 87 B2 D1 	ld (sdcomp_color_bit_0),a 
  874 D1:B463 3E CB -  -  	ld a,%11001011;set 1,e
  875 D1:B465 32 99 B2 D1 	ld (sdcomp_color_bit_1),a 
  876 D1:B469 3E C3 -  -  	ld a,%11000011;set 0,e
  877 D1:B46B 32 AB B2 D1 	ld (sdcomp_color_bit_2),a 
  878 D1:B46F -  -  -  -  
  879 D1:B46F C9 -  -  -  	ret 
  880 D1:B470 -  -  -  -  
  881 D1:B470 -  -  -  -  sdcomp_set_2bpp:
  882 D1:B470 3E D2 -  -  	ld a,%11010010;jp nc
  883 D1:B472 32 77 B2 D1 	ld (sdcomp_0bpc),a
  884 D1:B476 32 89 B2 D1 	ld (sdcomp_1bpc),a
  885 D1:B47A -  -  -  -  	
  886 D1:B47A 3E DA -  -  	ld a,%11011010;jp c 
  887 D1:B47C 32 9B B2 D1 	ld (sdcomp_2bpc),a
  888 D1:B480 -  -  -  -  	
  889 D1:B480 -  -  -  -  ;traverse data	
  890 D1:B480 3E 09 -  -  	ld a,%00001001;rrc c
  891 D1:B482 32 21 B3 D1 	ld (sdcomp_traverse_1bpp),a
  892 D1:B486 32 23 B3 D1 	ld (sdcomp_traverse_2bpp),a
  893 D1:B48A 3E 0F -  -  	ld a,%00001111;rrc a
  894 D1:B48C 32 25 B3 D1 	ld (sdcomp_traverse_3bpp),a
  895 D1:B490 32 27 B3 D1 	ld (sdcomp_traverse_4bpp),a
  896 D1:B494 -  -  -  -  	
  897 D1:B494 3E C0 -  -  	ld a,%11000000 
  898 D1:B496 32 2A B3 D1 	ld (sdcomp_traverse_bit_check),a
  899 D1:B49A -  -  -  -  ;setting indexed colors 
  900 D1:B49A 3E D2 -  -  	ld a,%11010010;jp nc 
  901 D1:B49C 32 8C B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  902 D1:B4A0 32 97 B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  903 D1:B4A4 3E DA -  -  	ld a,%11011010;jp c 
  904 D1:B4A6 32 A2 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  905 D1:B4AA -  -  -  -  	
  906 D1:B4AA 37 -  -  -  	scf 
  907 D1:B4AB -  -  -  -  sdcomp_flip_6 .equ $
  908 D1:B4AB D0 -  -  -  	ret nc 
  909 D1:B4AC -  -  -  -  	;not flipped
  910 D1:B4AC -  -  -  -  	
  911 D1:B4AC -  -  -  -  
  912 D1:B4AC 3E CB -  -  	ld a,%11001011;set 1,e
  913 D1:B4AE 32 87 B2 D1 	ld (sdcomp_color_bit_0),a 
  914 D1:B4B2 3E C3 -  -  	ld a,%11000011;set 0,e
  915 D1:B4B4 32 99 B2 D1 	ld (sdcomp_color_bit_1),a 
  916 D1:B4B8 -  -  -  -  
  917 D1:B4B8 C9 -  -  -  	ret 
  918 D1:B4B9 -  -  -  -  
  919 D1:B4B9 -  -  -  -  
  920 D1:B4B9 -  -  -  -  
  921 D1:B4B9 -  -  -  -  sdcomp_set_1bpp:
  922 D1:B4B9 3E D2 -  -  	ld a,%11010010;jp nc
  923 D1:B4BB 32 77 B2 D1 	ld (sdcomp_0bpc),a
  924 D1:B4BF -  -  -  -  	
  925 D1:B4BF 3E DA -  -  	ld a,%11011010;jp c 
  926 D1:B4C1 32 89 B2 D1 	ld (sdcomp_1bpc),a
  927 D1:B4C5 -  -  -  -  	
  928 D1:B4C5 -  -  -  -  ;traverse data	
  929 D1:B4C5 3E 09 -  -  	ld a,%00001001;rrc c
  930 D1:B4C7 32 21 B3 D1 	ld (sdcomp_traverse_1bpp),a
  931 D1:B4CB 3E 0F -  -  	ld a,%00001111;rrc a
  932 D1:B4CD 32 23 B3 D1 	ld (sdcomp_traverse_2bpp),a
  933 D1:B4D1 32 25 B3 D1 	ld (sdcomp_traverse_3bpp),a
  934 D1:B4D5 32 27 B3 D1 	ld (sdcomp_traverse_4bpp),a
  935 D1:B4D9 3E 80 -  -  	ld a,%10000000
  936 D1:B4DB 32 2A B3 D1 	ld (sdcomp_traverse_bit_check),a
  937 D1:B4DF -  -  -  -  ;setting indexed colors 
  938 D1:B4DF 3E D2 -  -  	ld a,%11010010;jp nc 
  939 D1:B4E1 32 8C B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  940 D1:B4E5 3E DA -  -  	ld a,%11011010;jp c 
  941 D1:B4E7 32 97 B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  942 D1:B4EB 32 A2 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  943 D1:B4EF -  -  -  -  	
  944 D1:B4EF -  -  -  -  
  945 D1:B4EF 37 -  -  -  	scf 
  946 D1:B4F0 -  -  -  -  sdcomp_flip_8 .equ $
  947 D1:B4F0 D0 -  -  -  	ret nc 
  948 D1:B4F1 -  -  -  -  	;not flipped
  949 D1:B4F1 -  -  -  -  	
  950 D1:B4F1 -  -  -  -  
  951 D1:B4F1 3E C3 -  -  	ld a,%11000011;set 0,e
  952 D1:B4F3 32 87 B2 D1 	ld (sdcomp_color_bit_0),a 
  953 D1:B4F7 -  -  -  -  
  954 D1:B4F7 C9 -  -  -  	ret 
  955 D1:B4F8 -  -  -  -  	
  956 D1:B4F8 -  -  -  -  
  957 D1:B4F8 -  -  -  -  sdcomp_set_0bpp:
  958 D1:B4F8 3E DA -  -  	ld a,%11011010;jp c 
  959 D1:B4FA 32 77 B2 D1 	ld (sdcomp_0bpc),a
  960 D1:B4FE -  -  -  -  
  961 D1:B4FE -  -  -  -  
  962 D1:B4FE 3E D2 -  -  	ld a,%11010010;jp nc 
  963 D1:B500 32 8C B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  964 D1:B504 3E DA -  -  	ld a,%11011010;jp c 
  965 D1:B506 32 97 B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  966 D1:B50A 32 A2 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  967 D1:B50E -  -  -  -  	
  968 D1:B50E C9 -  -  -  	ret 
  969 D1:B50F -  -  -  -  	
  970 D1:B50F -  -  -  -  sdcomp_set_noalpha:
  971 D1:B50F 3E DA -  -  	ld a,%11011010;jp c 
  972 D1:B511 32 71 B0 D1 	ld (sdcomp_no_alpha_1),a 
  973 D1:B515 32 1B B3 D1 	ld (sdcomp_no_alpha_3),a 
  974 D1:B519 3E D2 -  -  	ld a,%11010010;jp nc 
  975 D1:B51B 32 15 B2 D1 	ld (sdcomp_no_alpha_2),a 
  976 D1:B51F C9 -  -  -  	ret 
  977 D1:B520 -  -  -  -  	
  978 D1:B520 -  -  -  -  sdcomp_reset_noalpha:
  979 D1:B520 3E DA -  -  	ld a,%11011010;jp c 
  980 D1:B522 32 15 B2 D1 	ld (sdcomp_no_alpha_2),a 
  981 D1:B526 3E D2 -  -  	ld a,%11010010;jp nc 
  982 D1:B528 32 71 B0 D1 	ld (sdcomp_no_alpha_1),a 
  983 D1:B52C 3E CA -  -  	ld a,%11001010;jp z
  984 D1:B52E 32 1B B3 D1 	ld (sdcomp_no_alpha_3),a 
  985 D1:B532 C9 -  -  -  	ret 
  986 D1:B533 -  -  -  -  
  987 D1:B533 -  -  -  -  
  988 D1:B533 -  -  -  -  sdcomp_set_fast_sprite:
  989 D1:B533 3E DA -  -  	ld a,%11011010;jp c 
  990 D1:B535 32 10 B1 D1 	ld (sdcomp_fast_sprite_1),a 
  991 D1:B539 32 51 B1 D1 	ld (sdcomp_fast_sprite_2),a
  992 D1:B53D 32 87 B1 D1 	ld (sdcomp_fast_sprite_3),a
  993 D1:B541 C9 -  -  -  	ret
  994 D1:B542 -  -  -  -  sdcomp_reset_fast_sprite:
  995 D1:B542 3E D2 -  -  	ld a,%11010010;jp nc
  996 D1:B544 32 10 B1 D1 	ld (sdcomp_fast_sprite_1),a 
  997 D1:B548 32 51 B1 D1 	ld (sdcomp_fast_sprite_2),a
  998 D1:B54C 32 87 B1 D1 	ld (sdcomp_fast_sprite_3),a
  999 D1:B550 C9 -  -  -  	ret
 1000 D1:B551 -  -  -  -  	
 1001 D1:B551 -  -  -  -  	
 1002 D1:B551 -  -  -  -  sdcomp_set_bg_sprite:
 1003 D1:B551 3E D2 -  -  	ld a,%11010010;jp nc
 1004 D1:B553 32 49 B0 D1 	ld (sdcomp_bg_sprite_1),a 
 1005 D1:B557 3E DA -  -  	ld a,%11011010;jp c 
 1006 D1:B559 32 64 B0 D1 	ld (sdcomp_bg_sprite_2),a
 1007 D1:B55D 32 E4 B0 D1 	ld (sdcomp_bg_sprite_3),a
 1008 D1:B561 32 56 B2 D1 	ld (sdcomp_bg_sprite_4),a
 1009 D1:B565 C9 -  -  -  	ret
 1010 D1:B566 -  -  -  -  
 1011 D1:B566 -  -  -  -  	
 1012 D1:B566 -  -  -  -  sdcomp_reset_bg_sprite:
 1013 D1:B566 3E DA -  -  	ld a,%11011010;jp c 
 1014 D1:B568 32 49 B0 D1 	ld (sdcomp_bg_sprite_1),a 
 1015 D1:B56C 3E D2 -  -  	ld a,%11010010;jp nc
 1016 D1:B56E 32 64 B0 D1 	ld (sdcomp_bg_sprite_2),a
 1017 D1:B572 32 E4 B0 D1 	ld (sdcomp_bg_sprite_3),a
 1018 D1:B576 32 56 B2 D1 	ld (sdcomp_bg_sprite_4),a
 1019 D1:B57A C9 -  -  -  	ret
 1020 D1:B57B -  -  -  -  
 1021 D1:B57B -  -  -  -  ;not in shadow 
 1022 D1:B57B -  -  -  -  sdcomp_bg_sprite_routine:
 1023 D1:B57B D9 -  -  -  	exx ;in 
 1024 D1:B57C D5 -  -  -  	push de
 1025 D1:B57D D9 -  -  -  	exx ;out 
 1026 D1:B57E D1 -  -  -  	pop de ;transfer loops/line write location to be main write location
 1027 D1:B57F D9 -  -  -  	exx;in 
 1028 D1:B580 C3 A2 B5 D1 	jp sdcomp_bg_sprite_loop_skip;start of data, not virtual
 1029 D1:B584 -  -  -  -  ;not in shadow 
 1030 D1:B584 -  -  -  -  sdcomp_bg_sprite_loop:
 1031 D1:B584 D9 -  -  -  	exx;toshadow 
 1032 D1:B585 -  -  -  -  	
 1033 D1:B585 -  -  -  -  	
 1034 D1:B585 08 -  -  -  	ex af,af' ;'
 1035 D1:B586 47 -  -  -  	ld b,a;b holds a'
 1036 D1:B587 08 -  -  -  	ex af,af' ;'
 1037 D1:B588 78 -  -  -  	ld a,b
 1038 D1:B589 B7 -  -  -  	or a;check if a' is 0
 1039 D1:B58A C2 A2 B5 D1 	jp nz,sdcomp_bg_sprite_loop_skip;if zero check if virtual or not, if not use as real data
 1040 D1:B58E -  -  -  -  	
 1041 D1:B58E -  -  -  -  	;start of virtual zeroes
 1042 D1:B58E -  -  -  -  sdcomp_bg_sprite_traverse_virtual_zeroes:
 1043 D1:B58E CD D0 B1 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1044 D1:B592 47 -  -  -  	ld b,a
 1045 D1:B593 08 -  -  -  	ex af,af' ;'
 1046 D1:B594 F5 -  -  -  	push af
 1047 D1:B595 08 -  -  -  	ex af,af' ;'
 1048 D1:B596 F1 -  -  -  	pop af
 1049 D1:B597 B7 -  -  -  	or a;check if a' is 0
 1050 D1:B598 CA 8E B5 D1 	jp z,sdcomp_bg_sprite_traverse_virtual_zeroes
 1051 D1:B59C 78 -  -  -  	ld a,b;a holds prev alpha pair
 1052 D1:B59D -  -  -  -  	;end of vitual zeroes  
 1053 D1:B59D -  -  -  -  
 1054 D1:B59D 37 -  -  -  	scf 
 1055 D1:B59E -  -  -  -  sdcomp_offset_BG_2 .equ $
 1056 D1:B59E D2 A6 B5 D1 	jp nc,sdcomp_bg_zeroes_end_skip;if offset, use previously read data 
 1057 D1:B5A2 -  -  -  -  	;if no offset, use next alpha pair
 1058 D1:B5A2 -  -  -  -  	
 1059 D1:B5A2 -  -  -  -  sdcomp_bg_sprite_loop_skip:;not in virt 0s 
 1060 D1:B5A2 CD D0 B1 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1061 D1:B5A6 -  -  -  -  sdcomp_bg_zeroes_end_skip:
 1062 D1:B5A6 D9 -  -  -  	exx;out 
 1063 D1:B5A7 -  -  -  -  	
 1064 D1:B5A7 -  -  -  -  	;write mask and color data 
 1065 D1:B5A7 D5 -  -  -  	push de 
 1066 D1:B5A8 -  -  -  -  	
 1067 D1:B5A8 47 -  -  -  	ld b,a;save for later
 1068 D1:B5A9 CB 67 -  -  	bit 4,a ;check if first pixel has color 
 1069 D1:B5AB 3E 00 -  -  	ld a,0
 1070 D1:B5AD 16 FF -  -  	ld d,%11111111;assuming no colors 
 1071 D1:B5AF CA B9 B5 D1 	jp z,sdcomp_bg_pixel_first_skip
 1072 D1:B5B3 -  -  -  -  	;has first color
 1073 D1:B5B3 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
 1074 D1:B5B5 CD F3 B2 D1 	call sdcomp_get_next_color_ending_nibble
 1075 D1:B5B9 -  -  -  -  sdcomp_bg_pixel_first_skip:
 1076 D1:B5B9 -  -  -  -  	;a is either $00 or $0color1
 1077 D1:B5B9 -  -  -  -  	
 1078 D1:B5B9 1E FF -  -  	ld e,%11111111;assuming no colors
 1079 D1:B5BB -  -  -  -  	
 1080 D1:B5BB CB 40 -  -  	bit 0,b;check second pixel alpha
 1081 D1:B5BD 47 -  -  -  	ld b,a;save for later 
 1082 D1:B5BE 3E 00 -  -  	ld a,0
 1083 D1:B5C0 CA CA B5 D1 	jp z,sdcomp_bg_pixel_second_skip;
 1084 D1:B5C4 -  -  -  -  	;has second color 
 1085 D1:B5C4 CD EA B2 D1 	call sdcomp_get_next_color_leading_nibble
 1086 D1:B5C8 -  -  -  -  	;a = color2 0 
 1087 D1:B5C8 1E 0F -  -  	ld e,%00001111;save first pixel of bg
 1088 D1:B5CA -  -  -  -  	
 1089 D1:B5CA -  -  -  -  sdcomp_bg_pixel_second_skip:
 1090 D1:B5CA -  -  -  -  	;a is either 00 or c2 0 
 1091 D1:B5CA -  -  -  -  	;b is either 00 or 0 c1 
 1092 D1:B5CA B0 -  -  -  	or b 
 1093 D1:B5CB 47 -  -  -  	ld b,a;final color data
 1094 D1:B5CC 7A -  -  -  	ld a,d 
 1095 D1:B5CD A3 -  -  -  	and e ;final mask data 
 1096 D1:B5CE -  -  -  -  	
 1097 D1:B5CE D1 -  -  -  	pop de;return to pointer 
 1098 D1:B5CF 12 -  -  -  	ld (de),a;write mask data 
 1099 D1:B5D0 13 -  -  -  	inc de 
 1100 D1:B5D1 78 -  -  -  	ld a,b;color data 
 1101 D1:B5D2 12 -  -  -  	ld (de),a;write color data 
 1102 D1:B5D3 13 -  -  -  	inc de 
 1103 D1:B5D4 -  -  -  -  	
 1104 D1:B5D4 -  -  -  -  	;check if end reached 
 1105 D1:B5D4 3A F3 B0 D1 	ld a,(sdcomp_end_reached_flag)
 1106 D1:B5D8 FE DA -  -  	cp %11011010;jp c
 1107 D1:B5DA 3E 00 -  -  	ld a,0
 1108 D1:B5DC C2 84 B5 D1 	jp nz,sdcomp_bg_sprite_loop 
 1109 D1:B5E0 3E D2 -  -  	ld a,%11010010;jp nc
 1110 D1:B5E2 32 9E B5 D1 	ld (sdcomp_offset_BG_2),a
 1111 D1:B5E6 C9 -  -  -  	ret 
 1112 D1:B5E7 -  -  -  -  
 1113 D1:B5E7 -  -  -  -  ;FIND GAP LENGTH
 1114 D1:B5E7 -  -  -  -  ;read bitsteam in pairs
 1115 D1:B5E7 -  -  -  -  ;gap length = number of full pairs found 
 1116 D1:B5E7 -  -  -  -  
 1117 D1:B5E7 -  -  -  -  ;STARTING PIXEL(S);have read either 11,01,10 in bitstream
 1118 D1:B5E7 -  -  -  -  ;write either both, start,or end pixel 
 1119 D1:B5E7 -  -  -  -  
 1120 D1:B5E7 -  -  -  -  ;LDIR
 1121 D1:B5E7 -  -  -  -  ;read number of pairs of 11 in bitstream 
 1122 D1:B5E7 -  -  -  -  ;if 0 move to ending pixels
 1123 D1:B5E7 -  -  -  -  ;if ends in 00, last full 11 pair will be ending pixels 
 1124 D1:B5E7 -  -  -  -  ;write ldir length 
 1125 D1:B5E7 -  -  -  -  ;if 0 move to next step
 1126 D1:B5E7 -  -  -  -  ;else write ldir data 
 1127 D1:B5E7 -  -  -  -  
 1128 D1:B5E7 -  -  -  -  
 1129 D1:B5E7 -  -  -  -  ;ENDING PIXEL(S)
 1130 D1:B5E7 -  -  -  -  ;00 if there is nothing after leading pixels 
 1131 D1:B5E7 -  -  -  -  ;11 10 01 otherwise
 1132 D1:B5E7 -  -  -  -  
 1133 D1:B5E7 -  -  -  -  ;BACK TO GAP LENGTH
 1134 D1:B5E7 -  -  -  -  
 1135 D1:B5E7 -  -  -  -  
 1136 D1:B5E7 -  -  -  -  
 1137 D1:B5E7 -  -  -  -  
 1138 D1:B5E7 -  -  -  -  
 1139 D1:B5E7 -  -  -  -  
 1140 D1:B5E7 -  -  -  -  
 1141 D1:B5E7 -  -  -  -  
 1142 D1:B5E7 -  -  -  -  
 1143 D1:B5E7 -  -  -  -  
 1144 D1:B5E7 -  -  -  -  
 1145 D1:B5E7 -  -  -  -  
 1146 D1:B5E7 -  -  -  -  
 1147 D1:B5E7 -  -  -  -  
 1148 D1:B5E7 -  -  -  -  
 1149 D1:B5E7 -  -  -  -  
 1150 D1:B5E7 -  -  -  -  
 1151 D1:B5E7 -  -  -  -  
 1152 D1:B5E7 -  -  -  -  
 1153 D1:B5E7 -  -  -  -  
 1154 D1:B5E7 -  -  -  -  
 1155 D1:B5E7 -  -  -  -  	
 1156 D1:B5E7 -  -  -  -  	
 1157 D1:B5E7 -  -  -  -  	
 1158 D1:B5E7 -  -  -  -  	
Listing for file "ascent.asm"
  401 D1:B5E7 -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B5E7 -  -  -  -  
    2 D1:B5E7 -  -  -  -  
    3 D1:B5E7 -  -  -  -  ;hl = upper frame data 
    4 D1:B5E7 -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
    5 D1:B5E7 -  -  -  -  draw_fg_sprites:
    6 D1:B5E7 -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
    7 D1:B5E7 ED 17 -  -  	ld de,(hl)
    8 D1:B5E9 ED 53 AD B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
    9 D1:B5EE -  -  -  -  	
   10 D1:B5EE 11 00 00 00 	ld de,0
   11 D1:B5F2 23 -  -  -  	inc hl 
   12 D1:B5F3 23 -  -  -  	inc hl
   13 D1:B5F4 23 -  -  -  	inc hl;past data table 
   14 D1:B5F5 -  -  -  -  dfgs_upper_loop:
   15 D1:B5F5 7E -  -  -  	ld a,(hl);sprite y value 
   16 D1:B5F6 23 -  -  -  	inc hl 
   17 D1:B5F7 96 -  -  -  	sub (hl);subtract height
   18 D1:B5F8 D2 06 B6 D1 	jp nc,dfgs_upper_skip;if no carry,skip
   19 D1:B5FC -  -  -  -  	
   20 D1:B5FC -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   21 D1:B5FC D6 00 -  -  	sub 0 ;subtract camera height lsb 
   22 D1:B5FE DA 13 B6 D1 	jp c,dfgs_upper_cont
   23 D1:B602 CA 13 B6 D1 	jp z,dfgs_upper_cont 
   24 D1:B606 -  -  -  -  dfgs_upper_skip:
   25 D1:B606 23 -  -  -  	inc hl 
   26 D1:B607 23 -  -  -  	inc hl
   27 D1:B608 7E -  -  -  	ld a,(hl);index 
   28 D1:B609 23 -  -  -  	inc hl;to y 
   29 D1:B60A B7 -  -  -  	or a
   30 D1:B60B C2 F5 B5 D1 	jp nz,dfgs_upper_loop
   31 D1:B60F C3 40 B6 D1 	jp dfgs_mid_start
   32 D1:B613 -  -  -  -  	
   33 D1:B613 -  -  -  -  dfgs_upper_cont:
   34 D1:B613 -  -  -  -  	
   35 D1:B613 86 -  -  -  	add a,(hl);add height
   36 D1:B614 -  -  -  -  	;a now holds 0 indexed row, number of lines to skip drawing
   37 D1:B614 D9 -  -  -  	exx
   38 D1:B615 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
   39 D1:B615 11 00 00 00 	ld de,0;load top of vram 
   40 D1:B619 D9 -  -  -  	exx;out shadow
   41 D1:B61A -  -  -  -  	
   42 D1:B61A CD 93 B7 D1 	call dfgs_setup_draw;toshadow	
   43 D1:B61E -  -  -  -  	
   44 D1:B61E CB 45 -  -  	bit 0,l 
   45 D1:B620 CA 2C B6 D1 	jp z,dfgs_upper_fast
   46 D1:B624 CD 7B AC D1 	call draw_slow_sprite_top_cut
   47 D1:B628 C3 30 B6 D1 	jp dfgs_upper_skip_2
   48 D1:B62C -  -  -  -  dfgs_upper_fast:
   49 D1:B62C CD FB AB D1 	call draw_fast_sprite_top_cut
   50 D1:B630 -  -  -  -  dfgs_upper_skip_2:
   51 D1:B630 D9 -  -  -  	exx ;out of shadow, hl holds index
   52 D1:B631 -  -  -  -  	
   53 D1:B631 11 00 00 00 	ld de,0 
   54 D1:B635 01 00 00 00 	ld bc,0
   55 D1:B639 7E -  -  -  	ld a,(hl);index 
   56 D1:B63A 23 -  -  -  	inc hl;to y 
   57 D1:B63B B7 -  -  -  	or a	
   58 D1:B63C C2 F5 B5 D1 	jp nz,dfgs_upper_loop
   59 D1:B640 -  -  -  -  	
   60 D1:B640 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
   61 D1:B640 -  -  -  -  	
   62 D1:B640 ED 17 -  -  	ld de,(hl)
   63 D1:B642 ED 53 AD B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
   64 D1:B647 11 00 00 00 	ld de,0
   65 D1:B64B 23 -  -  -  	inc hl 
   66 D1:B64C 23 -  -  -  	inc hl
   67 D1:B64D 23 -  -  -  	inc hl;past data table 
   68 D1:B64E -  -  -  -  dfgs_mid_loop:
   69 D1:B64E 7E -  -  -  	ld a,(hl);y val 
   70 D1:B64F 23 -  -  -  	inc hl ;to height
   71 D1:B650 -  -  -  -  dfgs_cam_height_2 .equ $ + 1
   72 D1:B650 D6 00 -  -  	sub 0;subtract cam pos
   73 D1:B652 DA A0 B6 D1 	jp c,dfgs_mid_sprite_below ;sprite is below camera pos, either full or bottom cut 
   74 D1:B656 CA A0 B6 D1 	jp z,dfgs_mid_sprite_below 
   75 D1:B65A -  -  -  -  	;sprite start is above camera pos, top cut 
   76 D1:B65A BE -  -  -  	cp (hl);a holds numb lines below sprite y , compare to height
   77 D1:B65B DA 70 B6 D1 	jp c,dfgs_mid_above_cont
   78 D1:B65F CA 70 B6 D1 	jp z,dfgs_mid_above_cont
   79 D1:B663 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
   80 D1:B663 23 -  -  -  	inc hl 
   81 D1:B664 23 -  -  -  	inc hl
   82 D1:B665 7E -  -  -  	ld a,(hl);index 
   83 D1:B666 23 -  -  -  	inc hl;to y 
   84 D1:B667 B7 -  -  -  	or a
   85 D1:B668 C2 4E B6 D1 	jp nz,dfgs_mid_loop
   86 D1:B66C C3 09 B7 D1 	jp dfgs_lower_start
   87 D1:B670 -  -  -  -  	
   88 D1:B670 -  -  -  -  dfgs_mid_above_cont:
   89 D1:B670 -  -  -  -  	;a = lines to skip 
   90 D1:B670 D9 -  -  -  	exx
   91 D1:B671 -  -  -  -  dfgs_vram_top_2 .equ $ + 1 
   92 D1:B671 11 00 00 00 	ld de,0
   93 D1:B675 D9 -  -  -  	exx
   94 D1:B676 -  -  -  -  	
   95 D1:B676 CD 93 B7 D1 	call dfgs_setup_draw;toshadow
   96 D1:B67A -  -  -  -  	
   97 D1:B67A CB 45 -  -  	bit 0,l 
   98 D1:B67C CA 88 B6 D1 	jp z,dfgs_mid_top_fast
   99 D1:B680 CD 7B AC D1 	call draw_slow_sprite_top_cut
  100 D1:B684 C3 8C B6 D1 	jp dfgs_mid_top_slow
  101 D1:B688 -  -  -  -  dfgs_mid_top_fast:
  102 D1:B688 CD FB AB D1 	call draw_fast_sprite_top_cut
  103 D1:B68C -  -  -  -  dfgs_mid_top_slow:
  104 D1:B68C D9 -  -  -  	exx;out shadwo
  105 D1:B68D 11 00 00 00 	ld de,0 
  106 D1:B691 01 00 00 00 	ld bc,0
  107 D1:B695 7E -  -  -  	ld a,(hl);index 
  108 D1:B696 23 -  -  -  	inc hl;to y 
  109 D1:B697 B7 -  -  -  	or a
  110 D1:B698 C2 4E B6 D1 	jp nz,dfgs_mid_loop
  111 D1:B69C C3 09 B7 D1 	jp dfgs_lower_start
  112 D1:B6A0 -  -  -  -  
  113 D1:B6A0 -  -  -  -  dfgs_mid_sprite_below:;sprite start is = or below top of screen 
  114 D1:B6A0 -  -  -  -  	;can be full or bottom cut
  115 D1:B6A0 -  -  -  -  	;a holds distance of sprite below top of screen
  116 D1:B6A0 -  -  -  -  	;0 = top of screen 255 = 1 below ,254 = 2 below ... 17 = bottom of screen
  117 D1:B6A0 3D -  -  -  	dec a 
  118 D1:B6A1 D6 10 -  -  	sub 16;a holds dist from bottom
  119 D1:B6A3 DA 63 B6 D1 	jp c,dfgs_mid_skip
  120 D1:B6A7 BE -  -  -  	cp (hl);compare to height
  121 D1:B6A8 DA DC B6 D1 	jp c,dfgs_mid_bottom_cut
  122 D1:B6AC -  -  -  -  	
  123 D1:B6AC -  -  -  -  	;full sprite
  124 D1:B6AC D9 -  -  -  	exx
  125 D1:B6AD -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1
  126 D1:B6AD 11 00 00 00 	ld de,0
  127 D1:B6B1 D9 -  -  -  	exx
  128 D1:B6B2 CD 93 B7 D1 	call dfgs_setup_draw;toshadow
  129 D1:B6B6 CB 45 -  -  	bit 0,l
  130 D1:B6B8 CA C4 B6 D1 	jp z,dfgs_mid_full_fast
  131 D1:B6BC CD 4C AC D1 	call draw_slow_sprite_full
  132 D1:B6C0 C3 C8 B6 D1 	jp dfgs_mid_full_slow
  133 D1:B6C4 -  -  -  -  dfgs_mid_full_fast:
  134 D1:B6C4 CD 32 AC D1 	call draw_fast_sprite_full
  135 D1:B6C8 -  -  -  -  dfgs_mid_full_slow:
  136 D1:B6C8 D9 -  -  -  	exx
  137 D1:B6C9 11 00 00 00 	ld de,0 
  138 D1:B6CD 01 00 00 00 	ld bc,0
  139 D1:B6D1 7E -  -  -  	ld a,(hl)
  140 D1:B6D2 23 -  -  -  	inc hl 
  141 D1:B6D3 B7 -  -  -  	or a 
  142 D1:B6D4 C2 4E B6 D1 	jp nz,dfgs_mid_loop
  143 D1:B6D8 C3 09 B7 D1 	jp dfgs_lower_start
  144 D1:B6DC -  -  -  -  	
  145 D1:B6DC -  -  -  -  	
  146 D1:B6DC -  -  -  -  dfgs_mid_bottom_cut:
  147 D1:B6DC D9 -  -  -  	exx
  148 D1:B6DD -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1
  149 D1:B6DD 11 00 00 00 	ld de,0
  150 D1:B6E1 D9 -  -  -  	exx
  151 D1:B6E2 CD 93 B7 D1 	call dfgs_setup_draw
  152 D1:B6E6 3C -  -  -  	inc a;for bottom cuts
  153 D1:B6E7 CB 45 -  -  	bit 0,l 
  154 D1:B6E9 CA F5 B6 D1 	jp z,dfgs_mid_bottom_fast
  155 D1:B6ED CD B0 AC D1 	call draw_slow_sprite_bottom_cut
  156 D1:B6F1 C3 F9 B6 D1 	jp dfgs_mid_bottom_slow
  157 D1:B6F5 -  -  -  -  dfgs_mid_bottom_fast:
  158 D1:B6F5 CD E7 AB D1 	call draw_fast_sprite_bottom_cut
  159 D1:B6F9 -  -  -  -  dfgs_mid_bottom_slow:
  160 D1:B6F9 D9 -  -  -  	exx
  161 D1:B6FA 11 00 00 00 	ld de,0 
  162 D1:B6FE 01 00 00 00 	ld bc,0
  163 D1:B702 7E -  -  -  	ld a,(hl)
  164 D1:B703 23 -  -  -  	inc hl 
  165 D1:B704 B7 -  -  -  	or a 
  166 D1:B705 C2 4E B6 D1 	jp nz,dfgs_mid_loop
  167 D1:B709 -  -  -  -  	
  168 D1:B709 -  -  -  -  	
  169 D1:B709 -  -  -  -  	
  170 D1:B709 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  171 D1:B709 -  -  -  -  dfgs_lower_start:
  172 D1:B709 -  -  -  -  	
  173 D1:B709 ED 17 -  -  	ld de,(hl)
  174 D1:B70B ED 53 AD B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  175 D1:B710 11 00 00 00 	ld de,0
  176 D1:B714 23 -  -  -  	inc hl 
  177 D1:B715 23 -  -  -  	inc hl
  178 D1:B716 23 -  -  -  	inc hl;past data table 
  179 D1:B717 -  -  -  -  
  180 D1:B717 3E EF -  -  	ld a,239
  181 D1:B719 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  182 D1:B719 D6 00 -  -  	sub 0;cam pos 
  183 D1:B71B D8 -  -  -  	ret c;if bottom frame is offscreen 
  184 D1:B71C C8 -  -  -  	ret z 
  185 D1:B71D -  -  -  -  	;a holds distance of top line of lower frame from bottom of screen starting from 1
  186 D1:B71D 32 24 B7 D1 	ld (dfgs_lower_frame_height),a
  187 D1:B721 -  -  -  -  
  188 D1:B721 -  -  -  -  dfgs_lower_loop:
  189 D1:B721 7E -  -  -  	ld a,(hl);y
  190 D1:B722 23 -  -  -  	inc hl
  191 D1:B723 -  -  -  -  dfgs_lower_frame_height .equ $ + 1
  192 D1:B723 C6 00 -  -  	add a,0;add frame height 
  193 D1:B725 DA 33 B7 D1 	jp c,dfgs_lower_cont;sprite onscreen
  194 D1:B729 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  195 D1:B729 23 -  -  -  	inc hl
  196 D1:B72A 23 -  -  -  	inc hl
  197 D1:B72B 7E -  -  -  	ld a,(hl)
  198 D1:B72C 23 -  -  -  	inc hl 
  199 D1:B72D B7 -  -  -  	or a 
  200 D1:B72E C2 21 B7 D1 	jp nz,dfgs_lower_loop
  201 D1:B732 C9 -  -  -  	ret
  202 D1:B733 -  -  -  -  	
  203 D1:B733 -  -  -  -  dfgs_lower_cont:
  204 D1:B733 -  -  -  -  	;a holds sprite dist from bottom of screen, from 0
  205 D1:B733 BE -  -  -  	cp (hl);compare to height
  206 D1:B734 DA 65 B7 D1 	jp c,dfgs_lower_bottom_cut
  207 D1:B738 -  -  -  -  	
  208 D1:B738 -  -  -  -  	;full sprite 
  209 D1:B738 D9 -  -  -  	exx
  210 D1:B739 -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1
  211 D1:B739 11 00 00 00 	ld de,0
  212 D1:B73D D9 -  -  -  	exx
  213 D1:B73E CD 93 B7 D1 	call dfgs_setup_draw
  214 D1:B742 CB 45 -  -  	bit 0,l
  215 D1:B744 CA 50 B7 D1 	jp z,dfgs_lower_full_fast
  216 D1:B748 CD 4C AC D1 	call draw_slow_sprite_full
  217 D1:B74C C3 54 B7 D1 	jp dfgs_lower_full_slow
  218 D1:B750 -  -  -  -  dfgs_lower_full_fast:
  219 D1:B750 CD 32 AC D1 	call draw_fast_sprite_full
  220 D1:B754 -  -  -  -  dfgs_lower_full_slow:
  221 D1:B754 D9 -  -  -  	exx
  222 D1:B755 11 00 00 00 	ld de,0 
  223 D1:B759 01 00 00 00 	ld bc,0
  224 D1:B75D 7E -  -  -  	ld a,(hl)
  225 D1:B75E 23 -  -  -  	inc hl 
  226 D1:B75F B7 -  -  -  	or a 
  227 D1:B760 C2 21 B7 D1 	jp nz,dfgs_lower_loop
  228 D1:B764 C9 -  -  -  	ret
  229 D1:B765 -  -  -  -  	
  230 D1:B765 -  -  -  -  	
  231 D1:B765 -  -  -  -  dfgs_lower_bottom_cut:
  232 D1:B765 D9 -  -  -  	exx
  233 D1:B766 -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1
  234 D1:B766 11 00 00 00 	ld de,0
  235 D1:B76A D9 -  -  -  	exx
  236 D1:B76B CD 93 B7 D1 	call dfgs_setup_draw
  237 D1:B76F 3C -  -  -  	inc a;for bottom cuts
  238 D1:B770 CB 45 -  -  	bit 0,l 
  239 D1:B772 CA 7E B7 D1 	jp z,dfgs_lower_bottom_fast
  240 D1:B776 CD B0 AC D1 	call draw_slow_sprite_bottom_cut
  241 D1:B77A C3 82 B7 D1 	jp dfgs_lower_bottom_slow
  242 D1:B77E -  -  -  -  dfgs_lower_bottom_fast:
  243 D1:B77E CD E7 AB D1 	call draw_fast_sprite_bottom_cut
  244 D1:B782 -  -  -  -  dfgs_lower_bottom_slow:
  245 D1:B782 D9 -  -  -  	exx
  246 D1:B783 11 00 00 00 	ld de,0 
  247 D1:B787 01 00 00 00 	ld bc,0
  248 D1:B78B 7E -  -  -  	ld a,(hl)
  249 D1:B78C 23 -  -  -  	inc hl 
  250 D1:B78D B7 -  -  -  	or a 
  251 D1:B78E C2 21 B7 D1 	jp nz,dfgs_lower_loop
  252 D1:B792 -  -  -  -  	
  253 D1:B792 C9 -  -  -  	ret
  254 D1:B793 -  -  -  -  	
  255 D1:B793 -  -  -  -  	
  256 D1:B793 -  -  -  -  	
  257 D1:B793 -  -  -  -  	
  258 D1:B793 -  -  -  -  	
  259 D1:B793 -  -  -  -  	
  260 D1:B793 -  -  -  -  	
  261 D1:B793 -  -  -  -  	
  262 D1:B793 -  -  -  -  	
  263 D1:B793 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  264 D1:B793 -  -  -  -  ;(hl) = height 	
  265 D1:B793 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  266 D1:B793 -  -  -  -  ;returns hl = sprite data, de = vram position
  267 D1:B793 -  -  -  -  dfgs_setup_draw:
  268 D1:B793 23 -  -  -  	inc hl
  269 D1:B794 01 00 00 00 	ld bc,0
  270 D1:B798 4E -  -  -  	ld c,(hl); x pos
  271 D1:B799 23 -  -  -  	inc hl;to index
  272 D1:B79A E5 -  -  -  	push hl
  273 D1:B79B C5 -  -  -  	push bc
  274 D1:B79C D9 -  -  -  	exx;toshadow
  275 D1:B79D C1 -  -  -  	pop bc
  276 D1:B79E 26 A0 -  -  	ld h,160
  277 D1:B7A0 6F -  -  -  	ld l,a
  278 D1:B7A1 ED 6C -  -  	mlt hl;subtract from vram
  279 D1:B7A3 37 -  -  -  	scf 
  280 D1:B7A4 3F -  -  -  	ccf
  281 D1:B7A5 EB -  -  -  	ex de,hl;hl holds vram
  282 D1:B7A6 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  283 D1:B7A8 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  284 D1:B7A9 EB -  -  -  	ex de,hl;put in de
  285 D1:B7AA E1 -  -  -  	pop hl;back to frame data 
  286 D1:B7AB 4E -  -  -  	ld c,(hl);sprite index
  287 D1:B7AC -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  288 D1:B7AC 21 00 00 00 	ld hl,0 ;load sprite table 
  289 D1:B7B0 09 -  -  -  	add hl,bc
  290 D1:B7B1 09 -  -  -  	add hl,bc 
  291 D1:B7B2 09 -  -  -  	add hl,bc;move to sprite ptr
  292 D1:B7B3 -  -  -  -  	;call prgmpause
  293 D1:B7B3 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  294 D1:B7B5 -  -  -  -  
  295 D1:B7B5 C9 -  -  -  	ret
  296 D1:B7B6 -  -  -  -  
  297 D1:B7B6 -  -  -  -  	
  298 D1:B7B6 -  -  -  -  	
  299 D1:B7B6 -  -  -  -  	
  300 D1:B7B6 -  -  -  -  	
  301 D1:B7B6 -  -  -  -  	
  302 D1:B7B6 -  -  -  -  	
  303 D1:B7B6 -  -  -  -  	
  304 D1:B7B6 -  -  -  -  	
  305 D1:B7B6 -  -  -  -  	
  306 D1:B7B6 -  -  -  -  	
  307 D1:B7B6 -  -  -  -  	
  308 D1:B7B6 -  -  -  -  	
Listing for file "ascent.asm"
  402 D1:B7B6 -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B7B6 -  -  -  -  
    2 D1:B7B6 -  -  -  -  FG_sprite_table_1:
    3 D1:B7B6 01 00 D4 -  	.dl fg_sprite_1;9*4
    4 D1:B7B9 01 00 D4 -  	.dl fg_sprite_1
    5 D1:B7BC A1 00 D4 -  	.dl fg_sprite_2;8*8
    6 D1:B7BF 40 01 D4 -  	.dl fg_sprite_3;8*8 fast
    7 D1:B7C2 E0 01 D4 -  	.dl fg_sprite_4;8*8 fast 
    8 D1:B7C5 -  -  -  -  	
    9 D1:B7C5 -  -  -  -  
   10 D1:B7C5 -  -  -  -  
   11 D1:B7C5 -  -  -  -  
   12 D1:B7C5 -  -  -  -  
   13 D1:B7C5 -  -  -  -  FG_Frame_2:
   14 D1:B7C5 B6 B7 D1 -  	.dl FG_sprite_table_1
   15 D1:B7C8 03 03 00 01 	.db 3,3,0,1
   16 D1:B7CC 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B7D0 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B7D4 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B7D8 32 07 14 02 	.db 50,7,20,2
   20 D1:B7DC 1E 07 19 03 	.db 30,7,25,3
   21 D1:B7E0 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B7E4 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B7E8 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B7EC 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B7F0 -  -  -  -  
   26 D1:B7F0 -  -  -  -  
   27 D1:B7F0 -  -  -  -  FG_Frame_1:
   28 D1:B7F0 -  -  -  -  	;.dl sprite table ptr
   29 D1:B7F0 -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B7F0 B6 B7 D1 -  	.dl FG_sprite_table_1
   31 D1:B7F3 FF 03 3C 01 	.db 255,3,60,1
   32 D1:B7F7 FF 07 46 02 	.db 255,7,70,2
   33 D1:B7FB FF 07 4B 03 	.db 255,7,75,3
   34 D1:B7FF FF 07 50 04 	.db 255,7,80,4
   35 D1:B803 FE 03 55 01 	.db 254,3,85,1
   36 D1:B807 FE 07 5A 04 	.db 254,7,90,4
   37 D1:B80B C8 03 0A 01 	.db 200,3,10,1
   38 D1:B80F C8 07 0F 02 	.db 200,7,15,2
   39 D1:B813 C8 07 14 03 	.db 200,7,20,3
   40 D1:B817 32 07 0A 02 	.db 50,7,10,2
   41 D1:B81B 0F 07 50 03 	.db 15,7,80,3
   42 D1:B81F 10 07 41 03 	.db 16,7,65,3
   43 D1:B823 11 03 46 01 	.db 17,3,70,1
   44 D1:B827 09 07 0A 02 	.db 9,7,10,2
   45 D1:B82B 08 07 14 02 	.db 8,7,20,2
   46 D1:B82F 08 07 1E 03 	.db 8,7,30,3
   47 D1:B833 07 07 23 02 	.db 7,7,35,2
   48 D1:B837 06 07 28 02 	.db 6,7,40,2
   49 D1:B83B 05 07 2D 02 	.db 5,7,45,2
   50 D1:B83F 00 07 32 02 	.db 0,7,50,2
   51 D1:B843 04 07 37 03 	.db 4,7,55,3
   52 D1:B847 02 07 3C 04 	.db 2,7,60,4
   53 D1:B84B 01 03 41 00 	.db 1,3,65,0
   54 D1:B84F -  -  -  -  	
   55 D1:B84F -  -  -  -  
   56 D1:B84F -  -  -  -  FG_Frame_0:
   57 D1:B84F B6 B7 D1 -  	.dl FG_sprite_table_1
   58 D1:B852 FF 03 46 01 	.db 255,3,70,1
   59 D1:B856 FF 07 4B 02 	.db 255,7,75,2
   60 D1:B85A FF 07 5F 03 	.db 255,7,95,3
   61 D1:B85E FF 07 50 04 	.db 255,7,80,4
   62 D1:B862 FE 03 78 01 	.db 254,3,120,1
   63 D1:B866 FE 07 7D 04 	.db 254,7,125,4
   64 D1:B86A C8 03 0A 01 	.db 200,3,10,1
   65 D1:B86E C8 07 0F 02 	.db 200,7,15,2
   66 D1:B872 C8 07 14 03 	.db 200,7,20,3
   67 D1:B876 C8 03 00 00 	.db 200,3,0,0
   68 D1:B87A -  -  -  -  	
   69 D1:B87A -  -  -  -  	
   70 D1:B87A -  -  -  -  	
   71 D1:B87A -  -  -  -  
   72 D1:B87A -  -  -  -  	
   73 D1:B87A -  -  -  -  	
   74 D1:B87A -  -  -  -  	
   75 D1:B87A -  -  -  -  	
   76 D1:B87A -  -  -  -  	
   77 D1:B87A -  -  -  -  	
   78 D1:B87A -  -  -  -  	
Listing for file "ascent.asm"
  403 D1:B87A -  -  -  -  
  404 D1:B87A -  -  -  -  
