    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E -  -  -  -  	;jp time_test_start
   20 D1:A88E -  -  -  -  	
   21 D1:A88E 21 00 02 E3 	ld	hl,mpLcdPalette
   22 D1:A892 -  -  -  -  
   23 D1:A892 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   24 D1:A894 77 -  -  -  	ld	(hl),a
   25 D1:A895 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   26 D1:A897 23 -  -  -  	inc hl
   27 D1:A898 77 -  -  -  	ld	(hl),a
   28 D1:A899 23 -  -  -  	inc hl;1yellow
   29 D1:A89A 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   30 D1:A89C 77 -  -  -  	ld	(hl),a
   31 D1:A89D 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   32 D1:A89F 23 -  -  -  	inc hl
   33 D1:A8A0 77 -  -  -  	ld	(hl),a
   34 D1:A8A1 -  -  -  -  	
   35 D1:A8A1 23 -  -  -  	inc hl;2blue
   36 D1:A8A2 3E 1F -  -  	ld	a,%00011111 ;GGGBBBBB
   37 D1:A8A4 77 -  -  -  	ld	(hl),a
   38 D1:A8A5 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   39 D1:A8A7 23 -  -  -  	inc hl
   40 D1:A8A8 77 -  -  -  	ld	(hl),a
   41 D1:A8A9 -  -  -  -  	
   42 D1:A8A9 23 -  -  -  	inc hl;3r
   43 D1:A8AA 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   44 D1:A8AC 77 -  -  -  	ld	(hl),a
   45 D1:A8AD 3E 7C -  -  	ld  a,%01111100 ; GRRRRRGG
   46 D1:A8AF 23 -  -  -  	inc hl
   47 D1:A8B0 77 -  -  -  	ld	(hl),a
   48 D1:A8B1 -  -  -  -  	
   49 D1:A8B1 23 -  -  -  	inc hl;4g
   50 D1:A8B2 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   51 D1:A8B4 77 -  -  -  	ld	(hl),a
   52 D1:A8B5 3E 83 -  -  	ld  a,%10000011 ; GRRRRRGG
   53 D1:A8B7 23 -  -  -  	inc hl
   54 D1:A8B8 77 -  -  -  	ld	(hl),a
   55 D1:A8B9 -  -  -  -  	
   56 D1:A8B9 23 -  -  -  	inc hl;5 white
   57 D1:A8BA 3E FF -  -  	ld	a,%11111111 ;GGGBBBBB
   58 D1:A8BC 77 -  -  -  	ld	(hl),a
   59 D1:A8BD 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   60 D1:A8BF 23 -  -  -  	inc hl
   61 D1:A8C0 77 -  -  -  	ld	(hl),a
   62 D1:A8C1 -  -  -  -  
   63 D1:A8C1 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
   64 D1:A8C5 3E 25 -  -  	ld	a,lcdBpp4
   65 D1:A8C7 32 18 00 E3 	ld (mpLcdCtrl),a	
   66 D1:A8CB -  -  -  -  	
   67 D1:A8CB -  -  -  -  	
   68 D1:A8CB -  -  -  -  	;call fast_fg_sprite_set_flip
   69 D1:A8CB -  -  -  -  	;jp time_test_start
   70 D1:A8CB -  -  -  -  	
   71 D1:A8CB CD A0 B4 D1 	call sdcomp_reset_fast_sprite
   72 D1:A8CF CD F8 B2 D1 	call sdcomp_reset_flip
   73 D1:A8D3 CD 23 B3 D1 	call sdcomp_set_offset
   74 D1:A8D7 21 56 AD D1 	ld hl,testSpriteCompressed4
   75 D1:A8DB 11 00 00 D4 	ld de,vRam
   76 D1:A8DF CD 85 AF D1 	call slow_sprite_decompress
   77 D1:A8E3 -  -  -  -  	
   78 D1:A8E3 -  -  -  -  	
   79 D1:A8E3 CD B5 B2 D1 	call sdcomp_set_flip
   80 D1:A8E7 CD 23 B3 D1 	call sdcomp_set_offset
   81 D1:A8EB 21 0F AD D1 	ld hl,testSpriteCompressed
   82 D1:A8EF 11 A0 00 D4 	ld de,vRam+160
   83 D1:A8F3 CD 85 AF D1 	call slow_sprite_decompress
   84 D1:A8F7 -  -  -  -  	
   85 D1:A8F7 -  -  -  -  	
   86 D1:A8F7 -  -  -  -  	
   87 D1:A8F7 11 00 19 D4 	ld de,vRam +(160*40)
   88 D1:A8FB 21 00 00 D4 	ld hl,vRam
   89 D1:A8FF 3E 02 -  -  	ld a,2
   90 D1:A901 CD 43 AC D1 	call draw_slow_sprite_bottom_cut
   91 D1:A905 -  -  -  -  	
   92 D1:A905 -  -  -  -  	
   93 D1:A905 11 C0 12 D4 	ld de,vRam +(160*30)
   94 D1:A909 21 00 00 D4 	ld hl,vRam
   95 D1:A90D CD DF AB D1 	call draw_slow_sprite_full
   96 D1:A911 -  -  -  -  	
   97 D1:A911 -  -  -  -  	
   98 D1:A911 11 05 19 D4 	ld de,vRam +(160*40)+5
   99 D1:A915 21 A0 00 D4 	ld hl,vRam+160
  100 D1:A919 3E 03 -  -  	ld a,3
  101 D1:A91B CD 0E AC D1 	call draw_slow_sprite_top_cut
  102 D1:A91F -  -  -  -  	
  103 D1:A91F 11 C5 12 D4 	ld de,vRam +(160*30)+5
  104 D1:A923 21 A0 00 D4 	ld hl,vRam+160
  105 D1:A927 CD DF AB D1 	call draw_slow_sprite_full
  106 D1:A92B -  -  -  -  	
  107 D1:A92B -  -  -  -  	
  108 D1:A92B -  -  -  -  	
  109 D1:A92B -  -  -  -  	
  110 D1:A92B -  -  -  -  	
  111 D1:A92B -  -  -  -  ;	ld hl,vRam + (160*5)
  112 D1:A92B -  -  -  -  ;	ld (draw_bg_vram_addr),hl
  113 D1:A92B -  -  -  -  ;	ld hl,$000080
  114 D1:A92B -  -  -  -  ;	call draw_bg_line
  115 D1:A92B -  -  -  -  	
  116 D1:A92B -  -  -  -  	
  117 D1:A92B -  -  -  -  	
  118 D1:A92B -  -  -  -  	
  119 D1:A92B -  -  -  -  	;ld de,vram +(160*10)
  120 D1:A92B -  -  -  -  	;ld hl,testFastSprite+3
  121 D1:A92B -  -  -  -  	;exx
  122 D1:A92B -  -  -  -  	;ld b,8
  123 D1:A92B -  -  -  -  	;ld hl,8
  124 D1:A92B -  -  -  -  	;ld de,testFastSprite_t - 1
  125 D1:A92B -  -  -  -  	;ld c,%10000000
  126 D1:A92B -  -  -  -  	;call draw_fast_fg_sprite
  127 D1:A92B -  -  -  -  	
  128 D1:A92B -  -  -  -  	
  129 D1:A92B -  -  -  -  ;	ld de,vram +(160*20) - 1
  130 D1:A92B -  -  -  -  ;	ld hl,test_fast_sprite
  131 D1:A92B -  -  -  -  ;	ld a,1
  132 D1:A92B -  -  -  -  ;	call draw_fast_sprite_top_cut
  133 D1:A92B -  -  -  -  	
  134 D1:A92B -  -  -  -  	
  135 D1:A92B CD F8 B2 D1 	call sdcomp_reset_flip
  136 D1:A92F CD 91 B4 D1 	call sdcomp_set_fast_sprite
  137 D1:A933 21 76 AD D1 	ld hl,testSpriteCompressedFast
  138 D1:A937 11 E0 01 D4 	ld de,vRam + (160*3)
  139 D1:A93B CD 85 AF D1 	call slow_sprite_decompress
  140 D1:A93F -  -  -  -  		
  141 D1:A93F 11 BF 2B D4 	ld de,vRam +(160*70) - 1
  142 D1:A943 21 E0 01 D4 	ld hl,vRam + (160*3)
  143 D1:A947 3E 03 -  -  	ld a,3
  144 D1:A949 CD 7D AB D1 	call draw_fast_sprite_bottom_cut
  145 D1:A94D -  -  -  -  	
  146 D1:A94D -  -  -  -  	
  147 D1:A94D -  -  -  -  	
  148 D1:A94D CD B5 B2 D1 	call sdcomp_set_flip
  149 D1:A951 -  -  -  -  ;	call sdcomp_set_fast_sprite
  150 D1:A951 21 76 AD D1 	ld hl,testSpriteCompressedFast
  151 D1:A955 11 80 02 D4 	ld de,vRam + (160*4)
  152 D1:A959 CD 85 AF D1 	call slow_sprite_decompress
  153 D1:A95D -  -  -  -  	
  154 D1:A95D -  -  -  -  		
  155 D1:A95D 11 C5 2B D4 	ld de,vRam +(160*70) + 5
  156 D1:A961 21 80 02 D4 	ld hl,vRam + (160*4)
  157 D1:A965 3E 02 -  -  	ld a,2
  158 D1:A967 CD 90 AB D1 	call draw_fast_sprite_top_cut
  159 D1:A96B -  -  -  -  	
  160 D1:A96B -  -  -  -  	
  161 D1:A96B 11 65 31 D4 	ld de,vRam +(160*79) + 5
  162 D1:A96F 21 80 02 D4 	ld hl,vRam + (160*4)
  163 D1:A973 3E 02 -  -  	ld a,2
  164 D1:A975 CD C6 AB D1 	call draw_fast_sprite_full
  165 D1:A979 -  -  -  -  	
  166 D1:A979 -  -  -  -  	;call prgmpause
  167 D1:A979 -  -  -  -  	
  168 D1:A979 -  -  -  -  	
  169 D1:A979 -  -  -  -  	
  170 D1:A979 -  -  -  -  ;	ld de,vram +(160*40)
  171 D1:A979 -  -  -  -  ;	ld hl,testSlowSprite
  172 D1:A979 -  -  -  -  ;	call draw_slow_fg_sprite_full
  173 D1:A979 -  -  -  -  	
  174 D1:A979 -  -  -  -  ;	ld de,vram +(160*30)
  175 D1:A979 -  -  -  -  ;	ld hl,testSlowSprite
  176 D1:A979 -  -  -  -  ;	ld a,2
  177 D1:A979 -  -  -  -  ;	call draw_slow_sprite_bottom_cut
  178 D1:A979 -  -  -  -  	
  179 D1:A979 -  -  -  -  ;	ld de,vram +(160*30) + 6
  180 D1:A979 -  -  -  -  ;	ld hl,testSlowSprite
  181 D1:A979 -  -  -  -  ;	ld a,2
  182 D1:A979 -  -  -  -  ;	call draw_slow_sprite_top_cut
  183 D1:A979 -  -  -  -  	
  184 D1:A979 FB -  -  -  	ei
  185 D1:A97A CD 8C 0D 02 	call _GetKey
  186 D1:A97E F3 -  -  -  	di
  187 D1:A97F -  -  -  -  
  188 D1:A97F -  -  -  -  exit_prgm:
  189 D1:A97F CD 10 08 02 	call _ClrScrnFull
  190 D1:A983 3E 2D -  -  	ld	a,lcdBpp16
  191 D1:A985 32 18 00 E3 	ld	(mpLcdCtrl),a
  192 D1:A989 CD 3C 1A 02 	call _DrawStatusBar
  193 D1:A98D -  -  -  -  	
  194 D1:A98D FB -  -  -  	ei				; reset screen back to normal
  195 D1:A98E C9 -  -  -  	ret			; return to os
  196 D1:A98F -  -  -  -  
  197 D1:A98F -  -  -  -  
  198 D1:A98F -  -  -  -  printHL:;=================REMOVE
  199 D1:A98F E5 -  -  -  	push hl
  200 D1:A990 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  201 D1:A994 3E 2D -  -  	ld	a,lcdBpp16
  202 D1:A996 32 18 00 E3 	ld (mpLcdCtrl),a
  203 D1:A99A E1 -  -  -  	pop hl
  204 D1:A99B CD E0 1E 02 	call _DispHL
  205 D1:A99F FB -  -  -  	ei
  206 D1:A9A0 CD 8C 0D 02 	call _GetKey
  207 D1:A9A4 F3 -  -  -  	di
  208 D1:A9A5 C3 7F A9 D1 	jp exit_prgm
  209 D1:A9A9 -  -  -  -  
  210 D1:A9A9 -  -  -  -  
  211 D1:A9A9 -  -  -  -  prgmpause:
  212 D1:A9A9 FB -  -  -  	ei
  213 D1:A9AA D5 -  -  -  	push de 
  214 D1:A9AB E5 -  -  -  	push hl 
  215 D1:A9AC CD 8C 0D 02 	call _GetKey
  216 D1:A9B0 E1 -  -  -  	pop hl 
  217 D1:A9B1 D1 -  -  -  	pop de 
  218 D1:A9B2 F3 -  -  -  	di
  219 D1:A9B3 C9 -  -  -  	ret
  220 D1:A9B4 -  -  -  -  
  221 D1:A9B4 -  -  -  -  test_addr:
  222 D1:A9B4 00 00 00 -  	.dl 0
  223 D1:A9B7 -  -  -  -  
  224 D1:A9B7 -  -  -  -  draw_buffer:
  225 D1:A9B7 00 00 00 -  	.dl 0
  226 D1:A9BA -  -  -  -  
  227 D1:A9BA -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:A9BA -  -  -  -  
    2 D1:A9BA -  -  -  -  
    3 D1:A9BA -  -  -  -  
    4 D1:A9BA -  -  -  -  time_test_start:
    5 D1:A9BA -  -  -  -  
    6 D1:A9BA -  -  -  -  		; 76543210	
    7 D1:A9BA 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:A9BC 32 30 00 F2 	ld ($F20030),a
    9 D1:A9C0 -  -  -  -  	;	  fedcba98
   10 D1:A9C0 3E 02 -  -  	ld a,%00000010;count up
   11 D1:A9C2 32 31 00 F2 	ld ($F20031),a
   12 D1:A9C6 3E 00 -  -  	ld a,0
   13 D1:A9C8 32 00 00 F2 	ld ($F20000),a
   14 D1:A9CC 32 01 00 F2 	ld ($F20001),a
   15 D1:A9D0 32 02 00 F2 	ld ($F20002),a
   16 D1:A9D4 32 03 00 F2 	ld ($F20003),a
   17 D1:A9D8 -  -  -  -  	
   18 D1:A9D8 21 2C 01 00 	ld hl,300
   19 D1:A9DC -  -  -  -  	
   20 D1:A9DC -  -  -  -  time_testing_loop:
   21 D1:A9DC E5 -  -  -  	push hl
   22 D1:A9DD 01 E8 03 00 	ld bc,1000
   23 D1:A9E1 -  -  -  -  time_testing_loop_2:
   24 D1:A9E1 C5 -  -  -  	push bc
   25 D1:A9E2 -  -  -  -  	;instruction here
   26 D1:A9E2 11 C0 12 D4 	ld de,vram +(160*30)
   27 D1:A9E6 21 7C AC D1 	ld hl,testSlowSprite
   28 D1:A9EA 3E 01 -  -  	ld a,1
   29 D1:A9EC CD 0E AC D1 	call draw_slow_sprite_top_cut
   30 D1:A9F0 -  -  -  -  	;Instruction end
   31 D1:A9F0 C1 -  -  -  	pop bc
   32 D1:A9F1 0B -  -  -  	dec bc
   33 D1:A9F2 79 -  -  -  	ld a,c
   34 D1:A9F3 B0 -  -  -  	or b
   35 D1:A9F4 C2 E1 A9 D1 	jp nz,time_testing_loop_2
   36 D1:A9F8 E1 -  -  -  	pop hl
   37 D1:A9F9 2B -  -  -  	dec hl
   38 D1:A9FA 7D -  -  -  	ld a,l
   39 D1:A9FB B4 -  -  -  	or h
   40 D1:A9FC C2 DC A9 D1 	jp nz,time_testing_loop
   41 D1:AA00 -  -  -  -  	
   42 D1:AA00 3A 01 00 F2 	ld a,($F20001);128hz
   43 D1:AA04 6F -  -  -  	ld l,a
   44 D1:AA05 3A 02 00 F2 	ld a,($F20002);0.5hz
   45 D1:AA09 67 -  -  -  	ld h,a
   46 D1:AA0A C3 8F A9 D1 	jp printHL;div by 128 for time
   47 D1:AA0E -  -  -  -  	
   48 D1:AA0E -  -  -  -  
   49 D1:AA0E -  -  -  -  ;60fps = .0166sec/f	
   50 D1:AA0E -  -  -  -  
   51 D1:AA0E -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   52 D1:AA0E -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   53 D1:AA0E -  -  -  -  
   54 D1:AA0E -  -  -  -  
   55 D1:AA0E -  -  -  -  ;10,000 draw 1 bg line very complex 
   56 D1:AA0E -  -  -  -  ;9 sec  .07 of frame/instruction
   57 D1:AA0E -  -  -  -  
   58 D1:AA0E -  -  -  -  ;300k draw slow sprite 12*5 px complex
   59 D1:AA0E -  -  -  -  ;16.4RT, 14.8CLK
   60 D1:AA0E -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   61 D1:AA0E -  -  -  -  ;.24 screens/frame
   62 D1:AA0E -  -  -  -  
   63 D1:AA0E -  -  -  -  
   64 D1:AA0E -  -  -  -  ;300k slow sprite best case 12*5px
   65 D1:AA0E -  -  -  -  ;8.75RT 7.6clk
   66 D1:AA0E -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   67 D1:AA0E -  -  -  -  ;.446 screens/frame
   68 D1:AA0E -  -  -  -  
   69 D1:AA0E -  -  -  -  
   70 D1:AA0E -  -  -  -  
   71 D1:AA0E -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   72 D1:AA0E -  -  -  -  ;22.15RT,20.35clk
   73 D1:AA0E -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   74 D1:AA0E -  -  -  -  ;.78 screens/frame
   75 D1:AA0E -  -  -  -  
   76 D1:AA0E -  -  -  -  
   77 D1:AA0E -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   78 D1:AA0E -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   79 D1:AA0E -  -  -  -  ;.47 = FAST
   80 D1:AA0E -  -  -  -  
   81 D1:AA0E -  -  -  -  ;50% fast sprites, 50% slow sprites
   82 D1:AA0E -  -  -  -  
   83 D1:AA0E -  -  -  -  
   84 D1:AA0E -  -  -  -  
   85 D1:AA0E -  -  -  -  
   86 D1:AA0E -  -  -  -  
   87 D1:AA0E -  -  -  -  
   88 D1:AA0E -  -  -  -  
   89 D1:AA0E -  -  -  -  
   90 D1:AA0E -  -  -  -  
Listing for file "ascent.asm"
  228 D1:AA0E -  -  -  -  #include "drawSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawSprite.txt"
    1 D1:AA0E -  -  -  -  
    2 D1:AA0E -  -  -  -  
    3 D1:AA0E -  -  -  -  ; hl = line number
    4 D1:AA0E -  -  -  -  draw_bg_line:
    5 D1:AA0E 01 00 00 00 	ld bc,0
    6 D1:AA12 DD 21 FA AD 
              D1 -  -  -  	ld ix, bg_data
    7 D1:AA17 -  -  -  -  draw_bg_line_loop:
    8 D1:AA17 DD 46 00 -  	ld b,(ix)
    9 D1:AA1A DD 4E 01 -  	ld c,(ix+1);bc holds y position of sprite
   10 D1:AA1D 37 -  -  -  	scf
   11 D1:AA1E E5 -  -  -  	push hl
   12 D1:AA1F ED 42 -  -  	sbc hl,bc;sub y position+1 from line number, hl holds difference
   13 D1:AA21 D2 B2 AA D1 	jp nc, draw_bg_line_skip;if not negative, skip
   14 D1:AA25 -  -  -  -  	
   15 D1:AA25 -  -  -  -  	;hl holds difference between line num and sprite y
   16 D1:AA25 7C -  -  -  	ld a,h
   17 D1:AA26 EE FF -  -  	xor %11111111
   18 D1:AA28 C2 B2 AA D1 	jp nz,draw_bg_line_skip;if hl is less than -256, too far below sprite
   19 D1:AA2C 7D -  -  -  	ld a,l
   20 D1:AA2D B7 -  -  -  	or a
   21 D1:AA2E CA B2 AA D1 	jp z,draw_bg_line_skip;if hl = -256 skip
   22 D1:AA32 -  -  -  -  	
   23 D1:AA32 DD 7E 04 -  	ld a,(ix+4);a is sprite height
   24 D1:AA35 85 -  -  -  	add a,l
   25 D1:AA36 D2 B2 AA D1 	jp nc,draw_bg_line_skip
   26 D1:AA3A 7D -  -  -  	ld a,l
   27 D1:AA3B ED 44 -  -  	neg ;a is row in sprite starting from 1
   28 D1:AA3D -  -  -  -  	
   29 D1:AA3D DD 66 06 -  	ld h,(ix+6);h is sprite index
   30 D1:AA40 2E 03 -  -  	ld l,3
   31 D1:AA42 ED 6C -  -  	mlt hl
   32 D1:AA44 01 F4 AD D1 	ld bc, bg_sprite_indices
   33 D1:AA48 09 -  -  -  	add hl,bc;hl is pointer to sprite data
   34 D1:AA49 ED 27 -  -  	ld hl,(hl);hl is sprite data
   35 D1:AA4B -  -  -  -  	
   36 D1:AA4B 46 -  -  -  	ld b,(hl); b is width
   37 D1:AA4C 23 -  -  -  	inc hl
   38 D1:AA4D 4F -  -  -  	ld c,a; c is row of sprite
   39 D1:AA4E -  -  -  -  	;load colors
   40 D1:AA4E 7E -  -  -  	ld a,(hl)
   41 D1:AA4F 32 C2 AA D1 	ld (current_color_0),a
   42 D1:AA53 23 -  -  -  	inc hl
   43 D1:AA54 7E -  -  -  	ld a,(hl)
   44 D1:AA55 32 C3 AA D1 	ld (current_color_1),a
   45 D1:AA59 23 -  -  -  	inc hl
   46 D1:AA5A 7E -  -  -  	ld a,(hl)
   47 D1:AA5B 32 C4 AA D1 	ld (current_color_2),a
   48 D1:AA5F 23 -  -  -  	inc hl
   49 D1:AA60 7E -  -  -  	ld a,(hl)
   50 D1:AA61 32 C5 AA D1 	ld (current_color_3),a
   51 D1:AA65 -  -  -  -  	
   52 D1:AA65 23 -  -  -  	inc hl; hl is line length
   53 D1:AA66 -  -  -  -  	
   54 D1:AA66 11 00 00 00 	ld de,0
   55 D1:AA6A -  -  -  -  get_sprite_data_row_loop:
   56 D1:AA6A 0D -  -  -  	dec c
   57 D1:AA6B CA 75 AA D1 	jp z, get_sprite_data_row_loop_exit
   58 D1:AA6F 5E -  -  -  	ld e,(hl)
   59 D1:AA70 19 -  -  -  	add hl,de
   60 D1:AA71 C3 6A AA D1 	jp get_sprite_data_row_loop
   61 D1:AA75 -  -  -  -  get_sprite_data_row_loop_exit:
   62 D1:AA75 -  -  -  -  	;hl points to sprite data row
   63 D1:AA75 E5 -  -  -  	push hl
   64 D1:AA76 D9 -  -  -  	exx
   65 D1:AA77 D1 -  -  -  	pop de;transparency data ptr -1
   66 D1:AA78 D9 -  -  -  	exx
   67 D1:AA79 78 -  -  -  	ld a,b;load sprite width
   68 D1:AA7A 3D -  -  -  	dec a
   69 D1:AA7B CB 3F -  -  	srl a
   70 D1:AA7D CB 3F -  -  	srl a
   71 D1:AA7F CB 3F -  -  	srl a
   72 D1:AA81 3C -  -  -  	inc a
   73 D1:AA82 5F -  -  -  	ld e,a;number of bytes of alpha data
   74 D1:AA83 19 -  -  -  	add hl,de;hl points to color data-1
   75 D1:AA84 E5 -  -  -  	push hl
   76 D1:AA85 -  -  -  -  	
   77 D1:AA85 -  -  -  -  draw_bg_vram_addr .equ $+1
   78 D1:AA85 21 00 00 00 	ld hl,$000000;load h w vram add
   79 D1:AA89 DD 5E 02 -  	ld e,(ix+2);x position/2 -1
   80 D1:AA8C 19 -  -  -  	add hl,de; hl is vram byte
   81 D1:AA8D 3E 0F -  -  	ld a,%00001111
   82 D1:AA8F DD CB 03 7E 	bit 7,(ix+3)
   83 D1:AA93 CA 99 AA D1 	jp z,draw_bg_line_evenpixel
   84 D1:AA97 EE FF -  -  	xor %11111111
   85 D1:AA99 -  -  -  -  draw_bg_line_evenpixel:
   86 D1:AA99 32 4B AB D1 	ld (dbgs_color_nibble),a;load color nibble
   87 D1:AA9D D1 -  -  -  	pop de ; de is color data
   88 D1:AA9E DD CB 03 76 	bit 6 , (ix+3)
   89 D1:AAA2 C2 AE AA D1 	jp nz ,draw_bg_line_flip
   90 D1:AAA6 CD DE AA D1 	call dbgs_reset_flip
   91 D1:AAAA C3 B2 AA D1 	jp draw_bg_line_skip
   92 D1:AAAE -  -  -  -  draw_bg_line_flip:
   93 D1:AAAE CD C6 AA D1 	call dbgs_set_flip
   94 D1:AAB2 -  -  -  -  draw_bg_line_skip:
   95 D1:AAB2 E1 -  -  -  	pop hl;return original line number
   96 D1:AAB3 -  -  -  -  	
   97 D1:AAB3 DD CB 03 46 	bit 0 ,(ix+3)
   98 D1:AAB7 C8 -  -  -  	ret z
   99 D1:AAB8 01 06 00 00 	ld bc,6
  100 D1:AABC DD 09 -  -  	add ix,bc
  101 D1:AABE C3 17 AA D1 	jp draw_bg_line_loop
  102 D1:AAC2 -  -  -  -  	
  103 D1:AAC2 -  -  -  -  
  104 D1:AAC2 -  -  -  -  current_color_0:
  105 D1:AAC2 33 -  -  -  .db %00110011
  106 D1:AAC3 -  -  -  -  current_color_1:
  107 D1:AAC3 44 -  -  -  .db %01000100
  108 D1:AAC4 -  -  -  -  current_color_2:
  109 D1:AAC4 22 -  -  -  .db %00100010
  110 D1:AAC5 -  -  -  -  current_color_3:
  111 D1:AAC5 55 -  -  -  .db %01010101
  112 D1:AAC6 -  -  -  -  
  113 D1:AAC6 -  -  -  -  
  114 D1:AAC6 -  -  -  -  
  115 D1:AAC6 -  -  -  -  
  116 D1:AAC6 -  -  -  -  
  117 D1:AAC6 -  -  -  -  
  118 D1:AAC6 -  -  -  -  
  119 D1:AAC6 -  -  -  -  dbgs_set_flip:
  120 D1:AAC6 3E CA -  -  	ld a, %11001010
  121 D1:AAC8 32 59 AB D1 	ld (dbgs_flip_1),a
  122 D1:AACC 32 71 AB D1 	ld (dbgs_flip_3),a
  123 D1:AAD0 -  -  -  -  	
  124 D1:AAD0 3E 2B -  -  	ld a, %00101011
  125 D1:AAD2 32 5D AB D1 	ld (dbgs_flip_2),a
  126 D1:AAD6 32 75 AB D1 	ld (dbgs_flip_4),a
  127 D1:AADA -  -  -  -  	
  128 D1:AADA C3 F2 AA D1 	jp draw_bg_sprite_line
  129 D1:AADE -  -  -  -  	
  130 D1:AADE -  -  -  -  dbgs_reset_flip:
  131 D1:AADE 3E C2 -  -  	ld a, %11000010
  132 D1:AAE0 32 59 AB D1 	ld (dbgs_flip_1),a
  133 D1:AAE4 32 71 AB D1 	ld (dbgs_flip_3),a
  134 D1:AAE8 -  -  -  -  	
  135 D1:AAE8 3E 23 -  -  	ld a, %00100011
  136 D1:AAEA 32 5D AB D1 	ld (dbgs_flip_2),a
  137 D1:AAEE 32 75 AB D1 	ld (dbgs_flip_4),a
  138 D1:AAF2 -  -  -  -  ;hl = vram position-1  de = colordata-1, de' = alpha-1 b= width
  139 D1:AAF2 -  -  -  -  draw_bg_sprite_line:
  140 D1:AAF2 E5 -  -  -  	push hl
  141 D1:AAF3 0E 03 -  -  	ld c,%00000011
  142 D1:AAF5 D9 -  -  -  	exx
  143 D1:AAF6 E1 -  -  -  	pop hl
  144 D1:AAF7 0E 01 -  -  	ld c,%00000001
  145 D1:AAF9 D9 -  -  -  	exx
  146 D1:AAFA -  -  -  -  draw_bg_sprite_line_loop:
  147 D1:AAFA D9 -  -  -  	exx;toShadow
  148 D1:AAFB CB 09 -  -  	rrc c
  149 D1:AAFD D2 02 AB D1 	jp nc, dbgs_alpha_inc_skip
  150 D1:AB01 13 -  -  -  	inc de
  151 D1:AB02 -  -  -  -  dbgs_alpha_inc_skip:
  152 D1:AB02 1A -  -  -  	ld a,(de)
  153 D1:AB03 A1 -  -  -  	and c
  154 D1:AB04 CA 65 AB D1 	jp z, dbgs_alphaskip
  155 D1:AB08 D9 -  -  -  	exx
  156 D1:AB09 CB 09 -  -  	rrc c
  157 D1:AB0B CB 09 -  -  	rrc c
  158 D1:AB0D D2 12 AB D1 	jp nc, dbgs_color_inc_skip
  159 D1:AB11 13 -  -  -  	inc de
  160 D1:AB12 -  -  -  -  dbgs_color_inc_skip:
  161 D1:AB12 1A -  -  -  	ld a,(de)
  162 D1:AB13 A1 -  -  -  	and c
  163 D1:AB14 CA 2A AB D1 	jp z, dbgs_color0;color is 00
  164 D1:AB18 6F -  -  -  	ld l,a
  165 D1:AB19 E6 AA -  -  	and %10101010
  166 D1:AB1B CA 33 AB D1 	jp z, dbgs_color1;first bit is 0, second must be 1
  167 D1:AB1F 7D -  -  -  	ld a,l ;original a
  168 D1:AB20 E6 55 -  -  	and %01010101 ;we know first bit is 1
  169 D1:AB22 CA 3C AB D1 	jp z, dbgs_color2;second bit is 0
  170 D1:AB26 C3 45 AB D1 	jp dbgs_color3;second bit is 1
  171 D1:AB2A -  -  -  -  dbgs_color0:
  172 D1:AB2A -  -  -  -  	;jp exit_prgm
  173 D1:AB2A D9 -  -  -  	exx;shadow
  174 D1:AB2B 3A C2 AA D1 	ld a,(current_color_0)
  175 D1:AB2F C3 4A AB D1 	jp dbgs_color_write
  176 D1:AB33 -  -  -  -  dbgs_color1:
  177 D1:AB33 -  -  -  -  	;jp exit_prgm
  178 D1:AB33 D9 -  -  -  	exx;shadow
  179 D1:AB34 3A C3 AA D1 	ld a,(current_color_1)
  180 D1:AB38 C3 4A AB D1 	jp dbgs_color_write
  181 D1:AB3C -  -  -  -  dbgs_color2:
  182 D1:AB3C -  -  -  -  	;jp exit_prgm
  183 D1:AB3C D9 -  -  -  	exx;shadow
  184 D1:AB3D 3A C4 AA D1 	ld a,(current_color_2)
  185 D1:AB41 C3 4A AB D1 	jp dbgs_color_write
  186 D1:AB45 -  -  -  -  dbgs_color3:
  187 D1:AB45 -  -  -  -  	;jp exit_prgm
  188 D1:AB45 D9 -  -  -  	exx;toShadow
  189 D1:AB46 3A C5 AA D1 	ld a,(current_color_3)
  190 D1:AB4A -  -  -  -  dbgs_color_write:
  191 D1:AB4A -  -  -  -  dbgs_color_nibble .equ $+1
  192 D1:AB4A E6 0F -  -  	and %00001111;writing to second nibble of hl, first pixel
  193 D1:AB4C 47 -  -  -  	ld b,a;b has color nibble
  194 D1:AB4D 3A 4B AB D1 	ld a,(dbgs_color_nibble)
  195 D1:AB51 EE FF -  -  	xor %11111111
  196 D1:AB53 32 4B AB D1 	ld (dbgs_color_nibble),a
  197 D1:AB57 -  -  -  -  	
  198 D1:AB57 CB 47 -  -  	bit 0,a
  199 D1:AB59 -  -  -  -  dbgs_flip_1 .equ $
  200 D1:AB59 C2 5E AB D1 	jp nz, dbgs_skip_inc_hl;if writing to first pixel inc hl
  201 D1:AB5D -  -  -  -  dbgs_flip_2 .equ $
  202 D1:AB5D 23 -  -  -  	inc hl
  203 D1:AB5E -  -  -  -  dbgs_skip_inc_hl:
  204 D1:AB5E A6 -  -  -  	and (hl);a has other nibble
  205 D1:AB5F B0 -  -  -  	or b 
  206 D1:AB60 77 -  -  -  	ld (hl),a;write to vram 
  207 D1:AB61 D9 -  -  -  	exx;normal
  208 D1:AB62 -  -  -  -  	
  209 D1:AB62 10 96 -  -  	djnz draw_bg_sprite_line_loop
  210 D1:AB64 C9 -  -  -  	ret
  211 D1:AB65 -  -  -  -  dbgs_alphaskip:
  212 D1:AB65 -  -  -  -  	
  213 D1:AB65 3A 4B AB D1 	ld a,(dbgs_color_nibble)
  214 D1:AB69 EE FF -  -  	xor %11111111
  215 D1:AB6B 32 4B AB D1 	ld (dbgs_color_nibble),a
  216 D1:AB6F CB 47 -  -  	bit 0,a
  217 D1:AB71 -  -  -  -  dbgs_flip_3 .equ $
  218 D1:AB71 C2 76 AB D1 	jp nz, dbgs_skip_inc_hl_2
  219 D1:AB75 -  -  -  -  dbgs_flip_4 .equ $
  220 D1:AB75 23 -  -  -  	inc hl
  221 D1:AB76 -  -  -  -  dbgs_skip_inc_hl_2:
  222 D1:AB76 D9 -  -  -  	exx;normal
  223 D1:AB77 05 -  -  -  	dec b
  224 D1:AB78 C2 FA AA D1 	jp nz, draw_bg_sprite_line_loop
  225 D1:AB7C C9 -  -  -  	ret
  226 D1:AB7D -  -  -  -  
  227 D1:AB7D -  -  -  -  
  228 D1:AB7D -  -  -  -  
  229 D1:AB7D -  -  -  -  
  230 D1:AB7D -  -  -  -  
  231 D1:AB7D -  -  -  -  
  232 D1:AB7D -  -  -  -  
  233 D1:AB7D -  -  -  -  
  234 D1:AB7D -  -  -  -  
  235 D1:AB7D -  -  -  -  
  236 D1:AB7D -  -  -  -  
Listing for file "ascent.asm"
  229 D1:AB7D -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:AB7D -  -  -  -  
    2 D1:AB7D -  -  -  -  
    3 D1:AB7D -  -  -  -  ;de = vram-1 , hl = data, a = number lines to draw
    4 D1:AB7D -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:AB7D -  -  -  -  
    6 D1:AB7D 01 00 00 00 	ld bc,0
    7 D1:AB81 4F -  -  -  	ld c,a
    8 D1:AB82 E5 -  -  -  	push hl
    9 D1:AB83 7E -  -  -  	ld a,(hl);height
   10 D1:AB84 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:AB85 4F -  -  -  	ld c,a;height
   12 D1:AB86 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:AB87 E1 -  -  -  	pop hl
   14 D1:AB88 23 -  -  -  	inc hl
   15 D1:AB89 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:AB8A -  -  -  -  
   17 D1:AB8A 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:AB8B EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:AB8C C3 D0 AB D1 	jp dfgs_loop
   20 D1:AB90 -  -  -  -  	
   21 D1:AB90 -  -  -  -  ;de = vram-1 , hl = data, a = top lines to skip	
   22 D1:AB90 -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:AB90 -  -  -  -  	
   24 D1:AB90 01 00 00 00 	ld bc,0
   25 D1:AB94 4F -  -  -  	ld c,a
   26 D1:AB95 D5 -  -  -  	push de
   27 D1:AB96 11 00 00 00 	ld de,0
   28 D1:AB9A E5 -  -  -  	push hl
   29 D1:AB9B 5E -  -  -  	ld e,(hl);height
   30 D1:AB9C 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:AB9D -  -  -  -  
   32 D1:AB9D 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:AB9E E1 -  -  -  	pop hl;start of data
   34 D1:AB9F 19 -  -  -  	add hl,de
   35 D1:ABA0 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:ABA1 23 -  -  -  	inc hl;hl is pixel data
   37 D1:ABA2 D1 -  -  -  	pop de
   38 D1:ABA3 C5 -  -  -  	push bc;save total and skipped loops
   39 D1:ABA4 79 -  -  -  	ld a,c;loops to skip
   40 D1:ABA5 01 00 00 00 	ld bc,0
   41 D1:ABA9 -  -  -  -  	
   42 D1:ABA9 -  -  -  -  
   43 D1:ABA9 -  -  -  -  draw_fast_sprite_top_loop:
   44 D1:ABA9 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:ABAA EB -  -  -  	ex de,hl;hl is vram
   46 D1:ABAB 09 -  -  -  	add hl,bc
   47 D1:ABAC EB -  -  -  	ex de,hl;hl is data
   48 D1:ABAD 23 -  -  -  	inc hl
   49 D1:ABAE 4E -  -  -  	ld c,(hl);ldir length
   50 D1:ABAF 09 -  -  -  	add hl,bc;add ldir length
   51 D1:ABB0 EB -  -  -  	ex de,hl;hl is vram
   52 D1:ABB1 09 -  -  -  	add hl,bc;add ldir length
   53 D1:ABB2 13 -  -  -  	inc de
   54 D1:ABB3 EB -  -  -  	ex de,hl;hl is data
   55 D1:ABB4 3D -  -  -  	dec a
   56 D1:ABB5 C2 A9 AB D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:ABB9 -  -  -  -  	
   58 D1:ABB9 -  -  -  -  	
   59 D1:ABB9 C1 -  -  -  	pop bc
   60 D1:ABBA 78 -  -  -  	ld a,b
   61 D1:ABBB 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:ABBC -  -  -  -  		
   63 D1:ABBC 01 00 00 00 	ld bc,0
   64 D1:ABC0 4E -  -  -  	ld c,(hl)
   65 D1:ABC1 EB -  -  -  	ex de,hl
   66 D1:ABC2 C3 D0 AB D1 	jp dfgs_loop
   67 D1:ABC6 -  -  -  -  
   68 D1:ABC6 -  -  -  -  
   69 D1:ABC6 -  -  -  -  ;de = vram-1 , hl = data
   70 D1:ABC6 -  -  -  -  draw_fast_sprite_full:
   71 D1:ABC6 01 00 00 00 	ld bc,0
   72 D1:ABCA 4E -  -  -  	ld c,(hl);height
   73 D1:ABCB 09 -  -  -  	add hl,bc
   74 D1:ABCC 7E -  -  -  	ld a,(hl);total loops
   75 D1:ABCD 23 -  -  -  	inc hl
   76 D1:ABCE 4E -  -  -  	ld c,(hl);first gap length
   77 D1:ABCF EB -  -  -  	ex de,hl
   78 D1:ABD0 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   79 D1:ABD0 -  -  -  -  dfgs_loop:;gap, colors
   80 D1:ABD0 09 -  -  -  	add hl,bc;add alpha length
   81 D1:ABD1 EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   82 D1:ABD2 23 -  -  -  	inc hl
   83 D1:ABD3 4E -  -  -  	ld c,(hl);get ldir length
   84 D1:ABD4 23 -  -  -  	inc hl
   85 D1:ABD5 ED B0 -  -  	ldir
   86 D1:ABD7 4E -  -  -  	ld c,(hl);load c with next alpha length
   87 D1:ABD8 EB -  -  -  	ex de,hl;swap, hl is vram
   88 D1:ABD9 3D -  -  -  	dec a
   89 D1:ABDA C2 D0 AB D1 	jp nz,dfgs_loop
   90 D1:ABDE C9 -  -  -  	ret
   91 D1:ABDF -  -  -  -  	
   92 D1:ABDF -  -  -  -  	
   93 D1:ABDF -  -  -  -  	
   94 D1:ABDF -  -  -  -  	
   95 D1:ABDF -  -  -  -  
   96 D1:ABDF -  -  -  -  
   97 D1:ABDF -  -  -  -  ;hl = data, de = vram
   98 D1:ABDF -  -  -  -  draw_slow_sprite_full:
   99 D1:ABDF 01 00 00 00 	ld bc,0
  100 D1:ABE3 4E -  -  -  	ld c,(hl);height
  101 D1:ABE4 09 -  -  -  	add hl,bc
  102 D1:ABE5 7E -  -  -  	ld a,(hl);num loops
  103 D1:ABE6 D9 -  -  -  	exx
  104 D1:ABE7 4F -  -  -  	ld c,a
  105 D1:ABE8 D9 -  -  -  	exx
  106 D1:ABE9 1B -  -  -  	dec de
  107 D1:ABEA -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  108 D1:ABEA -  -  -  -  dsfgs_line_loop:
  109 D1:ABEA 23 -  -  -  	inc hl;gap length
  110 D1:ABEB 4E -  -  -  	ld c,(hl);gap length
  111 D1:ABEC EB -  -  -  	ex de,hl;hl is vram
  112 D1:ABED 09 -  -  -  	add hl,bc;add aplha gap
  113 D1:ABEE EB -  -  -  	ex de,hl;hl is data
  114 D1:ABEF 23 -  -  -  	inc hl;hl points to single pix mask
  115 D1:ABF0 1A -  -  -  	ld a,(de);vram data
  116 D1:ABF1 A6 -  -  -  	and (hl)
  117 D1:ABF2 23 -  -  -  	inc hl;pixel data
  118 D1:ABF3 B6 -  -  -  	or (hl)
  119 D1:ABF4 12 -  -  -  	ld (de),a
  120 D1:ABF5 23 -  -  -  	inc hl;ldir length
  121 D1:ABF6 -  -  -  -  	
  122 D1:ABF6 13 -  -  -  	inc de;move to next pixel
  123 D1:ABF7 -  -  -  -  	
  124 D1:ABF7 7E -  -  -  	ld a,(hl);ldir length
  125 D1:ABF8 23 -  -  -  	inc hl;data
  126 D1:ABF9 4F -  -  -  	ld c,a
  127 D1:ABFA B7 -  -  -  	or a
  128 D1:ABFB CA 01 AC D1 	jp z,dsfgs_ldir_skip
  129 D1:ABFF ED B0 -  -  	ldir
  130 D1:AC01 -  -  -  -  dsfgs_ldir_skip:
  131 D1:AC01 1A -  -  -  	ld a,(de);vram data
  132 D1:AC02 A6 -  -  -  	and (hl)
  133 D1:AC03 23 -  -  -  	inc hl;pixel data
  134 D1:AC04 B6 -  -  -  	or (hl)
  135 D1:AC05 12 -  -  -  	ld (de),a
  136 D1:AC06 -  -  -  -  	
  137 D1:AC06 D9 -  -  -  	exx 
  138 D1:AC07 0D -  -  -  	dec c
  139 D1:AC08 D9 -  -  -  	exx
  140 D1:AC09 C2 EA AB D1 	jp nz,dsfgs_line_loop
  141 D1:AC0D C9 -  -  -  	ret
  142 D1:AC0E -  -  -  -  
  143 D1:AC0E -  -  -  -  
  144 D1:AC0E -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  145 D1:AC0E -  -  -  -  draw_slow_sprite_top_cut:
  146 D1:AC0E -  -  -  -  
  147 D1:AC0E E5 -  -  -  	push hl
  148 D1:AC0F 01 00 00 00 	ld bc,0
  149 D1:AC13 4F -  -  -  	ld c,a
  150 D1:AC14 09 -  -  -  	add hl,bc
  151 D1:AC15 7E -  -  -  	ld a,(hl);loops to skip
  152 D1:AC16 32 39 AC D1 	ld (dsstc_loops_skipped),a
  153 D1:AC1A D9 -  -  -  	exx
  154 D1:AC1B 47 -  -  -  	ld b,a;loops to skip
  155 D1:AC1C D9 -  -  -  	exx
  156 D1:AC1D E1 -  -  -  	pop hl
  157 D1:AC1E 4E -  -  -  	ld c,(hl)
  158 D1:AC1F 09 -  -  -  	add hl,bc;total loops
  159 D1:AC20 7E -  -  -  	ld a,(hl);total loops
  160 D1:AC21 23 -  -  -  	inc hl;gap length
  161 D1:AC22 -  -  -  -  
  162 D1:AC22 -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  163 D1:AC22 D9 -  -  -  	exx
  164 D1:AC23 -  -  -  -  slow_sprite_data_traverse:
  165 D1:AC23 D9 -  -  -  	exx
  166 D1:AC24 4E -  -  -  	ld c,(hl);gap length
  167 D1:AC25 EB -  -  -  	ex de,hl;hl is vram
  168 D1:AC26 09 -  -  -  	add hl,bc
  169 D1:AC27 EB -  -  -  	ex de,hl
  170 D1:AC28 -  -  -  -  	
  171 D1:AC28 23 -  -  -  	inc hl
  172 D1:AC29 23 -  -  -  	inc hl
  173 D1:AC2A 23 -  -  -  	inc hl;ldir length
  174 D1:AC2B 4E -  -  -  	ld c,(hl)
  175 D1:AC2C 09 -  -  -  	add hl,bc
  176 D1:AC2D EB -  -  -  	ex de,hl
  177 D1:AC2E 09 -  -  -  	add hl,bc
  178 D1:AC2F EB -  -  -  	ex de,hl
  179 D1:AC30 13 -  -  -  	inc de;single pix
  180 D1:AC31 23 -  -  -  	inc hl
  181 D1:AC32 23 -  -  -  	inc hl
  182 D1:AC33 23 -  -  -  	inc hl;gap length
  183 D1:AC34 D9 -  -  -  	exx
  184 D1:AC35 10 EC -  -  	djnz slow_sprite_data_traverse
  185 D1:AC37 D9 -  -  -  	exx
  186 D1:AC38 -  -  -  -  
  187 D1:AC38 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  188 D1:AC38 D6 00 -  -  	sub a,0;loops skipped
  189 D1:AC3A D9 -  -  -  	exx
  190 D1:AC3B 4F -  -  -  	ld c,a
  191 D1:AC3C D9 -  -  -  	exx
  192 D1:AC3D -  -  -  -  	
  193 D1:AC3D 1B -  -  -  	dec de
  194 D1:AC3E 2B -  -  -  	dec hl	
  195 D1:AC3F C3 EA AB D1 	jp dsfgs_line_loop
  196 D1:AC43 -  -  -  -  	
  197 D1:AC43 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  198 D1:AC43 -  -  -  -  draw_slow_sprite_bottom_cut:
  199 D1:AC43 01 00 00 00 	ld bc,0
  200 D1:AC47 E5 -  -  -  	push hl
  201 D1:AC48 4F -  -  -  	ld c,a;height
  202 D1:AC49 09 -  -  -  	add hl,bc
  203 D1:AC4A 7E -  -  -  	ld a,(hl);num loops
  204 D1:AC4B D9 -  -  -  	exx
  205 D1:AC4C 4F -  -  -  	ld c,a
  206 D1:AC4D D9 -  -  -  	exx
  207 D1:AC4E E1 -  -  -  	pop hl
  208 D1:AC4F 4E -  -  -  	ld c,(hl)
  209 D1:AC50 09 -  -  -  	add hl,bc
  210 D1:AC51 -  -  -  -  
  211 D1:AC51 1B -  -  -  	dec de
  212 D1:AC52 C3 EA AB D1 	jp dsfgs_line_loop
  213 D1:AC56 -  -  -  -  
  214 D1:AC56 -  -  -  -  
  215 D1:AC56 -  -  -  -  
  216 D1:AC56 -  -  -  -  
  217 D1:AC56 -  -  -  -  
  218 D1:AC56 -  -  -  -  
  219 D1:AC56 -  -  -  -  
  220 D1:AC56 -  -  -  -  
  221 D1:AC56 -  -  -  -  
  222 D1:AC56 -  -  -  -  
  223 D1:AC56 -  -  -  -  
  224 D1:AC56 -  -  -  -  
  225 D1:AC56 -  -  -  -  
  226 D1:AC56 -  -  -  -  
  227 D1:AC56 -  -  -  -  
  228 D1:AC56 -  -  -  -  
  229 D1:AC56 -  -  -  -  
  230 D1:AC56 -  -  -  -  
  231 D1:AC56 -  -  -  -  
  232 D1:AC56 -  -  -  -  
  233 D1:AC56 -  -  -  -  
  234 D1:AC56 -  -  -  -  
  235 D1:AC56 -  -  -  -  
  236 D1:AC56 -  -  -  -  
  237 D1:AC56 -  -  -  -  
  238 D1:AC56 -  -  -  -  
  239 D1:AC56 -  -  -  -  
  240 D1:AC56 -  -  -  -  
  241 D1:AC56 -  -  -  -  
  242 D1:AC56 -  -  -  -  
  243 D1:AC56 -  -  -  -  
  244 D1:AC56 -  -  -  -  
  245 D1:AC56 -  -  -  -  
  246 D1:AC56 -  -  -  -  
  247 D1:AC56 -  -  -  -  
  248 D1:AC56 -  -  -  -   
  249 D1:AC56 -  -  -  -  
  250 D1:AC56 -  -  -  -  
  251 D1:AC56 -  -  -  -  
  252 D1:AC56 -  -  -  -  
  253 D1:AC56 -  -  -  -  
  254 D1:AC56 -  -  -  -  
  255 D1:AC56 -  -  -  -  
  256 D1:AC56 -  -  -  -  
  257 D1:AC56 -  -  -  -  
  258 D1:AC56 -  -  -  -  
  259 D1:AC56 -  -  -  -  
  260 D1:AC56 -  -  -  -  
  261 D1:AC56 -  -  -  -  
  262 D1:AC56 -  -  -  -  
  263 D1:AC56 -  -  -  -  
  264 D1:AC56 -  -  -  -  
  265 D1:AC56 -  -  -  -  
  266 D1:AC56 -  -  -  -  
  267 D1:AC56 -  -  -  -  
  268 D1:AC56 -  -  -  -  
  269 D1:AC56 -  -  -  -  
  270 D1:AC56 -  -  -  -  
  271 D1:AC56 -  -  -  -  
  272 D1:AC56 -  -  -  -  
  273 D1:AC56 -  -  -  -  
  274 D1:AC56 -  -  -  -  
  275 D1:AC56 -  -  -  -  
  276 D1:AC56 -  -  -  -  
  277 D1:AC56 -  -  -  -  
  278 D1:AC56 -  -  -  -  
  279 D1:AC56 -  -  -  -  
  280 D1:AC56 -  -  -  -  
  281 D1:AC56 -  -  -  -  
  282 D1:AC56 -  -  -  -  
  283 D1:AC56 -  -  -  -  
  284 D1:AC56 -  -  -  -  
  285 D1:AC56 -  -  -  -  
  286 D1:AC56 -  -  -  -  
  287 D1:AC56 -  -  -  -  
  288 D1:AC56 -  -  -  -  
  289 D1:AC56 -  -  -  -  
  290 D1:AC56 -  -  -  -  
  291 D1:AC56 -  -  -  -  
  292 D1:AC56 -  -  -  -  
  293 D1:AC56 -  -  -  -  
  294 D1:AC56 -  -  -  -  
  295 D1:AC56 -  -  -  -  
  296 D1:AC56 -  -  -  -  
  297 D1:AC56 -  -  -  -  
  298 D1:AC56 -  -  -  -  
  299 D1:AC56 -  -  -  -  
  300 D1:AC56 -  -  -  -  
  301 D1:AC56 -  -  -  -  
  302 D1:AC56 -  -  -  -  
  303 D1:AC56 -  -  -  -  
  304 D1:AC56 -  -  -  -  	
  305 D1:AC56 -  -  -  -  	
Listing for file "ascent.asm"
  230 D1:AC56 -  -  -  -  #include "spriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteData.txt"
    1 D1:AC56 -  -  -  -  
    2 D1:AC56 -  -  -  -  
    3 D1:AC56 -  -  -  -  
    4 D1:AC56 -  -  -  -  
    5 D1:AC56 -  -  -  -  ;BG SPRITES
    6 D1:AC56 -  -  -  -  testSprite:
    7 D1:AC56 -  -  -  -  	;.db width
    8 D1:AC56 -  -  -  -  	;.db col 1 , 2 ,3 ,4
    9 D1:AC56 -  -  -  -  	;spr data 2bpp
   10 D1:AC56 -  -  -  -  	;line length in bytes, transparency, color data
   11 D1:AC56 -  -  -  -  	;line length, data
   12 D1:AC56 -  -  -  -  	;line length, data
   13 D1:AC56 -  -  -  -  
   14 D1:AC56 -  -  -  -  
   15 D1:AC56 08 -  -  -  	.db 8;h=5
   16 D1:AC57 33 44 22 55 	.db %00110011, %01000100,%00100010, %01010101 ;rgbw
   17 D1:AC5B 04 FF 05 8C 	.db 4, %11111111, %00000101, %10001100;rrggbrwr
   18 D1:AC5F 04 EF 07 B4 	.db 4, %11101111, %00000111, %10110100;RRGXWBWG 
   19 D1:AC63 04 53 0F 40 	.db 4, %01010011, %00001111, %01000000 
   20 D1:AC67 02 00 -  -  	.db 2, %00000000 
   21 D1:AC69 03 C2 F7 -  	.db 3, %11000010, %11110111 ;WWXXXXGX
   22 D1:AC6C -  -  -  -  	
   23 D1:AC6C -  -  -  -  testSprite2:;h=4
   24 D1:AC6C 04 -  -  -  	.db 4
   25 D1:AC6D 11 44 22 55 	.db %00010001, %01000100,%00100010, %01010101
   26 D1:AC71 03 F0 05 -  	.db 3,%11110000, %00000101
   27 D1:AC74 03 90 AF -  	.db 3,%10010000,%10101111
   28 D1:AC77 02 00 -  -  	.db 2,%00000000
   29 D1:AC79 03 E0 E4 -  	.db 3,%11100000,%11100100
   30 D1:AC7C -  -  -  -  	
   31 D1:AC7C -  -  -  -  	
   32 D1:AC7C -  -  -  -  	
   33 D1:AC7C -  -  -  -  	
   34 D1:AC7C -  -  -  -  	
   35 D1:AC7C -  -  -  -  ;FG _ SPRITES
   36 D1:AC7C -  -  -  -  
   37 D1:AC7C -  -  -  -  ;YBRGW
   38 D1:AC7C -  -  -  -  
   39 D1:AC7C -  -  -  -  ;SLOW_Sprite,  even pixel start
   40 D1:AC7C -  -  -  -  ;.height
   41 D1:AC7C -  -  -  -  ;.num loops per num lines
   42 D1:AC7C -  -  -  -  
   43 D1:AC7C -  -  -  -  ;.db alpha length(gap between single pixels, 0 for a gap of -1, 1 for no gap),single pixel mask(%00001111) or (%11111111) single pixel data (%data0000) or (%00000000),
   44 D1:AC7C -  -  -  -  ; ldir length, main pixel data,pixel mask,pixel data.....
   45 D1:AC7C -  -  -  -  
   46 D1:AC7C -  -  -  -  testSlowSprite:
   47 D1:AC7C 05 -  -  -  	.db 5
   48 D1:AC7D 02 04 07 0B 
              0C -  -  -  	.db 2,4,7,11,12
   49 D1:AC82 00 FF 00 02 
              35 35 FF 00 
              00 FF 00 02 
              24 24 FF 00 	.db 0,%11111111,%00000000,2,$35,$35,%11111111,%00000000,0,%11111111,%00000000,2,$24,$24,%11111111,%00000000
   50 D1:AC92 9B FF 00 02 
              31 31 F0 01 
              01 FF 00 01 
              11 FF 00 -  	.db 155, %11111111,%00000000,2,$31,$31,%11110000,$01,1,%11111111,%00000000,1,$11,%11111111,%00000000
   51 D1:ACA1 9A 0F 50 01 
              53 FF 00 00 
              FF 00 01 35 
              F0 05 01 0F 
              50 00 FF 00 	.db 154,%00001111,$50,1,$53,%11111111,%00000000,0,%11111111,%00000000,1,$35,%11110000,$05,1,%00001111,$50,0,%11111111,%00000000
   52 D1:ACB5 9A 0F 30 00 
              F0 03 00 FF 
              00 00 F0 03 
              01 0F 30 00 
              7F 00 00 0F 
              30 00 FF 00 	.db 154,%00001111,$30,0,%11110000,$03,0,%11111111,%00000000,0,%11110000,$03,1,%00001111,$30,0,%1111111,00000000,0,%00001111,$30,0,%11111111,%00000000
   53 D1:ACCD 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   54 D1:ACD7 -  -  -  -  	
   55 D1:ACD7 -  -  -  -  	;WRWRXXGBGBXX
   56 D1:ACD7 -  -  -  -  	
   57 D1:ACD7 -  -  -  -  	;XXYRYRYXXXYY
   58 D1:ACD7 -  -  -  -  	
   59 D1:ACD7 -  -  -  -  	;XW RW XX WR WX XW
   60 D1:ACD7 -  -  -  -  	
   61 D1:ACD7 -  -  -  -  	;XR RX RX XR XR XX
   62 D1:ACD7 -  -  -  -  	
   63 D1:ACD7 -  -  -  -  	;XW WW WW WW WW WX
   64 D1:ACD7 -  -  -  -  	
   65 D1:ACD7 -  -  -  -  	
   66 D1:ACD7 -  -  -  -  testSlowSpriteBestCase:
   67 D1:ACD7 05 -  -  -  	.db 5
   68 D1:ACD8 01 02 03 04 
              05 -  -  -  	.db 1,2,3,4,5
   69 D1:ACDD 00 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 0,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   70 D1:ACE7 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   71 D1:ACF1 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   72 D1:ACFB 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   73 D1:AD05 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   74 D1:AD0F -  -  -  -  	
   75 D1:AD0F -  -  -  -  ;XW WW WW WW WW WX
   76 D1:AD0F -  -  -  -  ;XW WW WW WW WW WX
   77 D1:AD0F -  -  -  -  ;XW WW WW WW WW WX
   78 D1:AD0F -  -  -  -  ;XW WW WW WW WW WX
   79 D1:AD0F -  -  -  -  ;XW WW WW WW WW WX
   80 D1:AD0F -  -  -  -  
   81 D1:AD0F -  -  -  -  ;YBRGW
   82 D1:AD0F -  -  -  -  
   83 D1:AD0F -  -  -  -  ;.db flags ( 4bpc,3bpc,2bpc,1bpc,0bpc,noalpha
   84 D1:AD0F -  -  -  -  ;.db width(px),height
   85 D1:AD0F -  -  -  -  ;.db alpha data 
   86 D1:AD0F -  -  -  -  ;.db color data
   87 D1:AD0F -  -  -  -  
   88 D1:AD0F -  -  -  -  	
   89 D1:AD0F -  -  -  -  testSpriteCompressed:
   90 D1:AD0F 80 -  -  -  	.db %10000000;4bpc
   91 D1:AD10 08 08 -  -  	.db 8,8
   92 D1:AD12 -  -  -  -  ;.db $33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22
   93 D1:AD12 7E -  -  -  	.db %01111110;1
   94 D1:AD13 66 -  -  -  	.db %01100110;2
   95 D1:AD14 CE -  -  -  	.db %11001110;2
   96 D1:AD15 55 -  -  -  	.db %01010101;2
   97 D1:AD16 AA -  -  -  	.db %10101010;2
   98 D1:AD17 6E -  -  -  	.db %01101110;2
   99 D1:AD18 3B -  -  -  	.db %00111011;2
  100 D1:AD19 67 -  -  -  	.db %01100111;2
  101 D1:AD1A 53 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 -  	.db $53,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55;indexed color data
  102 D1:AD41 -  -  -  -  	;1 3 5 7 9 11 13 15
  103 D1:AD41 -  -  -  -  	
  104 D1:AD41 -  -  -  -  testSpriteCompressed2:
  105 D1:AD41 03 04 -  -  	.db 3,4
  106 D1:AD43 CD 50 -  -  	.db %11001101,%01010000
  107 D1:AD45 23 23 23 23 
              23 -  -  -  	.db $23,$23,$23,$23,$23
  108 D1:AD4A -  -  -  -  	;110
  109 D1:AD4A -  -  -  -  	;011
  110 D1:AD4A -  -  -  -  	;010
  111 D1:AD4A -  -  -  -  	;101
  112 D1:AD4A -  -  -  -  	
  113 D1:AD4A -  -  -  -  
  114 D1:AD4A -  -  -  -  testSpriteCompressed3:
  115 D1:AD4A 05 04 -  -  	.db 5,4
  116 D1:AD4C 76 B2 70 -  	.db %01110110,%10110010,%01110000
  117 D1:AD4F 55 55 55 55 
              55 55 55 -  	.db $55,$55,$55,$55,$55,$55,$55
  118 D1:AD56 -  -  -  -  	;01110
  119 D1:AD56 -  -  -  -  	;11010
  120 D1:AD56 -  -  -  -  	;11001
  121 D1:AD56 -  -  -  -  	;00111
  122 D1:AD56 -  -  -  -  
  123 D1:AD56 -  -  -  -  
  124 D1:AD56 -  -  -  -  testSpriteCompressed4:
  125 D1:AD56 40 -  -  -  	.db %01000000;3bpc
  126 D1:AD57 09 04 -  -  	.db 9,4
  127 D1:AD59 9D 5F F6 82 
              B0 -  -  -  	.db %10011101,%01011111,%11110110,%10000010,%10110000
  128 D1:AD5E 54 32 10 33 	.db $54,$32,$10,$33
  129 D1:AD62 E3 8E 38 E3 
              8E 38 E3 8E 
              38 E3 E3 8E 
              38 E3 8E 38 
              E3 8E 38 E3 	.db %11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011
  130 D1:AD76 -  -  -  -  ;100111010  2 loop
  131 D1:AD76 -  -  -  -  ;101111111  1 loop
  132 D1:AD76 -  -  -  -  ;110110100  2 loop
  133 D1:AD76 -  -  -  -  ;000101011  2 loop
  134 D1:AD76 -  -  -  -  ;2357
  135 D1:AD76 -  -  -  -  testSpriteCompressedFast:
  136 D1:AD76 20 -  -  -  	.db %00100000;4bpc
  137 D1:AD77 08 08 -  -  	.db 8,8
  138 D1:AD79 F0 -  -  -  	.db %11110000
  139 D1:AD7A 33 -  -  -  	.db %00110011
  140 D1:AD7B C3 -  -  -  	.db %11000011
  141 D1:AD7C FF -  -  -  	.db %11111111
  142 D1:AD7D F3 -  -  -  	.db %11110011
  143 D1:AD7E CC -  -  -  	.db %11001100
  144 D1:AD7F C0 -  -  -  	.db %11000000
  145 D1:AD80 3F -  -  -  	.db %00111111
  146 D1:AD81 54 32 -  -  	.db $54,$32
  147 D1:AD83 C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 -  -  -  	.db %11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001
  148 D1:AD9C -  -  -  -  	
  149 D1:AD9C -  -  -  -  	
  150 D1:AD9C 55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 	.db $55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22
  151 D1:ADC0 -  -  -  -  	
  152 D1:ADC0 -  -  -  -  ;FAST_SPRITE	
  153 D1:ADC0 -  -  -  -  ;double pixel transparency, no gaps
  154 D1:ADC0 -  -  -  -  ;.db height
  155 D1:ADC0 -  -  -  -  ;.db num loops for num lines
  156 D1:ADC0 -  -  -  -  ;.db to next ldir start, color length, data
  157 D1:ADC0 -  -  -  -  
  158 D1:ADC0 -  -  -  -  test_fast_sprite:;20x4px,complex
  159 D1:ADC0 04 -  -  -  	.db 4
  160 D1:ADC1 02 06 07 09 	.db 2,6,7,9
  161 D1:ADC5 02 02 12 45 
              03 04 33 32 
              45 44 -  -  	.db 2,2,%00010010,%01000101,3,4,%00110011,%00110010,%01000101,%01000100 ;gap, length,    						XXBYWGXXXXXXRRBRWGGG
  162 D1:ADCF 97 02 21 21 
              01 02 35 35 
              01 01 43 01 
              01 35 -  -  	.db 151,2,%00100001,%00100001,1,2,%00110101,%00110101,1,1,%01000011,1,1,%00110101; 								XXYBYBXXWRWRXXRGXXWR
  163 D1:ADDD 96 0A 35 35 
              45 45 12 12 
              34 34 34 34 	.db 150,10,%00110101,%00110101,%01000101,%01000101,%00010010,%00010010,%00110100,%00110100,%00110100,%00110100; WRWRWGWGBYBYGRGRGRGR
  164 D1:ADE9 98 05 55 11 
              22 33 44 01 
              02 44 53 -  	.db 152,5,%01010101,%00010001,%00100010,%00110011,%01000100,1,2,%01000100,%01010011;							XXXXWWYYBBRRGGXXGGRW
  165 D1:ADF4 -  -  -  -  
  166 D1:ADF4 -  -  -  -  
  167 D1:ADF4 -  -  -  -  
  168 D1:ADF4 -  -  -  -  ;COMPLEX_SPRITE
  169 D1:ADF4 -  -  -  -  ;16 color, per pixel transparency, even or odd start
  170 D1:ADF4 -  -  -  -  
  171 D1:ADF4 -  -  -  -  
  172 D1:ADF4 -  -  -  -  
  173 D1:ADF4 -  -  -  -  
  174 D1:ADF4 -  -  -  -  
  175 D1:ADF4 -  -  -  -  
  176 D1:ADF4 -  -  -  -  
  177 D1:ADF4 -  -  -  -  
  178 D1:ADF4 -  -  -  -  
  179 D1:ADF4 -  -  -  -  
  180 D1:ADF4 -  -  -  -  
  181 D1:ADF4 -  -  -  -  
  182 D1:ADF4 -  -  -  -  
  183 D1:ADF4 -  -  -  -  
  184 D1:ADF4 -  -  -  -  
  185 D1:ADF4 -  -  -  -  
  186 D1:ADF4 -  -  -  -  
  187 D1:ADF4 -  -  -  -  
  188 D1:ADF4 -  -  -  -  	
Listing for file "ascent.asm"
  231 D1:ADF4 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:ADF4 -  -  -  -  bg_sprite_indices:
    2 D1:ADF4 56 AC D1 -  	.dl testSprite
    3 D1:ADF7 6C AC D1 -  	.dl testSprite2
    4 D1:ADFA -  -  -  -  	;.dl sprite data
    5 D1:ADFA -  -  -  -  
    6 D1:ADFA -  -  -  -  
    7 D1:ADFA -  -  -  -  
    8 D1:ADFA -  -  -  -  
    9 D1:ADFA -  -  -  -  bg_data:
   10 D1:ADFA -  -  -  -  
   11 D1:ADFA -  -  -  -  	;y y 
   12 D1:ADFA -  -  -  -  	;x (byte) 
   13 D1:ADFA -  -  -  -  	;flags  (7 = odd pixel  6 = spriteFlip , 0 = data cont)    0 to end data   if sprite starts on even pixel, inc x by 1
   14 D1:ADFA -  -  -  -  	;height
   15 D1:ADFA -  -  -  -  	;index
   16 D1:ADFA -  -  -  -  	
   17 D1:ADFA -  -  -  -  	
   18 D1:ADFA -  -  -  -  	;even pixel noflip  x = (pixel - 1) /2
   19 D1:ADFA -  -  -  -  	;odd pixel noflip   x = (pixel) /2
   20 D1:ADFA -  -  -  -  	
   21 D1:ADFA -  -  -  -  	;even pixel, flip, odd width   x = (pixel + width)/2
   22 D1:ADFA -  -  -  -  	;odd pixel, flip, odd width	   x = (pixel + width)/2
   23 D1:ADFA -  -  -  -  	
   24 D1:ADFA -  -  -  -  	
   25 D1:ADFA -  -  -  -  	;even pixel, flip, even width   x = (pixel + width)/2
   26 D1:ADFA -  -  -  -  	;odd pixel, flip, even width	   x = (pixel + width)/2
   27 D1:ADFA -  -  -  -  	
   28 D1:ADFA -  -  -  -  	
   29 D1:ADFA -  -  -  -  	
   30 D1:ADFA -  -  -  -  	
   31 D1:ADFA -  -  -  -  	
   32 D1:ADFA -  -  -  -  	;6 bytes
   33 D1:ADFA 00 84 -  -  	.db $00,$84
   34 D1:ADFC 05 -  -  -  	.db 5
   35 D1:ADFD 01 -  -  -  	.db %00000001
   36 D1:ADFE 05 -  -  -  	.db 5
   37 D1:ADFF 00 -  -  -  	.db 0
   38 D1:AE00 -  -  -  -  	
   39 D1:AE00 00 84 -  -  	.db $00,$84
   40 D1:AE02 0A -  -  -  	.db 10
   41 D1:AE03 81 -  -  -  	.db %10000001
   42 D1:AE04 05 -  -  -  	.db 5
   43 D1:AE05 00 -  -  -  	.db 0
   44 D1:AE06 -  -  -  -  	
   45 D1:AE06 00 83 -  -  	.db $00,$83
   46 D1:AE08 14 -  -  -  	.db 20
   47 D1:AE09 41 -  -  -  	.db %01000001
   48 D1:AE0A 05 -  -  -  	.db 5
   49 D1:AE0B 00 -  -  -  	.db 0
   50 D1:AE0C -  -  -  -  	
   51 D1:AE0C 00 83 -  -  	.db $00,$83
   52 D1:AE0E 1E -  -  -  	.db 30
   53 D1:AE0F C1 -  -  -  	.db %11000001
   54 D1:AE10 05 -  -  -  	.db 5
   55 D1:AE11 00 -  -  -  	.db 0
   56 D1:AE12 -  -  -  -  	
   57 D1:AE12 -  -  -  -  	
   58 D1:AE12 00 80 -  -  	.db $00,$80
   59 D1:AE14 05 -  -  -  	.db 5
   60 D1:AE15 01 -  -  -  	.db %00000001
   61 D1:AE16 05 -  -  -  	.db 5
   62 D1:AE17 00 -  -  -  	.db 0
   63 D1:AE18 -  -  -  -  	
   64 D1:AE18 00 81 -  -  	.db $00,$81
   65 D1:AE1A 0A -  -  -  	.db 10
   66 D1:AE1B 81 -  -  -  	.db %10000001
   67 D1:AE1C 05 -  -  -  	.db 5
   68 D1:AE1D 00 -  -  -  	.db 0
   69 D1:AE1E -  -  -  -  	
   70 D1:AE1E 00 80 -  -  	.db $00,$80
   71 D1:AE20 14 -  -  -  	.db 20
   72 D1:AE21 41 -  -  -  	.db %01000001
   73 D1:AE22 05 -  -  -  	.db 5
   74 D1:AE23 00 -  -  -  	.db 0
   75 D1:AE24 -  -  -  -  	
   76 D1:AE24 00 81 -  -  	.db $00,$81
   77 D1:AE26 1E -  -  -  	.db 30
   78 D1:AE27 C1 -  -  -  	.db %11000001
   79 D1:AE28 05 -  -  -  	.db 5
   80 D1:AE29 00 -  -  -  	.db 0
   81 D1:AE2A -  -  -  -  	
   82 D1:AE2A -  -  -  -  	
   83 D1:AE2A 00 98 -  -  	.db $00,$98
   84 D1:AE2C 05 -  -  -  	.db 5
   85 D1:AE2D 01 -  -  -  	.db %00000001
   86 D1:AE2E 05 -  -  -  	.db 5
   87 D1:AE2F 00 -  -  -  	.db 0
   88 D1:AE30 -  -  -  -  	
   89 D1:AE30 00 98 -  -  		.db $00,$98
   90 D1:AE32 05 -  -  -  	.db 5
   91 D1:AE33 01 -  -  -  	.db %00000001
   92 D1:AE34 05 -  -  -  	.db 5
   93 D1:AE35 00 -  -  -  	.db 0
   94 D1:AE36 00 98 -  -  		.db $00,$98
   95 D1:AE38 05 -  -  -  	.db 5
   96 D1:AE39 01 -  -  -  	.db %00000001
   97 D1:AE3A 05 -  -  -  	.db 5
   98 D1:AE3B 00 -  -  -  	.db 0
   99 D1:AE3C 00 98 -  -  		.db $00,$98
  100 D1:AE3E 05 -  -  -  	.db 5
  101 D1:AE3F 01 -  -  -  	.db %00000001
  102 D1:AE40 05 -  -  -  	.db 5
  103 D1:AE41 00 -  -  -  	.db 0
  104 D1:AE42 00 98 -  -  		.db $00,$98
  105 D1:AE44 05 -  -  -  	.db 5
  106 D1:AE45 01 -  -  -  	.db %00000001
  107 D1:AE46 05 -  -  -  	.db 5
  108 D1:AE47 00 -  -  -  	.db 0
  109 D1:AE48 00 98 -  -  		.db $00,$98
  110 D1:AE4A 05 -  -  -  	.db 5
  111 D1:AE4B 01 -  -  -  	.db %00000001
  112 D1:AE4C 05 -  -  -  	.db 5
  113 D1:AE4D 00 -  -  -  	.db 0
  114 D1:AE4E 00 98 -  -  		.db $00,$98
  115 D1:AE50 05 -  -  -  	.db 5
  116 D1:AE51 01 -  -  -  	.db %00000001
  117 D1:AE52 05 -  -  -  	.db 5
  118 D1:AE53 00 -  -  -  	.db 0
  119 D1:AE54 00 98 -  -  		.db $00,$98
  120 D1:AE56 05 -  -  -  	.db 5
  121 D1:AE57 01 -  -  -  	.db %00000001
  122 D1:AE58 05 -  -  -  	.db 5
  123 D1:AE59 00 -  -  -  	.db 0
  124 D1:AE5A 00 98 -  -  		.db $00,$98
  125 D1:AE5C 05 -  -  -  	.db 5
  126 D1:AE5D 01 -  -  -  	.db %00000001
  127 D1:AE5E 05 -  -  -  	.db 5
  128 D1:AE5F 00 -  -  -  	.db 0
  129 D1:AE60 00 98 -  -  		.db $00,$98
  130 D1:AE62 05 -  -  -  	.db 5
  131 D1:AE63 01 -  -  -  	.db %00000001
  132 D1:AE64 05 -  -  -  	.db 5
  133 D1:AE65 00 -  -  -  	.db 0
  134 D1:AE66 00 98 -  -  		.db $00,$98
  135 D1:AE68 05 -  -  -  	.db 5
  136 D1:AE69 01 -  -  -  	.db %00000001
  137 D1:AE6A 05 -  -  -  	.db 5
  138 D1:AE6B 00 -  -  -  	.db 0
  139 D1:AE6C 00 98 -  -  		.db $00,$98
  140 D1:AE6E 05 -  -  -  	.db 5
  141 D1:AE6F 01 -  -  -  	.db %00000001
  142 D1:AE70 05 -  -  -  	.db 5
  143 D1:AE71 00 -  -  -  	.db 0
  144 D1:AE72 00 98 -  -  		.db $00,$98
  145 D1:AE74 05 -  -  -  	.db 5
  146 D1:AE75 01 -  -  -  	.db %00000001
  147 D1:AE76 05 -  -  -  	.db 5
  148 D1:AE77 00 -  -  -  	.db 0
  149 D1:AE78 00 98 -  -  		.db $00,$98
  150 D1:AE7A 05 -  -  -  	.db 5
  151 D1:AE7B 01 -  -  -  	.db %00000001
  152 D1:AE7C 05 -  -  -  	.db 5
  153 D1:AE7D 00 -  -  -  	.db 0
  154 D1:AE7E 00 98 -  -  		.db $00,$98
  155 D1:AE80 05 -  -  -  	.db 5
  156 D1:AE81 01 -  -  -  	.db %00000001
  157 D1:AE82 05 -  -  -  	.db 5
  158 D1:AE83 00 -  -  -  	.db 0
  159 D1:AE84 00 98 -  -  		.db $00,$98
  160 D1:AE86 05 -  -  -  	.db 5
  161 D1:AE87 01 -  -  -  	.db %00000001
  162 D1:AE88 05 -  -  -  	.db 5
  163 D1:AE89 00 -  -  -  	.db 0
  164 D1:AE8A 00 98 -  -  		.db $00,$98
  165 D1:AE8C 05 -  -  -  	.db 5
  166 D1:AE8D 01 -  -  -  	.db %00000001
  167 D1:AE8E 05 -  -  -  	.db 5
  168 D1:AE8F 00 -  -  -  	.db 0
  169 D1:AE90 -  -  -  -  	
  170 D1:AE90 00 98 -  -  			.db $00,$98
  171 D1:AE92 05 -  -  -  	.db 5
  172 D1:AE93 01 -  -  -  	.db %00000001
  173 D1:AE94 05 -  -  -  	.db 5
  174 D1:AE95 00 -  -  -  	.db 0
  175 D1:AE96 00 98 -  -  		.db $00,$98
  176 D1:AE98 05 -  -  -  	.db 5
  177 D1:AE99 01 -  -  -  	.db %00000001
  178 D1:AE9A 05 -  -  -  	.db 5
  179 D1:AE9B 00 -  -  -  	.db 0
  180 D1:AE9C 00 98 -  -  		.db $00,$98
  181 D1:AE9E 05 -  -  -  	.db 5
  182 D1:AE9F 01 -  -  -  	.db %00000001
  183 D1:AEA0 05 -  -  -  	.db 5
  184 D1:AEA1 00 -  -  -  	.db 0
  185 D1:AEA2 00 98 -  -  		.db $00,$98
  186 D1:AEA4 05 -  -  -  	.db 5
  187 D1:AEA5 01 -  -  -  	.db %00000001
  188 D1:AEA6 05 -  -  -  	.db 5
  189 D1:AEA7 00 -  -  -  	.db 0
  190 D1:AEA8 00 98 -  -  		.db $00,$98
  191 D1:AEAA 05 -  -  -  	.db 5
  192 D1:AEAB 01 -  -  -  	.db %00000001
  193 D1:AEAC 05 -  -  -  	.db 5
  194 D1:AEAD 00 -  -  -  	.db 0
  195 D1:AEAE 00 98 -  -  			.db $00,$98
  196 D1:AEB0 05 -  -  -  	.db 5
  197 D1:AEB1 01 -  -  -  	.db %00000001
  198 D1:AEB2 05 -  -  -  	.db 5
  199 D1:AEB3 00 -  -  -  	.db 0
  200 D1:AEB4 00 98 -  -  		.db $00,$98
  201 D1:AEB6 05 -  -  -  	.db 5
  202 D1:AEB7 01 -  -  -  	.db %00000001
  203 D1:AEB8 05 -  -  -  	.db 5
  204 D1:AEB9 00 -  -  -  	.db 0
  205 D1:AEBA 00 98 -  -  		.db $00,$98
  206 D1:AEBC 05 -  -  -  	.db 5
  207 D1:AEBD 01 -  -  -  	.db %00000001
  208 D1:AEBE 05 -  -  -  	.db 5
  209 D1:AEBF 00 -  -  -  	.db 0
  210 D1:AEC0 00 98 -  -  		.db $00,$98
  211 D1:AEC2 05 -  -  -  	.db 5
  212 D1:AEC3 01 -  -  -  	.db %00000001
  213 D1:AEC4 05 -  -  -  	.db 5
  214 D1:AEC5 00 -  -  -  	.db 0
  215 D1:AEC6 00 98 -  -  		.db $00,$98
  216 D1:AEC8 05 -  -  -  	.db 5
  217 D1:AEC9 01 -  -  -  	.db %00000001
  218 D1:AECA 05 -  -  -  	.db 5
  219 D1:AECB 00 -  -  -  	.db 0
  220 D1:AECC 00 98 -  -  			.db $00,$98
  221 D1:AECE 05 -  -  -  	.db 5
  222 D1:AECF 01 -  -  -  	.db %00000001
  223 D1:AED0 05 -  -  -  	.db 5
  224 D1:AED1 00 -  -  -  	.db 0
  225 D1:AED2 00 98 -  -  		.db $00,$98
  226 D1:AED4 05 -  -  -  	.db 5
  227 D1:AED5 01 -  -  -  	.db %00000001
  228 D1:AED6 05 -  -  -  	.db 5
  229 D1:AED7 00 -  -  -  	.db 0
  230 D1:AED8 00 98 -  -  		.db $00,$98
  231 D1:AEDA 05 -  -  -  	.db 5
  232 D1:AEDB 01 -  -  -  	.db %00000001
  233 D1:AEDC 05 -  -  -  	.db 5
  234 D1:AEDD 00 -  -  -  	.db 0
  235 D1:AEDE 00 98 -  -  		.db $00,$98
  236 D1:AEE0 05 -  -  -  	.db 5
  237 D1:AEE1 01 -  -  -  	.db %00000001
  238 D1:AEE2 05 -  -  -  	.db 5
  239 D1:AEE3 00 -  -  -  	.db 0
  240 D1:AEE4 00 40 -  -  	.db $00,$40
  241 D1:AEE6 05 -  -  -  	.db 5
  242 D1:AEE7 01 -  -  -  	.db %00000001
  243 D1:AEE8 05 -  -  -  	.db 5
  244 D1:AEE9 00 -  -  -  	.db 0
  245 D1:AEEA 00 40 -  -  	.db $00,$40
  246 D1:AEEC 05 -  -  -  	.db 5
  247 D1:AEED 01 -  -  -  	.db %00000001
  248 D1:AEEE 05 -  -  -  	.db 5
  249 D1:AEEF 00 -  -  -  	.db 0
  250 D1:AEF0 00 40 -  -  	.db $00,$40
  251 D1:AEF2 05 -  -  -  	.db 5
  252 D1:AEF3 01 -  -  -  	.db %00000001
  253 D1:AEF4 05 -  -  -  	.db 5
  254 D1:AEF5 00 -  -  -  	.db 0
  255 D1:AEF6 00 40 -  -  	.db $00,$40
  256 D1:AEF8 05 -  -  -  	.db 5
  257 D1:AEF9 01 -  -  -  	.db %00000001
  258 D1:AEFA 05 -  -  -  	.db 5
  259 D1:AEFB 00 -  -  -  	.db 0
  260 D1:AEFC 00 40 -  -  	.db $00,$40
  261 D1:AEFE 05 -  -  -  	.db 5
  262 D1:AEFF 01 -  -  -  	.db %00000001
  263 D1:AF00 05 -  -  -  	.db 5
  264 D1:AF01 00 -  -  -  	.db 0
  265 D1:AF02 -  -  -  -  	
  266 D1:AF02 00 40 -  -  		.db $00,$40
  267 D1:AF04 05 -  -  -  	.db 5
  268 D1:AF05 01 -  -  -  	.db %00000001
  269 D1:AF06 05 -  -  -  	.db 5
  270 D1:AF07 00 -  -  -  	.db 0
  271 D1:AF08 00 40 -  -  	.db $00,$40
  272 D1:AF0A 05 -  -  -  	.db 5
  273 D1:AF0B 01 -  -  -  	.db %00000001
  274 D1:AF0C 05 -  -  -  	.db 5
  275 D1:AF0D 00 -  -  -  	.db 0
  276 D1:AF0E 00 40 -  -  	.db $00,$40
  277 D1:AF10 05 -  -  -  	.db 5
  278 D1:AF11 01 -  -  -  	.db %00000001
  279 D1:AF12 05 -  -  -  	.db 5
  280 D1:AF13 00 -  -  -  	.db 0
  281 D1:AF14 00 40 -  -  	.db $00,$40
  282 D1:AF16 05 -  -  -  	.db 5
  283 D1:AF17 01 -  -  -  	.db %00000001
  284 D1:AF18 05 -  -  -  	.db 5
  285 D1:AF19 00 -  -  -  	.db 0
  286 D1:AF1A 00 40 -  -  	.db $00,$40
  287 D1:AF1C 05 -  -  -  	.db 5
  288 D1:AF1D 01 -  -  -  	.db %00000001
  289 D1:AF1E 05 -  -  -  	.db 5
  290 D1:AF1F 00 -  -  -  	.db 0
  291 D1:AF20 00 40 -  -  		.db $00,$40
  292 D1:AF22 05 -  -  -  	.db 5
  293 D1:AF23 01 -  -  -  	.db %00000001
  294 D1:AF24 05 -  -  -  	.db 5
  295 D1:AF25 00 -  -  -  	.db 0
  296 D1:AF26 00 40 -  -  	.db $00,$40
  297 D1:AF28 05 -  -  -  	.db 5
  298 D1:AF29 01 -  -  -  	.db %00000001
  299 D1:AF2A 05 -  -  -  	.db 5
  300 D1:AF2B 00 -  -  -  	.db 0
  301 D1:AF2C 00 40 -  -  	.db $00,$40
  302 D1:AF2E 05 -  -  -  	.db 5
  303 D1:AF2F 01 -  -  -  	.db %00000001
  304 D1:AF30 05 -  -  -  	.db 5
  305 D1:AF31 00 -  -  -  	.db 0
  306 D1:AF32 00 40 -  -  	.db $00,$40
  307 D1:AF34 05 -  -  -  	.db 5
  308 D1:AF35 01 -  -  -  	.db %00000001
  309 D1:AF36 05 -  -  -  	.db 5
  310 D1:AF37 00 -  -  -  	.db 0
  311 D1:AF38 00 40 -  -  	.db $00,$40
  312 D1:AF3A 05 -  -  -  	.db 5
  313 D1:AF3B 01 -  -  -  	.db %00000001
  314 D1:AF3C 05 -  -  -  	.db 5
  315 D1:AF3D 00 -  -  -  	.db 0
  316 D1:AF3E 00 40 -  -  		.db $00,$40
  317 D1:AF40 05 -  -  -  	.db 5
  318 D1:AF41 01 -  -  -  	.db %00000001
  319 D1:AF42 05 -  -  -  	.db 5
  320 D1:AF43 00 -  -  -  	.db 0
  321 D1:AF44 00 40 -  -  	.db $00,$40
  322 D1:AF46 05 -  -  -  	.db 5
  323 D1:AF47 01 -  -  -  	.db %00000001
  324 D1:AF48 05 -  -  -  	.db 5
  325 D1:AF49 00 -  -  -  	.db 0
  326 D1:AF4A 00 40 -  -  	.db $00,$40
  327 D1:AF4C 05 -  -  -  	.db 5
  328 D1:AF4D 01 -  -  -  	.db %00000001
  329 D1:AF4E 05 -  -  -  	.db 5
  330 D1:AF4F 00 -  -  -  	.db 0
  331 D1:AF50 00 40 -  -  	.db $00,$40
  332 D1:AF52 05 -  -  -  	.db 5
  333 D1:AF53 01 -  -  -  	.db %00000001
  334 D1:AF54 05 -  -  -  	.db 5
  335 D1:AF55 00 -  -  -  	.db 0
  336 D1:AF56 00 40 -  -  	.db $00,$40
  337 D1:AF58 05 -  -  -  	.db 5
  338 D1:AF59 01 -  -  -  	.db %00000001
  339 D1:AF5A 05 -  -  -  	.db 5
  340 D1:AF5B 00 -  -  -  	.db 0
  341 D1:AF5C 00 40 -  -  		.db $00,$40
  342 D1:AF5E 05 -  -  -  	.db 5
  343 D1:AF5F 01 -  -  -  	.db %00000001
  344 D1:AF60 05 -  -  -  	.db 5
  345 D1:AF61 00 -  -  -  	.db 0
  346 D1:AF62 00 40 -  -  	.db $00,$40
  347 D1:AF64 05 -  -  -  	.db 5
  348 D1:AF65 01 -  -  -  	.db %00000001
  349 D1:AF66 05 -  -  -  	.db 5
  350 D1:AF67 00 -  -  -  	.db 0
  351 D1:AF68 00 40 -  -  	.db $00,$40
  352 D1:AF6A 05 -  -  -  	.db 5
  353 D1:AF6B 01 -  -  -  	.db %00000001
  354 D1:AF6C 05 -  -  -  	.db 5
  355 D1:AF6D 00 -  -  -  	.db 0
  356 D1:AF6E 00 40 -  -  	.db $00,$40
  357 D1:AF70 05 -  -  -  	.db 5
  358 D1:AF71 01 -  -  -  	.db %00000001
  359 D1:AF72 05 -  -  -  	.db 5
  360 D1:AF73 00 -  -  -  	.db 0
  361 D1:AF74 00 40 -  -  	.db $00,$40
  362 D1:AF76 05 -  -  -  	.db 5
  363 D1:AF77 01 -  -  -  	.db %00000001
  364 D1:AF78 05 -  -  -  	.db 5
  365 D1:AF79 00 -  -  -  	.db 0
  366 D1:AF7A -  -  -  -  	
  367 D1:AF7A -  -  -  -  	
  368 D1:AF7A -  -  -  -  	
  369 D1:AF7A -  -  -  -  	
  370 D1:AF7A -  -  -  -  	
  371 D1:AF7A -  -  -  -  	
  372 D1:AF7A 00 84 -  -  	.db $00,$84
  373 D1:AF7C 0A -  -  -  	.db 10
  374 D1:AF7D 80 -  -  -  	.db %10000000
  375 D1:AF7E 05 -  -  -  	.db 5
  376 D1:AF7F 00 -  -  -  	.db 0
  377 D1:AF80 -  -  -  -  
  378 D1:AF80 -  -  -  -  
  379 D1:AF80 -  -  -  -  	;.dl $000081
  380 D1:AF80 -  -  -  -  	;.db 10,%00001111
  381 D1:AF80 -  -  -  -  	;.db 5,0
  382 D1:AF80 -  -  -  -  		
  383 D1:AF80 00 00 00 00 
              00 -  -  -  	.db 0,0,0,0,0
Listing for file "ascent.asm"
  232 D1:AF85 -  -  -  -  #include "spriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteDecompress.txt"
    1 D1:AF85 -  -  -  -  
    2 D1:AF85 -  -  -  -  
    3 D1:AF85 -  -  -  -  ;hl = sprite data start, de = main data decompress location de' = loops/line data location
    4 D1:AF85 -  -  -  -  slow_sprite_decompress:
    5 D1:AF85 -  -  -  -  
    6 D1:AF85 3E D2 -  -  	ld a,%11010010;jp nc 
    7 D1:AF87 32 62 B0 D1 	ld (sdcomp_end_reached_flag),a;reset end reached flag
    8 D1:AF8B 3E 00 -  -  	ld a,0
    9 D1:AF8D 32 72 B0 D1 	ld (sdcomp_loop_counter) ,a;reset loop counter
   10 D1:AF91 CD 7E B4 D1 	call sdcomp_reset_noalpha
   11 D1:AF95 -  -  -  -  ;set bpc mode 
   12 D1:AF95 CB 7E -  -  	bit 7,(hl)
   13 D1:AF97 C4 2A B3 D1 	call nz,sdcomp_set_4bpp 
   14 D1:AF9B CB 76 -  -  	bit 6,(hl)
   15 D1:AF9D C4 7D B3 D1 	call nz,sdcomp_set_3bpp 
   16 D1:AFA1 CB 6E -  -  	bit 5,(hl)
   17 D1:AFA3 C4 CE B3 D1 	call nz,sdcomp_set_2bpp 
   18 D1:AFA7 CB 66 -  -  	bit 4,(hl)
   19 D1:AFA9 C4 17 B4 D1 	call nz,sdcomp_set_1bpp 
   20 D1:AFAD CB 5E -  -  	bit 3,(hl)
   21 D1:AFAF C4 56 B4 D1 	call nz,sdcomp_set_0bpp 
   22 D1:AFB3 CB 56 -  -  	bit 2,(hl)
   23 D1:AFB5 C4 6D B4 D1 	call nz,sdcomp_set_noalpha
   24 D1:AFB9 23 -  -  -  	inc hl
   25 D1:AFBA -  -  -  -  	
   26 D1:AFBA -  -  -  -  	
   27 D1:AFBA -  -  -  -  ;set zeroes btwn lines
   28 D1:AFBA 7E -  -  -  	ld a,(hl);width,in px
   29 D1:AFBB E5 -  -  -  	push hl 
   30 D1:AFBC 21 40 01 00 	ld hl,320
   31 D1:AFC0 01 00 00 00 	ld bc,0
   32 D1:AFC4 4F -  -  -  	ld c,a 
   33 D1:AFC5 37 -  -  -  	scf 
   34 D1:AFC6 3F -  -  -  	ccf 
   35 D1:AFC7 ED 42 -  -  	sbc hl,bc;320 - width
   36 D1:AFC9 22 A4 B1 D1 	ld (sdcomp_zeroes_between_lines),hl
   37 D1:AFCD E1 -  -  -  	pop hl 
   38 D1:AFCE 47 -  -  -  	ld b,a;width
   39 D1:AFCF 08 -  -  -  	ex af,af' ;'
   40 D1:AFD0 78 -  -  -  	ld a,b
   41 D1:AFD1 32 D3 B1 D1 	ld (sdcomp_sprite_width),a
   42 D1:AFD5 08 -  -  -  	ex af,af' ;'
   43 D1:AFD6 -  -  -  -  
   44 D1:AFD6 -  -  -  -  
   45 D1:AFD6 23 -  -  -  	inc hl;to height
   46 D1:AFD7 7E -  -  -  	ld a,(hl);height
   47 D1:AFD8 32 92 B1 D1 	ld (sdcomp_lines_remaining),a;load remaining lines
   48 D1:AFDC 12 -  -  -  	ld (de),a;height
   49 D1:AFDD 13 -  -  -  	inc de
   50 D1:AFDE D5 -  -  -  	push de;loop/line data start 
   51 D1:AFDF D9 -  -  -  	exx;to shadow
   52 D1:AFE0 D1 -  -  -  	pop de ;de' is loop/line data
   53 D1:AFE1 D9 -  -  -  	exx
   54 D1:AFE2 -  -  -  -  
   55 D1:AFE2 -  -  -  -  ;find start of color data
   56 D1:AFE2 23 -  -  -  	inc hl;alpha data start
   57 D1:AFE3 E5 -  -  -  	push hl
   58 D1:AFE4 -  -  -  -  	
   59 D1:AFE4 37 -  -  -  	scf
   60 D1:AFE5 -  -  -  -  sdcomp_no_alpha_1 .equ $
   61 D1:AFE5 D2 FE AF D1 	jp nc, sdcomp_no_alpha_1_skip
   62 D1:AFE9 E5 -  -  -  	push hl
   63 D1:AFEA 67 -  -  -  	ld h,a;height
   64 D1:AFEB 68 -  -  -  	ld l,b;width
   65 D1:AFEC ED 6C -  -  	mlt hl;number of pixels
   66 D1:AFEE 2B -  -  -  	dec hl
   67 D1:AFEF CB 3C -  -  	srl h
   68 D1:AFF1 CB 1D -  -  	rr l
   69 D1:AFF3 CB 3C -  -  	srl h
   70 D1:AFF5 CB 1D -  -  	rr l 
   71 D1:AFF7 CB 3C -  -  	srl h 
   72 D1:AFF9 CB 1D -  -  	rr l ;divide by 8
   73 D1:AFFB 23 -  -  -  	inc hl 
   74 D1:AFFC C1 -  -  -  	pop bc
   75 D1:AFFD 09 -  -  -  	add hl,bc;hl holds start of color data
   76 D1:AFFE -  -  -  -  sdcomp_no_alpha_1_skip:
   77 D1:AFFE -  -  -  -  
   78 D1:AFFE -  -  -  -  	;HL POINTING TO COLOR DATA
   79 D1:AFFE -  -  -  -  
   80 D1:AFFE -  -  -  -  	
   81 D1:AFFE F5 -  -  -  	push af;save height
   82 D1:AFFF -  -  -  -  	
   83 D1:AFFF 37 -  -  -  	scf 
   84 D1:B000 -  -  -  -  sdcomp_get_indexed_color_1bpc .equ $ 
   85 D1:B000 DA 0A B0 D1 	jp c,sdcomp_get_indexed_color_1bpc_skip
   86 D1:B004 7E -  -  -  	ld a,(hl);color data 
   87 D1:B005 32 50 B2 D1 	ld (sdcomp_indexed_color_data),a 
   88 D1:B009 23 -  -  -  	inc hl 
   89 D1:B00A -  -  -  -  sdcomp_get_indexed_color_1bpc_skip:
   90 D1:B00A -  -  -  -  
   91 D1:B00A 37 -  -  -  	scf 
   92 D1:B00B -  -  -  -  sdcomp_get_indexed_color_2bpc .equ $ 
   93 D1:B00B DA 15 B0 D1 	jp c,sdcomp_get_indexed_color_2bpc_skip
   94 D1:B00F 7E -  -  -  	ld a,(hl);color data 
   95 D1:B010 32 51 B2 D1 	ld (sdcomp_indexed_color_data+1),a 
   96 D1:B014 23 -  -  -  	inc hl 
   97 D1:B015 -  -  -  -  sdcomp_get_indexed_color_2bpc_skip:
   98 D1:B015 -  -  -  -  
   99 D1:B015 37 -  -  -  	scf 
  100 D1:B016 -  -  -  -  sdcomp_get_indexed_color_3bpc .equ $ 
  101 D1:B016 DA 26 B0 D1 	jp c,sdcomp_get_indexed_color_3bpc_skip
  102 D1:B01A 7E -  -  -  	ld a,(hl);color data 
  103 D1:B01B 32 52 B2 D1 	ld (sdcomp_indexed_color_data+2),a 
  104 D1:B01F 23 -  -  -  	inc hl 
  105 D1:B020 7E -  -  -  	ld a,(hl);color data 
  106 D1:B021 32 53 B2 D1 	ld (sdcomp_indexed_color_data+3),a 
  107 D1:B025 23 -  -  -  	inc hl 
  108 D1:B026 -  -  -  -  sdcomp_get_indexed_color_3bpc_skip:
  109 D1:B026 -  -  -  -  
  110 D1:B026 F1 -  -  -  	pop af
  111 D1:B027 EB -  -  -  	ex de,hl
  112 D1:B028 01 00 00 00 	ld bc,0
  113 D1:B02C 4F -  -  -  	ld c,a;height 
  114 D1:B02D 09 -  -  -  	add hl,bc
  115 D1:B02E EB -  -  -  	ex de,hl;de points to data write location
  116 D1:B02F -  -  -  -  	
  117 D1:B02F -  -  -  -  	
  118 D1:B02F D9 -  -  -  	exx;to shadow 
  119 D1:B030 E1 -  -  -  	pop hl;alpha data	
  120 D1:B031 -  -  -  -  
  121 D1:B031 -  -  -  -  	;HL IS POINTING TO ALPHA DATA
  122 D1:B031 0E 80 -  -  	ld c,%10000000;alpha mask
  123 D1:B033 D9 -  -  -  	exx;out 
  124 D1:B034 0E 80 -  -  	ld c,%10000000;color mask
  125 D1:B036 -  -  -  -  	
  126 D1:B036 -  -  -  -  	
  127 D1:B036 -  -  -  -  	
  128 D1:B036 37 -  -  -  	scf 
  129 D1:B037 -  -  -  -  sdcomp_flip_1 .equ $
  130 D1:B037 DA 57 B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  131 D1:B03B -  -  -  -  
  132 D1:B03B D9 -  -  -  	exx;to shadow 
  133 D1:B03C 2B -  -  -  	dec hl;dec alpha pointer
  134 D1:B03D 22 71 B2 D1 	ld (sdcomp_alpha_data_line_end_byte),hl 
  135 D1:B041 3E 01 -  -  	ld a,%00000001;alpha mask
  136 D1:B043 32 75 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a 
  137 D1:B047 D9 -  -  -  	exx ;out 
  138 D1:B048 2B -  -  -  	dec hl;dec color pointer
  139 D1:B049 22 6A B2 D1 	ld (sdcomp_color_data_line_end_byte),hl 
  140 D1:B04D 3E 01 -  -  	ld a,%00000001;color mask
  141 D1:B04F 32 6E B2 D1 	ld (sdcomp_color_data_line_end_mask),a 
  142 D1:B053 -  -  -  -  	
  143 D1:B053 -  -  -  -  
  144 D1:B053 -  -  -  -  	
  145 D1:B053 -  -  -  -  	
  146 D1:B053 CD 69 B2 D1 	call sdcomp_traverse_line_data	
  147 D1:B057 -  -  -  -  
  148 D1:B057 -  -  -  -  ;START OF LOOP
  149 D1:B057 -  -  -  -  ;add amount to get from ending pixels to first nonzero pair
  150 D1:B057 -  -  -  -  sdcomp_find_gap_length:
  151 D1:B057 -  -  -  -  
  152 D1:B057 D9 -  -  -  	exx ;toshadow
  153 D1:B058 06 00 -  -  	ld b,0;pairs found, always < 255 
  154 D1:B05A -  -  -  -  sdcomp_add_1_gap_length .equ $
  155 D1:B05A 00 -  -  -  	nop
  156 D1:B05B 3E 00 -  -  	ld a,0;nop
  157 D1:B05D 32 5A B0 D1 	ld (sdcomp_add_1_gap_length),a
  158 D1:B061 -  -  -  -  sdcomp_find_gap_length_loop:
  159 D1:B061 -  -  -  -  	
  160 D1:B061 37 -  -  -  	scf 
  161 D1:B062 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  162 D1:B062 D2 62 B2 D1 	jp nc,sdcomp_end
  163 D1:B066 -  -  -  -  
  164 D1:B066 CD 3F B1 D1 	call sdcomp_get_next_alpha_pair
  165 D1:B06A -  -  -  -  	;a holds alpha data 
  166 D1:B06A 04 -  -  -  	inc b
  167 D1:B06B B7 -  -  -  	or a 
  168 D1:B06C CA 61 B0 D1 	jp z,sdcomp_find_gap_length_loop
  169 D1:B070 -  -  -  -  	;END OF LOOP, B HOLDS NUMBER OF 00 PAIRS  +1
  170 D1:B070 -  -  -  -  		
  171 D1:B070 -  -  -  -  	
  172 D1:B070 F5 -  -  -  	push af;saves leading pixel alpha data
  173 D1:B071 -  -  -  -  	;inc loop counter 
  174 D1:B071 -  -  -  -  sdcomp_loop_counter .equ $ + 1
  175 D1:B071 3E 00 -  -  	ld a,0;inc number of loops
  176 D1:B073 3C -  -  -  	inc a 
  177 D1:B074 32 72 B0 D1 	ld (sdcomp_loop_counter),a
  178 D1:B078 -  -  -  -  	
  179 D1:B078 78 -  -  -  	ld a,b 
  180 D1:B079 D9 -  -  -  	exx;out of shadow 
  181 D1:B07A 12 -  -  -  	ld (de),a;GAP LENGTH 
  182 D1:B07B 13 -  -  -  	inc de 
  183 D1:B07C D9 -  -  -  	exx;into shadow 	
  184 D1:B07D -  -  -  -  	
  185 D1:B07D F1 -  -  -  	pop af
  186 D1:B07E 37 -  -  -  	scf
  187 D1:B07F -  -  -  -  sdcomp_fast_sprite_1 .equ $ 
  188 D1:B07F D2 B2 B0 D1 	jp nc,sdcomp_ldir_start ;jp c if fast move to ldir loop 
  189 D1:B083 -  -  -  -  
  190 D1:B083 -  -  -  -  ;LEADING PIXELS
  191 D1:B083 -  -  -  -  	;a holds alpha data after gap, 11 01 10
  192 D1:B083 D9 -  -  -  	exx;out of shadow
  193 D1:B084 D5 -  -  -  	push de 
  194 D1:B085 -  -  -  -  	
  195 D1:B085 47 -  -  -  	ld b,a;save for later
  196 D1:B086 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  197 D1:B088 3E 00 -  -  	ld a,0
  198 D1:B08A 16 FF -  -  	ld d,%11111111;assuming no colors 
  199 D1:B08C CA 96 B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  200 D1:B090 -  -  -  -  	;has first color
  201 D1:B090 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  202 D1:B092 CD 5D B2 D1 	call sdcomp_get_next_color_ending_nibble
  203 D1:B096 -  -  -  -  sdcomp_leading_pixel_first_skip:
  204 D1:B096 -  -  -  -  	;a is either $00 or $0color1
  205 D1:B096 -  -  -  -  	
  206 D1:B096 1E FF -  -  	ld e,%11111111;assuming no colors
  207 D1:B098 -  -  -  -  	
  208 D1:B098 CB 40 -  -  	bit 0,b;check second pixel alpha
  209 D1:B09A 47 -  -  -  	ld b,a;save for later 
  210 D1:B09B 3E 00 -  -  	ld a,0
  211 D1:B09D CA A7 B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  212 D1:B0A1 -  -  -  -  	;has second color 
  213 D1:B0A1 CD 54 B2 D1 	call sdcomp_get_next_color_leading_nibble
  214 D1:B0A5 -  -  -  -  	;a = color2 0 
  215 D1:B0A5 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  216 D1:B0A7 -  -  -  -  	
  217 D1:B0A7 -  -  -  -  sdcomp_leading_pixel_second_skip:
  218 D1:B0A7 -  -  -  -  	;a is either 00 or c2 0 
  219 D1:B0A7 -  -  -  -  	;b is either 00 or 0 c1 
  220 D1:B0A7 B0 -  -  -  	or b 
  221 D1:B0A8 47 -  -  -  	ld b,a;final color data
  222 D1:B0A9 7A -  -  -  	ld a,d 
  223 D1:B0AA A3 -  -  -  	and e ;final mask data 
  224 D1:B0AB -  -  -  -  	
  225 D1:B0AB D1 -  -  -  	pop de;return to pointer 
  226 D1:B0AC -  -  -  -  	
  227 D1:B0AC 12 -  -  -  	ld (de),a;write mask data 
  228 D1:B0AD 13 -  -  -  	inc de 
  229 D1:B0AE 78 -  -  -  	ld a,b;color data 
  230 D1:B0AF 12 -  -  -  	ld (de),a;write color data 
  231 D1:B0B0 13 -  -  -  	inc de 
  232 D1:B0B1 D9 -  -  -  	exx;into shadow 
  233 D1:B0B2 -  -  -  -  	
  234 D1:B0B2 -  -  -  -  sdcomp_ldir_start:
  235 D1:B0B2 -  -  -  -  ;CHECK FOR LDIR 
  236 D1:B0B2 06 00 -  -  	ld b,0;pairs found 
  237 D1:B0B4 -  -  -  -  sdcomp_ldir_loop:
  238 D1:B0B4 CD 3F B1 D1 	call sdcomp_get_next_alpha_pair
  239 D1:B0B8 04 -  -  -  	inc b
  240 D1:B0B9 EE FF -  -  	xor %11111111;flip bits
  241 D1:B0BB CA B4 B0 D1 	jp z,sdcomp_ldir_loop;alpha data was 11
  242 D1:B0BF -  -  -  -  	;b holds pairs found+1
  243 D1:B0BF -  -  -  -  	
  244 D1:B0BF 37 -  -  -  	scf 
  245 D1:B0C0 -  -  -  -  sdcomp_fast_sprite_2 .equ $
  246 D1:B0C0 D2 DD B0 D1 	jp nc,sdcomp_ldir_write
  247 D1:B0C4 -  -  -  -  	;fast mode 
  248 D1:B0C4 -  -  -  -  	;b holds ldir length 
  249 D1:B0C4 -  -  -  -  	
  250 D1:B0C4 -  -  -  -  sdcomp_ldir_not_fast:
  251 D1:B0C4 EE FF -  -  	xor %11111111;flip back
  252 D1:B0C6 -  -  -  -  	;a holds first non 11 pair 
  253 D1:B0C6 05 -  -  -  	dec b ;b holds pairs found
  254 D1:B0C7 CA EC B0 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  255 D1:B0CB B7 -  -  -  	or a
  256 D1:B0CC C2 DD B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  257 D1:B0D0 -  -  -  -  	;ends in 00,ending pixels will be 11 
  258 D1:B0D0 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  259 D1:B0D0 3E 04 -  -  	ld a,%00000100;inc b 
  260 D1:B0D2 32 5A B0 D1 	ld (sdcomp_add_1_gap_length),a 
  261 D1:B0D6 3E FF -  -  	ld a,$ff;ending pixels 11
  262 D1:B0D8 -  -  -  -  	
  263 D1:B0D8 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  264 D1:B0D9 CA EC B0 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  265 D1:B0DD -  -  -  -  	;b holds ldir length 
  266 D1:B0DD -  -  -  -  	
  267 D1:B0DD -  -  -  -  ;b holds ldir length, a holds ending pixels
  268 D1:B0DD -  -  -  -  sdcomp_ldir_write:
  269 D1:B0DD F5 -  -  -  	push af;save ending pixels
  270 D1:B0DE 78 -  -  -  	ld a,b
  271 D1:B0DF D9 -  -  -  	exx ;out 
  272 D1:B0E0 12 -  -  -  	ld (de),a;write ldir length
  273 D1:B0E1 13 -  -  -  	inc de 
  274 D1:B0E2 CD 2B B1 D1 	call sdcomp_write_ldir_data_loop
  275 D1:B0E6 D9 -  -  -  	exx ;toshadow
  276 D1:B0E7 F1 -  -  -  	pop af;return ending pixels
  277 D1:B0E8 -  -  -  -  	
  278 D1:B0E8 -  -  -  -  	
  279 D1:B0E8 C3 F4 B0 D1 	jp sdcomp_write_end_pixels
  280 D1:B0EC -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  281 D1:B0EC F5 -  -  -  	push af;save end pixels
  282 D1:B0ED -  -  -  -  	
  283 D1:B0ED D9 -  -  -  	exx;out of shadow
  284 D1:B0EE 3E 00 -  -  	ld a,0
  285 D1:B0F0 12 -  -  -  	ld (de),a 
  286 D1:B0F1 13 -  -  -  	inc de 
  287 D1:B0F2 D9 -  -  -  	exx 
  288 D1:B0F3 F1 -  -  -  	pop af;return ending pixels
  289 D1:B0F4 -  -  -  -  
  290 D1:B0F4 -  -  -  -  
  291 D1:B0F4 -  -  -  -  ;WRITE ENDING PIXELS 
  292 D1:B0F4 -  -  -  -  
  293 D1:B0F4 -  -  -  -  sdcomp_write_end_pixels:;a holds end pixels
  294 D1:B0F4 -  -  -  -  	
  295 D1:B0F4 D9 -  -  -  	exx;out of shadow
  296 D1:B0F5 -  -  -  -  	
  297 D1:B0F5 37 -  -  -  	scf 
  298 D1:B0F6 -  -  -  -  sdcomp_fast_sprite_3 .equ $
  299 D1:B0F6 D2 57 B0 D1 	jp nc,sdcomp_find_gap_length;if fast, back to gap length
  300 D1:B0FA -  -  -  -  	
  301 D1:B0FA -  -  -  -  	
  302 D1:B0FA D5 -  -  -  	push de 
  303 D1:B0FB -  -  -  -  	
  304 D1:B0FB 47 -  -  -  	ld b,a;save for later
  305 D1:B0FC CB 67 -  -  	bit 4,a ;check if first pixel has color 
  306 D1:B0FE 3E 00 -  -  	ld a,0
  307 D1:B100 16 FF -  -  	ld d,%11111111;assuming no colors 
  308 D1:B102 CA 0C B1 D1 	jp z,sdcomp_ending_pixel_first_skip
  309 D1:B106 -  -  -  -  	;has first color
  310 D1:B106 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  311 D1:B108 CD 5D B2 D1 	call sdcomp_get_next_color_ending_nibble
  312 D1:B10C -  -  -  -  sdcomp_ending_pixel_first_skip:
  313 D1:B10C -  -  -  -  	;a is either $00 or $0color1
  314 D1:B10C -  -  -  -  	
  315 D1:B10C 1E FF -  -  	ld e,%11111111;assuming no colors
  316 D1:B10E -  -  -  -  	
  317 D1:B10E CB 40 -  -  	bit 0,b;check second pixel alpha
  318 D1:B110 47 -  -  -  	ld b,a;save for later 
  319 D1:B111 3E 00 -  -  	ld a,0
  320 D1:B113 CA 1D B1 D1 	jp z,sdcomp_ending_pixel_second_skip;
  321 D1:B117 -  -  -  -  	;has second color 
  322 D1:B117 CD 54 B2 D1 	call sdcomp_get_next_color_leading_nibble
  323 D1:B11B -  -  -  -  	;a = color2 0 
  324 D1:B11B 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  325 D1:B11D -  -  -  -  	
  326 D1:B11D -  -  -  -  sdcomp_ending_pixel_second_skip:
  327 D1:B11D -  -  -  -  	;a is either 00 or c2 0 
  328 D1:B11D -  -  -  -  	;b is either 00 or 0 c1 
  329 D1:B11D B0 -  -  -  	or b 
  330 D1:B11E 47 -  -  -  	ld b,a;final color data
  331 D1:B11F 7A -  -  -  	ld a,d 
  332 D1:B120 A3 -  -  -  	and e ;final mask data 
  333 D1:B121 -  -  -  -  	
  334 D1:B121 D1 -  -  -  	pop de;return to pointer 
  335 D1:B122 -  -  -  -  	
  336 D1:B122 12 -  -  -  	ld (de),a;write mask data 
  337 D1:B123 13 -  -  -  	inc de 
  338 D1:B124 78 -  -  -  	ld a,b;color data 
  339 D1:B125 12 -  -  -  	ld (de),a;write color data 
  340 D1:B126 13 -  -  -  	inc de 
  341 D1:B127 -  -  -  -  	
  342 D1:B127 -  -  -  -  	
  343 D1:B127 C3 57 B0 D1 	jp sdcomp_find_gap_length;BACK TO START
  344 D1:B12B -  -  -  -  	
  345 D1:B12B -  -  -  -  	
  346 D1:B12B -  -  -  -  
  347 D1:B12B -  -  -  -  
  348 D1:B12B -  -  -  -  
  349 D1:B12B -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  350 D1:B12B -  -  -  -  sdcomp_write_ldir_data_loop:
  351 D1:B12B CD 5D B2 D1 	call sdcomp_get_next_color_ending_nibble	
  352 D1:B12F 47 -  -  -  	ld b,a;first pixel
  353 D1:B130 CD 54 B2 D1 	call sdcomp_get_next_color_leading_nibble
  354 D1:B134 B0 -  -  -  	or b
  355 D1:B135 -  -  -  -  	
  356 D1:B135 -  -  -  -  	
  357 D1:B135 12 -  -  -  	ld (de),a;write color data
  358 D1:B136 13 -  -  -  	inc de
  359 D1:B137 D9 -  -  -  	exx;to shadow
  360 D1:B138 05 -  -  -  	dec b;ldir length counter
  361 D1:B139 D9 -  -  -  	exx
  362 D1:B13A C2 2B B1 D1 	jp nz,sdcomp_write_ldir_data_loop
  363 D1:B13E C9 -  -  -  	ret
  364 D1:B13F -  -  -  -  	
  365 D1:B13F -  -  -  -  	
  366 D1:B13F -  -  -  -  	
  367 D1:B13F -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  368 D1:B13F -  -  -  -  sdcomp_get_next_alpha_pair:
  369 D1:B13F CD 68 B1 D1 	call sdcomp_get_next_alpha_bit
  370 D1:B143 B7 -  -  -  	or a 
  371 D1:B144 CA 4E B1 D1 	jp z,sdcomp_get_next_alpha_pair0
  372 D1:B148 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  373 D1:B14A C3 50 B1 D1 	jp sdcomp_get_next_alpha_pair1
  374 D1:B14E -  -  -  -  sdcomp_get_next_alpha_pair0:
  375 D1:B14E 3E 00 -  -  	ld a,0
  376 D1:B150 -  -  -  -  sdcomp_get_next_alpha_pair1:
  377 D1:B150 32 66 B1 D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  378 D1:B154 -  -  -  -  	
  379 D1:B154 CD 68 B1 D1 	call sdcomp_get_next_alpha_bit
  380 D1:B158 B7 -  -  -  	or a 
  381 D1:B159 CA 63 B1 D1 	jp z,sdcomp_get_next_alpha_pair2
  382 D1:B15D 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  383 D1:B15F C3 65 B1 D1 	jp sdcomp_get_next_alpha_pair3
  384 D1:B163 -  -  -  -  sdcomp_get_next_alpha_pair2:
  385 D1:B163 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  386 D1:B165 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  387 D1:B165 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  388 D1:B165 F6 00 -  -  	or 0;AND WITH FIRST BIT 
  389 D1:B167 -  -  -  -  	
  390 D1:B167 C9 -  -  -  	ret 
  391 D1:B168 -  -  -  -  
  392 D1:B168 -  -  -  -  
  393 D1:B168 -  -  -  -  ;in shadow
  394 D1:B168 -  -  -  -  sdcomp_get_next_alpha_bit:
  395 D1:B168 -  -  -  -  	
  396 D1:B168 37 -  -  -  	scf
  397 D1:B169 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  398 D1:B169 DA 76 B1 D1 	jp c,sdcomp_bit_offset_skip
  399 D1:B16D 3E DA -  -  	ld a,%11011010;jp c 
  400 D1:B16F 32 69 B1 D1 	ld (sdcomp_bit_offset),a
  401 D1:B173 3E 00 -  -  	ld a,0
  402 D1:B175 C9 -  -  -  	ret ;return 0 first bit
  403 D1:B176 -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  404 D1:B176 -  -  -  -  	;CHECKS IF OUTSIDE OF SPRITE,VIRTUAL 0s
  405 D1:B176 08 -  -  -  	ex af,af' ;'
  406 D1:B177 B7 -  -  -  	or a
  407 D1:B178 CA AF B1 D1 	jp z,sdcomp_line_end
  408 D1:B17C 08 -  -  -  	ex af,af' ;'
  409 D1:B17D -  -  -  -  
  410 D1:B17D -  -  -  -  	;LOAD NEXT BIT
  411 D1:B17D -  -  -  -  	
  412 D1:B17D 7E -  -  -  	ld a,(hl)
  413 D1:B17E A1 -  -  -  	and c 
  414 D1:B17F CD D8 B1 D1 	call sdcomp_next_in_bitstream;incs bitstream
  415 D1:B183 -  -  -  -  	
  416 D1:B183 37 -  -  -  	scf 
  417 D1:B184 -  -  -  -  sdcomp_no_alpha_2 .equ $
  418 D1:B184 DA 8A B1 D1 	jp c,sdcomp_no_alpha_skip
  419 D1:B188 3E 01 -  -  	ld a,1
  420 D1:B18A -  -  -  -  sdcomp_no_alpha_skip:
  421 D1:B18A -  -  -  -  	
  422 D1:B18A -  -  -  -  	
  423 D1:B18A -  -  -  -  	;DEC WIDTH COUNTER
  424 D1:B18A 08 -  -  -  	ex af,af' ;';to shadow
  425 D1:B18B 3D -  -  -  	dec a;dec width counter
  426 D1:B18C C2 AD B1 D1 	jp nz,sdcomp_setup_line_gap_skip
  427 D1:B190 -  -  -  -  	
  428 D1:B190 -  -  -  -  	;END OF LINE REACHED, have just read alpha last bit of line
  429 D1:B190 -  -  -  -  	
  430 D1:B190 -  -  -  -  	;AT LINE END,WRITE LOOPS/LINE DATA
  431 D1:B190 F5 -  -  -  	push af;push shadow a 
  432 D1:B191 -  -  -  -  	;DEC NUMBER LINES REMAINING
  433 D1:B191 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  434 D1:B191 3E 00 -  -  	ld a,0
  435 D1:B193 3D -  -  -  	dec a 
  436 D1:B194 32 92 B1 D1 	ld (sdcomp_lines_remaining),a
  437 D1:B198 C2 A2 B1 D1 	jp nz,sdcomp_set_end_flag_skip
  438 D1:B19C -  -  -  -  	;end of last line reached 
  439 D1:B19C 3E DA -  -  	ld a,%11011010;jp c
  440 D1:B19E 32 62 B0 D1 	ld (sdcomp_end_reached_flag) , a
  441 D1:B1A2 -  -  -  -  sdcomp_set_end_flag_skip:
  442 D1:B1A2 -  -  -  -  	;SET UP NUMBER OF VIRTUAL ZEROES
  443 D1:B1A2 E5 -  -  -  	push hl
  444 D1:B1A3 -  -  -  -  sdcomp_zeroes_between_lines .equ $ + 1 
  445 D1:B1A3 21 00 00 00 	ld hl,0;320-width
  446 D1:B1A7 22 B2 B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  447 D1:B1AB E1 -  -  -  	pop hl
  448 D1:B1AC F1 -  -  -  	pop af 
  449 D1:B1AD -  -  -  -  	
  450 D1:B1AD -  -  -  -  	
  451 D1:B1AD -  -  -  -  sdcomp_setup_line_gap_skip:
  452 D1:B1AD 08 -  -  -  	ex af,af' ;';out of shadow
  453 D1:B1AE C9 -  -  -  	ret;A HOLDS 0 OR NOT 0
  454 D1:B1AF -  -  -  -  	
  455 D1:B1AF -  -  -  -  	
  456 D1:B1AF -  -  -  -  	;IF OUTSIDE OF SPRITE,RETURN VIRTUAL 0
  457 D1:B1AF -  -  -  -  sdcomp_line_end:
  458 D1:B1AF 08 -  -  -  	ex af,af' ;';out of shadow keep a' at 0 until next line start reached 
  459 D1:B1B0 E5 -  -  -  	push hl
  460 D1:B1B1 -  -  -  -  	;DEC REMAINING ZEROES
  461 D1:B1B1 -  -  -  -  sdcomp_remaining_zeroes_between_lines .equ $ + 1 
  462 D1:B1B1 21 00 00 00 	ld hl,0;320 - width 
  463 D1:B1B5 2B -  -  -  	dec hl
  464 D1:B1B6 22 B2 B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  465 D1:B1BA 7D -  -  -  	ld a,l
  466 D1:B1BB B4 -  -  -  	or h
  467 D1:B1BC E1 -  -  -  	pop hl
  468 D1:B1BD CA C4 B1 D1 	jp z,sdcomp_line_gap_end;IF END OF VIRTUAL ZEROES
  469 D1:B1C1 3E 00 -  -  	ld a,0
  470 D1:B1C3 C9 -  -  -  	ret;return 0
  471 D1:B1C4 -  -  -  -  	
  472 D1:B1C4 -  -  -  -  sdcomp_line_gap_end:
  473 D1:B1C4 -  -  -  -  	
  474 D1:B1C4 3A 72 B0 D1 	ld a,(sdcomp_loop_counter)
  475 D1:B1C8 12 -  -  -  	ld (de),a;write loops per line data
  476 D1:B1C9 13 -  -  -  	inc de
  477 D1:B1CA D9 -  -  -  	exx;out
  478 D1:B1CB -  -  -  -  
  479 D1:B1CB 37 -  -  -  	scf
  480 D1:B1CC -  -  -  -  sdcomp_flip_7 .equ $ ;call c 
  481 D1:B1CC D4 69 B2 D1 	call nc,sdcomp_traverse_line_data
  482 D1:B1D0 -  -  -  -  
  483 D1:B1D0 D9 -  -  -  	exx ;in
  484 D1:B1D1 -  -  -  -  	
  485 D1:B1D1 08 -  -  -  	ex af,af' ;';to shadow
  486 D1:B1D2 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  487 D1:B1D2 3E 00 -  -  	ld a,0;ld shadow a with width
  488 D1:B1D4 08 -  -  -  	ex af,af' ;';out of shadow
  489 D1:B1D5 3E 00 -  -  	ld a,0;ret 0
  490 D1:B1D7 C9 -  -  -  	ret
  491 D1:B1D8 -  -  -  -  
  492 D1:B1D8 -  -  -  -  
  493 D1:B1D8 -  -  -  -  
  494 D1:B1D8 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
  495 D1:B1D8 -  -  -  -  sdcomp_next_in_bitstream:
  496 D1:B1D8 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
  497 D1:B1D8 CB 09 -  -  	rrc c;rlc flip
  498 D1:B1DA D0 -  -  -  	ret nc
  499 D1:B1DB -  -  -  -  sdcomp_flip_bitstream_2 .equ $
  500 D1:B1DB 23 -  -  -  	inc hl;dec hl flip
  501 D1:B1DC C9 -  -  -  	ret
  502 D1:B1DD -  -  -  -  
  503 D1:B1DD -  -  -  -  
  504 D1:B1DD -  -  -  -  
  505 D1:B1DD -  -  -  -  
  506 D1:B1DD -  -  -  -  
  507 D1:B1DD -  -  -  -  
  508 D1:B1DD -  -  -  -  ;bit orders
  509 D1:B1DD -  -  -  -  ;	noflip   flip 
  510 D1:B1DD -  -  -  -  ;4bpp 3210 	 0123
  511 D1:B1DD -  -  -  -  ;3bpp 210	 012
  512 D1:B1DD -  -  -  -  ;2bpp 10	 01
  513 D1:B1DD -  -  -  -  ;1bpp 0		 0
  514 D1:B1DD -  -  -  -  
  515 D1:B1DD -  -  -  -  
  516 D1:B1DD -  -  -  -  ;not in shadow,returns a=0000color
  517 D1:B1DD -  -  -  -  sdcomp_get_color_data:
  518 D1:B1DD D5 -  -  -  	push de 
  519 D1:B1DE 1E 00 -  -  	ld e,0
  520 D1:B1E0 -  -  -  -  	
  521 D1:B1E0 37 -  -  -  	scf
  522 D1:B1E1 -  -  -  -  sdcomp_0bpc .equ $ 
  523 D1:B1E1 D2 2B B2 D1 	jp nc,sdcomp_get_color_from_index
  524 D1:B1E5 -  -  -  -  	
  525 D1:B1E5 7E -  -  -  	ld a,(hl)
  526 D1:B1E6 A1 -  -  -  	and c 
  527 D1:B1E7 CD D8 B1 D1 	call sdcomp_next_in_bitstream
  528 D1:B1EB B7 -  -  -  	or a
  529 D1:B1EC CA F2 B1 D1 	jp z,sdcomp_get_color_data_set_skip_1
  530 D1:B1F0 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  531 D1:B1F0 CB C3 -  -  	set 0,e 
  532 D1:B1F2 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  533 D1:B1F2 -  -  -  -  	
  534 D1:B1F2 37 -  -  -  	scf
  535 D1:B1F3 -  -  -  -  sdcomp_1bpc .equ $
  536 D1:B1F3 D2 2B B2 D1 	jp nc,sdcomp_get_color_from_index
  537 D1:B1F7 -  -  -  -  	
  538 D1:B1F7 -  -  -  -  	
  539 D1:B1F7 7E -  -  -  	ld a,(hl)
  540 D1:B1F8 A1 -  -  -  	and c 
  541 D1:B1F9 CD D8 B1 D1 	call sdcomp_next_in_bitstream
  542 D1:B1FD B7 -  -  -  	or a
  543 D1:B1FE CA 04 B2 D1 	jp z,sdcomp_get_color_data_set_skip_2
  544 D1:B202 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  545 D1:B202 CB CB -  -  	set 1,e 
  546 D1:B204 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  547 D1:B204 -  -  -  -  	
  548 D1:B204 37 -  -  -  	scf
  549 D1:B205 -  -  -  -  sdcomp_2bpc .equ $
  550 D1:B205 D2 2B B2 D1 	jp nc,sdcomp_get_color_from_index
  551 D1:B209 -  -  -  -  	
  552 D1:B209 7E -  -  -  	ld a,(hl)
  553 D1:B20A A1 -  -  -  	and c 
  554 D1:B20B CD D8 B1 D1 	call sdcomp_next_in_bitstream
  555 D1:B20F B7 -  -  -  	or a
  556 D1:B210 CA 16 B2 D1 	jp z,sdcomp_get_color_data_set_skip_3
  557 D1:B214 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  558 D1:B214 CB D3 -  -  	set 2,e 
  559 D1:B216 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  560 D1:B216 -  -  -  -  	
  561 D1:B216 37 -  -  -  	scf
  562 D1:B217 -  -  -  -  sdcomp_3bpc .equ $
  563 D1:B217 D2 2B B2 D1 	jp nc,sdcomp_get_color_from_index	
  564 D1:B21B -  -  -  -  
  565 D1:B21B 7E -  -  -  	ld a,(hl)
  566 D1:B21C A1 -  -  -  	and c 
  567 D1:B21D CD D8 B1 D1 	call sdcomp_next_in_bitstream
  568 D1:B221 B7 -  -  -  	or a
  569 D1:B222 CA 28 B2 D1 	jp z,sdcomp_get_color_data_set_skip_4
  570 D1:B226 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  571 D1:B226 CB DB -  -  	set 3,e 
  572 D1:B228 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  573 D1:B228 -  -  -  -  ;4bpp, interpret as color data 
  574 D1:B228 7B -  -  -  	ld a,e 
  575 D1:B229 D1 -  -  -  	pop de 
  576 D1:B22A C9 -  -  -  	ret 
  577 D1:B22B -  -  -  -  
  578 D1:B22B -  -  -  -  sdcomp_get_color_from_index:
  579 D1:B22B E5 -  -  -  	push hl 
  580 D1:B22C C5 -  -  -  	push bc 
  581 D1:B22D 01 00 00 00 	ld bc,0
  582 D1:B231 21 50 B2 D1 	ld hl,sdcomp_indexed_color_data
  583 D1:B235 4B -  -  -  	ld c,e ;index number
  584 D1:B236 CB 39 -  -  	srl c;div by 2
  585 D1:B238 09 -  -  -  	add hl,bc;add index
  586 D1:B239 7E -  -  -  	ld a,(hl)
  587 D1:B23A CB 43 -  -  	bit 0,e;check lsb
  588 D1:B23C CA 46 B2 D1 	jp z,sdcomp_get_color_from_index_and_msn
  589 D1:B240 E6 0F -  -  	and %00001111;a holds 0000color
  590 D1:B242 C1 -  -  -  	pop bc 
  591 D1:B243 E1 -  -  -  	pop hl 
  592 D1:B244 D1 -  -  -  	pop de 
  593 D1:B245 C9 -  -  -  	ret 
  594 D1:B246 -  -  -  -  	
  595 D1:B246 -  -  -  -  sdcomp_get_color_from_index_and_msn:
  596 D1:B246 E6 F0 -  -  	and %11110000
  597 D1:B248 0F -  -  -  	rrca 
  598 D1:B249 0F -  -  -  	rrca 
  599 D1:B24A 0F -  -  -  	rrca 
  600 D1:B24B 0F -  -  -  	rrca ;a holds 0000colro
  601 D1:B24C C1 -  -  -  	pop bc 
  602 D1:B24D E1 -  -  -  	pop hl 
  603 D1:B24E D1 -  -  -  	pop de 
  604 D1:B24F C9 -  -  -  	ret
  605 D1:B250 -  -  -  -  	
  606 D1:B250 -  -  -  -  sdcomp_indexed_color_data:;4bpc
  607 D1:B250 00 00 00 00 	.db 0,0,0,0
  608 D1:B254 -  -  -  -  
  609 D1:B254 -  -  -  -  
  610 D1:B254 -  -  -  -  
  611 D1:B254 -  -  -  -  
  612 D1:B254 -  -  -  -  
  613 D1:B254 -  -  -  -  ;not in shadow, returns a = color0000
  614 D1:B254 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  615 D1:B254 CD DD B1 D1 	call sdcomp_get_color_data
  616 D1:B258 0F -  -  -  	rrca 
  617 D1:B259 0F -  -  -  	rrca 
  618 D1:B25A 0F -  -  -  	rrca 
  619 D1:B25B 0F -  -  -  	rrca
  620 D1:B25C C9 -  -  -  	ret 
  621 D1:B25D -  -  -  -  
  622 D1:B25D -  -  -  -  
  623 D1:B25D -  -  -  -  ;not in shadow, returns a = 0000color
  624 D1:B25D -  -  -  -  sdcomp_get_next_color_ending_nibble:
  625 D1:B25D CD DD B1 D1 	call sdcomp_get_color_data
  626 D1:B261 C9 -  -  -  	ret
  627 D1:B262 -  -  -  -  
  628 D1:B262 -  -  -  -  sdcomp_end:
  629 D1:B262 -  -  -  -  	;write final loop/line data
  630 D1:B262 3A 72 B0 D1 	ld a,(sdcomp_loop_counter)
  631 D1:B266 12 -  -  -  	ld (de),a;write loops per line data
  632 D1:B267 13 -  -  -  	inc de
  633 D1:B268 C9 -  -  -  	ret 
  634 D1:B269 -  -  -  -  
  635 D1:B269 -  -  -  -  
  636 D1:B269 -  -  -  -  
  637 D1:B269 -  -  -  -  
  638 D1:B269 -  -  -  -  
  639 D1:B269 -  -  -  -  
  640 D1:B269 -  -  -  -  
  641 D1:B269 -  -  -  -  ;not in shadow ,destroys a
  642 D1:B269 -  -  -  -  sdcomp_traverse_line_data:
  643 D1:B269 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  644 D1:B269 21 00 00 00 	ld hl,0
  645 D1:B26D -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  646 D1:B26D 0E 00 -  -  	ld c,0
  647 D1:B26F D9 -  -  -  	exx;toshadow 
  648 D1:B270 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  649 D1:B270 21 00 00 00 	ld hl,0
  650 D1:B274 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  651 D1:B274 0E 00 -  -  	ld c,0
  652 D1:B276 D5 -  -  -  	push de
  653 D1:B277 3A D3 B1 D1 	ld a,(sdcomp_sprite_width)
  654 D1:B27B 5F -  -  -  	ld e,a
  655 D1:B27C -  -  -  -  sdcomp_traverse_line_data_loop:
  656 D1:B27C CB 09 -  -  	rrc c 
  657 D1:B27E D2 83 B2 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip
  658 D1:B282 23 -  -  -  	inc hl
  659 D1:B283 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  660 D1:B283 7E -  -  -  	ld a,(hl)
  661 D1:B284 A1 -  -  -  	and c
  662 D1:B285 -  -  -  -  sdcomp_no_alpha_3 .equ $
  663 D1:B285 CA 9B B2 D1 	jp z,sdcomp_traverse_line_data_color_skip;jp c for no alpha
  664 D1:B289 D9 -  -  -  	exx;out of shadow 
  665 D1:B28A -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  666 D1:B28A CB 09 -  -  	rrc c ;rotate mask
  667 D1:B28C -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  668 D1:B28C CB 09 -  -  	rrc c ;rrc a for 1bpc
  669 D1:B28E -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  670 D1:B28E CB 09 -  -  	rrc c;rrc a for 2bpc
  671 D1:B290 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  672 D1:B290 CB 09 -  -  	rrc c
  673 D1:B292 -  -  -  -  	
  674 D1:B292 79 -  -  -  	ld a,c
  675 D1:B293 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  676 D1:B293 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000
  677 D1:B295 CA 9A B2 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  678 D1:B299 23 -  -  -  	inc hl
  679 D1:B29A -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  680 D1:B29A D9 -  -  -  	exx ;toshadow
  681 D1:B29B -  -  -  -  sdcomp_traverse_line_data_color_skip:
  682 D1:B29B 1D -  -  -  	dec e
  683 D1:B29C C2 7C B2 D1 	jp nz,sdcomp_traverse_line_data_loop
  684 D1:B2A0 D1 -  -  -  	pop de  
  685 D1:B2A1 22 71 B2 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  686 D1:B2A5 79 -  -  -  	ld a,c
  687 D1:B2A6 32 75 B2 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  688 D1:B2AA D9 -  -  -  	exx ;out
  689 D1:B2AB 22 6A B2 D1 	ld (sdcomp_color_data_line_end_byte),hl
  690 D1:B2AF 79 -  -  -  	ld a,c 
  691 D1:B2B0 32 6E B2 D1 	ld (sdcomp_color_data_line_end_mask),a
  692 D1:B2B4 C9 -  -  -  	ret
  693 D1:B2B5 -  -  -  -  
  694 D1:B2B5 -  -  -  -  
  695 D1:B2B5 -  -  -  -  
  696 D1:B2B5 -  -  -  -  sdcomp_set_flip:
  697 D1:B2B5 3E D2 -  -  	ld a,%11010010;jp nc 
  698 D1:B2B7 32 37 B0 D1 	ld (sdcomp_flip_1),a 
  699 D1:B2BB -  -  -  -   
  700 D1:B2BB 3E DC -  -  	ld a,%11011100;call c 
  701 D1:B2BD 32 CC B1 D1 	ld (sdcomp_flip_7),a
  702 D1:B2C1 -  -  -  -  	
  703 D1:B2C1 3E 01 -  -  	ld a,%00000001;rlc 
  704 D1:B2C3 32 D9 B1 D1 	ld (sdcomp_flip_bitstream),a
  705 D1:B2C7 3E 2B -  -  	ld a,%00101011;dec hl
  706 D1:B2C9 32 DB B1 D1 	ld (sdcomp_flip_bitstream_2),a
  707 D1:B2CD -  -  -  -  	
  708 D1:B2CD -  -  -  -  	
  709 D1:B2CD -  -  -  -  	;set reverse color reading
  710 D1:B2CD 3E C3 -  -  	ld a,%11000011;set 0,e
  711 D1:B2CF 32 F1 B1 D1 	ld (sdcomp_color_bit_0),a 
  712 D1:B2D3 3E CB -  -  	ld a,%11001011;set 1,e
  713 D1:B2D5 32 03 B2 D1 	ld (sdcomp_color_bit_1),a 
  714 D1:B2D9 3E D3 -  -  	ld a,%11010011;set 2,e
  715 D1:B2DB 32 15 B2 D1 	ld (sdcomp_color_bit_2),a 
  716 D1:B2DF 3E DB -  -  	ld a,%11011011;set 3,e
  717 D1:B2E1 32 27 B2 D1 	ld (sdcomp_color_bit_3),a 
  718 D1:B2E5 -  -  -  -  	
  719 D1:B2E5 3E D8 -  -  	ld a,%11011000;ret c 
  720 D1:B2E7 32 63 B3 D1 	ld (sdcomp_flip_4),a
  721 D1:B2EB 32 BA B3 D1 	ld (sdcomp_flip_5),a
  722 D1:B2EF 32 09 B4 D1 	ld (sdcomp_flip_6),a
  723 D1:B2F3 32 4E B4 D1 	ld (sdcomp_flip_8),a
  724 D1:B2F7 -  -  -  -  	
  725 D1:B2F7 C9 -  -  -  	ret 
  726 D1:B2F8 -  -  -  -  	
  727 D1:B2F8 -  -  -  -  	
  728 D1:B2F8 -  -  -  -  sdcomp_reset_flip:
  729 D1:B2F8 3E DA -  -  	ld a,%11011010;jp c 
  730 D1:B2FA 32 37 B0 D1 	ld (sdcomp_flip_1),a 
  731 D1:B2FE -  -  -  -  
  732 D1:B2FE 3E D4 -  -  	ld a,%11010100;call nc 
  733 D1:B300 32 CC B1 D1 	ld (sdcomp_flip_7),a
  734 D1:B304 -  -  -  -  	
  735 D1:B304 3E 09 -  -  	ld a,%00001001;rrc 
  736 D1:B306 32 D9 B1 D1 	ld (sdcomp_flip_bitstream),a
  737 D1:B30A 3E 23 -  -  	ld a,%00100011;inc hl
  738 D1:B30C 32 DB B1 D1 	ld (sdcomp_flip_bitstream_2),a
  739 D1:B310 -  -  -  -  	
  740 D1:B310 -  -  -  -  	
  741 D1:B310 3E D0 -  -  	ld a,%11010000;ret nc 
  742 D1:B312 32 63 B3 D1 	ld (sdcomp_flip_4),a
  743 D1:B316 32 BA B3 D1 	ld (sdcomp_flip_5),a
  744 D1:B31A 32 09 B4 D1 	ld (sdcomp_flip_6),a
  745 D1:B31E 32 4E B4 D1 	ld (sdcomp_flip_8),a
  746 D1:B322 -  -  -  -  	
  747 D1:B322 -  -  -  -  	
  748 D1:B322 C9 -  -  -  	ret 
  749 D1:B323 -  -  -  -  
  750 D1:B323 -  -  -  -  
  751 D1:B323 -  -  -  -  
  752 D1:B323 -  -  -  -  sdcomp_set_offset:
  753 D1:B323 3E D2 -  -  	ld a,%11010010;jp nc 
  754 D1:B325 32 69 B1 D1 	ld (sdcomp_bit_offset),a
  755 D1:B329 C9 -  -  -  	ret
  756 D1:B32A -  -  -  -  
  757 D1:B32A -  -  -  -  
  758 D1:B32A -  -  -  -  
  759 D1:B32A -  -  -  -  
  760 D1:B32A -  -  -  -  ;0,1,2,3,4bpp modes
  761 D1:B32A -  -  -  -  ;destroys a 
  762 D1:B32A -  -  -  -  sdcomp_set_4bpp:
  763 D1:B32A 3E D2 -  -  	ld a,%11010010;jp nc
  764 D1:B32C 32 E1 B1 D1 	ld (sdcomp_0bpc),a
  765 D1:B330 32 F3 B1 D1 	ld (sdcomp_1bpc),a
  766 D1:B334 32 05 B2 D1 	ld (sdcomp_2bpc),a
  767 D1:B338 32 17 B2 D1 	ld (sdcomp_3bpc),a
  768 D1:B33C -  -  -  -  	
  769 D1:B33C -  -  -  -  	
  770 D1:B33C -  -  -  -  ;traverse data 
  771 D1:B33C 3E 09 -  -  	ld a,%00001001;rrc c
  772 D1:B33E 32 8B B2 D1 	ld (sdcomp_traverse_1bpp),a
  773 D1:B342 32 8D B2 D1 	ld (sdcomp_traverse_2bpp),a
  774 D1:B346 32 8F B2 D1 	ld (sdcomp_traverse_3bpp),a
  775 D1:B34A 32 91 B2 D1 	ld (sdcomp_traverse_4bpp),a
  776 D1:B34E -  -  -  -  	
  777 D1:B34E 3E F0 -  -  	ld a,%11110000
  778 D1:B350 32 94 B2 D1 	ld (sdcomp_traverse_bit_check),a
  779 D1:B354 -  -  -  -  	
  780 D1:B354 -  -  -  -  ;setting indexed colors 
  781 D1:B354 3E DA -  -  	ld a,%11011010;jp c 
  782 D1:B356 32 00 B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  783 D1:B35A 32 0B B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  784 D1:B35E 32 16 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a
  785 D1:B362 -  -  -  -  	
  786 D1:B362 37 -  -  -  	scf 
  787 D1:B363 -  -  -  -  sdcomp_flip_4 .equ $
  788 D1:B363 D0 -  -  -  	ret nc 
  789 D1:B364 -  -  -  -  	;not flipped
  790 D1:B364 -  -  -  -  	
  791 D1:B364 3E DB -  -  	ld a,%11011011;set 3,e
  792 D1:B366 32 F1 B1 D1 	ld (sdcomp_color_bit_0),a 
  793 D1:B36A 3E D3 -  -  	ld a,%11010011;set 2,e
  794 D1:B36C 32 03 B2 D1 	ld (sdcomp_color_bit_1),a 
  795 D1:B370 3E CB -  -  	ld a,%11001011;set 1,e
  796 D1:B372 32 15 B2 D1 	ld (sdcomp_color_bit_2),a 
  797 D1:B376 3E C3 -  -  	ld a,%11000011;set 0,e
  798 D1:B378 32 27 B2 D1 	ld (sdcomp_color_bit_3),a 
  799 D1:B37C C9 -  -  -  	ret 
  800 D1:B37D -  -  -  -  	
  801 D1:B37D -  -  -  -  
  802 D1:B37D -  -  -  -  sdcomp_set_3bpp:
  803 D1:B37D 3E D2 -  -  	ld a,%11010010;jp nc
  804 D1:B37F 32 E1 B1 D1 	ld (sdcomp_0bpc),a
  805 D1:B383 32 F3 B1 D1 	ld (sdcomp_1bpc),a
  806 D1:B387 32 05 B2 D1 	ld (sdcomp_2bpc),a
  807 D1:B38B -  -  -  -  	
  808 D1:B38B 3E DA -  -  	ld a,%11011010;jp c 
  809 D1:B38D 32 17 B2 D1 	ld (sdcomp_3bpc),a
  810 D1:B391 -  -  -  -  	
  811 D1:B391 -  -  -  -  ;traverse data	
  812 D1:B391 3E 09 -  -  	ld a,%00001001;rrc c
  813 D1:B393 32 8B B2 D1 	ld (sdcomp_traverse_1bpp),a
  814 D1:B397 32 8D B2 D1 	ld (sdcomp_traverse_2bpp),a
  815 D1:B39B 32 8F B2 D1 	ld (sdcomp_traverse_3bpp),a
  816 D1:B39F 3E 0F -  -  	ld a,%00001111;rrc a
  817 D1:B3A1 32 91 B2 D1 	ld (sdcomp_traverse_4bpp),a
  818 D1:B3A5 -  -  -  -  	
  819 D1:B3A5 3E E0 -  -  	ld a,%11100000
  820 D1:B3A7 32 94 B2 D1 	ld (sdcomp_traverse_bit_check),a
  821 D1:B3AB -  -  -  -  	
  822 D1:B3AB -  -  -  -  ;setting indexed colors 
  823 D1:B3AB 3E D2 -  -  	ld a,%11010010;jp nc 
  824 D1:B3AD 32 00 B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  825 D1:B3B1 32 0B B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  826 D1:B3B5 32 16 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a
  827 D1:B3B9 -  -  -  -  	
  828 D1:B3B9 -  -  -  -  	
  829 D1:B3B9 -  -  -  -  	
  830 D1:B3B9 37 -  -  -  	scf 
  831 D1:B3BA -  -  -  -  sdcomp_flip_5 .equ $
  832 D1:B3BA D0 -  -  -  	ret nc 
  833 D1:B3BB -  -  -  -  	;not flipped
  834 D1:B3BB -  -  -  -  	
  835 D1:B3BB 3E D3 -  -  	ld a,%11010011;set 2,e
  836 D1:B3BD 32 F1 B1 D1 	ld (sdcomp_color_bit_0),a 
  837 D1:B3C1 3E CB -  -  	ld a,%11001011;set 1,e
  838 D1:B3C3 32 03 B2 D1 	ld (sdcomp_color_bit_1),a 
  839 D1:B3C7 3E C3 -  -  	ld a,%11000011;set 0,e
  840 D1:B3C9 32 15 B2 D1 	ld (sdcomp_color_bit_2),a 
  841 D1:B3CD -  -  -  -  
  842 D1:B3CD C9 -  -  -  	ret 
  843 D1:B3CE -  -  -  -  
  844 D1:B3CE -  -  -  -  sdcomp_set_2bpp:
  845 D1:B3CE 3E D2 -  -  	ld a,%11010010;jp nc
  846 D1:B3D0 32 E1 B1 D1 	ld (sdcomp_0bpc),a
  847 D1:B3D4 32 F3 B1 D1 	ld (sdcomp_1bpc),a
  848 D1:B3D8 -  -  -  -  	
  849 D1:B3D8 3E DA -  -  	ld a,%11011010;jp c 
  850 D1:B3DA 32 05 B2 D1 	ld (sdcomp_2bpc),a
  851 D1:B3DE -  -  -  -  	
  852 D1:B3DE -  -  -  -  ;traverse data	
  853 D1:B3DE 3E 09 -  -  	ld a,%00001001;rrc c
  854 D1:B3E0 32 8B B2 D1 	ld (sdcomp_traverse_1bpp),a
  855 D1:B3E4 32 8D B2 D1 	ld (sdcomp_traverse_2bpp),a
  856 D1:B3E8 3E 0F -  -  	ld a,%00001111;rrc a
  857 D1:B3EA 32 8F B2 D1 	ld (sdcomp_traverse_3bpp),a
  858 D1:B3EE 32 91 B2 D1 	ld (sdcomp_traverse_4bpp),a
  859 D1:B3F2 -  -  -  -  	
  860 D1:B3F2 3E C0 -  -  	ld a,%11000000 
  861 D1:B3F4 32 94 B2 D1 	ld (sdcomp_traverse_bit_check),a
  862 D1:B3F8 -  -  -  -  ;setting indexed colors 
  863 D1:B3F8 3E D2 -  -  	ld a,%11010010;jp nc 
  864 D1:B3FA 32 00 B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  865 D1:B3FE 32 0B B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  866 D1:B402 3E DA -  -  	ld a,%11011010;jp c 
  867 D1:B404 32 16 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  868 D1:B408 -  -  -  -  	
  869 D1:B408 37 -  -  -  	scf 
  870 D1:B409 -  -  -  -  sdcomp_flip_6 .equ $
  871 D1:B409 D0 -  -  -  	ret nc 
  872 D1:B40A -  -  -  -  	;not flipped
  873 D1:B40A -  -  -  -  	
  874 D1:B40A -  -  -  -  
  875 D1:B40A 3E CB -  -  	ld a,%11001011;set 1,e
  876 D1:B40C 32 F1 B1 D1 	ld (sdcomp_color_bit_0),a 
  877 D1:B410 3E C3 -  -  	ld a,%11000011;set 0,e
  878 D1:B412 32 03 B2 D1 	ld (sdcomp_color_bit_1),a 
  879 D1:B416 -  -  -  -  
  880 D1:B416 C9 -  -  -  	ret 
  881 D1:B417 -  -  -  -  
  882 D1:B417 -  -  -  -  
  883 D1:B417 -  -  -  -  
  884 D1:B417 -  -  -  -  sdcomp_set_1bpp:
  885 D1:B417 3E D2 -  -  	ld a,%11010010;jp nc
  886 D1:B419 32 E1 B1 D1 	ld (sdcomp_0bpc),a
  887 D1:B41D -  -  -  -  	
  888 D1:B41D 3E DA -  -  	ld a,%11011010;jp c 
  889 D1:B41F 32 F3 B1 D1 	ld (sdcomp_1bpc),a
  890 D1:B423 -  -  -  -  	
  891 D1:B423 -  -  -  -  ;traverse data	
  892 D1:B423 3E 09 -  -  	ld a,%00001001;rrc c
  893 D1:B425 32 8B B2 D1 	ld (sdcomp_traverse_1bpp),a
  894 D1:B429 3E 0F -  -  	ld a,%00001111;rrc a
  895 D1:B42B 32 8D B2 D1 	ld (sdcomp_traverse_2bpp),a
  896 D1:B42F 32 8F B2 D1 	ld (sdcomp_traverse_3bpp),a
  897 D1:B433 32 91 B2 D1 	ld (sdcomp_traverse_4bpp),a
  898 D1:B437 3E 80 -  -  	ld a,%10000000
  899 D1:B439 32 94 B2 D1 	ld (sdcomp_traverse_bit_check),a
  900 D1:B43D -  -  -  -  ;setting indexed colors 
  901 D1:B43D 3E D2 -  -  	ld a,%11010010;jp nc 
  902 D1:B43F 32 00 B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  903 D1:B443 3E DA -  -  	ld a,%11011010;jp c 
  904 D1:B445 32 0B B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  905 D1:B449 32 16 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  906 D1:B44D -  -  -  -  	
  907 D1:B44D -  -  -  -  
  908 D1:B44D 37 -  -  -  	scf 
  909 D1:B44E -  -  -  -  sdcomp_flip_8 .equ $
  910 D1:B44E D0 -  -  -  	ret nc 
  911 D1:B44F -  -  -  -  	;not flipped
  912 D1:B44F -  -  -  -  	
  913 D1:B44F -  -  -  -  
  914 D1:B44F 3E C3 -  -  	ld a,%11000011;set 0,e
  915 D1:B451 32 F1 B1 D1 	ld (sdcomp_color_bit_0),a 
  916 D1:B455 -  -  -  -  
  917 D1:B455 C9 -  -  -  	ret 
  918 D1:B456 -  -  -  -  	
  919 D1:B456 -  -  -  -  
  920 D1:B456 -  -  -  -  sdcomp_set_0bpp:
  921 D1:B456 3E DA -  -  	ld a,%11011010;jp c 
  922 D1:B458 32 E1 B1 D1 	ld (sdcomp_0bpc),a
  923 D1:B45C -  -  -  -  
  924 D1:B45C -  -  -  -  
  925 D1:B45C 3E D2 -  -  	ld a,%11010010;jp nc 
  926 D1:B45E 32 00 B0 D1 	ld (sdcomp_get_indexed_color_1bpc),a
  927 D1:B462 3E DA -  -  	ld a,%11011010;jp c 
  928 D1:B464 32 0B B0 D1 	ld (sdcomp_get_indexed_color_2bpc),a
  929 D1:B468 32 16 B0 D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  930 D1:B46C -  -  -  -  	
  931 D1:B46C C9 -  -  -  	ret 
  932 D1:B46D -  -  -  -  	
  933 D1:B46D -  -  -  -  sdcomp_set_noalpha:
  934 D1:B46D 3E DA -  -  	ld a,%11011010;jp c 
  935 D1:B46F 32 E5 AF D1 	ld (sdcomp_no_alpha_1),a 
  936 D1:B473 32 85 B2 D1 	ld (sdcomp_no_alpha_3),a 
  937 D1:B477 3E D2 -  -  	ld a,%11010010;jp nc 
  938 D1:B479 32 84 B1 D1 	ld (sdcomp_no_alpha_2),a 
  939 D1:B47D C9 -  -  -  	ret 
  940 D1:B47E -  -  -  -  	
  941 D1:B47E -  -  -  -  sdcomp_reset_noalpha:
  942 D1:B47E 3E DA -  -  	ld a,%11011010;jp c 
  943 D1:B480 32 84 B1 D1 	ld (sdcomp_no_alpha_2),a 
  944 D1:B484 3E D2 -  -  	ld a,%11010010;jp nc 
  945 D1:B486 32 E5 AF D1 	ld (sdcomp_no_alpha_1),a 
  946 D1:B48A 3E CA -  -  	ld a,%11001010;jp z
  947 D1:B48C 32 85 B2 D1 	ld (sdcomp_no_alpha_3),a 
  948 D1:B490 C9 -  -  -  	ret 
  949 D1:B491 -  -  -  -  
  950 D1:B491 -  -  -  -  
  951 D1:B491 -  -  -  -  sdcomp_set_fast_sprite:
  952 D1:B491 3E DA -  -  	ld a,%11011010;jp c 
  953 D1:B493 32 7F B0 D1 	ld (sdcomp_fast_sprite_1),a 
  954 D1:B497 32 C0 B0 D1 	ld (sdcomp_fast_sprite_2),a
  955 D1:B49B 32 F6 B0 D1 	ld (sdcomp_fast_sprite_3),a
  956 D1:B49F C9 -  -  -  	ret
  957 D1:B4A0 -  -  -  -  sdcomp_reset_fast_sprite:
  958 D1:B4A0 3E D2 -  -  	ld a,%11010010;jp nc
  959 D1:B4A2 32 7F B0 D1 	ld (sdcomp_fast_sprite_1),a 
  960 D1:B4A6 32 C0 B0 D1 	ld (sdcomp_fast_sprite_2),a
  961 D1:B4AA 32 F6 B0 D1 	ld (sdcomp_fast_sprite_3),a
  962 D1:B4AE C9 -  -  -  	ret
  963 D1:B4AF -  -  -  -  ;FIND GAP LENGTH
  964 D1:B4AF -  -  -  -  ;read bitsteam in pairs
  965 D1:B4AF -  -  -  -  ;gap length = number of full pairs found 
  966 D1:B4AF -  -  -  -  
  967 D1:B4AF -  -  -  -  ;STARTING PIXEL(S);have read either 11,01,10 in bitstream
  968 D1:B4AF -  -  -  -  ;write either both, start,or end pixel 
  969 D1:B4AF -  -  -  -  
  970 D1:B4AF -  -  -  -  ;LDIR
  971 D1:B4AF -  -  -  -  ;read number of pairs of 11 in bitstream 
  972 D1:B4AF -  -  -  -  ;if 0 move to ending pixels
  973 D1:B4AF -  -  -  -  ;if ends in 00, last full 11 pair will be ending pixels 
  974 D1:B4AF -  -  -  -  ;write ldir length 
  975 D1:B4AF -  -  -  -  ;if 0 move to next step
  976 D1:B4AF -  -  -  -  ;else write ldir data 
  977 D1:B4AF -  -  -  -  
  978 D1:B4AF -  -  -  -  
  979 D1:B4AF -  -  -  -  ;ENDING PIXEL(S)
  980 D1:B4AF -  -  -  -  ;00 if there is nothing after leading pixels 
  981 D1:B4AF -  -  -  -  ;11 10 01 otherwise
  982 D1:B4AF -  -  -  -  
  983 D1:B4AF -  -  -  -  ;BACK TO GAP LENGTH
  984 D1:B4AF -  -  -  -  
  985 D1:B4AF -  -  -  -  
  986 D1:B4AF -  -  -  -  
  987 D1:B4AF -  -  -  -  
  988 D1:B4AF -  -  -  -  
  989 D1:B4AF -  -  -  -  
  990 D1:B4AF -  -  -  -  
  991 D1:B4AF -  -  -  -  
  992 D1:B4AF -  -  -  -  
  993 D1:B4AF -  -  -  -  
  994 D1:B4AF -  -  -  -  
  995 D1:B4AF -  -  -  -  
  996 D1:B4AF -  -  -  -  
  997 D1:B4AF -  -  -  -  
  998 D1:B4AF -  -  -  -  
  999 D1:B4AF -  -  -  -  
 1000 D1:B4AF -  -  -  -  
 1001 D1:B4AF -  -  -  -  
 1002 D1:B4AF -  -  -  -  
 1003 D1:B4AF -  -  -  -  
 1004 D1:B4AF -  -  -  -  
 1005 D1:B4AF -  -  -  -  	
 1006 D1:B4AF -  -  -  -  	
 1007 D1:B4AF -  -  -  -  	
 1008 D1:B4AF -  -  -  -  	
Listing for file "ascent.asm"
