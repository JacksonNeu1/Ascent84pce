    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD 25 D0 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C CD EF B1 D1 	call sdcomp_set_offset
   26 D1:A8A0 21 8B B6 D1 	ld hl, Test_Sprite_9
   27 D1:A8A4 11 00 00 D4 	ld de,vRam 
   28 D1:A8A8 -  -  -  -  	
   29 D1:A8A8 CD AF AF D1 	call sprite_decompress
   30 D1:A8AC -  -  -  -  	
   31 D1:A8AC 21 00 00 D4 	ld hl,vRam
   32 D1:A8B0 11 00 05 D4 	ld de, vram+(160* 8)	
   33 D1:A8B4 -  -  -  -  	
   34 D1:A8B4 CD 24 AD D1 	call draw_slow_sprite_full
   35 D1:A8B8 -  -  -  -  	
   36 D1:A8B8 CD 43 AA D1 	call prgmpause
   37 D1:A8BC -  -  -  -  
   38 D1:A8BC -  -  -  -  ;	call decompress_calls
   39 D1:A8BC -  -  -  -  	
   40 D1:A8BC -  -  -  -  	;gen purp timers
   41 D1:A8BC -  -  -  -  		; 76543210	
   42 D1:A8BC 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   43 D1:A8BE 32 30 00 F2 	ld ($F20030),a
   44 D1:A8C2 -  -  -  -  	;	  fedcba98
   45 D1:A8C2 3E 02 -  -  	ld a,%00000010;count up
   46 D1:A8C4 32 31 00 F2 	ld ($F20031),a
   47 D1:A8C8 -  -  -  -  	
   48 D1:A8C8 21 00 2C D5 	ld hl,vRam + (160*240*2)
   49 D1:A8CC 22 54 AA D1 	ld (draw_buffer),hl
   50 D1:A8D0 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   51 D1:A8D4 22 10 00 E3 	ld (mpLcdBase),hl
   52 D1:A8D8 -  -  -  -  	
   53 D1:A8D8 21 00 00 00 	ld hl,0
   54 D1:A8DC 22 4E AA D1 	ld (cam_pos),hl
   55 D1:A8E0 -  -  -  -  
   56 D1:A8E0 CD 9F AB D1 	call setup_bg
   57 D1:A8E4 -  -  -  -  
   58 D1:A8E4 -  -  -  -  	;call draw_bg
   59 D1:A8E4 -  -  -  -  	
   60 D1:A8E4 -  -  -  -  	
   61 D1:A8E4 -  -  -  -  main_loop:
   62 D1:A8E4 -  -  -  -  	;clear timer
   63 D1:A8E4 3E 00 -  -  	ld a,0
   64 D1:A8E6 32 00 00 F2 	ld ($F20000),a;32768hz
   65 D1:A8EA 32 01 00 F2 	ld ($F20001),a;128hz
   66 D1:A8EE 32 02 00 F2 	ld ($F20002),a;0.5hz
   67 D1:A8F2 32 03 00 F2 	ld ($F20003),a
   68 D1:A8F6 -  -  -  -  	
   69 D1:A8F6 -  -  -  -  	;Instructions here 
   70 D1:A8F6 CD AF AA D1 	call draw_bg
   71 D1:A8FA -  -  -  -  	
   72 D1:A8FA CD 00 B2 D1 	call draw_mg
   73 D1:A8FE -  -  -  -  	
   74 D1:A8FE CD 4F B2 D1 	call draw_fg
   75 D1:A902 -  -  -  -  	
   76 D1:A902 21 00 00 00 	ld hl,0
   77 D1:A906 -  -  -  -  	
   78 D1:A906 -  -  -  -  	; for debug longest frame draw time
   79 D1:A906 3A 00 00 F2 	ld a,($F20000)
   80 D1:A90A 6F -  -  -  	ld l,a
   81 D1:A90B 3A 01 00 F2 	ld a,($F20001);128hz 
   82 D1:A90F 67 -  -  -  	ld h,a
   83 D1:A910 E5 -  -  -  	push hl
   84 D1:A911 ED 4B 5A AA 
              D1 -  -  -  	ld bc,(longestFrame)
   85 D1:A916 ED 42 -  -  	sbc hl,bc 
   86 D1:A918 DA 2A A9 D1 	jp c,longest_frame_skip
   87 D1:A91C -  -  -  -  	
   88 D1:A91C E1 -  -  -  	pop hl 
   89 D1:A91D E5 -  -  -  	push hl 
   90 D1:A91E 22 5A AA D1 	ld (longestFrame),hl 
   91 D1:A922 2A 4E AA D1 	ld hl,(cam_pos)
   92 D1:A926 22 5D AA D1 	ld (longestFramePos),hl
   93 D1:A92A -  -  -  -  longest_frame_skip:
   94 D1:A92A E1 -  -  -  	pop hl 
   95 D1:A92B -  -  -  -  	
   96 D1:A92B -  -  -  -  		
   97 D1:A92B 2A 63 AA D1 	ld hl,(frameCount)
   98 D1:A92F 23 -  -  -  	inc hl
   99 D1:A930 22 63 AA D1 	ld (frameCount),hl
  100 D1:A934 -  -  -  -  	
  101 D1:A934 -  -  -  -  	;swap draw buffers
  102 D1:A934 2A 10 00 E3 	ld hl,(mpLcdBase)
  103 D1:A938 ED 5B 54 AA 
              D1 -  -  -  	ld de,(draw_buffer)
  104 D1:A93D ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  105 D1:A942 22 54 AA D1 	ld (draw_buffer),hl
  106 D1:A946 -  -  -  -  	
  107 D1:A946 -  -  -  -  	;check if lcd has drawn first frame
  108 D1:A946 -  -  -  -  clock_check_loop:
  109 D1:A946 -  -  -  -  
  110 D1:A946 -  -  -  -  
  111 D1:A946 -  -  -  -  	;Sprite decompression will occur here
  112 D1:A946 -  -  -  -  
  113 D1:A946 3A 01 00 F2 	ld a,($F20001);128hz clock
  114 D1:A94A FE 03 -  -  	cp 3;check if reached 3 
  115 D1:A94C DA 46 A9 D1 	jp c,clock_check_loop
  116 D1:A950 -  -  -  -  	
  117 D1:A950 -  -  -  -  	;wait until finished drawing second frame
  118 D1:A950 -  -  -  -  
  119 D1:A950 -  -  -  -  clear_int:      
  120 D1:A950 21 28 00 E3     ld hl, mpLcdIcr
  121 D1:A954 CB D6 -  -      set 2, (hl)            ; clear interrupt
  122 D1:A956 21 20 00 E3     ld hl, mpLcdRis
  123 D1:A95A -  -  -  -  wait_int:
  124 D1:A95A CB 56 -  -      bit 2, (hl)
  125 D1:A95C 28 FC -  -      jr z, wait_int  
  126 D1:A95E -  -  -  -  
  127 D1:A95E -  -  -  -  
  128 D1:A95E 21 00 00 00 	ld hl,0
  129 D1:A962 -  -  -  -  	
  130 D1:A962 3A 02 00 F2 	ld a,($F20002)
  131 D1:A966 67 -  -  -  	ld h,a
  132 D1:A967 3A 01 00 F2 	ld a,($F20001)
  133 D1:A96B 6F -  -  -  	ld l,a
  134 D1:A96C ED 4B 60 AA 
              D1 -  -  -  	ld bc,(totalTime)
  135 D1:A971 09 -  -  -  	add hl,bc 
  136 D1:A972 22 60 AA D1 	ld (totalTime),hl 
  137 D1:A976 -  -  -  -  	
  138 D1:A976 -  -  -  -  	;Move cam
  139 D1:A976 2A 4E AA D1 	ld hl,(cam_pos)
  140 D1:A97A 23 -  -  -  	inc hl
  141 D1:A97B 23 -  -  -  	inc hl
  142 D1:A97C 23 -  -  -  	inc hl
  143 D1:A97D 23 -  -  -  	inc hl
  144 D1:A97E 23 -  -  -  	inc hl
  145 D1:A97F 23 -  -  -  	inc hl
  146 D1:A980 23 -  -  -  	inc hl
  147 D1:A981 23 -  -  -  	inc hl
  148 D1:A982 22 4E AA D1 	ld (cam_pos),hl
  149 D1:A986 01 EF 00 00 	ld bc,239
  150 D1:A98A 09 -  -  -  	add hl,bc 
  151 D1:A98B 7C -  -  -  	ld a,h ;msb 
  152 D1:A98C FE 23 -  -  	cp 35
  153 D1:A98E C2 E4 A8 D1 	jp nz,main_loop
  154 D1:A992 -  -  -  -  		
  155 D1:A992 -  -  -  -  	;print debug times 
  156 D1:A992 21 00 00 D4 	ld hl,vRam
  157 D1:A996 22 10 00 E3 	ld (mpLcdBase),hl
  158 D1:A99A CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  159 D1:A99E 3E 2D -  -  	ld	a,lcdBpp16
  160 D1:A9A0 32 18 00 E3 	ld (mpLcdCtrl),a
  161 D1:A9A4 -  -  -  -  	
  162 D1:A9A4 3E 00 -  -  	ld a,0
  163 D1:A9A6 32 95 05 D0 	ld (curRow),a
  164 D1:A9AA 32 96 05 D0 	ld (curCol),a
  165 D1:A9AE 2A 5A AA D1 	ld hl,(longestFrame)
  166 D1:A9B2 CD E0 1E 02 	call _DispHL
  167 D1:A9B6 3E 01 -  -  	ld a,1
  168 D1:A9B8 32 95 05 D0 	ld (curRow),a
  169 D1:A9BC 3E 00 -  -  	ld a,0
  170 D1:A9BE 32 96 05 D0 	ld (curCol),a
  171 D1:A9C2 2A 5D AA D1 	ld hl,(longestFramePos)
  172 D1:A9C6 CD E0 1E 02 	call _DispHL
  173 D1:A9CA 3E 02 -  -  	ld a,2
  174 D1:A9CC 32 95 05 D0 	ld (curRow),a
  175 D1:A9D0 3E 00 -  -  	ld a,0
  176 D1:A9D2 32 96 05 D0 	ld (curCol),a
  177 D1:A9D6 2A 60 AA D1 	ld hl,(totalTime)
  178 D1:A9DA CD E0 1E 02 	call _DispHL
  179 D1:A9DE 3E 03 -  -  	ld a,3
  180 D1:A9E0 32 95 05 D0 	ld (curRow),a
  181 D1:A9E4 3E 00 -  -  	ld a,0
  182 D1:A9E6 32 96 05 D0 	ld (curCol),a
  183 D1:A9EA 2A 63 AA D1 	ld hl,(frameCount)
  184 D1:A9EE CD E0 1E 02 	call _DispHL
  185 D1:A9F2 -  -  -  -  	
  186 D1:A9F2 CD 43 AA D1 	call prgmpause
  187 D1:A9F6 CD 43 AA D1 	call prgmpause
  188 D1:A9FA -  -  -  -  	
  189 D1:A9FA -  -  -  -  	
  190 D1:A9FA -  -  -  -  exit_prgm:
  191 D1:A9FA 21 00 00 D4 	ld hl,vRam
  192 D1:A9FE 22 10 00 E3 	ld (mpLcdBase),hl
  193 D1:AA02 CD 10 08 02 	call _ClrScrnFull
  194 D1:AA06 3E 2D -  -  	ld	a,lcdBpp16
  195 D1:AA08 32 18 00 E3 	ld	(mpLcdCtrl),a
  196 D1:AA0C CD 3C 1A 02 	call _DrawStatusBar
  197 D1:AA10 -  -  -  -  	
  198 D1:AA10 FB -  -  -  	ei				; reset screen back to normal
  199 D1:AA11 C9 -  -  -  	ret			; return to os
  200 D1:AA12 -  -  -  -  
  201 D1:AA12 -  -  -  -  
  202 D1:AA12 -  -  -  -  printHL:;=================REMOVE
  203 D1:AA12 E5 -  -  -  	push hl
  204 D1:AA13 21 00 00 D4 	ld hl,vRam
  205 D1:AA17 22 10 00 E3 	ld (mpLcdBase),hl
  206 D1:AA1B CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  207 D1:AA1F 3E 2D -  -  	ld	a,lcdBpp16
  208 D1:AA21 32 18 00 E3 	ld (mpLcdCtrl),a
  209 D1:AA25 E1 -  -  -  	pop hl
  210 D1:AA26 CD E0 1E 02 	call _DispHL
  211 D1:AA2A FB -  -  -  	ei
  212 D1:AA2B CD 8C 0D 02 	call _GetKey
  213 D1:AA2F F3 -  -  -  	di
  214 D1:AA30 C3 FA A9 D1 	jp exit_prgm
  215 D1:AA34 -  -  -  -  
  216 D1:AA34 -  -  -  -  
  217 D1:AA34 -  -  -  -  write_a_to_ram:
  218 D1:AA34 F5 -  -  -  	push af 
  219 D1:AA35 E5 -  -  -  	push hl 
  220 D1:AA36 -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  221 D1:AA36 21 00 10 D4 	ld hl, $d41000
  222 D1:AA3A 77 -  -  -  	ld (hl),a 
  223 D1:AA3B 23 -  -  -  	inc hl 
  224 D1:AA3C 22 37 AA D1 	ld (write_a_to_ram_addr),hl 
  225 D1:AA40 E1 -  -  -  	pop hl 
  226 D1:AA41 F1 -  -  -  	pop af 
  227 D1:AA42 C9 -  -  -  	ret 
  228 D1:AA43 -  -  -  -  
  229 D1:AA43 -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  230 D1:AA43 D5 -  -  -  	push de 
  231 D1:AA44 E5 -  -  -  	push hl 
  232 D1:AA45 FB -  -  -  	ei
  233 D1:AA46 CD 8C 0D 02 	call _GetKey
  234 D1:AA4A F3 -  -  -  	di
  235 D1:AA4B E1 -  -  -  	pop hl 
  236 D1:AA4C D1 -  -  -  	pop de 
  237 D1:AA4D C9 -  -  -  	ret
  238 D1:AA4E -  -  -  -  
  239 D1:AA4E -  -  -  -  cam_pos:;bottom of cam
  240 D1:AA4E 00 00 00 -  	.dl 0
  241 D1:AA51 -  -  -  -  bg_cam_pos:
  242 D1:AA51 00 00 00 -  	.dl 0
  243 D1:AA54 -  -  -  -  
  244 D1:AA54 -  -  -  -  
  245 D1:AA54 -  -  -  -  draw_buffer:
  246 D1:AA54 00 00 00 -  	.dl 0
  247 D1:AA57 -  -  -  -  BG_draw_buffer:;uppermost line of bg in vram
  248 D1:AA57 00 00 00 -  	.dl 0
  249 D1:AA5A -  -  -  -  BG_buffer .equ vram + (160*240)
  250 D1:AA5A -  -  -  -  
  251 D1:AA5A -  -  -  -  
  252 D1:AA5A -  -  -  -  longestFrame:
  253 D1:AA5A 00 00 00 -  	.dl 0
  254 D1:AA5D -  -  -  -  longestFramePos:
  255 D1:AA5D 00 00 00 -  	.dl 0
  256 D1:AA60 -  -  -  -  totalTime:
  257 D1:AA60 00 00 00 -  	.dl 0
  258 D1:AA63 -  -  -  -  frameCount:
  259 D1:AA63 00 00 00 -  	.dl 0
  260 D1:AA66 -  -  -  -  hasLagged:
  261 D1:AA66 00 00 00 -  	.dl 0
  262 D1:AA69 -  -  -  -  
  263 D1:AA69 -  -  -  -  
  264 D1:AA69 -  -  -  -  
  265 D1:AA69 -  -  -  -  
  266 D1:AA69 -  -  -  -  
  267 D1:AA69 -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA69 -  -  -  -  
    2 D1:AA69 -  -  -  -  
    3 D1:AA69 -  -  -  -  
    4 D1:AA69 -  -  -  -  time_test_start:
    5 D1:AA69 -  -  -  -  
    6 D1:AA69 -  -  -  -  		; 76543210	
    7 D1:AA69 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AA6B 32 30 00 F2 	ld ($F20030),a
    9 D1:AA6F -  -  -  -  	;	  fedcba98
   10 D1:AA6F 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AA71 32 31 00 F2 	ld ($F20031),a
   12 D1:AA75 3E 00 -  -  	ld a,0
   13 D1:AA77 32 00 00 F2 	ld ($F20000),a
   14 D1:AA7B 32 01 00 F2 	ld ($F20001),a
   15 D1:AA7F 32 02 00 F2 	ld ($F20002),a
   16 D1:AA83 32 03 00 F2 	ld ($F20003),a
   17 D1:AA87 -  -  -  -  	
   18 D1:AA87 21 2C 01 00 	ld hl,300
   19 D1:AA8B -  -  -  -  	
   20 D1:AA8B -  -  -  -  time_testing_loop:
   21 D1:AA8B E5 -  -  -  	push hl
   22 D1:AA8C 01 E8 03 00 	ld bc,1000
   23 D1:AA90 -  -  -  -  time_testing_loop_2:
   24 D1:AA90 C5 -  -  -  	push bc
   25 D1:AA91 -  -  -  -  	;instruction here
   26 D1:AA91 -  -  -  -  	
   27 D1:AA91 -  -  -  -  	
   28 D1:AA91 -  -  -  -  	;Instruction end
   29 D1:AA91 C1 -  -  -  	pop bc
   30 D1:AA92 0B -  -  -  	dec bc
   31 D1:AA93 79 -  -  -  	ld a,c
   32 D1:AA94 B0 -  -  -  	or b
   33 D1:AA95 C2 90 AA D1 	jp nz,time_testing_loop_2
   34 D1:AA99 E1 -  -  -  	pop hl
   35 D1:AA9A 2B -  -  -  	dec hl
   36 D1:AA9B 7D -  -  -  	ld a,l
   37 D1:AA9C B4 -  -  -  	or h
   38 D1:AA9D C2 8B AA D1 	jp nz,time_testing_loop
   39 D1:AAA1 -  -  -  -  	
   40 D1:AAA1 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AAA5 6F -  -  -  	ld l,a
   42 D1:AAA6 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AAAA 67 -  -  -  	ld h,a
   44 D1:AAAB C3 12 AA D1 	jp printHL;div by 128 for time
   45 D1:AAAF -  -  -  -  	
   46 D1:AAAF -  -  -  -  
   47 D1:AAAF -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AAAF -  -  -  -  
   49 D1:AAAF -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AAAF -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AAAF -  -  -  -  
   52 D1:AAAF -  -  -  -  
   53 D1:AAAF -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AAAF -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AAAF -  -  -  -  
   56 D1:AAAF -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AAAF -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AAAF -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AAAF -  -  -  -  ;.24 screens/frame
   60 D1:AAAF -  -  -  -  
   61 D1:AAAF -  -  -  -  
   62 D1:AAAF -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AAAF -  -  -  -  ;8.75RT 7.6clk
   64 D1:AAAF -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AAAF -  -  -  -  ;.446 screens/frame
   66 D1:AAAF -  -  -  -  
   67 D1:AAAF -  -  -  -  
   68 D1:AAAF -  -  -  -  
   69 D1:AAAF -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AAAF -  -  -  -  ;22.15RT,20.35clk
   71 D1:AAAF -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AAAF -  -  -  -  ;.78 screens/frame
   73 D1:AAAF -  -  -  -  
   74 D1:AAAF -  -  -  -  
   75 D1:AAAF -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AAAF -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AAAF -  -  -  -  ;.47 = FAST
   78 D1:AAAF -  -  -  -  
   79 D1:AAAF -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AAAF -  -  -  -  
   81 D1:AAAF -  -  -  -  
   82 D1:AAAF -  -  -  -  
   83 D1:AAAF -  -  -  -  
   84 D1:AAAF -  -  -  -  
   85 D1:AAAF -  -  -  -  
   86 D1:AAAF -  -  -  -  
   87 D1:AAAF -  -  -  -  
   88 D1:AAAF -  -  -  -  
Listing for file "ascent.asm"
  268 D1:AAAF -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AAAF -  -  -  -  
    2 D1:AAAF -  -  -  -  draw_bg:
    3 D1:AAAF CD E3 AA D1 	call move_bg
    4 D1:AAB3 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    5 D1:AAB7 ED 4B 57 AA 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
    6 D1:AABC 37 -  -  -  	scf 
    7 D1:AABD 3F -  -  -  	ccf 
    8 D1:AABE ED 42 -  -  	sbc hl,bc
    9 D1:AAC0 E5 -  -  -  	push hl 
   10 D1:AAC1 C1 -  -  -  	pop bc
   11 D1:AAC2 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   12 D1:AAC6 ED 5B 54 AA 
              D1 -  -  -  	ld de,(draw_buffer)
   13 D1:AACB ED B0 -  -  	ldir
   14 D1:AACD 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   15 D1:AAD1 01 00 96 D4 	ld bc,BG_buffer
   16 D1:AAD5 37 -  -  -  	scf 
   17 D1:AAD6 3F -  -  -  	ccf 
   18 D1:AAD7 ED 42 -  -  	sbc hl,bc
   19 D1:AAD9 C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   20 D1:AADA E5 -  -  -  	push hl 
   21 D1:AADB C1 -  -  -  	pop bc
   22 D1:AADC 21 00 96 D4 	ld hl,BG_buffer 
   23 D1:AAE0 ED B0 -  -  	ldir 
   24 D1:AAE2 C9 -  -  -  	ret 
   25 D1:AAE3 -  -  -  -  	
   26 D1:AAE3 -  -  -  -  move_bg:
   27 D1:AAE3 2A 4E AA D1 	ld hl,(cam_pos)
   28 D1:AAE7 CB 3C -  -  	srl h
   29 D1:AAE9 CB 1D -  -  	rr l
   30 D1:AAEB CB 3C -  -  	srl h
   31 D1:AAED CB 1D -  -  	rr l ;div by 4
   32 D1:AAEF -  -  -  -  	;hl holds bg cam pos 
   33 D1:AAEF 01 EF 00 00 	ld bc,239
   34 D1:AAF3 09 -  -  -  	add hl,bc;add 0 pos  
   35 D1:AAF4 ED 4B 51 AA 
              D1 -  -  -  	ld bc,(bg_cam_pos)
   36 D1:AAF9 ED 42 -  -  	sbc hl,bc 
   37 D1:AAFB C8 -  -  -  	ret z 
   38 D1:AAFC DA 08 AB D1 	jp c,move_bg_down
   39 D1:AB00 CD 59 AB D1 	call inc_bg
   40 D1:AB04 C3 E3 AA D1 	jp move_bg
   41 D1:AB08 -  -  -  -  move_bg_down:
   42 D1:AB08 CD 10 AB D1 	call dec_bg
   43 D1:AB0C C3 E3 AA D1 	jp move_bg
   44 D1:AB10 -  -  -  -  
   45 D1:AB10 -  -  -  -  
   46 D1:AB10 -  -  -  -  dec_bg:;move cam down
   47 D1:AB10 -  -  -  -  	;write on draw buffer line 
   48 D1:AB10 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   49 D1:AB14 22 8D AC D1 	ld (dbgl_vram_line_start),hl 
   50 D1:AB18 -  -  -  -  	
   51 D1:AB18 2A 51 AA D1 	ld hl,(bg_cam_pos)
   52 D1:AB1C 2B -  -  -  	dec hl 
   53 D1:AB1D 22 51 AA D1 	ld (bg_cam_pos),hl 
   54 D1:AB21 01 EF 00 00 	ld bc,239
   55 D1:AB25 ED 42 -  -  	sbc hl,bc;bottom row of bc
   56 D1:AB27 4C -  -  -  	ld c,h;cam pos msb 
   57 D1:AB28 7D -  -  -  	ld a,l 
   58 D1:AB29 21 E2 CC D1 	ld hl,BG_Data_frame_table
   59 D1:AB2D 0C -  -  -  	inc c 
   60 D1:AB2E 09 -  -  -  	add hl,bc 
   61 D1:AB2F 09 -  -  -  	add hl,bc 
   62 D1:AB30 09 -  -  -  	add hl,bc 
   63 D1:AB31 ED 27 -  -  	ld hl,(hl)
   64 D1:AB33 CD EC AB D1 	call draw_bg_line
   65 D1:AB37 -  -  -  -  	;move buffer pos
   66 D1:AB37 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   67 D1:AB3B 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end
   68 D1:AB3F 37 -  -  -  	scf 
   69 D1:AB40 3F -  -  -  	ccf 
   70 D1:AB41 ED 42 -  -  	sbc hl,bc
   71 D1:AB43 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   72 D1:AB47 C2 4F AB D1 	jp nz,dec_bg_bottom_skip
   73 D1:AB4B 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   74 D1:AB4F -  -  -  -  dec_bg_bottom_skip:
   75 D1:AB4F 01 A0 00 00 	ld bc,160 
   76 D1:AB53 09 -  -  -  	add hl,bc
   77 D1:AB54 22 57 AA D1 	ld (BG_draw_buffer),hl 
   78 D1:AB58 C9 -  -  -  	ret
   79 D1:AB59 -  -  -  -  
   80 D1:AB59 -  -  -  -  
   81 D1:AB59 -  -  -  -  inc_bg:;move cam up 
   82 D1:AB59 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   83 D1:AB5D 01 00 96 D4 	ld bc,$d49600;BG_buffer_start
   84 D1:AB61 37 -  -  -  	scf 
   85 D1:AB62 3F -  -  -  	ccf 
   86 D1:AB63 ED 42 -  -  	sbc hl,bc
   87 D1:AB65 2A 57 AA D1 	ld hl,(BG_draw_buffer)
   88 D1:AB69 C2 71 AB D1 	jp nz,inc_bg_top_skip
   89 D1:AB6D 21 00 2C D5 	ld hl,$d52c00;1 below bottom of bg buffer 
   90 D1:AB71 -  -  -  -  inc_bg_top_skip:
   91 D1:AB71 01 A0 00 00 	ld bc,160 
   92 D1:AB75 37 -  -  -  	scf
   93 D1:AB76 3F -  -  -  	ccf 
   94 D1:AB77 ED 42 -  -  	sbc hl,bc ;move up line 
   95 D1:AB79 22 57 AA D1 	ld (BG_draw_buffer),hl 
   96 D1:AB7D 22 8D AC D1 	ld (dbgl_vram_line_start),hl 
   97 D1:AB81 2A 51 AA D1 	ld hl,(bg_cam_pos)
   98 D1:AB85 23 -  -  -  	inc hl 
   99 D1:AB86 22 51 AA D1 	ld (bg_cam_pos),hl 
  100 D1:AB8A 01 00 00 00 	ld bc,0
  101 D1:AB8E 4C -  -  -  	ld c,h;cam pos msb 
  102 D1:AB8F 7D -  -  -  	ld a,l 
  103 D1:AB90 21 E2 CC D1 	ld hl,BG_Data_frame_table
  104 D1:AB94 0C -  -  -  	inc c 
  105 D1:AB95 09 -  -  -  	add hl,bc 
  106 D1:AB96 09 -  -  -  	add hl,bc 
  107 D1:AB97 09 -  -  -  	add hl,bc 
  108 D1:AB98 ED 27 -  -  	ld hl,(hl)
  109 D1:AB9A CD EC AB D1 	call draw_bg_line
  110 D1:AB9E C9 -  -  -  	ret
  111 D1:AB9F -  -  -  -  	
  112 D1:AB9F -  -  -  -  
  113 D1:AB9F -  -  -  -  
  114 D1:AB9F -  -  -  -  
  115 D1:AB9F -  -  -  -  
  116 D1:AB9F -  -  -  -  setup_bg:
  117 D1:AB9F 2A 4E AA D1 	ld hl,(cam_pos)
  118 D1:ABA3 CB 3C -  -  	srl h
  119 D1:ABA5 CB 1D -  -  	rr l
  120 D1:ABA7 CB 3C -  -  	srl h
  121 D1:ABA9 CB 1D -  -  	rr l ;div by 4
  122 D1:ABAB -  -  -  -  	;hl holds bg cam pos 
  123 D1:ABAB 01 EF 00 00 	ld bc,239
  124 D1:ABAF 09 -  -  -  	add hl,bc;add 0 pos  
  125 D1:ABB0 22 51 AA D1 	ld (bg_cam_pos),hl
  126 D1:ABB4 23 -  -  -  	inc hl;to be dec in loop
  127 D1:ABB5 E5 -  -  -  	push hl 
  128 D1:ABB6 21 00 96 D4 	ld hl,BG_buffer 
  129 D1:ABBA 22 57 AA D1 	ld (BG_draw_buffer),hl
  130 D1:ABBE E5 -  -  -  	push hl 
  131 D1:ABBF D9 -  -  -  	exx
  132 D1:ABC0 06 F0 -  -  	ld b,240
  133 D1:ABC2 -  -  -  -  	
  134 D1:ABC2 -  -  -  -  setup_bg_loop:
  135 D1:ABC2 D9 -  -  -  	exx
  136 D1:ABC3 E1 -  -  -  	pop hl;vram draw pos 
  137 D1:ABC4 22 8D AC D1 	ld (dbgl_vram_line_start),hl 
  138 D1:ABC8 01 A0 00 00 	ld bc,160
  139 D1:ABCC 09 -  -  -  	add hl,bc 
  140 D1:ABCD EB -  -  -  	ex de,hl ;put vram pos in de 
  141 D1:ABCE E1 -  -  -  	pop hl;cam pos
  142 D1:ABCF 2B -  -  -  	dec hl 
  143 D1:ABD0 E5 -  -  -  	push hl;push cam pos 
  144 D1:ABD1 D5 -  -  -  	push de ;push vram pos 
  145 D1:ABD2 01 00 00 00 	ld bc,0
  146 D1:ABD6 4C -  -  -  	ld c,h;cam pos msb 
  147 D1:ABD7 7D -  -  -  	ld a,l 
  148 D1:ABD8 21 E2 CC D1 	ld hl,BG_Data_frame_table
  149 D1:ABDC 0C -  -  -  	inc c 
  150 D1:ABDD 09 -  -  -  	add hl,bc 
  151 D1:ABDE 09 -  -  -  	add hl,bc 
  152 D1:ABDF 09 -  -  -  	add hl,bc 
  153 D1:ABE0 ED 27 -  -  	ld hl,(hl)
  154 D1:ABE2 CD EC AB D1 	call draw_bg_line
  155 D1:ABE6 D9 -  -  -  	exx 
  156 D1:ABE7 10 D9 -  -  	djnz setup_bg_loop
  157 D1:ABE9 E1 -  -  -  	pop hl 
  158 D1:ABEA E1 -  -  -  	pop hl 
  159 D1:ABEB C9 -  -  -  	ret 
  160 D1:ABEC -  -  -  -  
  161 D1:ABEC -  -  -  -  
  162 D1:ABEC -  -  -  -  
  163 D1:ABEC -  -  -  -  
  164 D1:ABEC -  -  -  -  
  165 D1:ABEC -  -  -  -  
  166 D1:ABEC -  -  -  -  ;hl = upper data frame, a = line number in target frame
  167 D1:ABEC -  -  -  -  ;set dbgl_vram_line_start 
  168 D1:ABEC -  -  -  -  draw_bg_line:
  169 D1:ABEC E5 -  -  -  	push hl 
  170 D1:ABED F5 -  -  -  	push af 
  171 D1:ABEE 3E FF -  -  	ld a,$ff
  172 D1:ABF0 01 A0 00 00 	ld bc,160
  173 D1:ABF4 2A 8D AC D1 	ld hl,(dbgl_vram_line_start)
  174 D1:ABF8 CD E0 10 02 	call _MemSet 
  175 D1:ABFC F1 -  -  -  	pop af 
  176 D1:ABFD E1 -  -  -  	pop hl
  177 D1:ABFE -  -  -  -  
  178 D1:ABFE 32 24 AC D1 	ld (dbgl_line_num),a
  179 D1:AC02 32 61 AC D1 	ld (dbgl_line_num_2),a
  180 D1:AC06 ED 17 -  -  	ld de,(hl)
  181 D1:AC08 ED 53 93 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
  182 D1:AC0D 23 -  -  -  	inc hl
  183 D1:AC0E 23 -  -  -  	inc hl
  184 D1:AC0F 23 -  -  -  	inc hl ;to frame data start 
  185 D1:AC10 08 -  -  -  	ex af,af' ;'
  186 D1:AC11 7E -  -  -  	ld a,(hl);number of elements
  187 D1:AC12 08 -  -  -  	ex af,af' ;'
  188 D1:AC13 23 -  -  -  	inc hl 
  189 D1:AC14 -  -  -  -  	
  190 D1:AC14 11 00 00 00 	ld de,0
  191 D1:AC18 01 00 00 00 	ld bc,0
  192 D1:AC1C -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
  193 D1:AC1C -  -  -  -  dbgl_upper_loop:
  194 D1:AC1C 7E -  -  -  	ld a,(hl);y
  195 D1:AC1D 23 -  -  -  	inc hl;to height
  196 D1:AC1E 96 -  -  -  	sub (hl);subtract height
  197 D1:AC1F -  -  -  -  	;a is y value of bottom row of sprite
  198 D1:AC1F D2 2D AC D1 	jp nc,dbgl_upper_skip;if no carry into next frame
  199 D1:AC23 -  -  -  -  	;sprite extends into target frame
  200 D1:AC23 -  -  -  -  dbgl_line_num .equ $ + 1
  201 D1:AC23 D6 00 -  -  	sub 0 ;compare to line number in target frame
  202 D1:AC25 DA 3B AC D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
  203 D1:AC29 CA 3B AC D1 	jp z,dbgl_upper_cont;if = bottom row
  204 D1:AC2D -  -  -  -  dbgl_upper_skip:
  205 D1:AC2D 23 -  -  -  	inc hl;to x
  206 D1:AC2E 23 -  -  -  	inc hl;to index 
  207 D1:AC2F 23 -  -  -  	inc hl;to y
  208 D1:AC30 08 -  -  -  	ex af,af';'
  209 D1:AC31 3D -  -  -  	dec a 
  210 D1:AC32 CA 4C AC D1 	jp z,dbgl_lower_start 
  211 D1:AC36 08 -  -  -  	ex af,af';'
  212 D1:AC37 C3 1C AC D1 	jp dbgl_upper_loop
  213 D1:AC3B -  -  -  -  	
  214 D1:AC3B -  -  -  -  dbgl_upper_cont:
  215 D1:AC3B -  -  -  -  	;a = bottom row - linenum
  216 D1:AC3B 86 -  -  -  	add a,(hl);add height-1 
  217 D1:AC3C -  -  -  -  	;a holds 0 indexed line num within sprite
  218 D1:AC3C CD 87 AC D1 	call dbgl_setup_and_draw
  219 D1:AC40 23 -  -  -  	inc hl;to y
  220 D1:AC41 08 -  -  -  	ex af,af';'
  221 D1:AC42 3D -  -  -  	dec a 
  222 D1:AC43 CA 4C AC D1 	jp z,dbgl_lower_start 
  223 D1:AC47 08 -  -  -  	ex af,af';'
  224 D1:AC48 C3 1C AC D1 	jp dbgl_upper_loop
  225 D1:AC4C -  -  -  -  	
  226 D1:AC4C -  -  -  -  dbgl_lower_start:
  227 D1:AC4C -  -  -  -  ;LOWER FRAME START 
  228 D1:AC4C -  -  -  -  	;hl pointing to sprite data table 
  229 D1:AC4C ED 17 -  -  	ld de,(hl)
  230 D1:AC4E ED 53 93 AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
  231 D1:AC53 11 00 00 00 	ld de,0
  232 D1:AC57 23 -  -  -  	inc hl
  233 D1:AC58 23 -  -  -  	inc hl
  234 D1:AC59 23 -  -  -  	inc hl;to num elements
  235 D1:AC5A -  -  -  -  	
  236 D1:AC5A 08 -  -  -  	ex af,af' ;'
  237 D1:AC5B 7E -  -  -  	ld a,(hl);number of elements
  238 D1:AC5C 08 -  -  -  	ex af,af' ;'
  239 D1:AC5D 23 -  -  -  	inc hl ;to y
  240 D1:AC5E -  -  -  -  	
  241 D1:AC5E -  -  -  -  dbgl_lower_loop:
  242 D1:AC5E 7E -  -  -  	ld a,(hl)
  243 D1:AC5F 23 -  -  -  	inc hl;to height-1
  244 D1:AC60 -  -  -  -  dbgl_line_num_2 .equ $ + 1
  245 D1:AC60 D6 00 -  -  	sub 0;subtract line num 
  246 D1:AC62 DA 6F AC D1 	jp c,dbgl_lower_skip;target line num is above sprite 
  247 D1:AC66 -  -  -  -  	;target is below or = sprite y value 
  248 D1:AC66 -  -  -  -  	;a holds 0 indexed sprite row 
  249 D1:AC66 BE -  -  -  	cp (hl);compare to height
  250 D1:AC67 DA 7A AC D1 	jp c,dbgl_lower_cont ;if height >= a 
  251 D1:AC6B CA 7A AC D1 	jp z,dbgl_lower_cont
  252 D1:AC6F -  -  -  -  dbgl_lower_skip:
  253 D1:AC6F 23 -  -  -  	inc hl;to x  
  254 D1:AC70 23 -  -  -  	inc hl; to index
  255 D1:AC71 23 -  -  -  	inc hl;to y
  256 D1:AC72 08 -  -  -  	ex af,af';'
  257 D1:AC73 3D -  -  -  	dec a 
  258 D1:AC74 C8 -  -  -  	ret z 
  259 D1:AC75 08 -  -  -  	ex af,af';'
  260 D1:AC76 C3 5E AC D1 	jp dbgl_lower_loop
  261 D1:AC7A -  -  -  -  dbgl_lower_cont:
  262 D1:AC7A -  -  -  -  
  263 D1:AC7A CD 87 AC D1 	call dbgl_setup_and_draw
  264 D1:AC7E 23 -  -  -  	inc hl;to y
  265 D1:AC7F 08 -  -  -  	ex af,af';'
  266 D1:AC80 3D -  -  -  	dec a 
  267 D1:AC81 C8 -  -  -  	ret z 
  268 D1:AC82 08 -  -  -  	ex af,af';'
  269 D1:AC83 C3 5E AC D1 	jp dbgl_lower_loop
  270 D1:AC87 -  -  -  -  
  271 D1:AC87 -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
  272 D1:AC87 -  -  -  -  dbgl_setup_and_draw:
  273 D1:AC87 23 -  -  -  	inc hl;to x pos
  274 D1:AC88 5E -  -  -  	ld e,(hl)
  275 D1:AC89 23 -  -  -  	inc hl 
  276 D1:AC8A 4E -  -  -  	ld c,(hl);sprite index 
  277 D1:AC8B E5 -  -  -  	push hl
  278 D1:AC8C -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  279 D1:AC8C 21 00 00 00 	ld hl,0
  280 D1:AC90 19 -  -  -  	add hl,de;add x pos 
  281 D1:AC91 EB -  -  -  	ex de,hl;put vram pos into de 
  282 D1:AC92 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  283 D1:AC92 21 00 00 00 	ld hl,0
  284 D1:AC96 09 -  -  -  	add hl,bc
  285 D1:AC97 09 -  -  -  	add hl,bc 
  286 D1:AC98 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  287 D1:AC99 ED 27 -  -  	ld hl,(hl);hl holds sprite data
  288 D1:AC9B -  -  -  -  
  289 D1:AC9B CD A9 AC D1 	call draw_bg_sprite_line;draw sprite line 
  290 D1:AC9F 11 00 00 00 	ld de,0;clear de 
  291 D1:ACA3 01 00 00 00 	ld bc,0
  292 D1:ACA7 E1 -  -  -  	pop hl;back to data
  293 D1:ACA8 C9 -  -  -  	ret
  294 D1:ACA9 -  -  -  -  	
  295 D1:ACA9 -  -  -  -  
  296 D1:ACA9 -  -  -  -  
  297 D1:ACA9 -  -  -  -  
  298 D1:ACA9 -  -  -  -  
  299 D1:ACA9 -  -  -  -  
  300 D1:ACA9 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  301 D1:ACA9 -  -  -  -  draw_bg_sprite_line:
  302 D1:ACA9 E5 -  -  -  	push hl;save 
  303 D1:ACAA 6E -  -  -  	ld l,(hl);sprite width in px
  304 D1:ACAB 67 -  -  -  	ld h,a ;lines to skip
  305 D1:ACAC 7D -  -  -  	ld a,l;width 
  306 D1:ACAD ED 6C -  -  	mlt hl;widt*lines skipped 
  307 D1:ACAF C1 -  -  -  	pop bc 
  308 D1:ACB0 09 -  -  -  	add hl,bc;skip to target line data 
  309 D1:ACB1 23 -  -  -  	inc hl 
  310 D1:ACB2 -  -  -  -  	;hl is pointing to start of line data 
  311 D1:ACB2 CB 2F -  -  	sra a;divide width by 2 
  312 D1:ACB4 47 -  -  -  	ld b,a;b holds number of loops 
  313 D1:ACB5 -  -  -  -  dbgsl_loop:
  314 D1:ACB5 1A -  -  -  	ld a,(de); load vram data 
  315 D1:ACB6 A6 -  -  -  	and (hl);and with mask 
  316 D1:ACB7 23 -  -  -  	inc hl ;to color data 
  317 D1:ACB8 B6 -  -  -  	or (hl);or w color data 
  318 D1:ACB9 12 -  -  -  	ld (de),a;write to vram  
  319 D1:ACBA 13 -  -  -  	inc de
  320 D1:ACBB 23 -  -  -  	inc hl;to mask data
  321 D1:ACBC 10 F7 -  -  	djnz dbgsl_loop
  322 D1:ACBE C9 -  -  -  	ret 
  323 D1:ACBF -  -  -  -  	
  324 D1:ACBF -  -  -  -  
  325 D1:ACBF -  -  -  -  
  326 D1:ACBF -  -  -  -  
  327 D1:ACBF -  -  -  -  
  328 D1:ACBF -  -  -  -  
  329 D1:ACBF -  -  -  -  
  330 D1:ACBF -  -  -  -  
  331 D1:ACBF -  -  -  -  
  332 D1:ACBF -  -  -  -  
  333 D1:ACBF -  -  -  -  
  334 D1:ACBF -  -  -  -  
  335 D1:ACBF -  -  -  -  
Listing for file "ascent.asm"
  269 D1:ACBF -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ACBF -  -  -  -  
    2 D1:ACBF -  -  -  -  
    3 D1:ACBF -  -  -  -  ;de = vram , hl = data, a = number lines to draw
    4 D1:ACBF -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:ACBF 1B -  -  -  	dec de
    6 D1:ACC0 01 00 00 00 	ld bc,0
    7 D1:ACC4 4F -  -  -  	ld c,a
    8 D1:ACC5 E5 -  -  -  	push hl
    9 D1:ACC6 7E -  -  -  	ld a,(hl);height
   10 D1:ACC7 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:ACC8 4F -  -  -  	ld c,a;height
   12 D1:ACC9 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:ACCA E1 -  -  -  	pop hl
   14 D1:ACCB 23 -  -  -  	inc hl
   15 D1:ACCC 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:ACCD -  -  -  -  
   17 D1:ACCD 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:ACCE EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:ACCF C3 15 AD D1 	jp dfgs_loop
   20 D1:ACD3 -  -  -  -  	
   21 D1:ACD3 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
   22 D1:ACD3 -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:ACD3 1B -  -  -  	dec de
   24 D1:ACD4 01 00 00 00 	ld bc,0
   25 D1:ACD8 4F -  -  -  	ld c,a
   26 D1:ACD9 D5 -  -  -  	push de
   27 D1:ACDA 11 00 00 00 	ld de,0
   28 D1:ACDE E5 -  -  -  	push hl
   29 D1:ACDF 5E -  -  -  	ld e,(hl);height
   30 D1:ACE0 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:ACE1 -  -  -  -  
   32 D1:ACE1 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:ACE2 E1 -  -  -  	pop hl;start of data
   34 D1:ACE3 19 -  -  -  	add hl,de
   35 D1:ACE4 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:ACE5 23 -  -  -  	inc hl;hl is pixel data
   37 D1:ACE6 D1 -  -  -  	pop de;back to vram
   38 D1:ACE7 C5 -  -  -  	push bc;save total and skipped loops
   39 D1:ACE8 79 -  -  -  	ld a,c;loops to skip
   40 D1:ACE9 01 00 00 00 	ld bc,0
   41 D1:ACED -  -  -  -  	
   42 D1:ACED -  -  -  -  
   43 D1:ACED -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   44 D1:ACED 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:ACEE EB -  -  -  	ex de,hl;hl is vram
   46 D1:ACEF 09 -  -  -  	add hl,bc
   47 D1:ACF0 EB -  -  -  	ex de,hl;hl is data
   48 D1:ACF1 23 -  -  -  	inc hl
   49 D1:ACF2 4E -  -  -  	ld c,(hl);ldir length
   50 D1:ACF3 09 -  -  -  	add hl,bc;add ldir length
   51 D1:ACF4 EB -  -  -  	ex de,hl;hl is vram
   52 D1:ACF5 09 -  -  -  	add hl,bc;add ldir length
   53 D1:ACF6 13 -  -  -  	inc de
   54 D1:ACF7 EB -  -  -  	ex de,hl;hl is data
   55 D1:ACF8 3D -  -  -  	dec a
   56 D1:ACF9 C2 ED AC D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:ACFD -  -  -  -  	
   58 D1:ACFD -  -  -  -  	
   59 D1:ACFD C1 -  -  -  	pop bc
   60 D1:ACFE 78 -  -  -  	ld a,b
   61 D1:ACFF 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:AD00 -  -  -  -  		
   63 D1:AD00 01 00 00 00 	ld bc,0
   64 D1:AD04 4E -  -  -  	ld c,(hl)
   65 D1:AD05 EB -  -  -  	ex de,hl
   66 D1:AD06 C3 15 AD D1 	jp dfgs_loop
   67 D1:AD0A -  -  -  -  
   68 D1:AD0A -  -  -  -  
   69 D1:AD0A -  -  -  -  ;de = vram , hl = data
   70 D1:AD0A -  -  -  -  draw_fast_sprite_full:
   71 D1:AD0A 1B -  -  -  	dec de
   72 D1:AD0B 01 00 00 00 	ld bc,0
   73 D1:AD0F 4E -  -  -  	ld c,(hl);height
   74 D1:AD10 09 -  -  -  	add hl,bc
   75 D1:AD11 7E -  -  -  	ld a,(hl);total loops
   76 D1:AD12 23 -  -  -  	inc hl
   77 D1:AD13 4E -  -  -  	ld c,(hl);first gap length
   78 D1:AD14 EB -  -  -  	ex de,hl
   79 D1:AD15 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   80 D1:AD15 -  -  -  -  dfgs_loop:;gap, colors
   81 D1:AD15 09 -  -  -  	add hl,bc;add alpha length
   82 D1:AD16 EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   83 D1:AD17 23 -  -  -  	inc hl
   84 D1:AD18 4E -  -  -  	ld c,(hl);get ldir length
   85 D1:AD19 23 -  -  -  	inc hl
   86 D1:AD1A ED B0 -  -  	ldir
   87 D1:AD1C 4E -  -  -  	ld c,(hl);load c with next alpha length
   88 D1:AD1D EB -  -  -  	ex de,hl;swap, hl is vram
   89 D1:AD1E 3D -  -  -  	dec a
   90 D1:AD1F C2 15 AD D1 	jp nz,dfgs_loop
   91 D1:AD23 C9 -  -  -  	ret
   92 D1:AD24 -  -  -  -  	
   93 D1:AD24 -  -  -  -  	
   94 D1:AD24 -  -  -  -  	
   95 D1:AD24 -  -  -  -  	
   96 D1:AD24 -  -  -  -  
   97 D1:AD24 -  -  -  -  
   98 D1:AD24 -  -  -  -  ;hl = data, de = vram
   99 D1:AD24 -  -  -  -  draw_slow_sprite_full:
  100 D1:AD24 01 00 00 00 	ld bc,0
  101 D1:AD28 4E -  -  -  	ld c,(hl);height
  102 D1:AD29 09 -  -  -  	add hl,bc
  103 D1:AD2A 7E -  -  -  	ld a,(hl);num loops
  104 D1:AD2B D9 -  -  -  	exx
  105 D1:AD2C 4F -  -  -  	ld c,a
  106 D1:AD2D D9 -  -  -  	exx
  107 D1:AD2E 1B -  -  -  	dec de
  108 D1:AD2F -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  109 D1:AD2F -  -  -  -  dsfgs_line_loop:
  110 D1:AD2F 23 -  -  -  	inc hl;gap length
  111 D1:AD30 4E -  -  -  	ld c,(hl);gap length
  112 D1:AD31 EB -  -  -  	ex de,hl;hl is vram
  113 D1:AD32 09 -  -  -  	add hl,bc;add aplha gap
  114 D1:AD33 EB -  -  -  	ex de,hl;hl is data
  115 D1:AD34 23 -  -  -  	inc hl;hl points to single pix mask
  116 D1:AD35 1A -  -  -  	ld a,(de);vram data
  117 D1:AD36 A6 -  -  -  	and (hl)
  118 D1:AD37 23 -  -  -  	inc hl;pixel data
  119 D1:AD38 B6 -  -  -  	or (hl)
  120 D1:AD39 12 -  -  -  	ld (de),a
  121 D1:AD3A 23 -  -  -  	inc hl;ldir length
  122 D1:AD3B -  -  -  -  	
  123 D1:AD3B 13 -  -  -  	inc de;move to next pixel
  124 D1:AD3C -  -  -  -  	
  125 D1:AD3C 7E -  -  -  	ld a,(hl);ldir length
  126 D1:AD3D 23 -  -  -  	inc hl;data
  127 D1:AD3E 4F -  -  -  	ld c,a
  128 D1:AD3F B7 -  -  -  	or a
  129 D1:AD40 CA 46 AD D1 	jp z,dsfgs_ldir_skip
  130 D1:AD44 ED B0 -  -  	ldir
  131 D1:AD46 -  -  -  -  dsfgs_ldir_skip:
  132 D1:AD46 1A -  -  -  	ld a,(de);vram data
  133 D1:AD47 A6 -  -  -  	and (hl)
  134 D1:AD48 23 -  -  -  	inc hl;pixel data
  135 D1:AD49 B6 -  -  -  	or (hl)
  136 D1:AD4A 12 -  -  -  	ld (de),a
  137 D1:AD4B -  -  -  -  	
  138 D1:AD4B D9 -  -  -  	exx 
  139 D1:AD4C 0D -  -  -  	dec c
  140 D1:AD4D D9 -  -  -  	exx
  141 D1:AD4E C2 2F AD D1 	jp nz,dsfgs_line_loop
  142 D1:AD52 C9 -  -  -  	ret
  143 D1:AD53 -  -  -  -  
  144 D1:AD53 -  -  -  -  
  145 D1:AD53 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  146 D1:AD53 -  -  -  -  draw_slow_sprite_top_cut:
  147 D1:AD53 -  -  -  -  
  148 D1:AD53 E5 -  -  -  	push hl
  149 D1:AD54 01 00 00 00 	ld bc,0
  150 D1:AD58 4F -  -  -  	ld c,a
  151 D1:AD59 09 -  -  -  	add hl,bc
  152 D1:AD5A 7E -  -  -  	ld a,(hl);loops to skip
  153 D1:AD5B 32 7E AD D1 	ld (dsstc_loops_skipped),a
  154 D1:AD5F D9 -  -  -  	exx
  155 D1:AD60 47 -  -  -  	ld b,a;loops to skip
  156 D1:AD61 D9 -  -  -  	exx
  157 D1:AD62 E1 -  -  -  	pop hl
  158 D1:AD63 4E -  -  -  	ld c,(hl)
  159 D1:AD64 09 -  -  -  	add hl,bc;total loops
  160 D1:AD65 7E -  -  -  	ld a,(hl);total loops
  161 D1:AD66 23 -  -  -  	inc hl;gap length
  162 D1:AD67 -  -  -  -  
  163 D1:AD67 -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  164 D1:AD67 D9 -  -  -  	exx
  165 D1:AD68 -  -  -  -  slow_sprite_data_traverse:
  166 D1:AD68 D9 -  -  -  	exx
  167 D1:AD69 4E -  -  -  	ld c,(hl);gap length
  168 D1:AD6A EB -  -  -  	ex de,hl;hl is vram
  169 D1:AD6B 09 -  -  -  	add hl,bc
  170 D1:AD6C EB -  -  -  	ex de,hl
  171 D1:AD6D -  -  -  -  	
  172 D1:AD6D 23 -  -  -  	inc hl
  173 D1:AD6E 23 -  -  -  	inc hl
  174 D1:AD6F 23 -  -  -  	inc hl;ldir length
  175 D1:AD70 4E -  -  -  	ld c,(hl)
  176 D1:AD71 09 -  -  -  	add hl,bc
  177 D1:AD72 EB -  -  -  	ex de,hl
  178 D1:AD73 09 -  -  -  	add hl,bc
  179 D1:AD74 EB -  -  -  	ex de,hl
  180 D1:AD75 13 -  -  -  	inc de;single pix
  181 D1:AD76 23 -  -  -  	inc hl
  182 D1:AD77 23 -  -  -  	inc hl
  183 D1:AD78 23 -  -  -  	inc hl;gap length
  184 D1:AD79 D9 -  -  -  	exx
  185 D1:AD7A 10 EC -  -  	djnz slow_sprite_data_traverse
  186 D1:AD7C D9 -  -  -  	exx
  187 D1:AD7D -  -  -  -  
  188 D1:AD7D -  -  -  -  dsstc_loops_skipped .equ $ + 1
  189 D1:AD7D D6 00 -  -  	sub a,0;loops skipped
  190 D1:AD7F D9 -  -  -  	exx
  191 D1:AD80 4F -  -  -  	ld c,a
  192 D1:AD81 D9 -  -  -  	exx
  193 D1:AD82 -  -  -  -  	
  194 D1:AD82 1B -  -  -  	dec de
  195 D1:AD83 2B -  -  -  	dec hl	
  196 D1:AD84 C3 2F AD D1 	jp dsfgs_line_loop
  197 D1:AD88 -  -  -  -  	
  198 D1:AD88 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  199 D1:AD88 -  -  -  -  draw_slow_sprite_bottom_cut:
  200 D1:AD88 01 00 00 00 	ld bc,0
  201 D1:AD8C E5 -  -  -  	push hl
  202 D1:AD8D 4F -  -  -  	ld c,a;height
  203 D1:AD8E 09 -  -  -  	add hl,bc
  204 D1:AD8F 7E -  -  -  	ld a,(hl);num loops
  205 D1:AD90 D9 -  -  -  	exx
  206 D1:AD91 4F -  -  -  	ld c,a
  207 D1:AD92 D9 -  -  -  	exx
  208 D1:AD93 E1 -  -  -  	pop hl
  209 D1:AD94 4E -  -  -  	ld c,(hl)
  210 D1:AD95 09 -  -  -  	add hl,bc
  211 D1:AD96 -  -  -  -  
  212 D1:AD96 1B -  -  -  	dec de
  213 D1:AD97 C3 2F AD D1 	jp dsfgs_line_loop
  214 D1:AD9B -  -  -  -  
  215 D1:AD9B -  -  -  -  
  216 D1:AD9B -  -  -  -  
  217 D1:AD9B -  -  -  -  
  218 D1:AD9B -  -  -  -  
  219 D1:AD9B -  -  -  -  
  220 D1:AD9B -  -  -  -  
  221 D1:AD9B -  -  -  -  
  222 D1:AD9B -  -  -  -  
  223 D1:AD9B -  -  -  -  
  224 D1:AD9B -  -  -  -  
  225 D1:AD9B -  -  -  -  
  226 D1:AD9B -  -  -  -  
  227 D1:AD9B -  -  -  -  
  228 D1:AD9B -  -  -  -  
  229 D1:AD9B -  -  -  -  
  230 D1:AD9B -  -  -  -  
  231 D1:AD9B -  -  -  -  
  232 D1:AD9B -  -  -  -  
  233 D1:AD9B -  -  -  -  
  234 D1:AD9B -  -  -  -  
  235 D1:AD9B -  -  -  -  
  236 D1:AD9B -  -  -  -  
  237 D1:AD9B -  -  -  -  
  238 D1:AD9B -  -  -  -  
  239 D1:AD9B -  -  -  -  
  240 D1:AD9B -  -  -  -  
  241 D1:AD9B -  -  -  -  
  242 D1:AD9B -  -  -  -  
  243 D1:AD9B -  -  -  -  
  244 D1:AD9B -  -  -  -  
  245 D1:AD9B -  -  -  -  
  246 D1:AD9B -  -  -  -  
  247 D1:AD9B -  -  -  -  
  248 D1:AD9B -  -  -  -  
  249 D1:AD9B -  -  -  -   
  250 D1:AD9B -  -  -  -  
  251 D1:AD9B -  -  -  -  
  252 D1:AD9B -  -  -  -  
  253 D1:AD9B -  -  -  -  
  254 D1:AD9B -  -  -  -  
  255 D1:AD9B -  -  -  -  
  256 D1:AD9B -  -  -  -  
  257 D1:AD9B -  -  -  -  
  258 D1:AD9B -  -  -  -  
  259 D1:AD9B -  -  -  -  
  260 D1:AD9B -  -  -  -  
  261 D1:AD9B -  -  -  -  
  262 D1:AD9B -  -  -  -  
  263 D1:AD9B -  -  -  -  
  264 D1:AD9B -  -  -  -  
  265 D1:AD9B -  -  -  -  
  266 D1:AD9B -  -  -  -  
  267 D1:AD9B -  -  -  -  
  268 D1:AD9B -  -  -  -  
  269 D1:AD9B -  -  -  -  
  270 D1:AD9B -  -  -  -  
  271 D1:AD9B -  -  -  -  
  272 D1:AD9B -  -  -  -  
  273 D1:AD9B -  -  -  -  
  274 D1:AD9B -  -  -  -  
  275 D1:AD9B -  -  -  -  
  276 D1:AD9B -  -  -  -  
  277 D1:AD9B -  -  -  -  
  278 D1:AD9B -  -  -  -  
  279 D1:AD9B -  -  -  -  
  280 D1:AD9B -  -  -  -  
  281 D1:AD9B -  -  -  -  
  282 D1:AD9B -  -  -  -  
  283 D1:AD9B -  -  -  -  
  284 D1:AD9B -  -  -  -  
  285 D1:AD9B -  -  -  -  
  286 D1:AD9B -  -  -  -  
  287 D1:AD9B -  -  -  -  
  288 D1:AD9B -  -  -  -  
  289 D1:AD9B -  -  -  -  
  290 D1:AD9B -  -  -  -  
  291 D1:AD9B -  -  -  -  
  292 D1:AD9B -  -  -  -  
  293 D1:AD9B -  -  -  -  
  294 D1:AD9B -  -  -  -  
  295 D1:AD9B -  -  -  -  
  296 D1:AD9B -  -  -  -  
  297 D1:AD9B -  -  -  -  
  298 D1:AD9B -  -  -  -  
  299 D1:AD9B -  -  -  -  
  300 D1:AD9B -  -  -  -  
  301 D1:AD9B -  -  -  -  
  302 D1:AD9B -  -  -  -  
  303 D1:AD9B -  -  -  -  
  304 D1:AD9B -  -  -  -  
  305 D1:AD9B -  -  -  -  	
  306 D1:AD9B -  -  -  -  	
Listing for file "ascent.asm"
  270 D1:AD9B -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:AD9B -  -  -  -  
    2 D1:AD9B -  -  -  -  
    3 D1:AD9B -  -  -  -  
    4 D1:AD9B -  -  -  -  
    5 D1:AD9B -  -  -  -  
    6 D1:AD9B -  -  -  -  
    7 D1:AD9B -  -  -  -  
    8 D1:AD9B -  -  -  -  
    9 D1:AD9B -  -  -  -  ;REGISTER USEAGE
   10 D1:AD9B -  -  -  -  ;HL = sprite color data byte
   11 D1:AD9B -  -  -  -  ;C = bit selector for color data 
   12 D1:AD9B -  -  -  -  ;HL' = alpha data byte
   13 D1:AD9B -  -  -  -  ;C' = bit selector for alpha data
   14 D1:AD9B -  -  -  -  ;DE = output sprite data location
   15 D1:AD9B -  -  -  -  ;DE' = loops/line write location 
   16 D1:AD9B -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:AD9B -  -  -  -  
   18 D1:AD9B -  -  -  -  ;SETUP ----------------
   19 D1:AD9B -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:AD9B -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:AD9B -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:AD9B -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:AD9B -  -  -  -  ;------------
   24 D1:AD9B -  -  -  -  
   25 D1:AD9B -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:AD9B -  -  -  -  
   27 D1:AD9B -  -  -  -  
   28 D1:AD9B -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:AD9B -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:AD9B -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:AD9B -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:AD9B -  -  -  -  ;write pixel mask and color data
   33 D1:AD9B -  -  -  -  
   34 D1:AD9B -  -  -  -  ;LDIR ROUTINE
   35 D1:AD9B -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:AD9B -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:AD9B -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:AD9B -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:AD9B -  -  -  -  ;IF FAST, GOTO END
   40 D1:AD9B -  -  -  -  
   41 D1:AD9B -  -  -  -  ;trailing pixels
   42 D1:AD9B -  -  -  -  ;11,10,01 in alpha data 
   43 D1:AD9B -  -  -  -  
   44 D1:AD9B -  -  -  -  ;END AND RESTART
   45 D1:AD9B -  -  -  -  ;Increment loops/line counter
   46 D1:AD9B -  -  -  -  ;check if end of line and write loops/line
   47 D1:AD9B -  -  -  -  
   48 D1:AD9B -  -  -  -  ;store registers and check if interrupt is required
   49 D1:AD9B -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:AD9B -  -  -  -  ;otherwise return to start of loop
   51 D1:AD9B -  -  -  -  
   52 D1:AD9B -  -  -  -  ;
   53 D1:AD9B -  -  -  -  
   54 D1:AD9B -  -  -  -  
   55 D1:AD9B -  -  -  -  
   56 D1:AD9B -  -  -  -  
   57 D1:AD9B -  -  -  -  
   58 D1:AD9B -  -  -  -  
   59 D1:AD9B -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:AD9B -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:AD9B -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:AD9B CB 09 -  -  	rrc c;rlc flip
   63 D1:AD9D D0 -  -  -  	ret nc
   64 D1:AD9E -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:AD9E 23 -  -  -  	inc hl;dec hl flip
   66 D1:AD9F C9 -  -  -  	ret
   67 D1:ADA0 -  -  -  -  
   68 D1:ADA0 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:ADA0 -  -  -  -  
   70 D1:ADA0 -  -  -  -  ;IN SHADOW
   71 D1:ADA0 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:ADA0 -  -  -  -  ;C IS BITMASK
   73 D1:ADA0 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:ADA0 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:ADA0 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:ADA0 -  -  -  -  ; next call returns first bit in next row  
   77 D1:ADA0 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:ADA0 3E A2 -  -  	ld a,$A2;test 
   79 D1:ADA2 CD 34 AA D1 	call write_a_to_ram
   80 D1:ADA6 -  -  -  -  	
   81 D1:ADA6 37 -  -  -  	scf 
   82 D1:ADA7 -  -  -  -  sdcomp_end_of_line_alp .equ $
   83 D1:ADA7 DA BA AD D1 	jp c, sdcomp_end_of_line_alp_skip
   84 D1:ADAB -  -  -  -  
   85 D1:ADAB 3E A3 -  -  	ld a,$A3
   86 D1:ADAD CD 34 AA D1 	call write_a_to_ram 
   87 D1:ADB1 -  -  -  -  	
   88 D1:ADB1 3E D2 -  -  	ld a, %11010010 ;jp nc 
   89 D1:ADB3 32 54 AE D1 	ld (sdcomp_end_vitrual_zero_read),a 
   90 D1:ADB7 -  -  -  -  	
   91 D1:ADB7 3E 00 -  -  	ld a,0
   92 D1:ADB9 C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   93 D1:ADBA -  -  -  -  
   94 D1:ADBA -  -  -  -  sdcomp_end_of_line_alp_skip:
   95 D1:ADBA -  -  -  -  	
   96 D1:ADBA -  -  -  -  	
   97 D1:ADBA -  -  -  -  	
   98 D1:ADBA -  -  -  -  ;MUST BE RESET EVERY ROW
   99 D1:ADBA 37 -  -  -  	scf
  100 D1:ADBB -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  101 D1:ADBB DA CE AD D1 	jp c,sdcomp_bit_offset_skip
  102 D1:ADBF 3E DA -  -  	ld a,%11011010;jp c 
  103 D1:ADC1 32 BB AD D1 	ld (sdcomp_bit_offset),a
  104 D1:ADC5 3E A9 -  -  	ld a,$A9
  105 D1:ADC7 CD 34 AA D1 	call write_a_to_ram
  106 D1:ADCB 3E 00 -  -  	ld a,0
  107 D1:ADCD C9 -  -  -  	ret ;return 0 first bit
  108 D1:ADCE -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  109 D1:ADCE -  -  -  -  		
  110 D1:ADCE -  -  -  -  	;ld a,$EF
  111 D1:ADCE -  -  -  -  	;call write_a_to_ram
  112 D1:ADCE 7E -  -  -  	ld a,(hl)
  113 D1:ADCF -  -  -  -  	;push af 
  114 D1:ADCF -  -  -  -  	;call write_a_to_ram
  115 D1:ADCF -  -  -  -  	;ld a,c
  116 D1:ADCF -  -  -  -  	;call write_a_to_ram
  117 D1:ADCF -  -  -  -  	;pop af 
  118 D1:ADCF -  -  -  -  	
  119 D1:ADCF -  -  -  -  	
  120 D1:ADCF A1 -  -  -  	and c 
  121 D1:ADD0 CD 9B AD D1 	call sdcomp_next_in_bitstream;incs bitstream
  122 D1:ADD4 -  -  -  -  	;a holds data to return
  123 D1:ADD4 -  -  -  -  	;call write_a_to_ram
  124 D1:ADD4 37 -  -  -  	scf 
  125 D1:ADD5 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  126 D1:ADD5 DA DB AD D1 	jp c,sdcomp_no_alpha_1_skip
  127 D1:ADD9 3E 01 -  -  	ld a,1
  128 D1:ADDB -  -  -  -  sdcomp_no_alpha_1_skip:
  129 D1:ADDB -  -  -  -  	
  130 D1:ADDB -  -  -  -  	
  131 D1:ADDB 08 -  -  -  	ex af,af' ;';into shadow
  132 D1:ADDC 3D -  -  -  	dec a 
  133 D1:ADDD -  -  -  -  	;call write_a_to_ram
  134 D1:ADDD C2 24 AE D1 	jp nz, sdcomp_end_of_line_skip
  135 D1:ADE1 -  -  -  -  	
  136 D1:ADE1 -  -  -  -  	;HAve read last bit in line  
  137 D1:ADE1 -  -  -  -  	
  138 D1:ADE1 3E AC -  -  	ld a,$AC;Test
  139 D1:ADE3 CD 34 AA D1 	call write_a_to_ram;Test
  140 D1:ADE7 -  -  -  -  	;Decrement lines remaining in sprite
  141 D1:ADE7 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  142 D1:ADE7 3E 00 -  -  	ld a,0
  143 D1:ADE9 3D -  -  -  	dec a 
  144 D1:ADEA 32 E8 AD D1 	ld (sdcomp_lines_remaining),a
  145 D1:ADEE -  -  -  -  	;call write_a_to_ram
  146 D1:ADEE C2 FE AD D1 	jp nz,sdcomp_set_end_flag_skip
  147 D1:ADF2 -  -  -  -  	;end of last line reached 
  148 D1:ADF2 3E DA -  -  	ld a,%11011010;jp c
  149 D1:ADF4 32 34 B1 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  150 D1:ADF8 3E E9 -  -  	ld a,$E9
  151 D1:ADFA CD 34 AA D1 	call write_a_to_ram;TEST 
  152 D1:ADFE -  -  -  -  sdcomp_set_end_flag_skip:
  153 D1:ADFE 3A 68 B0 D1 	ld a,(sdcomp_loops_per_line_counter)
  154 D1:AE02 12 -  -  -  	ld (de),a ;write loops/line data 
  155 D1:AE03 13 -  -  -  	inc de
  156 D1:AE04 -  -  -  -  
  157 D1:AE04 37 -  -  -  	scf 
  158 D1:AE05 -  -  -  -  sdcomp_flip_1 .equ $ ;if flipped sprite
  159 D1:AE05 D4 23 AF D1 	call nc,sdcomp_traverse_line_data ;call line data traverse
  160 D1:AE09 -  -  -  -  
  161 D1:AE09 3E D2 -  -  	ld a, %11010010 ;jp nc 
  162 D1:AE0B 32 78 B0 D1 	ld (sdcomp_end_of_line_gaplength),a
  163 D1:AE0F 32 A7 AD D1 	ld (sdcomp_end_of_line_alp),a
  164 D1:AE13 -  -  -  -  	
  165 D1:AE13 37 -  -  -  	scf ;Set offset bit for next line
  166 D1:AE14 -  -  -  -  sdcomp_offset_1 .equ $
  167 D1:AE14 DA 1E AE D1 	jp c,sdcomp_offset_1_skip
  168 D1:AE18 3E D2 -  -  	ld a, %11010010 ;jp nc 
  169 D1:AE1A 32 BB AD D1 	ld (sdcomp_bit_offset),a
  170 D1:AE1E -  -  -  -  sdcomp_offset_1_skip:
  171 D1:AE1E -  -  -  -  	
  172 D1:AE1E -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  173 D1:AE1E 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  174 D1:AE20 -  -  -  -  	
  175 D1:AE20 CD 34 AA D1 	call write_a_to_ram
  176 D1:AE24 -  -  -  -  	
  177 D1:AE24 -  -  -  -  sdcomp_end_of_line_skip:
  178 D1:AE24 08 -  -  -  	ex af,af' ;' ;out
  179 D1:AE25 -  -  -  -  	
  180 D1:AE25 F5 -  -  -  	push af ;testing
  181 D1:AE26 3E A0 -  -  	ld a,$A0
  182 D1:AE28 CD 34 AA D1 	call write_a_to_ram
  183 D1:AE2C F1 -  -  -  	pop af 
  184 D1:AE2D CD 34 AA D1 	call write_a_to_ram
  185 D1:AE31 -  -  -  -  	
  186 D1:AE31 C9 -  -  -  	ret 
  187 D1:AE32 -  -  -  -  	
  188 D1:AE32 -  -  -  -  
  189 D1:AE32 -  -  -  -  
  190 D1:AE32 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  191 D1:AE32 -  -  -  -  sdcomp_get_next_alpha_pair:
  192 D1:AE32 3E A1 -  -  	ld a,$A1
  193 D1:AE34 CD 34 AA D1 	call write_a_to_ram
  194 D1:AE38 -  -  -  -  	
  195 D1:AE38 3E DA -  -  	ld a,%11011010;jp c 
  196 D1:AE3A 32 54 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  197 D1:AE3E -  -  -  -  	
  198 D1:AE3E CD A0 AD D1 	call sdcomp_get_next_alpha
  199 D1:AE42 B7 -  -  -  	or a 
  200 D1:AE43 CA 51 AE D1 	jp z,sdcomp_get_next_alpha_pair0
  201 D1:AE47 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  202 D1:AE49 CD 34 AA D1 	call write_a_to_ram
  203 D1:AE4D C3 66 AE D1 	jp sdcomp_get_next_alpha_pair1
  204 D1:AE51 -  -  -  -  sdcomp_get_next_alpha_pair0:
  205 D1:AE51 3E 00 -  -  	ld a,0
  206 D1:AE53 -  -  -  -  	
  207 D1:AE53 37 -  -  -  	scf 
  208 D1:AE54 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  209 D1:AE54 DA 66 AE D1 	jp c,sdcomp_get_next_alpha_pair1
  210 D1:AE58 F5 -  -  -  	push af 
  211 D1:AE59 -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  212 D1:AE59 -  -  -  -  	
  213 D1:AE59 3E 3D -  -  	ld a,%00111101 ;dec a 
  214 D1:AE5B 32 7F B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  215 D1:AE5F -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  216 D1:AE5F 3E A4 -  -  	ld a,$A4
  217 D1:AE61 CD 34 AA D1 	call write_a_to_ram
  218 D1:AE65 F1 -  -  -  	pop af 
  219 D1:AE66 -  -  -  -  	
  220 D1:AE66 -  -  -  -  sdcomp_get_next_alpha_pair1:
  221 D1:AE66 -  -  -  -  
  222 D1:AE66 -  -  -  -  	
  223 D1:AE66 32 7C AE D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  224 D1:AE6A -  -  -  -  	
  225 D1:AE6A CD A0 AD D1 	call sdcomp_get_next_alpha
  226 D1:AE6E B7 -  -  -  	or a 
  227 D1:AE6F CA 79 AE D1 	jp z,sdcomp_get_next_alpha_pair2
  228 D1:AE73 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  229 D1:AE75 C3 7B AE D1 	jp sdcomp_get_next_alpha_pair3
  230 D1:AE79 -  -  -  -  sdcomp_get_next_alpha_pair2:
  231 D1:AE79 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  232 D1:AE7B -  -  -  -  sdcomp_get_next_alpha_pair3:	
  233 D1:AE7B -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  234 D1:AE7B F6 00 -  -  	or 0;OR WITH FIRST BIT 
  235 D1:AE7D -  -  -  -  	
  236 D1:AE7D C9 -  -  -  	ret 
  237 D1:AE7E -  -  -  -  	
  238 D1:AE7E -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  239 D1:AE7E -  -  -  -  
  240 D1:AE7E -  -  -  -  ;not in shadow, returns a = color0000
  241 D1:AE7E -  -  -  -  sdcomp_get_next_color_leading_nibble:
  242 D1:AE7E CD 87 AE D1 	call sdcomp_get_next_color
  243 D1:AE82 0F -  -  -  	rrca 
  244 D1:AE83 0F -  -  -  	rrca 
  245 D1:AE84 0F -  -  -  	rrca 
  246 D1:AE85 0F -  -  -  	rrca
  247 D1:AE86 C9 -  -  -  	ret 
  248 D1:AE87 -  -  -  -  
  249 D1:AE87 -  -  -  -  
  250 D1:AE87 -  -  -  -  
  251 D1:AE87 -  -  -  -  ;bit orders
  252 D1:AE87 -  -  -  -  ;	noflip   flip 
  253 D1:AE87 -  -  -  -  ;4bpp 3210 	 0123
  254 D1:AE87 -  -  -  -  ;3bpp 210	 012
  255 D1:AE87 -  -  -  -  ;2bpp 10	 01
  256 D1:AE87 -  -  -  -  ;1bpp 0		 0
  257 D1:AE87 -  -  -  -  
  258 D1:AE87 -  -  -  -  ;not in shadow, returns a = 0000color
  259 D1:AE87 -  -  -  -  sdcomp_get_next_color:
  260 D1:AE87 D5 -  -  -  	push de ;save data write location
  261 D1:AE88 1E 00 -  -  	ld e,0;E will store the final color data
  262 D1:AE8A -  -  -  -  	
  263 D1:AE8A 37 -  -  -  	scf
  264 D1:AE8B -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  265 D1:AE8B D2 D5 AE D1 	jp nc,sdcomp_get_color_from_index
  266 D1:AE8F -  -  -  -  	
  267 D1:AE8F -  -  -  -  	
  268 D1:AE8F -  -  -  -  	
  269 D1:AE8F 7E -  -  -  	ld a,(hl) ;read next bit 
  270 D1:AE90 -  -  -  -  	;call write_a_to_ram ;TEST
  271 D1:AE90 A1 -  -  -  	and c
  272 D1:AE91 -  -  -  -  	;call write_a_to_ram ;TEST
  273 D1:AE91 CD 9B AD D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  274 D1:AE95 B7 -  -  -  	or a
  275 D1:AE96 CA 9C AE D1 	jp z,sdcomp_get_color_data_set_skip_1
  276 D1:AE9A -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  277 D1:AE9A CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  278 D1:AE9C -  -  -  -  sdcomp_get_color_data_set_skip_1:
  279 D1:AE9C -  -  -  -  	
  280 D1:AE9C 37 -  -  -  	scf
  281 D1:AE9D -  -  -  -  sdcomp_1bpc .equ $
  282 D1:AE9D D2 D5 AE D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  283 D1:AEA1 -  -  -  -  	
  284 D1:AEA1 -  -  -  -  	
  285 D1:AEA1 7E -  -  -  	ld a,(hl)
  286 D1:AEA2 A1 -  -  -  	and c 
  287 D1:AEA3 -  -  -  -  	;call write_a_to_ram ;TEST
  288 D1:AEA3 CD 9B AD D1 	call sdcomp_next_in_bitstream
  289 D1:AEA7 B7 -  -  -  	or a
  290 D1:AEA8 CA AE AE D1 	jp z,sdcomp_get_color_data_set_skip_2
  291 D1:AEAC -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  292 D1:AEAC CB C3 -  -  	set 0,e ;store next bit of color data in e  
  293 D1:AEAE -  -  -  -  sdcomp_get_color_data_set_skip_2:
  294 D1:AEAE -  -  -  -  	
  295 D1:AEAE 37 -  -  -  	scf
  296 D1:AEAF -  -  -  -  sdcomp_2bpc .equ $
  297 D1:AEAF D2 D5 AE D1 	jp nc,sdcomp_get_color_from_index
  298 D1:AEB3 -  -  -  -  	
  299 D1:AEB3 7E -  -  -  	ld a,(hl)
  300 D1:AEB4 A1 -  -  -  	and c 
  301 D1:AEB5 CD 9B AD D1 	call sdcomp_next_in_bitstream
  302 D1:AEB9 B7 -  -  -  	or a
  303 D1:AEBA CA C0 AE D1 	jp z,sdcomp_get_color_data_set_skip_3
  304 D1:AEBE -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  305 D1:AEBE CB D3 -  -  	set 2,e 
  306 D1:AEC0 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  307 D1:AEC0 -  -  -  -  	
  308 D1:AEC0 37 -  -  -  	scf
  309 D1:AEC1 -  -  -  -  sdcomp_3bpc .equ $
  310 D1:AEC1 D2 D5 AE D1 	jp nc,sdcomp_get_color_from_index	
  311 D1:AEC5 -  -  -  -  
  312 D1:AEC5 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  313 D1:AEC5 7E -  -  -  	ld a,(hl)
  314 D1:AEC6 A1 -  -  -  	and c 
  315 D1:AEC7 CD 9B AD D1 	call sdcomp_next_in_bitstream
  316 D1:AECB B7 -  -  -  	or a
  317 D1:AECC CA D2 AE D1 	jp z,sdcomp_get_color_data_set_skip_4
  318 D1:AED0 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  319 D1:AED0 CB DB -  -  	set 3,e 
  320 D1:AED2 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  321 D1:AED2 -  -  -  -  ;4bpp, interpret as color data, not indexed
  322 D1:AED2 7B -  -  -  	ld a,e 
  323 D1:AED3 D1 -  -  -  	pop de 
  324 D1:AED4 C9 -  -  -  	ret 
  325 D1:AED5 -  -  -  -  
  326 D1:AED5 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  327 D1:AED5 -  -  -  -  	
  328 D1:AED5 -  -  -  -  	;ld a,$DD
  329 D1:AED5 -  -  -  -  	;call write_a_to_ram
  330 D1:AED5 -  -  -  -  	;ld a,e 
  331 D1:AED5 -  -  -  -  	;call write_a_to_ram
  332 D1:AED5 -  -  -  -  	
  333 D1:AED5 -  -  -  -  	
  334 D1:AED5 CB 53 -  -  	bit 2,e 
  335 D1:AED7 CA F9 AE D1 	jp z, sdcomp_get_color_from_index_2l
  336 D1:AEDB -  -  -  -  	
  337 D1:AEDB -  -  -  -  	;Bit 2 = 1 
  338 D1:AEDB CB 4B -  -  	bit 1,e 
  339 D1:AEDD CA ED AE D1 	jp z,sdcomp_get_color_from_index_2h1l
  340 D1:AEE1 -  -  -  -  
  341 D1:AEE1 -  -  -  -  	;bit 2 = 1 1 = 1
  342 D1:AEE1 -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  343 D1:AEE1 3E 00 -  -  	ld a,0
  344 D1:AEE3 CB 43 -  -  	bit 0,e 
  345 D1:AEE5 CA 1B AF D1 	jp z,sdcomp_get_color_from_index_msn
  346 D1:AEE9 C3 17 AF D1 	jp sdcomp_get_color_from_index_lsn
  347 D1:AEED -  -  -  -  
  348 D1:AEED -  -  -  -  sdcomp_get_color_from_index_2h1l:
  349 D1:AEED -  -  -  -  	;2 = 1 1 = 0 
  350 D1:AEED -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  351 D1:AEED 3E 00 -  -  	ld a,0
  352 D1:AEEF CB 43 -  -  	bit 0,e 
  353 D1:AEF1 CA 1B AF D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:AEF5 C3 17 AF D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:AEF9 -  -  -  -  	
  356 D1:AEF9 -  -  -  -  sdcomp_get_color_from_index_2l:
  357 D1:AEF9 -  -  -  -  	;bit 2 was 0 
  358 D1:AEF9 CB 4B -  -  	bit 1,e 
  359 D1:AEFB CA 0B AF D1 	jp z,sdcomp_get_color_from_index_2l1l
  360 D1:AEFF -  -  -  -  	
  361 D1:AEFF -  -  -  -  	;bit 2 = 0 1 = 1
  362 D1:AEFF -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  363 D1:AEFF 3E 00 -  -  	ld a,0
  364 D1:AF01 CB 43 -  -  	bit 0,e 
  365 D1:AF03 CA 1B AF D1 	jp z,sdcomp_get_color_from_index_msn
  366 D1:AF07 C3 17 AF D1 	jp sdcomp_get_color_from_index_lsn
  367 D1:AF0B -  -  -  -  	
  368 D1:AF0B -  -  -  -  sdcomp_get_color_from_index_2l1l:
  369 D1:AF0B -  -  -  -  	;bit 2 =0  1 = 0
  370 D1:AF0B -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  371 D1:AF0B 3E 00 -  -  	ld a,0
  372 D1:AF0D -  -  -  -  	
  373 D1:AF0D CB 43 -  -  	bit 0,e 
  374 D1:AF0F CA 1B AF D1 	jp z,sdcomp_get_color_from_index_msn
  375 D1:AF13 C3 17 AF D1 	jp sdcomp_get_color_from_index_lsn
  376 D1:AF17 -  -  -  -  sdcomp_get_color_from_index_lsn:
  377 D1:AF17 E6 0F -  -  	and %00001111;and with least significant nibble 
  378 D1:AF19 D1 -  -  -  	pop de 
  379 D1:AF1A C9 -  -  -  	ret 
  380 D1:AF1B -  -  -  -  	
  381 D1:AF1B -  -  -  -  sdcomp_get_color_from_index_msn:
  382 D1:AF1B E6 F0 -  -  	and %11110000;and with most significant nibble 
  383 D1:AF1D 0F -  -  -  	rrca 
  384 D1:AF1E 0F -  -  -  	rrca 
  385 D1:AF1F 0F -  -  -  	rrca 
  386 D1:AF20 0F -  -  -  	rrca 
  387 D1:AF21 D1 -  -  -  	pop de 
  388 D1:AF22 C9 -  -  -  	ret 
  389 D1:AF23 -  -  -  -  
  390 D1:AF23 -  -  -  -  
  391 D1:AF23 -  -  -  -  
  392 D1:AF23 -  -  -  -  ;function for traversing sprite data for reversed sprites
  393 D1:AF23 -  -  -  -  ;not in shadow ,destroys a
  394 D1:AF23 -  -  -  -  sdcomp_traverse_line_data:
  395 D1:AF23 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  396 D1:AF23 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  397 D1:AF27 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  398 D1:AF27 0E 00 -  -  	ld c,0 ;load end of previous color data line
  399 D1:AF29 D9 -  -  -  	exx;toshadow 
  400 D1:AF2A -  -  -  -  	
  401 D1:AF2A -  -  -  -  	;load end of previous alpha data line 
  402 D1:AF2A -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  403 D1:AF2A 21 00 00 00 	ld hl,0
  404 D1:AF2E -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  405 D1:AF2E 0E 00 -  -  	ld c,0
  406 D1:AF30 D5 -  -  -  	push de
  407 D1:AF31 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  408 D1:AF31 3E 00 -  -  	ld a, 0
  409 D1:AF33 5F -  -  -  	ld e,a ;e holds sprite width 
  410 D1:AF34 -  -  -  -  	
  411 D1:AF34 -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  412 D1:AF34 -  -  -  -  sdcomp_traverse_line_data_loop:
  413 D1:AF34 CB 09 -  -  	rrc c 
  414 D1:AF36 D2 3B AF D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  415 D1:AF3A 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  416 D1:AF3B -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  417 D1:AF3B 7E -  -  -  	ld a,(hl)
  418 D1:AF3C A1 -  -  -  	and c ;read alpha data 
  419 D1:AF3D -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  420 D1:AF3D CA 53 AF D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  421 D1:AF41 D9 -  -  -  	exx;out of shadow 
  422 D1:AF42 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  423 D1:AF42 CB 09 -  -  	rrc c ;rotate mask
  424 D1:AF44 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  425 D1:AF44 CB 09 -  -  	rrc c ;replace with rrc a for 1bpc (not nop because rrc c is 2 byte operation)
  426 D1:AF46 -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  427 D1:AF46 CB 09 -  -  	rrc c;rrc a for 2bpc
  428 D1:AF48 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  429 D1:AF48 CB 09 -  -  	rrc c
  430 D1:AF4A -  -  -  -  	
  431 D1:AF4A -  -  -  -  	;check if end of byte was reached during rotations
  432 D1:AF4A 79 -  -  -  	ld a,c
  433 D1:AF4B -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  434 D1:AF4B E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  435 D1:AF4D CA 52 AF D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  436 D1:AF51 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  437 D1:AF52 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  438 D1:AF52 D9 -  -  -  	exx ;toshadow
  439 D1:AF53 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  440 D1:AF53 1D -  -  -  	dec e ;e holds sprite width 
  441 D1:AF54 C2 34 AF D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  442 D1:AF58 D1 -  -  -  	pop de  ;back to write location 
  443 D1:AF59 -  -  -  -  	;set new end of line pointers 
  444 D1:AF59 22 2B AF D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  445 D1:AF5D 79 -  -  -  	ld a,c
  446 D1:AF5E 32 2F AF D1 	ld (sdcomp_alpha_data_line_end_mask),a
  447 D1:AF62 D9 -  -  -  	exx ;out
  448 D1:AF63 22 24 AF D1 	ld (sdcomp_color_data_line_end_byte),hl
  449 D1:AF67 79 -  -  -  	ld a,c 
  450 D1:AF68 32 28 AF D1 	ld (sdcomp_color_data_line_end_mask),a
  451 D1:AF6C C9 -  -  -  	ret
  452 D1:AF6D -  -  -  -  
  453 D1:AF6D -  -  -  -  
  454 D1:AF6D -  -  -  -  
  455 D1:AF6D -  -  -  -  
  456 D1:AF6D -  -  -  -  
  457 D1:AF6D -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  458 D1:AF6D -  -  -  -  sdcomp_write_ldir_data_loop:
  459 D1:AF6D CD 87 AE D1 	call sdcomp_get_next_color
  460 D1:AF71 47 -  -  -  	ld b,a;first pixel
  461 D1:AF72 CD 7E AE D1 	call sdcomp_get_next_color_leading_nibble
  462 D1:AF76 B0 -  -  -  	or b
  463 D1:AF77 -  -  -  -  	
  464 D1:AF77 -  -  -  -  	
  465 D1:AF77 12 -  -  -  	ld (de),a;write color data
  466 D1:AF78 13 -  -  -  	inc de
  467 D1:AF79 D9 -  -  -  	exx;to shadow
  468 D1:AF7A 05 -  -  -  	dec b;ldir length counter
  469 D1:AF7B D9 -  -  -  	exx
  470 D1:AF7C C2 6D AF D1 	jp nz,sdcomp_write_ldir_data_loop
  471 D1:AF80 C9 -  -  -  	ret
  472 D1:AF81 -  -  -  -  	
  473 D1:AF81 -  -  -  -  
  474 D1:AF81 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  475 D1:AF81 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  476 D1:AF81 D5 -  -  -  	push de ;output location	
  477 D1:AF82 47 -  -  -  	ld b,a;save for later
  478 D1:AF83 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  479 D1:AF85 3E 00 -  -  	ld a,0
  480 D1:AF87 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  481 D1:AF89 CA 93 AF D1 	jp z,sdcomp_leading_pixel_first_skip
  482 D1:AF8D -  -  -  -  	;has first color
  483 D1:AF8D 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  484 D1:AF8F CD 87 AE D1 	call sdcomp_get_next_color
  485 D1:AF93 -  -  -  -  sdcomp_leading_pixel_first_skip:
  486 D1:AF93 -  -  -  -  	;a is either $00 or $0color1
  487 D1:AF93 -  -  -  -  	
  488 D1:AF93 1E FF -  -  	ld e,%11111111;assuming no colors
  489 D1:AF95 -  -  -  -  	
  490 D1:AF95 CB 40 -  -  	bit 0,b;check second pixel alpha
  491 D1:AF97 47 -  -  -  	ld b,a;save for later 
  492 D1:AF98 3E 00 -  -  	ld a,0
  493 D1:AF9A CA A4 AF D1 	jp z,sdcomp_leading_pixel_second_skip;
  494 D1:AF9E -  -  -  -  	;has second color 
  495 D1:AF9E CD 7E AE D1 	call sdcomp_get_next_color_leading_nibble
  496 D1:AFA2 -  -  -  -  	;a = color2 0 
  497 D1:AFA2 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  498 D1:AFA4 -  -  -  -  	
  499 D1:AFA4 -  -  -  -  sdcomp_leading_pixel_second_skip:
  500 D1:AFA4 -  -  -  -  	;a is either 00 or c2 0 
  501 D1:AFA4 -  -  -  -  	;b is either 00 or 0 c1 
  502 D1:AFA4 B0 -  -  -  	or b 
  503 D1:AFA5 47 -  -  -  	ld b,a;final color data
  504 D1:AFA6 7A -  -  -  	ld a,d 
  505 D1:AFA7 A3 -  -  -  	and e ;final mask data 
  506 D1:AFA8 -  -  -  -  	
  507 D1:AFA8 D1 -  -  -  	pop de;return to pointer 
  508 D1:AFA9 -  -  -  -  	
  509 D1:AFA9 12 -  -  -  	ld (de),a;write mask data 
  510 D1:AFAA 13 -  -  -  	inc de 
  511 D1:AFAB 78 -  -  -  	ld a,b;color data 
  512 D1:AFAC 12 -  -  -  	ld (de),a;write color data 
  513 D1:AFAD -  -  -  -  	
  514 D1:AFAD -  -  -  -  	
  515 D1:AFAD -  -  -  -  	
  516 D1:AFAD -  -  -  -  	;call write_a_to_ram
  517 D1:AFAD -  -  -  -  	
  518 D1:AFAD 13 -  -  -  	inc de 
  519 D1:AFAE C9 -  -  -  	ret 
  520 D1:AFAF -  -  -  -  
  521 D1:AFAF -  -  -  -  
  522 D1:AFAF -  -  -  -  
  523 D1:AFAF -  -  -  -  ;ENTRY POINT 
  524 D1:AFAF -  -  -  -  
  525 D1:AFAF -  -  -  -  
  526 D1:AFAF -  -  -  -  ;hl = sprite data start, de = main data decompress location
  527 D1:AFAF -  -  -  -  sprite_decompress:
  528 D1:AFAF -  -  -  -  
  529 D1:AFAF -  -  -  -  
  530 D1:AFAF -  -  -  -  	;SETUP ===========================================================================================================
  531 D1:AFAF -  -  -  -  
  532 D1:AFAF -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  533 D1:AFAF -  -  -  -  
  534 D1:AFAF -  -  -  -  	;HL pointing to flags registers
  535 D1:AFAF -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  536 D1:AFAF -  -  -  -  	;set bpc mode 
  537 D1:AFAF CB 7E -  -  	bit 7,(hl)
  538 D1:AFB1 C4 BB B1 D1 	call nz,sdcomp_set_4bpc
  539 D1:AFB5 CB 76 -  -  	bit 6,(hl)
  540 D1:AFB7 C4 94 B1 D1 	call nz,sdcomp_set_3bpc 
  541 D1:AFBB CB 6E -  -  	bit 5,(hl)
  542 D1:AFBD C4 73 B1 D1 	call nz,sdcomp_set_2bpc 
  543 D1:AFC1 CB 66 -  -  	bit 4,(hl)
  544 D1:AFC3 C4 58 B1 D1 	call nz,sdcomp_set_1bpc 
  545 D1:AFC7 CB 5E -  -  	bit 3,(hl)
  546 D1:AFC9 C4 43 B1 D1 	call nz,sdcomp_set_0bpc 
  547 D1:AFCD CB 56 -  -  	bit 2,(hl)
  548 D1:AFCF C4 E2 B1 D1 	call nz,sdcomp_set_noalpha
  549 D1:AFD3 -  -  -  -  	
  550 D1:AFD3 -  -  -  -  	
  551 D1:AFD3 -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  552 D1:AFD3 -  -  -  -  	
  553 D1:AFD3 23 -  -  -  	inc hl ;hl points to width in px 
  554 D1:AFD4 -  -  -  -  	
  555 D1:AFD4 -  -  -  -  	
  556 D1:AFD4 7E -  -  -  	ld a,(hl) 
  557 D1:AFD5 32 32 AF D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  558 D1:AFD9 32 1F AE D1 	ld (sdcomp_sprite_width_2),a
  559 D1:AFDD 47 -  -  -  	ld b,a;width
  560 D1:AFDE 08 -  -  -  	ex af,af' ;'
  561 D1:AFDF 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  562 D1:AFE0 08 -  -  -  	ex af,af' ;' 
  563 D1:AFE1 -  -  -  -  
  564 D1:AFE1 -  -  -  -  
  565 D1:AFE1 -  -  -  -  sdcomp_offset_2 .equ $ 
  566 D1:AFE1 00 -  -  -  	nop ;replace with inc b for offset 
  567 D1:AFE2 -  -  -  -  
  568 D1:AFE2 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  569 D1:AFE2 04 -  -  -  	inc b ;round up on odd sprites
  570 D1:AFE3 CB 38 -  -  	srl b;divide by 2
  571 D1:AFE5 -  -  -  -  	
  572 D1:AFE5 -  -  -  -  	
  573 D1:AFE5 3E A0 -  -  	ld a,160
  574 D1:AFE7 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  575 D1:AFE8 32 7D B0 D1 	ld (sdcomp_gap_btwn_rows),a 
  576 D1:AFEC -  -  -  -  	
  577 D1:AFEC CD 34 AA D1 	call write_a_to_ram
  578 D1:AFF0 3E BE -  -  	ld a,$BE
  579 D1:AFF2 CD 34 AA D1 	call write_a_to_ram
  580 D1:AFF6 78 -  -  -  	ld a,b 
  581 D1:AFF7 CD 34 AA D1 	call write_a_to_ram
  582 D1:AFFB -  -  -  -  	
  583 D1:AFFB -  -  -  -  	
  584 D1:AFFB 7E -  -  -  	ld a,(hl);load width again
  585 D1:AFFC -  -  -  -  	
  586 D1:AFFC 47 -  -  -  	ld b,a 
  587 D1:AFFD -  -  -  -  	
  588 D1:AFFD 37 -  -  -  	scf
  589 D1:AFFE -  -  -  -  sdcomp_bg_1 .equ $
  590 D1:AFFE DA 04 B0 D1 	jp c,sdcomp_bg_1_skip ;if not BG then skip
  591 D1:B002 -  -  -  -  	
  592 D1:B002 -  -  -  -  	;TODO calculate correct width data , add offset and rounded to even number
  593 D1:B002 -  -  -  -  	
  594 D1:B002 -  -  -  -  	;write width data to de
  595 D1:B002 12 -  -  -  	ld (de), a 
  596 D1:B003 13 -  -  -  	inc de 
  597 D1:B004 -  -  -  -  sdcomp_bg_1_skip:
  598 D1:B004 -  -  -  -  
  599 D1:B004 23 -  -  -  	inc hl ;hl points to height 
  600 D1:B005 7E -  -  -  	ld a,(hl);height
  601 D1:B006 32 E8 AD D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  602 D1:B00A -  -  -  -  	
  603 D1:B00A -  -  -  -  	
  604 D1:B00A 37 -  -  -  	scf
  605 D1:B00B -  -  -  -  sdcomp_bg_2 .equ $
  606 D1:B00B D2 11 B0 D1 	jp nc,sdcomp_bg_2_skip ; skip if BG
  607 D1:B00F -  -  -  -  	
  608 D1:B00F -  -  -  -  	
  609 D1:B00F 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  610 D1:B010 13 -  -  -  	inc de 
  611 D1:B011 -  -  -  -  	
  612 D1:B011 -  -  -  -  sdcomp_bg_2_skip:
  613 D1:B011 -  -  -  -  	
  614 D1:B011 23 -  -  -  	inc hl ;HL points to start of alpha data 
  615 D1:B012 -  -  -  -  
  616 D1:B012 E5 -  -  -  	push hl ;Save alpha data 
  617 D1:B013 -  -  -  -  	
  618 D1:B013 -  -  -  -  	
  619 D1:B013 -  -  -  -  	;Need to find start of color data
  620 D1:B013 -  -  -  -  	;at this point a = height, b = width 
  621 D1:B013 -  -  -  -  	
  622 D1:B013 37 -  -  -  	scf
  623 D1:B014 -  -  -  -  	
  624 D1:B014 -  -  -  -  sdcomp_no_alpha_2 .equ $
  625 D1:B014 D2 2D B0 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  626 D1:B018 -  -  -  -  	
  627 D1:B018 -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  628 D1:B018 -  -  -  -  	
  629 D1:B018 E5 -  -  -  	push hl
  630 D1:B019 67 -  -  -  	ld h,a;height
  631 D1:B01A 68 -  -  -  	ld l,b;width
  632 D1:B01B ED 6C -  -  	mlt hl;number of pixels
  633 D1:B01D -  -  -  -  	;rounds up to nearest multiple of 8
  634 D1:B01D 2B -  -  -  	dec hl
  635 D1:B01E CB 3C -  -  	srl h
  636 D1:B020 CB 1D -  -  	rr l
  637 D1:B022 CB 3C -  -  	srl h
  638 D1:B024 CB 1D -  -  	rr l 
  639 D1:B026 CB 3C -  -  	srl h 
  640 D1:B028 CB 1D -  -  	rr l 
  641 D1:B02A 23 -  -  -  	inc hl 
  642 D1:B02B C1 -  -  -  	pop bc ;initial hl location
  643 D1:B02C -  -  -  -  	;add number of bytes to skip 
  644 D1:B02C 09 -  -  -  	add hl,bc ;HL points to start of color data 
  645 D1:B02D -  -  -  -  	
  646 D1:B02D -  -  -  -  	
  647 D1:B02D -  -  -  -  	
  648 D1:B02D -  -  -  -  sdcomp_no_alpha_2_skip:
  649 D1:B02D -  -  -  -  
  650 D1:B02D -  -  -  -  	
  651 D1:B02D -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  652 D1:B02D -  -  -  -  
  653 D1:B02D -  -  -  -  	
  654 D1:B02D 47 -  -  -  	ld b,a ;save for after
  655 D1:B02E -  -  -  -  	;GET LOCAL PALETTE DATA
  656 D1:B02E -  -  -  -  	
  657 D1:B02E 37 -  -  -  	scf 
  658 D1:B02F -  -  -  -  sdcomp_1bpc_1 .equ $ 
  659 D1:B02F D2 39 B0 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  660 D1:B033 -  -  -  -  	
  661 D1:B033 7E -  -  -  	ld a,(hl);color data 
  662 D1:B034 32 0C AF D1 	ld (sdcomp_indexed_color_data_1),a 
  663 D1:B038 23 -  -  -  	inc hl 
  664 D1:B039 -  -  -  -  	
  665 D1:B039 -  -  -  -  sdcomp_1bpc_1_skip:	
  666 D1:B039 -  -  -  -  
  667 D1:B039 -  -  -  -  
  668 D1:B039 37 -  -  -  	scf 
  669 D1:B03A -  -  -  -  sdcomp_2bpc_1 .equ $ 
  670 D1:B03A D2 44 B0 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  671 D1:B03E -  -  -  -  	
  672 D1:B03E 7E -  -  -  	ld a,(hl);color data 
  673 D1:B03F 32 00 AF D1 	ld (sdcomp_indexed_color_data_2),a 
  674 D1:B043 23 -  -  -  	inc hl 
  675 D1:B044 -  -  -  -  	
  676 D1:B044 -  -  -  -  sdcomp_2bpc_1_skip:	
  677 D1:B044 -  -  -  -  
  678 D1:B044 -  -  -  -  
  679 D1:B044 37 -  -  -  	scf 
  680 D1:B045 -  -  -  -  sdcomp_3bpc_1 .equ $ 
  681 D1:B045 DA 55 B0 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  682 D1:B049 -  -  -  -  	
  683 D1:B049 7E -  -  -  	ld a,(hl);color data 
  684 D1:B04A 32 EE AE D1 	ld (sdcomp_indexed_color_data_3),a 
  685 D1:B04E 23 -  -  -  	inc hl 
  686 D1:B04F 7E -  -  -  	ld a,(hl);color data 
  687 D1:B050 32 E2 AE D1 	ld (sdcomp_indexed_color_data_4),a 
  688 D1:B054 23 -  -  -  	inc hl 
  689 D1:B055 -  -  -  -  	
  690 D1:B055 -  -  -  -  sdcomp_3bpc_1_skip:	
  691 D1:B055 -  -  -  -  
  692 D1:B055 -  -  -  -  	
  693 D1:B055 D5 -  -  -  	push de ;loops/line data location
  694 D1:B056 EB -  -  -  	ex de,hl
  695 D1:B057 78 -  -  -  	ld a,b
  696 D1:B058 01 00 00 00 	ld bc,0
  697 D1:B05C 4F -  -  -  	ld c,a;height 
  698 D1:B05D 09 -  -  -  	add hl,bc
  699 D1:B05E EB -  -  -  	ex de,hl;de points to data write location
  700 D1:B05F -  -  -  -  	
  701 D1:B05F -  -  -  -  	
  702 D1:B05F D9 -  -  -  	exx;in to shadow
  703 D1:B060 D1 -  -  -  	pop de 
  704 D1:B061 E1 -  -  -  	pop hl ;alpha data stored from earlier
  705 D1:B062 0E 80 -  -  	ld c,%10000000;alpha mask
  706 D1:B064 D9 -  -  -  	exx;out 
  707 D1:B065 0E 80 -  -  	ld c,%10000000;color mask
  708 D1:B067 -  -  -  -  	
  709 D1:B067 -  -  -  -  	;HL now points to pixel color data 
  710 D1:B067 -  -  -  -  	;HL' points to pixel alpha data 
  711 D1:B067 -  -  -  -  	;C holds color mask
  712 D1:B067 -  -  -  -  	;C' holds alpha mask
  713 D1:B067 -  -  -  -  	;DE' holds loops/line output data location
  714 D1:B067 -  -  -  -  	;DE holds main data output location
  715 D1:B067 -  -  -  -  	;A holds height
  716 D1:B067 -  -  -  -  	;A' holds bits remaining in row
  717 D1:B067 -  -  -  -  
  718 D1:B067 -  -  -  -  	;TODO jump to BG routine here
  719 D1:B067 -  -  -  -  	;END SETUP ======================================================================================================
  720 D1:B067 -  -  -  -  	
  721 D1:B067 -  -  -  -  	
  722 D1:B067 -  -  -  -  sdcomp_find_gap_length:
  723 D1:B067 -  -  -  -  	
  724 D1:B067 -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  725 D1:B067 -  -  -  -  ;this will occur if:
  726 D1:B067 -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  727 D1:B067 -  -  -  -  ;
  728 D1:B067 -  -  -  -  ;during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  729 D1:B067 -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  730 D1:B067 -  -  -  -  	
  731 D1:B067 -  -  -  -  	;INC LOOP/LINE count
  732 D1:B067 -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
  733 D1:B067 3E 00 -  -  	ld a,0;inc number of loops
  734 D1:B069 3C -  -  -  	inc a 
  735 D1:B06A 32 68 B0 D1 	ld (sdcomp_loops_per_line_counter),a
  736 D1:B06E -  -  -  -  	
  737 D1:B06E D9 -  -  -  	exx ;to shadow
  738 D1:B06F -  -  -  -  	
  739 D1:B06F -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  740 D1:B06F 06 00 -  -  	ld b,0;00 pairs found 
  741 D1:B071 3E 00 -  -  	ld a,0 ;reset
  742 D1:B073 32 70 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  743 D1:B077 -  -  -  -  
  744 D1:B077 -  -  -  -  sdcomp_find_gap_length_loop:
  745 D1:B077 -  -  -  -  
  746 D1:B077 37 -  -  -  	scf 
  747 D1:B078 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  748 D1:B078 DA 91 B0 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  749 D1:B07C -  -  -  -  	
  750 D1:B07C -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  751 D1:B07C -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  752 D1:B07C 3E 00 -  -  	ld a,0
  753 D1:B07E 80 -  -  -  	add a,b 
  754 D1:B07F -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  755 D1:B07F 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  756 D1:B080 47 -  -  -  	ld b,a 
  757 D1:B081 3E 00 -  -  	ld a,%00000000 ;nop 
  758 D1:B083 32 7F B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  759 D1:B087 3E DA -  -  	ld a,%11011010;jp c
  760 D1:B089 32 A7 AD D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  761 D1:B08D 32 78 B0 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  762 D1:B091 -  -  -  -  	
  763 D1:B091 -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  764 D1:B091 CD 32 AE D1 	call sdcomp_get_next_alpha_pair
  765 D1:B095 -  -  -  -  	;call write_a_to_ram
  766 D1:B095 04 -  -  -  	inc b 
  767 D1:B096 -  -  -  -  
  768 D1:B096 F5 -  -  -  	push af ;TEST
  769 D1:B097 3E AB -  -  	ld a,$AB;TEST
  770 D1:B099 CD 34 AA D1 	call write_a_to_ram
  771 D1:B09D -  -  -  -  	
  772 D1:B09D -  -  -  -  	;call write_a_to_ram
  773 D1:B09D F1 -  -  -  	pop af ;TEST
  774 D1:B09E -  -  -  -  	
  775 D1:B09E B7 -  -  -  	or a
  776 D1:B09F CA 77 B0 D1 	jp z,sdcomp_find_gap_length_loop
  777 D1:B0A3 -  -  -  -  	
  778 D1:B0A3 -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  779 D1:B0A3 -  -  -  -  	
  780 D1:B0A3 F5 -  -  -  	push af; save leading pixel alpha data 
  781 D1:B0A4 -  -  -  -  	;B holds number of 00 pairs + 1
  782 D1:B0A4 -  -  -  -  	
  783 D1:B0A4 3E AA -  -  	ld a,$AA ;test
  784 D1:B0A6 CD 34 AA D1 	call write_a_to_ram
  785 D1:B0AA 78 -  -  -  	ld a,b ;test
  786 D1:B0AB CD 34 AA D1 	call write_a_to_ram
  787 D1:B0AF -  -  -  -  	
  788 D1:B0AF -  -  -  -  
  789 D1:B0AF -  -  -  -  	
  790 D1:B0AF -  -  -  -  	;Write gap length data to output
  791 D1:B0AF 78 -  -  -  	ld a,b 
  792 D1:B0B0 D9 -  -  -  	exx;out of shadow 
  793 D1:B0B1 12 -  -  -  	ld (de),a;GAP LENGTH 
  794 D1:B0B2 13 -  -  -  	inc de 
  795 D1:B0B3 D9 -  -  -  	exx;into shadow 	
  796 D1:B0B4 -  -  -  -  	
  797 D1:B0B4 -  -  -  -  	
  798 D1:B0B4 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  799 D1:B0B4 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  800 D1:B0B5 -  -  -  -  	
  801 D1:B0B5 D9 -  -  -  	exx;out of shadow
  802 D1:B0B6 CD 81 AF D1 	call sdcomp_write_leading_or_end_pixels
  803 D1:B0BA D9 -  -  -  	exx;into shadow 
  804 D1:B0BB -  -  -  -  	
  805 D1:B0BB -  -  -  -  
  806 D1:B0BB -  -  -  -  	
  807 D1:B0BB -  -  -  -  ;LDIR ==============================================================================================================	
  808 D1:B0BB -  -  -  -  	;Count number of 11 pairs for LDIR section
  809 D1:B0BB -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  810 D1:B0BB -  -  -  -  	;
  811 D1:B0BB -  -  -  -  	
  812 D1:B0BB -  -  -  -  	;If ending is 11 -> 00 
  813 D1:B0BB -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  814 D1:B0BB -  -  -  -  	;Will need to reduce b by 1 
  815 D1:B0BB -  -  -  -  	
  816 D1:B0BB -  -  -  -  	;If ending is 11 ->01/10
  817 D1:B0BB -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  818 D1:B0BB -  -  -  -  	
  819 D1:B0BB -  -  -  -  sdcomp_ldir_start:
  820 D1:B0BB -  -  -  -  
  821 D1:B0BB -  -  -  -  ;	ld a, %11010010 ;jp nc 
  822 D1:B0BB -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  823 D1:B0BB -  -  -  -  
  824 D1:B0BB 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  825 D1:B0BD -  -  -  -  sdcomp_ldir_loop:
  826 D1:B0BD CD 32 AE D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  827 D1:B0C1 04 -  -  -  	inc b 
  828 D1:B0C2 -  -  -  -  	
  829 D1:B0C2 F5 -  -  -  	push af 
  830 D1:B0C3 3E DE -  -  	ld a,$DE 
  831 D1:B0C5 CD 34 AA D1 	call write_a_to_ram
  832 D1:B0C9 F1 -  -  -  	pop af
  833 D1:B0CA CD 34 AA D1 	call write_a_to_ram
  834 D1:B0CE -  -  -  -  	
  835 D1:B0CE -  -  -  -  ;	scf 
  836 D1:B0CE -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  837 D1:B0CE -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  838 D1:B0CE -  -  -  -  	
  839 D1:B0CE EE FF -  -  	xor %11111111;flip all bits 
  840 D1:B0D0 CA BD B0 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  841 D1:B0D4 EE FF -  -  	xor %11111111 ; flip back 
  842 D1:B0D6 -  -  -  -  sdcomp_ldir_loop_end:
  843 D1:B0D6 -  -  -  -  
  844 D1:B0D6 -  -  -  -  	
  845 D1:B0D6 -  -  -  -  	;at this point b holds # 11 pairs +1 
  846 D1:B0D6 -  -  -  -  	
  847 D1:B0D6 -  -  -  -  	
  848 D1:B0D6 -  -  -  -  
  849 D1:B0D6 -  -  -  -  	
  850 D1:B0D6 -  -  -  -  	
  851 D1:B0D6 05 -  -  -  	dec b ;b holds # 11 pairs 
  852 D1:B0D7 CA 0E B1 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  853 D1:B0DB B7 -  -  -  	or a
  854 D1:B0DC C2 F3 B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  855 D1:B0E0 -  -  -  -  	
  856 D1:B0E0 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  857 D1:B0E0 -  -  -  -  	
  858 D1:B0E0 3E DF -  -  	ld a,$DF
  859 D1:B0E2 CD 34 AA D1 	call write_a_to_ram
  860 D1:B0E6 -  -  -  -  	
  861 D1:B0E6 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  862 D1:B0E6 -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  863 D1:B0E6 3E 01 -  -  	ld a,1;start w 1 gap len
  864 D1:B0E8 32 70 B0 D1 	ld (sdcomp_add_1_gap_length),a 
  865 D1:B0EC 3E FF -  -  	ld a,$ff;ending pixels 11
  866 D1:B0EE -  -  -  -  	
  867 D1:B0EE 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  868 D1:B0EF CA 0E B1 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  869 D1:B0F3 -  -  -  -  	;b holds ldir length 
  870 D1:B0F3 -  -  -  -  	
  871 D1:B0F3 -  -  -  -  
  872 D1:B0F3 -  -  -  -  ;b holds ldir length, a holds ending pixels
  873 D1:B0F3 -  -  -  -  sdcomp_ldir_write:
  874 D1:B0F3 -  -  -  -  
  875 D1:B0F3 -  -  -  -  	;b holds 11 pairs found 
  876 D1:B0F3 F5 -  -  -  	push af;TEST
  877 D1:B0F4 3E DA -  -  	ld a,$DA 
  878 D1:B0F6 CD 34 AA D1 	call write_a_to_ram
  879 D1:B0FA 78 -  -  -  	ld a,b 
  880 D1:B0FB CD 34 AA D1 	call write_a_to_ram
  881 D1:B0FF F1 -  -  -  	pop af ;TEST
  882 D1:B100 -  -  -  -  
  883 D1:B100 F5 -  -  -  	push af;save ending pixels
  884 D1:B101 78 -  -  -  	ld a,b
  885 D1:B102 D9 -  -  -  	exx ;out 
  886 D1:B103 12 -  -  -  	ld (de),a;write ldir length
  887 D1:B104 13 -  -  -  	inc de 
  888 D1:B105 CD 6D AF D1 	call sdcomp_write_ldir_data_loop
  889 D1:B109 -  -  -  -  
  890 D1:B109 F1 -  -  -  	pop af;return ending pixels
  891 D1:B10A -  -  -  -  	
  892 D1:B10A C3 21 B1 D1 	jp sdcomp_write_end_pixels
  893 D1:B10E -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  894 D1:B10E -  -  -  -  
  895 D1:B10E F5 -  -  -  	push af ;TEST
  896 D1:B10F -  -  -  -  
  897 D1:B10F 3E DB -  -  	ld a,$DB
  898 D1:B111 CD 34 AA D1 	call write_a_to_ram
  899 D1:B115 F1 -  -  -  	pop af ;TEST
  900 D1:B116 CD 34 AA D1 	call write_a_to_ram
  901 D1:B11A -  -  -  -  
  902 D1:B11A F5 -  -  -  	push af;save end pixels
  903 D1:B11B -  -  -  -  	
  904 D1:B11B D9 -  -  -  	exx;out of shadow
  905 D1:B11C 3E 00 -  -  	ld a,0
  906 D1:B11E 12 -  -  -  	ld (de),a ;write 0 as ldir length
  907 D1:B11F 13 -  -  -  	inc de 
  908 D1:B120 F1 -  -  -  	pop af;return ending pixels
  909 D1:B121 -  -  -  -  
  910 D1:B121 -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  911 D1:B121 -  -  -  -  
  912 D1:B121 -  -  -  -  sdcomp_write_end_pixels:
  913 D1:B121 -  -  -  -  ;not in shadow
  914 D1:B121 -  -  -  -  	
  915 D1:B121 -  -  -  -  	;test
  916 D1:B121 F5 -  -  -  	push af 
  917 D1:B122 3E E0 -  -  	ld a,$E0
  918 D1:B124 CD 34 AA D1 	call write_a_to_ram
  919 D1:B128 F1 -  -  -  	pop af 
  920 D1:B129 -  -  -  -  	
  921 D1:B129 -  -  -  -  
  922 D1:B129 CD 81 AF D1 	call sdcomp_write_leading_or_end_pixels
  923 D1:B12D -  -  -  -  	
  924 D1:B12D -  -  -  -  	
  925 D1:B12D -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  926 D1:B12D -  -  -  -  	;ld a,2
  927 D1:B12D -  -  -  -  	;dec a 
  928 D1:B12D -  -  -  -  	;jp z,sdcomp_end
  929 D1:B12D -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  930 D1:B12D -  -  -  -  	
  931 D1:B12D 3E EA -  -  	ld a,$EA
  932 D1:B12F CD 34 AA D1 	call write_a_to_ram
  933 D1:B133 -  -  -  -  	
  934 D1:B133 37 -  -  -  	scf 
  935 D1:B134 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  936 D1:B134 D2 3C B1 D1 	jp nc,sdcomp_end
  937 D1:B138 -  -  -  -  
  938 D1:B138 -  -  -  -  	
  939 D1:B138 C3 67 B0 D1 	jp sdcomp_find_gap_length 
  940 D1:B13C -  -  -  -  	
  941 D1:B13C -  -  -  -  sdcomp_end:
  942 D1:B13C -  -  -  -  	
  943 D1:B13C 3E 69 -  -  	ld a,$69
  944 D1:B13E CD 34 AA D1 	call write_a_to_ram
  945 D1:B142 -  -  -  -  	
  946 D1:B142 C9 -  -  -  	ret 
  947 D1:B143 -  -  -  -  
  948 D1:B143 -  -  -  -  
  949 D1:B143 -  -  -  -  ;bit orders
  950 D1:B143 -  -  -  -  ;	noflip   flip 
  951 D1:B143 -  -  -  -  ;4bpp 3210 	 0123
  952 D1:B143 -  -  -  -  ;3bpp 210	 012
  953 D1:B143 -  -  -  -  ;2bpp 10	 01
  954 D1:B143 -  -  -  -  ;1bpp 0		 0
  955 D1:B143 -  -  -  -  
  956 D1:B143 -  -  -  -  
  957 D1:B143 -  -  -  -  sdcomp_set_0bpc:
  958 D1:B143 3E DA -  -  	ld a,%11011010;jp c
  959 D1:B145 32 8B AE D1 	ld (sdcomp_0bpc),a
  960 D1:B149 -  -  -  -  	
  961 D1:B149 32 3A B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
  962 D1:B14D 32 45 B0 D1 	ld (sdcomp_3bpc_1),a 
  963 D1:B151 -  -  -  -  	
  964 D1:B151 3E D2 -  -  	ld a, %11010010 ;jp nc 
  965 D1:B153 32 2F B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
  966 D1:B157 -  -  -  -  	
  967 D1:B157 C9 -  -  -  	ret 
  968 D1:B158 -  -  -  -  	
  969 D1:B158 -  -  -  -  sdcomp_set_1bpc:
  970 D1:B158 3E DA -  -  	ld a,%11011010;jp c
  971 D1:B15A 32 9D AE D1 	ld (sdcomp_1bpc),a
  972 D1:B15E -  -  -  -  	
  973 D1:B15E 32 3A B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
  974 D1:B162 32 45 B0 D1 	ld (sdcomp_3bpc_1),a 
  975 D1:B166 -  -  -  -  	
  976 D1:B166 3E D2 -  -  	ld a, %11010010 ;jp nc 
  977 D1:B168 32 2F B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
  978 D1:B16C -  -  -  -  	
  979 D1:B16C -  -  -  -  	
  980 D1:B16C 3E C3 -  -  	ld a,%11000011 ;set 0,e
  981 D1:B16E 32 9B AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
  982 D1:B172 -  -  -  -  	
  983 D1:B172 C9 -  -  -  	ret 
  984 D1:B173 -  -  -  -  
  985 D1:B173 -  -  -  -  sdcomp_set_2bpc:
  986 D1:B173 3E DA -  -  	ld a,%11011010;jp c
  987 D1:B175 32 AF AE D1 	ld (sdcomp_2bpc),a
  988 D1:B179 32 45 B0 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
  989 D1:B17D -  -  -  -  	
  990 D1:B17D 3E D2 -  -  	ld a, %11010010 ;jp nc 
  991 D1:B17F 32 2F B0 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
  992 D1:B183 32 3A B0 D1 	ld (sdcomp_2bpc_1),a 
  993 D1:B187 -  -  -  -  	
  994 D1:B187 3E CB -  -  	ld a,%11001011 ;set 1,e
  995 D1:B189 32 9B AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
  996 D1:B18D 3E C3 -  -  	ld a,%11000011 ;set 0,e
  997 D1:B18F 32 AD AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
  998 D1:B193 -  -  -  -  	
  999 D1:B193 C9 -  -  -  	ret 
 1000 D1:B194 -  -  -  -  
 1001 D1:B194 -  -  -  -  sdcomp_set_3bpc:
 1002 D1:B194 3E DA -  -  	ld a,%11011010;jp c
 1003 D1:B196 32 C1 AE D1 	ld (sdcomp_3bpc),a
 1004 D1:B19A -  -  -  -  	
 1005 D1:B19A 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1006 D1:B19C 32 2F B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1007 D1:B1A0 32 3A B0 D1 	ld (sdcomp_2bpc_1),a 
 1008 D1:B1A4 32 45 B0 D1 	ld (sdcomp_3bpc_1),a 
 1009 D1:B1A8 -  -  -  -  	
 1010 D1:B1A8 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1011 D1:B1AA 32 9B AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1012 D1:B1AE 3E CB -  -  	ld a,%11001011 ;set 1,e
 1013 D1:B1B0 32 AD AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1014 D1:B1B4 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1015 D1:B1B6 32 BF AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1016 D1:B1BA -  -  -  -  	
 1017 D1:B1BA -  -  -  -  	
 1018 D1:B1BA C9 -  -  -  	ret 
 1019 D1:B1BB -  -  -  -  
 1020 D1:B1BB -  -  -  -  sdcomp_set_4bpc:
 1021 D1:B1BB 3E DA -  -  	ld a,%11011010;jp c
 1022 D1:B1BD -  -  -  -  
 1023 D1:B1BD 32 2F B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1024 D1:B1C1 32 3A B0 D1 	ld (sdcomp_2bpc_1),a 
 1025 D1:B1C5 32 45 B0 D1 	ld (sdcomp_3bpc_1),a 
 1026 D1:B1C9 -  -  -  -  	
 1027 D1:B1C9 -  -  -  -  	
 1028 D1:B1C9 3E DB -  -  	ld a,%11011011 ;set 3,e
 1029 D1:B1CB 32 9B AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1030 D1:B1CF 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1031 D1:B1D1 32 AD AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1032 D1:B1D5 3E CB -  -  	ld a,%11001011 ;set 1,e
 1033 D1:B1D7 32 BF AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1034 D1:B1DB 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1035 D1:B1DD 32 D1 AE D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1036 D1:B1E1 -  -  -  -  	
 1037 D1:B1E1 -  -  -  -  	
 1038 D1:B1E1 C9 -  -  -  	ret 
 1039 D1:B1E2 -  -  -  -  sdcomp_set_noalpha:
 1040 D1:B1E2 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1041 D1:B1E4 32 D5 AD D1 	ld (sdcomp_no_alpha_1),a 
 1042 D1:B1E8 3E DA -  -  	ld a,%11011010;jp c
 1043 D1:B1EA 32 14 B0 D1 	ld (sdcomp_no_alpha_2),a 
 1044 D1:B1EE -  -  -  -  	
 1045 D1:B1EE C9 -  -  -  	ret
 1046 D1:B1EF -  -  -  -  
 1047 D1:B1EF -  -  -  -  
 1048 D1:B1EF -  -  -  -  sdcomp_set_offset:
 1049 D1:B1EF 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1050 D1:B1F1 32 14 AE D1 	ld (sdcomp_offset_1),a 
 1051 D1:B1F5 32 BB AD D1 	ld (sdcomp_bit_offset),a 
 1052 D1:B1F9 3E 04 -  -  	ld a,%00000100 ;inc b 
 1053 D1:B1FB 32 E1 AF D1 	ld (sdcomp_offset_2),a 
 1054 D1:B1FF -  -  -  -  	
 1055 D1:B1FF C9 -  -  -  	ret 
 1056 D1:B200 -  -  -  -  sdcomp_set_flip:
 1057 D1:B200 -  -  -  -  
 1058 D1:B200 -  -  -  -  
 1059 D1:B200 -  -  -  -  
 1060 D1:B200 -  -  -  -  
 1061 D1:B200 -  -  -  -  
 1062 D1:B200 -  -  -  -  
 1063 D1:B200 -  -  -  -  
 1064 D1:B200 -  -  -  -  
 1065 D1:B200 -  -  -  -  
 1066 D1:B200 -  -  -  -  
Listing for file "ascent.asm"
  271 D1:B200 -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B200 -  -  -  -  
    2 D1:B200 -  -  -  -  
    3 D1:B200 -  -  -  -  draw_mg:
    4 D1:B200 2A 54 AA D1 	ld hl,(draw_buffer)
    5 D1:B204 22 CE B2 D1 	ld (dfgs_vram_top_1),hl
    6 D1:B208 22 34 B3 D1 	ld (dfgs_vram_top_2),hl
    7 D1:B20C 01 60 95 00 	ld bc,160*239
    8 D1:B210 09 -  -  -  	add hl,bc
    9 D1:B211 22 A2 B3 D1 	ld (dfgs_vram_bottom_1),hl 
   10 D1:B215 22 71 B3 D1 	ld (dfgs_vram_bottom_2),hl 
   11 D1:B219 22 08 B4 D1 	ld (dfgs_vram_bottom_3),hl 
   12 D1:B21D 22 36 B4 D1 	ld (dfgs_vram_bottom_4),hl 
   13 D1:B221 -  -  -  -  	
   14 D1:B221 2A 4E AA D1 	ld hl,(cam_pos)
   15 D1:B225 CB 3C -  -  	srl h
   16 D1:B227 CB 1D -  -  	rr l;div by 2
   17 D1:B229 01 EF 00 00 	ld bc,239
   18 D1:B22D 09 -  -  -  	add hl,bc 
   19 D1:B22E 7D -  -  -  	ld a,l ;lsb cam pos 
   20 D1:B22F 32 B4 B2 D1 	ld (dfgs_cam_height_1),a
   21 D1:B233 32 12 B3 D1 	ld (dfgs_cam_height_2),a
   22 D1:B237 32 E7 B3 D1 	ld (dfgs_cam_height_3),a
   23 D1:B23B -  -  -  -  	
   24 D1:B23B 01 00 00 00 	ld bc,0
   25 D1:B23F 4C -  -  -  	ld c,h;msb ccam pos 
   26 D1:B240 0C -  -  -  	inc c 
   27 D1:B241 21 0A C8 D1 	ld hl,MG_Data_frame_table
   28 D1:B245 09 -  -  -  	add hl,bc
   29 D1:B246 09 -  -  -  	add hl,bc 
   30 D1:B247 09 -  -  -  	add hl,bc 	
   31 D1:B248 ED 27 -  -  	ld hl,(hl);upper frame 
   32 D1:B24A -  -  -  -  	
   33 D1:B24A CD 9A B2 D1 	call draw_fg_sprites
   34 D1:B24E C9 -  -  -  	ret
   35 D1:B24F -  -  -  -  
   36 D1:B24F -  -  -  -  
   37 D1:B24F -  -  -  -  draw_fg:
   38 D1:B24F 2A 54 AA D1 	ld hl,(draw_buffer)
   39 D1:B253 22 CE B2 D1 	ld (dfgs_vram_top_1),hl
   40 D1:B257 22 34 B3 D1 	ld (dfgs_vram_top_2),hl
   41 D1:B25B 01 60 95 00 	ld bc,160*239
   42 D1:B25F 09 -  -  -  	add hl,bc
   43 D1:B260 22 A2 B3 D1 	ld (dfgs_vram_bottom_1),hl 
   44 D1:B264 22 71 B3 D1 	ld (dfgs_vram_bottom_2),hl 
   45 D1:B268 22 08 B4 D1 	ld (dfgs_vram_bottom_3),hl 
   46 D1:B26C 22 36 B4 D1 	ld (dfgs_vram_bottom_4),hl 
   47 D1:B270 -  -  -  -  	
   48 D1:B270 2A 4E AA D1 	ld hl,(cam_pos)
   49 D1:B274 01 EF 00 00 	ld bc,239
   50 D1:B278 09 -  -  -  	add hl,bc 
   51 D1:B279 7D -  -  -  	ld a,l ;lsb cam pos 
   52 D1:B27A 32 B4 B2 D1 	ld (dfgs_cam_height_1),a
   53 D1:B27E 32 12 B3 D1 	ld (dfgs_cam_height_2),a
   54 D1:B282 32 E7 B3 D1 	ld (dfgs_cam_height_3),a
   55 D1:B286 -  -  -  -  	
   56 D1:B286 01 00 00 00 	ld bc,0
   57 D1:B28A 4C -  -  -  	ld c,h;msb ccam pos 
   58 D1:B28B 0C -  -  -  	inc c 
   59 D1:B28C 21 2A BF D1 	ld hl,FG_Data_frame_table
   60 D1:B290 09 -  -  -  	add hl,bc
   61 D1:B291 09 -  -  -  	add hl,bc 
   62 D1:B292 09 -  -  -  	add hl,bc 	
   63 D1:B293 ED 27 -  -  	ld hl,(hl);upper frame 
   64 D1:B295 -  -  -  -  	
   65 D1:B295 CD 9A B2 D1 	call draw_fg_sprites
   66 D1:B299 C9 -  -  -  	ret
   67 D1:B29A -  -  -  -  
   68 D1:B29A -  -  -  -  
   69 D1:B29A -  -  -  -  
   70 D1:B29A -  -  -  -  
   71 D1:B29A -  -  -  -  ;hl = upper frame data
   72 D1:B29A -  -  -  -   
   73 D1:B29A -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   74 D1:B29A -  -  -  -  draw_fg_sprites:
   75 D1:B29A -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   76 D1:B29A ED 17 -  -  	ld de,(hl)
   77 D1:B29C ED 53 7D B4 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
   78 D1:B2A1 -  -  -  -  	
   79 D1:B2A1 11 00 00 00 	ld de,0
   80 D1:B2A5 23 -  -  -  	inc hl 
   81 D1:B2A6 23 -  -  -  	inc hl
   82 D1:B2A7 23 -  -  -  	inc hl;past data table 
   83 D1:B2A8 -  -  -  -  	;hl is number of elements
   84 D1:B2A8 08 -  -  -  	ex af,af' ;'
   85 D1:B2A9 7E -  -  -  	ld a,(hl);number of elements
   86 D1:B2AA 08 -  -  -  	ex af,af' ;'
   87 D1:B2AB 23 -  -  -  	inc hl 
   88 D1:B2AC -  -  -  -  	
   89 D1:B2AC -  -  -  -  	
   90 D1:B2AC -  -  -  -  dfgs_upper_loop:
   91 D1:B2AC 7E -  -  -  	ld a,(hl);sprite y value 
   92 D1:B2AD 23 -  -  -  	inc hl 
   93 D1:B2AE 96 -  -  -  	sub (hl);subtract height
   94 D1:B2AF D2 BD B2 D1 	jp nc,dfgs_upper_skip;if no carry,skip
   95 D1:B2B3 -  -  -  -  	
   96 D1:B2B3 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   97 D1:B2B3 D6 00 -  -  	sub 0 ;subtract camera height lsb 
   98 D1:B2B5 DA CB B2 D1 	jp c,dfgs_upper_cont
   99 D1:B2B9 CA CB B2 D1 	jp z,dfgs_upper_cont 
  100 D1:B2BD -  -  -  -  dfgs_upper_skip:
  101 D1:B2BD 23 -  -  -  	inc hl 
  102 D1:B2BE 23 -  -  -  	inc hl
  103 D1:B2BF 23 -  -  -  	inc hl;to y 
  104 D1:B2C0 08 -  -  -  	ex af,af';'
  105 D1:B2C1 3D -  -  -  	dec a 
  106 D1:B2C2 CA FD B2 D1 	jp z,dfgs_mid_start 
  107 D1:B2C6 08 -  -  -  	ex af,af';'
  108 D1:B2C7 C3 AC B2 D1 	jp dfgs_upper_loop
  109 D1:B2CB -  -  -  -  	
  110 D1:B2CB -  -  -  -  dfgs_upper_cont:
  111 D1:B2CB -  -  -  -  	
  112 D1:B2CB 86 -  -  -  	add a,(hl);add height
  113 D1:B2CC -  -  -  -  	;a now holds 0 indexed row, number of lines to skip drawing
  114 D1:B2CC D9 -  -  -  	exx
  115 D1:B2CD -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  116 D1:B2CD 11 00 00 00 	ld de,0;load top of vram 
  117 D1:B2D1 D9 -  -  -  	exx;out shadow
  118 D1:B2D2 -  -  -  -  	
  119 D1:B2D2 CD 63 B4 D1 	call dfgs_setup_draw;toshadow	
  120 D1:B2D6 -  -  -  -  	
  121 D1:B2D6 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  122 D1:B2D8 CA E4 B2 D1 	jp z,dfgs_upper_fast
  123 D1:B2DC CD 53 AD D1 	call draw_slow_sprite_top_cut
  124 D1:B2E0 C3 E8 B2 D1 	jp dfgs_upper_skip_2
  125 D1:B2E4 -  -  -  -  dfgs_upper_fast:
  126 D1:B2E4 CD D3 AC D1 	call draw_fast_sprite_top_cut
  127 D1:B2E8 -  -  -  -  dfgs_upper_skip_2:
  128 D1:B2E8 D9 -  -  -  	exx ;out of shadow, hl holds index
  129 D1:B2E9 -  -  -  -  	
  130 D1:B2E9 11 00 00 00 	ld de,0 
  131 D1:B2ED 01 00 00 00 	ld bc,0
  132 D1:B2F1 23 -  -  -  	inc hl;to y 
  133 D1:B2F2 08 -  -  -  	ex af,af';'
  134 D1:B2F3 3D -  -  -  	dec a 
  135 D1:B2F4 CA FD B2 D1 	jp z,dfgs_mid_start 
  136 D1:B2F8 08 -  -  -  	ex af,af';'
  137 D1:B2F9 C3 AC B2 D1 	jp dfgs_upper_loop
  138 D1:B2FD -  -  -  -  	
  139 D1:B2FD -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  140 D1:B2FD -  -  -  -  	
  141 D1:B2FD ED 17 -  -  	ld de,(hl)
  142 D1:B2FF ED 53 7D B4 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  143 D1:B304 11 00 00 00 	ld de,0
  144 D1:B308 23 -  -  -  	inc hl 
  145 D1:B309 23 -  -  -  	inc hl
  146 D1:B30A 23 -  -  -  	inc hl;past data table 
  147 D1:B30B 08 -  -  -  	ex af,af' ;'
  148 D1:B30C 7E -  -  -  	ld a,(hl);number of elements
  149 D1:B30D 08 -  -  -  	ex af,af' ;'
  150 D1:B30E 23 -  -  -  	inc hl 
  151 D1:B30F -  -  -  -  dfgs_mid_loop:
  152 D1:B30F 7E -  -  -  	ld a,(hl);y val 
  153 D1:B310 23 -  -  -  	inc hl ;to height
  154 D1:B311 -  -  -  -  dfgs_cam_height_2 .equ $ + 1
  155 D1:B311 D6 00 -  -  	sub 0;subtract cam pos
  156 D1:B313 DA 63 B3 D1 	jp c,dfgs_mid_sprite_below ;sprite is below camera pos, either full or bottom cut 
  157 D1:B317 CA 63 B3 D1 	jp z,dfgs_mid_sprite_below 
  158 D1:B31B -  -  -  -  	;sprite start is above camera pos, top cut 
  159 D1:B31B BE -  -  -  	cp (hl);a holds numb lines below sprite y , compare to height
  160 D1:B31C DA 32 B3 D1 	jp c,dfgs_mid_above_cont
  161 D1:B320 CA 32 B3 D1 	jp z,dfgs_mid_above_cont
  162 D1:B324 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  163 D1:B324 23 -  -  -  	inc hl 
  164 D1:B325 23 -  -  -  	inc hl
  165 D1:B326 23 -  -  -  	inc hl;to y 
  166 D1:B327 08 -  -  -  	ex af,af';'
  167 D1:B328 3D -  -  -  	dec a 
  168 D1:B329 CA D2 B3 D1 	jp z,dfgs_lower_start 
  169 D1:B32D 08 -  -  -  	ex af,af';'
  170 D1:B32E C3 0F B3 D1 	jp dfgs_mid_loop
  171 D1:B332 -  -  -  -  	
  172 D1:B332 -  -  -  -  dfgs_mid_above_cont:
  173 D1:B332 -  -  -  -  	;a = lines to skip 
  174 D1:B332 D9 -  -  -  	exx
  175 D1:B333 -  -  -  -  dfgs_vram_top_2 .equ $ + 1 
  176 D1:B333 11 00 00 00 	ld de,0
  177 D1:B337 D9 -  -  -  	exx
  178 D1:B338 -  -  -  -  	
  179 D1:B338 CD 63 B4 D1 	call dfgs_setup_draw;toshadow
  180 D1:B33C -  -  -  -  	
  181 D1:B33C CB 45 -  -  	bit 0,l 
  182 D1:B33E CA 4A B3 D1 	jp z,dfgs_mid_top_fast
  183 D1:B342 CD 53 AD D1 	call draw_slow_sprite_top_cut
  184 D1:B346 C3 4E B3 D1 	jp dfgs_mid_top_slow
  185 D1:B34A -  -  -  -  dfgs_mid_top_fast:
  186 D1:B34A CD D3 AC D1 	call draw_fast_sprite_top_cut
  187 D1:B34E -  -  -  -  dfgs_mid_top_slow:
  188 D1:B34E D9 -  -  -  	exx;out shadwo
  189 D1:B34F 11 00 00 00 	ld de,0 
  190 D1:B353 01 00 00 00 	ld bc,0
  191 D1:B357 23 -  -  -  	inc hl;to y 
  192 D1:B358 08 -  -  -  	ex af,af';'
  193 D1:B359 3D -  -  -  	dec a 
  194 D1:B35A CA D2 B3 D1 	jp z,dfgs_lower_start 
  195 D1:B35E 08 -  -  -  	ex af,af';'
  196 D1:B35F C3 0F B3 D1 	jp dfgs_mid_loop
  197 D1:B363 -  -  -  -  
  198 D1:B363 -  -  -  -  dfgs_mid_sprite_below:;sprite start is = or below top of screen 
  199 D1:B363 -  -  -  -  	;can be full or bottom cut
  200 D1:B363 -  -  -  -  	;a holds distance of sprite below top of screen
  201 D1:B363 -  -  -  -  	;0 = top of screen 255 = 1 below ,254 = 2 below ... 17 = bottom of screen
  202 D1:B363 3D -  -  -  	dec a 
  203 D1:B364 D6 10 -  -  	sub 16;a holds dist from bottom
  204 D1:B366 DA 24 B3 D1 	jp c,dfgs_mid_skip
  205 D1:B36A BE -  -  -  	cp (hl);compare to height
  206 D1:B36B DA A0 B3 D1 	jp c,dfgs_mid_bottom_cut
  207 D1:B36F -  -  -  -  	
  208 D1:B36F -  -  -  -  	;full sprite
  209 D1:B36F D9 -  -  -  	exx
  210 D1:B370 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1
  211 D1:B370 11 00 00 00 	ld de,0
  212 D1:B374 D9 -  -  -  	exx
  213 D1:B375 CD 63 B4 D1 	call dfgs_setup_draw;toshadow
  214 D1:B379 CB 45 -  -  	bit 0,l
  215 D1:B37B CA 87 B3 D1 	jp z,dfgs_mid_full_fast
  216 D1:B37F CD 24 AD D1 	call draw_slow_sprite_full
  217 D1:B383 C3 8B B3 D1 	jp dfgs_mid_full_slow
  218 D1:B387 -  -  -  -  dfgs_mid_full_fast:
  219 D1:B387 CD 0A AD D1 	call draw_fast_sprite_full
  220 D1:B38B -  -  -  -  dfgs_mid_full_slow:
  221 D1:B38B D9 -  -  -  	exx
  222 D1:B38C 11 00 00 00 	ld de,0 
  223 D1:B390 01 00 00 00 	ld bc,0
  224 D1:B394 23 -  -  -  	inc hl;to y 
  225 D1:B395 08 -  -  -  	ex af,af';'
  226 D1:B396 3D -  -  -  	dec a 
  227 D1:B397 CA D2 B3 D1 	jp z,dfgs_lower_start 
  228 D1:B39B 08 -  -  -  	ex af,af';'
  229 D1:B39C C3 0F B3 D1 	jp dfgs_mid_loop
  230 D1:B3A0 -  -  -  -  	
  231 D1:B3A0 -  -  -  -  	
  232 D1:B3A0 -  -  -  -  dfgs_mid_bottom_cut:
  233 D1:B3A0 D9 -  -  -  	exx
  234 D1:B3A1 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1
  235 D1:B3A1 11 00 00 00 	ld de,0
  236 D1:B3A5 D9 -  -  -  	exx
  237 D1:B3A6 CD 63 B4 D1 	call dfgs_setup_draw
  238 D1:B3AA 3C -  -  -  	inc a;for bottom cuts
  239 D1:B3AB CB 45 -  -  	bit 0,l 
  240 D1:B3AD CA B9 B3 D1 	jp z,dfgs_mid_bottom_fast
  241 D1:B3B1 CD 88 AD D1 	call draw_slow_sprite_bottom_cut
  242 D1:B3B5 C3 BD B3 D1 	jp dfgs_mid_bottom_slow
  243 D1:B3B9 -  -  -  -  dfgs_mid_bottom_fast:
  244 D1:B3B9 CD BF AC D1 	call draw_fast_sprite_bottom_cut
  245 D1:B3BD -  -  -  -  dfgs_mid_bottom_slow:
  246 D1:B3BD D9 -  -  -  	exx
  247 D1:B3BE 11 00 00 00 	ld de,0 
  248 D1:B3C2 01 00 00 00 	ld bc,0
  249 D1:B3C6 23 -  -  -  	inc hl;to y 
  250 D1:B3C7 08 -  -  -  	ex af,af';'
  251 D1:B3C8 3D -  -  -  	dec a 
  252 D1:B3C9 CA D2 B3 D1 	jp z,dfgs_lower_start 
  253 D1:B3CD 08 -  -  -  	ex af,af';'
  254 D1:B3CE C3 0F B3 D1 	jp dfgs_mid_loop
  255 D1:B3D2 -  -  -  -  	
  256 D1:B3D2 -  -  -  -  	
  257 D1:B3D2 -  -  -  -  	
  258 D1:B3D2 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  259 D1:B3D2 -  -  -  -  dfgs_lower_start:
  260 D1:B3D2 -  -  -  -  	
  261 D1:B3D2 ED 17 -  -  	ld de,(hl)
  262 D1:B3D4 ED 53 7D B4 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  263 D1:B3D9 11 00 00 00 	ld de,0
  264 D1:B3DD 23 -  -  -  	inc hl 
  265 D1:B3DE 23 -  -  -  	inc hl
  266 D1:B3DF 23 -  -  -  	inc hl;past data table 
  267 D1:B3E0 -  -  -  -  	
  268 D1:B3E0 08 -  -  -  	ex af,af' ;'
  269 D1:B3E1 7E -  -  -  	ld a,(hl);number of elements
  270 D1:B3E2 08 -  -  -  	ex af,af' ;'
  271 D1:B3E3 23 -  -  -  	inc hl
  272 D1:B3E4 -  -  -  -  	
  273 D1:B3E4 3E EF -  -  	ld a,239
  274 D1:B3E6 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  275 D1:B3E6 D6 00 -  -  	sub 0;cam pos 
  276 D1:B3E8 D8 -  -  -  	ret c;if bottom frame is offscreen 
  277 D1:B3E9 C8 -  -  -  	ret z 
  278 D1:B3EA -  -  -  -  	;a holds distance of top line of lower frame from bottom of screen starting from 1
  279 D1:B3EA 32 F1 B3 D1 	ld (dfgs_lower_frame_height),a
  280 D1:B3EE -  -  -  -  
  281 D1:B3EE -  -  -  -  dfgs_lower_loop:
  282 D1:B3EE 7E -  -  -  	ld a,(hl);y
  283 D1:B3EF 23 -  -  -  	inc hl
  284 D1:B3F0 -  -  -  -  dfgs_lower_frame_height .equ $ + 1
  285 D1:B3F0 C6 00 -  -  	add a,0;add frame height 
  286 D1:B3F2 DA 01 B4 D1 	jp c,dfgs_lower_cont;sprite onscreen
  287 D1:B3F6 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  288 D1:B3F6 23 -  -  -  	inc hl
  289 D1:B3F7 23 -  -  -  	inc hl
  290 D1:B3F8 23 -  -  -  	inc hl;to y 
  291 D1:B3F9 08 -  -  -  	ex af,af';'
  292 D1:B3FA 3D -  -  -  	dec a 
  293 D1:B3FB C8 -  -  -  	ret z
  294 D1:B3FC 08 -  -  -  	ex af,af';'
  295 D1:B3FD C3 EE B3 D1 	jp dfgs_lower_loop
  296 D1:B401 -  -  -  -  	
  297 D1:B401 -  -  -  -  dfgs_lower_cont:
  298 D1:B401 -  -  -  -  	;a holds sprite dist from bottom of screen, from 0
  299 D1:B401 BE -  -  -  	cp (hl);compare to height
  300 D1:B402 DA 34 B4 D1 	jp c,dfgs_lower_bottom_cut
  301 D1:B406 -  -  -  -  	
  302 D1:B406 -  -  -  -  	;full sprite 
  303 D1:B406 D9 -  -  -  	exx
  304 D1:B407 -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1
  305 D1:B407 11 00 00 00 	ld de,0
  306 D1:B40B D9 -  -  -  	exx
  307 D1:B40C CD 63 B4 D1 	call dfgs_setup_draw
  308 D1:B410 CB 45 -  -  	bit 0,l
  309 D1:B412 CA 1E B4 D1 	jp z,dfgs_lower_full_fast
  310 D1:B416 CD 24 AD D1 	call draw_slow_sprite_full
  311 D1:B41A C3 22 B4 D1 	jp dfgs_lower_full_slow
  312 D1:B41E -  -  -  -  dfgs_lower_full_fast:
  313 D1:B41E CD 0A AD D1 	call draw_fast_sprite_full
  314 D1:B422 -  -  -  -  dfgs_lower_full_slow:
  315 D1:B422 D9 -  -  -  	exx
  316 D1:B423 11 00 00 00 	ld de,0 
  317 D1:B427 01 00 00 00 	ld bc,0
  318 D1:B42B 23 -  -  -  	inc hl;to y 
  319 D1:B42C 08 -  -  -  	ex af,af';'
  320 D1:B42D 3D -  -  -  	dec a 
  321 D1:B42E C8 -  -  -  	ret z
  322 D1:B42F 08 -  -  -  	ex af,af';'
  323 D1:B430 C3 EE B3 D1 	jp dfgs_lower_loop
  324 D1:B434 -  -  -  -  	
  325 D1:B434 -  -  -  -  	
  326 D1:B434 -  -  -  -  dfgs_lower_bottom_cut:
  327 D1:B434 D9 -  -  -  	exx
  328 D1:B435 -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1
  329 D1:B435 11 00 00 00 	ld de,0
  330 D1:B439 D9 -  -  -  	exx
  331 D1:B43A CD 63 B4 D1 	call dfgs_setup_draw
  332 D1:B43E 3C -  -  -  	inc a;for bottom cuts
  333 D1:B43F CB 45 -  -  	bit 0,l 
  334 D1:B441 CA 4D B4 D1 	jp z,dfgs_lower_bottom_fast
  335 D1:B445 CD 88 AD D1 	call draw_slow_sprite_bottom_cut
  336 D1:B449 C3 51 B4 D1 	jp dfgs_lower_bottom_slow
  337 D1:B44D -  -  -  -  dfgs_lower_bottom_fast:
  338 D1:B44D CD BF AC D1 	call draw_fast_sprite_bottom_cut
  339 D1:B451 -  -  -  -  dfgs_lower_bottom_slow:
  340 D1:B451 D9 -  -  -  	exx
  341 D1:B452 11 00 00 00 	ld de,0 
  342 D1:B456 01 00 00 00 	ld bc,0
  343 D1:B45A 23 -  -  -  	inc hl;to y 
  344 D1:B45B 08 -  -  -  	ex af,af';'
  345 D1:B45C 3D -  -  -  	dec a 
  346 D1:B45D C8 -  -  -  	ret z
  347 D1:B45E 08 -  -  -  	ex af,af';'
  348 D1:B45F C3 EE B3 D1 	jp dfgs_lower_loop
  349 D1:B463 -  -  -  -  	
  350 D1:B463 -  -  -  -  	
  351 D1:B463 -  -  -  -  	
  352 D1:B463 -  -  -  -  	
  353 D1:B463 -  -  -  -  	
  354 D1:B463 -  -  -  -  	
  355 D1:B463 -  -  -  -  	
  356 D1:B463 -  -  -  -  	
  357 D1:B463 -  -  -  -  	
  358 D1:B463 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  359 D1:B463 -  -  -  -  ;(hl) = height 	
  360 D1:B463 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  361 D1:B463 -  -  -  -  ;returns hl = sprite data, de = vram position
  362 D1:B463 -  -  -  -  dfgs_setup_draw:
  363 D1:B463 23 -  -  -  	inc hl
  364 D1:B464 01 00 00 00 	ld bc,0
  365 D1:B468 4E -  -  -  	ld c,(hl); x pos
  366 D1:B469 23 -  -  -  	inc hl;to index
  367 D1:B46A E5 -  -  -  	push hl
  368 D1:B46B C5 -  -  -  	push bc
  369 D1:B46C D9 -  -  -  	exx;toshadow
  370 D1:B46D C1 -  -  -  	pop bc
  371 D1:B46E 26 A0 -  -  	ld h,160
  372 D1:B470 6F -  -  -  	ld l,a
  373 D1:B471 ED 6C -  -  	mlt hl;subtract from vram
  374 D1:B473 37 -  -  -  	scf 
  375 D1:B474 3F -  -  -  	ccf
  376 D1:B475 EB -  -  -  	ex de,hl;hl holds vram
  377 D1:B476 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  378 D1:B478 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  379 D1:B479 EB -  -  -  	ex de,hl;put in de
  380 D1:B47A E1 -  -  -  	pop hl;back to frame data 
  381 D1:B47B 4E -  -  -  	ld c,(hl);sprite index
  382 D1:B47C -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  383 D1:B47C 21 00 00 00 	ld hl,0 ;load sprite table 
  384 D1:B480 09 -  -  -  	add hl,bc
  385 D1:B481 09 -  -  -  	add hl,bc 
  386 D1:B482 09 -  -  -  	add hl,bc;move to sprite ptr
  387 D1:B483 -  -  -  -  	;call prgmpause
  388 D1:B483 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  389 D1:B485 -  -  -  -  
  390 D1:B485 C9 -  -  -  	ret
  391 D1:B486 -  -  -  -  
  392 D1:B486 -  -  -  -  	
  393 D1:B486 -  -  -  -  	
  394 D1:B486 -  -  -  -  	
  395 D1:B486 -  -  -  -  	
  396 D1:B486 -  -  -  -  	
  397 D1:B486 -  -  -  -  	
  398 D1:B486 -  -  -  -  	
  399 D1:B486 -  -  -  -  	
  400 D1:B486 -  -  -  -  	
  401 D1:B486 -  -  -  -  	
  402 D1:B486 -  -  -  -  	
  403 D1:B486 -  -  -  -  	
Listing for file "ascent.asm"
  272 D1:B486 -  -  -  -  
  273 D1:B486 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:B486 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:B486 -  -  -  -  	;.dl lastSprite
    3 D1:B486 -  -  -  -  	;.dl lastSpritecopy
    4 D1:B486 -  -  -  -  	;.dl sprite2
    5 D1:B486 -  -  -  -  	;.dl sprite3
    6 D1:B486 -  -  -  -  
    7 D1:B486 -  -  -  -  
    8 D1:B486 -  -  -  -  
    9 D1:B486 -  -  -  -  
   10 D1:B486 -  -  -  -  bg_data_frame:
   11 D1:B486 -  -  -  -  	;.db sprite data table pointer
   12 D1:B486 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:B486 -  -  -  -  	
   14 D1:B486 -  -  -  -  
   15 D1:B486 -  -  -  -  bg_sprite_pointers_1:
   16 D1:B486 -  -  -  -  	;.dl testBG1
   17 D1:B486 -  -  -  -  	;.dl testBG1;h = 7
   18 D1:B486 -  -  -  -  	;.dl testBG2;h = 5
   19 D1:B486 -  -  -  -  	;.dl testBG3;h = 0
   20 D1:B486 -  -  -  -  	;.dl testBG4
   21 D1:B486 -  -  -  -  
   22 D1:B486 -  -  -  -  bg_data_frame_0:
   23 D1:B486 86 B4 D1 -  	.dl bg_sprite_pointers_1 
   24 D1:B489 C8 07 05 00 	.db 200,7,5,0
   25 D1:B48D -  -  -  -  	;upper 
   26 D1:B48D -  -  -  -  bg_data_frame_1:
   27 D1:B48D 86 B4 D1 -  	.dl bg_sprite_pointers_1
   28 D1:B490 C8 07 05 01 	.db 200,7,5,1
   29 D1:B494 64 07 05 01 	.db 100,7,5,1
   30 D1:B498 08 07 05 01 	.db 8,7,5,1
   31 D1:B49C 07 07 0A 01 	.db 7,7,10,1
   32 D1:B4A0 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:B4A4 05 07 14 01 	.db 5,7,20,1;X
   34 D1:B4A8 05 05 19 02 	.db 5,5,25,2
   35 D1:B4AC 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:B4B0 03 05 23 02 	.db 3,5,35,2;X
   37 D1:B4B4 00 05 28 02 	.db 0,5,40,2;X
   38 D1:B4B8 00 00 2D 03 	.db 0,0,45,3
   39 D1:B4BC 0A 00 32 03 	.db 10,0,50,3
   40 D1:B4C0 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:B4C4 -  -  -  -  	
   42 D1:B4C4 -  -  -  -  bg_data_frame_2:
   43 D1:B4C4 86 B4 D1 -  	.dl bg_sprite_pointers_1
   44 D1:B4C7 FF 07 3C 01 	.db 255,7,60,1
   45 D1:B4CB FE 07 41 01 	.db 254,7,65,1
   46 D1:B4CF 64 05 46 02 	.db 100,5,70,2
   47 D1:B4D3 64 00 4B 03 	.db 100,0,75,3
   48 D1:B4D7 32 07 50 00 	.db 50,7,80,0
   49 D1:B4DB -  -  -  -  	
   50 D1:B4DB -  -  -  -  	
Listing for file "ascent.asm"
  274 D1:B4DB -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B4DB -  -  -  -  
    2 D1:B4DB -  -  -  -  FG_sprite_table_1:
    3 D1:B4DB -  -  -  -  	;.dl fg_sprite_1;9*4
    4 D1:B4DB -  -  -  -  	;.dl fg_sprite_1
    5 D1:B4DB -  -  -  -  	;.dl fg_sprite_2;8*8
    6 D1:B4DB -  -  -  -  	;.dl fg_sprite_3;8*8 fast
    7 D1:B4DB -  -  -  -  	;.dl fg_sprite_4;8*8 fast 
    8 D1:B4DB -  -  -  -  	
    9 D1:B4DB -  -  -  -  
   10 D1:B4DB -  -  -  -  
   11 D1:B4DB -  -  -  -  
   12 D1:B4DB -  -  -  -  
   13 D1:B4DB -  -  -  -  FG_Frame_2:
   14 D1:B4DB DB B4 D1 -  	.dl FG_sprite_table_1
   15 D1:B4DE 03 03 00 01 	.db 3,3,0,1
   16 D1:B4E2 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B4E6 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B4EA 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B4EE 32 07 14 02 	.db 50,7,20,2
   20 D1:B4F2 1E 07 19 03 	.db 30,7,25,3
   21 D1:B4F6 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B4FA 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B4FE 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B502 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B506 -  -  -  -  
   26 D1:B506 -  -  -  -  
   27 D1:B506 -  -  -  -  FG_Frame_1:
   28 D1:B506 -  -  -  -  	;.dl sprite table ptr
   29 D1:B506 -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B506 DB B4 D1 -  	.dl FG_sprite_table_1
   31 D1:B509 FF 03 3C 01 	.db 255,3,60,1
   32 D1:B50D FF 07 46 02 	.db 255,7,70,2
   33 D1:B511 FF 07 4B 03 	.db 255,7,75,3
   34 D1:B515 FF 07 50 04 	.db 255,7,80,4
   35 D1:B519 FE 03 55 01 	.db 254,3,85,1
   36 D1:B51D FE 07 5A 04 	.db 254,7,90,4
   37 D1:B521 C8 03 0A 01 	.db 200,3,10,1
   38 D1:B525 C8 07 0F 02 	.db 200,7,15,2
   39 D1:B529 C8 07 14 03 	.db 200,7,20,3
   40 D1:B52D 32 07 0A 02 	.db 50,7,10,2
   41 D1:B531 0F 07 50 03 	.db 15,7,80,3
   42 D1:B535 10 07 41 03 	.db 16,7,65,3
   43 D1:B539 11 03 46 01 	.db 17,3,70,1
   44 D1:B53D 09 07 0A 02 	.db 9,7,10,2
   45 D1:B541 08 07 14 02 	.db 8,7,20,2
   46 D1:B545 08 07 1E 03 	.db 8,7,30,3
   47 D1:B549 07 07 23 02 	.db 7,7,35,2
   48 D1:B54D 06 07 28 02 	.db 6,7,40,2
   49 D1:B551 05 07 2D 02 	.db 5,7,45,2
   50 D1:B555 00 07 32 02 	.db 0,7,50,2
   51 D1:B559 04 07 37 03 	.db 4,7,55,3
   52 D1:B55D 02 07 3C 04 	.db 2,7,60,4
   53 D1:B561 01 03 41 00 	.db 1,3,65,0
   54 D1:B565 -  -  -  -  	
   55 D1:B565 -  -  -  -  
   56 D1:B565 -  -  -  -  FG_Frame_0:
   57 D1:B565 DB B4 D1 -  	.dl FG_sprite_table_1
   58 D1:B568 FF 03 46 01 	.db 255,3,70,1
   59 D1:B56C FF 07 4B 02 	.db 255,7,75,2
   60 D1:B570 FF 07 5F 03 	.db 255,7,95,3
   61 D1:B574 FF 07 50 04 	.db 255,7,80,4
   62 D1:B578 FE 03 78 01 	.db 254,3,120,1
   63 D1:B57C FE 07 7D 04 	.db 254,7,125,4
   64 D1:B580 C8 03 0A 01 	.db 200,3,10,1
   65 D1:B584 C8 07 0F 02 	.db 200,7,15,2
   66 D1:B588 C8 07 14 03 	.db 200,7,20,3
   67 D1:B58C C8 03 00 00 	.db 200,3,0,0
   68 D1:B590 -  -  -  -  	
   69 D1:B590 -  -  -  -  	
   70 D1:B590 -  -  -  -  	
   71 D1:B590 -  -  -  -  
   72 D1:B590 -  -  -  -  	
   73 D1:B590 -  -  -  -  	
   74 D1:B590 -  -  -  -  	
   75 D1:B590 -  -  -  -  	
   76 D1:B590 -  -  -  -  	
   77 D1:B590 -  -  -  -  	
   78 D1:B590 -  -  -  -  	
Listing for file "ascent.asm"
  275 D1:B590 -  -  -  -  
  276 D1:B590 -  -  -  -  #include "TestingSpriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingSpriteData.txt"
    1 D1:B590 -  -  -  -  
    2 D1:B590 -  -  -  -  
    3 D1:B590 -  -  -  -  
    4 D1:B590 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
    5 D1:B590 -  -  -  -  Test_Sprite_1:
    6 D1:B590 10 -  -  -  	.db %00010000
    7 D1:B591 09 06 -  -  	.db 9,6
    8 D1:B593 7C 86 -  -  	.db %01111100, %10000110
    9 D1:B595 F3 BF -  -  	.db %11110011, %10111111
   10 D1:B597 F0 E0 -  -  	.db %11110000, %11100000
   11 D1:B599 A8 -  -  -  	.db %10101000
   12 D1:B59A -  -  -  -  	
   13 D1:B59A 64 -  -  -  	.db $64
   14 D1:B59B -  -  -  -  	
   15 D1:B59B AA -  -  -  	.db %10101010
   16 D1:B59C AA -  -  -  	.db %10101010
   17 D1:B59D AA -  -  -  	.db %10101010
   18 D1:B59E AA -  -  -  	.db %10101010
   19 D1:B59F AA -  -  -  	.db %10101010
   20 D1:B5A0 AA -  -  -  	.db %10101010
   21 D1:B5A1 AA -  -  -  	.db %10101010
   22 D1:B5A2 AA -  -  -  	.db %10101010
   23 D1:B5A3 AA -  -  -  	.db %10101010
   24 D1:B5A4 AA -  -  -  	.db %10101010
   25 D1:B5A5 -  -  -  -  	
   26 D1:B5A5 -  -  -  -  	
   27 D1:B5A5 -  -  -  -  ;0XXXXX00X
   28 D1:B5A5 -  -  -  -  ;0000XX0XX
   29 D1:B5A5 -  -  -  -  ;XX00XXX0X
   30 D1:B5A5 -  -  -  -  ;XXXXXXXXX
   31 D1:B5A5 -  -  -  -  ;0000XXX00
   32 D1:B5A5 -  -  -  -  ;000X0X0X0
   33 D1:B5A5 -  -  -  -  
   34 D1:B5A5 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
   35 D1:B5A5 -  -  -  -  Test_Sprite_2:
   36 D1:B5A5 10 -  -  -  	.db %00010000
   37 D1:B5A6 09 06 -  -  	.db 9,6
   38 D1:B5A8 FF FF -  -  	.db %11111111, %11111111
   39 D1:B5AA FF FF -  -  	.db %11111111, %11111111
   40 D1:B5AC FF FF -  -  	.db %11111111, %11111111
   41 D1:B5AE FC -  -  -  	.db %11111100
   42 D1:B5AF -  -  -  -  	
   43 D1:B5AF 64 -  -  -  	.db $64
   44 D1:B5B0 -  -  -  -  	
   45 D1:B5B0 AA -  -  -  	.db %10101010
   46 D1:B5B1 AA -  -  -  	.db %10101010
   47 D1:B5B2 AA -  -  -  	.db %10101010
   48 D1:B5B3 AA -  -  -  	.db %10101010
   49 D1:B5B4 AA -  -  -  	.db %10101010
   50 D1:B5B5 AA -  -  -  	.db %10101010
   51 D1:B5B6 AA -  -  -  	.db %10101010
   52 D1:B5B7 AA -  -  -  	.db %10101010
   53 D1:B5B8 AA -  -  -  	.db %10101010
   54 D1:B5B9 AA -  -  -  	.db %10101010
   55 D1:B5BA -  -  -  -  	
   56 D1:B5BA -  -  -  -  	
   57 D1:B5BA -  -  -  -  ;XXXXXXXXX
   58 D1:B5BA -  -  -  -  ;XXXXXXXXX
   59 D1:B5BA -  -  -  -  ;XXXXXXXXX
   60 D1:B5BA -  -  -  -  ;XXXXXXXXX
   61 D1:B5BA -  -  -  -  
   62 D1:B5BA -  -  -  -  
   63 D1:B5BA -  -  -  -  
   64 D1:B5BA -  -  -  -  ;slow sprite, 1bpc, alpha  w = 8 h = 7
   65 D1:B5BA -  -  -  -  Test_Sprite_3:
   66 D1:B5BA 10 -  -  -  	.db %00010000
   67 D1:B5BB 08 07 -  -  	.db 8,7
   68 D1:B5BD FF FF -  -  	.db %11111111, %11111111
   69 D1:B5BF FF 83 -  -  	.db %11111111, %10000011
   70 D1:B5C1 FB 01 -  -  	.db %11111011, %00000001
   71 D1:B5C3 80 -  -  -  	.db %10000000
   72 D1:B5C4 -  -  -  -  	
   73 D1:B5C4 64 -  -  -  	.db $64
   74 D1:B5C5 -  -  -  -  	
   75 D1:B5C5 AA -  -  -  	.db %10101010
   76 D1:B5C6 AA -  -  -  	.db %10101010
   77 D1:B5C7 AA -  -  -  	.db %10101010
   78 D1:B5C8 AA -  -  -  	.db %10101010
   79 D1:B5C9 AA -  -  -  	.db %10101010
   80 D1:B5CA AA -  -  -  	.db %10101010
   81 D1:B5CB AA -  -  -  	.db %10101010
   82 D1:B5CC AA -  -  -  	.db %10101010
   83 D1:B5CD AA -  -  -  	.db %10101010
   84 D1:B5CE AA -  -  -  	.db %10101010
   85 D1:B5CF AA -  -  -  	.db %10101010
   86 D1:B5D0 AA -  -  -  	.db %10101010
   87 D1:B5D1 -  -  -  -  	
   88 D1:B5D1 -  -  -  -  	
   89 D1:B5D1 -  -  -  -  
   90 D1:B5D1 -  -  -  -  ;slow, 3bpc, alpha, w = 16 h = 6
   91 D1:B5D1 -  -  -  -  Test_Sprite_4:
   92 D1:B5D1 40 -  -  -  	.db %01000000
   93 D1:B5D2 10 06 -  -  	.db 16,6
   94 D1:B5D4 3F F4 -  -  	.db %00111111, %11110100
   95 D1:B5D6 FF 00 -  -  	.db %11111111, %00000000
   96 D1:B5D8 55 55 -  -  	.db %01010101, %01010101
   97 D1:B5DA 03 8C -  -  	.db %00000011, %10001100
   98 D1:B5DC 20 F3 -  -  	.db %00100000, %11110011
   99 D1:B5DE FC 4D -  -  	.db %11111100, %01001101
  100 D1:B5E0 -  -  -  -  	
  101 D1:B5E0 13 68 AE -  	.db $13,$68,$AE
  102 D1:B5E3 -  -  -  -  	
  103 D1:B5E3 05 39 -  -  	.db %00000101,%00111001
  104 D1:B5E5 77 05 -  -  	.db %01110111,%00000101
  105 D1:B5E7 39 77 -  -  	.db %00111001,%01110111
  106 D1:B5E9 05 39 -  -  	.db %00000101,%00111001
  107 D1:B5EB 77 05 -  -  	.db %01110111,%00000101
  108 D1:B5ED 39 77 -  -  	.db %00111001,%01110111
  109 D1:B5EF 05 39 -  -  	.db %00000101,%00111001
  110 D1:B5F1 77 05 -  -  	.db %01110111,%00000101
  111 D1:B5F3 39 77 -  -  	.db %00111001,%01110111
  112 D1:B5F5 05 39 -  -  	.db %00000101,%00111001
  113 D1:B5F7 77 05 -  -  	.db %01110111,%00000101
  114 D1:B5F9 39 77 -  -  	.db %00111001,%01110111
  115 D1:B5FB 05 39 -  -  	.db %00000101,%00111001
  116 D1:B5FD 77 05 -  -  	.db %01110111,%00000101
  117 D1:B5FF 39 77 -  -  	.db %00111001,%01110111
  118 D1:B601 05 39 -  -  	.db %00000101,%00111001
  119 D1:B603 77 05 -  -  	.db %01110111,%00000101
  120 D1:B605 39 77 -  -  	.db %00111001,%01110111
  121 D1:B607 05 39 -  -  	.db %00000101,%00111001
  122 D1:B609 77 05 -  -  	.db %01110111,%00000101
  123 D1:B60B 39 77 -  -  	.db %00111001,%01110111
  124 D1:B60D 05 39 -  -  	.db %00000101,%00111001
  125 D1:B60F 77 05 -  -  	.db %01110111,%00000101
  126 D1:B611 39 77 -  -  	.db %00111001,%01110111
  127 D1:B613 05 39 -  -  	.db %00000101,%00111001
  128 D1:B615 77 05 -  -  	.db %01110111,%00000101
  129 D1:B617 39 77 -  -  	.db %00111001,%01110111
  130 D1:B619 05 39 -  -  	.db %00000101,%00111001
  131 D1:B61B 77 05 -  -  	.db %01110111,%00000101
  132 D1:B61D 39 77 -  -  	.db %00111001,%01110111
  133 D1:B61F 05 39 -  -  	.db %00000101,%00111001
  134 D1:B621 77 05 -  -  	.db %01110111,%00000101
  135 D1:B623 39 77 -  -  	.db %00111001,%01110111
  136 D1:B625 05 39 -  -  	.db %00000101,%00111001
  137 D1:B627 77 05 -  -  	.db %01110111,%00000101
  138 D1:B629 39 77 -  -  	.db %00111001,%01110111
  139 D1:B62B 05 39 -  -  	.db %00000101,%00111001
  140 D1:B62D 77 05 -  -  	.db %01110111,%00000101
  141 D1:B62F 39 77 -  -  	.db %00111001,%01110111
  142 D1:B631 -  -  -  -  
  143 D1:B631 -  -  -  -  
  144 D1:B631 -  -  -  -  
  145 D1:B631 -  -  -  -  Test_sprite_5: ;W = 11 h = 6, 2bpc 
  146 D1:B631 20 -  -  -  	.db %00100000
  147 D1:B632 0B 06 -  -  	.db 11,6
  148 D1:B634 1B -  -  -  	.db %00011011
  149 D1:B635 FA -  -  -  	.db %11111010
  150 D1:B636 AB -  -  -  	.db %10101011
  151 D1:B637 E0 -  -  -  	.db %11100000
  152 D1:B638 78 -  -  -  	.db %01111000
  153 D1:B639 00 -  -  -  	.db %00000000
  154 D1:B63A 03 -  -  -  	.db %00000011
  155 D1:B63B 07 -  -  -  	.db %00000111
  156 D1:B63C 40 -  -  -  	.db %01000000
  157 D1:B63D -  -  -  -  	
  158 D1:B63D 67 59 -  -  	.db $67,89
  159 D1:B63F 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  160 D1:B642 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  161 D1:B645 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  162 D1:B648 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  163 D1:B64B 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  164 D1:B64E 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  165 D1:B651 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  166 D1:B654 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  167 D1:B657 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  168 D1:B65A 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  169 D1:B65D -  -  -  -  	
  170 D1:B65D -  -  -  -  	
  171 D1:B65D -  -  -  -  	
  172 D1:B65D -  -  -  -  ;000xx0xxxxx
  173 D1:B65D -  -  -  -  ;xx0x0x0x0x0
  174 D1:B65D -  -  -  -  ;xxxxx000000
  175 D1:B65D -  -  -  -  ;xxxx0000000
  176 D1:B65D -  -  -  -  ;0000000000x
  177 D1:B65D -  -  -  -  ;x00000xxx0x
  178 D1:B65D -  -  -  -  	
  179 D1:B65D -  -  -  -  	
  180 D1:B65D -  -  -  -  	
  181 D1:B65D -  -  -  -  	
  182 D1:B65D -  -  -  -  	
  183 D1:B65D -  -  -  -  	
  184 D1:B65D -  -  -  -  
  185 D1:B65D -  -  -  -  Test_sprite_6: ;w = 6 h = 6, noalpha, 4bpc 
  186 D1:B65D 84 -  -  -  	.db %10000100
  187 D1:B65E 06 06 -  -  	.db 6,6
  188 D1:B660 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  189 D1:B665 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  190 D1:B66A 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  191 D1:B66F 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  192 D1:B674 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  193 D1:B679 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  194 D1:B67E -  -  -  -  	
  195 D1:B67E -  -  -  -  
  196 D1:B67E -  -  -  -  Test_sprite_7: ;w=3 h=6 , 0bpc 
  197 D1:B67E 08 -  -  -  	.db %00001000
  198 D1:B67F 03 06 -  -  	.db 3,6
  199 D1:B681 E6 2B 80 -  	.db %11100110, %00101011,%10000000
  200 D1:B684 -  -  -  -  	
  201 D1:B684 33 -  -  -  	.db $33
  202 D1:B685 -  -  -  -  ;XXX
  203 D1:B685 -  -  -  -  ;00x
  204 D1:B685 -  -  -  -  ;x00
  205 D1:B685 -  -  -  -  ;0x0
  206 D1:B685 -  -  -  -  ;x0x
  207 D1:B685 -  -  -  -  ;xx0
  208 D1:B685 -  -  -  -  
  209 D1:B685 -  -  -  -  Test_sprite_8: ;w=2 h=6 , 0bpc 
  210 D1:B685 08 -  -  -  	.db %00001000
  211 D1:B686 02 08 -  -  	.db 2,8
  212 D1:B688 DB F5 -  -  	.db %11011011,%11110101
  213 D1:B68A -  -  -  -  	
  214 D1:B68A 33 -  -  -  	.db $33
  215 D1:B68B -  -  -  -  
  216 D1:B68B -  -  -  -  ;XX
  217 D1:B68B -  -  -  -  ;0x 
  218 D1:B68B -  -  -  -  ;x0 
  219 D1:B68B -  -  -  -  ;xx 
  220 D1:B68B -  -  -  -  ;xx 
  221 D1:B68B -  -  -  -  ;xx 
  222 D1:B68B -  -  -  -  ;0x 
  223 D1:B68B -  -  -  -  ;0x
  224 D1:B68B -  -  -  -  
  225 D1:B68B -  -  -  -  Test_sprite_9: ;w=2 h=6 , 0bpc 
  226 D1:B68B 0C -  -  -  	.db %00001100
  227 D1:B68C 01 09 -  -  	.db 1,9
  228 D1:B68E 33 -  -  -  	.db $33
  229 D1:B68F -  -  -  -  
  230 D1:B68F -  -  -  -  
Listing for file "ascent.asm"
  277 D1:B68F -  -  -  -  #include "Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Data.txt"
    1 D1:B68F -  -  -  -  Banana1:
    2 D1:B68F 20 -  -  -  	.db %00100000
    3 D1:B690 18 18 -  -  	.db 24, 24
    4 D1:B692 E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:B69A 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:B6A2 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:B6AA 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:B6B2 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:B6BA FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:B6C2 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:B6CA FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:B6D2 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:B6DA -  -  -  -  
   14 D1:B6DA 01 20 -  -  	.db %00000001, %00100000
   15 D1:B6DC -  -  -  -  
   16 D1:B6DC 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:B6E4 AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:B6EC 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:B6F4 A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:B6FC 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:B704 A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:B70C AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:B714 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:B71C AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:B724 55 40 -  -  	.db %01010101, %01000000
   26 D1:B726 -  -  -  -  
   27 D1:B726 -  -  -  -  
   28 D1:B726 -  -  -  -  Banana1Large:
   29 D1:B726 20 -  -  -  	.db %00100000
   30 D1:B727 2E 2E -  -  	.db 46, 46
   31 D1:B729 FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:B731 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:B739 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:B741 F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:B749 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:B751 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:B759 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:B761 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:B769 FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:B771 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:B779 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:B781 F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:B789 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:B791 FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:B799 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:B7A1 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:B7A9 FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:B7B1 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:B7B9 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:B7C1 FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:B7C9 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:B7D1 FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:B7D9 FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:B7E1 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:B7E9 FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:B7F1 FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:B7F9 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:B801 FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:B809 C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:B811 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:B819 FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:B821 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:B829 FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:B831 C0 -  -  -  	.db %11000000
   65 D1:B832 -  -  -  -  
   66 D1:B832 01 20 -  -  	.db %00000001, %00100000
   67 D1:B834 -  -  -  -  
   68 D1:B834 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:B83C 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:B844 A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:B84C AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:B854 AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:B85C A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:B864 A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:B86C AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:B874 AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:B87C A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:B884 AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:B88C 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:B894 AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:B89C AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:B8A4 A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:B8AC AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:B8B4 AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:B8BC AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:B8C4 AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:B8CC AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:B8D4 AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:B8DC AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:B8E4 AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:B8EC AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:B8F4 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:B8FC 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:B904 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:B90C 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:B914 A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:B91C 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:B924 A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:B92C 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:B934 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:B937 -  -  -  -  
  102 D1:B937 -  -  -  -  
  103 D1:B937 -  -  -  -  Shittlogo:
  104 D1:B937 20 -  -  -  	.db %00100000
  105 D1:B938 30 30 -  -  	.db 48, 48
  106 D1:B93A 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  107 D1:B942 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  108 D1:B94A 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  109 D1:B952 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  110 D1:B95A FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  111 D1:B962 FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  112 D1:B96A 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  113 D1:B972 FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  114 D1:B97A FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  115 D1:B982 F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  116 D1:B98A FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  117 D1:B992 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  118 D1:B99A 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  119 D1:B9A2 FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  120 D1:B9AA FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  121 D1:B9B2 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  122 D1:B9BA FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  123 D1:B9C2 FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  124 D1:B9CA 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  125 D1:B9D2 FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  126 D1:B9DA FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  127 D1:B9E2 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  128 D1:B9EA FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  129 D1:B9F2 FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  130 D1:B9FA 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  131 D1:BA02 FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  132 D1:BA0A FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  133 D1:BA12 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  134 D1:BA1A FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  135 D1:BA22 FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  136 D1:BA2A 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  137 D1:BA32 FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  138 D1:BA3A FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  139 D1:BA42 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  140 D1:BA4A 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  141 D1:BA52 E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  142 D1:BA5A -  -  -  -  
  143 D1:BA5A 95 D0 -  -  	.db %10010101, %11010000
  144 D1:BA5C -  -  -  -  
  145 D1:BA5C 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  146 D1:BA64 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  147 D1:BA6C 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  148 D1:BA74 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  149 D1:BA7C 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  150 D1:BA84 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  151 D1:BA8C 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  152 D1:BA94 A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  153 D1:BA9C 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  154 D1:BAA4 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  155 D1:BAAC 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  156 D1:BAB4 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  157 D1:BABC AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  158 D1:BAC4 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  159 D1:BACC 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  160 D1:BAD4 AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  161 D1:BADC AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  162 D1:BAE4 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  163 D1:BAEC AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  164 D1:BAF4 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  165 D1:BAFC AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  166 D1:BB04 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  167 D1:BB0C 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  168 D1:BB14 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  169 D1:BB1C AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  170 D1:BB24 A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  171 D1:BB2C 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  172 D1:BB34 AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  173 D1:BB3C 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  174 D1:BB44 AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  175 D1:BB4C A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  176 D1:BB54 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  177 D1:BB5C 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  178 D1:BB64 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  179 D1:BB6C 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  180 D1:BB74 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  181 D1:BB7C 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  182 D1:BB84 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  183 D1:BB8C 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  184 D1:BB94 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  185 D1:BB9C 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  186 D1:BBA4 A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  187 D1:BBAC AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  188 D1:BBB4 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  189 D1:BBBC 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  190 D1:BBC4 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  191 D1:BBCC 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  192 D1:BBD4 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  193 D1:BBDC 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  194 D1:BBE4 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  195 D1:BBEC 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  196 D1:BBF4 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  197 D1:BBFC 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  198 D1:BC01 -  -  -  -  
  199 D1:BC01 -  -  -  -  
  200 D1:BC01 -  -  -  -  OrangeDot:
  201 D1:BC01 08 -  -  -  	.db %00001000
  202 D1:BC02 0F 0F -  -  	.db 15, 15
  203 D1:BC04 03 C0 0F C0 
              7F E1 FF E7 	.db %00000011, %11000000, %00001111, %11000000, %01111111, %11100001, %11111111, %11100111
  204 D1:BC0C FF DF FF FF 
              FF FF FF FF 	.db %11111111, %11011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  205 D1:BC14 FF FF FF FF 
              FB FF E3 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111011, %11111111, %11100011, %11111111
  206 D1:BC1C C3 FF 01 F8 
              00 -  -  -  	.db %11000011, %11111111, %00000001, %11111000, %00000000
  207 D1:BC21 -  -  -  -  
  208 D1:BC21 B0 -  -  -  	.db %10110000
  209 D1:BC22 -  -  -  -  
  210 D1:BC22 -  -  -  -  
  211 D1:BC22 -  -  -  -  
  212 D1:BC22 -  -  -  -  SquiggleL:
  213 D1:BC22 08 -  -  -  	.db %00001000
  214 D1:BC23 26 18 -  -  	.db 38, 24
  215 D1:BC25 00 00 07 FF 
              80 00 00 1F 	.db %00000000, %00000000, %00000111, %11111111, %10000000, %00000000, %00000000, %00011111
  216 D1:BC2D FE 00 00 00 
              7F FF C0 00 	.db %11111110, %00000000, %00000000, %00000000, %01111111, %11111111, %11000000, %00000000
  217 D1:BC35 01 FF FF 00 
              00 07 FF FC 	.db %00000001, %11111111, %11111111, %00000000, %00000000, %00000111, %11111111, %11111100
  218 D1:BC3D 00 00 1F 1F 
              F0 00 00 7C 	.db %00000000, %00000000, %00011111, %00011111, %11110000, %00000000, %00000000, %01111100
  219 D1:BC45 7F C1 FC 01 
              F0 1F 07 F0 	.db %01111111, %11000001, %11111100, %00000001, %11110000, %00011111, %00000111, %11110000
  220 D1:BC4D 07 C0 7C 1F 
              C0 1F 01 F3 	.db %00000111, %11000000, %01111100, %00011111, %11000000, %00011111, %00000001, %11110011
  221 D1:BC55 FF F8 7C 07 
              CF FF E1 F0 	.db %11111111, %11111000, %01111100, %00000111, %11001111, %11111111, %11100001, %11110000
  222 D1:BC5D 1F 3F FF FF 
              C0 00 FF FF 	.db %00011111, %00111111, %11111111, %11111111, %11000000, %00000000, %11111111, %11111111
  223 D1:BC65 FF 00 0F E0 
              FF F0 00 3F 	.db %11111111, %00000000, %00001111, %11100000, %11111111, %11110000, %00000000, %00111111
  224 D1:BC6D 83 FF C0 00 
              FE 0F FF 00 	.db %10000011, %11111111, %11000000, %00000000, %11111110, %00001111, %11111111, %00000000
  225 D1:BC75 03 F8 0F FC 
              00 0F E0 3F 	.db %00000011, %11111000, %00001111, %11111100, %00000000, %00001111, %11100000, %00111111
  226 D1:BC7D F0 00 3E 00 
              1F C0 00 F8 	.db %11110000, %00000000, %00111110, %00000000, %00011111, %11000000, %00000000, %11111000
  227 D1:BC85 00 7F 00 03 
              E0 01 FC 00 	.db %00000000, %01111111, %00000000, %00000011, %11100000, %00000001, %11111100, %00000000
  228 D1:BC8D 0F 80 00 00 
              00 3E 00 00 	.db %00001111, %10000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000000
  229 D1:BC95 00 00 -  -  	.db %00000000, %00000000
  230 D1:BC97 -  -  -  -  
  231 D1:BC97 50 -  -  -  	.db %01010000
  232 D1:BC98 -  -  -  -  
  233 D1:BC98 -  -  -  -  
  234 D1:BC98 -  -  -  -  
  235 D1:BC98 -  -  -  -  Banana5:
  236 D1:BC98 20 -  -  -  	.db %00100000
  237 D1:BC99 20 20 -  -  	.db 32, 32
  238 D1:BC9B 00 00 00 3C 
              00 00 00 FC 	.db %00000000, %00000000, %00000000, %00111100, %00000000, %00000000, %00000000, %11111100
  239 D1:BCA3 00 00 03 FC 
              00 00 07 FC 	.db %00000000, %00000000, %00000011, %11111100, %00000000, %00000000, %00000111, %11111100
  240 D1:BCAB 00 00 0F FC 
              00 00 3F FC 	.db %00000000, %00000000, %00001111, %11111100, %00000000, %00000000, %00111111, %11111100
  241 D1:BCB3 00 00 7F FC 
              00 00 FF F8 	.db %00000000, %00000000, %01111111, %11111100, %00000000, %00000000, %11111111, %11111000
  242 D1:BCBB 00 03 FF F0 
              00 07 FF F0 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000111, %11111111, %11110000
  243 D1:BCC3 00 1F FF E0 
              00 3F FF E0 	.db %00000000, %00011111, %11111111, %11100000, %00000000, %00111111, %11111111, %11100000
  244 D1:BCCB 00 7F FF C0 
              01 FF FF 80 	.db %00000000, %01111111, %11111111, %11000000, %00000001, %11111111, %11111111, %10000000
  245 D1:BCD3 01 FF FF 00 
              03 FF FE 00 	.db %00000001, %11111111, %11111111, %00000000, %00000011, %11111111, %11111110, %00000000
  246 D1:BCDB 07 FF FE 00 
              0F FF FC 00 	.db %00000111, %11111111, %11111110, %00000000, %00001111, %11111111, %11111100, %00000000
  247 D1:BCE3 1F FF F8 00 
              1F FF F0 00 	.db %00011111, %11111111, %11111000, %00000000, %00011111, %11111111, %11110000, %00000000
  248 D1:BCEB 3F FF C0 00 
              3F FF 80 00 	.db %00111111, %11111111, %11000000, %00000000, %00111111, %11111111, %10000000, %00000000
  249 D1:BCF3 7F FF 00 00 
              7F FC 00 00 	.db %01111111, %11111111, %00000000, %00000000, %01111111, %11111100, %00000000, %00000000
  250 D1:BCFB FF F8 00 00 
              FF E0 00 00 	.db %11111111, %11111000, %00000000, %00000000, %11111111, %11100000, %00000000, %00000000
  251 D1:BD03 FF C0 00 00 
              FF 80 00 00 	.db %11111111, %11000000, %00000000, %00000000, %11111111, %10000000, %00000000, %00000000
  252 D1:BD0B FF 00 00 00 
              FC 00 00 00 	.db %11111111, %00000000, %00000000, %00000000, %11111100, %00000000, %00000000, %00000000
  253 D1:BD13 F8 00 00 00 
              F8 00 00 00 	.db %11111000, %00000000, %00000000, %00000000, %11111000, %00000000, %00000000, %00000000
  254 D1:BD1B -  -  -  -  
  255 D1:BD1B 01 20 -  -  	.db %00000001, %00100000
  256 D1:BD1D -  -  -  -  
  257 D1:BD1D 00 50 05 A0 
              05 A8 01 6A 	.db %00000000, %01010000, %00000101, %10100000, %00000101, %10101000, %00000001, %01101010
  258 D1:BD25 6A 55 A9 AA 
              56 A9 AA 55 	.db %01101010, %01010101, %10101001, %10101010, %01010110, %10101001, %10101010, %01010101
  259 D1:BD2D AA 66 A5 5A 
              A6 6A 56 AA 	.db %10101010, %01100110, %10100101, %01011010, %10100110, %01101010, %01010110, %10101010
  260 D1:BD35 66 A5 5A AA 
              A6 A9 5A AA 	.db %01100110, %10100101, %01011010, %10101010, %10100110, %10101001, %01011010, %10101010
  261 D1:BD3D 66 A9 56 AA 
              99 9A 55 6A 	.db %01100110, %10101001, %01010110, %10101010, %10011001, %10011010, %01010101, %01101010
  262 D1:BD45 AA 99 A9 6A 
              AA AA 6A 5A 	.db %10101010, %10011001, %10101001, %01101010, %10101010, %10101010, %01101010, %01011010
  263 D1:BD4D AA AA 9A 96 
              AA AA A6 65 	.db %10101010, %10101010, %10011010, %10010110, %10101010, %10101010, %10100110, %01100101
  264 D1:BD55 6A AA AA 66 
              55 AA AA A6 	.db %01101010, %10101010, %10101010, %01100110, %01010101, %10101010, %10101010, %10100110
  265 D1:BD5D 65 6A AA A9 
              99 56 AA A6 	.db %01100101, %01101010, %10101010, %10101001, %10011001, %01010110, %10101010, %10100110
  266 D1:BD65 66 5A AA 99 
              95 5A A6 66 	.db %01100110, %01011010, %10101010, %10011001, %10010101, %01011010, %10100110, %01100110
  267 D1:BD6D 95 AA 66 A5 
              6A 99 A5 5A 	.db %10010101, %10101010, %01100110, %10100101, %01101010, %10011001, %10100101, %01011010
  268 D1:BD75 99 A5 59 9A 
              56 66 55 02 	.db %10011001, %10100101, %01011001, %10011010, %01010110, %01100110, %01010101, %00000010
  269 D1:BD7D 55 00 60 04 
              00 -  -  -  	.db %01010101, %00000000, %01100000, %00000100, %00000000
  270 D1:BD82 -  -  -  -  
  271 D1:BD82 -  -  -  -  
  272 D1:BD82 -  -  -  -  GreenCurl1:
  273 D1:BD82 08 -  -  -  	.db %00001000
  274 D1:BD83 20 20 -  -  	.db 32, 32
  275 D1:BD85 00 0F E0 00 
              00 1F E0 00 	.db %00000000, %00001111, %11100000, %00000000, %00000000, %00011111, %11100000, %00000000
  276 D1:BD8D 00 FF E0 00 
              03 FE 00 00 	.db %00000000, %11111111, %11100000, %00000000, %00000011, %11111110, %00000000, %00000000
  277 D1:BD95 07 F8 00 00 
              07 E0 00 00 	.db %00000111, %11111000, %00000000, %00000000, %00000111, %11100000, %00000000, %00000000
  278 D1:BD9D 1F 80 00 00 
              3F 00 00 00 	.db %00011111, %10000000, %00000000, %00000000, %00111111, %00000000, %00000000, %00000000
  279 D1:BDA5 3E 07 FE 00 
              7C 0F FF F8 	.db %00111110, %00000111, %11111110, %00000000, %01111100, %00001111, %11111111, %11111000
  280 D1:BDAD 78 1F FF FC 
              F0 3F 07 FE 	.db %01111000, %00011111, %11111111, %11111100, %11110000, %00111111, %00000111, %11111110
  281 D1:BDB5 F0 3C 00 3F 
              E0 78 00 1F 	.db %11110000, %00111100, %00000000, %00111111, %11100000, %01111000, %00000000, %00011111
  282 D1:BDBD E0 78 00 07 
              E0 78 0E 07 	.db %11100000, %01111000, %00000000, %00000111, %11100000, %01111000, %00001110, %00000111
  283 D1:BDC5 E0 78 0E 07 
              E0 38 0E 03 	.db %11100000, %01111000, %00001110, %00000111, %11100000, %00111000, %00001110, %00000011
  284 D1:BDCD F0 3C 1E 03 
              F8 3E 3E 07 	.db %11110000, %00111100, %00011110, %00000011, %11111000, %00111110, %00111110, %00000111
  285 D1:BDD5 F8 1F FE 07 
              78 1F FC 07 	.db %11111000, %00011111, %11111110, %00000111, %01111000, %00011111, %11111100, %00000111
  286 D1:BDDD 3C 0F F8 0F 
              3E 00 70 1F 	.db %00111100, %00001111, %11111000, %00001111, %00111110, %00000000, %01110000, %00011111
  287 D1:BDE5 1F 00 00 3E 
              0F 80 00 FE 	.db %00011111, %00000000, %00000000, %00111110, %00001111, %10000000, %00000000, %11111110
  288 D1:BDED 0F C0 01 FC 
              07 C0 03 F8 	.db %00001111, %11000000, %00000001, %11111100, %00000111, %11000000, %00000011, %11111000
  289 D1:BDF5 03 E0 0F E0 
              01 FF FF C0 	.db %00000011, %11100000, %00001111, %11100000, %00000001, %11111111, %11111111, %11000000
  290 D1:BDFD 00 FF FF 00 
              00 7F FE 00 	.db %00000000, %11111111, %11111111, %00000000, %00000000, %01111111, %11111110, %00000000
  291 D1:BE05 -  -  -  -  
  292 D1:BE05 50 -  -  -  	.db %01010000
  293 D1:BE06 -  -  -  -  
  294 D1:BE06 -  -  -  -  
  295 D1:BE06 -  -  -  -  
  296 D1:BE06 -  -  -  -  Bluecurl:
  297 D1:BE06 08 -  -  -  	.db %00001000
  298 D1:BE07 30 30 -  -  	.db 48, 48
  299 D1:BE09 00 00 FF C0 
              00 00 00 01 	.db %00000000, %00000000, %11111111, %11000000, %00000000, %00000000, %00000000, %00000001
  300 D1:BE11 FF FE 00 00 
              00 07 C0 7F 	.db %11111111, %11111110, %00000000, %00000000, %00000000, %00000111, %11000000, %01111111
  301 D1:BE19 00 00 00 1F 
              00 07 C0 00 	.db %00000000, %00000000, %00000000, %00011111, %00000000, %00000111, %11000000, %00000000
  302 D1:BE21 00 3E 00 01 
              F0 00 00 78 	.db %00000000, %00111110, %00000000, %00000001, %11110000, %00000000, %00000000, %01111000
  303 D1:BE29 00 00 78 00 
              00 F0 00 00 	.db %00000000, %00000000, %01111000, %00000000, %00000000, %11110000, %00000000, %00000000
  304 D1:BE31 1C 00 01 E0 
              00 00 0C 00 	.db %00011100, %00000000, %00000001, %11100000, %00000000, %00000000, %00001100, %00000000
  305 D1:BE39 01 C0 00 00 
              0E 00 01 80 	.db %00000001, %11000000, %00000000, %00000000, %00001110, %00000000, %00000001, %10000000
  306 D1:BE41 00 00 07 00 
              03 80 00 00 	.db %00000000, %00000000, %00000111, %00000000, %00000011, %10000000, %00000000, %00000000
  307 D1:BE49 03 80 03 03 
              FF 80 01 C0 	.db %00000011, %10000000, %00000011, %00000011, %11111111, %10000000, %00000001, %11000000
  308 D1:BE51 03 0F FF C0 
              00 E0 07 1F 	.db %00000011, %00001111, %11111111, %11000000, %00000000, %11100000, %00000111, %00011111
  309 D1:BE59 00 F0 00 F0 
              0E 18 00 78 	.db %00000000, %11110000, %00000000, %11110000, %00001110, %00011000, %00000000, %01111000
  310 D1:BE61 00 30 0E 38 
              00 1C 00 38 	.db %00000000, %00110000, %00001110, %00111000, %00000000, %00011100, %00000000, %00111000
  311 D1:BE69 1C 30 00 0E 
              00 38 1C 30 	.db %00011100, %00110000, %00000000, %00001110, %00000000, %00111000, %00011100, %00110000
  312 D1:BE71 00 0E 00 1C 
              18 30 00 06 	.db %00000000, %00001110, %00000000, %00011100, %00011000, %00110000, %00000000, %00000110
  313 D1:BE79 00 0C 38 30 
              00 07 00 0E 	.db %00000000, %00001100, %00111000, %00110000, %00000000, %00000111, %00000000, %00001110
  314 D1:BE81 70 30 1F 03 
              80 0E 60 30 	.db %01110000, %00110000, %00011111, %00000011, %10000000, %00001110, %01100000, %00110000
  315 D1:BE89 1F 01 C0 06 
              E0 30 18 00 	.db %00011111, %00000001, %11000000, %00000110, %11100000, %00110000, %00011000, %00000000
  316 D1:BE91 C0 06 E0 30 
              18 00 C0 07 	.db %11000000, %00000110, %11100000, %00110000, %00011000, %00000000, %11000000, %00000111
  317 D1:BE99 C0 30 18 00 
              C0 07 C0 30 	.db %11000000, %00110000, %00011000, %00000000, %11000000, %00000111, %11000000, %00110000
  318 D1:BEA1 18 00 C0 03 
              C0 30 1C 00 	.db %00011000, %00000000, %11000000, %00000011, %11000000, %00110000, %00011100, %00000000
  319 D1:BEA9 C0 03 C0 30 
              0C 00 C0 03 	.db %11000000, %00000011, %11000000, %00110000, %00001100, %00000000, %11000000, %00000011
  320 D1:BEB1 C0 30 0E 00 
              C0 07 C0 38 	.db %11000000, %00110000, %00001110, %00000000, %11000000, %00000111, %11000000, %00111000
  321 D1:BEB9 07 00 C0 07 
              00 18 07 81 	.db %00000111, %00000000, %11000000, %00000111, %00000000, %00011000, %00000111, %10000001
  322 D1:BEC1 C0 06 00 18 
              01 E7 80 06 	.db %11000000, %00000110, %00000000, %00011000, %00000001, %11100111, %10000000, %00000110
  323 D1:BEC9 00 1C 01 FF 
              80 06 00 0C 	.db %00000000, %00011100, %00000001, %11111111, %10000000, %00000110, %00000000, %00001100
  324 D1:BED1 00 3C 00 0E 
              00 0E 00 00 	.db %00000000, %00111100, %00000000, %00001110, %00000000, %00001110, %00000000, %00000000
  325 D1:BED9 00 0E 00 06 
              00 00 00 0C 	.db %00000000, %00001110, %00000000, %00000110, %00000000, %00000000, %00000000, %00001100
  326 D1:BEE1 00 07 00 00 
              00 1C 00 03 	.db %00000000, %00000111, %00000000, %00000000, %00000000, %00011100, %00000000, %00000011
  327 D1:BEE9 80 00 00 38 
              00 01 80 00 	.db %10000000, %00000000, %00000000, %00111000, %00000000, %00000001, %10000000, %00000000
  328 D1:BEF1 00 78 00 01 
              C0 00 00 F0 	.db %00000000, %01111000, %00000000, %00000001, %11000000, %00000000, %00000000, %11110000
  329 D1:BEF9 00 00 E0 00 
              01 E0 00 00 	.db %00000000, %00000000, %11100000, %00000000, %00000001, %11100000, %00000000, %00000000
  330 D1:BF01 70 00 03 80 
              00 00 78 00 	.db %01110000, %00000000, %00000011, %10000000, %00000000, %00000000, %01111000, %00000000
  331 D1:BF09 07 80 00 00 
              18 00 1F 00 	.db %00000111, %10000000, %00000000, %00000000, %00011000, %00000000, %00011111, %00000000
  332 D1:BF11 00 00 1C 00 
              7C 00 00 00 	.db %00000000, %00000000, %00011100, %00000000, %01111100, %00000000, %00000000, %00000000
  333 D1:BF19 1E 01 F8 00 
              00 00 07 F7 	.db %00011110, %00000001, %11111000, %00000000, %00000000, %00000000, %00000111, %11110111
  334 D1:BF21 E0 00 00 00 
              03 FF 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000011, %11111111, %00000000, %00000000
  335 D1:BF29 -  -  -  -  
  336 D1:BF29 60 -  -  -  	.db %01100000
  337 D1:BF2A -  -  -  -  
  338 D1:BF2A -  -  -  -  
  339 D1:BF2A -  -  -  -  
Listing for file "ascent.asm"
  278 D1:BF2A -  -  -  -  #include "FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FG_Data.txt"
    1 D1:BF2A -  -  -  -  FG_Data_frame_table:
    2 D1:BF2A E2 C7 D1 -  	.dl FG_Data_0
    3 D1:BF2D BE C7 D1 -  	.dl FG_Data_1
    4 D1:BF30 9A C7 D1 -  	.dl FG_Data_2
    5 D1:BF33 72 C7 D1 -  	.dl FG_Data_3
    6 D1:BF36 32 C7 D1 -  	.dl FG_Data_4
    7 D1:BF39 0A C7 D1 -  	.dl FG_Data_5
    8 D1:BF3C E6 C6 D1 -  	.dl FG_Data_6
    9 D1:BF3F BE C6 D1 -  	.dl FG_Data_7
   10 D1:BF42 96 C6 D1 -  	.dl FG_Data_8
   11 D1:BF45 6E C6 D1 -  	.dl FG_Data_9
   12 D1:BF48 46 C6 D1 -  	.dl FG_Data_10
   13 D1:BF4B 22 C6 D1 -  	.dl FG_Data_11
   14 D1:BF4E DE C5 D1 -  	.dl FG_Data_12
   15 D1:BF51 BA C5 D1 -  	.dl FG_Data_13
   16 D1:BF54 96 C5 D1 -  	.dl FG_Data_14
   17 D1:BF57 6E C5 D1 -  	.dl FG_Data_15
   18 D1:BF5A 46 C5 D1 -  	.dl FG_Data_16
   19 D1:BF5D 1E C5 D1 -  	.dl FG_Data_17
   20 D1:BF60 EE C4 D1 -  	.dl FG_Data_18
   21 D1:BF63 D2 C4 D1 -  	.dl FG_Data_19
   22 D1:BF66 AA C4 D1 -  	.dl FG_Data_20
   23 D1:BF69 32 C4 D1 -  	.dl FG_Data_21
   24 D1:BF6C 9E C3 D1 -  	.dl FG_Data_22
   25 D1:BF6F 32 C3 D1 -  	.dl FG_Data_23
   26 D1:BF72 92 C2 D1 -  	.dl FG_Data_24
   27 D1:BF75 FA C1 D1 -  	.dl FG_Data_25
   28 D1:BF78 CE C1 D1 -  	.dl FG_Data_26
   29 D1:BF7B A6 C1 D1 -  	.dl FG_Data_27
   30 D1:BF7E 82 C1 D1 -  	.dl FG_Data_28
   31 D1:BF81 3E C1 D1 -  	.dl FG_Data_29
   32 D1:BF84 16 C1 D1 -  	.dl FG_Data_30
   33 D1:BF87 F6 C0 D1 -  	.dl FG_Data_31
   34 D1:BF8A D2 C0 D1 -  	.dl FG_Data_32
   35 D1:BF8D A6 C0 D1 -  	.dl FG_Data_33
   36 D1:BF90 72 C0 D1 -  	.dl FG_Data_34
   37 D1:BF93 4E C0 D1 -  	.dl FG_Data_35
   38 D1:BF96 16 C0 D1 -  	.dl FG_Data_36
   39 D1:BF99 DE BF D1 -  	.dl FG_Data_37
   40 D1:BF9C BE BF D1 -  	.dl FG_Data_38
   41 D1:BF9F A2 BF D1 -  	.dl FG_Data_39
   42 D1:BFA2 -  -  -  -  
   43 D1:BFA2 -  -  -  -  
   44 D1:BFA2 -  -  -  -  
   45 D1:BFA2 -  -  -  -  FG_Data_39:
   46 D1:BFA2 AA D0 D1 -  	.dl Sprite_Table_0
   47 D1:BFA5 06 -  -  -  	.db 6
   48 D1:BFA6 31 2D 77 01 	.db 49, 45, 119, 1
   49 D1:BFAA 57 2D 28 01 	.db 87, 45, 40, 1
   50 D1:BFAE 92 2D 51 01 	.db 146, 45, 81, 1
   51 D1:BFB2 A0 2D 1D 03 	.db 160, 45, 29, 3
   52 D1:BFB6 3A 17 50 07 	.db 58, 23, 80, 7
   53 D1:BFBA 98 17 77 00 	.db 152, 23, 119, 0
   54 D1:BFBE -  -  -  -  
   55 D1:BFBE -  -  -  -  FG_Data_38:
   56 D1:BFBE AA D0 D1 -  	.dl Sprite_Table_0
   57 D1:BFC1 07 -  -  -  	.db 7
   58 D1:BFC2 1D 2D 22 02 	.db 29, 45, 34, 2
   59 D1:BFC6 62 2D 47 02 	.db 98, 45, 71, 2
   60 D1:BFCA B0 2D 67 06 	.db 176, 45, 103, 6
   61 D1:BFCE EF 2D 4F 03 	.db 239, 45, 79, 3
   62 D1:BFD2 34 2D 6B 03 	.db 52, 45, 107, 3
   63 D1:BFD6 D3 17 72 05 	.db 211, 23, 114, 5
   64 D1:BFDA 94 17 40 05 	.db 148, 23, 64, 5
   65 D1:BFDE -  -  -  -  
   66 D1:BFDE -  -  -  -  FG_Data_37:
   67 D1:BFDE AA D0 D1 -  	.dl Sprite_Table_0
   68 D1:BFE1 0D -  -  -  	.db 13
   69 D1:BFE2 58 2D 6D 01 	.db 88, 45, 109, 1
   70 D1:BFE6 7E 2D 1E 01 	.db 126, 45, 30, 1
   71 D1:BFEA B9 2D 47 01 	.db 185, 45, 71, 1
   72 D1:BFEE C7 2D 13 03 	.db 199, 45, 19, 3
   73 D1:BFF2 16 2D 45 03 	.db 22, 45, 69, 3
   74 D1:BFF6 61 17 46 07 	.db 97, 23, 70, 7
   75 D1:BFFA BF 17 6D 00 	.db 191, 23, 109, 0
   76 D1:BFFE 6C 2D 2A 01 	.db 108, 45, 42, 1
   77 D1:C002 C2 2D 68 01 	.db 194, 45, 104, 1
   78 D1:C006 99 2D 27 03 	.db 153, 45, 39, 3
   79 D1:C00A 59 2D 5B 03 	.db 89, 45, 91, 3
   80 D1:C00E EF 17 4A 00 	.db 239, 23, 74, 0
   81 D1:C012 7F 2F 47 09 	.db 127, 47, 71, 9
   82 D1:C016 -  -  -  -  
   83 D1:C016 -  -  -  -  FG_Data_36:
   84 D1:C016 AA D0 D1 -  	.dl Sprite_Table_0
   85 D1:C019 0D -  -  -  	.db 13
   86 D1:C01A 44 2D 18 02 	.db 68, 45, 24, 2
   87 D1:C01E 89 2D 3D 02 	.db 137, 45, 61, 2
   88 D1:C022 D7 2D 5D 06 	.db 215, 45, 93, 6
   89 D1:C026 5B 2D 61 03 	.db 91, 45, 97, 3
   90 D1:C02A FA 17 69 00 	.db 250, 23, 105, 0
   91 D1:C02E BB 17 37 00 	.db 187, 23, 55, 0
   92 D1:C032 16 17 40 05 	.db 22, 23, 64, 5
   93 D1:C036 97 2D 24 01 	.db 151, 45, 36, 1
   94 D1:C03A 8A 2D 5F 02 	.db 138, 45, 95, 2
   95 D1:C03E DA 2D 49 03 	.db 218, 45, 73, 3
   96 D1:C042 2E 17 48 07 	.db 46, 23, 72, 7
   97 D1:C046 CE 17 74 04 	.db 206, 23, 116, 4
   98 D1:C04A 68 17 3D 00 	.db 104, 23, 61, 0
   99 D1:C04E -  -  -  -  
  100 D1:C04E -  -  -  -  FG_Data_35:
  101 D1:C04E AA D0 D1 -  	.dl Sprite_Table_0
  102 D1:C051 08 -  -  -  	.db 8
  103 D1:C052 93 2D 20 01 	.db 147, 45, 32, 1
  104 D1:C056 E9 2D 5E 01 	.db 233, 45, 94, 1
  105 D1:C05A C0 2D 1D 03 	.db 192, 45, 29, 3
  106 D1:C05E 80 2D 51 03 	.db 128, 45, 81, 3
  107 D1:C062 01 2D 3F 03 	.db 1, 45, 63, 3
  108 D1:C066 A6 2F 3D 09 	.db 166, 47, 61, 9
  109 D1:C06A E4 2D 37 03 	.db 228, 45, 55, 3
  110 D1:C06E FB 17 6C 00 	.db 251, 23, 108, 0
  111 D1:C072 -  -  -  -  
  112 D1:C072 -  -  -  -  FG_Data_34:
  113 D1:C072 AA D0 D1 -  	.dl Sprite_Table_0
  114 D1:C075 0C -  -  -  	.db 12
  115 D1:C076 23 2D 2C 02 	.db 35, 45, 44, 2
  116 D1:C07A 5E 2D 55 02 	.db 94, 45, 85, 2
  117 D1:C07E 6C 2D 21 06 	.db 108, 45, 33, 6
  118 D1:C082 06 17 54 07 	.db 6, 23, 84, 7
  119 D1:C086 64 17 7A 05 	.db 100, 23, 122, 5
  120 D1:C08A BE 2D 1A 01 	.db 190, 45, 26, 1
  121 D1:C08E B1 2D 55 02 	.db 177, 45, 85, 2
  122 D1:C092 0B 2D 2D 03 	.db 11, 45, 45, 3
  123 D1:C096 55 17 3E 07 	.db 85, 23, 62, 7
  124 D1:C09A F5 17 6A 04 	.db 245, 23, 106, 4
  125 D1:C09E 8F 17 33 00 	.db 143, 23, 51, 0
  126 D1:C0A2 22 17 62 00 	.db 34, 23, 98, 0
  127 D1:C0A6 -  -  -  -  
  128 D1:C0A6 -  -  -  -  FG_Data_33:
  129 D1:C0A6 AA D0 D1 -  	.dl Sprite_Table_0
  130 D1:C0A9 0A -  -  -  	.db 10
  131 D1:C0AA 87 2D 1A 02 	.db 135, 45, 26, 2
  132 D1:C0AE 2E 2D 4A 01 	.db 46, 45, 74, 1
  133 D1:C0B2 FD 2D 7B 02 	.db 253, 45, 123, 2
  134 D1:C0B6 7C 2D 6A 03 	.db 124, 45, 106, 3
  135 D1:C0BA DE 2D 13 03 	.db 222, 45, 19, 3
  136 D1:C0BE BB 2D 53 06 	.db 187, 45, 83, 6
  137 D1:C0C2 00 2D 6F 06 	.db 0, 45, 111, 6
  138 D1:C0C6 2E 17 15 04 	.db 46, 23, 21, 4
  139 D1:C0CA 9F 17 76 05 	.db 159, 23, 118, 5
  140 D1:C0CE 60 17 44 05 	.db 96, 23, 68, 5
  141 D1:C0D2 -  -  -  -  
  142 D1:C0D2 -  -  -  -  FG_Data_32:
  143 D1:C0D2 AA D0 D1 -  	.dl Sprite_Table_0
  144 D1:C0D5 08 -  -  -  	.db 8
  145 D1:C0D6 38 2D 2E 02 	.db 56, 45, 46, 2
  146 D1:C0DA 8E 2D 6C 02 	.db 142, 45, 108, 2
  147 D1:C0DE E9 2D 25 01 	.db 233, 45, 37, 1
  148 D1:C0E2 65 2D 2B 06 	.db 101, 45, 43, 6
  149 D1:C0E6 25 2D 5F 06 	.db 37, 45, 95, 6
  150 D1:C0EA 93 17 15 04 	.db 147, 23, 21, 4
  151 D1:C0EE BB 17 4E 00 	.db 187, 23, 78, 0
  152 D1:C0F2 4B 2F 4A 08 	.db 75, 47, 74, 8
  153 D1:C0F6 -  -  -  -  
  154 D1:C0F6 -  -  -  -  FG_Data_31:
  155 D1:C0F6 AA D0 D1 -  	.dl Sprite_Table_0
  156 D1:C0F9 07 -  -  -  	.db 7
  157 D1:C0FA 63 2D 28 02 	.db 99, 45, 40, 2
  158 D1:C0FE 56 2D 62 01 	.db 86, 45, 98, 1
  159 D1:C102 A6 2D 4D 06 	.db 166, 45, 77, 6
  160 D1:C106 D6 2D 11 03 	.db 214, 45, 17, 3
  161 D1:C10A 9A 17 78 04 	.db 154, 23, 120, 4
  162 D1:C10E FE 17 09 00 	.db 254, 23, 9, 0
  163 D1:C112 34 17 40 05 	.db 52, 23, 64, 5
  164 D1:C116 -  -  -  -  
  165 D1:C116 -  -  -  -  FG_Data_30:
  166 D1:C116 AA D0 D1 -  	.dl Sprite_Table_0
  167 D1:C119 09 -  -  -  	.db 9
  168 D1:C11A 49 2D 51 02 	.db 73, 45, 81, 2
  169 D1:C11E 35 2D 26 01 	.db 53, 45, 38, 1
  170 D1:C122 9E 2D 76 01 	.db 158, 45, 118, 1
  171 D1:C126 F7 2D 07 03 	.db 247, 45, 7, 3
  172 D1:C12A B0 2D 3B 06 	.db 176, 45, 59, 6
  173 D1:C12E FA 17 4C 04 	.db 250, 23, 76, 4
  174 D1:C132 C7 17 6F 05 	.db 199, 23, 111, 5
  175 D1:C136 66 17 1C 00 	.db 102, 23, 28, 0
  176 D1:C13A 6D 2F 30 08 	.db 109, 47, 48, 8
  177 D1:C13E -  -  -  -  
  178 D1:C13E -  -  -  -  FG_Data_29:
  179 D1:C13E AA D0 D1 -  	.dl Sprite_Table_0
  180 D1:C141 10 -  -  -  	.db 16
  181 D1:C142 E1 2D 20 01 	.db 225, 45, 32, 1
  182 D1:C146 DB 2D 2C 02 	.db 219, 45, 44, 2
  183 D1:C14A B9 2D 3B 01 	.db 185, 45, 59, 1
  184 D1:C14E A2 2D 40 02 	.db 162, 45, 64, 2
  185 D1:C152 B6 2D 4A 02 	.db 182, 45, 74, 2
  186 D1:C156 8B 2D 4F 02 	.db 139, 45, 79, 2
  187 D1:C15A 8B 2D 4F 02 	.db 139, 45, 79, 2
  188 D1:C15E A7 2D 66 02 	.db 167, 45, 102, 2
  189 D1:C162 80 2D 54 02 	.db 128, 45, 84, 2
  190 D1:C166 81 2D 24 01 	.db 129, 45, 36, 1
  191 D1:C16A 50 2D 15 01 	.db 80, 45, 21, 1
  192 D1:C16E D1 2D 0F 03 	.db 209, 45, 15, 3
  193 D1:C172 14 17 38 04 	.db 20, 23, 56, 4
  194 D1:C176 FA 17 7D 04 	.db 250, 23, 125, 4
  195 D1:C17A D9 17 44 05 	.db 217, 23, 68, 5
  196 D1:C17E 21 17 67 05 	.db 33, 23, 103, 5
  197 D1:C182 -  -  -  -  
  198 D1:C182 -  -  -  -  FG_Data_28:
  199 D1:C182 AA D0 D1 -  	.dl Sprite_Table_0
  200 D1:C185 08 -  -  -  	.db 8
  201 D1:C186 98 2D 3F 01 	.db 152, 45, 63, 1
  202 D1:C18A C9 2D 60 01 	.db 201, 45, 96, 1
  203 D1:C18E 6B 2D 83 01 	.db 107, 45, 131, 1
  204 D1:C192 D3 2D 13 03 	.db 211, 45, 19, 3
  205 D1:C196 59 17 1A 04 	.db 89, 23, 26, 4
  206 D1:C19A 64 17 6A 05 	.db 100, 23, 106, 5
  207 D1:C19E 05 17 41 05 	.db 5, 23, 65, 5
  208 D1:C1A2 F1 2F 4A 09 	.db 241, 47, 74, 9
  209 D1:C1A6 -  -  -  -  
  210 D1:C1A6 -  -  -  -  FG_Data_27:
  211 D1:C1A6 AA D0 D1 -  	.dl Sprite_Table_0
  212 D1:C1A9 09 -  -  -  	.db 9
  213 D1:C1AA 64 2D 3F 02 	.db 100, 45, 63, 2
  214 D1:C1AE 79 2D 73 02 	.db 121, 45, 115, 2
  215 D1:C1B2 DA 2D 2A 01 	.db 218, 45, 42, 1
  216 D1:C1B6 F7 2D 54 03 	.db 247, 45, 84, 3
  217 D1:C1BA 0D 2D 11 06 	.db 13, 45, 17, 6
  218 D1:C1BE 81 17 5E 04 	.db 129, 23, 94, 4
  219 D1:C1C2 83 17 1E 05 	.db 131, 23, 30, 5
  220 D1:C1C6 14 17 34 00 	.db 20, 23, 52, 0
  221 D1:C1CA 5C 2F 18 09 	.db 92, 47, 24, 9
  222 D1:C1CE -  -  -  -  
  223 D1:C1CE -  -  -  -  FG_Data_26:
  224 D1:C1CE AA D0 D1 -  	.dl Sprite_Table_0
  225 D1:C1D1 0A -  -  -  	.db 10
  226 D1:C1D2 78 2D 7F 02 	.db 120, 45, 127, 2
  227 D1:C1D6 5F 2D 20 02 	.db 95, 45, 32, 2
  228 D1:C1DA D0 2D 4F 02 	.db 208, 45, 79, 2
  229 D1:C1DE F9 2D 68 03 	.db 249, 45, 104, 3
  230 D1:C1E2 52 2D 52 03 	.db 82, 45, 82, 3
  231 D1:C1E6 8D 17 1F 04 	.db 141, 23, 31, 4
  232 D1:C1EA 9A 17 43 00 	.db 154, 23, 67, 0
  233 D1:C1EE 33 2D 7E 02 	.db 51, 45, 126, 2
  234 D1:C1F2 45 2D 42 03 	.db 69, 45, 66, 3
  235 D1:C1F6 02 2F 38 09 	.db 2, 47, 56, 9
  236 D1:C1FA -  -  -  -  
  237 D1:C1FA -  -  -  -  FG_Data_25:
  238 D1:C1FA AA D0 D1 -  	.dl Sprite_Table_0
  239 D1:C1FD 25 -  -  -  	.db 37
  240 D1:C1FE 00 2D 23 01 	.db 0, 45, 35, 1
  241 D1:C202 76 2D 28 02 	.db 118, 45, 40, 2
  242 D1:C206 70 2D 33 01 	.db 112, 45, 51, 1
  243 D1:C20A 4E 2D 43 02 	.db 78, 45, 67, 2
  244 D1:C20E 38 2D 47 01 	.db 56, 45, 71, 1
  245 D1:C212 4B 2D 51 01 	.db 75, 45, 81, 1
  246 D1:C216 20 2D 56 01 	.db 32, 45, 86, 1
  247 D1:C21A 20 2D 56 01 	.db 32, 45, 86, 1
  248 D1:C21E 6E 17 4C 00 	.db 110, 23, 76, 0
  249 D1:C222 FB 17 23 05 	.db 251, 23, 35, 5
  250 D1:C226 8F 17 84 04 	.db 143, 23, 132, 4
  251 D1:C22A 16 2D 2C 02 	.db 22, 45, 44, 2
  252 D1:C22E 15 2D 5B 01 	.db 21, 45, 91, 1
  253 D1:C232 CA 2D 2E 02 	.db 202, 45, 46, 2
  254 D1:C236 DE 2D 58 01 	.db 222, 45, 88, 1
  255 D1:C23A 3C 2D 6D 01 	.db 60, 45, 109, 1
  256 D1:C23E 8C 2F 33 08 	.db 140, 47, 51, 8
  257 D1:C242 66 2D 17 06 	.db 102, 45, 23, 6
  258 D1:C246 85 17 1F 00 	.db 133, 23, 31, 0
  259 D1:C24A CF 2D 3E 06 	.db 207, 45, 62, 6
  260 D1:C24E 98 2D 26 02 	.db 152, 45, 38, 2
  261 D1:C252 D3 2D 4F 02 	.db 211, 45, 79, 2
  262 D1:C256 53 2D 0D 06 	.db 83, 45, 13, 6
  263 D1:C25A E1 2D 1B 06 	.db 225, 45, 27, 6
  264 D1:C25E 30 2D 4D 06 	.db 48, 45, 77, 6
  265 D1:C262 7B 17 4E 04 	.db 123, 23, 78, 4
  266 D1:C266 D9 17 74 05 	.db 217, 23, 116, 5
  267 D1:C26A 14 17 70 00 	.db 20, 23, 112, 0
  268 D1:C26E 52 2D 7A 01 	.db 82, 45, 122, 1
  269 D1:C272 64 2D 3F 06 	.db 100, 45, 63, 6
  270 D1:C276 1A 17 20 00 	.db 26, 23, 32, 0
  271 D1:C27A 21 2F 34 08 	.db 33, 47, 52, 8
  272 D1:C27E 68 2D 54 02 	.db 104, 45, 84, 2
  273 D1:C282 54 2D 29 01 	.db 84, 45, 41, 1
  274 D1:C286 BD 2D 79 01 	.db 189, 45, 121, 1
  275 D1:C28A 19 17 80 04 	.db 25, 23, 128, 4
  276 D1:C28E 72 2D 75 02 	.db 114, 45, 117, 2
  277 D1:C292 -  -  -  -  
  278 D1:C292 -  -  -  -  FG_Data_24:
  279 D1:C292 AA D0 D1 -  	.dl Sprite_Table_0
  280 D1:C295 27 -  -  -  	.db 39
  281 D1:C296 95 2D 24 02 	.db 149, 45, 36, 2
  282 D1:C29A FA 2D 2F 02 	.db 250, 45, 47, 2
  283 D1:C29E 8F 2D 30 02 	.db 143, 45, 48, 2
  284 D1:C2A2 D8 2D 3E 01 	.db 216, 45, 62, 1
  285 D1:C2A6 6D 2D 3F 01 	.db 109, 45, 63, 1
  286 D1:C2AA D5 2D 4D 02 	.db 213, 45, 77, 2
  287 D1:C2AE C2 2D 43 02 	.db 194, 45, 67, 2
  288 D1:C2B2 57 2D 44 02 	.db 87, 45, 68, 2
  289 D1:C2B6 6A 2D 4E 02 	.db 106, 45, 78, 2
  290 D1:C2BA AA 2D 52 02 	.db 170, 45, 82, 2
  291 D1:C2BE 3F 2D 53 02 	.db 63, 45, 83, 2
  292 D1:C2C2 3F 2D 53 02 	.db 63, 45, 83, 2
  293 D1:C2C6 AA 2D 52 02 	.db 170, 45, 82, 2
  294 D1:C2CA A0 2D 27 01 	.db 160, 45, 39, 1
  295 D1:C2CE 9F 2D 57 02 	.db 159, 45, 87, 2
  296 D1:C2D2 6F 2D 18 01 	.db 111, 45, 24, 1
  297 D1:C2D6 F0 2D 12 03 	.db 240, 45, 18, 3
  298 D1:C2DA F8 17 47 05 	.db 248, 23, 71, 5
  299 D1:C2DE C6 2D 69 02 	.db 198, 45, 105, 2
  300 D1:C2E2 FC 2D 14 02 	.db 252, 45, 20, 2
  301 D1:C2E6 8D 17 48 05 	.db 141, 23, 72, 5
  302 D1:C2EA 85 2D 13 03 	.db 133, 45, 19, 3
  303 D1:C2EE 03 2D 66 02 	.db 3, 45, 102, 2
  304 D1:C2F2 5E 2D 1F 01 	.db 94, 45, 31, 1
  305 D1:C2F6 A3 2D 44 01 	.db 163, 45, 68, 1
  306 D1:C2FA F1 2D 64 03 	.db 241, 45, 100, 3
  307 D1:C2FE 75 2D 68 03 	.db 117, 45, 104, 3
  308 D1:C302 08 17 0E 07 	.db 8, 23, 14, 7
  309 D1:C306 A3 17 0F 04 	.db 163, 23, 15, 4
  310 D1:C30A D5 17 3E 00 	.db 213, 23, 62, 0
  311 D1:C30E 30 17 47 05 	.db 48, 23, 71, 5
  312 D1:C312 5B 2D 6A 02 	.db 91, 45, 106, 2
  313 D1:C316 FD 2D 55 02 	.db 253, 45, 85, 2
  314 D1:C31A E9 2D 2A 01 	.db 233, 45, 42, 1
  315 D1:C31E 34 2D 58 02 	.db 52, 45, 88, 2
  316 D1:C322 35 2D 28 01 	.db 53, 45, 40, 1
  317 D1:C326 04 2D 19 01 	.db 4, 45, 25, 1
  318 D1:C32A AE 17 80 07 	.db 174, 23, 128, 7
  319 D1:C32E E5 2D 1D 02 	.db 229, 45, 29, 2
  320 D1:C332 -  -  -  -  
  321 D1:C332 -  -  -  -  FG_Data_23:
  322 D1:C332 AA D0 D1 -  	.dl Sprite_Table_0
  323 D1:C335 1A -  -  -  	.db 26
  324 D1:C336 2D 2D 1A 02 	.db 45, 45, 26, 2
  325 D1:C33A 27 2D 26 02 	.db 39, 45, 38, 2
  326 D1:C33E 05 2D 35 01 	.db 5, 45, 53, 1
  327 D1:C342 02 2D 44 02 	.db 2, 45, 68, 2
  328 D1:C346 AD 2D 28 02 	.db 173, 45, 40, 2
  329 D1:C34A 25 17 3E 05 	.db 37, 23, 62, 5
  330 D1:C34E B2 17 16 00 	.db 178, 23, 22, 0
  331 D1:C352 46 17 76 07 	.db 70, 23, 118, 7
  332 D1:C356 1D 2D 09 03 	.db 29, 45, 9, 3
  333 D1:C35A FC 2D 35 06 	.db 252, 45, 53, 6
  334 D1:C35E EA 2D 70 01 	.db 234, 45, 112, 1
  335 D1:C362 81 2D 20 01 	.db 129, 45, 32, 1
  336 D1:C366 95 2D 4B 02 	.db 149, 45, 75, 2
  337 D1:C36A 24 2F 3F 08 	.db 36, 47, 63, 8
  338 D1:C36E 67 2D 4A 06 	.db 103, 45, 74, 6
  339 D1:C372 55 2D 85 01 	.db 85, 45, 133, 1
  340 D1:C376 00 2D 60 02 	.db 0, 45, 96, 2
  341 D1:C37A C0 2F 44 08 	.db 192, 47, 68, 8
  342 D1:C37E 73 17 03 00 	.db 115, 23, 3, 0
  343 D1:C382 0F 17 71 07 	.db 15, 23, 113, 7
  344 D1:C386 4B 2D 0B 06 	.db 75, 45, 11, 6
  345 D1:C38A 1B 2D 46 03 	.db 27, 45, 70, 3
  346 D1:C38E 9A 2D 59 06 	.db 154, 45, 89, 6
  347 D1:C392 DA 2D 25 06 	.db 218, 45, 37, 6
  348 D1:C396 1D 17 2B 00 	.db 29, 23, 43, 0
  349 D1:C39A B9 2F 2A 08 	.db 185, 47, 42, 8
  350 D1:C39E -  -  -  -  
  351 D1:C39E -  -  -  -  FG_Data_22:
  352 D1:C39E AA D0 D1 -  	.dl Sprite_Table_0
  353 D1:C3A1 24 -  -  -  	.db 36
  354 D1:C3A2 98 2D 2F 01 	.db 152, 45, 47, 1
  355 D1:C3A6 92 2D 3B 02 	.db 146, 45, 59, 2
  356 D1:C3AA 70 2D 4A 01 	.db 112, 45, 74, 1
  357 D1:C3AE EF 2D 3A 02 	.db 239, 45, 58, 2
  358 D1:C3B2 5A 2D 4F 02 	.db 90, 45, 79, 2
  359 D1:C3B6 6D 2D 59 02 	.db 109, 45, 89, 2
  360 D1:C3BA 42 2D 5E 02 	.db 66, 45, 94, 2
  361 D1:C3BE D7 2D 48 01 	.db 215, 45, 72, 1
  362 D1:C3C2 42 2D 5E 02 	.db 66, 45, 94, 2
  363 D1:C3C6 D7 2D 48 01 	.db 215, 45, 72, 1
  364 D1:C3CA CC 2D 4E 02 	.db 204, 45, 78, 2
  365 D1:C3CE CD 2D 1E 01 	.db 205, 45, 30, 1
  366 D1:C3D2 07 2D 24 01 	.db 7, 45, 36, 1
  367 D1:C3D6 9C 2D 0F 01 	.db 156, 45, 15, 1
  368 D1:C3DA 90 17 53 05 	.db 144, 23, 83, 5
  369 D1:C3DE B1 17 8B 07 	.db 177, 23, 139, 7
  370 D1:C3E2 88 2D 1E 03 	.db 136, 45, 30, 3
  371 D1:C3E6 F3 2D 60 02 	.db 243, 45, 96, 2
  372 D1:C3EA 38 2D 33 01 	.db 56, 45, 51, 1
  373 D1:C3EE EC 2D 35 01 	.db 236, 45, 53, 1
  374 D1:C3F2 D8 2D 22 02 	.db 216, 45, 34, 2
  375 D1:C3F6 CB 2D 5C 01 	.db 203, 45, 92, 1
  376 D1:C3FA 6C 2D 01 06 	.db 108, 45, 1, 6
  377 D1:C3FE 25 2D 35 06 	.db 37, 45, 53, 6
  378 D1:C402 6F 17 46 04 	.db 111, 23, 70, 4
  379 D1:C406 A9 17 3A 05 	.db 169, 23, 58, 5
  380 D1:C40A 37 2D 63 02 	.db 55, 45, 99, 2
  381 D1:C40E 3C 17 69 05 	.db 60, 23, 105, 5
  382 D1:C412 08 2D 2E 02 	.db 8, 45, 46, 2
  383 D1:C416 71 2D 7E 02 	.db 113, 45, 126, 2
  384 D1:C41A 83 2D 42 03 	.db 131, 45, 66, 3
  385 D1:C41E 39 17 23 05 	.db 57, 23, 35, 5
  386 D1:C422 40 2F 38 09 	.db 64, 47, 56, 9
  387 D1:C426 5E 2D 75 02 	.db 94, 45, 117, 2
  388 D1:C42A 1C 2D 58 01 	.db 28, 45, 88, 1
  389 D1:C42E 13 2D 70 01 	.db 19, 45, 112, 1
  390 D1:C432 -  -  -  -  
  391 D1:C432 -  -  -  -  FG_Data_21:
  392 D1:C432 AA D0 D1 -  	.dl Sprite_Table_0
  393 D1:C435 1D -  -  -  	.db 29
  394 D1:C436 56 2D 1A 02 	.db 86, 45, 26, 2
  395 D1:C43A B4 2D 28 02 	.db 180, 45, 40, 2
  396 D1:C43E 50 2D 26 02 	.db 80, 45, 38, 2
  397 D1:C442 AE 2D 33 01 	.db 174, 45, 51, 1
  398 D1:C446 2E 2D 35 01 	.db 46, 45, 53, 1
  399 D1:C44A 8C 2D 43 02 	.db 140, 45, 67, 2
  400 D1:C44E 76 2D 47 01 	.db 118, 45, 71, 1
  401 D1:C452 18 2D 3A 02 	.db 24, 45, 58, 2
  402 D1:C456 2B 2D 44 02 	.db 43, 45, 68, 2
  403 D1:C45A 89 2D 51 01 	.db 137, 45, 81, 1
  404 D1:C45E 5E 2D 56 01 	.db 94, 45, 86, 1
  405 D1:C462 5E 2D 56 01 	.db 94, 45, 86, 1
  406 D1:C466 00 2D 48 01 	.db 0, 45, 72, 1
  407 D1:C46A 00 2D 48 01 	.db 0, 45, 72, 1
  408 D1:C46E AC 17 4C 00 	.db 172, 23, 76, 0
  409 D1:C472 CD 17 84 04 	.db 205, 23, 132, 4
  410 D1:C476 A4 2D 17 06 	.db 164, 45, 23, 6
  411 D1:C47A 23 2D 1D 02 	.db 35, 45, 29, 2
  412 D1:C47E E2 2F 2A 08 	.db 226, 47, 42, 8
  413 D1:C482 53 2D 5B 01 	.db 83, 45, 91, 1
  414 D1:C486 7A 2D 6D 01 	.db 122, 45, 109, 1
  415 D1:C48A 4E 17 3E 05 	.db 78, 23, 62, 5
  416 D1:C48E DB 17 16 00 	.db 219, 23, 22, 0
  417 D1:C492 6F 17 76 07 	.db 111, 23, 118, 7
  418 D1:C496 46 2D 09 03 	.db 70, 45, 9, 3
  419 D1:C49A AA 2D 20 01 	.db 170, 45, 32, 1
  420 D1:C49E BE 2D 4B 02 	.db 190, 45, 75, 2
  421 D1:C4A2 54 2D 2C 02 	.db 84, 45, 44, 2
  422 D1:C4A6 1C 2D 60 02 	.db 28, 45, 96, 2
  423 D1:C4AA -  -  -  -  
  424 D1:C4AA -  -  -  -  FG_Data_20:
  425 D1:C4AA AA D0 D1 -  	.dl Sprite_Table_0
  426 D1:C4AD 09 -  -  -  	.db 9
  427 D1:C4AE 0D 2D 39 01 	.db 13, 45, 57, 1
  428 D1:C4B2 F5 2D 4E 02 	.db 245, 45, 78, 2
  429 D1:C4B6 F6 2D 1E 01 	.db 246, 45, 30, 1
  430 D1:C4BA C5 2D 0F 01 	.db 197, 45, 15, 1
  431 D1:C4BE 3E 2D 5A 01 	.db 62, 45, 90, 1
  432 D1:C4C2 48 2D 0D 06 	.db 72, 45, 13, 6
  433 D1:C4C6 89 17 32 04 	.db 137, 23, 50, 4
  434 D1:C4CA 96 17 61 05 	.db 150, 23, 97, 5
  435 D1:C4CE 66 2F 44 09 	.db 102, 47, 68, 9
  436 D1:C4D2 -  -  -  -  
  437 D1:C4D2 -  -  -  -  FG_Data_19:
  438 D1:C4D2 AA D0 D1 -  	.dl Sprite_Table_0
  439 D1:C4D5 06 -  -  -  	.db 6
  440 D1:C4D6 4F 2D 24 01 	.db 79, 45, 36, 1
  441 D1:C4DA E0 2D 7D 01 	.db 224, 45, 125, 1
  442 D1:C4DE 6C 2D 4E 06 	.db 108, 45, 78, 6
  443 D1:C4E2 CE 17 14 04 	.db 206, 23, 20, 4
  444 D1:C4E6 D9 17 64 05 	.db 217, 23, 100, 5
  445 D1:C4EA 7A 17 3B 05 	.db 122, 23, 59, 5
  446 D1:C4EE -  -  -  -  
  447 D1:C4EE -  -  -  -  FG_Data_18:
  448 D1:C4EE AA D0 D1 -  	.dl Sprite_Table_0
  449 D1:C4F1 0B -  -  -  	.db 11
  450 D1:C4F2 45 2D 49 02 	.db 69, 45, 73, 2
  451 D1:C4F6 D9 2D 39 02 	.db 217, 45, 57, 2
  452 D1:C4FA EE 2D 6D 02 	.db 238, 45, 109, 2
  453 D1:C4FE 82 2D 0A 03 	.db 130, 45, 10, 3
  454 D1:C502 6E 2D 62 06 	.db 110, 45, 98, 6
  455 D1:C506 02 17 19 04 	.db 2, 23, 25, 4
  456 D1:C50A F6 17 57 07 	.db 246, 23, 87, 7
  457 D1:C50E F8 17 18 05 	.db 248, 23, 24, 5
  458 D1:C512 89 17 2E 00 	.db 137, 23, 46, 0
  459 D1:C516 0F 17 3D 00 	.db 15, 23, 61, 0
  460 D1:C51A D1 2F 12 09 	.db 209, 47, 18, 9
  461 D1:C51E -  -  -  -  
  462 D1:C51E -  -  -  -  FG_Data_17:
  463 D1:C51E AA D0 D1 -  	.dl Sprite_Table_0
  464 D1:C521 09 -  -  -  	.db 9
  465 D1:C522 12 2D 77 01 	.db 18, 45, 119, 1
  466 D1:C526 38 2D 28 01 	.db 56, 45, 40, 1
  467 D1:C52A 73 2D 51 01 	.db 115, 45, 81, 1
  468 D1:C52E 81 2D 1D 03 	.db 129, 45, 29, 3
  469 D1:C532 1B 17 50 07 	.db 27, 23, 80, 7
  470 D1:C536 79 17 77 00 	.db 121, 23, 119, 0
  471 D1:C53A ED 2D 79 02 	.db 237, 45, 121, 2
  472 D1:C53E D4 2D 1A 02 	.db 212, 45, 26, 2
  473 D1:C542 C7 2D 4C 06 	.db 199, 45, 76, 6
  474 D1:C546 -  -  -  -  
  475 D1:C546 -  -  -  -  FG_Data_16:
  476 D1:C546 AA D0 D1 -  	.dl Sprite_Table_0
  477 D1:C549 09 -  -  -  	.db 9
  478 D1:C54A 9C 2D 16 01 	.db 156, 45, 22, 1
  479 D1:C54E 43 2D 47 02 	.db 67, 45, 71, 2
  480 D1:C552 91 2D 67 06 	.db 145, 45, 103, 6
  481 D1:C556 F3 2D 10 06 	.db 243, 45, 16, 6
  482 D1:C55A D0 2D 4F 03 	.db 208, 45, 79, 3
  483 D1:C55E 15 2D 6B 03 	.db 21, 45, 107, 3
  484 D1:C562 43 17 11 07 	.db 67, 23, 17, 7
  485 D1:C566 B4 17 73 00 	.db 180, 23, 115, 0
  486 D1:C56A 75 17 41 00 	.db 117, 23, 65, 0
  487 D1:C56E -  -  -  -  
  488 D1:C56E -  -  -  -  FG_Data_15:
  489 D1:C56E AA D0 D1 -  	.dl Sprite_Table_0
  490 D1:C571 09 -  -  -  	.db 9
  491 D1:C572 4D 2D 2A 01 	.db 77, 45, 42, 1
  492 D1:C576 A3 2D 68 01 	.db 163, 45, 104, 1
  493 D1:C57A FE 2D 22 02 	.db 254, 45, 34, 2
  494 D1:C57E 7A 2D 27 03 	.db 122, 45, 39, 3
  495 D1:C582 3A 2D 5B 03 	.db 58, 45, 91, 3
  496 D1:C586 A8 17 11 04 	.db 168, 23, 17, 4
  497 D1:C58A D0 17 4A 05 	.db 208, 23, 74, 5
  498 D1:C58E 13 17 05 05 	.db 19, 23, 5, 5
  499 D1:C592 60 2F 47 09 	.db 96, 47, 71, 9
  500 D1:C596 -  -  -  -  
  501 D1:C596 -  -  -  -  FG_Data_14:
  502 D1:C596 AA D0 D1 -  	.dl Sprite_Table_0
  503 D1:C599 08 -  -  -  	.db 8
  504 D1:C59A 78 2D 24 01 	.db 120, 45, 36, 1
  505 D1:C59E 6B 2D 5F 02 	.db 107, 45, 95, 2
  506 D1:C5A2 BB 2D 49 03 	.db 187, 45, 73, 3
  507 D1:C5A6 EB 2D 0E 06 	.db 235, 45, 14, 6
  508 D1:C5AA 0C 2D 04 06 	.db 12, 45, 4, 6
  509 D1:C5AE 0F 17 48 07 	.db 15, 23, 72, 7
  510 D1:C5B2 AF 17 74 04 	.db 175, 23, 116, 4
  511 D1:C5B6 49 17 3D 00 	.db 73, 23, 61, 0
  512 D1:C5BA -  -  -  -  
  513 D1:C5BA -  -  -  -  FG_Data_13:
  514 D1:C5BA AA D0 D1 -  	.dl Sprite_Table_0
  515 D1:C5BD 08 -  -  -  	.db 8
  516 D1:C5BE 5E 2D 4D 01 	.db 94, 45, 77, 1
  517 D1:C5C2 4A 2D 23 02 	.db 74, 45, 35, 2
  518 D1:C5C6 B3 2D 73 02 	.db 179, 45, 115, 2
  519 D1:C5CA C5 2D 37 03 	.db 197, 45, 55, 3
  520 D1:C5CE 0F 17 79 04 	.db 15, 23, 121, 4
  521 D1:C5D2 DC 17 6C 00 	.db 220, 23, 108, 0
  522 D1:C5D6 7B 17 18 05 	.db 123, 23, 24, 5
  523 D1:C5DA 82 2F 2D 09 	.db 130, 47, 45, 9
  524 D1:C5DE -  -  -  -  
  525 D1:C5DE -  -  -  -  FG_Data_12:
  526 D1:C5DE AA D0 D1 -  	.dl Sprite_Table_0
  527 D1:C5E1 10 -  -  -  	.db 16
  528 D1:C5E2 F6 2D 1D 02 	.db 246, 45, 29, 2
  529 D1:C5E6 F0 2D 28 01 	.db 240, 45, 40, 1
  530 D1:C5EA CE 2D 38 02 	.db 206, 45, 56, 2
  531 D1:C5EE B8 2D 3C 01 	.db 184, 45, 60, 1
  532 D1:C5F2 CB 2D 46 01 	.db 203, 45, 70, 1
  533 D1:C5F6 A0 2D 4B 01 	.db 160, 45, 75, 1
  534 D1:C5FA A0 2D 4B 01 	.db 160, 45, 75, 1
  535 D1:C5FE BC 2D 62 01 	.db 188, 45, 98, 1
  536 D1:C602 95 2D 50 01 	.db 149, 45, 80, 1
  537 D1:C606 96 2D 21 02 	.db 150, 45, 33, 2
  538 D1:C60A 65 2D 12 02 	.db 101, 45, 18, 2
  539 D1:C60E E6 2D 0C 06 	.db 230, 45, 12, 6
  540 D1:C612 29 17 34 07 	.db 41, 23, 52, 7
  541 D1:C616 EE 17 41 00 	.db 238, 23, 65, 0
  542 D1:C61A 36 17 64 00 	.db 54, 23, 100, 0
  543 D1:C61E 06 2F 46 08 	.db 6, 47, 70, 8
  544 D1:C622 -  -  -  -  
  545 D1:C622 -  -  -  -  FG_Data_11:
  546 D1:C622 AA D0 D1 -  	.dl Sprite_Table_0
  547 D1:C625 08 -  -  -  	.db 8
  548 D1:C626 AD 2D 3C 02 	.db 173, 45, 60, 2
  549 D1:C62A DE 2D 5D 02 	.db 222, 45, 93, 2
  550 D1:C62E 80 2D 80 02 	.db 128, 45, 128, 2
  551 D1:C632 E8 2D 10 06 	.db 232, 45, 16, 6
  552 D1:C636 0C 2D 51 06 	.db 12, 45, 81, 6
  553 D1:C63A 6E 17 16 07 	.db 110, 23, 22, 7
  554 D1:C63E 79 17 67 00 	.db 121, 23, 103, 0
  555 D1:C642 1A 17 3E 00 	.db 26, 23, 62, 0
  556 D1:C646 -  -  -  -  
  557 D1:C646 -  -  -  -  FG_Data_10:
  558 D1:C646 AA D0 D1 -  	.dl Sprite_Table_0
  559 D1:C649 09 -  -  -  	.db 9
  560 D1:C64A 79 2D 3B 01 	.db 121, 45, 59, 1
  561 D1:C64E 8E 2D 6F 01 	.db 142, 45, 111, 1
  562 D1:C652 EF 2D 27 02 	.db 239, 45, 39, 2
  563 D1:C656 22 2D 0D 03 	.db 34, 45, 13, 3
  564 D1:C65A 0E 2D 65 06 	.db 14, 45, 101, 6
  565 D1:C65E 96 17 5A 07 	.db 150, 23, 90, 7
  566 D1:C662 98 17 1B 00 	.db 152, 23, 27, 0
  567 D1:C666 29 17 30 05 	.db 41, 23, 48, 5
  568 D1:C66A 71 2F 14 08 	.db 113, 47, 20, 8
  569 D1:C66E -  -  -  -  
  570 D1:C66E -  -  -  -  FG_Data_9:
  571 D1:C66E AA D0 D1 -  	.dl Sprite_Table_0
  572 D1:C671 09 -  -  -  	.db 9
  573 D1:C672 18 2D 56 01 	.db 24, 45, 86, 1
  574 D1:C676 26 2D 22 03 	.db 38, 45, 34, 3
  575 D1:C67A 1E 17 7C 00 	.db 30, 23, 124, 0
  576 D1:C67E 8D 2D 7B 01 	.db 141, 45, 123, 1
  577 D1:C682 74 2D 1C 01 	.db 116, 45, 28, 1
  578 D1:C686 E5 2D 4B 01 	.db 229, 45, 75, 1
  579 D1:C68A 67 2D 4F 06 	.db 103, 45, 79, 6
  580 D1:C68E A2 17 1B 07 	.db 162, 23, 27, 7
  581 D1:C692 AF 17 3F 05 	.db 175, 23, 63, 5
  582 D1:C696 -  -  -  -  
  583 D1:C696 -  -  -  -  FG_Data_8:
  584 D1:C696 AA D0 D1 -  	.dl Sprite_Table_0
  585 D1:C699 09 -  -  -  	.db 9
  586 D1:C69A 41 2D 1B 01 	.db 65, 45, 27, 1
  587 D1:C69E B7 2D 7C 01 	.db 183, 45, 124, 1
  588 D1:C6A2 DD 2D 2D 01 	.db 221, 45, 45, 1
  589 D1:C6A6 36 2D 6C 06 	.db 54, 45, 108, 6
  590 D1:C6AA 98 2D 15 06 	.db 152, 45, 21, 6
  591 D1:C6AE 75 2D 54 03 	.db 117, 45, 84, 3
  592 D1:C6B2 C0 17 55 07 	.db 192, 23, 85, 7
  593 D1:C6B6 59 17 78 00 	.db 89, 23, 120, 0
  594 D1:C6BA 1A 17 46 00 	.db 26, 23, 70, 0
  595 D1:C6BE -  -  -  -  
  596 D1:C6BE -  -  -  -  FG_Data_7:
  597 D1:C6BE AA D0 D1 -  	.dl Sprite_Table_0
  598 D1:C6C1 09 -  -  -  	.db 9
  599 D1:C6C2 48 2D 6D 01 	.db 72, 45, 109, 1
  600 D1:C6C6 A3 2D 27 02 	.db 163, 45, 39, 2
  601 D1:C6CA E8 2D 4C 02 	.db 232, 45, 76, 2
  602 D1:C6CE BA 2D 70 03 	.db 186, 45, 112, 3
  603 D1:C6D2 1F 2D 2C 03 	.db 31, 45, 44, 3
  604 D1:C6D6 4D 17 16 04 	.db 77, 23, 22, 4
  605 D1:C6DA E8 17 16 07 	.db 232, 23, 22, 7
  606 D1:C6DE 75 17 4F 05 	.db 117, 23, 79, 5
  607 D1:C6E2 05 2F 4C 09 	.db 5, 47, 76, 9
  608 D1:C6E6 -  -  -  -  
  609 D1:C6E6 -  -  -  -  FG_Data_6:
  610 D1:C6E6 AA D0 D1 -  	.dl Sprite_Table_0
  611 D1:C6E9 08 -  -  -  	.db 8
  612 D1:C6EA 1D 2D 29 01 	.db 29, 45, 41, 1
  613 D1:C6EE 10 2D 64 02 	.db 16, 45, 100, 2
  614 D1:C6F2 F2 2D 2F 01 	.db 242, 45, 47, 1
  615 D1:C6F6 DF 2D 60 03 	.db 223, 45, 96, 3
  616 D1:C6FA 60 2D 4E 03 	.db 96, 45, 78, 3
  617 D1:C6FE 90 2D 13 06 	.db 144, 45, 19, 6
  618 D1:C702 54 17 79 04 	.db 84, 23, 121, 4
  619 D1:C706 B8 17 0A 05 	.db 184, 23, 10, 5
  620 D1:C70A -  -  -  -  
  621 D1:C70A -  -  -  -  FG_Data_5:
  622 D1:C70A AA D0 D1 -  	.dl Sprite_Table_0
  623 D1:C70D 09 -  -  -  	.db 9
  624 D1:C70E 03 2D 52 01 	.db 3, 45, 82, 1
  625 D1:C712 58 2D 78 02 	.db 88, 45, 120, 2
  626 D1:C716 B1 2D 09 06 	.db 177, 45, 9, 6
  627 D1:C71A 6A 2D 3C 03 	.db 106, 45, 60, 3
  628 D1:C71E B4 17 4D 07 	.db 180, 23, 77, 7
  629 D1:C722 EE 17 42 00 	.db 238, 23, 66, 0
  630 D1:C726 81 17 71 00 	.db 129, 23, 113, 0
  631 D1:C72A 20 17 1D 05 	.db 32, 23, 29, 5
  632 D1:C72E 27 2F 32 09 	.db 39, 47, 50, 9
  633 D1:C732 -  -  -  -  
  634 D1:C732 -  -  -  -  FG_Data_4:
  635 D1:C732 AA D0 D1 -  	.dl Sprite_Table_0
  636 D1:C735 0F -  -  -  	.db 15
  637 D1:C736 9B 2D 22 02 	.db 155, 45, 34, 2
  638 D1:C73A 95 2D 2D 01 	.db 149, 45, 45, 1
  639 D1:C73E 73 2D 3D 02 	.db 115, 45, 61, 2
  640 D1:C742 5D 2D 41 01 	.db 93, 45, 65, 1
  641 D1:C746 70 2D 4B 01 	.db 112, 45, 75, 1
  642 D1:C74A 45 2D 50 01 	.db 69, 45, 80, 1
  643 D1:C74E 45 2D 50 01 	.db 69, 45, 80, 1
  644 D1:C752 61 2D 67 01 	.db 97, 45, 103, 1
  645 D1:C756 EF 2D 28 02 	.db 239, 45, 40, 2
  646 D1:C75A 3A 2D 55 01 	.db 58, 45, 85, 1
  647 D1:C75E 3B 2D 26 02 	.db 59, 45, 38, 2
  648 D1:C762 0A 2D 17 02 	.db 10, 45, 23, 2
  649 D1:C766 8B 2D 11 06 	.db 139, 45, 17, 6
  650 D1:C76A B4 17 7E 04 	.db 180, 23, 126, 4
  651 D1:C76E 93 17 46 00 	.db 147, 23, 70, 0
  652 D1:C772 -  -  -  -  
  653 D1:C772 -  -  -  -  FG_Data_3:
  654 D1:C772 AA D0 D1 -  	.dl Sprite_Table_0
  655 D1:C775 09 -  -  -  	.db 9
  656 D1:C776 52 2D 41 02 	.db 82, 45, 65, 2
  657 D1:C77A 83 2D 62 02 	.db 131, 45, 98, 2
  658 D1:C77E 25 2D 85 02 	.db 37, 45, 133, 2
  659 D1:C782 8D 2D 15 06 	.db 141, 45, 21, 6
  660 D1:C786 13 17 1B 07 	.db 19, 23, 27, 7
  661 D1:C78A CE 17 39 07 	.db 206, 23, 57, 7
  662 D1:C78E DB 17 69 00 	.db 219, 23, 105, 0
  663 D1:C792 1E 17 6C 00 	.db 30, 23, 108, 0
  664 D1:C796 AB 2F 4B 08 	.db 171, 47, 75, 8
  665 D1:C79A -  -  -  -  
  666 D1:C79A -  -  -  -  FG_Data_2:
  667 D1:C79A AA D0 D1 -  	.dl Sprite_Table_0
  668 D1:C79D 08 -  -  -  	.db 8
  669 D1:C79E 1E 2D 40 01 	.db 30, 45, 64, 1
  670 D1:C7A2 33 2D 74 01 	.db 51, 45, 116, 1
  671 D1:C7A6 94 2D 2C 02 	.db 148, 45, 44, 2
  672 D1:C7AA B1 2D 56 06 	.db 177, 45, 86, 6
  673 D1:C7AE 3B 17 5F 07 	.db 59, 23, 95, 7
  674 D1:C7B2 BF 17 43 00 	.db 191, 23, 67, 0
  675 D1:C7B6 3D 17 20 00 	.db 61, 23, 32, 0
  676 D1:C7BA 16 2F 19 08 	.db 22, 47, 25, 8
  677 D1:C7BE -  -  -  -  
  678 D1:C7BE -  -  -  -  FG_Data_1:
  679 D1:C7BE AA D0 D1 -  	.dl Sprite_Table_0
  680 D1:C7C1 08 -  -  -  	.db 8
  681 D1:C7C2 15 2D 68 02 	.db 21, 45, 104, 2
  682 D1:C7C6 8A 2D 50 01 	.db 138, 45, 80, 1
  683 D1:C7CA C7 2D 12 03 	.db 199, 45, 18, 3
  684 D1:C7CE B3 2D 6A 06 	.db 179, 45, 106, 6
  685 D1:C7D2 0C 2D 54 06 	.db 12, 45, 84, 6
  686 D1:C7D6 47 17 20 07 	.db 71, 23, 32, 7
  687 D1:C7DA CE 17 35 05 	.db 206, 23, 53, 5
  688 D1:C7DE 54 17 44 05 	.db 84, 23, 68, 5
  689 D1:C7E2 -  -  -  -  
  690 D1:C7E2 -  -  -  -  FG_Data_0:
  691 D1:C7E2 AA D0 D1 -  	.dl Sprite_Table_0
  692 D1:C7E5 09 -  -  -  	.db 9
  693 D1:C7E6 36 17 66 00 	.db 54, 23, 102, 0
  694 D1:C7EA 87 2D 2B 01 	.db 135, 45, 43, 1
  695 D1:C7EE FC 2D 09 02 	.db 252, 45, 9, 2
  696 D1:C7F2 B2 2D 84 02 	.db 178, 45, 132, 2
  697 D1:C7F6 81 2D 0E 03 	.db 129, 45, 14, 3
  698 D1:C7FA 2E 17 07 04 	.db 46, 23, 7, 4
  699 D1:C7FE BD 17 61 04 	.db 189, 23, 97, 4
  700 D1:C802 C8 17 1A 05 	.db 200, 23, 26, 5
  701 D1:C806 36 17 47 00 	.db 54, 23, 71, 0
  702 D1:C80A -  -  -  -  
  703 D1:C80A -  -  -  -  
  704 D1:C80A -  -  -  -  
Listing for file "ascent.asm"
  279 D1:C80A -  -  -  -  #include "MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\MG_Data.txt"
    1 D1:C80A -  -  -  -  MG_Data_frame_table:
    2 D1:C80A B6 CC D1 -  	.dl MG_Data_0
    3 D1:C80D 82 CC D1 -  	.dl MG_Data_1
    4 D1:C810 5A CC D1 -  	.dl MG_Data_2
    5 D1:C813 2A CC D1 -  	.dl MG_Data_3
    6 D1:C816 EE CB D1 -  	.dl MG_Data_4
    7 D1:C819 BE CB D1 -  	.dl MG_Data_5
    8 D1:C81C 8E CB D1 -  	.dl MG_Data_6
    9 D1:C81F 62 CB D1 -  	.dl MG_Data_7
   10 D1:C822 2A CB D1 -  	.dl MG_Data_8
   11 D1:C825 06 CB D1 -  	.dl MG_Data_9
   12 D1:C828 DA CA D1 -  	.dl MG_Data_10
   13 D1:C82B A2 CA D1 -  	.dl MG_Data_11
   14 D1:C82E 42 CA D1 -  	.dl MG_Data_12
   15 D1:C831 DE C9 D1 -  	.dl MG_Data_13
   16 D1:C834 82 C9 D1 -  	.dl MG_Data_14
   17 D1:C837 26 C9 D1 -  	.dl MG_Data_15
   18 D1:C83A CA C8 D1 -  	.dl MG_Data_16
   19 D1:C83D 9E C8 D1 -  	.dl MG_Data_17
   20 D1:C840 72 C8 D1 -  	.dl MG_Data_18
   21 D1:C843 46 C8 D1 -  	.dl MG_Data_19
   22 D1:C846 -  -  -  -  
   23 D1:C846 -  -  -  -  
   24 D1:C846 -  -  -  -  
   25 D1:C846 -  -  -  -  MG_Data_19:
   26 D1:C846 AA D0 D1 -  	.dl Sprite_Table_0
   27 D1:C849 0A -  -  -  	.db 10
   28 D1:C84A 9C 0E 5E 0A 	.db 156, 14, 94, 10
   29 D1:C84E 0C 0E 2A 0B 	.db 12, 14, 42, 11
   30 D1:C852 45 0E 82 0A 	.db 69, 14, 130, 10
   31 D1:C856 72 0E 26 0A 	.db 114, 14, 38, 10
   32 D1:C85A 0C 0E 57 0B 	.db 12, 14, 87, 11
   33 D1:C85E 43 2F 3F 08 	.db 67, 47, 63, 8
   34 D1:C862 63 2D 1A 01 	.db 99, 45, 26, 1
   35 D1:C866 63 2D 79 02 	.db 99, 45, 121, 2
   36 D1:C86A 28 17 6C 0E 	.db 40, 23, 108, 14
   37 D1:C86E 90 17 36 0E 	.db 144, 23, 54, 14
   38 D1:C872 -  -  -  -  
   39 D1:C872 -  -  -  -  MG_Data_18:
   40 D1:C872 AA D0 D1 -  	.dl Sprite_Table_0
   41 D1:C875 0A -  -  -  	.db 10
   42 D1:C876 02 0E 75 0A 	.db 2, 14, 117, 10
   43 D1:C87A 89 0E 35 0A 	.db 137, 14, 53, 10
   44 D1:C87E FE 0E 19 0B 	.db 254, 14, 25, 11
   45 D1:C882 8D 0E 6F 0A 	.db 141, 14, 111, 10
   46 D1:C886 2E 0E 3D 0B 	.db 46, 14, 61, 11
   47 D1:C88A 03 2D 1F 02 	.db 3, 45, 31, 2
   48 D1:C88E BC 2D 67 02 	.db 188, 45, 103, 2
   49 D1:C892 AE 2D 2A 02 	.db 174, 45, 42, 2
   50 D1:C896 39 2D 5D 03 	.db 57, 45, 93, 3
   51 D1:C89A 4F 17 3F 0E 	.db 79, 23, 63, 14
   52 D1:C89E -  -  -  -  
   53 D1:C89E -  -  -  -  MG_Data_17:
   54 D1:C89E AA D0 D1 -  	.dl Sprite_Table_0
   55 D1:C8A1 0A -  -  -  	.db 10
   56 D1:C8A2 9F 0E 51 0A 	.db 159, 14, 81, 10
   57 D1:C8A6 76 0E 2C 0B 	.db 118, 14, 44, 11
   58 D1:C8AA E7 0E 28 0B 	.db 231, 14, 40, 11
   59 D1:C8AE 6B 0E 64 0A 	.db 107, 14, 100, 10
   60 D1:C8B2 CD 2F 78 09 	.db 205, 47, 120, 9
   61 D1:C8B6 21 2D 74 01 	.db 33, 45, 116, 1
   62 D1:C8BA 8D 2D 30 03 	.db 141, 45, 48, 3
   63 D1:C8BE 5C 17 75 0E 	.db 92, 23, 117, 14
   64 D1:C8C2 C7 17 40 0D 	.db 199, 23, 64, 13
   65 D1:C8C6 13 17 3E 0D 	.db 19, 23, 62, 13
   66 D1:C8CA -  -  -  -  
   67 D1:C8CA -  -  -  -  MG_Data_16:
   68 D1:C8CA AA D0 D1 -  	.dl Sprite_Table_0
   69 D1:C8CD 16 -  -  -  	.db 22
   70 D1:C8CE 52 0E 1B 0A 	.db 82, 14, 27, 10
   71 D1:C8D2 7E 2D 42 03 	.db 126, 45, 66, 3
   72 D1:C8D6 5B 2D 16 02 	.db 91, 45, 22, 2
   73 D1:C8DA D1 2F 7A 08 	.db 209, 47, 122, 8
   74 D1:C8DE DF 0E 42 0A 	.db 223, 14, 66, 10
   75 D1:C8E2 58 0E 5E 0A 	.db 88, 14, 94, 10
   76 D1:C8E6 A4 0E 64 0A 	.db 164, 14, 100, 10
   77 D1:C8EA A8 0E 22 0A 	.db 168, 14, 34, 10
   78 D1:C8EE E4 17 38 0C 	.db 228, 23, 56, 12
   79 D1:C8F2 7C 17 6E 0C 	.db 124, 23, 110, 12
   80 D1:C8F6 02 2D 2C 01 	.db 2, 45, 44, 1
   81 D1:C8FA B7 2D 7B 01 	.db 183, 45, 123, 1
   82 D1:C8FE B7 2D 1D 02 	.db 183, 45, 29, 2
   83 D1:C902 10 2D 69 01 	.db 16, 45, 105, 1
   84 D1:C906 97 2F 42 09 	.db 151, 47, 66, 9
   85 D1:C90A 60 0E 59 0A 	.db 96, 14, 89, 10
   86 D1:C90E C6 0E 29 0B 	.db 198, 14, 41, 11
   87 D1:C912 99 0E 85 0B 	.db 153, 14, 133, 11
   88 D1:C916 60 0E 2C 0A 	.db 96, 14, 44, 10
   89 D1:C91A F0 0E 61 0B 	.db 240, 14, 97, 11
   90 D1:C91E D9 17 36 0E 	.db 217, 23, 54, 14
   91 D1:C922 29 17 64 0F 	.db 41, 23, 100, 15
   92 D1:C926 -  -  -  -  
   93 D1:C926 -  -  -  -  MG_Data_15:
   94 D1:C926 AA D0 D1 -  	.dl Sprite_Table_0
   95 D1:C929 16 -  -  -  	.db 22
   96 D1:C92A 56 0E 78 0B 	.db 86, 14, 120, 11
   97 D1:C92E 39 2D 15 03 	.db 57, 45, 21, 3
   98 D1:C932 C6 2D 57 01 	.db 198, 45, 87, 1
   99 D1:C936 CB 2F 27 08 	.db 203, 47, 39, 8
  100 D1:C93A A0 2F 72 08 	.db 160, 47, 114, 8
  101 D1:C93E 94 0E 8A 0B 	.db 148, 14, 138, 11
  102 D1:C942 64 0E 6F 0A 	.db 100, 14, 111, 10
  103 D1:C946 F3 0E 2E 0B 	.db 243, 14, 46, 11
  104 D1:C94A F3 0E 6A 0B 	.db 243, 14, 106, 11
  105 D1:C94E 82 0E 53 0A 	.db 130, 14, 83, 10
  106 D1:C952 55 0E 20 0A 	.db 85, 14, 32, 10
  107 D1:C956 1B 17 42 0F 	.db 27, 23, 66, 15
  108 D1:C95A A3 17 41 0C 	.db 163, 23, 65, 12
  109 D1:C95E 8D 2D 60 06 	.db 141, 45, 96, 6
  110 D1:C962 57 2D 21 01 	.db 87, 45, 33, 1
  111 D1:C966 21 2F 7A 08 	.db 33, 47, 122, 8
  112 D1:C96A 82 0E 3F 0A 	.db 130, 14, 63, 10
  113 D1:C96E 3B 0E 2A 0A 	.db 59, 14, 42, 10
  114 D1:C972 E1 0E 72 0B 	.db 225, 14, 114, 11
  115 D1:C976 DD 0E 38 0B 	.db 221, 14, 56, 11
  116 D1:C97A 5E 17 36 0E 	.db 94, 23, 54, 14
  117 D1:C97E EE 17 82 0C 	.db 238, 23, 130, 12
  118 D1:C982 -  -  -  -  
  119 D1:C982 -  -  -  -  MG_Data_14:
  120 D1:C982 AA D0 D1 -  	.dl Sprite_Table_0
  121 D1:C985 16 -  -  -  	.db 22
  122 D1:C986 F3 0E 54 0B 	.db 243, 14, 84, 11
  123 D1:C98A BB 2D 7B 06 	.db 187, 45, 123, 6
  124 D1:C98E FF 2D 3C 01 	.db 255, 45, 60, 1
  125 D1:C992 78 2D 60 01 	.db 120, 45, 96, 1
  126 D1:C996 5A 2F 2A 08 	.db 90, 47, 42, 8
  127 D1:C99A C9 0E 1B 0B 	.db 201, 14, 27, 11
  128 D1:C99E 89 0E 62 0A 	.db 137, 14, 98, 10
  129 D1:C9A2 8A 0E 1E 0A 	.db 138, 14, 30, 10
  130 D1:C9A6 BB 0E 8A 0B 	.db 187, 14, 138, 11
  131 D1:C9AA CE 0E 4C 0B 	.db 206, 14, 76, 11
  132 D1:C9AE 3B 0E 60 0A 	.db 59, 14, 96, 10
  133 D1:C9B2 67 17 40 0F 	.db 103, 23, 64, 15
  134 D1:C9B6 B0 17 77 0C 	.db 176, 23, 119, 12
  135 D1:C9BA 2D 17 38 0C 	.db 45, 23, 56, 12
  136 D1:C9BE E1 2D 33 06 	.db 225, 45, 51, 6
  137 D1:C9C2 75 2D 77 02 	.db 117, 45, 119, 2
  138 D1:C9C6 25 2F 7D 09 	.db 37, 47, 125, 9
  139 D1:C9CA 33 0E 45 0B 	.db 51, 14, 69, 11
  140 D1:C9CE BF 0E 67 0B 	.db 191, 14, 103, 11
  141 D1:C9D2 CA 0E 2E 0A 	.db 202, 14, 46, 10
  142 D1:C9D6 97 17 23 0C 	.db 151, 23, 35, 12
  143 D1:C9DA F2 17 65 0E 	.db 242, 23, 101, 14
  144 D1:C9DE -  -  -  -  
  145 D1:C9DE -  -  -  -  MG_Data_13:
  146 D1:C9DE AA D0 D1 -  	.dl Sprite_Table_0
  147 D1:C9E1 18 -  -  -  	.db 24
  148 D1:C9E2 47 0E 6C 0A 	.db 71, 14, 108, 10
  149 D1:C9E6 01 17 5A 0E 	.db 1, 23, 90, 14
  150 D1:C9EA 1C 2D 1A 06 	.db 28, 45, 26, 6
  151 D1:C9EE D5 2D 4B 03 	.db 213, 45, 75, 3
  152 D1:C9F2 E3 2D 1F 02 	.db 227, 45, 31, 2
  153 D1:C9F6 01 2D 7B 01 	.db 1, 45, 123, 1
  154 D1:C9FA 7E 0E 4D 0A 	.db 126, 14, 77, 10
  155 D1:C9FE 7E 0E 2F 0A 	.db 126, 14, 47, 10
  156 D1:CA02 6B 0E 73 0A 	.db 107, 14, 115, 10
  157 D1:CA06 C9 0E 6F 0A 	.db 201, 14, 111, 10
  158 D1:CA0A D5 0E 48 0B 	.db 213, 14, 72, 11
  159 D1:CA0E D2 0E 2C 0B 	.db 210, 14, 44, 11
  160 D1:CA12 7D 17 67 0D 	.db 125, 23, 103, 13
  161 D1:CA16 42 17 85 0E 	.db 66, 23, 133, 14
  162 D1:CA1A D2 2D 45 06 	.db 210, 45, 69, 6
  163 D1:CA1E AF 2D 18 01 	.db 175, 45, 24, 1
  164 D1:CA22 1A 2D 5A 02 	.db 26, 45, 90, 2
  165 D1:CA26 1F 2F 2A 09 	.db 31, 47, 42, 9
  166 D1:CA2A AC 0E 61 0B 	.db 172, 14, 97, 11
  167 D1:CA2E 47 0E 30 0A 	.db 71, 14, 48, 10
  168 D1:CA32 F8 0E 67 0B 	.db 248, 14, 103, 11
  169 D1:CA36 FC 0E 25 0B 	.db 252, 14, 37, 11
  170 D1:CA3A B6 17 79 0C 	.db 182, 23, 121, 12
  171 D1:CA3E FE 17 29 0F 	.db 254, 23, 41, 15
  172 D1:CA42 -  -  -  -  
  173 D1:CA42 -  -  -  -  MG_Data_12:
  174 D1:CA42 AA D0 D1 -  	.dl Sprite_Table_0
  175 D1:CA45 17 -  -  -  	.db 23
  176 D1:CA46 22 0E 4E 0A 	.db 34, 14, 78, 10
  177 D1:CA4A 63 2D 5D 03 	.db 99, 45, 93, 3
  178 D1:CA4E D3 2F 22 08 	.db 211, 47, 34, 8
  179 D1:CA52 AF 0E 55 0B 	.db 175, 14, 85, 11
  180 D1:CA56 94 0E 84 0B 	.db 148, 14, 132, 11
  181 D1:CA5A 76 0E 2D 0A 	.db 118, 14, 45, 10
  182 D1:CA5E EB 0E 73 0A 	.db 235, 14, 115, 10
  183 D1:CA62 F4 0E 3B 0B 	.db 244, 14, 59, 11
  184 D1:CA66 74 0E 59 0B 	.db 116, 14, 89, 11
  185 D1:CA6A B2 17 38 0C 	.db 178, 23, 56, 12
  186 D1:CA6E 3B 17 3F 0E 	.db 59, 23, 63, 14
  187 D1:CA72 46 17 67 0C 	.db 70, 23, 103, 12
  188 D1:CA76 0F 2D 7D 03 	.db 15, 45, 125, 3
  189 D1:CA7A 53 2D 3F 02 	.db 83, 45, 63, 2
  190 D1:CA7E F4 2F 75 09 	.db 244, 47, 117, 9
  191 D1:CA82 E8 0E 8C 0A 	.db 232, 14, 140, 10
  192 D1:CA86 1D 0E 1D 0A 	.db 29, 14, 29, 10
  193 D1:CA8A 0F 0E 8C 0A 	.db 15, 14, 140, 10
  194 D1:CA8E B8 0E 72 0B 	.db 184, 14, 114, 11
  195 D1:CA92 D6 0E 56 0B 	.db 214, 14, 86, 11
  196 D1:CA96 A9 0E 23 0B 	.db 169, 14, 35, 11
  197 D1:CA9A 8D 2D 18 06 	.db 141, 45, 24, 6
  198 D1:CA9E 3B 17 17 0F 	.db 59, 23, 23, 15
  199 D1:CAA2 -  -  -  -  
  200 D1:CAA2 -  -  -  -  MG_Data_11:
  201 D1:CAA2 AA D0 D1 -  	.dl Sprite_Table_0
  202 D1:CAA5 0D -  -  -  	.db 13
  203 D1:CAA6 26 0E 2E 0A 	.db 38, 14, 46, 10
  204 D1:CAAA 8F 0E 63 0B 	.db 143, 14, 99, 11
  205 D1:CAAE DE 0E 21 0B 	.db 222, 14, 33, 11
  206 D1:CAB2 29 0E 4A 0A 	.db 41, 14, 74, 10
  207 D1:CAB6 1D 0E 72 0B 	.db 29, 14, 114, 11
  208 D1:CABA DD 0E 65 0B 	.db 221, 14, 101, 11
  209 D1:CABE AE 2F 2D 09 	.db 174, 47, 45, 9
  210 D1:CAC2 37 2D 21 01 	.db 55, 45, 33, 1
  211 D1:CAC6 CC 2D 63 02 	.db 204, 45, 99, 2
  212 D1:CACA 29 2D 4E 06 	.db 41, 45, 78, 6
  213 D1:CACE 0A 17 7C 0E 	.db 10, 23, 124, 14
  214 D1:CAD2 EB 17 26 0E 	.db 235, 23, 38, 14
  215 D1:CAD6 52 17 2C 0D 	.db 82, 23, 44, 13
  216 D1:CADA -  -  -  -  
  217 D1:CADA -  -  -  -  MG_Data_10:
  218 D1:CADA AA D0 D1 -  	.dl Sprite_Table_0
  219 D1:CADD 0A -  -  -  	.db 10
  220 D1:CADE 48 0E 3D 0A 	.db 72, 14, 61, 10
  221 D1:CAE2 BF 0E 76 0B 	.db 191, 14, 118, 11
  222 D1:CAE6 D2 0E 32 0B 	.db 210, 14, 50, 11
  223 D1:CAEA 3F 0E 76 0B 	.db 63, 14, 118, 11
  224 D1:CAEE 03 0E 57 0A 	.db 3, 14, 87, 10
  225 D1:CAF2 D2 0E 50 0B 	.db 210, 14, 80, 11
  226 D1:CAF6 27 2F 25 09 	.db 39, 47, 37, 9
  227 D1:CAFA 55 2D 7E 02 	.db 85, 45, 126, 2
  228 D1:CAFE 70 2D 1C 03 	.db 112, 45, 28, 3
  229 D1:CB02 55 17 5C 0C 	.db 85, 23, 92, 12
  230 D1:CB06 -  -  -  -  
  231 D1:CB06 -  -  -  -  MG_Data_9:
  232 D1:CB06 AA D0 D1 -  	.dl Sprite_Table_0
  233 D1:CB09 08 -  -  -  	.db 8
  234 D1:CB0A 24 0E 59 0B 	.db 36, 14, 89, 11
  235 D1:CB0E 18 17 30 0C 	.db 24, 23, 48, 12
  236 D1:CB12 C8 0E 5B 0A 	.db 200, 14, 91, 10
  237 D1:CB16 CA 0E 30 0B 	.db 202, 14, 48, 11
  238 D1:CB1A E8 0E 86 0A 	.db 232, 14, 134, 10
  239 D1:CB1E B7 2D 60 06 	.db 183, 45, 96, 6
  240 D1:CB22 8F 17 41 0C 	.db 143, 23, 65, 12
  241 D1:CB26 8F 17 1A 0D 	.db 143, 23, 26, 13
  242 D1:CB2A -  -  -  -  
  243 D1:CB2A -  -  -  -  MG_Data_8:
  244 D1:CB2A AA D0 D1 -  	.dl Sprite_Table_0
  245 D1:CB2D 0D -  -  -  	.db 13
  246 D1:CB2E 11 0E 30 0B 	.db 17, 14, 48, 11
  247 D1:CB32 86 0E 13 0A 	.db 134, 14, 19, 10
  248 D1:CB36 15 0E 6A 0B 	.db 21, 14, 106, 11
  249 D1:CB3A 94 0E 24 0A 	.db 148, 14, 36, 10
  250 D1:CB3E CD 0E 7D 0B 	.db 205, 14, 125, 11
  251 D1:CB42 FA 0E 21 0B 	.db 250, 14, 33, 11
  252 D1:CB46 94 0E 51 0A 	.db 148, 14, 81, 10
  253 D1:CB4A CB 2F 3A 09 	.db 203, 47, 58, 9
  254 D1:CB4E 44 2D 61 01 	.db 68, 45, 97, 1
  255 D1:CB52 EB 2D 15 02 	.db 235, 45, 21, 2
  256 D1:CB56 EB 2D 73 01 	.db 235, 45, 115, 1
  257 D1:CB5A 36 2D 24 01 	.db 54, 45, 36, 1
  258 D1:CB5E B0 17 66 0C 	.db 176, 23, 102, 12
  259 D1:CB62 -  -  -  -  
  260 D1:CB62 -  -  -  -  MG_Data_7:
  261 D1:CB62 AA D0 D1 -  	.dl Sprite_Table_0
  262 D1:CB65 0A -  -  -  	.db 10
  263 D1:CB66 27 0E 4C 0B 	.db 39, 14, 76, 11
  264 D1:CB6A 8A 0E 70 0B 	.db 138, 14, 112, 11
  265 D1:CB6E 6F 0E 22 0A 	.db 111, 14, 34, 10
  266 D1:CB72 B6 0E 37 0A 	.db 182, 14, 55, 10
  267 D1:CB76 55 2F 72 08 	.db 85, 47, 114, 8
  268 D1:CB7A 8B 2D 19 01 	.db 139, 45, 25, 1
  269 D1:CB7E C1 2D 58 06 	.db 193, 45, 88, 6
  270 D1:CB82 15 2D 2B 06 	.db 21, 45, 43, 6
  271 D1:CB86 D7 17 39 0C 	.db 215, 23, 57, 12
  272 D1:CB8A 4F 17 3A 0F 	.db 79, 23, 58, 15
  273 D1:CB8E -  -  -  -  
  274 D1:CB8E -  -  -  -  MG_Data_6:
  275 D1:CB8E AA D0 D1 -  	.dl Sprite_Table_0
  276 D1:CB91 0B -  -  -  	.db 11
  277 D1:CB92 30 0E 1D 0B 	.db 48, 14, 29, 11
  278 D1:CB96 FE 0E 26 0A 	.db 254, 14, 38, 10
  279 D1:CB9A F3 0E 5F 0B 	.db 243, 14, 95, 11
  280 D1:CB9E 2C 0E 5F 0B 	.db 44, 14, 95, 11
  281 D1:CBA2 67 0E 3D 0B 	.db 103, 14, 61, 11
  282 D1:CBA6 59 2F 75 09 	.db 89, 47, 117, 9
  283 D1:CBAA A9 2D 6F 02 	.db 169, 45, 111, 2
  284 D1:CBAE 06 2D 3D 06 	.db 6, 45, 61, 6
  285 D1:CBB2 61 17 30 0C 	.db 97, 23, 48, 12
  286 D1:CBB6 E4 17 6F 0C 	.db 228, 23, 111, 12
  287 D1:CBBA 9B 17 38 0F 	.db 155, 23, 56, 15
  288 D1:CBBE -  -  -  -  
  289 D1:CBBE -  -  -  -  MG_Data_5:
  290 D1:CBBE AA D0 D1 -  	.dl Sprite_Table_0
  291 D1:CBC1 0B -  -  -  	.db 11
  292 D1:CBC2 0A 0E 4E 0B 	.db 10, 14, 78, 11
  293 D1:CBC6 7B 0E 64 0A 	.db 123, 14, 100, 10
  294 D1:CBCA 7B 0E 28 0A 	.db 123, 14, 40, 10
  295 D1:CBCE 1C 0E 84 0A 	.db 28, 14, 132, 10
  296 D1:CBD2 E0 0E 59 0B 	.db 224, 14, 89, 11
  297 D1:CBD6 28 2F 6D 09 	.db 40, 47, 109, 9
  298 D1:CBDA 53 2F 22 09 	.db 83, 47, 34, 9
  299 D1:CBDE 4E 2D 52 02 	.db 78, 45, 82, 2
  300 D1:CBE2 E3 2D 10 01 	.db 227, 45, 16, 1
  301 D1:CBE6 76 17 7D 0E 	.db 118, 23, 125, 14
  302 D1:CBEA B1 17 5F 0D 	.db 177, 23, 95, 13
  303 D1:CBEE -  -  -  -  
  304 D1:CBEE -  -  -  -  MG_Data_4:
  305 D1:CBEE AA D0 D1 -  	.dl Sprite_Table_0
  306 D1:CBF1 0E -  -  -  	.db 14
  307 D1:CBF2 56 0E 46 0A 	.db 86, 14, 70, 10
  308 D1:CBF6 DD 0E 1B 0B 	.db 221, 14, 27, 11
  309 D1:CBFA EC 0E 6A 0B 	.db 236, 14, 106, 11
  310 D1:CBFE 43 0E 84 0A 	.db 67, 14, 132, 10
  311 D1:CC02 12 0E 19 0B 	.db 18, 14, 25, 11
  312 D1:CC06 11 0E 5D 0B 	.db 17, 14, 93, 11
  313 D1:CC0A 51 0E 15 0A 	.db 81, 14, 21, 10
  314 D1:CC0E 00 2D 5B 02 	.db 0, 45, 91, 2
  315 D1:CC12 87 2D 37 02 	.db 135, 45, 55, 2
  316 D1:CC16 43 2D 75 03 	.db 67, 45, 117, 3
  317 D1:CC1A C1 2D 10 06 	.db 193, 45, 16, 6
  318 D1:CC1E 1F 17 1E 0E 	.db 31, 23, 30, 14
  319 D1:CC22 7A 17 5F 0C 	.db 122, 23, 95, 12
  320 D1:CC26 E6 17 30 0C 	.db 230, 23, 48, 12
  321 D1:CC2A -  -  -  -  
  322 D1:CC2A -  -  -  -  MG_Data_3:
  323 D1:CC2A AA D0 D1 -  	.dl Sprite_Table_0
  324 D1:CC2D 0B -  -  -  	.db 11
  325 D1:CC2E 5A 0E 26 0A 	.db 90, 14, 38, 10
  326 D1:CC32 C3 0E 5B 0B 	.db 195, 14, 91, 11
  327 D1:CC36 5D 0E 42 0A 	.db 93, 14, 66, 10
  328 D1:CC3A 51 0E 6A 0B 	.db 81, 14, 106, 11
  329 D1:CC3E 06 0E 2A 0B 	.db 6, 14, 42, 11
  330 D1:CC42 06 0E 48 0B 	.db 6, 14, 72, 11
  331 D1:CC46 E2 2F 25 09 	.db 226, 47, 37, 9
  332 D1:CC4A 6B 2D 19 01 	.db 107, 45, 25, 1
  333 D1:CC4E 5D 2D 46 06 	.db 93, 45, 70, 6
  334 D1:CC52 3E 17 74 0E 	.db 62, 23, 116, 14
  335 D1:CC56 86 17 24 0D 	.db 134, 23, 36, 13
  336 D1:CC5A -  -  -  -  
  337 D1:CC5A -  -  -  -  MG_Data_2:
  338 D1:CC5A AA D0 D1 -  	.dl Sprite_Table_0
  339 D1:CC5D 09 -  -  -  	.db 9
  340 D1:CC5E 7C 0E 35 0A 	.db 124, 14, 53, 10
  341 D1:CC62 F3 0E 6E 0B 	.db 243, 14, 110, 11
  342 D1:CC66 73 0E 6E 0B 	.db 115, 14, 110, 11
  343 D1:CC6A 1C 0E 7E 0A 	.db 28, 14, 126, 10
  344 D1:CC6E 37 0E 4F 0A 	.db 55, 14, 79, 10
  345 D1:CC72 5B 2F 1D 09 	.db 91, 47, 29, 9
  346 D1:CC76 89 2D 76 02 	.db 137, 45, 118, 2
  347 D1:CC7A A4 2D 14 03 	.db 164, 45, 20, 3
  348 D1:CC7E 89 17 54 0C 	.db 137, 23, 84, 12
  349 D1:CC82 -  -  -  -  
  350 D1:CC82 -  -  -  -  MG_Data_1:
  351 D1:CC82 AA D0 D1 -  	.dl Sprite_Table_0
  352 D1:CC85 0C -  -  -  	.db 12
  353 D1:CC86 4F 0E 31 0A 	.db 79, 14, 49, 10
  354 D1:CC8A FC 0E 53 0A 	.db 252, 14, 83, 10
  355 D1:CC8E FE 0E 28 0B 	.db 254, 14, 40, 11
  356 D1:CC92 77 0E 6A 0B 	.db 119, 14, 106, 11
  357 D1:CC96 95 0E 20 0A 	.db 149, 14, 32, 10
  358 D1:CC9A 3F 2F 52 08 	.db 63, 47, 82, 8
  359 D1:CC9E 7F 2D 3B 01 	.db 127, 45, 59, 1
  360 D1:CCA2 EB 2D 58 06 	.db 235, 45, 88, 6
  361 D1:CCA6 91 17 75 0D 	.db 145, 23, 117, 13
  362 D1:CCAA 37 17 81 0C 	.db 55, 23, 129, 12
  363 D1:CCAE C3 17 39 0C 	.db 195, 23, 57, 12
  364 D1:CCB2 C3 17 12 0D 	.db 195, 23, 18, 13
  365 D1:CCB6 -  -  -  -  
  366 D1:CCB6 -  -  -  -  MG_Data_0:
  367 D1:CCB6 AA D0 D1 -  	.dl Sprite_Table_0
  368 D1:CCB9 0A -  -  -  	.db 10
  369 D1:CCBA 5E 0E 15 0A 	.db 94, 14, 21, 10
  370 D1:CCBE 80 0E 40 0A 	.db 128, 14, 64, 10
  371 D1:CCC2 AF 0E 64 0A 	.db 175, 14, 100, 10
  372 D1:CCC6 46 0E 75 0A 	.db 70, 14, 117, 10
  373 D1:CCCA 37 0E 48 0B 	.db 55, 14, 72, 11
  374 D1:CCCE 95 0E 24 0A 	.db 149, 14, 36, 10
  375 D1:CCD2 9E 2D 6E 03 	.db 158, 45, 110, 3
  376 D1:CCD6 F8 2D 13 02 	.db 248, 45, 19, 2
  377 D1:CCDA 3A 17 22 0C 	.db 58, 23, 34, 12
  378 D1:CCDE D8 17 3F 0D 	.db 216, 23, 63, 13
  379 D1:CCE2 -  -  -  -  
  380 D1:CCE2 -  -  -  -  
  381 D1:CCE2 -  -  -  -  
Listing for file "ascent.asm"
  280 D1:CCE2 -  -  -  -  #include "BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BG_Data.txt"
    1 D1:CCE2 -  -  -  -  BG_Data_frame_table:
    2 D1:CCE2 ED CF D1 -  	.dl BG_Data_0
    3 D1:CCE5 B5 CF D1 -  	.dl BG_Data_1
    4 D1:CCE8 6D CF D1 -  	.dl BG_Data_2
    5 D1:CCEB 1D CF D1 -  	.dl BG_Data_3
    6 D1:CCEE CD CE D1 -  	.dl BG_Data_4
    7 D1:CCF1 7D CE D1 -  	.dl BG_Data_5
    8 D1:CCF4 2D CE D1 -  	.dl BG_Data_6
    9 D1:CCF7 DD CD D1 -  	.dl BG_Data_7
   10 D1:CCFA 85 CD D1 -  	.dl BG_Data_8
   11 D1:CCFD 2D CD D1 -  	.dl BG_Data_9
   12 D1:CD00 21 CD D1 -  	.dl BG_Data_10
   13 D1:CD03 19 CD D1 -  	.dl BG_Data_11
   14 D1:CD06 09 CD D1 -  	.dl BG_Data_12
   15 D1:CD09 -  -  -  -  
   16 D1:CD09 -  -  -  -  
   17 D1:CD09 -  -  -  -  
   18 D1:CD09 -  -  -  -  BG_Data_12:
   19 D1:CD09 DA D0 D1 -  	.dl Sprite_Table_1
   20 D1:CD0C 03 -  -  -  	.db 3
   21 D1:CD0D D0 2D 2F 09 	.db 208, 45, 47, 9
   22 D1:CD11 5E 2D 2F 09 	.db 94, 45, 47, 9
   23 D1:CD15 D0 2D 2F 09 	.db 208, 45, 47, 9
   24 D1:CD19 -  -  -  -  
   25 D1:CD19 -  -  -  -  BG_Data_11:
   26 D1:CD19 DA D0 D1 -  	.dl Sprite_Table_1
   27 D1:CD1C 01 -  -  -  	.db 1
   28 D1:CD1D D3 2D 2F 09 	.db 211, 45, 47, 9
   29 D1:CD21 -  -  -  -  
   30 D1:CD21 -  -  -  -  BG_Data_10:
   31 D1:CD21 DA D0 D1 -  	.dl Sprite_Table_1
   32 D1:CD24 02 -  -  -  	.db 2
   33 D1:CD25 6B 2D 2F 09 	.db 107, 45, 47, 9
   34 D1:CD29 FE 2D 2F 09 	.db 254, 45, 47, 9
   35 D1:CD2D -  -  -  -  
   36 D1:CD2D -  -  -  -  BG_Data_9:
   37 D1:CD2D DA D0 D1 -  	.dl Sprite_Table_1
   38 D1:CD30 15 -  -  -  	.db 21
   39 D1:CD31 4A 2D 49 09 	.db 74, 45, 73, 9
   40 D1:CD35 A3 0E 86 0C 	.db 163, 14, 134, 12
   41 D1:CD39 C1 0E 88 0C 	.db 193, 14, 136, 12
   42 D1:CD3D C2 0E 92 0E 	.db 194, 14, 146, 14
   43 D1:CD41 D6 0E 93 0E 	.db 214, 14, 147, 14
   44 D1:CD45 D8 0E 88 0C 	.db 216, 14, 136, 12
   45 D1:CD49 ED 0E 89 0C 	.db 237, 14, 137, 12
   46 D1:CD4D F0 0E 93 0C 	.db 240, 14, 147, 12
   47 D1:CD51 8C 0E 8E 0C 	.db 140, 14, 142, 12
   48 D1:CD55 A6 0E 92 0E 	.db 166, 14, 146, 14
   49 D1:CD59 43 2D 77 09 	.db 67, 45, 119, 9
   50 D1:CD5D 48 2D 55 00 	.db 72, 45, 85, 0
   51 D1:CD61 56 2D 3C 09 	.db 86, 45, 60, 9
   52 D1:CD65 52 2D 1F 09 	.db 82, 45, 31, 9
   53 D1:CD69 54 2D 12 00 	.db 84, 45, 18, 0
   54 D1:CD6D 4A 2D 49 09 	.db 74, 45, 73, 9
   55 D1:CD71 43 2D 80 00 	.db 67, 45, 128, 0
   56 D1:CD75 23 1F 25 06 	.db 35, 31, 37, 6
   57 D1:CD79 12 1F 22 04 	.db 18, 31, 34, 4
   58 D1:CD7D 49 2D 66 00 	.db 73, 45, 102, 0
   59 D1:CD81 8C 0E 8E 0C 	.db 140, 14, 142, 12
   60 D1:CD85 -  -  -  -  
   61 D1:CD85 -  -  -  -  BG_Data_8:
   62 D1:CD85 DA D0 D1 -  	.dl Sprite_Table_1
   63 D1:CD88 15 -  -  -  	.db 21
   64 D1:CD89 34 2D 38 01 	.db 52, 45, 56, 1
   65 D1:CD8D CD 0E 8A 0E 	.db 205, 14, 138, 14
   66 D1:CD91 D1 0E 93 0C 	.db 209, 14, 147, 12
   67 D1:CD95 E4 0E 94 0C 	.db 228, 14, 148, 12
   68 D1:CD99 E2 0E 89 0C 	.db 226, 14, 137, 12
   69 D1:CD9D F9 0E 8A 0E 	.db 249, 14, 138, 14
   70 D1:CDA1 FA 0E 93 0C 	.db 250, 14, 147, 12
   71 D1:CDA5 02 1F 44 07 	.db 2, 31, 68, 7
   72 D1:CDA9 6F 1F 3A 0D 	.db 111, 31, 58, 13
   73 D1:CDAD BB 0E 8A 0E 	.db 187, 14, 138, 14
   74 D1:CDB1 D3 1F 6D 06 	.db 211, 31, 109, 6
   75 D1:CDB5 0F 1F 13 06 	.db 15, 31, 19, 6
   76 D1:CDB9 2A 1F 18 03 	.db 42, 31, 24, 3
   77 D1:CDBD 8D 1F 57 04 	.db 141, 31, 87, 4
   78 D1:CDC1 08 1F 7F 04 	.db 8, 31, 127, 4
   79 D1:CDC5 AE 2D 1F 00 	.db 174, 45, 31, 0
   80 D1:CDC9 2D 2D 5C 09 	.db 45, 45, 92, 9
   81 D1:CDCD FA 2D 6C 02 	.db 250, 45, 108, 2
   82 D1:CDD1 FA 2D 3E 02 	.db 250, 45, 62, 2
   83 D1:CDD5 19 1F 87 0D 	.db 25, 31, 135, 13
   84 D1:CDD9 B6 0E 93 0E 	.db 182, 14, 147, 14
   85 D1:CDDD -  -  -  -  
   86 D1:CDDD -  -  -  -  BG_Data_7:
   87 D1:CDDD DA D0 D1 -  	.dl Sprite_Table_1
   88 D1:CDE0 13 -  -  -  	.db 19
   89 D1:CDE1 08 2D 55 02 	.db 8, 45, 85, 2
   90 D1:CDE5 D5 0E 95 0C 	.db 213, 14, 149, 12
   91 D1:CDE9 E5 0E 95 0C 	.db 229, 14, 149, 12
   92 D1:CDED E6 0E 8C 0C 	.db 230, 14, 140, 12
   93 D1:CDF1 FA 0E 8F 0E 	.db 250, 14, 143, 14
   94 D1:CDF5 F9 0E 96 0C 	.db 249, 14, 150, 12
   95 D1:CDF9 A8 1F 14 07 	.db 168, 31, 20, 7
   96 D1:CDFD AF 1F 4D 06 	.db 175, 31, 77, 6
   97 D1:CE01 D0 0E 8A 0C 	.db 208, 14, 138, 12
   98 D1:CE05 3E 1F 2B 06 	.db 62, 31, 43, 6
   99 D1:CE09 0D 1F 88 03 	.db 13, 31, 136, 3
  100 D1:CE0D 4A 1F 38 03 	.db 74, 31, 56, 3
  101 D1:CE11 2C 1F 62 03 	.db 44, 31, 98, 3
  102 D1:CE15 37 1F 0F 04 	.db 55, 31, 15, 4
  103 D1:CE19 A8 2D 4B 09 	.db 168, 45, 75, 9
  104 D1:CE1D D5 2D 7F 02 	.db 213, 45, 127, 2
  105 D1:CE21 CA 2D 23 01 	.db 202, 45, 35, 1
  106 D1:CE25 6D 1F 73 0F 	.db 109, 31, 115, 15
  107 D1:CE29 BB 0E 91 0E 	.db 187, 14, 145, 14
  108 D1:CE2D -  -  -  -  
  109 D1:CE2D -  -  -  -  BG_Data_6:
  110 D1:CE2D DA D0 D1 -  	.dl Sprite_Table_1
  111 D1:CE30 13 -  -  -  	.db 19
  112 D1:CE31 0D 2D 22 02 	.db 13, 45, 34, 2
  113 D1:CE35 E1 0E 93 0C 	.db 225, 14, 147, 12
  114 D1:CE39 E0 0E 8B 0C 	.db 224, 14, 139, 12
  115 D1:CE3D F5 0E 8C 0E 	.db 245, 14, 140, 14
  116 D1:CE41 F8 0E 95 0C 	.db 248, 14, 149, 12
  117 D1:CE45 8D 1F 2A 05 	.db 141, 31, 42, 5
  118 D1:CE49 00 1F 77 05 	.db 0, 31, 119, 5
  119 D1:CE4D FB 1F 72 06 	.db 251, 31, 114, 6
  120 D1:CE51 CF 0E 92 0C 	.db 207, 14, 146, 12
  121 D1:CE55 94 1F 54 0D 	.db 148, 31, 84, 13
  122 D1:CE59 A2 1F 54 0A 	.db 162, 31, 84, 10
  123 D1:CE5D 40 1F 24 04 	.db 64, 31, 36, 4
  124 D1:CE61 1A 1F 79 03 	.db 26, 31, 121, 3
  125 D1:CE65 80 2D 32 00 	.db 128, 45, 50, 0
  126 D1:CE69 9E 2D 80 09 	.db 158, 45, 128, 9
  127 D1:CE6D F1 2D 18 01 	.db 241, 45, 24, 1
  128 D1:CE71 2B 2D 4F 01 	.db 43, 45, 79, 1
  129 D1:CE75 88 1F 0F 0A 	.db 136, 31, 15, 10
  130 D1:CE79 CD 0E 8A 0C 	.db 205, 14, 138, 12
  131 D1:CE7D -  -  -  -  
  132 D1:CE7D -  -  -  -  BG_Data_5:
  133 D1:CE7D DA D0 D1 -  	.dl Sprite_Table_1
  134 D1:CE80 13 -  -  -  	.db 19
  135 D1:CE81 1E 2D 46 02 	.db 30, 45, 70, 2
  136 D1:CE85 D6 0E 8B 0E 	.db 214, 14, 139, 14
  137 D1:CE89 ED 0E 8B 0C 	.db 237, 14, 139, 12
  138 D1:CE8D F1 0E 96 0C 	.db 241, 14, 150, 12
  139 D1:CE91 59 2F 42 0B 	.db 89, 47, 66, 11
  140 D1:CE95 BD 2F 40 08 	.db 189, 47, 64, 8
  141 D1:CE99 5F 1F 25 05 	.db 95, 31, 37, 5
  142 D1:CE9D 19 1F 6A 05 	.db 25, 31, 106, 5
  143 D1:CEA1 D7 0E 95 0E 	.db 215, 14, 149, 14
  144 D1:CEA5 E7 1F 32 0D 	.db 231, 31, 50, 13
  145 D1:CEA9 DE 1F 67 0A 	.db 222, 31, 103, 10
  146 D1:CEAD 90 1F 1F 04 	.db 144, 31, 31, 4
  147 D1:CEB1 5C 1F 18 03 	.db 92, 31, 24, 3
  148 D1:CEB5 9C 2D 5A 00 	.db 156, 45, 90, 0
  149 D1:CEB9 07 2D 0C 00 	.db 7, 45, 12, 0
  150 D1:CEBD 94 2D 34 09 	.db 148, 45, 52, 9
  151 D1:CEC1 47 2D 75 01 	.db 71, 45, 117, 1
  152 D1:CEC5 97 1F 64 0D 	.db 151, 31, 100, 13
  153 D1:CEC9 BC 0E 8F 0E 	.db 188, 14, 143, 14
  154 D1:CECD -  -  -  -  
  155 D1:CECD -  -  -  -  BG_Data_4:
  156 D1:CECD DA D0 D1 -  	.dl Sprite_Table_1
  157 D1:CED0 13 -  -  -  	.db 19
  158 D1:CED1 17 2D 4D 01 	.db 23, 45, 77, 1
  159 D1:CED5 FB 0E 8A 0C 	.db 251, 14, 138, 12
  160 D1:CED9 FA 0E 95 0E 	.db 250, 14, 149, 14
  161 D1:CEDD D9 2F 77 0B 	.db 217, 47, 119, 11
  162 D1:CEE1 48 1F 2C 07 	.db 72, 31, 44, 7
  163 D1:CEE5 D3 1F 2D 06 	.db 211, 31, 45, 6
  164 D1:CEE9 45 1F 5C 0D 	.db 69, 31, 92, 13
  165 D1:CEED CD 1F 54 0F 	.db 205, 31, 84, 15
  166 D1:CEF1 E3 0E 8A 0E 	.db 227, 14, 138, 14
  167 D1:CEF5 0C 1F 07 0A 	.db 12, 31, 7, 10
  168 D1:CEF9 8F 1F 74 0A 	.db 143, 31, 116, 10
  169 D1:CEFD 0E 1F 86 03 	.db 14, 31, 134, 3
  170 D1:CF01 C3 1F 3B 04 	.db 195, 31, 59, 4
  171 D1:CF05 C9 1F 7F 04 	.db 201, 31, 127, 4
  172 D1:CF09 8B 1F 4C 04 	.db 139, 31, 76, 4
  173 D1:CF0D 5D 2D 64 09 	.db 93, 45, 100, 9
  174 D1:CF11 67 2D 20 02 	.db 103, 45, 32, 2
  175 D1:CF15 A2 1F 09 0F 	.db 162, 31, 9, 15
  176 D1:CF19 E6 0E 93 0C 	.db 230, 14, 147, 12
  177 D1:CF1D -  -  -  -  
  178 D1:CF1D -  -  -  -  BG_Data_3:
  179 D1:CF1D DA D0 D1 -  	.dl Sprite_Table_1
  180 D1:CF20 13 -  -  -  	.db 19
  181 D1:CF21 37 2D 42 02 	.db 55, 45, 66, 2
  182 D1:CF25 F9 0E 95 0E 	.db 249, 14, 149, 14
  183 D1:CF29 E5 2F 37 0B 	.db 229, 47, 55, 11
  184 D1:CF2D 41 2F 43 08 	.db 65, 47, 67, 8
  185 D1:CF31 6E 1F 14 07 	.db 110, 31, 20, 7
  186 D1:CF35 17 1F 22 05 	.db 23, 31, 34, 5
  187 D1:CF39 47 1F 72 05 	.db 71, 31, 114, 5
  188 D1:CF3D DB 1F 7E 07 	.db 219, 31, 126, 7
  189 D1:CF41 F9 0E 8B 0E 	.db 249, 14, 139, 14
  190 D1:CF45 F5 1F 1D 06 	.db 245, 31, 29, 6
  191 D1:CF49 2D 1F 16 0F 	.db 45, 31, 22, 15
  192 D1:CF4D 7C 1F 7B 0F 	.db 124, 31, 123, 15
  193 D1:CF51 AF 1F 6E 04 	.db 175, 31, 110, 4
  194 D1:CF55 8C 2D 51 09 	.db 140, 45, 81, 9
  195 D1:CF59 D4 2D 1A 09 	.db 212, 45, 26, 9
  196 D1:CF5D 87 2D 29 01 	.db 135, 45, 41, 1
  197 D1:CF61 56 2D 66 01 	.db 86, 45, 102, 1
  198 D1:CF65 82 1F 59 0D 	.db 130, 31, 89, 13
  199 D1:CF69 F9 0E 7F 0E 	.db 249, 14, 127, 14
  200 D1:CF6D -  -  -  -  
  201 D1:CF6D -  -  -  -  BG_Data_2:
  202 D1:CF6D DA D0 D1 -  	.dl Sprite_Table_1
  203 D1:CF70 11 -  -  -  	.db 17
  204 D1:CF71 7D 2D 20 02 	.db 125, 45, 32, 2
  205 D1:CF75 9D 2F 7D 08 	.db 157, 47, 125, 8
  206 D1:CF79 91 2F 40 08 	.db 145, 47, 64, 8
  207 D1:CF7D 56 1F 67 05 	.db 86, 31, 103, 5
  208 D1:CF81 80 1F 1C 05 	.db 128, 31, 28, 5
  209 D1:CF85 F1 1F 6C 0D 	.db 241, 31, 108, 13
  210 D1:CF89 2D 1F 37 0D 	.db 45, 31, 55, 13
  211 D1:CF8D FB 0E 95 0C 	.db 251, 14, 149, 12
  212 D1:CF91 34 1F 19 0A 	.db 52, 31, 25, 10
  213 D1:CF95 CF 1F 3B 04 	.db 207, 31, 59, 4
  214 D1:CF99 11 1F 59 04 	.db 17, 31, 89, 4
  215 D1:CF9D 04 2D 23 00 	.db 4, 45, 35, 0
  216 D1:CFA1 E1 2D 14 09 	.db 225, 45, 20, 9
  217 D1:CFA5 AC 2D 67 00 	.db 172, 45, 103, 0
  218 D1:CFA9 72 2D 59 02 	.db 114, 45, 89, 2
  219 D1:CFAD 2C 1F 82 0A 	.db 44, 31, 130, 10
  220 D1:CFB1 FB 0E 8B 0E 	.db 251, 14, 139, 14
  221 D1:CFB5 -  -  -  -  
  222 D1:CFB5 -  -  -  -  BG_Data_1:
  223 D1:CFB5 DA D0 D1 -  	.dl Sprite_Table_1
  224 D1:CFB8 0D -  -  -  	.db 13
  225 D1:CFB9 43 2D 1F 02 	.db 67, 45, 31, 2
  226 D1:CFBD 61 2D 5C 02 	.db 97, 45, 92, 2
  227 D1:CFC1 8A 2D 33 02 	.db 138, 45, 51, 2
  228 D1:CFC5 C7 2D 46 02 	.db 199, 45, 70, 2
  229 D1:CFC9 C0 2D 73 09 	.db 192, 45, 115, 9
  230 D1:CFCD 6A 1F 79 0A 	.db 106, 31, 121, 10
  231 D1:CFD1 90 1F 0B 06 	.db 144, 31, 11, 6
  232 D1:CFD5 93 1F 4E 07 	.db 147, 31, 78, 7
  233 D1:CFD9 1F 1F 76 07 	.db 31, 31, 118, 7
  234 D1:CFDD 13 2F 34 0B 	.db 19, 47, 52, 11
  235 D1:CFE1 CD 2F 1F 0B 	.db 205, 47, 31, 11
  236 D1:CFE5 EA 2F 59 0B 	.db 234, 47, 89, 11
  237 D1:CFE9 F2 0E 94 0C 	.db 242, 14, 148, 12
  238 D1:CFED -  -  -  -  
  239 D1:CFED -  -  -  -  BG_Data_0:
  240 D1:CFED DA D0 D1 -  	.dl Sprite_Table_1
  241 D1:CFF0 0D -  -  -  	.db 13
  242 D1:CFF1 C9 2D 14 00 	.db 201, 45, 20, 0
  243 D1:CFF5 4C 2D 14 01 	.db 76, 45, 20, 1
  244 D1:CFF9 B5 2D 41 02 	.db 181, 45, 65, 2
  245 D1:CFFD 7D 2D 73 00 	.db 125, 45, 115, 0
  246 D1:D001 3E 1F 3C 03 	.db 62, 31, 60, 3
  247 D1:D005 E5 1F 5F 04 	.db 229, 31, 95, 4
  248 D1:D009 EC 1F 47 05 	.db 236, 31, 71, 5
  249 D1:D00D F6 1F 08 06 	.db 246, 31, 8, 6
  250 D1:D011 3E 1F 67 05 	.db 62, 31, 103, 5
  251 D1:D015 A8 1F 71 05 	.db 168, 31, 113, 5
  252 D1:D019 62 1F 31 07 	.db 98, 31, 49, 7
  253 D1:D01D EC 1F 47 05 	.db 236, 31, 71, 5
  254 D1:D021 79 2F 0D 08 	.db 121, 47, 13, 8
  255 D1:D025 -  -  -  -  
  256 D1:D025 -  -  -  -  
  257 D1:D025 -  -  -  -  
Listing for file "ascent.asm"
  281 D1:D025 -  -  -  -  #include "Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Palette_Setup.txt"
    1 D1:D025 -  -  -  -  setup_palette_1:
    2 D1:D025 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:D029 3E 80 -  -  	ld a,%10000000
    4 D1:D02B 77 -  -  -  	ld (hl),a 
    5 D1:D02C 23 -  -  -  	inc hl
    6 D1:D02D 3E 10 -  -  	ld a,%00010000
    7 D1:D02F 77 -  -  -  	ld (hl),a 
    8 D1:D030 23 -  -  -  	inc hl
    9 D1:D031 3E 61 -  -  	ld a,%01100001
   10 D1:D033 77 -  -  -  	ld (hl),a 
   11 D1:D034 23 -  -  -  	inc hl
   12 D1:D035 3E 4E -  -  	ld a,%01001110
   13 D1:D037 77 -  -  -  	ld (hl),a 
   14 D1:D038 23 -  -  -  	inc hl
   15 D1:D039 3E 65 -  -  	ld a,%01100101
   16 D1:D03B 77 -  -  -  	ld (hl),a 
   17 D1:D03C 23 -  -  -  	inc hl
   18 D1:D03D 3E 6B -  -  	ld a,%01101011
   19 D1:D03F 77 -  -  -  	ld (hl),a 
   20 D1:D040 23 -  -  -  	inc hl
   21 D1:D041 3E A0 -  -  	ld a,%10100000
   22 D1:D043 77 -  -  -  	ld (hl),a 
   23 D1:D044 23 -  -  -  	inc hl
   24 D1:D045 3E 5F -  -  	ld a,%01011111
   25 D1:D047 77 -  -  -  	ld (hl),a 
   26 D1:D048 23 -  -  -  	inc hl
   27 D1:D049 3E E0 -  -  	ld a,%11100000
   28 D1:D04B 77 -  -  -  	ld (hl),a 
   29 D1:D04C 23 -  -  -  	inc hl
   30 D1:D04D 3E D3 -  -  	ld a,%11010011
   31 D1:D04F 77 -  -  -  	ld (hl),a 
   32 D1:D050 23 -  -  -  	inc hl
   33 D1:D051 3E A2 -  -  	ld a,%10100010
   34 D1:D053 77 -  -  -  	ld (hl),a 
   35 D1:D054 23 -  -  -  	inc hl
   36 D1:D055 3E 12 -  -  	ld a,%00010010
   37 D1:D057 77 -  -  -  	ld (hl),a 
   38 D1:D058 23 -  -  -  	inc hl
   39 D1:D059 3E F9 -  -  	ld a,%11111001
   40 D1:D05B 77 -  -  -  	ld (hl),a 
   41 D1:D05C 23 -  -  -  	inc hl
   42 D1:D05D 3E 0A -  -  	ld a,%00001010
   43 D1:D05F 77 -  -  -  	ld (hl),a 
   44 D1:D060 23 -  -  -  	inc hl
   45 D1:D061 3E 1A -  -  	ld a,%00011010
   46 D1:D063 77 -  -  -  	ld (hl),a 
   47 D1:D064 23 -  -  -  	inc hl
   48 D1:D065 3E 31 -  -  	ld a,%00110001
   49 D1:D067 77 -  -  -  	ld (hl),a 
   50 D1:D068 23 -  -  -  	inc hl
   51 D1:D069 3E FF -  -  	ld a,%11111111
   52 D1:D06B 77 -  -  -  	ld (hl),a 
   53 D1:D06C 23 -  -  -  	inc hl
   54 D1:D06D 3E FF -  -  	ld a,%11111111
   55 D1:D06F 77 -  -  -  	ld (hl),a 
   56 D1:D070 23 -  -  -  	inc hl
   57 D1:D071 3E 1F -  -  	ld a,%00011111
   58 D1:D073 77 -  -  -  	ld (hl),a 
   59 D1:D074 23 -  -  -  	inc hl
   60 D1:D075 3E 81 -  -  	ld a,%10000001
   61 D1:D077 77 -  -  -  	ld (hl),a 
   62 D1:D078 23 -  -  -  	inc hl
   63 D1:D079 3E 00 -  -  	ld a,%00000000
   64 D1:D07B 77 -  -  -  	ld (hl),a 
   65 D1:D07C 23 -  -  -  	inc hl
   66 D1:D07D 3E 68 -  -  	ld a,%01101000
   67 D1:D07F 77 -  -  -  	ld (hl),a 
   68 D1:D080 23 -  -  -  	inc hl
   69 D1:D081 3E 20 -  -  	ld a,%00100000
   70 D1:D083 77 -  -  -  	ld (hl),a 
   71 D1:D084 23 -  -  -  	inc hl
   72 D1:D085 3E 6A -  -  	ld a,%01101010
   73 D1:D087 77 -  -  -  	ld (hl),a 
   74 D1:D088 23 -  -  -  	inc hl
   75 D1:D089 3E 28 -  -  	ld a,%00101000
   76 D1:D08B 77 -  -  -  	ld (hl),a 
   77 D1:D08C 23 -  -  -  	inc hl
   78 D1:D08D 3E 21 -  -  	ld a,%00100001
   79 D1:D08F 77 -  -  -  	ld (hl),a 
   80 D1:D090 23 -  -  -  	inc hl
   81 D1:D091 3E 00 -  -  	ld a,%00000000
   82 D1:D093 77 -  -  -  	ld (hl),a 
   83 D1:D094 23 -  -  -  	inc hl
   84 D1:D095 3E 00 -  -  	ld a,%00000000
   85 D1:D097 77 -  -  -  	ld (hl),a 
   86 D1:D098 23 -  -  -  	inc hl
   87 D1:D099 3E 23 -  -  	ld a,%00100011
   88 D1:D09B 77 -  -  -  	ld (hl),a 
   89 D1:D09C 23 -  -  -  	inc hl
   90 D1:D09D 3E B1 -  -  	ld a,%10110001
   91 D1:D09F 77 -  -  -  	ld (hl),a 
   92 D1:D0A0 23 -  -  -  	inc hl
   93 D1:D0A1 3E 1F -  -  	ld a,%00011111
   94 D1:D0A3 77 -  -  -  	ld (hl),a 
   95 D1:D0A4 23 -  -  -  	inc hl
   96 D1:D0A5 3E 68 -  -  	ld a,%01101000
   97 D1:D0A7 77 -  -  -  	ld (hl),a 
   98 D1:D0A8 23 -  -  -  	inc hl
   99 D1:D0A9 C9 -  -  -  	ret 
Listing for file "ascent.asm"
  282 D1:D0AA -  -  -  -  #include "Equates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Equates.txt"
    1 D1:D0AA -  -  -  -  Banana1_Slow .equ $d40001
    2 D1:D0AA -  -  -  -  Banana1_Slow_F .equ $d40119
    3 D1:D0AA -  -  -  -  Banana1_Slow_O .equ $d40231
    4 D1:D0AA -  -  -  -  Banana1_Slow_O_F .equ $d40349
    5 D1:D0AA -  -  -  -  Banana1Large_Slow_O .equ $d40461
    6 D1:D0AA -  -  -  -  Banana1Large_Slow_O_F .equ $d4077d
    7 D1:D0AA -  -  -  -  Banana1Large_Fast .equ $d40a98
    8 D1:D0AA -  -  -  -  Banana1Large_Fast_F .equ $d40d2a
    9 D1:D0AA -  -  -  -  Banana1Large_BG .equ $d40fbb
   10 D1:D0AA -  -  -  -  Banana1Large_BG_O .equ $d41800
   11 D1:D0AA -  -  -  -  Banana1Large_BG_F .equ $d420a1
   12 D1:D0AA -  -  -  -  Banana1Large_BG_O_F .equ $d428e6
   13 D1:D0AA -  -  -  -  Shittlogo_Slow .equ $d43187
   14 D1:D0AA -  -  -  -  Shittlogo_Slow_O .equ $d436b7
   15 D1:D0AA -  -  -  -  OrangeDot_Slow .equ $d43bd3
   16 D1:D0AA -  -  -  -  OrangeDot_Slow_O .equ $d43c7f
   17 D1:D0AA -  -  -  -  OrangeDot_BG .equ $d43d2a
   18 D1:D0AA -  -  -  -  OrangeDot_BG_O .equ $d43e1b
   19 D1:D0AA -  -  -  -  SquiggleL_Slow .equ $d43f0d
   20 D1:D0AA -  -  -  -  SquiggleL_Slow_F .equ $d440ad
   21 D1:D0AA -  -  -  -  SquiggleL_Slow_O .equ $d4424d
   22 D1:D0AA -  -  -  -  SquiggleL_Slow_O_F .equ $d443f1
   23 D1:D0AA -  -  -  -  Banana5_BG .equ $d44595
   24 D1:D0AA -  -  -  -  Banana5_BG_O .equ $d44996
   25 D1:D0AA -  -  -  -  Banana5_BG_F .equ $d44dd7
   26 D1:D0AA -  -  -  -  Banana5_BG_O_F .equ $d451d8
   27 D1:D0AA -  -  -  -  GreenCurl1_BG .equ $d45619
   28 D1:D0AA -  -  -  -  GreenCurl1_BG_O .equ $d45a1a
   29 D1:D0AA -  -  -  -  GreenCurl1_BG_F .equ $d45e5b
   30 D1:D0AA -  -  -  -  GreenCurl1_BG_O_F .equ $d4625c
   31 D1:D0AA -  -  -  -  Bluecurl_BG .equ $d4669d
   32 D1:D0AA -  -  -  -  Bluecurl_BG_O .equ $d46f9e
Listing for file "ascent.asm"
  283 D1:D0AA -  -  -  -  ;#include "Decompress_Calls.txt"
  284 D1:D0AA -  -  -  -  #include "Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Tables.txt"
    1 D1:D0AA -  -  -  -  Sprite_Table_0:
    2 D1:D0AA 19 01 D4 -  	.dl Banana1_Slow_F
    3 D1:D0AD 61 04 D4 -  	.dl Banana1Large_Slow_O
    4 D1:D0B0 98 0A D4 -  	.dl Banana1Large_Fast
    5 D1:D0B3 7D 07 D4 -  	.dl Banana1Large_Slow_O_F
    6 D1:D0B6 01 00 D4 -  	.dl Banana1_Slow
    7 D1:D0B9 49 03 D4 -  	.dl Banana1_Slow_O_F
    8 D1:D0BC 2A 0D D4 -  	.dl Banana1Large_Fast_F
    9 D1:D0BF 31 02 D4 -  	.dl Banana1_Slow_O
   10 D1:D0C2 B7 36 D4 -  	.dl Shittlogo_Slow_O
   11 D1:D0C5 87 31 D4 -  	.dl Shittlogo_Slow
   12 D1:D0C8 7F 3C D4 -  	.dl OrangeDot_Slow_O
   13 D1:D0CB D3 3B D4 -  	.dl OrangeDot_Slow
   14 D1:D0CE 4D 42 D4 -  	.dl SquiggleL_Slow_O
   15 D1:D0D1 AD 40 D4 -  	.dl SquiggleL_Slow_F
   16 D1:D0D4 0D 3F D4 -  	.dl SquiggleL_Slow
   17 D1:D0D7 F1 43 D4 -  	.dl SquiggleL_Slow_O_F
   18 D1:D0DA -  -  -  -  
   19 D1:D0DA -  -  -  -  Sprite_Table_1:
   20 D1:D0DA E6 28 D4 -  	.dl Banana1Large_BG_O_F
   21 D1:D0DD 00 18 D4 -  	.dl Banana1Large_BG_O
   22 D1:D0E0 BB 0F D4 -  	.dl Banana1Large_BG
   23 D1:D0E3 96 49 D4 -  	.dl Banana5_BG_O
   24 D1:D0E6 95 45 D4 -  	.dl Banana5_BG
   25 D1:D0E9 5C 62 D4 -  	.dl GreenCurl1_BG_O_F
   26 D1:D0EC 1A 5A D4 -  	.dl GreenCurl1_BG_O
   27 D1:D0EF 5B 5E D4 -  	.dl GreenCurl1_BG_F
   28 D1:D0F2 9E 6F D4 -  	.dl Bluecurl_BG_O
   29 D1:D0F5 A1 20 D4 -  	.dl Banana1Large_BG_F
   30 D1:D0F8 D7 4D D4 -  	.dl Banana5_BG_F
   31 D1:D0FB 9D 66 D4 -  	.dl Bluecurl_BG
   32 D1:D0FE 1B 3E D4 -  	.dl OrangeDot_BG_O
   33 D1:D101 19 56 D4 -  	.dl GreenCurl1_BG
   34 D1:D104 2A 3D D4 -  	.dl OrangeDot_BG
   35 D1:D107 D8 51 D4 -  	.dl Banana5_BG_O_F
   36 D1:D10A -  -  -  -  
   37 D1:D10A -  -  -  -  Sprite_Table_2:
   38 D1:D10A -  -  -  -  
Listing for file "ascent.asm"
  285 D1:D10A -  -  -  -  
  286 D1:D10A -  -  -  -  
