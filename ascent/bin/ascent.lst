    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD 42 C8 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C CD 5F B6 D1 	call setup_decompress_queue
   26 D1:A8A0 -  -  -  -  	
   27 D1:A8A0 -  -  -  -  	
   28 D1:A8A0 -  -  -  -  	
   29 D1:A8A0 -  -  -  -  	
   30 D1:A8A0 -  -  -  -  	
   31 D1:A8A0 -  -  -  -  	;call draw_fg
   32 D1:A8A0 -  -  -  -  	
   33 D1:A8A0 -  -  -  -  	
   34 D1:A8A0 CD 2A AA D1 	call prgmpause
   35 D1:A8A4 -  -  -  -  	
   36 D1:A8A4 -  -  -  -  
   37 D1:A8A4 -  -  -  -  	
   38 D1:A8A4 -  -  -  -  
   39 D1:A8A4 -  -  -  -  ;	call decompress_calls
   40 D1:A8A4 -  -  -  -  	
   41 D1:A8A4 -  -  -  -  	;gen purp timers
   42 D1:A8A4 -  -  -  -  		; 76543210	
   43 D1:A8A4 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   44 D1:A8A6 32 30 00 F2 	ld ($F20030),a
   45 D1:A8AA -  -  -  -  	;	  fedcba98
   46 D1:A8AA 3E 02 -  -  	ld a,%00000010;count up
   47 D1:A8AC 32 31 00 F2 	ld ($F20031),a
   48 D1:A8B0 -  -  -  -  	
   49 D1:A8B0 21 00 2C D5 	ld hl,vRam + (160*240*2)
   50 D1:A8B4 22 3B AA D1 	ld (draw_buffer),hl
   51 D1:A8B8 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   52 D1:A8BC 22 10 00 E3 	ld (mpLcdBase),hl
   53 D1:A8C0 -  -  -  -  	
   54 D1:A8C0 21 00 00 00 	ld hl,0
   55 D1:A8C4 22 35 AA D1 	ld (cam_pos),hl
   56 D1:A8C8 -  -  -  -  
   57 D1:A8C8 CD 7C AB D1 	call setup_bg
   58 D1:A8CC -  -  -  -  
   59 D1:A8CC -  -  -  -  	;call draw_bg
   60 D1:A8CC -  -  -  -  	
   61 D1:A8CC -  -  -  -  	
   62 D1:A8CC -  -  -  -  main_loop:
   63 D1:A8CC -  -  -  -  	;clear timer
   64 D1:A8CC 3E 00 -  -  	ld a,0
   65 D1:A8CE 32 00 00 F2 	ld ($F20000),a;32768hz
   66 D1:A8D2 32 01 00 F2 	ld ($F20001),a;128hz
   67 D1:A8D6 32 02 00 F2 	ld ($F20002),a;0.5hz
   68 D1:A8DA 32 03 00 F2 	ld ($F20003),a
   69 D1:A8DE -  -  -  -  	
   70 D1:A8DE -  -  -  -  	;Instructions here 
   71 D1:A8DE CD 96 AA D1 	call draw_bg
   72 D1:A8E2 -  -  -  -  	
   73 D1:A8E2 CD 2A B4 D1 	call draw_mg
   74 D1:A8E6 -  -  -  -  	
   75 D1:A8E6 CD 7B B4 D1 	call draw_fg
   76 D1:A8EA -  -  -  -  	
   77 D1:A8EA 21 00 00 00 	ld hl,0
   78 D1:A8EE -  -  -  -  	
   79 D1:A8EE -  -  -  -  	; for debug longest frame draw time
   80 D1:A8EE 3A 00 00 F2 	ld a,($F20000)
   81 D1:A8F2 6F -  -  -  	ld l,a
   82 D1:A8F3 3A 01 00 F2 	ld a,($F20001);128hz 
   83 D1:A8F7 67 -  -  -  	ld h,a
   84 D1:A8F8 E5 -  -  -  	push hl
   85 D1:A8F9 ED 4B 41 AA 
              D1 -  -  -  	ld bc,(longestFrame)
   86 D1:A8FE ED 42 -  -  	sbc hl,bc 
   87 D1:A900 DA 12 A9 D1 	jp c,longest_frame_skip
   88 D1:A904 -  -  -  -  	
   89 D1:A904 E1 -  -  -  	pop hl 
   90 D1:A905 E5 -  -  -  	push hl 
   91 D1:A906 22 41 AA D1 	ld (longestFrame),hl 
   92 D1:A90A 2A 35 AA D1 	ld hl,(cam_pos)
   93 D1:A90E 22 44 AA D1 	ld (longestFramePos),hl
   94 D1:A912 -  -  -  -  longest_frame_skip:
   95 D1:A912 E1 -  -  -  	pop hl 
   96 D1:A913 -  -  -  -  	
   97 D1:A913 -  -  -  -  		
   98 D1:A913 2A 4A AA D1 	ld hl,(frameCount)
   99 D1:A917 23 -  -  -  	inc hl
  100 D1:A918 22 4A AA D1 	ld (frameCount),hl
  101 D1:A91C -  -  -  -  	
  102 D1:A91C -  -  -  -  	;swap draw buffers
  103 D1:A91C 2A 10 00 E3 	ld hl,(mpLcdBase)
  104 D1:A920 ED 5B 3B AA 
              D1 -  -  -  	ld de,(draw_buffer)
  105 D1:A925 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  106 D1:A92A 22 3B AA D1 	ld (draw_buffer),hl
  107 D1:A92E -  -  -  -  	
  108 D1:A92E -  -  -  -  	;check if lcd has drawn first frame
  109 D1:A92E -  -  -  -  clock_check_loop:
  110 D1:A92E -  -  -  -  
  111 D1:A92E -  -  -  -  
  112 D1:A92E -  -  -  -  	;Sprite decompression will occur here
  113 D1:A92E -  -  -  -  
  114 D1:A92E 3A 01 00 F2 	ld a,($F20001);128hz clock
  115 D1:A932 FE 03 -  -  	cp 3;check if reached 3 
  116 D1:A934 DA 2E A9 D1 	jp c,clock_check_loop
  117 D1:A938 -  -  -  -  	
  118 D1:A938 -  -  -  -  	;wait until finished drawing second frame
  119 D1:A938 -  -  -  -  
  120 D1:A938 -  -  -  -  clear_int:      
  121 D1:A938 21 28 00 E3     ld hl, mpLcdIcr
  122 D1:A93C CB D6 -  -      set 2, (hl)            ; clear interrupt
  123 D1:A93E 21 20 00 E3     ld hl, mpLcdRis
  124 D1:A942 -  -  -  -  wait_int:
  125 D1:A942 CB 56 -  -      bit 2, (hl)
  126 D1:A944 28 FC -  -      jr z, wait_int  
  127 D1:A946 -  -  -  -  
  128 D1:A946 -  -  -  -  
  129 D1:A946 21 00 00 00 	ld hl,0
  130 D1:A94A -  -  -  -  	
  131 D1:A94A 3A 02 00 F2 	ld a,($F20002)
  132 D1:A94E 67 -  -  -  	ld h,a
  133 D1:A94F 3A 01 00 F2 	ld a,($F20001)
  134 D1:A953 6F -  -  -  	ld l,a
  135 D1:A954 ED 4B 47 AA 
              D1 -  -  -  	ld bc,(totalTime)
  136 D1:A959 09 -  -  -  	add hl,bc 
  137 D1:A95A 22 47 AA D1 	ld (totalTime),hl 
  138 D1:A95E -  -  -  -  	
  139 D1:A95E -  -  -  -  	;Move cam
  140 D1:A95E 2A 35 AA D1 	ld hl,(cam_pos)
  141 D1:A962 23 -  -  -  	inc hl
  142 D1:A963 23 -  -  -  	inc hl
  143 D1:A964 23 -  -  -  	inc hl
  144 D1:A965 23 -  -  -  	inc hl
  145 D1:A966 23 -  -  -  	inc hl
  146 D1:A967 23 -  -  -  	inc hl
  147 D1:A968 23 -  -  -  	inc hl
  148 D1:A969 23 -  -  -  	inc hl
  149 D1:A96A 22 35 AA D1 	ld (cam_pos),hl
  150 D1:A96E 01 EF 00 00 	ld bc,239
  151 D1:A972 09 -  -  -  	add hl,bc 
  152 D1:A973 7C -  -  -  	ld a,h ;msb 
  153 D1:A974 FE 23 -  -  	cp 35
  154 D1:A976 C2 CC A8 D1 	jp nz,main_loop
  155 D1:A97A -  -  -  -  		
  156 D1:A97A -  -  -  -  	;print debug times 
  157 D1:A97A 21 00 00 D4 	ld hl,vRam
  158 D1:A97E 22 10 00 E3 	ld (mpLcdBase),hl
  159 D1:A982 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  160 D1:A986 3E 2D -  -  	ld	a,lcdBpp16
  161 D1:A988 32 18 00 E3 	ld (mpLcdCtrl),a
  162 D1:A98C -  -  -  -  	
  163 D1:A98C 3E 00 -  -  	ld a,0
  164 D1:A98E 32 95 05 D0 	ld (curRow),a
  165 D1:A992 32 96 05 D0 	ld (curCol),a
  166 D1:A996 2A 41 AA D1 	ld hl,(longestFrame)
  167 D1:A99A CD E0 1E 02 	call _DispHL
  168 D1:A99E 3E 01 -  -  	ld a,1
  169 D1:A9A0 32 95 05 D0 	ld (curRow),a
  170 D1:A9A4 3E 00 -  -  	ld a,0
  171 D1:A9A6 32 96 05 D0 	ld (curCol),a
  172 D1:A9AA 2A 44 AA D1 	ld hl,(longestFramePos)
  173 D1:A9AE CD E0 1E 02 	call _DispHL
  174 D1:A9B2 3E 02 -  -  	ld a,2
  175 D1:A9B4 32 95 05 D0 	ld (curRow),a
  176 D1:A9B8 3E 00 -  -  	ld a,0
  177 D1:A9BA 32 96 05 D0 	ld (curCol),a
  178 D1:A9BE 2A 47 AA D1 	ld hl,(totalTime)
  179 D1:A9C2 CD E0 1E 02 	call _DispHL
  180 D1:A9C6 3E 03 -  -  	ld a,3
  181 D1:A9C8 32 95 05 D0 	ld (curRow),a
  182 D1:A9CC 3E 00 -  -  	ld a,0
  183 D1:A9CE 32 96 05 D0 	ld (curCol),a
  184 D1:A9D2 2A 4A AA D1 	ld hl,(frameCount)
  185 D1:A9D6 CD E0 1E 02 	call _DispHL
  186 D1:A9DA -  -  -  -  	
  187 D1:A9DA CD 2A AA D1 	call prgmpause
  188 D1:A9DE CD 2A AA D1 	call prgmpause
  189 D1:A9E2 -  -  -  -  	
  190 D1:A9E2 -  -  -  -  	
  191 D1:A9E2 -  -  -  -  exit_prgm:
  192 D1:A9E2 21 00 00 D4 	ld hl,vRam
  193 D1:A9E6 22 10 00 E3 	ld (mpLcdBase),hl
  194 D1:A9EA CD 10 08 02 	call _ClrScrnFull
  195 D1:A9EE 3E 2D -  -  	ld	a,lcdBpp16
  196 D1:A9F0 32 18 00 E3 	ld	(mpLcdCtrl),a
  197 D1:A9F4 CD 3C 1A 02 	call _DrawStatusBar
  198 D1:A9F8 -  -  -  -  	
  199 D1:A9F8 FB -  -  -  	ei				; reset screen back to normal
  200 D1:A9F9 C9 -  -  -  	ret			; return to os
  201 D1:A9FA -  -  -  -  
  202 D1:A9FA -  -  -  -  
  203 D1:A9FA -  -  -  -  printHL:;=================REMOVE
  204 D1:A9FA E5 -  -  -  	push hl
  205 D1:A9FB 21 00 00 D4 	ld hl,vRam
  206 D1:A9FF 22 10 00 E3 	ld (mpLcdBase),hl
  207 D1:AA03 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  208 D1:AA07 3E 2D -  -  	ld	a,lcdBpp16
  209 D1:AA09 32 18 00 E3 	ld (mpLcdCtrl),a
  210 D1:AA0D E1 -  -  -  	pop hl
  211 D1:AA0E CD E0 1E 02 	call _DispHL
  212 D1:AA12 FB -  -  -  	ei
  213 D1:AA13 CD 8C 0D 02 	call _GetKey
  214 D1:AA17 F3 -  -  -  	di
  215 D1:AA18 C3 E2 A9 D1 	jp exit_prgm
  216 D1:AA1C -  -  -  -  
  217 D1:AA1C -  -  -  -  
  218 D1:AA1C -  -  -  -  write_a_to_ram:
  219 D1:AA1C F5 -  -  -  	push af 
  220 D1:AA1D E5 -  -  -  	push hl 
  221 D1:AA1E -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  222 D1:AA1E 21 00 30 D4 	ld hl, $d43000
  223 D1:AA22 -  -  -  -  	;ld (hl),a 
  224 D1:AA22 23 -  -  -  	inc hl 
  225 D1:AA23 22 1F AA D1 	ld (write_a_to_ram_addr),hl 
  226 D1:AA27 E1 -  -  -  	pop hl 
  227 D1:AA28 F1 -  -  -  	pop af 
  228 D1:AA29 C9 -  -  -  	ret 
  229 D1:AA2A -  -  -  -  
  230 D1:AA2A -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  231 D1:AA2A D5 -  -  -  	push de 
  232 D1:AA2B E5 -  -  -  	push hl 
  233 D1:AA2C FB -  -  -  	ei
  234 D1:AA2D CD 8C 0D 02 	call _GetKey
  235 D1:AA31 F3 -  -  -  	di
  236 D1:AA32 E1 -  -  -  	pop hl 
  237 D1:AA33 D1 -  -  -  	pop de 
  238 D1:AA34 C9 -  -  -  	ret
  239 D1:AA35 -  -  -  -  
  240 D1:AA35 -  -  -  -  cam_pos:;y position of lowest visible line in fg layer
  241 D1:AA35 4F 00 00 -  	.dl 79
  242 D1:AA38 -  -  -  -  bg_cam_pos: ;y position of lowest visible line in bg layer (= cam pos / 4)
  243 D1:AA38 00 00 00 -  	.dl 0
  244 D1:AA3B -  -  -  -  
  245 D1:AA3B -  -  -  -  
  246 D1:AA3B -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  247 D1:AA3B 00 2C D5 -  	.dl $d52c00
  248 D1:AA3E -  -  -  -  	
  249 D1:AA3E -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  250 D1:AA3E 00 00 00 -  	.dl 0
  251 D1:AA41 -  -  -  -  BG_buffer .equ vram + (160*240) ;Start of BG buffer 
  252 D1:AA41 -  -  -  -  
  253 D1:AA41 -  -  -  -  
  254 D1:AA41 -  -  -  -  ;d40000 = Decompressed sprite data
  255 D1:AA41 -  -  -  -  ;d49600 = BG buffer
  256 D1:AA41 -  -  -  -  ;d52c00 = Frame draw buffer 1 
  257 D1:AA41 -  -  -  -  ;d5c200 = frame draw buffer 2
  258 D1:AA41 -  -  -  -  
  259 D1:AA41 -  -  -  -  ;pixelShadow .equ $D031F6 
  260 D1:AA41 -  -  -  -  
  261 D1:AA41 -  -  -  -  
  262 D1:AA41 -  -  -  -  longestFrame:
  263 D1:AA41 00 00 00 -  	.dl 0
  264 D1:AA44 -  -  -  -  longestFramePos:
  265 D1:AA44 00 00 00 -  	.dl 0
  266 D1:AA47 -  -  -  -  totalTime:
  267 D1:AA47 00 00 00 -  	.dl 0
  268 D1:AA4A -  -  -  -  frameCount:
  269 D1:AA4A 00 00 00 -  	.dl 0
  270 D1:AA4D -  -  -  -  hasLagged:
  271 D1:AA4D 00 00 00 -  	.dl 0
  272 D1:AA50 -  -  -  -  
  273 D1:AA50 -  -  -  -  
  274 D1:AA50 -  -  -  -  
  275 D1:AA50 -  -  -  -  
  276 D1:AA50 -  -  -  -  
  277 D1:AA50 -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AA50 -  -  -  -  
    2 D1:AA50 -  -  -  -  
    3 D1:AA50 -  -  -  -  
    4 D1:AA50 -  -  -  -  time_test_start:
    5 D1:AA50 -  -  -  -  
    6 D1:AA50 -  -  -  -  		; 76543210	
    7 D1:AA50 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AA52 32 30 00 F2 	ld ($F20030),a
    9 D1:AA56 -  -  -  -  	;	  fedcba98
   10 D1:AA56 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AA58 32 31 00 F2 	ld ($F20031),a
   12 D1:AA5C 3E 00 -  -  	ld a,0
   13 D1:AA5E 32 00 00 F2 	ld ($F20000),a
   14 D1:AA62 32 01 00 F2 	ld ($F20001),a
   15 D1:AA66 32 02 00 F2 	ld ($F20002),a
   16 D1:AA6A 32 03 00 F2 	ld ($F20003),a
   17 D1:AA6E -  -  -  -  	
   18 D1:AA6E 21 2C 01 00 	ld hl,300
   19 D1:AA72 -  -  -  -  	
   20 D1:AA72 -  -  -  -  time_testing_loop:
   21 D1:AA72 E5 -  -  -  	push hl
   22 D1:AA73 01 E8 03 00 	ld bc,1000
   23 D1:AA77 -  -  -  -  time_testing_loop_2:
   24 D1:AA77 C5 -  -  -  	push bc
   25 D1:AA78 -  -  -  -  	;instruction here
   26 D1:AA78 -  -  -  -  	
   27 D1:AA78 -  -  -  -  	
   28 D1:AA78 -  -  -  -  	;Instruction end
   29 D1:AA78 C1 -  -  -  	pop bc
   30 D1:AA79 0B -  -  -  	dec bc
   31 D1:AA7A 79 -  -  -  	ld a,c
   32 D1:AA7B B0 -  -  -  	or b
   33 D1:AA7C C2 77 AA D1 	jp nz,time_testing_loop_2
   34 D1:AA80 E1 -  -  -  	pop hl
   35 D1:AA81 2B -  -  -  	dec hl
   36 D1:AA82 7D -  -  -  	ld a,l
   37 D1:AA83 B4 -  -  -  	or h
   38 D1:AA84 C2 72 AA D1 	jp nz,time_testing_loop
   39 D1:AA88 -  -  -  -  	
   40 D1:AA88 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AA8C 6F -  -  -  	ld l,a
   42 D1:AA8D 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AA91 67 -  -  -  	ld h,a
   44 D1:AA92 C3 FA A9 D1 	jp printHL;div by 128 for time
   45 D1:AA96 -  -  -  -  	
   46 D1:AA96 -  -  -  -  
   47 D1:AA96 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AA96 -  -  -  -  
   49 D1:AA96 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AA96 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AA96 -  -  -  -  
   52 D1:AA96 -  -  -  -  
   53 D1:AA96 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AA96 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AA96 -  -  -  -  
   56 D1:AA96 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AA96 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AA96 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AA96 -  -  -  -  ;.24 screens/frame
   60 D1:AA96 -  -  -  -  
   61 D1:AA96 -  -  -  -  
   62 D1:AA96 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AA96 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AA96 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AA96 -  -  -  -  ;.446 screens/frame
   66 D1:AA96 -  -  -  -  
   67 D1:AA96 -  -  -  -  
   68 D1:AA96 -  -  -  -  
   69 D1:AA96 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AA96 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AA96 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AA96 -  -  -  -  ;.78 screens/frame
   73 D1:AA96 -  -  -  -  
   74 D1:AA96 -  -  -  -  
   75 D1:AA96 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AA96 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AA96 -  -  -  -  ;.47 = FAST
   78 D1:AA96 -  -  -  -  
   79 D1:AA96 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AA96 -  -  -  -  
   81 D1:AA96 -  -  -  -  
   82 D1:AA96 -  -  -  -  
   83 D1:AA96 -  -  -  -  
   84 D1:AA96 -  -  -  -  
   85 D1:AA96 -  -  -  -  
   86 D1:AA96 -  -  -  -  
   87 D1:AA96 -  -  -  -  
   88 D1:AA96 -  -  -  -  
Listing for file "ascent.asm"
  278 D1:AA96 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AA96 -  -  -  -  
    2 D1:AA96 -  -  -  -  
    3 D1:AA96 -  -  -  -  BGMaxSpriteHeight .equ 120
    4 D1:AA96 -  -  -  -  
    5 D1:AA96 -  -  -  -  
    6 D1:AA96 -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    7 D1:AA96 CD CA AA D1 	call move_bg
    8 D1:AA9A 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    9 D1:AA9E ED 4B 3E AA 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
   10 D1:AAA3 37 -  -  -  	scf 
   11 D1:AAA4 3F -  -  -  	ccf 
   12 D1:AAA5 ED 42 -  -  	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
   13 D1:AAA7 E5 -  -  -  	push hl 
   14 D1:AAA8 C1 -  -  -  	pop bc	;put into bc for ldir 
   15 D1:AAA9 2A 3E AA D1 	ld hl,(BG_draw_buffer)
   16 D1:AAAD ED 5B 3B AA 
              D1 -  -  -  	ld de,(draw_buffer)
   17 D1:AAB2 ED B0 -  -  	ldir
   18 D1:AAB4 2A 3E AA D1 	ld hl,(BG_draw_buffer) ;loop point in buffer
   19 D1:AAB8 01 00 96 D4 	ld bc,BG_buffer ;start of buffer
   20 D1:AABC 37 -  -  -  	scf 
   21 D1:AABD 3F -  -  -  	ccf 
   22 D1:AABE ED 42 -  -  	sbc hl,bc ;number of bytes from start to loop point 
   23 D1:AAC0 C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   24 D1:AAC1 E5 -  -  -  	push hl 
   25 D1:AAC2 C1 -  -  -  	pop bc
   26 D1:AAC3 21 00 96 D4 	ld hl,BG_buffer 
   27 D1:AAC7 ED B0 -  -  	ldir 
   28 D1:AAC9 C9 -  -  -  	ret 
   29 D1:AACA -  -  -  -  	
   30 D1:AACA -  -  -  -  	
   31 D1:AACA -  -  -  -  ;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
   32 D1:AACA -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   33 D1:AACA -  -  -  -  move_bg:
   34 D1:AACA 2A 35 AA D1 	ld hl,(cam_pos);load cam pos 
   35 D1:AACE CB 3C -  -  	srl h
   36 D1:AAD0 CB 1D -  -  	rr l
   37 D1:AAD2 CB 3C -  -  	srl h
   38 D1:AAD4 CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   39 D1:AAD6 -  -  -  -  	;hl holds bg cam pos, lowest visible line of bg layer 
   40 D1:AAD6 ED 4B 38 AA 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   41 D1:AADB ED 42 -  -  	sbc hl,bc ;compare to the updated location
   42 D1:AADD C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   43 D1:AADE DA EA AA D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   44 D1:AAE2 CD 35 AB D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   45 D1:AAE6 C3 CA AA D1 	jp move_bg ;repeat until bg is in correct pos
   46 D1:AAEA -  -  -  -  move_bg_down:
   47 D1:AAEA CD F2 AA D1 	call dec_bg
   48 D1:AAEE C3 CA AA D1 	jp move_bg ;repeat until bg is in correct pos
   49 D1:AAF2 -  -  -  -  
   50 D1:AAF2 -  -  -  -  
   51 D1:AAF2 -  -  -  -  dec_bg:;move bg cam down 1px 
   52 D1:AAF2 -  -  -  -  	;write on draw buffer line 
   53 D1:AAF2 2A 3E AA D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   54 D1:AAF6 22 7B AC D1 	ld (dbgl_vram_line_start),hl 
   55 D1:AAFA -  -  -  -  	
   56 D1:AAFA 2A 38 AA D1 	ld hl,(bg_cam_pos)
   57 D1:AAFE 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   58 D1:AAFF 22 38 AA D1 	ld (bg_cam_pos),hl 
   59 D1:AB03 4C -  -  -  	ld c,h;bottom y value msb 
   60 D1:AB04 7D -  -  -  	ld a,l ;bottom y value lsb 
   61 D1:AB05 21 FF C9 D1 	ld hl,BG_Data_frame_table
   62 D1:AB09 0C -  -  -  	inc c 
   63 D1:AB0A 09 -  -  -  	add hl,bc 
   64 D1:AB0B 09 -  -  -  	add hl,bc 
   65 D1:AB0C 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   66 D1:AB0D ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   67 D1:AB0F CD D3 AB D1 	call draw_bg_line
   68 D1:AB13 -  -  -  -  	;move buffer pos
   69 D1:AB13 2A 3E AA D1 	ld hl,(BG_draw_buffer)
   70 D1:AB17 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
   71 D1:AB1B 37 -  -  -  	scf 
   72 D1:AB1C 3F -  -  -  	ccf 
   73 D1:AB1D ED 42 -  -  	sbc hl,bc ;compare to current line 
   74 D1:AB1F 2A 3E AA D1 	ld hl,(BG_draw_buffer)
   75 D1:AB23 C2 2B AB D1 	jp nz,dec_bg_bottom_skip
   76 D1:AB27 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   77 D1:AB2B -  -  -  -  dec_bg_bottom_skip:
   78 D1:AB2B 01 A0 00 00 	ld bc,160 
   79 D1:AB2F 09 -  -  -  	add hl,bc
   80 D1:AB30 22 3E AA D1 	ld (BG_draw_buffer),hl 
   81 D1:AB34 C9 -  -  -  	ret
   82 D1:AB35 -  -  -  -  
   83 D1:AB35 -  -  -  -  
   84 D1:AB35 -  -  -  -  inc_bg:;move cam up 
   85 D1:AB35 2A 3E AA D1 	ld hl,(BG_draw_buffer)
   86 D1:AB39 01 00 96 D4 	ld bc,BG_buffer
   87 D1:AB3D 37 -  -  -  	scf 
   88 D1:AB3E 3F -  -  -  	ccf 
   89 D1:AB3F ED 42 -  -  	sbc hl,bc ;compare current drawing line to top of bg buffer 
   90 D1:AB41 2A 3E AA D1 	ld hl,(BG_draw_buffer)
   91 D1:AB45 C2 4D AB D1 	jp nz,inc_bg_top_skip ;if they are not equal, continue
   92 D1:AB49 21 00 2C D5 	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
   93 D1:AB4D -  -  -  -  inc_bg_top_skip:
   94 D1:AB4D 01 A0 00 00 	ld bc,160 
   95 D1:AB51 37 -  -  -  	scf
   96 D1:AB52 3F -  -  -  	ccf 
   97 D1:AB53 ED 42 -  -  	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
   98 D1:AB55 22 3E AA D1 	ld (BG_draw_buffer),hl 
   99 D1:AB59 22 7B AC D1 	ld (dbgl_vram_line_start),hl 
  100 D1:AB5D 2A 38 AA D1 	ld hl,(bg_cam_pos)
  101 D1:AB61 23 -  -  -  	inc hl 
  102 D1:AB62 22 38 AA D1 	ld (bg_cam_pos),hl ;incremnet cam pos 
  103 D1:AB66 01 EF 00 00 	ld bc,239
  104 D1:AB6A 09 -  -  -  	add hl,bc ;gets uppermost visible line y value in bg layer
  105 D1:AB6B 4C -  -  -  	ld c,h;cam pos msb 
  106 D1:AB6C 7D -  -  -  	ld a,l ;a holds line number in target frame 
  107 D1:AB6D 21 FF C9 D1 	ld hl,BG_Data_frame_table
  108 D1:AB71 0C -  -  -  	inc c ;inc to get to upper frame 
  109 D1:AB72 09 -  -  -  	add hl,bc 
  110 D1:AB73 09 -  -  -  	add hl,bc 
  111 D1:AB74 09 -  -  -  	add hl,bc 
  112 D1:AB75 ED 27 -  -  	ld hl,(hl)
  113 D1:AB77 CD D3 AB D1 	call draw_bg_line
  114 D1:AB7B C9 -  -  -  	ret
  115 D1:AB7C -  -  -  -  	
  116 D1:AB7C -  -  -  -  
  117 D1:AB7C -  -  -  -  
  118 D1:AB7C -  -  -  -  
  119 D1:AB7C -  -  -  -  
  120 D1:AB7C -  -  -  -  setup_bg: ;Draws entire BG buffer when loading game 
  121 D1:AB7C 2A 35 AA D1 	ld hl,(cam_pos)
  122 D1:AB80 CB 3C -  -  	srl h
  123 D1:AB82 CB 1D -  -  	rr l
  124 D1:AB84 CB 3C -  -  	srl h
  125 D1:AB86 CB 1D -  -  	rr l ;div by 4
  126 D1:AB88 -  -  -  -  	;hl holds bg cam pos 
  127 D1:AB88 22 38 AA D1 	ld (bg_cam_pos),hl
  128 D1:AB8C -  -  -  -  	
  129 D1:AB8C 01 EF 00 00 	ld bc,239
  130 D1:AB90 09 -  -  -  	add hl,bc;hl holds y position of uppermost visible line in bg layer 
  131 D1:AB91 -  -  -  -  	
  132 D1:AB91 23 -  -  -  	inc hl;to be dec in loop
  133 D1:AB92 E5 -  -  -  	push hl ;save uppermost line y val
  134 D1:AB93 21 00 96 D4 	ld hl,BG_buffer ;start of bg drawing buffer 
  135 D1:AB97 22 3E AA D1 	ld (BG_draw_buffer),hl ;set current bg line drawing location 
  136 D1:AB9B E5 -  -  -  	push hl 
  137 D1:AB9C -  -  -  -  	
  138 D1:AB9C 3E F0 -  -  	ld a,240 ;num loops
  139 D1:AB9E 32 C6 AB D1 	ld (setup_bg_loop_count),a
  140 D1:ABA2 -  -  -  -  setup_bg_loop:
  141 D1:ABA2 -  -  -  -  
  142 D1:ABA2 E1 -  -  -  	pop hl;vram draw pos, next line of bg drawn here 
  143 D1:ABA3 22 7B AC D1 	ld (dbgl_vram_line_start),hl ;set drawing pos 
  144 D1:ABA7 01 A0 00 00 	ld bc,160
  145 D1:ABAB 09 -  -  -  	add hl,bc 
  146 D1:ABAC EB -  -  -  	ex de,hl ;put next vram pos in de 
  147 D1:ABAD E1 -  -  -  	pop hl;uppermost line y val
  148 D1:ABAE 2B -  -  -  	dec hl ;dec line y value (move to next lowest line)
  149 D1:ABAF E5 -  -  -  	push hl;push uppermost line y val
  150 D1:ABB0 D5 -  -  -  	push de ;push vram pos 
  151 D1:ABB1 01 00 00 00 	ld bc,0
  152 D1:ABB5 4C -  -  -  	ld c,h;cam pos msb 
  153 D1:ABB6 7D -  -  -  	ld a,l ;a holds line number in current frame 
  154 D1:ABB7 21 FF C9 D1 	ld hl,BG_Data_frame_table
  155 D1:ABBB 0C -  -  -  	inc c ;add 1 to get to upper frame
  156 D1:ABBC 09 -  -  -  	add hl,bc 
  157 D1:ABBD 09 -  -  -  	add hl,bc 
  158 D1:ABBE 09 -  -  -  	add hl,bc 
  159 D1:ABBF ED 27 -  -  	ld hl,(hl) ;hl now points to upper frame data 
  160 D1:ABC1 CD D3 AB D1 	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
  161 D1:ABC5 -  -  -  -  	
  162 D1:ABC5 -  -  -  -  setup_bg_loop_count .equ $ + 1
  163 D1:ABC5 3E 00 -  -  	ld a,0
  164 D1:ABC7 3D -  -  -  	dec a ;dec loop counter
  165 D1:ABC8 32 C6 AB D1 	ld (setup_bg_loop_count),a
  166 D1:ABCC C2 A2 AB D1 	jp nz,setup_bg_loop 
  167 D1:ABD0 E1 -  -  -  	pop hl ;pop vram pos 
  168 D1:ABD1 E1 -  -  -  	pop hl ;pop current line number 
  169 D1:ABD2 C9 -  -  -  	ret 
  170 D1:ABD3 -  -  -  -  
  171 D1:ABD3 -  -  -  -  
  172 D1:ABD3 -  -  -  -  
  173 D1:ABD3 -  -  -  -  
  174 D1:ABD3 -  -  -  -  
  175 D1:ABD3 -  -  -  -  
  176 D1:ABD3 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  177 D1:ABD3 -  -  -  -  ;for drawing BG, only 1 line is drawn at a time.
  178 D1:ABD3 -  -  -  -  ;therefore only check sprites in the above frame that may extend downwards, 
  179 D1:ABD3 -  -  -  -  ;and the sprites in the target frame which contains the y position of the line being drawn
  180 D1:ABD3 -  -  -  -  ;set dbgl_vram_line_start before calling 
  181 D1:ABD3 -  -  -  -  draw_bg_line:
  182 D1:ABD3 E5 -  -  -  	push hl ;upper frame sprite table pointer 
  183 D1:ABD4 F5 -  -  -  	push af ;save line number 
  184 D1:ABD5 3E 00 -  -  	ld a,$00 ;Set all of line to FF to clear it with color 16
  185 D1:ABD7 01 A0 00 00 	ld bc,160
  186 D1:ABDB 2A 7B AC D1 	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
  187 D1:ABDF CD E0 10 02 	call _MemSet ;Clear all of line 
  188 D1:ABE3 F1 -  -  -  	pop af ;return line number 
  189 D1:ABE4 E1 -  -  -  	pop hl ;return upper frame ptr 
  190 D1:ABE5 -  -  -  -  
  191 D1:ABE5 -  -  -  -  
  192 D1:ABE5 -  -  -  -  
  193 D1:ABE5 32 5D AC D1 	ld (dbgl_line_num),a ;write line num to required positions 
  194 D1:ABE9 -  -  -  -  	
  195 D1:ABE9 ED 44 -  -  	neg
  196 D1:ABEB CA F9 AB D1 	jp z, dbgl_skip_upper_loop ;need to check 0 case, negative 0 = 0
  197 D1:ABEF 32 2A AC D1 	ld (dbgl_lines_to_top_of_target_frame),a ;a holds lines from top of frame (1 indexed)
  198 D1:ABF3 FE 78 -  -  	cp BGMaxSpriteHeight
  199 D1:ABF5 DA 09 AC D1 	jp c, dbgl_do_upper_loop
  200 D1:ABF9 -  -  -  -  dbgl_skip_upper_loop:
  201 D1:ABF9 -  -  -  -  	;Upper sprites are too far to be seen in this line, skip upper loop 
  202 D1:ABF9 23 -  -  -  	inc hl 
  203 D1:ABFA 23 -  -  -  	inc hl
  204 D1:ABFB 23 -  -  -  	inc hl ;hl points to number of elements 
  205 D1:ABFC 01 00 00 00 	ld bc,0
  206 D1:AC00 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  207 D1:AC01 09 -  -  -  	add hl,bc 
  208 D1:AC02 09 -  -  -  	add hl,bc 
  209 D1:AC03 09 -  -  -  	add hl,bc 
  210 D1:AC04 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  211 D1:AC05 C3 42 AC D1 	jp dbgl_lower_start ;skip upper loop
  212 D1:AC09 -  -  -  -  	
  213 D1:AC09 -  -  -  -  dbgl_do_upper_loop:
  214 D1:AC09 ED 17 -  -  	ld de,(hl) ;DE points to sprite table 
  215 D1:AC0B ED 53 8C AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr
  216 D1:AC10 23 -  -  -  	inc hl
  217 D1:AC11 23 -  -  -  	inc hl
  218 D1:AC12 23 -  -  -  	inc hl ;to frame data start 
  219 D1:AC13 08 -  -  -  	ex af,af' ;'
  220 D1:AC14 7E -  -  -  	ld a,(hl);number of elements = num loops
  221 D1:AC15 3C -  -  -  	inc a ;add 1 bc termination is checked at start of loop 
  222 D1:AC16 08 -  -  -  	ex af,af' ;'
  223 D1:AC17 -  -  -  -  	
  224 D1:AC17 11 00 00 00 	ld de,0
  225 D1:AC1B 01 00 00 00 	ld bc,0
  226 D1:AC1F -  -  -  -  	;upper frame, checking for sprites that carry into lower frame
  227 D1:AC1F -  -  -  -  dbgl_upper_loop:
  228 D1:AC1F 08 -  -  -  	ex af,af' ;'
  229 D1:AC20 3D -  -  -  	dec a 
  230 D1:AC21 CA 42 AC D1 	jp z,dbgl_lower_start
  231 D1:AC25 08 -  -  -  	ex af,af' ;'
  232 D1:AC26 23 -  -  -  	inc hl ;to Y
  233 D1:AC27 7E -  -  -  	ld a,(hl); y value of sprite in upper frame 
  234 D1:AC28 23 -  -  -  	inc hl;to height
  235 D1:AC29 -  -  -  -  dbgl_lines_to_top_of_target_frame .equ $ + 1
  236 D1:AC29 C6 00 -  -  	add a,0 ;a holds line number in sprite to draw (0 indexed)
  237 D1:AC2B DA 3C AC D1 	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
  238 D1:AC2F BE -  -  -  	cp (hl) ;compare to sprite height 
  239 D1:AC30 D2 3C AC D1 	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
  240 D1:AC34 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  241 D1:AC34 CD 75 AC D1 	call dbgl_setup_and_draw ;draw sprite line 
  242 D1:AC38 -  -  -  -  	;hl pts to sprite index
  243 D1:AC38 C3 1F AC D1 	jp dbgl_upper_loop
  244 D1:AC3C -  -  -  -  	
  245 D1:AC3C -  -  -  -  dbgl_upper_skip_sprite:
  246 D1:AC3C 23 -  -  -  	inc hl ;to x 
  247 D1:AC3D 23 -  -  -  	inc hl ;to index 
  248 D1:AC3E C3 1F AC D1 	jp dbgl_upper_loop
  249 D1:AC42 -  -  -  -  	
  250 D1:AC42 -  -  -  -  	
  251 D1:AC42 -  -  -  -  dbgl_lower_start:
  252 D1:AC42 -  -  -  -  ;LOWER FRAME START 
  253 D1:AC42 -  -  -  -  	;After breaking upper loop, hl is pointing to the sprite index of the last element in the upper frame 
  254 D1:AC42 23 -  -  -  	inc hl ;hl now points to sprite table of the lower frame 
  255 D1:AC43 ED 17 -  -  	ld de,(hl)
  256 D1:AC45 ED 53 8C AC 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr 
  257 D1:AC4A 11 00 00 00 	ld de,0;clear d upper 
  258 D1:AC4E 23 -  -  -  	inc hl
  259 D1:AC4F 23 -  -  -  	inc hl
  260 D1:AC50 23 -  -  -  	inc hl;to num elements
  261 D1:AC51 -  -  -  -  	
  262 D1:AC51 08 -  -  -  	ex af,af' ;'
  263 D1:AC52 7E -  -  -  	ld a,(hl);number of elements
  264 D1:AC53 3C -  -  -  	inc a 
  265 D1:AC54 08 -  -  -  	ex af,af' ;'
  266 D1:AC55 -  -  -  -  	
  267 D1:AC55 -  -  -  -  	
  268 D1:AC55 -  -  -  -  dbgl_lower_loop:
  269 D1:AC55 08 -  -  -  	ex af,af' ;'
  270 D1:AC56 3D -  -  -  	dec a 
  271 D1:AC57 C8 -  -  -  	ret z
  272 D1:AC58 08 -  -  -  	ex af,af' ;'
  273 D1:AC59 23 -  -  -  	inc hl ;to y
  274 D1:AC5A 7E -  -  -  	ld a,(hl) ;y pos of sprite in lower frame 
  275 D1:AC5B 23 -  -  -  	inc hl;to height
  276 D1:AC5C -  -  -  -  dbgl_line_num .equ $ + 1
  277 D1:AC5C D6 00 -  -  	sub 0;subtract line num 
  278 D1:AC5E DA 6F AC D1 	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
  279 D1:AC62 -  -  -  -  	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
  280 D1:AC62 BE -  -  -  	cp (hl) ;compare to sprite height -1
  281 D1:AC63 D2 6F AC D1 	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
  282 D1:AC67 -  -  -  -  	
  283 D1:AC67 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  284 D1:AC67 CD 75 AC D1 	call dbgl_setup_and_draw ;draw sprite line 
  285 D1:AC6B -  -  -  -  	;hl pts to sprite index
  286 D1:AC6B C3 55 AC D1 	jp dbgl_lower_loop
  287 D1:AC6F -  -  -  -  	
  288 D1:AC6F -  -  -  -  dbgl_lower_skip_sprite:
  289 D1:AC6F 23 -  -  -  	inc hl ;to x 
  290 D1:AC70 23 -  -  -  	inc hl ;to index 
  291 D1:AC71 C3 55 AC D1 	jp dbgl_lower_loop
  292 D1:AC75 -  -  -  -  
  293 D1:AC75 -  -  -  -  ;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
  294 D1:AC75 -  -  -  -  dbgl_setup_and_draw:
  295 D1:AC75 23 -  -  -  	inc hl;to x pos
  296 D1:AC76 5E -  -  -  	ld e,(hl);e holds x pos 
  297 D1:AC77 23 -  -  -  	inc hl 
  298 D1:AC78 4E -  -  -  	ld c,(hl);sprite index 
  299 D1:AC79 E5 -  -  -  	push hl ;save location in data 
  300 D1:AC7A -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  301 D1:AC7A 21 00 00 00 	ld hl,0
  302 D1:AC7E 19 -  -  -  	add hl,de;add x pos 
  303 D1:AC7F EB -  -  -  	ex de,hl;put vram pos into de 
  304 D1:AC80 -  -  -  -  	
  305 D1:AC80 26 A0 -  -  	ld h,160
  306 D1:AC82 6F -  -  -  	ld l,a ;number of lines to subtract 
  307 D1:AC83 ED 6C -  -  	mlt hl;bytes to subtract from vram
  308 D1:AC85 37 -  -  -  	scf 
  309 D1:AC86 3F -  -  -  	ccf
  310 D1:AC87 EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  311 D1:AC88 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  312 D1:AC8A EB -  -  -  	ex de,hl;put in de
  313 D1:AC8B -  -  -  -  	
  314 D1:AC8B -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  315 D1:AC8B 21 00 00 00 	ld hl,0
  316 D1:AC8F 09 -  -  -  	add hl,bc
  317 D1:AC90 09 -  -  -  	add hl,bc 
  318 D1:AC91 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  319 D1:AC92 ED 27 -  -  	ld hl,(hl);hl holds sprite data
  320 D1:AC94 -  -  -  -  
  321 D1:AC94 -  -  -  -  
  322 D1:AC94 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  323 D1:AC96 CA A2 AC D1 	jp z,dbgl_fast_sprite ;if even address, fast sprite 
  324 D1:AC9A CD 74 AD D1 	call draw_slow_sprite_single_line
  325 D1:AC9E C3 A6 AC D1 	jp dbgl_slow_sprite
  326 D1:ACA2 -  -  -  -  dbgl_fast_sprite:
  327 D1:ACA2 CD F6 AC D1 	call draw_fast_sprite_single_line
  328 D1:ACA6 -  -  -  -  dbgl_slow_sprite:
  329 D1:ACA6 -  -  -  -  	
  330 D1:ACA6 11 00 00 00 	ld de,0;clear de 
  331 D1:ACAA 01 00 00 00 	ld bc,0
  332 D1:ACAE E1 -  -  -  	pop hl;back to data
  333 D1:ACAF C9 -  -  -  	ret
  334 D1:ACB0 -  -  -  -  	
  335 D1:ACB0 -  -  -  -  
  336 D1:ACB0 -  -  -  -  
  337 D1:ACB0 -  -  -  -  
  338 D1:ACB0 -  -  -  -  
  339 D1:ACB0 -  -  -  -  
  340 D1:ACB0 -  -  -  -  
  341 D1:ACB0 -  -  -  -  
  342 D1:ACB0 -  -  -  -  
  343 D1:ACB0 -  -  -  -  
  344 D1:ACB0 -  -  -  -  ; dbgl_upper_loop:
  345 D1:ACB0 -  -  -  -  	; ld a,(hl);y
  346 D1:ACB0 -  -  -  -  	; inc hl;to height
  347 D1:ACB0 -  -  -  -  	; sub (hl);subtract height
  348 D1:ACB0 -  -  -  -  	;a is y value of bottom row of sprite
  349 D1:ACB0 -  -  -  -  	; jp nc,dbgl_upper_skip;if no carry into next frame (most sprites will do this so want this to be fast)
  350 D1:ACB0 -  -  -  -  	
  351 D1:ACB0 -  -  -  -  	;sprite extends into target frame
  352 D1:ACB0 -  -  -  -  ; dbgl_line_num .equ $ + 1
  353 D1:ACB0 -  -  -  -  	; sub 0 ;compare to line number in target frame
  354 D1:ACB0 -  -  -  -  	; jp c,dbgl_upper_cont;if linenum is >  bottom row
  355 D1:ACB0 -  -  -  -  	; jp z,dbgl_upper_cont;if = bottom row
  356 D1:ACB0 -  -  -  -  ; dbgl_upper_skip:
  357 D1:ACB0 -  -  -  -  	; inc hl;to x
  358 D1:ACB0 -  -  -  -  	; inc hl;to index 
  359 D1:ACB0 -  -  -  -  	; inc hl;to y
  360 D1:ACB0 -  -  -  -  	; ex af,af';'
  361 D1:ACB0 -  -  -  -  	; dec a ;dec number of loops 
  362 D1:ACB0 -  -  -  -  	; jp z,dbgl_lower_start 
  363 D1:ACB0 -  -  -  -  	; ex af,af';'
  364 D1:ACB0 -  -  -  -  	; jp dbgl_upper_loop
  365 D1:ACB0 -  -  -  -  	
  366 D1:ACB0 -  -  -  -  ; dbgl_upper_cont:
  367 D1:ACB0 -  -  -  -  	;a = bottom row - linenum
  368 D1:ACB0 -  -  -  -  	; add a,(hl);add height-1 
  369 D1:ACB0 -  -  -  -  	;a holds 0 indexed line num within sprite
  370 D1:ACB0 -  -  -  -  	; call dbgl_setup_and_draw
  371 D1:ACB0 -  -  -  -  	; inc hl;to y
  372 D1:ACB0 -  -  -  -  	; ex af,af';'
  373 D1:ACB0 -  -  -  -  	; dec a 
  374 D1:ACB0 -  -  -  -  	; jp z,dbgl_lower_start 
  375 D1:ACB0 -  -  -  -  	; ex af,af';'
  376 D1:ACB0 -  -  -  -  	; jp dbgl_upper_loop
  377 D1:ACB0 -  -  -  -  
  378 D1:ACB0 -  -  -  -  
  379 D1:ACB0 -  -  -  -  
  380 D1:ACB0 -  -  -  -  
  381 D1:ACB0 -  -  -  -  
  382 D1:ACB0 -  -  -  -  
  383 D1:ACB0 -  -  -  -  
  384 D1:ACB0 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  385 D1:ACB0 -  -  -  -  ; draw_bg_sprite_line:
  386 D1:ACB0 -  -  -  -  	; push hl;save 
  387 D1:ACB0 -  -  -  -  	; ld l,(hl);sprite width in px
  388 D1:ACB0 -  -  -  -  	; ld h,a ;lines to skip
  389 D1:ACB0 -  -  -  -  	; ld a,l;width 
  390 D1:ACB0 -  -  -  -  	; mlt hl;widt*lines skipped 
  391 D1:ACB0 -  -  -  -  	; pop bc 
  392 D1:ACB0 -  -  -  -  	; add hl,bc;skip to target line data 
  393 D1:ACB0 -  -  -  -  	; inc hl 
  394 D1:ACB0 -  -  -  -  	;hl is pointing to start of line data 
  395 D1:ACB0 -  -  -  -  	; sra a;divide width by 2 
  396 D1:ACB0 -  -  -  -  	; ld b,a;b holds number of loops 
  397 D1:ACB0 -  -  -  -  ; dbgsl_loop:
  398 D1:ACB0 -  -  -  -  	; ld a,(de); load vram data 
  399 D1:ACB0 -  -  -  -  	; and (hl);and with mask 
  400 D1:ACB0 -  -  -  -  	; inc hl ;to color data 
  401 D1:ACB0 -  -  -  -  	; or (hl);or w color data 
  402 D1:ACB0 -  -  -  -  	; ld (de),a;write to vram  
  403 D1:ACB0 -  -  -  -  	; inc de
  404 D1:ACB0 -  -  -  -  	; inc hl;to mask data
  405 D1:ACB0 -  -  -  -  	; djnz dbgsl_loop
  406 D1:ACB0 -  -  -  -  	; ret 
  407 D1:ACB0 -  -  -  -  	
  408 D1:ACB0 -  -  -  -  
  409 D1:ACB0 -  -  -  -  
  410 D1:ACB0 -  -  -  -  
  411 D1:ACB0 -  -  -  -  
  412 D1:ACB0 -  -  -  -  
  413 D1:ACB0 -  -  -  -  
  414 D1:ACB0 -  -  -  -  
  415 D1:ACB0 -  -  -  -  
  416 D1:ACB0 -  -  -  -  
  417 D1:ACB0 -  -  -  -  
  418 D1:ACB0 -  -  -  -  
  419 D1:ACB0 -  -  -  -  
Listing for file "ascent.asm"
  279 D1:ACB0 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ACB0 -  -  -  -  
    2 D1:ACB0 -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:ACB0 -  -  -  -  setup_sprite_bottom_cut:
    4 D1:ACB0 1B -  -  -  	dec de
    5 D1:ACB1 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:ACB5 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:ACB6 E5 -  -  -  	push hl ;save data 
    8 D1:ACB7 09 -  -  -  	add hl,bc
    9 D1:ACB8 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:ACB9 E1 -  -  -  	pop hl ;return to start of data
   11 D1:ACBA 4E -  -  -  	ld c,(hl) ;height
   12 D1:ACBB 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:ACBC C9 -  -  -  	ret 
   14 D1:ACBD -  -  -  -  
   15 D1:ACBD -  -  -  -  setup_sprite_top_cut:
   16 D1:ACBD 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:ACBE 01 00 00 00 	ld bc,0
   18 D1:ACC2 4F -  -  -  	ld c,a ;lines to skip (1 indexed)
   19 D1:ACC3 D5 -  -  -  	push de
   20 D1:ACC4 11 00 00 00 	ld de,0
   21 D1:ACC8 E5 -  -  -  	push hl
   22 D1:ACC9 5E -  -  -  	ld e,(hl);height
   23 D1:ACCA 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:ACCB 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:ACCC E1 -  -  -  	pop hl;start of data
   26 D1:ACCD 19 -  -  -  	add hl,de
   27 D1:ACCE 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:ACCF 23 -  -  -  	inc hl;hl is pixel data
   29 D1:ACD0 D1 -  -  -  	pop de;back to vram
   30 D1:ACD1 79 -  -  -  	ld a,c;loops to skip
   31 D1:ACD2 C9 -  -  -  	ret 
   32 D1:ACD3 -  -  -  -  
   33 D1:ACD3 -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:ACD3 -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:ACD3 1B -  -  -  	dec de
   36 D1:ACD4 01 00 00 00 	ld bc,0
   37 D1:ACD8 4F -  -  -  	ld c,a ;line to draw
   38 D1:ACD9 D5 -  -  -  	push de ;save vram 
   39 D1:ACDA 11 00 00 00 	ld de,0
   40 D1:ACDE E5 -  -  -  	push hl
   41 D1:ACDF 5E -  -  -  	ld e,(hl);height
   42 D1:ACE0 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:ACE1 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:ACE2 23 -  -  -  	inc hl 
   45 D1:ACE3 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:ACE4 E1 -  -  -  	pop hl;start of data
   47 D1:ACE5 19 -  -  -  	add hl,de
   48 D1:ACE6 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:ACE7 D1 -  -  -  	pop de;back to vram
   50 D1:ACE8 79 -  -  -  	ld a,c;loops to skip
   51 D1:ACE9 C9 -  -  -  	ret 
   52 D1:ACEA -  -  -  -  
   53 D1:ACEA -  -  -  -  
   54 D1:ACEA -  -  -  -  
   55 D1:ACEA -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:ACEA 3C -  -  -  	inc a 
   57 D1:ACEB -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:ACEB -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:ACEB CD B0 AC D1 	call setup_sprite_bottom_cut
   60 D1:ACEF 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:ACF0 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:ACF1 EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:ACF2 C3 39 AD D1 	jp dfgs_loop
   64 D1:ACF6 -  -  -  -  
   65 D1:ACF6 -  -  -  -  
   66 D1:ACF6 -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:ACF6 -  -  -  -  draw_fast_sprite_single_line:
   68 D1:ACF6 B7 -  -  -  	or a 
   69 D1:ACF7 CA EA AC D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:ACFB -  -  -  -  	;we know a is not 0 here 
   71 D1:ACFB CD D3 AC D1 	call setup_sprite_single_line
   72 D1:ACFF -  -  -  -  	
   73 D1:ACFF C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AD00 01 00 00 00 	ld bc,0
   75 D1:AD04 -  -  -  -  	
   76 D1:AD04 C3 11 AD D1 	jp draw_fast_sprite_top_loop 
   77 D1:AD08 -  -  -  -  
   78 D1:AD08 -  -  -  -  
   79 D1:AD08 -  -  -  -  
   80 D1:AD08 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (1 indexed)
   81 D1:AD08 -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AD08 CD BD AC D1 	call setup_sprite_top_cut
   83 D1:AD0C C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AD0D 01 00 00 00 	ld bc,0 
   85 D1:AD11 -  -  -  -  	
   86 D1:AD11 -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AD11 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AD12 EB -  -  -  	ex de,hl;hl is vram
   89 D1:AD13 09 -  -  -  	add hl,bc
   90 D1:AD14 EB -  -  -  	ex de,hl;hl is data
   91 D1:AD15 23 -  -  -  	inc hl
   92 D1:AD16 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AD17 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AD18 EB -  -  -  	ex de,hl;hl is vram
   95 D1:AD19 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AD1A 13 -  -  -  	inc de
   97 D1:AD1B EB -  -  -  	ex de,hl;hl is data
   98 D1:AD1C 3D -  -  -  	dec a
   99 D1:AD1D C2 11 AD D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AD21 -  -  -  -  	
  101 D1:AD21 -  -  -  -  	
  102 D1:AD21 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AD22 78 -  -  -  	ld a,b
  104 D1:AD23 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AD24 -  -  -  -  		
  106 D1:AD24 01 00 00 00 	ld bc,0
  107 D1:AD28 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AD29 EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AD2A C3 39 AD D1 	jp dfgs_loop
  110 D1:AD2E -  -  -  -  
  111 D1:AD2E -  -  -  -  
  112 D1:AD2E -  -  -  -  ;de = vram , hl = data
  113 D1:AD2E -  -  -  -  draw_fast_sprite_full:
  114 D1:AD2E 1B -  -  -  	dec de
  115 D1:AD2F 01 00 00 00 	ld bc,0
  116 D1:AD33 4E -  -  -  	ld c,(hl);height
  117 D1:AD34 09 -  -  -  	add hl,bc
  118 D1:AD35 7E -  -  -  	ld a,(hl);total loops
  119 D1:AD36 23 -  -  -  	inc hl
  120 D1:AD37 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AD38 EB -  -  -  	ex de,hl
  122 D1:AD39 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AD39 -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AD39 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AD3A EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AD3B 23 -  -  -  	inc hl
  127 D1:AD3C 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AD3D 23 -  -  -  	inc hl
  129 D1:AD3E ED B0 -  -  	ldir
  130 D1:AD40 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AD41 EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AD42 3D -  -  -  	dec a
  133 D1:AD43 C2 39 AD D1 	jp nz,dfgs_loop
  134 D1:AD47 C9 -  -  -  	ret
  135 D1:AD48 -  -  -  -  	
  136 D1:AD48 -  -  -  -  	
  137 D1:AD48 -  -  -  -  	
  138 D1:AD48 -  -  -  -  	
  139 D1:AD48 -  -  -  -  
  140 D1:AD48 -  -  -  -  
  141 D1:AD48 -  -  -  -  ;hl = data, de = vram
  142 D1:AD48 -  -  -  -  draw_slow_sprite_full:
  143 D1:AD48 01 00 00 00 	ld bc,0
  144 D1:AD4C 4E -  -  -  	ld c,(hl);height
  145 D1:AD4D 09 -  -  -  	add hl,bc
  146 D1:AD4E 7E -  -  -  	ld a,(hl);num loops
  147 D1:AD4F 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AD50 D9 -  -  -  	exx;into shadow 
  149 D1:AD51 47 -  -  -  	ld b,a ;number of loops
  150 D1:AD52 -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AD52 -  -  -  -  dsfgs_line_loop:
  152 D1:AD52 D9 -  -  -  	exx;out of shadow
  153 D1:AD53 23 -  -  -  	inc hl;gap length
  154 D1:AD54 4E -  -  -  	ld c,(hl);gap length
  155 D1:AD55 EB -  -  -  	ex de,hl;hl is vram
  156 D1:AD56 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AD57 EB -  -  -  	ex de,hl;hl is data
  158 D1:AD58 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AD59 1A -  -  -  	ld a,(de);vram data
  160 D1:AD5A A6 -  -  -  	and (hl)
  161 D1:AD5B 23 -  -  -  	inc hl;pixel data
  162 D1:AD5C B6 -  -  -  	or (hl)
  163 D1:AD5D 12 -  -  -  	ld (de),a
  164 D1:AD5E 23 -  -  -  	inc hl;ldir length
  165 D1:AD5F -  -  -  -  	
  166 D1:AD5F 13 -  -  -  	inc de;move to next pixel
  167 D1:AD60 -  -  -  -  	
  168 D1:AD60 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AD61 23 -  -  -  	inc hl;data
  170 D1:AD62 4F -  -  -  	ld c,a
  171 D1:AD63 B7 -  -  -  	or a
  172 D1:AD64 CA 6A AD D1 	jp z,dsfgs_ldir_skip
  173 D1:AD68 ED B0 -  -  	ldir
  174 D1:AD6A -  -  -  -  dsfgs_ldir_skip:
  175 D1:AD6A 1A -  -  -  	ld a,(de);vram data
  176 D1:AD6B A6 -  -  -  	and (hl)
  177 D1:AD6C 23 -  -  -  	inc hl;pixel data
  178 D1:AD6D B6 -  -  -  	or (hl)
  179 D1:AD6E 12 -  -  -  	ld (de),a
  180 D1:AD6F -  -  -  -  	
  181 D1:AD6F D9 -  -  -  	exx ;into shadow
  182 D1:AD70 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AD72 D9 -  -  -  	exx ;out 
  184 D1:AD73 C9 -  -  -  	ret
  185 D1:AD74 -  -  -  -  
  186 D1:AD74 -  -  -  -  
  187 D1:AD74 -  -  -  -  
  188 D1:AD74 -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AD74 -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AD74 -  -  -  -  
  191 D1:AD74 B7 -  -  -  	or a 
  192 D1:AD75 CA B2 AD D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AD79 -  -  -  -  	;we know a is not 0 here
  194 D1:AD79 CD D3 AC D1 	call setup_sprite_single_line
  195 D1:AD7D C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AD7E 01 00 00 00 	ld bc,0
  197 D1:AD82 -  -  -  -  	
  198 D1:AD82 C3 8F AD D1 	jp slow_sprite_data_traverse 
  199 D1:AD86 -  -  -  -  	
  200 D1:AD86 -  -  -  -  
  201 D1:AD86 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:AD86 -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:AD86 CD BD AC D1 	call setup_sprite_top_cut
  204 D1:AD8A C5 -  -  -  	push bc;save total and skipped loops
  205 D1:AD8B 01 00 00 00 	ld bc,0
  206 D1:AD8F -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:AD8F -  -  -  -  slow_sprite_data_traverse:
  208 D1:AD8F 4E -  -  -  	ld c,(hl);gap length
  209 D1:AD90 EB -  -  -  	ex de,hl;hl is vram
  210 D1:AD91 09 -  -  -  	add hl,bc
  211 D1:AD92 EB -  -  -  	ex de,hl
  212 D1:AD93 -  -  -  -  	
  213 D1:AD93 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:AD94 23 -  -  -  	inc hl
  215 D1:AD95 23 -  -  -  	inc hl;ldir length
  216 D1:AD96 4E -  -  -  	ld c,(hl)
  217 D1:AD97 09 -  -  -  	add hl,bc
  218 D1:AD98 EB -  -  -  	ex de,hl
  219 D1:AD99 09 -  -  -  	add hl,bc
  220 D1:AD9A EB -  -  -  	ex de,hl
  221 D1:AD9B 13 -  -  -  	inc de;inc for leading pix 
  222 D1:AD9C 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:AD9D 23 -  -  -  	inc hl
  224 D1:AD9E 23 -  -  -  	inc hl;gap length
  225 D1:AD9F -  -  -  -  	
  226 D1:AD9F 3D -  -  -  	dec a 
  227 D1:ADA0 C2 8F AD D1 	jp nz,slow_sprite_data_traverse
  228 D1:ADA4 -  -  -  -  
  229 D1:ADA4 -  -  -  -  
  230 D1:ADA4 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:ADA5 78 -  -  -  	ld a,b
  232 D1:ADA6 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:ADA7 01 00 00 00 	ld bc,0;clear bc 
  234 D1:ADAB 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:ADAC D9 -  -  -  	exx ;toshadow
  236 D1:ADAD 47 -  -  -  	ld b,a 
  237 D1:ADAE C3 52 AD D1 	jp dsfgs_line_loop
  238 D1:ADB2 -  -  -  -  	
  239 D1:ADB2 -  -  -  -  	
  240 D1:ADB2 -  -  -  -  	
  241 D1:ADB2 -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:ADB2 3C -  -  -  	inc a 
  243 D1:ADB3 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:ADB3 -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:ADB3 -  -  -  -  
  246 D1:ADB3 CD B0 AC D1 	call setup_sprite_bottom_cut
  247 D1:ADB7 -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:ADB7 D9 -  -  -  	exx ;toshadow
  249 D1:ADB8 47 -  -  -  	ld b,a
  250 D1:ADB9 C3 52 AD D1 	jp dsfgs_line_loop
  251 D1:ADBD -  -  -  -  
  252 D1:ADBD -  -  -  -  
  253 D1:ADBD -  -  -  -  
  254 D1:ADBD -  -  -  -  
  255 D1:ADBD -  -  -  -  
  256 D1:ADBD -  -  -  -  
  257 D1:ADBD -  -  -  -  
  258 D1:ADBD -  -  -  -  
  259 D1:ADBD -  -  -  -  
  260 D1:ADBD -  -  -  -  
  261 D1:ADBD -  -  -  -  
  262 D1:ADBD -  -  -  -  
  263 D1:ADBD -  -  -  -  
  264 D1:ADBD -  -  -  -  
  265 D1:ADBD -  -  -  -  
  266 D1:ADBD -  -  -  -  
  267 D1:ADBD -  -  -  -  
  268 D1:ADBD -  -  -  -  
  269 D1:ADBD -  -  -  -  
  270 D1:ADBD -  -  -  -  
  271 D1:ADBD -  -  -  -  
  272 D1:ADBD -  -  -  -  
  273 D1:ADBD -  -  -  -  
  274 D1:ADBD -  -  -  -  
  275 D1:ADBD -  -  -  -  
  276 D1:ADBD -  -  -  -  
  277 D1:ADBD -  -  -  -  
  278 D1:ADBD -  -  -  -  
  279 D1:ADBD -  -  -  -  
  280 D1:ADBD -  -  -  -  
  281 D1:ADBD -  -  -  -  
  282 D1:ADBD -  -  -  -  
  283 D1:ADBD -  -  -  -  
  284 D1:ADBD -  -  -  -  
  285 D1:ADBD -  -  -  -  
  286 D1:ADBD -  -  -  -  
  287 D1:ADBD -  -  -  -   
  288 D1:ADBD -  -  -  -  
  289 D1:ADBD -  -  -  -  
  290 D1:ADBD -  -  -  -  
  291 D1:ADBD -  -  -  -  
  292 D1:ADBD -  -  -  -  
  293 D1:ADBD -  -  -  -  
  294 D1:ADBD -  -  -  -  
  295 D1:ADBD -  -  -  -  
  296 D1:ADBD -  -  -  -  
  297 D1:ADBD -  -  -  -  
  298 D1:ADBD -  -  -  -  
  299 D1:ADBD -  -  -  -  
  300 D1:ADBD -  -  -  -  
  301 D1:ADBD -  -  -  -  
  302 D1:ADBD -  -  -  -  
  303 D1:ADBD -  -  -  -  
  304 D1:ADBD -  -  -  -  
  305 D1:ADBD -  -  -  -  
  306 D1:ADBD -  -  -  -  
  307 D1:ADBD -  -  -  -  
  308 D1:ADBD -  -  -  -  
  309 D1:ADBD -  -  -  -  
  310 D1:ADBD -  -  -  -  
  311 D1:ADBD -  -  -  -  
  312 D1:ADBD -  -  -  -  
  313 D1:ADBD -  -  -  -  
  314 D1:ADBD -  -  -  -  
  315 D1:ADBD -  -  -  -  
  316 D1:ADBD -  -  -  -  
  317 D1:ADBD -  -  -  -  
  318 D1:ADBD -  -  -  -  
  319 D1:ADBD -  -  -  -  
  320 D1:ADBD -  -  -  -  
  321 D1:ADBD -  -  -  -  
  322 D1:ADBD -  -  -  -  
  323 D1:ADBD -  -  -  -  
  324 D1:ADBD -  -  -  -  
  325 D1:ADBD -  -  -  -  
  326 D1:ADBD -  -  -  -  
  327 D1:ADBD -  -  -  -  
  328 D1:ADBD -  -  -  -  
  329 D1:ADBD -  -  -  -  
  330 D1:ADBD -  -  -  -  
  331 D1:ADBD -  -  -  -  
  332 D1:ADBD -  -  -  -  
  333 D1:ADBD -  -  -  -  
  334 D1:ADBD -  -  -  -  
  335 D1:ADBD -  -  -  -  
  336 D1:ADBD -  -  -  -  
  337 D1:ADBD -  -  -  -  
  338 D1:ADBD -  -  -  -  
  339 D1:ADBD -  -  -  -  
  340 D1:ADBD -  -  -  -  
  341 D1:ADBD -  -  -  -  
  342 D1:ADBD -  -  -  -  
  343 D1:ADBD -  -  -  -  	
  344 D1:ADBD -  -  -  -  	
Listing for file "ascent.asm"
  280 D1:ADBD -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:ADBD -  -  -  -  
    2 D1:ADBD -  -  -  -  
    3 D1:ADBD -  -  -  -  
    4 D1:ADBD -  -  -  -  
    5 D1:ADBD -  -  -  -  
    6 D1:ADBD -  -  -  -  
    7 D1:ADBD -  -  -  -  
    8 D1:ADBD -  -  -  -  
    9 D1:ADBD -  -  -  -  ;REGISTER USEAGE
   10 D1:ADBD -  -  -  -  ;HL = sprite color data byte
   11 D1:ADBD -  -  -  -  ;C = bit selector for color data 
   12 D1:ADBD -  -  -  -  ;HL' = alpha data byte
   13 D1:ADBD -  -  -  -  ;C' = bit selector for alpha data
   14 D1:ADBD -  -  -  -  ;DE = output sprite data location
   15 D1:ADBD -  -  -  -  ;DE' = loops/line write location 
   16 D1:ADBD -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:ADBD -  -  -  -  
   18 D1:ADBD -  -  -  -  ;SETUP ----------------
   19 D1:ADBD -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:ADBD -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:ADBD -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:ADBD -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:ADBD -  -  -  -  ;------------
   24 D1:ADBD -  -  -  -  
   25 D1:ADBD -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:ADBD -  -  -  -  
   27 D1:ADBD -  -  -  -  
   28 D1:ADBD -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:ADBD -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:ADBD -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:ADBD -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:ADBD -  -  -  -  ;write pixel mask and color data
   33 D1:ADBD -  -  -  -  
   34 D1:ADBD -  -  -  -  ;LDIR ROUTINE
   35 D1:ADBD -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:ADBD -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:ADBD -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:ADBD -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:ADBD -  -  -  -  ;IF FAST, GOTO END
   40 D1:ADBD -  -  -  -  
   41 D1:ADBD -  -  -  -  ;trailing pixels
   42 D1:ADBD -  -  -  -  ;11,10,01 in alpha data 
   43 D1:ADBD -  -  -  -  
   44 D1:ADBD -  -  -  -  ;END AND RESTART
   45 D1:ADBD -  -  -  -  ;Increment loops/line counter
   46 D1:ADBD -  -  -  -  ;check if end of line and write loops/line
   47 D1:ADBD -  -  -  -  
   48 D1:ADBD -  -  -  -  ;store registers and check if interrupt is required
   49 D1:ADBD -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:ADBD -  -  -  -  ;otherwise return to start of loop
   51 D1:ADBD -  -  -  -  
   52 D1:ADBD -  -  -  -  ;
   53 D1:ADBD -  -  -  -  
   54 D1:ADBD -  -  -  -  
   55 D1:ADBD -  -  -  -  
   56 D1:ADBD -  -  -  -  
   57 D1:ADBD -  -  -  -  
   58 D1:ADBD -  -  -  -  
   59 D1:ADBD -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:ADBD -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:ADBD -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:ADBD CB 09 -  -  	rrc c;rlc flip
   63 D1:ADBF D0 -  -  -  	ret nc
   64 D1:ADC0 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:ADC0 23 -  -  -  	inc hl;dec hl flip
   66 D1:ADC1 C9 -  -  -  	ret
   67 D1:ADC2 -  -  -  -  
   68 D1:ADC2 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:ADC2 -  -  -  -  
   70 D1:ADC2 -  -  -  -  ;IN SHADOW
   71 D1:ADC2 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:ADC2 -  -  -  -  ;C IS BITMASK
   73 D1:ADC2 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:ADC2 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:ADC2 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:ADC2 -  -  -  -  ; next call returns first bit in next row  
   77 D1:ADC2 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:ADC2 3E A2 -  -  	ld a,$A2;test 
   79 D1:ADC4 CD 1C AA D1 	call write_a_to_ram
   80 D1:ADC8 79 -  -  -  	ld a,c 
   81 D1:ADC9 CD 1C AA D1 	call write_a_to_ram 
   82 D1:ADCD 7E -  -  -  	ld a,(hl)
   83 D1:ADCE CD 1C AA D1 	call write_a_to_ram
   84 D1:ADD2 -  -  -  -  	
   85 D1:ADD2 37 -  -  -  	scf 
   86 D1:ADD3 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:ADD3 DA E6 AD D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:ADD7 -  -  -  -  
   89 D1:ADD7 3E A3 -  -  	ld a,$A3
   90 D1:ADD9 CD 1C AA D1 	call write_a_to_ram 
   91 D1:ADDD -  -  -  -  	
   92 D1:ADDD 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:ADDF 32 83 AE D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:ADE3 -  -  -  -  	
   95 D1:ADE3 3E 00 -  -  	ld a,0
   96 D1:ADE5 C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:ADE6 -  -  -  -  
   98 D1:ADE6 -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:ADE6 -  -  -  -  	
  100 D1:ADE6 -  -  -  -  	
  101 D1:ADE6 -  -  -  -  	
  102 D1:ADE6 -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:ADE6 37 -  -  -  	scf
  104 D1:ADE7 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:ADE7 DA FA AD D1 	jp c,sdcomp_bit_offset_skip
  106 D1:ADEB 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:ADED 32 E7 AD D1 	ld (sdcomp_bit_offset),a
  108 D1:ADF1 3E A9 -  -  	ld a,$A9
  109 D1:ADF3 CD 1C AA D1 	call write_a_to_ram
  110 D1:ADF7 3E 00 -  -  	ld a,0
  111 D1:ADF9 C9 -  -  -  	ret ;return 0 first bit
  112 D1:ADFA -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:ADFA -  -  -  -  		
  114 D1:ADFA -  -  -  -  	;ld a,$EF
  115 D1:ADFA -  -  -  -  	;call write_a_to_ram
  116 D1:ADFA 7E -  -  -  	ld a,(hl)
  117 D1:ADFB -  -  -  -  	;push af 
  118 D1:ADFB -  -  -  -  	;call write_a_to_ram
  119 D1:ADFB -  -  -  -  	;ld a,c
  120 D1:ADFB -  -  -  -  	;call write_a_to_ram
  121 D1:ADFB -  -  -  -  	;pop af 
  122 D1:ADFB -  -  -  -  	
  123 D1:ADFB -  -  -  -  	
  124 D1:ADFB A1 -  -  -  	and c 
  125 D1:ADFC CD BD AD D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AE00 -  -  -  -  	;a holds data to return
  127 D1:AE00 CD 1C AA D1 	call write_a_to_ram
  128 D1:AE04 37 -  -  -  	scf 
  129 D1:AE05 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AE05 DA 0B AE D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AE09 3E 01 -  -  	ld a,1
  132 D1:AE0B -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AE0B -  -  -  -  	
  134 D1:AE0B -  -  -  -  	
  135 D1:AE0B 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AE0C 3D -  -  -  	dec a 
  137 D1:AE0D -  -  -  -  	;call write_a_to_ram
  138 D1:AE0D C2 49 AE D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AE11 -  -  -  -  	
  140 D1:AE11 -  -  -  -  	;HAve read last bit in line  
  141 D1:AE11 -  -  -  -  	
  142 D1:AE11 3E AC -  -  	ld a,$AC;Test
  143 D1:AE13 CD 1C AA D1 	call write_a_to_ram;Test
  144 D1:AE17 -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AE17 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AE17 3E 00 -  -  	ld a,0
  147 D1:AE19 3D -  -  -  	dec a 
  148 D1:AE1A 32 18 AE D1 	ld (sdcomp_lines_remaining),a
  149 D1:AE1E -  -  -  -  	;call write_a_to_ram
  150 D1:AE1E C2 2E AE D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AE22 -  -  -  -  	;end of last line reached 
  152 D1:AE22 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AE24 32 09 B1 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AE28 3E E9 -  -  	ld a,$E9
  155 D1:AE2A CD 1C AA D1 	call write_a_to_ram;TEST 
  156 D1:AE2E -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AE2E -  -  -  -  	
  158 D1:AE2E -  -  -  -  
  159 D1:AE2E -  -  -  -  	
  160 D1:AE2E 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AE30 32 E4 B0 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AE34 32 D3 AD D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AE38 -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AE38 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AE39 -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AE39 DA 43 AE D1 	jp c,sdcomp_offset_1_skip
  167 D1:AE3D 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AE3F 32 E7 AD D1 	ld (sdcomp_bit_offset),a
  169 D1:AE43 -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AE43 -  -  -  -  	
  171 D1:AE43 -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AE43 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AE45 -  -  -  -  	
  174 D1:AE45 CD 1C AA D1 	call write_a_to_ram
  175 D1:AE49 -  -  -  -  	
  176 D1:AE49 -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AE49 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AE4A -  -  -  -  	
  179 D1:AE4A F5 -  -  -  	push af ;testing
  180 D1:AE4B 3E A0 -  -  	ld a,$A0
  181 D1:AE4D CD 1C AA D1 	call write_a_to_ram
  182 D1:AE51 F1 -  -  -  	pop af 
  183 D1:AE52 CD 1C AA D1 	call write_a_to_ram
  184 D1:AE56 -  -  -  -  	
  185 D1:AE56 C9 -  -  -  	ret 
  186 D1:AE57 -  -  -  -  	
  187 D1:AE57 -  -  -  -  
  188 D1:AE57 -  -  -  -  
  189 D1:AE57 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AE57 -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AE57 3E A1 -  -  	ld a,$A1
  192 D1:AE59 CD 1C AA D1 	call write_a_to_ram
  193 D1:AE5D -  -  -  -  	
  194 D1:AE5D 79 -  -  -  	ld a,c 
  195 D1:AE5E CD 1C AA D1 	call write_a_to_ram 
  196 D1:AE62 7E -  -  -  	ld a,(hl)
  197 D1:AE63 CD 1C AA D1 	call write_a_to_ram
  198 D1:AE67 -  -  -  -  	
  199 D1:AE67 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AE69 32 83 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AE6D -  -  -  -  	
  202 D1:AE6D CD C2 AD D1 	call sdcomp_get_next_alpha
  203 D1:AE71 B7 -  -  -  	or a 
  204 D1:AE72 CA 80 AE D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AE76 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AE78 CD 1C AA D1 	call write_a_to_ram
  207 D1:AE7C C3 95 AE D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AE80 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AE80 3E 00 -  -  	ld a,0
  210 D1:AE82 -  -  -  -  	
  211 D1:AE82 37 -  -  -  	scf 
  212 D1:AE83 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AE83 DA 95 AE D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AE87 F5 -  -  -  	push af 
  215 D1:AE88 -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AE88 -  -  -  -  	
  217 D1:AE88 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AE8A 32 EB B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AE8E -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AE8E 3E A4 -  -  	ld a,$A4
  221 D1:AE90 CD 1C AA D1 	call write_a_to_ram
  222 D1:AE94 F1 -  -  -  	pop af 
  223 D1:AE95 -  -  -  -  	
  224 D1:AE95 -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AE95 -  -  -  -  
  226 D1:AE95 -  -  -  -  	
  227 D1:AE95 32 AB AE D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AE99 -  -  -  -  	
  229 D1:AE99 CD C2 AD D1 	call sdcomp_get_next_alpha
  230 D1:AE9D B7 -  -  -  	or a 
  231 D1:AE9E CA A8 AE D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AEA2 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AEA4 C3 AA AE D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AEA8 -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AEA8 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AEAA -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AEAA -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AEAA F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AEAC -  -  -  -  	
  240 D1:AEAC C9 -  -  -  	ret 
  241 D1:AEAD -  -  -  -  	
  242 D1:AEAD -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AEAD -  -  -  -  
  244 D1:AEAD -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AEAD -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AEAD CD B6 AE D1 	call sdcomp_get_next_color
  247 D1:AEB1 0F -  -  -  	rrca 
  248 D1:AEB2 0F -  -  -  	rrca 
  249 D1:AEB3 0F -  -  -  	rrca 
  250 D1:AEB4 0F -  -  -  	rrca
  251 D1:AEB5 C9 -  -  -  	ret 
  252 D1:AEB6 -  -  -  -  
  253 D1:AEB6 -  -  -  -  
  254 D1:AEB6 -  -  -  -  
  255 D1:AEB6 -  -  -  -  ;bit orders
  256 D1:AEB6 -  -  -  -  ;	noflip   flip 
  257 D1:AEB6 -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AEB6 -  -  -  -  ;3bpp 210	 012
  259 D1:AEB6 -  -  -  -  ;2bpp 10	 01
  260 D1:AEB6 -  -  -  -  ;1bpp 0		 0
  261 D1:AEB6 -  -  -  -  
  262 D1:AEB6 -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AEB6 -  -  -  -  sdcomp_get_next_color:
  264 D1:AEB6 D5 -  -  -  	push de ;save data write location
  265 D1:AEB7 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AEB9 -  -  -  -  	
  267 D1:AEB9 37 -  -  -  	scf
  268 D1:AEBA -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AEBA D2 04 AF D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AEBE -  -  -  -  	
  271 D1:AEBE -  -  -  -  	;ld a,$C1
  272 D1:AEBE -  -  -  -  	;call write_a_to_ram
  273 D1:AEBE -  -  -  -  	
  274 D1:AEBE 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AEBF -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AEBF A1 -  -  -  	and c
  277 D1:AEC0 -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AEC0 CD BD AD D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:AEC4 B7 -  -  -  	or a
  280 D1:AEC5 CA CB AE D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:AEC9 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:AEC9 CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:AECB -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:AECB -  -  -  -  	
  285 D1:AECB 37 -  -  -  	scf
  286 D1:AECC -  -  -  -  sdcomp_1bpc .equ $
  287 D1:AECC D2 04 AF D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:AED0 -  -  -  -  
  289 D1:AED0 -  -  -  -  	;ld a,$C2
  290 D1:AED0 -  -  -  -  	;call write_a_to_ram
  291 D1:AED0 -  -  -  -  	
  292 D1:AED0 7E -  -  -  	ld a,(hl)
  293 D1:AED1 -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:AED1 A1 -  -  -  	and c 
  295 D1:AED2 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:AED2 CD BD AD D1 	call sdcomp_next_in_bitstream
  297 D1:AED6 B7 -  -  -  	or a
  298 D1:AED7 CA DD AE D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:AEDB -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:AEDB CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:AEDD -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:AEDD -  -  -  -  	
  303 D1:AEDD 37 -  -  -  	scf
  304 D1:AEDE -  -  -  -  sdcomp_2bpc .equ $ ;if 2bpc jump to end
  305 D1:AEDE D2 04 AF D1 	jp nc,sdcomp_get_color_from_index
  306 D1:AEE2 -  -  -  -  	
  307 D1:AEE2 7E -  -  -  	ld a,(hl)
  308 D1:AEE3 A1 -  -  -  	and c 
  309 D1:AEE4 CD BD AD D1 	call sdcomp_next_in_bitstream
  310 D1:AEE8 B7 -  -  -  	or a
  311 D1:AEE9 CA EF AE D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:AEED -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:AEED CB D3 -  -  	set 2,e 
  314 D1:AEEF -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:AEEF -  -  -  -  	
  316 D1:AEEF 37 -  -  -  	scf
  317 D1:AEF0 -  -  -  -  sdcomp_3bpc .equ $
  318 D1:AEF0 D2 04 AF D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:AEF4 -  -  -  -  
  320 D1:AEF4 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:AEF4 7E -  -  -  	ld a,(hl)
  322 D1:AEF5 A1 -  -  -  	and c 
  323 D1:AEF6 CD BD AD D1 	call sdcomp_next_in_bitstream
  324 D1:AEFA B7 -  -  -  	or a
  325 D1:AEFB CA 01 AF D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:AEFF -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:AEFF CB DB -  -  	set 3,e 
  328 D1:AF01 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:AF01 -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:AF01 7B -  -  -  	ld a,e 
  331 D1:AF02 D1 -  -  -  	pop de 
  332 D1:AF03 C9 -  -  -  	ret 
  333 D1:AF04 -  -  -  -  
  334 D1:AF04 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:AF04 -  -  -  -  	
  336 D1:AF04 -  -  -  -  	;ld a,$DD
  337 D1:AF04 -  -  -  -  	;call write_a_to_ram
  338 D1:AF04 -  -  -  -  	;ld a,e 
  339 D1:AF04 -  -  -  -  	;call write_a_to_ram
  340 D1:AF04 -  -  -  -  	
  341 D1:AF04 -  -  -  -  	
  342 D1:AF04 CB 53 -  -  	bit 2,e 
  343 D1:AF06 CA 28 AF D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:AF0A -  -  -  -  	
  345 D1:AF0A -  -  -  -  	;Bit 2 = 1 
  346 D1:AF0A CB 4B -  -  	bit 1,e 
  347 D1:AF0C CA 1C AF D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:AF10 -  -  -  -  
  349 D1:AF10 -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:AF10 -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:AF10 3E 00 -  -  	ld a,0
  352 D1:AF12 CB 43 -  -  	bit 0,e 
  353 D1:AF14 CA 56 AF D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:AF18 C3 46 AF D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:AF1C -  -  -  -  
  356 D1:AF1C -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:AF1C -  -  -  -  	;2 = 1 1 = 0 
  358 D1:AF1C -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:AF1C 3E 00 -  -  	ld a,0
  360 D1:AF1E CB 43 -  -  	bit 0,e 
  361 D1:AF20 CA 56 AF D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:AF24 C3 46 AF D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:AF28 -  -  -  -  	
  364 D1:AF28 -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:AF28 -  -  -  -  	;bit 2 was 0 
  366 D1:AF28 CB 4B -  -  	bit 1,e 
  367 D1:AF2A CA 3A AF D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:AF2E -  -  -  -  	
  369 D1:AF2E -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:AF2E -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:AF2E 3E 00 -  -  	ld a,0
  372 D1:AF30 CB 43 -  -  	bit 0,e 
  373 D1:AF32 CA 56 AF D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:AF36 C3 46 AF D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:AF3A -  -  -  -  	
  376 D1:AF3A -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:AF3A -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:AF3A -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:AF3A 3E 00 -  -  	ld a,0
  380 D1:AF3C -  -  -  -  	
  381 D1:AF3C CB 43 -  -  	bit 0,e 
  382 D1:AF3E CA 56 AF D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:AF42 C3 46 AF D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:AF46 -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:AF46 E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:AF48 D1 -  -  -  	pop de 
  387 D1:AF49 -  -  -  -  	
  388 D1:AF49 F5 -  -  -  	push af 
  389 D1:AF4A 3E C0 -  -  	ld a,$C0
  390 D1:AF4C CD 1C AA D1 	call write_a_to_ram
  391 D1:AF50 F1 -  -  -  	pop af 
  392 D1:AF51 CD 1C AA D1 	call write_a_to_ram
  393 D1:AF55 -  -  -  -  	
  394 D1:AF55 C9 -  -  -  	ret 
  395 D1:AF56 -  -  -  -  	
  396 D1:AF56 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:AF56 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:AF58 0F -  -  -  	rrca 
  399 D1:AF59 0F -  -  -  	rrca 
  400 D1:AF5A 0F -  -  -  	rrca 
  401 D1:AF5B 0F -  -  -  	rrca 
  402 D1:AF5C D1 -  -  -  	pop de 
  403 D1:AF5D -  -  -  -  	
  404 D1:AF5D F5 -  -  -  	push af 
  405 D1:AF5E 3E C0 -  -  	ld a,$C0
  406 D1:AF60 CD 1C AA D1 	call write_a_to_ram
  407 D1:AF64 F1 -  -  -  	pop af 
  408 D1:AF65 CD 1C AA D1 	call write_a_to_ram
  409 D1:AF69 -  -  -  -  	
  410 D1:AF69 C9 -  -  -  	ret 
  411 D1:AF6A -  -  -  -  
  412 D1:AF6A -  -  -  -  
  413 D1:AF6A -  -  -  -  
  414 D1:AF6A -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:AF6A -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:AF6A -  -  -  -  ;in shadow ,destroys a
  417 D1:AF6A -  -  -  -  sdcomp_traverse_line_data:
  418 D1:AF6A D9 -  -  -  	exx ;OUT 
  419 D1:AF6B -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:AF6B 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:AF6F -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:AF6F 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:AF71 D9 -  -  -  	exx;toshadow 
  424 D1:AF72 -  -  -  -  	
  425 D1:AF72 -  -  -  -  	;load end of previous alpha data line 
  426 D1:AF72 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:AF72 21 00 00 00 	ld hl,0
  428 D1:AF76 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:AF76 0E 00 -  -  	ld c,0
  430 D1:AF78 -  -  -  -  sdcomp_traverse_initial:
  431 D1:AF78 D5 -  -  -  	push de
  432 D1:AF79 -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:AF79 1E 00 -  -  	ld e, 0
  434 D1:AF7B -  -  -  -  	;e holds sprite width 
  435 D1:AF7B -  -  -  -  	
  436 D1:AF7B -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:AF7B -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:AF7B CB 09 -  -  	rrc c 
  439 D1:AF7D D2 82 AF D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:AF81 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:AF82 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:AF82 7E -  -  -  	ld a,(hl)
  443 D1:AF83 A1 -  -  -  	and c ;read alpha data 
  444 D1:AF84 -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:AF84 CA 9A AF D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:AF88 D9 -  -  -  	exx;out of shadow 
  447 D1:AF89 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  448 D1:AF89 CB 09 -  -  	rrc c ;rotate mask
  449 D1:AF8B -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:AF8B CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:AF8D -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:AF8D CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:AF8F -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:AF8F CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:AF91 -  -  -  -  	
  456 D1:AF91 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:AF91 79 -  -  -  	ld a,c
  458 D1:AF92 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:AF92 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:AF94 CA 99 AF D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:AF98 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:AF99 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:AF99 D9 -  -  -  	exx ;toshadow
  464 D1:AF9A -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:AF9A 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:AF9B C2 7B AF D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:AF9F D1 -  -  -  	pop de  ;back to write location 
  468 D1:AFA0 -  -  -  -  	;set new end of line pointers 
  469 D1:AFA0 -  -  -  -  	
  470 D1:AFA0 3E BB -  -  	ld a,$BB 
  471 D1:AFA2 CD 1C AA D1 	call write_a_to_ram 
  472 D1:AFA6 7E -  -  -  	ld a,(hl) 
  473 D1:AFA7 CD 1C AA D1 	call write_a_to_ram 
  474 D1:AFAB 79 -  -  -  	ld a,c 
  475 D1:AFAC CD 1C AA D1 	call write_a_to_ram 
  476 D1:AFB0 -  -  -  -  	
  477 D1:AFB0 -  -  -  -  	
  478 D1:AFB0 22 73 AF D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:AFB4 79 -  -  -  	ld a,c
  480 D1:AFB5 32 77 AF D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:AFB9 D9 -  -  -  	exx ;out
  482 D1:AFBA 22 6C AF D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:AFBE 79 -  -  -  	ld a,c 
  484 D1:AFBF 32 70 AF D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:AFC3 -  -  -  -  	
  486 D1:AFC3 7E -  -  -  	ld a,(hl) 
  487 D1:AFC4 CD 1C AA D1 	call write_a_to_ram 
  488 D1:AFC8 79 -  -  -  	ld a,c 
  489 D1:AFC9 CD 1C AA D1 	call write_a_to_ram 
  490 D1:AFCD D9 -  -  -  	exx;to shadow 
  491 D1:AFCE C9 -  -  -  	ret
  492 D1:AFCF -  -  -  -  
  493 D1:AFCF -  -  -  -  
  494 D1:AFCF -  -  -  -  
  495 D1:AFCF -  -  -  -  
  496 D1:AFCF -  -  -  -  
  497 D1:AFCF -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  498 D1:AFCF -  -  -  -  sdcomp_write_ldir_data_loop:
  499 D1:AFCF CD B6 AE D1 	call sdcomp_get_next_color
  500 D1:AFD3 47 -  -  -  	ld b,a;first pixel
  501 D1:AFD4 CD AD AE D1 	call sdcomp_get_next_color_leading_nibble
  502 D1:AFD8 B0 -  -  -  	or b
  503 D1:AFD9 -  -  -  -  	
  504 D1:AFD9 -  -  -  -  	
  505 D1:AFD9 12 -  -  -  	ld (de),a;write color data
  506 D1:AFDA 13 -  -  -  	inc de
  507 D1:AFDB D9 -  -  -  	exx;to shadow
  508 D1:AFDC 05 -  -  -  	dec b;ldir length counter
  509 D1:AFDD D9 -  -  -  	exx
  510 D1:AFDE C2 CF AF D1 	jp nz,sdcomp_write_ldir_data_loop
  511 D1:AFE2 C9 -  -  -  	ret
  512 D1:AFE3 -  -  -  -  	
  513 D1:AFE3 -  -  -  -  
  514 D1:AFE3 -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  515 D1:AFE3 -  -  -  -  sdcomp_write_leading_or_end_pixels:
  516 D1:AFE3 D5 -  -  -  	push de ;output location	
  517 D1:AFE4 47 -  -  -  	ld b,a;save for later
  518 D1:AFE5 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  519 D1:AFE7 3E 00 -  -  	ld a,0
  520 D1:AFE9 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  521 D1:AFEB CA F5 AF D1 	jp z,sdcomp_leading_pixel_first_skip
  522 D1:AFEF -  -  -  -  	;has first color
  523 D1:AFEF 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  524 D1:AFF1 CD B6 AE D1 	call sdcomp_get_next_color
  525 D1:AFF5 -  -  -  -  sdcomp_leading_pixel_first_skip:
  526 D1:AFF5 -  -  -  -  	;a is either $00 or $0color1
  527 D1:AFF5 -  -  -  -  	
  528 D1:AFF5 1E FF -  -  	ld e,%11111111;assuming no colors
  529 D1:AFF7 -  -  -  -  	
  530 D1:AFF7 CB 40 -  -  	bit 0,b;check second pixel alpha
  531 D1:AFF9 47 -  -  -  	ld b,a;save for later 
  532 D1:AFFA 3E 00 -  -  	ld a,0
  533 D1:AFFC CA 06 B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  534 D1:B000 -  -  -  -  	;has second color 
  535 D1:B000 CD AD AE D1 	call sdcomp_get_next_color_leading_nibble
  536 D1:B004 -  -  -  -  	;a = color2 0 
  537 D1:B004 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  538 D1:B006 -  -  -  -  	
  539 D1:B006 -  -  -  -  sdcomp_leading_pixel_second_skip:
  540 D1:B006 -  -  -  -  	;a is either 00 or c2 0 
  541 D1:B006 -  -  -  -  	;b is either 00 or 0 c1 
  542 D1:B006 B0 -  -  -  	or b 
  543 D1:B007 47 -  -  -  	ld b,a;final color data
  544 D1:B008 7A -  -  -  	ld a,d 
  545 D1:B009 A3 -  -  -  	and e ;final mask data 
  546 D1:B00A -  -  -  -  	
  547 D1:B00A D1 -  -  -  	pop de;return to pointer 
  548 D1:B00B -  -  -  -  	
  549 D1:B00B 12 -  -  -  	ld (de),a;write mask data 
  550 D1:B00C 13 -  -  -  	inc de 
  551 D1:B00D 78 -  -  -  	ld a,b;color data 
  552 D1:B00E 12 -  -  -  	ld (de),a;write color data 
  553 D1:B00F -  -  -  -  	
  554 D1:B00F -  -  -  -  	
  555 D1:B00F -  -  -  -  	
  556 D1:B00F -  -  -  -  	;call write_a_to_ram
  557 D1:B00F -  -  -  -  	
  558 D1:B00F 13 -  -  -  	inc de 
  559 D1:B010 C9 -  -  -  	ret 
  560 D1:B011 -  -  -  -  
  561 D1:B011 -  -  -  -  
  562 D1:B011 -  -  -  -  
  563 D1:B011 -  -  -  -  ;ENTRY POINT 
  564 D1:B011 -  -  -  -  
  565 D1:B011 -  -  -  -  
  566 D1:B011 -  -  -  -  ;hl = sprite data start, de = main data decompress location
  567 D1:B011 -  -  -  -  sprite_decompress:
  568 D1:B011 -  -  -  -  
  569 D1:B011 -  -  -  -  
  570 D1:B011 -  -  -  -  	;SETUP ===========================================================================================================
  571 D1:B011 -  -  -  -  
  572 D1:B011 -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  573 D1:B011 -  -  -  -  
  574 D1:B011 -  -  -  -  	;HL pointing to flags registers
  575 D1:B011 -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  576 D1:B011 -  -  -  -  	;set bpc mode 
  577 D1:B011 CB 7E -  -  	bit 7,(hl)
  578 D1:B013 C4 1F B3 D1 	call nz,sdcomp_set_4bpc
  579 D1:B017 CB 76 -  -  	bit 6,(hl)
  580 D1:B019 C4 C2 B2 D1 	call nz,sdcomp_set_3bpc 
  581 D1:B01D CB 6E -  -  	bit 5,(hl)
  582 D1:B01F C4 79 B2 D1 	call nz,sdcomp_set_2bpc 
  583 D1:B023 CB 66 -  -  	bit 4,(hl)
  584 D1:B025 C4 52 B2 D1 	call nz,sdcomp_set_1bpc 
  585 D1:B029 CB 5E -  -  	bit 3,(hl)
  586 D1:B02B C4 37 B2 D1 	call nz,sdcomp_set_0bpc 
  587 D1:B02F CB 56 -  -  	bit 2,(hl)
  588 D1:B031 C4 78 B3 D1 	call nz,sdcomp_set_noalpha
  589 D1:B035 -  -  -  -  	
  590 D1:B035 3E 00 -  -  	ld a,0
  591 D1:B037 32 B8 B1 D1 	ld (sdcomp_loops_per_line_counter),a ;reset loops counter
  592 D1:B03B 3E DA -  -  	ld a,%11011010;jp c 
  593 D1:B03D 32 83 AE D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  594 D1:B041 -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  595 D1:B041 -  -  -  -  	
  596 D1:B041 23 -  -  -  	inc hl ;hl points to width in px 
  597 D1:B042 -  -  -  -  	
  598 D1:B042 -  -  -  -  	
  599 D1:B042 7E -  -  -  	ld a,(hl) 
  600 D1:B043 32 7A AF D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  601 D1:B047 32 44 AE D1 	ld (sdcomp_sprite_width_2),a
  602 D1:B04B 47 -  -  -  	ld b,a;width
  603 D1:B04C 08 -  -  -  	ex af,af' ;'
  604 D1:B04D 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  605 D1:B04E 08 -  -  -  	ex af,af' ;' 
  606 D1:B04F -  -  -  -  
  607 D1:B04F -  -  -  -  
  608 D1:B04F -  -  -  -  sdcomp_offset_2 .equ $ 
  609 D1:B04F 00 -  -  -  	nop ;replace with inc b for offset 
  610 D1:B050 -  -  -  -  
  611 D1:B050 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  612 D1:B050 04 -  -  -  	inc b ;round up on odd sprites
  613 D1:B051 CB 38 -  -  	srl b;divide by 2
  614 D1:B053 -  -  -  -  	
  615 D1:B053 -  -  -  -  	
  616 D1:B053 3E A0 -  -  	ld a,160
  617 D1:B055 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  618 D1:B056 32 E9 B0 D1 	ld (sdcomp_gap_btwn_rows),a 
  619 D1:B05A -  -  -  -  	
  620 D1:B05A CD 1C AA D1 	call write_a_to_ram
  621 D1:B05E 3E BE -  -  	ld a,$BE
  622 D1:B060 CD 1C AA D1 	call write_a_to_ram
  623 D1:B064 78 -  -  -  	ld a,b 
  624 D1:B065 CD 1C AA D1 	call write_a_to_ram
  625 D1:B069 -  -  -  -  	
  626 D1:B069 -  -  -  -  	
  627 D1:B069 7E -  -  -  	ld a,(hl);load width again
  628 D1:B06A -  -  -  -  	
  629 D1:B06A 47 -  -  -  	ld b,a 
  630 D1:B06B -  -  -  -  	
  631 D1:B06B -  -  -  -  
  632 D1:B06B 23 -  -  -  	inc hl ;hl points to height 
  633 D1:B06C 7E -  -  -  	ld a,(hl);height
  634 D1:B06D 32 18 AE D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  635 D1:B071 -  -  -  -  	
  636 D1:B071 -  -  -  -  	
  637 D1:B071 -  -  -  -  
  638 D1:B071 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  639 D1:B072 13 -  -  -  	inc de 
  640 D1:B073 -  -  -  -  	
  641 D1:B073 23 -  -  -  	inc hl ;HL points to start of alpha data 
  642 D1:B074 -  -  -  -  
  643 D1:B074 E5 -  -  -  	push hl ;Save alpha data 
  644 D1:B075 -  -  -  -  	
  645 D1:B075 -  -  -  -  	
  646 D1:B075 -  -  -  -  	;Need to find start of color data
  647 D1:B075 -  -  -  -  	;at this point a = height, b = width 
  648 D1:B075 -  -  -  -  	
  649 D1:B075 37 -  -  -  	scf
  650 D1:B076 -  -  -  -  	
  651 D1:B076 -  -  -  -  sdcomp_no_alpha_2 .equ $
  652 D1:B076 D2 8F B0 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  653 D1:B07A -  -  -  -  	
  654 D1:B07A -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  655 D1:B07A -  -  -  -  	
  656 D1:B07A E5 -  -  -  	push hl
  657 D1:B07B 67 -  -  -  	ld h,a;height
  658 D1:B07C 68 -  -  -  	ld l,b;width
  659 D1:B07D ED 6C -  -  	mlt hl;number of pixels
  660 D1:B07F -  -  -  -  	;rounds up to nearest multiple of 8
  661 D1:B07F 2B -  -  -  	dec hl
  662 D1:B080 CB 3C -  -  	srl h
  663 D1:B082 CB 1D -  -  	rr l
  664 D1:B084 CB 3C -  -  	srl h
  665 D1:B086 CB 1D -  -  	rr l 
  666 D1:B088 CB 3C -  -  	srl h 
  667 D1:B08A CB 1D -  -  	rr l 
  668 D1:B08C 23 -  -  -  	inc hl 
  669 D1:B08D C1 -  -  -  	pop bc ;initial hl location
  670 D1:B08E -  -  -  -  	;add number of bytes to skip 
  671 D1:B08E 09 -  -  -  	add hl,bc ;HL points to start of color data 
  672 D1:B08F -  -  -  -  	
  673 D1:B08F -  -  -  -  	
  674 D1:B08F -  -  -  -  	
  675 D1:B08F -  -  -  -  sdcomp_no_alpha_2_skip:
  676 D1:B08F -  -  -  -  
  677 D1:B08F -  -  -  -  	
  678 D1:B08F -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  679 D1:B08F -  -  -  -  
  680 D1:B08F -  -  -  -  	
  681 D1:B08F 47 -  -  -  	ld b,a ;save for after
  682 D1:B090 -  -  -  -  	;GET LOCAL PALETTE DATA
  683 D1:B090 -  -  -  -  	
  684 D1:B090 37 -  -  -  	scf 
  685 D1:B091 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  686 D1:B091 D2 9B B0 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  687 D1:B095 -  -  -  -  	
  688 D1:B095 7E -  -  -  	ld a,(hl);color data 
  689 D1:B096 32 3B AF D1 	ld (sdcomp_indexed_color_data_1),a 
  690 D1:B09A 23 -  -  -  	inc hl 
  691 D1:B09B -  -  -  -  	
  692 D1:B09B -  -  -  -  sdcomp_1bpc_1_skip:	
  693 D1:B09B -  -  -  -  
  694 D1:B09B -  -  -  -  
  695 D1:B09B 37 -  -  -  	scf 
  696 D1:B09C -  -  -  -  sdcomp_2bpc_1 .equ $ 
  697 D1:B09C D2 A6 B0 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  698 D1:B0A0 -  -  -  -  	
  699 D1:B0A0 7E -  -  -  	ld a,(hl);color data 
  700 D1:B0A1 32 2F AF D1 	ld (sdcomp_indexed_color_data_2),a 
  701 D1:B0A5 23 -  -  -  	inc hl 
  702 D1:B0A6 -  -  -  -  	
  703 D1:B0A6 -  -  -  -  sdcomp_2bpc_1_skip:	
  704 D1:B0A6 -  -  -  -  
  705 D1:B0A6 -  -  -  -  
  706 D1:B0A6 37 -  -  -  	scf 
  707 D1:B0A7 -  -  -  -  sdcomp_3bpc_1 .equ $ 
  708 D1:B0A7 DA B7 B0 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  709 D1:B0AB -  -  -  -  	
  710 D1:B0AB 7E -  -  -  	ld a,(hl);color data 
  711 D1:B0AC 32 1D AF D1 	ld (sdcomp_indexed_color_data_3),a 
  712 D1:B0B0 23 -  -  -  	inc hl 
  713 D1:B0B1 7E -  -  -  	ld a,(hl);color data 
  714 D1:B0B2 32 11 AF D1 	ld (sdcomp_indexed_color_data_4),a 
  715 D1:B0B6 23 -  -  -  	inc hl 
  716 D1:B0B7 -  -  -  -  	
  717 D1:B0B7 -  -  -  -  sdcomp_3bpc_1_skip:	
  718 D1:B0B7 -  -  -  -  
  719 D1:B0B7 -  -  -  -  	
  720 D1:B0B7 D5 -  -  -  	push de ;loops/line data location
  721 D1:B0B8 EB -  -  -  	ex de,hl
  722 D1:B0B9 78 -  -  -  	ld a,b
  723 D1:B0BA 01 00 00 00 	ld bc,0
  724 D1:B0BE 4F -  -  -  	ld c,a;height 
  725 D1:B0BF 09 -  -  -  	add hl,bc
  726 D1:B0C0 EB -  -  -  	ex de,hl;de points to data write location
  727 D1:B0C1 -  -  -  -  	
  728 D1:B0C1 -  -  -  -  	
  729 D1:B0C1 D9 -  -  -  	exx;in to shadow
  730 D1:B0C2 D1 -  -  -  	pop de 
  731 D1:B0C3 E1 -  -  -  	pop hl ;alpha data stored from earlier
  732 D1:B0C4 0E 80 -  -  	ld c,%10000000;alpha mask
  733 D1:B0C6 D9 -  -  -  	exx;out 
  734 D1:B0C7 0E 80 -  -  	ld c,%10000000;color mask
  735 D1:B0C9 -  -  -  -  	
  736 D1:B0C9 -  -  -  -  	;HL now points to pixel color data 
  737 D1:B0C9 -  -  -  -  	;HL' points to pixel alpha data 
  738 D1:B0C9 -  -  -  -  	;C holds color mask
  739 D1:B0C9 -  -  -  -  	;C' holds alpha mask
  740 D1:B0C9 -  -  -  -  	;DE' holds loops/line output data location
  741 D1:B0C9 -  -  -  -  	;DE holds main data output location
  742 D1:B0C9 -  -  -  -  	;A holds height
  743 D1:B0C9 -  -  -  -  	;A' holds bits remaining in row
  744 D1:B0C9 -  -  -  -  
  745 D1:B0C9 -  -  -  -  
  746 D1:B0C9 37 -  -  -  	scf 
  747 D1:B0CA -  -  -  -  sdcomp_flip_setup .equ $
  748 D1:B0CA DA DA B0 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  749 D1:B0CE -  -  -  -  
  750 D1:B0CE -  -  -  -  	
  751 D1:B0CE 2B -  -  -  	dec hl;dec color pointer
  752 D1:B0CF 0E 01 -  -  	ld c, %00000001
  753 D1:B0D1 D9 -  -  -  	exx;to shadow 
  754 D1:B0D2 2B -  -  -  	dec hl;dec alpha pointer
  755 D1:B0D3 0E 01 -  -  	ld c, %00000001;alpha mask
  756 D1:B0D5 CD 78 AF D1 	call sdcomp_traverse_initial
  757 D1:B0D9 D9 -  -  -  	exx ;out of shadow 
  758 D1:B0DA -  -  -  -  	
  759 D1:B0DA -  -  -  -  	
  760 D1:B0DA -  -  -  -  
  761 D1:B0DA -  -  -  -  	;TODO jump to BG routine here
  762 D1:B0DA -  -  -  -  	;END SETUP ======================================================================================================
  763 D1:B0DA -  -  -  -  	
  764 D1:B0DA -  -  -  -  	
  765 D1:B0DA -  -  -  -  sdcomp_find_gap_length:
  766 D1:B0DA -  -  -  -  	
  767 D1:B0DA -  -  -  -  	
  768 D1:B0DA -  -  -  -  	
  769 D1:B0DA -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  770 D1:B0DA -  -  -  -  ;this will occur if:
  771 D1:B0DA -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  772 D1:B0DA -  -  -  -  ;
  773 D1:B0DA -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  774 D1:B0DA -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  775 D1:B0DA -  -  -  -  	
  776 D1:B0DA D9 -  -  -  	exx ;to shadow
  777 D1:B0DB -  -  -  -  	
  778 D1:B0DB -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  779 D1:B0DB 06 00 -  -  	ld b,0;00 pairs found 
  780 D1:B0DD 3E 00 -  -  	ld a,0 ;reset
  781 D1:B0DF 32 DC B0 D1 	ld (sdcomp_add_1_gap_length),a 
  782 D1:B0E3 -  -  -  -  
  783 D1:B0E3 -  -  -  -  sdcomp_find_gap_length_loop:
  784 D1:B0E3 -  -  -  -  
  785 D1:B0E3 37 -  -  -  	scf 
  786 D1:B0E4 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  787 D1:B0E4 DA 0D B1 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  788 D1:B0E8 -  -  -  -  	
  789 D1:B0E8 -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  790 D1:B0E8 -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  791 D1:B0E8 3E 00 -  -  	ld a,0
  792 D1:B0EA 80 -  -  -  	add a,b 
  793 D1:B0EB -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  794 D1:B0EB 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  795 D1:B0EC 47 -  -  -  	ld b,a 
  796 D1:B0ED 3E 00 -  -  	ld a,%00000000 ;nop 
  797 D1:B0EF 32 EB B0 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  798 D1:B0F3 3E DA -  -  	ld a,%11011010;jp c
  799 D1:B0F5 32 D3 AD D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  800 D1:B0F9 32 E4 B0 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  801 D1:B0FD -  -  -  -  	
  802 D1:B0FD 37 -  -  -  	scf
  803 D1:B0FE -  -  -  -  sdcomp_flip_traverse .equ $
  804 D1:B0FE D4 6A AF D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  805 D1:B102 -  -  -  -  		
  806 D1:B102 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  807 D1:B102 3A B8 B1 D1 	ld a,(sdcomp_loops_per_line_counter)
  808 D1:B106 12 -  -  -  	ld (de),a ;write loops/line data 
  809 D1:B107 13 -  -  -  	inc de
  810 D1:B108 -  -  -  -  	
  811 D1:B108 -  -  -  -  	
  812 D1:B108 37 -  -  -  	scf 
  813 D1:B109 -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  814 D1:B109 D2 28 B2 D1 	jp nc,sdcomp_end
  815 D1:B10D -  -  -  -  
  816 D1:B10D -  -  -  -  	
  817 D1:B10D -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  818 D1:B10D CD 57 AE D1 	call sdcomp_get_next_alpha_pair
  819 D1:B111 -  -  -  -  	;call write_a_to_ram
  820 D1:B111 04 -  -  -  	inc b 
  821 D1:B112 -  -  -  -  
  822 D1:B112 F5 -  -  -  	push af ;TEST
  823 D1:B113 3E AB -  -  	ld a,$AB;TEST
  824 D1:B115 CD 1C AA D1 	call write_a_to_ram
  825 D1:B119 -  -  -  -  	
  826 D1:B119 -  -  -  -  	;call write_a_to_ram
  827 D1:B119 F1 -  -  -  	pop af ;TEST
  828 D1:B11A -  -  -  -  	
  829 D1:B11A B7 -  -  -  	or a
  830 D1:B11B CA E3 B0 D1 	jp z,sdcomp_find_gap_length_loop
  831 D1:B11F -  -  -  -  	
  832 D1:B11F -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  833 D1:B11F -  -  -  -  	
  834 D1:B11F F5 -  -  -  	push af; save leading pixel alpha data 
  835 D1:B120 -  -  -  -  	;B holds number of 00 pairs + 1
  836 D1:B120 -  -  -  -  	
  837 D1:B120 3E AA -  -  	ld a,$AA ;test
  838 D1:B122 CD 1C AA D1 	call write_a_to_ram
  839 D1:B126 78 -  -  -  	ld a,b ;test
  840 D1:B127 CD 1C AA D1 	call write_a_to_ram
  841 D1:B12B -  -  -  -  	
  842 D1:B12B -  -  -  -  	
  843 D1:B12B -  -  -  -  	
  844 D1:B12B -  -  -  -  	;Write gap length data to output
  845 D1:B12B 78 -  -  -  	ld a,b 
  846 D1:B12C D9 -  -  -  	exx;out of shadow 
  847 D1:B12D 12 -  -  -  	ld (de),a;GAP LENGTH 
  848 D1:B12E 13 -  -  -  	inc de 
  849 D1:B12F D9 -  -  -  	exx;into shadow 	
  850 D1:B130 -  -  -  -  	
  851 D1:B130 -  -  -  -  	
  852 D1:B130 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  853 D1:B130 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  854 D1:B131 -  -  -  -  	
  855 D1:B131 37 -  -  -  	scf 
  856 D1:B132 -  -  -  -  sdcomp_fast_1 .equ $ 
  857 D1:B132 D2 3C B1 D1 	jp nc, sdcomp_ldir_start 
  858 D1:B136 -  -  -  -  	
  859 D1:B136 D9 -  -  -  	exx;out of shadow
  860 D1:B137 CD E3 AF D1 	call sdcomp_write_leading_or_end_pixels
  861 D1:B13B D9 -  -  -  	exx;into shadow 
  862 D1:B13C -  -  -  -  	
  863 D1:B13C -  -  -  -  
  864 D1:B13C -  -  -  -  	
  865 D1:B13C -  -  -  -  ;LDIR ==============================================================================================================	
  866 D1:B13C -  -  -  -  	;Count number of 11 pairs for LDIR section
  867 D1:B13C -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  868 D1:B13C -  -  -  -  	;
  869 D1:B13C -  -  -  -  	
  870 D1:B13C -  -  -  -  	;If ending is 11 -> 00 
  871 D1:B13C -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  872 D1:B13C -  -  -  -  	;Will need to reduce b by 1 
  873 D1:B13C -  -  -  -  	
  874 D1:B13C -  -  -  -  	;If ending is 11 ->01/10
  875 D1:B13C -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  876 D1:B13C -  -  -  -  	
  877 D1:B13C -  -  -  -  sdcomp_ldir_start:
  878 D1:B13C -  -  -  -  
  879 D1:B13C -  -  -  -  ;	ld a, %11010010 ;jp nc 
  880 D1:B13C -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  881 D1:B13C -  -  -  -  
  882 D1:B13C 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  883 D1:B13E -  -  -  -  sdcomp_ldir_loop:
  884 D1:B13E CD 57 AE D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  885 D1:B142 04 -  -  -  	inc b 
  886 D1:B143 -  -  -  -  	
  887 D1:B143 F5 -  -  -  	push af 
  888 D1:B144 3E DE -  -  	ld a,$DE 
  889 D1:B146 CD 1C AA D1 	call write_a_to_ram
  890 D1:B14A F1 -  -  -  	pop af
  891 D1:B14B CD 1C AA D1 	call write_a_to_ram
  892 D1:B14F -  -  -  -  	
  893 D1:B14F -  -  -  -  ;	scf 
  894 D1:B14F -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  895 D1:B14F -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  896 D1:B14F -  -  -  -  	
  897 D1:B14F EE FF -  -  	xor %11111111 ;flip all bits  (CPL does not set flags :(  )
  898 D1:B151 CA 3E B1 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  899 D1:B155 2F -  -  -  	cpl ; flip back 
  900 D1:B156 -  -  -  -  sdcomp_ldir_loop_end:
  901 D1:B156 -  -  -  -  
  902 D1:B156 -  -  -  -  	
  903 D1:B156 -  -  -  -  	;at this point b holds # 11 pairs +1 
  904 D1:B156 37 -  -  -  	scf 
  905 D1:B157 -  -  -  -  sdcomp_fast_2 .equ $ 
  906 D1:B157 D2 78 B1 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  907 D1:B15B -  -  -  -  
  908 D1:B15B -  -  -  -  	
  909 D1:B15B -  -  -  -  	
  910 D1:B15B 05 -  -  -  	dec b ;b holds # 11 pairs 
  911 D1:B15C CA 98 B1 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  912 D1:B160 B7 -  -  -  	or a
  913 D1:B161 C2 78 B1 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  914 D1:B165 -  -  -  -  	
  915 D1:B165 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  916 D1:B165 -  -  -  -  	
  917 D1:B165 3E DF -  -  	ld a,$DF
  918 D1:B167 CD 1C AA D1 	call write_a_to_ram
  919 D1:B16B -  -  -  -  	
  920 D1:B16B -  -  -  -  	;must add 1 to next gap length, have already read first 00
  921 D1:B16B -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  922 D1:B16B 3E 01 -  -  	ld a,1;start w 1 gap len
  923 D1:B16D 32 DC B0 D1 	ld (sdcomp_add_1_gap_length),a 
  924 D1:B171 3E FF -  -  	ld a,$ff;ending pixels 11
  925 D1:B173 -  -  -  -  	
  926 D1:B173 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  927 D1:B174 CA 98 B1 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  928 D1:B178 -  -  -  -  	;b holds ldir length 
  929 D1:B178 -  -  -  -  	
  930 D1:B178 -  -  -  -  
  931 D1:B178 -  -  -  -  ;b holds ldir length, a holds ending pixels
  932 D1:B178 -  -  -  -  sdcomp_ldir_write:
  933 D1:B178 -  -  -  -  
  934 D1:B178 -  -  -  -  	;b holds 11 pairs found 
  935 D1:B178 F5 -  -  -  	push af;TEST
  936 D1:B179 3E DA -  -  	ld a,$DA 
  937 D1:B17B CD 1C AA D1 	call write_a_to_ram
  938 D1:B17F 78 -  -  -  	ld a,b 
  939 D1:B180 CD 1C AA D1 	call write_a_to_ram
  940 D1:B184 F1 -  -  -  	pop af ;TEST
  941 D1:B185 -  -  -  -  
  942 D1:B185 F5 -  -  -  	push af;save ending pixels
  943 D1:B186 78 -  -  -  	ld a,b
  944 D1:B187 D9 -  -  -  	exx ;out 
  945 D1:B188 12 -  -  -  	ld (de),a;write ldir length
  946 D1:B189 13 -  -  -  	inc de 
  947 D1:B18A CD CF AF D1 	call sdcomp_write_ldir_data_loop
  948 D1:B18E -  -  -  -  
  949 D1:B18E F1 -  -  -  	pop af;return ending pixels
  950 D1:B18F -  -  -  -  	
  951 D1:B18F 37 -  -  -  	scf
  952 D1:B190 -  -  -  -  sdcomp_fast_3 .equ $ 
  953 D1:B190 D2 B7 B1 D1 	jp nc,sdcomp_inc_loops_per_line ;skip ending pixels
  954 D1:B194 -  -  -  -  	
  955 D1:B194 C3 AB B1 D1 	jp sdcomp_write_end_pixels
  956 D1:B198 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  957 D1:B198 -  -  -  -  
  958 D1:B198 F5 -  -  -  	push af ;TEST
  959 D1:B199 -  -  -  -  
  960 D1:B199 3E DB -  -  	ld a,$DB
  961 D1:B19B CD 1C AA D1 	call write_a_to_ram
  962 D1:B19F F1 -  -  -  	pop af ;TEST
  963 D1:B1A0 CD 1C AA D1 	call write_a_to_ram
  964 D1:B1A4 -  -  -  -  
  965 D1:B1A4 F5 -  -  -  	push af;save end pixels
  966 D1:B1A5 -  -  -  -  	
  967 D1:B1A5 D9 -  -  -  	exx;out of shadow
  968 D1:B1A6 3E 00 -  -  	ld a,0
  969 D1:B1A8 12 -  -  -  	ld (de),a ;write 0 as ldir length
  970 D1:B1A9 13 -  -  -  	inc de 
  971 D1:B1AA F1 -  -  -  	pop af;return ending pixels
  972 D1:B1AB -  -  -  -  
  973 D1:B1AB -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  974 D1:B1AB -  -  -  -  
  975 D1:B1AB -  -  -  -  sdcomp_write_end_pixels:
  976 D1:B1AB -  -  -  -  ;not in shadow
  977 D1:B1AB -  -  -  -  	
  978 D1:B1AB -  -  -  -  	;test
  979 D1:B1AB F5 -  -  -  	push af 
  980 D1:B1AC 3E E0 -  -  	ld a,$E0
  981 D1:B1AE CD 1C AA D1 	call write_a_to_ram
  982 D1:B1B2 F1 -  -  -  	pop af 
  983 D1:B1B3 -  -  -  -  	
  984 D1:B1B3 -  -  -  -  
  985 D1:B1B3 CD E3 AF D1 	call sdcomp_write_leading_or_end_pixels
  986 D1:B1B7 -  -  -  -  	
  987 D1:B1B7 -  -  -  -  	
  988 D1:B1B7 -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  989 D1:B1B7 -  -  -  -  	;ld a,2
  990 D1:B1B7 -  -  -  -  	;dec a 
  991 D1:B1B7 -  -  -  -  	;jp z,sdcomp_end
  992 D1:B1B7 -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  993 D1:B1B7 -  -  -  -  
  994 D1:B1B7 -  -  -  -  sdcomp_inc_loops_per_line:	
  995 D1:B1B7 -  -  -  -  	;INC LOOP/LINE count
  996 D1:B1B7 -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
  997 D1:B1B7 3E 00 -  -  	ld a,0;inc number of loops
  998 D1:B1B9 3C -  -  -  	inc a 
  999 D1:B1BA 32 B8 B1 D1 	ld (sdcomp_loops_per_line_counter),a
 1000 D1:B1BE -  -  -  -  
 1001 D1:B1BE -  -  -  -  	; scf 
 1002 D1:B1BE -  -  -  -  ; sdcomp_write_loops_per_line_flag .equ $
 1003 D1:B1BE -  -  -  -  	; jp c, sdcomp_write_loops_per_line_skip
 1004 D1:B1BE -  -  -  -  	; exx 
 1005 D1:B1BE -  -  -  -  	; ld a,(sdcomp_loops_per_line_counter)
 1006 D1:B1BE -  -  -  -  	; ld (de),a ;write loops/line data 
 1007 D1:B1BE -  -  -  -  	; inc de
 1008 D1:B1BE -  -  -  -  	; exx 
 1009 D1:B1BE -  -  -  -  	; ld a,%11011010;jp c
 1010 D1:B1BE -  -  -  -  	; ld (sdcomp_write_loops_per_line_flag),a
 1011 D1:B1BE -  -  -  -  
 1012 D1:B1BE -  -  -  -  ; sdcomp_write_loops_per_line_skip:
 1013 D1:B1BE -  -  -  -  
 1014 D1:B1BE -  -  -  -  	
 1015 D1:B1BE 3E EA -  -  	ld a,$EA
 1016 D1:B1C0 CD 1C AA D1 	call write_a_to_ram
 1017 D1:B1C4 -  -  -  -  	
 1018 D1:B1C4 -  -  -  -  	;TODO Check for interrupt
 1019 D1:B1C4 -  -  -  -  sdcomp_testing_interrupt_count .equ $ + 1;TESTING
 1020 D1:B1C4 3E 0A -  -  	ld a,10
 1021 D1:B1C6 3D -  -  -  	dec a 
 1022 D1:B1C7 32 C5 B1 D1 	ld(sdcomp_testing_interrupt_count),a 
 1023 D1:B1CB CA D3 B1 D1 	jp z,sdcomp_interrupt 
 1024 D1:B1CF -  -  -  -  	
 1025 D1:B1CF -  -  -  -  	
 1026 D1:B1CF -  -  -  -  	
 1027 D1:B1CF C3 DA B0 D1 	jp sdcomp_find_gap_length
 1028 D1:B1D3 -  -  -  -  
 1029 D1:B1D3 -  -  -  -  
 1030 D1:B1D3 -  -  -  -  	;TODO can prob not save a register
 1031 D1:B1D3 -  -  -  -  sdcomp_interrupt:
 1032 D1:B1D3 -  -  -  -  
 1033 D1:B1D3 3E 0A -  -  	ld a,10    ;TEST
 1034 D1:B1D5 32 C5 B1 D1 	ld(sdcomp_testing_interrupt_count),a ;TEST 
 1035 D1:B1D9 -  -  -  -  
 1036 D1:B1D9 -  -  -  -  	;not in shadow 
 1037 D1:B1D9 22 05 B2 D1 	ld (sdcomp_cont_hl),hl 
 1038 D1:B1DD EB -  -  -  	ex de,hl
 1039 D1:B1DE 22 09 B2 D1 	ld (sdcomp_cont_de),hl 
 1040 D1:B1E2 C5 -  -  -  	push bc
 1041 D1:B1E3 E1 -  -  -  	pop hl
 1042 D1:B1E4 22 0D B2 D1 	ld (sdcomp_cont_bc),hl
 1043 D1:B1E8 32 11 B2 D1 	ld (sdcomp_cont_a),a 
 1044 D1:B1EC D9 -  -  -  	exx 
 1045 D1:B1ED 08 -  -  -  	ex af,af' ;'
 1046 D1:B1EE 22 15 B2 D1 	ld (sdcomp_cont_hlP),hl 
 1047 D1:B1F2 EB -  -  -  	ex de,hl
 1048 D1:B1F3 22 19 B2 D1 	ld (sdcomp_cont_deP),hl 
 1049 D1:B1F7 C5 -  -  -  	push bc 
 1050 D1:B1F8 E1 -  -  -  	pop hl
 1051 D1:B1F9 22 1D B2 D1 	ld (sdcomp_cont_bcP),hl
 1052 D1:B1FD 32 21 B2 D1 	ld (sdcomp_cont_aP),a 
 1053 D1:B201 -  -  -  -  	
 1054 D1:B201 3E 01 -  -  	ld a,1 ;Return 1 if interrupted
 1055 D1:B203 C9 -  -  -  	ret 
 1056 D1:B204 -  -  -  -  	
 1057 D1:B204 -  -  -  -  sdcomp_continue:
 1058 D1:B204 -  -  -  -  	;not in shadow 
 1059 D1:B204 -  -  -  -  sdcomp_cont_hl .equ $ + 1
 1060 D1:B204 21 00 00 00 	ld hl,0
 1061 D1:B208 -  -  -  -  sdcomp_cont_de .equ $ + 1
 1062 D1:B208 11 00 00 00 	ld de,0
 1063 D1:B20C -  -  -  -  sdcomp_cont_bc .equ $ + 1
 1064 D1:B20C 01 00 00 00 	ld bc,0
 1065 D1:B210 -  -  -  -  sdcomp_cont_a .equ $ + 1
 1066 D1:B210 3E 00 -  -  	ld a,0
 1067 D1:B212 D9 -  -  -  	exx 
 1068 D1:B213 08 -  -  -  	ex af,af' ;'
 1069 D1:B214 -  -  -  -  sdcomp_cont_hlP .equ $ + 1
 1070 D1:B214 21 00 00 00 	ld hl,0
 1071 D1:B218 -  -  -  -  sdcomp_cont_deP .equ $ + 1
 1072 D1:B218 11 00 00 00 	ld de,0
 1073 D1:B21C -  -  -  -  sdcomp_cont_bcP .equ $ + 1
 1074 D1:B21C 01 00 00 00 	ld bc,0
 1075 D1:B220 -  -  -  -  sdcomp_cont_aP .equ $ + 1
 1076 D1:B220 3E 00 -  -  	ld a,0	
 1077 D1:B222 -  -  -  -  	
 1078 D1:B222 D9 -  -  -  	exx ;out of shadow 
 1079 D1:B223 08 -  -  -  	ex af,af' ;'
 1080 D1:B224 -  -  -  -  
 1081 D1:B224 C3 DA B0 D1 	jp sdcomp_find_gap_length
 1082 D1:B228 -  -  -  -  
 1083 D1:B228 -  -  -  -  	
 1084 D1:B228 -  -  -  -  
 1085 D1:B228 -  -  -  -  sdcomp_end:
 1086 D1:B228 -  -  -  -  	
 1087 D1:B228 3E 69 -  -  	ld a,$69
 1088 D1:B22A CD 1C AA D1 	call write_a_to_ram
 1089 D1:B22E -  -  -  -  	
 1090 D1:B22E 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1091 D1:B230 32 09 B1 D1 	ld (sdcomp_end_reached_flag),a 
 1092 D1:B234 -  -  -  -  	
 1093 D1:B234 3E 00 -  -  	ld a,0 ;return 0 if finished decompressing 
 1094 D1:B236 C9 -  -  -  	ret 
 1095 D1:B237 -  -  -  -  
 1096 D1:B237 -  -  -  -  
 1097 D1:B237 -  -  -  -  ;bit orders
 1098 D1:B237 -  -  -  -  ;	noflip   flip 
 1099 D1:B237 -  -  -  -  ;4bpp 3210 	 0123
 1100 D1:B237 -  -  -  -  ;3bpp 210	 012
 1101 D1:B237 -  -  -  -  ;2bpp 10	 01
 1102 D1:B237 -  -  -  -  ;1bpp 0		 0
 1103 D1:B237 -  -  -  -  
 1104 D1:B237 -  -  -  -  
 1105 D1:B237 -  -  -  -  sdcomp_set_0bpc:
 1106 D1:B237 3E DA -  -  	ld a,%11011010;jp c
 1107 D1:B239 32 BA AE D1 	ld (sdcomp_0bpc),a
 1108 D1:B23D -  -  -  -  	
 1109 D1:B23D 32 9C B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1110 D1:B241 32 A7 B0 D1 	ld (sdcomp_3bpc_1),a 
 1111 D1:B245 -  -  -  -  	
 1112 D1:B245 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1113 D1:B247 32 91 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1114 D1:B24B 3E 00 -  -  	ld a,%00000000
 1115 D1:B24D 32 93 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1116 D1:B251 C9 -  -  -  	ret 
 1117 D1:B252 -  -  -  -  	
 1118 D1:B252 -  -  -  -  sdcomp_set_1bpc:
 1119 D1:B252 3E D2 -  -  	ld a,%11010010;jp nc
 1120 D1:B254 32 BA AE D1 	ld (sdcomp_0bpc),a
 1121 D1:B258 3E DA -  -  	ld a,%11011010;jp c
 1122 D1:B25A 32 CC AE D1 	ld (sdcomp_1bpc),a
 1123 D1:B25E -  -  -  -  	
 1124 D1:B25E 32 9C B0 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1125 D1:B262 32 A7 B0 D1 	ld (sdcomp_3bpc_1),a 
 1126 D1:B266 -  -  -  -  	
 1127 D1:B266 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1128 D1:B268 32 91 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1129 D1:B26C -  -  -  -  	
 1130 D1:B26C -  -  -  -  	
 1131 D1:B26C 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1132 D1:B26E 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1133 D1:B272 -  -  -  -  	
 1134 D1:B272 3E 80 -  -  	ld a,%10000000
 1135 D1:B274 32 93 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1136 D1:B278 -  -  -  -  	
 1137 D1:B278 C9 -  -  -  	ret 
 1138 D1:B279 -  -  -  -  
 1139 D1:B279 -  -  -  -  sdcomp_set_2bpc:
 1140 D1:B279 3E D2 -  -  	ld a,%11010010;jp nc
 1141 D1:B27B 32 BA AE D1 	ld (sdcomp_0bpc),a
 1142 D1:B27F 32 CC AE D1 	ld (sdcomp_1bpc),a
 1143 D1:B283 -  -  -  -  	
 1144 D1:B283 3E DA -  -  	ld a,%11011010;jp c
 1145 D1:B285 32 DE AE D1 	ld (sdcomp_2bpc),a
 1146 D1:B289 -  -  -  -  	
 1147 D1:B289 32 A7 B0 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1148 D1:B28D -  -  -  -  	
 1149 D1:B28D 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1150 D1:B28F 32 91 B0 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1151 D1:B293 32 9C B0 D1 	ld (sdcomp_2bpc_1),a 
 1152 D1:B297 -  -  -  -  	
 1153 D1:B297 37 -  -  -  	scf 
 1154 D1:B298 -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1155 D1:B298 D2 A9 B2 D1 	jp nc, sdcomp_2bpc_flip
 1156 D1:B29C -  -  -  -  	
 1157 D1:B29C 3E CB -  -  	ld a,%11001011 ;set 1,e
 1158 D1:B29E 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1159 D1:B2A2 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1160 D1:B2A4 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1161 D1:B2A8 C9 -  -  -  	ret 
 1162 D1:B2A9 -  -  -  -  	
 1163 D1:B2A9 -  -  -  -  sdcomp_2bpc_flip:
 1164 D1:B2A9 3E CB -  -  	ld a,%11001011 ;set 1,e
 1165 D1:B2AB 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1166 D1:B2AF 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1167 D1:B2B1 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1168 D1:B2B5 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1169 D1:B2B7 32 8C AF D1 	ld (sdcomp_traverse_2bpp),a 
 1170 D1:B2BB 3E C0 -  -  	ld a,%11000000
 1171 D1:B2BD 32 93 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1172 D1:B2C1 C9 -  -  -  	ret 
 1173 D1:B2C2 -  -  -  -  
 1174 D1:B2C2 -  -  -  -  
 1175 D1:B2C2 -  -  -  -  sdcomp_set_3bpc:
 1176 D1:B2C2 -  -  -  -  	
 1177 D1:B2C2 3E D2 -  -  	ld a,%11010010;jp nc
 1178 D1:B2C4 32 BA AE D1 	ld (sdcomp_0bpc),a
 1179 D1:B2C8 32 CC AE D1 	ld (sdcomp_1bpc),a
 1180 D1:B2CC 32 DE AE D1 	ld (sdcomp_2bpc),a
 1181 D1:B2D0 -  -  -  -  	
 1182 D1:B2D0 3E DA -  -  	ld a,%11011010;jp c
 1183 D1:B2D2 32 F0 AE D1 	ld (sdcomp_3bpc),a
 1184 D1:B2D6 -  -  -  -  	
 1185 D1:B2D6 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1186 D1:B2D8 32 91 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1187 D1:B2DC 32 9C B0 D1 	ld (sdcomp_2bpc_1),a 
 1188 D1:B2E0 32 A7 B0 D1 	ld (sdcomp_3bpc_1),a 
 1189 D1:B2E4 -  -  -  -  	
 1190 D1:B2E4 37 -  -  -  	scf 
 1191 D1:B2E5 -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1192 D1:B2E5 D2 FC B2 D1 	jp nc, sdcomp_3bpc_flip	
 1193 D1:B2E9 -  -  -  -  	
 1194 D1:B2E9 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1195 D1:B2EB 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1196 D1:B2EF 3E CB -  -  	ld a,%11001011 ;set 1,e
 1197 D1:B2F1 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1198 D1:B2F5 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1199 D1:B2F7 32 EE AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1200 D1:B2FB C9 -  -  -  	ret 
 1201 D1:B2FC -  -  -  -  	
 1202 D1:B2FC -  -  -  -  sdcomp_3bpc_flip:
 1203 D1:B2FC 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1204 D1:B2FE 32 EE AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1205 D1:B302 3E CB -  -  	ld a,%11001011 ;set 1,e
 1206 D1:B304 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1207 D1:B308 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1208 D1:B30A 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1209 D1:B30E -  -  -  -  	
 1210 D1:B30E 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1211 D1:B310 32 8C AF D1 	ld (sdcomp_traverse_2bpp),a 
 1212 D1:B314 32 8E AF D1 	ld (sdcomp_traverse_3bpp),a 
 1213 D1:B318 3E E0 -  -  	ld a,%11100000
 1214 D1:B31A 32 93 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1215 D1:B31E -  -  -  -  	
 1216 D1:B31E C9 -  -  -  	ret 
 1217 D1:B31F -  -  -  -  
 1218 D1:B31F -  -  -  -  sdcomp_set_4bpc:
 1219 D1:B31F 3E DA -  -  	ld a,%11011010;jp c
 1220 D1:B321 -  -  -  -  
 1221 D1:B321 32 91 B0 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1222 D1:B325 32 9C B0 D1 	ld (sdcomp_2bpc_1),a 
 1223 D1:B329 32 A7 B0 D1 	ld (sdcomp_3bpc_1),a 
 1224 D1:B32D -  -  -  -  	
 1225 D1:B32D 37 -  -  -  	scf 
 1226 D1:B32E -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1227 D1:B32E D2 4B B3 D1 	jp nc, sdcomp_4bpc_flip	
 1228 D1:B332 3E DB -  -  	ld a,%11011011 ;set 3,e
 1229 D1:B334 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1230 D1:B338 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1231 D1:B33A 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1232 D1:B33E 3E CB -  -  	ld a,%11001011 ;set 1,e
 1233 D1:B340 32 EE AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1234 D1:B344 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1235 D1:B346 32 00 AF D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1236 D1:B34A C9 -  -  -  	ret 
 1237 D1:B34B -  -  -  -  sdcomp_4bpc_flip:
 1238 D1:B34B 3E DB -  -  	ld a,%11011011 ;set 3,e
 1239 D1:B34D 32 00 AF D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1240 D1:B351 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1241 D1:B353 32 EE AE D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1242 D1:B357 3E CB -  -  	ld a,%11001011 ;set 1,e
 1243 D1:B359 32 DC AE D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1244 D1:B35D 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1245 D1:B35F 32 CA AE D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1246 D1:B363 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1247 D1:B365 32 8C AF D1 	ld (sdcomp_traverse_2bpp),a 
 1248 D1:B369 32 8E AF D1 	ld (sdcomp_traverse_3bpp),a 
 1249 D1:B36D 32 90 AF D1 	ld (sdcomp_traverse_4bpp),a 
 1250 D1:B371 -  -  -  -  	
 1251 D1:B371 3E F0 -  -  	ld a,%11110000
 1252 D1:B373 32 93 AF D1 	ld (sdcomp_traverse_bit_check),a 
 1253 D1:B377 -  -  -  -  	
 1254 D1:B377 C9 -  -  -  	ret 
 1255 D1:B378 -  -  -  -  	
 1256 D1:B378 -  -  -  -  	
 1257 D1:B378 -  -  -  -  sdcomp_set_noalpha:
 1258 D1:B378 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1259 D1:B37A 32 05 AE D1 	ld (sdcomp_no_alpha_1),a 
 1260 D1:B37E 3E DA -  -  	ld a,%11011010;jp c
 1261 D1:B380 32 76 B0 D1 	ld (sdcomp_no_alpha_2),a 
 1262 D1:B384 32 84 AF D1 	ld (sdcomp_no_alpha_3),a 
 1263 D1:B388 C9 -  -  -  	ret
 1264 D1:B389 -  -  -  -  	
 1265 D1:B389 -  -  -  -  sdcomp_reset_noalpha:
 1266 D1:B389 -  -  -  -  
 1267 D1:B389 3E DA -  -  	ld a,%11011010;jp c
 1268 D1:B38B 32 05 AE D1 	ld (sdcomp_no_alpha_1),a 
 1269 D1:B38F 3E D2 -  -  	ld a, %11010010 ;jp nc
 1270 D1:B391 32 76 B0 D1 	ld (sdcomp_no_alpha_2),a 
 1271 D1:B395 3E CA -  -  	ld a, %11001010 ;jp z
 1272 D1:B397 32 84 AF D1 	ld (sdcomp_no_alpha_3),a 
 1273 D1:B39B C9 -  -  -  	ret
 1274 D1:B39C -  -  -  -  
 1275 D1:B39C -  -  -  -  
 1276 D1:B39C -  -  -  -  sdcomp_set_offset:
 1277 D1:B39C 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1278 D1:B39E 32 39 AE D1 	ld (sdcomp_offset_1),a 
 1279 D1:B3A2 32 E7 AD D1 	ld (sdcomp_bit_offset),a 
 1280 D1:B3A6 3E 04 -  -  	ld a,%00000100 ;inc b 
 1281 D1:B3A8 32 4F B0 D1 	ld (sdcomp_offset_2),a 
 1282 D1:B3AC -  -  -  -  	
 1283 D1:B3AC C9 -  -  -  	ret 
 1284 D1:B3AD -  -  -  -  
 1285 D1:B3AD -  -  -  -  sdcomp_reset_offset:
 1286 D1:B3AD 3E DA -  -  	ld a,%11011010;jp c
 1287 D1:B3AF 32 39 AE D1 	ld (sdcomp_offset_1),a 
 1288 D1:B3B3 32 E7 AD D1 	ld (sdcomp_bit_offset),a 
 1289 D1:B3B7 3E 00 -  -  	ld a,%00000000 ;nop
 1290 D1:B3B9 32 4F B0 D1 	ld (sdcomp_offset_2),a 
 1291 D1:B3BD C9 -  -  -  	ret 
 1292 D1:B3BE -  -  -  -  	
 1293 D1:B3BE -  -  -  -  sdcomp_set_flip:
 1294 D1:B3BE 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1295 D1:B3C0 32 BE AD D1 	ld (sdcomp_flip_bitstream),a
 1296 D1:B3C4 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1297 D1:B3C6 32 C0 AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1298 D1:B3CA 3E DC -  -  	ld a, %11011100 ;call c 
 1299 D1:B3CC 32 FE B0 D1 	ld (sdcomp_flip_traverse),a 
 1300 D1:B3D0 -  -  -  -  	
 1301 D1:B3D0 3E DA -  -  	ld a,%11011010;jp c
 1302 D1:B3D2 32 98 B2 D1 	ld (sdcomp_flip_2bpc),a
 1303 D1:B3D6 32 E5 B2 D1 	ld (sdcomp_flip_3bpc),a
 1304 D1:B3DA 32 2E B3 D1 	ld (sdcomp_flip_4bpc),a
 1305 D1:B3DE 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1306 D1:B3E0 32 CA B0 D1 	ld (sdcomp_flip_setup),a 
 1307 D1:B3E4 -  -  -  -  	
 1308 D1:B3E4 C9 -  -  -  	ret 
 1309 D1:B3E5 -  -  -  -  
 1310 D1:B3E5 -  -  -  -  sdcomp_reset_flip:
 1311 D1:B3E5 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1312 D1:B3E7 32 BE AD D1 	ld (sdcomp_flip_bitstream),a
 1313 D1:B3EB 3E 23 -  -  	ld a, %00100011 ;inc hl 
 1314 D1:B3ED 32 C0 AD D1 	ld (sdcomp_flip_bitstream_2),a 
 1315 D1:B3F1 3E D4 -  -  	ld a, %11010100 ;call nc 
 1316 D1:B3F3 32 FE B0 D1 	ld (sdcomp_flip_traverse),a 
 1317 D1:B3F7 -  -  -  -  	
 1318 D1:B3F7 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1319 D1:B3F9 32 98 B2 D1 	ld (sdcomp_flip_2bpc),a
 1320 D1:B3FD 32 E5 B2 D1 	ld (sdcomp_flip_3bpc),a
 1321 D1:B401 32 2E B3 D1 	ld (sdcomp_flip_4bpc),a
 1322 D1:B405 3E DA -  -  	ld a,%11011010;jp c
 1323 D1:B407 32 CA B0 D1 	ld (sdcomp_flip_setup),a 
 1324 D1:B40B C9 -  -  -  	ret 
 1325 D1:B40C -  -  -  -  
 1326 D1:B40C -  -  -  -  
 1327 D1:B40C -  -  -  -  sdcomp_set_fast:
 1328 D1:B40C 3E DA -  -  	ld a,%11011010;jp c
 1329 D1:B40E 32 32 B1 D1 	ld(sdcomp_fast_1),a 
 1330 D1:B412 32 57 B1 D1 	ld(sdcomp_fast_2),a 
 1331 D1:B416 32 90 B1 D1 	ld(sdcomp_fast_3),a 
 1332 D1:B41A -  -  -  -  	
 1333 D1:B41A C9 -  -  -  	ret 
 1334 D1:B41B -  -  -  -  
 1335 D1:B41B -  -  -  -  sdcomp_reset_fast:
 1336 D1:B41B 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1337 D1:B41D 32 32 B1 D1 	ld(sdcomp_fast_1),a 
 1338 D1:B421 32 57 B1 D1 	ld(sdcomp_fast_2),a 
 1339 D1:B425 32 90 B1 D1 	ld(sdcomp_fast_3),a 
 1340 D1:B429 -  -  -  -  	
 1341 D1:B429 C9 -  -  -  	ret 
 1342 D1:B42A -  -  -  -  
 1343 D1:B42A -  -  -  -  
 1344 D1:B42A -  -  -  -  
 1345 D1:B42A -  -  -  -  
 1346 D1:B42A -  -  -  -  
 1347 D1:B42A -  -  -  -  
Listing for file "ascent.asm"
  281 D1:B42A -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B42A -  -  -  -  
    2 D1:B42A -  -  -  -  FGMaxSpriteHeight .equ 120
    3 D1:B42A -  -  -  -  
    4 D1:B42A -  -  -  -  draw_mg:
    5 D1:B42A 2A 3B AA D1 		ld hl,(draw_buffer)
    6 D1:B42E 22 0A B5 D1 	ld (dfgs_vram_top_1),hl
    7 D1:B432 22 AA B5 D1 	ld (dfgs_vram_top_2),hl
    8 D1:B436 01 00 96 00 	ld bc,160*240
    9 D1:B43A 09 -  -  -  	add hl,bc
   10 D1:B43B 22 62 B5 D1 	ld (dfgs_vram_bottom_1),hl 
   11 D1:B43F 22 85 B5 D1 	ld (dfgs_vram_bottom_2),hl 
   12 D1:B443 22 F7 B5 D1 	ld (dfgs_vram_bottom_3),hl 
   13 D1:B447 22 1A B6 D1 	ld (dfgs_vram_bottom_4),hl 
   14 D1:B44B -  -  -  -  	
   15 D1:B44B 2A 35 AA D1 	ld hl,(cam_pos)
   16 D1:B44F CB 3C -  -  	srl h ;div by 2
   17 D1:B451 CB 1D -  -  	rr l 
   18 D1:B453 -  -  -  -  	
   19 D1:B453 01 EF 00 00 	ld bc,239
   20 D1:B457 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   21 D1:B458 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   22 D1:B459 32 DB B4 D1 	ld (dfgs_cam_height_1),a
   23 D1:B45D 32 49 B5 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   24 D1:B461 32 DD B5 D1 	ld (dfgs_cam_height_3),a
   25 D1:B465 -  -  -  -  		
   26 D1:B465 ED 44 -  -  	neg 
   27 D1:B467 32 FF B4 D1 	ld (dfgs_viewport_to_upper_frame),a
   28 D1:B46B -  -  -  -  	
   29 D1:B46B 01 00 00 00 	ld bc,0
   30 D1:B46F 4C -  -  -  	ld c,h;msb ccam pos 
   31 D1:B470 0C -  -  -  	inc c 
   32 D1:B471 -  -  -  -  	;ld hl,FG_Data_frame_table
   33 D1:B471 09 -  -  -  	add hl,bc
   34 D1:B472 09 -  -  -  	add hl,bc 
   35 D1:B473 09 -  -  -  	add hl,bc 	
   36 D1:B474 ED 27 -  -  	ld hl,(hl);upper frame 
   37 D1:B476 -  -  -  -  	
   38 D1:B476 CD CC B4 D1 	call draw_fg_sprites
   39 D1:B47A C9 -  -  -  	ret
   40 D1:B47B -  -  -  -  
   41 D1:B47B -  -  -  -  
   42 D1:B47B -  -  -  -  
   43 D1:B47B -  -  -  -  draw_fg:
   44 D1:B47B 2A 3B AA D1 	ld hl,(draw_buffer)
   45 D1:B47F 22 0A B5 D1 	ld (dfgs_vram_top_1),hl
   46 D1:B483 22 AA B5 D1 	ld (dfgs_vram_top_2),hl
   47 D1:B487 01 00 96 00 	ld bc,160*240
   48 D1:B48B 09 -  -  -  	add hl,bc
   49 D1:B48C 22 62 B5 D1 	ld (dfgs_vram_bottom_1),hl 
   50 D1:B490 22 85 B5 D1 	ld (dfgs_vram_bottom_2),hl 
   51 D1:B494 22 F7 B5 D1 	ld (dfgs_vram_bottom_3),hl 
   52 D1:B498 22 1A B6 D1 	ld (dfgs_vram_bottom_4),hl 
   53 D1:B49C -  -  -  -  	
   54 D1:B49C 2A 35 AA D1 	ld hl,(cam_pos)
   55 D1:B4A0 01 EF 00 00 	ld bc,239
   56 D1:B4A4 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   57 D1:B4A5 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   58 D1:B4A6 32 DB B4 D1 	ld (dfgs_cam_height_1),a
   59 D1:B4AA 32 49 B5 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   60 D1:B4AE 32 DD B5 D1 	ld (dfgs_cam_height_3),a
   61 D1:B4B2 -  -  -  -  		
   62 D1:B4B2 ED 44 -  -  	neg 
   63 D1:B4B4 32 FF B4 D1 	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
   64 D1:B4B8 -  -  -  -  	
   65 D1:B4B8 01 00 00 00 	ld bc,0
   66 D1:B4BC 4C -  -  -  	ld c,h;msb ccam pos 
   67 D1:B4BD 0C -  -  -  	inc c 
   68 D1:B4BE 21 7C CA D1 	ld hl,FG_Data_frame_table
   69 D1:B4C2 09 -  -  -  	add hl,bc
   70 D1:B4C3 09 -  -  -  	add hl,bc 
   71 D1:B4C4 09 -  -  -  	add hl,bc 	
   72 D1:B4C5 ED 27 -  -  	ld hl,(hl);upper frame 
   73 D1:B4C7 -  -  -  -  	
   74 D1:B4C7 CD CC B4 D1 	call draw_fg_sprites
   75 D1:B4CB C9 -  -  -  	ret
   76 D1:B4CC -  -  -  -  
   77 D1:B4CC -  -  -  -  
   78 D1:B4CC -  -  -  -  
   79 D1:B4CC -  -  -  -  
   80 D1:B4CC -  -  -  -  ;hl = upper frame data
   81 D1:B4CC -  -  -  -   
   82 D1:B4CC -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   83 D1:B4CC -  -  -  -  draw_fg_sprites:
   84 D1:B4CC -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   85 D1:B4CC ED 17 -  -  	ld de,(hl)
   86 D1:B4CE ED 53 50 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
   87 D1:B4D3 -  -  -  -  	
   88 D1:B4D3 11 00 00 00 	ld de,0
   89 D1:B4D7 23 -  -  -  	inc hl 
   90 D1:B4D8 23 -  -  -  	inc hl
   91 D1:B4D9 23 -  -  -  	inc hl;past data table 
   92 D1:B4DA -  -  -  -  	;hl is number of elements
   93 D1:B4DA -  -  -  -  	
   94 D1:B4DA -  -  -  -  	;TODO if cam height is far below upper frame, can skip upper frame 
   95 D1:B4DA -  -  -  -  	
   96 D1:B4DA -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   97 D1:B4DA 3E 00 -  -  	ld a,0 
   98 D1:B4DC FE 78 -  -  	cp FGMaxSpriteHeight
   99 D1:B4DE D2 F0 B4 D1 	jp nc, dfgs_do_upper_loop
  100 D1:B4E2 -  -  -  -  	;cam too low for upper frame sprites to be drawn
  101 D1:B4E2 01 00 00 00 	ld bc,0
  102 D1:B4E6 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  103 D1:B4E7 09 -  -  -  	add hl,bc 
  104 D1:B4E8 09 -  -  -  	add hl,bc 
  105 D1:B4E9 09 -  -  -  	add hl,bc 
  106 D1:B4EA 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  107 D1:B4EB 23 -  -  -  	inc hl;start of next frame
  108 D1:B4EC C3 2C B5 D1 	jp dfgs_mid_start ;skip upper loop
  109 D1:B4F0 -  -  -  -  	
  110 D1:B4F0 -  -  -  -  	
  111 D1:B4F0 -  -  -  -  dfgs_do_upper_loop:	
  112 D1:B4F0 08 -  -  -  	ex af,af' ;'
  113 D1:B4F1 7E -  -  -  	ld a,(hl);number of elements
  114 D1:B4F2 3C -  -  -  	inc a
  115 D1:B4F3 08 -  -  -  	ex af,af' ;'
  116 D1:B4F4 23 -  -  -  	inc hl;hl points to first sprite in upper frame  
  117 D1:B4F5 -  -  -  -  
  118 D1:B4F5 -  -  -  -  dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 
  119 D1:B4F5 -  -  -  -  
  120 D1:B4F5 08 -  -  -  	ex af,af';'
  121 D1:B4F6 3D -  -  -  	dec a 
  122 D1:B4F7 CA 2C B5 D1 	jp z,dfgs_mid_start 
  123 D1:B4FB 08 -  -  -  	ex af,af';'
  124 D1:B4FC -  -  -  -  
  125 D1:B4FC 7E -  -  -  	ld a,(hl);sprite y value 
  126 D1:B4FD 23 -  -  -  	inc hl ;to height
  127 D1:B4FE -  -  -  -  	
  128 D1:B4FE -  -  -  -  dfgs_viewport_to_upper_frame .equ $ + 1
  129 D1:B4FE C6 00 -  -  	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
  130 D1:B500 DA 25 B5 D1 	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
  131 D1:B504 BE -  -  -  	cp (hl) ;compare to sprite height 
  132 D1:B505 D2 25 B5 D1 	jp nc, dfgs_upper_skip
  133 D1:B509 -  -  -  -  	;a now holds number of lines to skip drawing
  134 D1:B509 -  -  -  -  
  135 D1:B509 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  136 D1:B509 11 00 00 00 	ld de,0;load top of vram 
  137 D1:B50D E5 -  -  -  	push hl ;save height ptr
  138 D1:B50E CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  139 D1:B512 -  -  -  -  	
  140 D1:B512 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  141 D1:B514 CA 20 B5 D1 	jp z,dfgs_upper_fast
  142 D1:B518 CD 86 AD D1 	call draw_slow_sprite_top_cut
  143 D1:B51C C3 24 B5 D1 	jp dfgs_upper_skip_2
  144 D1:B520 -  -  -  -  dfgs_upper_fast:
  145 D1:B520 CD 08 AD D1 	call draw_fast_sprite_top_cut
  146 D1:B524 -  -  -  -  dfgs_upper_skip_2:
  147 D1:B524 E1 -  -  -  	pop hl ;hl holds (height)
  148 D1:B525 -  -  -  -  	
  149 D1:B525 -  -  -  -  
  150 D1:B525 -  -  -  -  dfgs_upper_skip:
  151 D1:B525 23 -  -  -  	inc hl ;to x
  152 D1:B526 23 -  -  -  	inc hl ;to index 
  153 D1:B527 23 -  -  -  	inc hl;to y 
  154 D1:B528 C3 F5 B4 D1 	jp dfgs_upper_loop
  155 D1:B52C -  -  -  -  	
  156 D1:B52C -  -  -  -  	
  157 D1:B52C -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  158 D1:B52C -  -  -  -  	
  159 D1:B52C ED 17 -  -  	ld de,(hl) ;load sprite table ptr 
  160 D1:B52E ED 53 50 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  161 D1:B533 11 00 00 00 	ld de,0
  162 D1:B537 23 -  -  -  	inc hl 
  163 D1:B538 23 -  -  -  	inc hl
  164 D1:B539 23 -  -  -  	inc hl;past sprite table ptr
  165 D1:B53A 08 -  -  -  	ex af,af' ;'
  166 D1:B53B 7E -  -  -  	ld a,(hl);number of elements
  167 D1:B53C 3C -  -  -  	inc a 
  168 D1:B53D 08 -  -  -  	ex af,af' ;'
  169 D1:B53E 23 -  -  -  	inc hl ;to first y val 
  170 D1:B53F -  -  -  -  dfgs_mid_loop:
  171 D1:B53F -  -  -  -  	
  172 D1:B53F 08 -  -  -  	ex af,af';'
  173 D1:B540 3D -  -  -  	dec a 
  174 D1:B541 CA C9 B5 D1 	jp z,dfgs_lower_start ;check for end of data
  175 D1:B545 08 -  -  -  	ex af,af';'
  176 D1:B546 -  -  -  -  
  177 D1:B546 7E -  -  -  	ld a,(hl);y val of sprite in dataframe
  178 D1:B547 23 -  -  -  	inc hl ;to height
  179 D1:B548 -  -  -  -  dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
  180 D1:B548 D6 00 -  -  	sub 0;subtract cam pos
  181 D1:B54A CA 52 B5 D1 	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
  182 D1:B54E D2 A4 B5 D1 	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
  183 D1:B552 -  -  -  -  dfgs_mid_sprite_topline:
  184 D1:B552 -  -  -  -  	;Sprite is below viewport bound, either full or bottom cut 
  185 D1:B552 ED 44 -  -  	neg ;a holds number of lines sprite is below top of viewport 
  186 D1:B554 -  -  -  -  
  187 D1:B554 -  -  -  -  	;need to check if sprite is partially or entirely below veiwport
  188 D1:B554 -  -  -  -  	
  189 D1:B554 D6 F0 -  -  	sub 240
  190 D1:B556 D2 7D B5 D1 	jp nc, dfgs_mid_skip ;sprite is entirely below viewport 
  191 D1:B55A -  -  -  -  	;otherwise, a holds -lines to draw 
  192 D1:B55A ED 44 -  -  	neg ;a holds lines to draw 
  193 D1:B55C BE -  -  -  	cp (hl) ;compare to sprite height 
  194 D1:B55D DA 84 B5 D1 	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
  195 D1:B561 -  -  -  -  	;otherwise, draw full sprite 
  196 D1:B561 -  -  -  -  	
  197 D1:B561 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  198 D1:B561 11 00 00 00 	ld de,0;load bottom of vram 
  199 D1:B565 E5 -  -  -  	push hl ;save height ptr
  200 D1:B566 CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  201 D1:B56A -  -  -  -  	
  202 D1:B56A CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  203 D1:B56C CA 78 B5 D1 	jp z,dfgs_mid_full_fast
  204 D1:B570 CD 48 AD D1 	call draw_slow_sprite_full
  205 D1:B574 C3 7C B5 D1 	jp dfgs_mid_skip_1
  206 D1:B578 -  -  -  -  dfgs_mid_full_fast:
  207 D1:B578 CD 2E AD D1 	call draw_fast_sprite_full
  208 D1:B57C -  -  -  -  dfgs_mid_skip_1:
  209 D1:B57C E1 -  -  -  	pop hl ;hl holds (height)
  210 D1:B57D -  -  -  -  	
  211 D1:B57D -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  212 D1:B57D 23 -  -  -  	inc hl ;x
  213 D1:B57E 23 -  -  -  	inc hl ;index 
  214 D1:B57F 23 -  -  -  	inc hl;to y 
  215 D1:B580 -  -  -  -  	
  216 D1:B580 C3 3F B5 D1 	jp dfgs_mid_loop
  217 D1:B584 -  -  -  -  	
  218 D1:B584 -  -  -  -  
  219 D1:B584 -  -  -  -  dfgs_mid_bottom_cut:
  220 D1:B584 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  221 D1:B584 11 00 00 00 	ld de,0;load bottom of vram 
  222 D1:B588 E5 -  -  -  	push hl ;save height ptr
  223 D1:B589 CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  224 D1:B58D -  -  -  -  	
  225 D1:B58D CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  226 D1:B58F CA 9B B5 D1 	jp z,dfgs_mid_bcut_fast
  227 D1:B593 CD B3 AD D1 	call draw_slow_sprite_bottom_cut
  228 D1:B597 C3 9F B5 D1 	jp dfgs_mid_skip_2
  229 D1:B59B -  -  -  -  dfgs_mid_bcut_fast:
  230 D1:B59B CD EB AC D1 	call draw_fast_sprite_bottom_cut
  231 D1:B59F -  -  -  -  dfgs_mid_skip_2:
  232 D1:B59F E1 -  -  -  	pop hl ;hl holds (height)
  233 D1:B5A0 C3 7D B5 D1 	jp dfgs_mid_skip
  234 D1:B5A4 -  -  -  -  
  235 D1:B5A4 -  -  -  -  dfgs_mid_sprite_above:
  236 D1:B5A4 -  -  -  -  	;a holds lines to skip 
  237 D1:B5A4 BE -  -  -  	cp (hl) ;compare to height
  238 D1:B5A5 D2 7D B5 D1 	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport
  239 D1:B5A9 -  -  -  -  
  240 D1:B5A9 -  -  -  -  dfgs_vram_top_2 .equ $ + 1
  241 D1:B5A9 11 00 00 00 	ld de,0;top of vram 
  242 D1:B5AD E5 -  -  -  	push hl ;save height ptr
  243 D1:B5AE CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  244 D1:B5B2 -  -  -  -  	
  245 D1:B5B2 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  246 D1:B5B4 CA C0 B5 D1 	jp z,dfgs_mid_tcut_fast
  247 D1:B5B8 CD 86 AD D1 	call draw_slow_sprite_top_cut
  248 D1:B5BC C3 C4 B5 D1 	jp dfgs_mid_skip_3
  249 D1:B5C0 -  -  -  -  dfgs_mid_tcut_fast:
  250 D1:B5C0 CD 08 AD D1 	call draw_fast_sprite_top_cut
  251 D1:B5C4 -  -  -  -  dfgs_mid_skip_3:
  252 D1:B5C4 E1 -  -  -  	pop hl ;hl holds (height)
  253 D1:B5C5 C3 7D B5 D1 	jp dfgs_mid_skip
  254 D1:B5C9 -  -  -  -  	
  255 D1:B5C9 -  -  -  -  	
  256 D1:B5C9 -  -  -  -  	
  257 D1:B5C9 -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  258 D1:B5C9 -  -  -  -  dfgs_lower_start:
  259 D1:B5C9 -  -  -  -  	
  260 D1:B5C9 ED 17 -  -  	ld de,(hl) ;load sprite table ptr
  261 D1:B5CB ED 53 50 B6 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  262 D1:B5D0 11 00 00 00 	ld de,0
  263 D1:B5D4 23 -  -  -  	inc hl 
  264 D1:B5D5 23 -  -  -  	inc hl
  265 D1:B5D6 23 -  -  -  	inc hl;past data table 
  266 D1:B5D7 -  -  -  -  	
  267 D1:B5D7 08 -  -  -  	ex af,af' ;'
  268 D1:B5D8 7E -  -  -  	ld a,(hl);number of elements
  269 D1:B5D9 3C -  -  -  	inc a 
  270 D1:B5DA 08 -  -  -  	ex af,af' ;'
  271 D1:B5DB 23 -  -  -  	inc hl
  272 D1:B5DC -  -  -  -  	
  273 D1:B5DC -  -  -  -  
  274 D1:B5DC -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  275 D1:B5DC 3E 00 -  -  	ld a, 0
  276 D1:B5DE D6 EF -  -  	sub 239
  277 D1:B5E0 D0 -  -  -  	ret nc;if bottom frame is offscreen 
  278 D1:B5E1 -  -  -  -  
  279 D1:B5E1 -  -  -  -  	;a holds y value of viewport bottom line in lower frame 
  280 D1:B5E1 32 EC B5 D1 	ld (dfgs_viewport_bottom_y),a
  281 D1:B5E5 -  -  -  -  
  282 D1:B5E5 -  -  -  -  dfgs_lower_loop:
  283 D1:B5E5 -  -  -  -  
  284 D1:B5E5 08 -  -  -  	ex af,af';'
  285 D1:B5E6 3D -  -  -  	dec a 
  286 D1:B5E7 C8 -  -  -  	ret z
  287 D1:B5E8 08 -  -  -  	ex af,af';'
  288 D1:B5E9 -  -  -  -  	
  289 D1:B5E9 7E -  -  -  	ld a,(hl);y
  290 D1:B5EA 23 -  -  -  	inc hl ;inc to height
  291 D1:B5EB -  -  -  -  dfgs_viewport_bottom_y .equ $ + 1
  292 D1:B5EB D6 00 -  -  	sub a,0;subtract y val of viewport bottom
  293 D1:B5ED DA 12 B6 D1 	jp c,dfgs_lower_skip;sprite below screen
  294 D1:B5F1 -  -  -  -  	
  295 D1:B5F1 -  -  -  -  	;a holds number of lines to draw 
  296 D1:B5F1 BE -  -  -  	cp (hl) ;compare to sprite height 
  297 D1:B5F2 DA 19 B6 D1 	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
  298 D1:B5F6 -  -  -  -  	
  299 D1:B5F6 -  -  -  -  	;draw full sprite 
  300 D1:B5F6 -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  301 D1:B5F6 11 00 00 00 	ld de,0;load bottom of vram 
  302 D1:B5FA E5 -  -  -  	push hl ;save height ptr
  303 D1:B5FB CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  304 D1:B5FF -  -  -  -  	
  305 D1:B5FF CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  306 D1:B601 CA 0D B6 D1 	jp z,dfgs_lower_full_fast
  307 D1:B605 CD 48 AD D1 	call draw_slow_sprite_full
  308 D1:B609 C3 11 B6 D1 	jp dfgs_lower_skip_1
  309 D1:B60D -  -  -  -  dfgs_lower_full_fast:
  310 D1:B60D CD 2E AD D1 	call draw_fast_sprite_full
  311 D1:B611 -  -  -  -  dfgs_lower_skip_1:
  312 D1:B611 E1 -  -  -  	pop hl ;hl holds (height)
  313 D1:B612 -  -  -  -  
  314 D1:B612 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  315 D1:B612 23 -  -  -  	inc hl ;x 
  316 D1:B613 23 -  -  -  	inc hl ;index 
  317 D1:B614 23 -  -  -  	inc hl;to y 
  318 D1:B615 -  -  -  -  
  319 D1:B615 C3 E5 B5 D1 	jp dfgs_lower_loop
  320 D1:B619 -  -  -  -  	
  321 D1:B619 -  -  -  -  dfgs_lower_bottom_cut: 
  322 D1:B619 -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  323 D1:B619 11 00 00 00 	ld de,0;load bottom of vram 
  324 D1:B61D E5 -  -  -  	push hl ;save height ptr
  325 D1:B61E CD 39 B6 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  326 D1:B622 -  -  -  -  	
  327 D1:B622 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  328 D1:B624 CA 30 B6 D1 	jp z,dfgs_lower_bcut_fast ;even= fast
  329 D1:B628 CD B3 AD D1 	call draw_slow_sprite_bottom_cut
  330 D1:B62C C3 34 B6 D1 	jp dfgs_lower_skip_2
  331 D1:B630 -  -  -  -  dfgs_lower_bcut_fast:
  332 D1:B630 CD EB AC D1 	call draw_fast_sprite_bottom_cut
  333 D1:B634 -  -  -  -  dfgs_lower_skip_2:
  334 D1:B634 E1 -  -  -  	pop hl ;hl holds (height)
  335 D1:B635 C3 12 B6 D1 	jp dfgs_lower_skip
  336 D1:B639 -  -  -  -  	
  337 D1:B639 -  -  -  -  	
  338 D1:B639 -  -  -  -  	
  339 D1:B639 -  -  -  -  	
  340 D1:B639 -  -  -  -  	
  341 D1:B639 -  -  -  -  	
  342 D1:B639 -  -  -  -  	
  343 D1:B639 -  -  -  -  	
  344 D1:B639 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  345 D1:B639 -  -  -  -  ;(hl) = height 	
  346 D1:B639 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  347 D1:B639 -  -  -  -  
  348 D1:B639 -  -  -  -  ;Subtracts a lines from de (initial vram pos),
  349 D1:B639 -  -  -  -  ;returns hl = sprite data, de = new vram position
  350 D1:B639 -  -  -  -  dfgs_setup_draw:
  351 D1:B639 23 -  -  -  	inc hl ;x pos 
  352 D1:B63A 01 00 00 00 	ld bc,0
  353 D1:B63E 4E -  -  -  	ld c,(hl); x pos
  354 D1:B63F 23 -  -  -  	inc hl;to index
  355 D1:B640 E5 -  -  -  	push hl;save sprite index 
  356 D1:B641 26 A0 -  -  	ld h,160
  357 D1:B643 6F -  -  -  	ld l,a ;number of lines to subtract 
  358 D1:B644 ED 6C -  -  	mlt hl;subtract from vram
  359 D1:B646 37 -  -  -  	scf 
  360 D1:B647 3F -  -  -  	ccf
  361 D1:B648 EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  362 D1:B649 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  363 D1:B64B 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  364 D1:B64C EB -  -  -  	ex de,hl;put in de
  365 D1:B64D E1 -  -  -  	pop hl;back to frame data 
  366 D1:B64E 4E -  -  -  	ld c,(hl);sprite index
  367 D1:B64F -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  368 D1:B64F 21 00 00 00 	ld hl,0 ;load sprite table 
  369 D1:B653 09 -  -  -  	add hl,bc
  370 D1:B654 09 -  -  -  	add hl,bc 
  371 D1:B655 09 -  -  -  	add hl,bc;move to sprite ptr
  372 D1:B656 -  -  -  -  	;call prgmpause
  373 D1:B656 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  374 D1:B658 -  -  -  -  
  375 D1:B658 C9 -  -  -  	ret
  376 D1:B659 -  -  -  -  
  377 D1:B659 -  -  -  -  	
  378 D1:B659 -  -  -  -  	
  379 D1:B659 -  -  -  -  	
  380 D1:B659 -  -  -  -  	
  381 D1:B659 -  -  -  -  	
  382 D1:B659 -  -  -  -  	
  383 D1:B659 -  -  -  -  	
  384 D1:B659 -  -  -  -  	
  385 D1:B659 -  -  -  -  	
  386 D1:B659 -  -  -  -  	
  387 D1:B659 -  -  -  -  	
  388 D1:B659 -  -  -  -  	
Listing for file "ascent.asm"
  282 D1:B659 -  -  -  -  #include "SpriteDecompressManager.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\SpriteDecompressManager.txt"
    1 D1:B659 -  -  -  -  
    2 D1:B659 -  -  -  -  
    3 D1:B659 -  -  -  -  decompress_queue_start .equ vram
    4 D1:B659 -  -  -  -  
    5 D1:B659 -  -  -  -  decompress_queue_end .equ vram + (7*40) ;Max queue length of 40
    6 D1:B659 -  -  -  -  
    7 D1:B659 -  -  -  -  decompress_tail_ptr:
    8 D1:B659 06 00 D4 -  	.dl decompress_queue_start + 6  ;points to sprite being currently decompressed (parameters byte)
    9 D1:B65C -  -  -  -  
   10 D1:B65C -  -  -  -  decompress_head_ptr: ;points to where next element will be added to queue
   11 D1:B65C 00 00 D4 -  	.dl decompress_queue_start
   12 D1:B65F -  -  -  -  
   13 D1:B65F -  -  -  -  ;Decompress queue format
   14 D1:B65F -  -  -  -  ; .dl Sprite data ptr, decompress location, parameters (7 = fast, 6 = offset, 5 = flip, 4 =started decompressing 3 = finished decompressing )
   15 D1:B65F -  -  -  -  
   16 D1:B65F -  -  -  -  setup_decompress_queue:
   17 D1:B65F 3E FF -  -  	ld a,$FF
   18 D1:B661 01 18 01 00 	ld bc, 7*40
   19 D1:B665 21 00 00 D4 	ld hl, decompress_queue_start
   20 D1:B669 CD E0 10 02 	call _MemSet
   21 D1:B66D C9 -  -  -  	ret 
   22 D1:B66E -  -  -  -  
   23 D1:B66E -  -  -  -  ;bc = sprite data ptr, de = decompress location, a = params
   24 D1:B66E -  -  -  -  
   25 D1:B66E -  -  -  -  add_to_decompress_queue:
   26 D1:B66E 2A 5C B6 D1 	ld hl, (decompress_head_ptr)
   27 D1:B672 ED 0F -  -  	ld (hl), bc 
   28 D1:B674 23 -  -  -  	inc hl
   29 D1:B675 23 -  -  -  	inc hl 
   30 D1:B676 23 -  -  -  	inc hl 
   31 D1:B677 -  -  -  -  
   32 D1:B677 ED 1F -  -  	ld (hl),de
   33 D1:B679 -  -  -  -  	
   34 D1:B679 23 -  -  -  	inc hl 
   35 D1:B67A 23 -  -  -  	inc hl 
   36 D1:B67B 23 -  -  -  	inc hl 
   37 D1:B67C -  -  -  -  	
   38 D1:B67C 77 -  -  -  	ld (hl), a 
   39 D1:B67D 23 -  -  -  	inc hl ;start of next element 
   40 D1:B67E -  -  -  -  	
   41 D1:B67E E5 -  -  -  	push hl 
   42 D1:B67F 11 18 01 D4 	ld de, decompress_queue_end
   43 D1:B683 37 -  -  -  	scf
   44 D1:B684 3F -  -  -  	ccf
   45 D1:B685 ED 52 -  -  	sbc hl,de 
   46 D1:B687 E1 -  -  -  	pop hl
   47 D1:B688 CA 91 B6 D1 	jp z, a2dq_back_to_start
   48 D1:B68C -  -  -  -  	
   49 D1:B68C 22 5C B6 D1 	ld (decompress_head_ptr),hl
   50 D1:B690 C9 -  -  -  	ret
   51 D1:B691 -  -  -  -  	
   52 D1:B691 -  -  -  -  a2dq_back_to_start:
   53 D1:B691 21 00 00 D4 	ld hl,decompress_queue_start
   54 D1:B695 22 5C B6 D1 	ld (decompress_head_ptr),hl
   55 D1:B699 C9 -  -  -  	ret
   56 D1:B69A -  -  -  -  	
   57 D1:B69A -  -  -  -  	
   58 D1:B69A -  -  -  -  
   59 D1:B69A -  -  -  -  
   60 D1:B69A -  -  -  -  
   61 D1:B69A -  -  -  -  	;if has ended, return. at end of queue
   62 D1:B69A -  -  -  -  	;if not started, begin decompression and set start flag
   63 D1:B69A -  -  -  -  	;if has started, but not ended, continue decompression 
   64 D1:B69A -  -  -  -  	;if started and ended, move to next element 
   65 D1:B69A -  -  -  -  continue_decompressions:
   66 D1:B69A 2A 59 B6 D1 	ld hl, (decompress_tail_ptr)
   67 D1:B69E 7E -  -  -  	ld a,(hl) ;decompress params 
   68 D1:B69F CB 5F -  -  	bit 3,a 
   69 D1:B6A1 C0 -  -  -  	ret nz ;sprite is done decompressing, at end of queue 
   70 D1:B6A2 CB 67 -  -  	bit 4,a
   71 D1:B6A4 CA DB B6 D1 	jp z, cd_begin_decompression
   72 D1:B6A8 -  -  -  -  	
   73 D1:B6A8 -  -  -  -  	;has started,not ended 
   74 D1:B6A8 CD 04 B2 D1 	call sdcomp_continue 
   75 D1:B6AC B7 -  -  -  	or a 
   76 D1:B6AD C0 -  -  -  	ret nz ;sprite not yet done decompressing 
   77 D1:B6AE -  -  -  -  
   78 D1:B6AE -  -  -  -  cd_done_decompressing:
   79 D1:B6AE -  -  -  -  	;sprite finished decompressing
   80 D1:B6AE 2A 59 B6 D1 	ld hl, (decompress_tail_ptr)	
   81 D1:B6B2 CB DE -  -  	set 3,(hl) ;set finished flag
   82 D1:B6B4 11 07 00 00 	ld de,7 
   83 D1:B6B8 19 -  -  -  	add hl,de ;points to next element in queue
   84 D1:B6B9 -  -  -  -  	
   85 D1:B6B9 E5 -  -  -  	push hl 
   86 D1:B6BA 11 18 01 D4 	ld de, decompress_queue_end
   87 D1:B6BE 37 -  -  -  	scf
   88 D1:B6BF 3F -  -  -  	ccf
   89 D1:B6C0 ED 52 -  -  	sbc hl,de 
   90 D1:B6C2 E1 -  -  -  	pop hl
   91 D1:B6C3 D2 CF B6 D1 	jp nc, cd_back_to_start
   92 D1:B6C7 22 59 B6 D1 	ld (decompress_tail_ptr),hl
   93 D1:B6CB C3 9A B6 D1 	jp continue_decompressions ;Move on to next sprite 
   94 D1:B6CF -  -  -  -  	
   95 D1:B6CF -  -  -  -  cd_back_to_start:
   96 D1:B6CF 21 00 00 D4 	ld hl,decompress_queue_start
   97 D1:B6D3 22 59 B6 D1 	ld (decompress_tail_ptr),hl
   98 D1:B6D7 C3 9A B6 D1 	jp continue_decompressions ;Move on to next sprite 
   99 D1:B6DB -  -  -  -  
  100 D1:B6DB -  -  -  -  cd_begin_decompression:
  101 D1:B6DB -  -  -  -  	;setup and begin decompressing
  102 D1:B6DB CB E6 -  -  	set 4,(hl) ;set start flag
  103 D1:B6DD F5 -  -  -  	push af 
  104 D1:B6DE CB 7F -  -  	bit 7,a 
  105 D1:B6E0 C4 0C B4 D1 	call nz, sdcomp_set_fast
  106 D1:B6E4 F1 -  -  -  	pop af 
  107 D1:B6E5 -  -  -  -  	
  108 D1:B6E5 F5 -  -  -  	push af 
  109 D1:B6E6 CB 7F -  -  	bit 7,a 
  110 D1:B6E8 CC 1B B4 D1 	call z, sdcomp_reset_fast
  111 D1:B6EC F1 -  -  -  	pop af 
  112 D1:B6ED -  -  -  -  	
  113 D1:B6ED F5 -  -  -  	push af 
  114 D1:B6EE CB 77 -  -  	bit 6,a 
  115 D1:B6F0 C4 9C B3 D1 	call nz, sdcomp_set_offset
  116 D1:B6F4 F1 -  -  -  	pop af 
  117 D1:B6F5 -  -  -  -  	
  118 D1:B6F5 F5 -  -  -  	push af 
  119 D1:B6F6 CB 77 -  -  	bit 6,a 
  120 D1:B6F8 C4 AD B3 D1 	call nz, sdcomp_reset_offset
  121 D1:B6FC F1 -  -  -  	pop af 
  122 D1:B6FD -  -  -  -  	
  123 D1:B6FD F5 -  -  -  	push af 
  124 D1:B6FE CB 6F -  -  	bit 5,a 
  125 D1:B700 C4 BE B3 D1 	call nz, sdcomp_set_flip
  126 D1:B704 F1 -  -  -  	pop af 
  127 D1:B705 -  -  -  -  	
  128 D1:B705 F5 -  -  -  	push af 
  129 D1:B706 CB 6F -  -  	bit 5,a 
  130 D1:B708 C4 E5 B3 D1 	call nz, sdcomp_reset_flip
  131 D1:B70C F1 -  -  -  	pop af 
  132 D1:B70D -  -  -  -  	
  133 D1:B70D 2A 59 B6 D1 	ld hl, (decompress_tail_ptr) ;may be unnessecary
  134 D1:B711 -  -  -  -  	
  135 D1:B711 2B -  -  -  	dec hl 
  136 D1:B712 2B -  -  -  	dec hl 
  137 D1:B713 2B -  -  -  	dec hl 
  138 D1:B714 ED 17 -  -  	ld de,(hl) ;load decompress location
  139 D1:B716 -  -  -  -  
  140 D1:B716 2B -  -  -  	dec hl 
  141 D1:B717 2B -  -  -  	dec hl 
  142 D1:B718 2B -  -  -  	dec hl 
  143 D1:B719 ED 27 -  -  	ld hl,(hl) ;load sprite data ptr
  144 D1:B71B -  -  -  -  
  145 D1:B71B CD 11 B0 D1 	call sprite_decompress
  146 D1:B71F B7 -  -  -  	or a 
  147 D1:B720 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
  148 D1:B721 C3 AE B6 D1 	jp cd_done_decompressing
  149 D1:B725 -  -  -  -  
  150 D1:B725 -  -  -  -  
  151 D1:B725 -  -  -  -  check_for_decompress_calls:
  152 D1:B725 2A 35 AA D1 	ld hl, (cam_pos)
  153 D1:B729 EB -  -  -  	ex de,hl
  154 D1:B72A ED 5B 2F B7 
              D1 -  -  -  	ld de, (last_decompressed_cam_pos)
  155 D1:B72F -  -  -  -  	
  156 D1:B72F -  -  -  -  
  157 D1:B72F -  -  -  -  
  158 D1:B72F -  -  -  -  
  159 D1:B72F -  -  -  -  
  160 D1:B72F -  -  -  -  
  161 D1:B72F -  -  -  -  
  162 D1:B72F -  -  -  -  
  163 D1:B72F -  -  -  -  
  164 D1:B72F -  -  -  -  
  165 D1:B72F -  -  -  -  last_decompressed_cam_pos:
  166 D1:B72F 00 00 00 -  	.dl 0 ;camera position last time checking for decomp was called 
  167 D1:B732 -  -  -  -  	
  168 D1:B732 -  -  -  -  	
  169 D1:B732 -  -  -  -  
  170 D1:B732 -  -  -  -  
  171 D1:B732 -  -  -  -  
  172 D1:B732 -  -  -  -  
  173 D1:B732 -  -  -  -  
  174 D1:B732 -  -  -  -  
  175 D1:B732 -  -  -  -  
  176 D1:B732 -  -  -  -  
  177 D1:B732 -  -  -  -  
  178 D1:B732 -  -  -  -  
  179 D1:B732 -  -  -  -  
  180 D1:B732 -  -  -  -  
  181 D1:B732 -  -  -  -  
  182 D1:B732 -  -  -  -  
  183 D1:B732 -  -  -  -  
  184 D1:B732 -  -  -  -  
  185 D1:B732 -  -  -  -  
  186 D1:B732 -  -  -  -  
  187 D1:B732 -  -  -  -  
  188 D1:B732 -  -  -  -  
  189 D1:B732 -  -  -  -  
  190 D1:B732 -  -  -  -  
  191 D1:B732 -  -  -  -  
  192 D1:B732 -  -  -  -  
  193 D1:B732 -  -  -  -  
Listing for file "ascent.asm"
  283 D1:B732 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:B732 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:B732 -  -  -  -  	;.dl lastSprite
    3 D1:B732 -  -  -  -  	;.dl lastSpritecopy
    4 D1:B732 -  -  -  -  	;.dl sprite2
    5 D1:B732 -  -  -  -  	;.dl sprite3
    6 D1:B732 -  -  -  -  
    7 D1:B732 -  -  -  -  
    8 D1:B732 -  -  -  -  
    9 D1:B732 -  -  -  -  
   10 D1:B732 -  -  -  -  bg_data_frame:
   11 D1:B732 -  -  -  -  	;.db sprite data table pointer
   12 D1:B732 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:B732 -  -  -  -  	
   14 D1:B732 -  -  -  -  
   15 D1:B732 -  -  -  -  bg_sprite_pointers_1:
   16 D1:B732 -  -  -  -  	;.dl testBG1
   17 D1:B732 -  -  -  -  	;.dl testBG1;h = 7
   18 D1:B732 -  -  -  -  	;.dl testBG2;h = 5
   19 D1:B732 -  -  -  -  	;.dl testBG3;h = 0
   20 D1:B732 -  -  -  -  	;.dl testBG4
   21 D1:B732 -  -  -  -  
   22 D1:B732 -  -  -  -  bg_data_frame_0:
   23 D1:B732 32 B7 D1 -  	.dl bg_sprite_pointers_1 
   24 D1:B735 C8 07 05 00 	.db 200,7,5,0
   25 D1:B739 -  -  -  -  	;upper 
   26 D1:B739 -  -  -  -  bg_data_frame_1:
   27 D1:B739 32 B7 D1 -  	.dl bg_sprite_pointers_1
   28 D1:B73C C8 07 05 01 	.db 200,7,5,1
   29 D1:B740 64 07 05 01 	.db 100,7,5,1
   30 D1:B744 08 07 05 01 	.db 8,7,5,1
   31 D1:B748 07 07 0A 01 	.db 7,7,10,1
   32 D1:B74C 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:B750 05 07 14 01 	.db 5,7,20,1;X
   34 D1:B754 05 05 19 02 	.db 5,5,25,2
   35 D1:B758 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:B75C 03 05 23 02 	.db 3,5,35,2;X
   37 D1:B760 00 05 28 02 	.db 0,5,40,2;X
   38 D1:B764 00 00 2D 03 	.db 0,0,45,3
   39 D1:B768 0A 00 32 03 	.db 10,0,50,3
   40 D1:B76C 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:B770 -  -  -  -  	
   42 D1:B770 -  -  -  -  bg_data_frame_2:
   43 D1:B770 32 B7 D1 -  	.dl bg_sprite_pointers_1
   44 D1:B773 FF 07 3C 01 	.db 255,7,60,1
   45 D1:B777 FE 07 41 01 	.db 254,7,65,1
   46 D1:B77B 64 05 46 02 	.db 100,5,70,2
   47 D1:B77F 64 00 4B 03 	.db 100,0,75,3
   48 D1:B783 32 07 50 00 	.db 50,7,80,0
   49 D1:B787 -  -  -  -  	
   50 D1:B787 -  -  -  -  	
Listing for file "ascent.asm"
  284 D1:B787 -  -  -  -  #include "FGLevelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\FGLevelData.txt"
    1 D1:B787 -  -  -  -  
    2 D1:B787 -  -  -  -  FG_sprite_table_1:
    3 D1:B787 -  -  -  -  	;.dl fg_sprite_1;9*4
    4 D1:B787 -  -  -  -  	;.dl fg_sprite_1
    5 D1:B787 -  -  -  -  	;.dl fg_sprite_2;8*8
    6 D1:B787 -  -  -  -  	;.dl fg_sprite_3;8*8 fast
    7 D1:B787 -  -  -  -  	;.dl fg_sprite_4;8*8 fast 
    8 D1:B787 -  -  -  -  	
    9 D1:B787 -  -  -  -  
   10 D1:B787 -  -  -  -  
   11 D1:B787 -  -  -  -  
   12 D1:B787 -  -  -  -  
   13 D1:B787 -  -  -  -  FG_Frame_2:
   14 D1:B787 87 B7 D1 -  	.dl FG_sprite_table_1
   15 D1:B78A 03 03 00 01 	.db 3,3,0,1
   16 D1:B78E 02 03 05 01 	.db 2,3,5,1;x
   17 D1:B792 01 03 0A 01 	.db 1,3,10,1;x
   18 D1:B796 02 07 0F 02 	.db 2,7,15,2;x
   19 D1:B79A 32 07 14 02 	.db 50,7,20,2
   20 D1:B79E 1E 07 19 03 	.db 30,7,25,3
   21 D1:B7A2 00 07 1E 03 	.db 0,7,30,3;x
   22 D1:B7A6 05 07 23 03 	.db 5,7,35,3;x
   23 D1:B7AA 03 07 28 04 	.db 3,7,40,4;x
   24 D1:B7AE 00 03 2D 00 	.db 0,3,45,0;x
   25 D1:B7B2 -  -  -  -  
   26 D1:B7B2 -  -  -  -  
   27 D1:B7B2 -  -  -  -  FG_Frame_1:
   28 D1:B7B2 -  -  -  -  	;.dl sprite table ptr
   29 D1:B7B2 -  -  -  -  	;.db y in frame, height-1, x, index 
   30 D1:B7B2 87 B7 D1 -  	.dl FG_sprite_table_1
   31 D1:B7B5 FF 03 3C 01 	.db 255,3,60,1
   32 D1:B7B9 FF 07 46 02 	.db 255,7,70,2
   33 D1:B7BD FF 07 4B 03 	.db 255,7,75,3
   34 D1:B7C1 FF 07 50 04 	.db 255,7,80,4
   35 D1:B7C5 FE 03 55 01 	.db 254,3,85,1
   36 D1:B7C9 FE 07 5A 04 	.db 254,7,90,4
   37 D1:B7CD C8 03 0A 01 	.db 200,3,10,1
   38 D1:B7D1 C8 07 0F 02 	.db 200,7,15,2
   39 D1:B7D5 C8 07 14 03 	.db 200,7,20,3
   40 D1:B7D9 32 07 0A 02 	.db 50,7,10,2
   41 D1:B7DD 0F 07 50 03 	.db 15,7,80,3
   42 D1:B7E1 10 07 41 03 	.db 16,7,65,3
   43 D1:B7E5 11 03 46 01 	.db 17,3,70,1
   44 D1:B7E9 09 07 0A 02 	.db 9,7,10,2
   45 D1:B7ED 08 07 14 02 	.db 8,7,20,2
   46 D1:B7F1 08 07 1E 03 	.db 8,7,30,3
   47 D1:B7F5 07 07 23 02 	.db 7,7,35,2
   48 D1:B7F9 06 07 28 02 	.db 6,7,40,2
   49 D1:B7FD 05 07 2D 02 	.db 5,7,45,2
   50 D1:B801 00 07 32 02 	.db 0,7,50,2
   51 D1:B805 04 07 37 03 	.db 4,7,55,3
   52 D1:B809 02 07 3C 04 	.db 2,7,60,4
   53 D1:B80D 01 03 41 00 	.db 1,3,65,0
   54 D1:B811 -  -  -  -  	
   55 D1:B811 -  -  -  -  
   56 D1:B811 -  -  -  -  FG_Frame_0:
   57 D1:B811 87 B7 D1 -  	.dl FG_sprite_table_1
   58 D1:B814 FF 03 46 01 	.db 255,3,70,1
   59 D1:B818 FF 07 4B 02 	.db 255,7,75,2
   60 D1:B81C FF 07 5F 03 	.db 255,7,95,3
   61 D1:B820 FF 07 50 04 	.db 255,7,80,4
   62 D1:B824 FE 03 78 01 	.db 254,3,120,1
   63 D1:B828 FE 07 7D 04 	.db 254,7,125,4
   64 D1:B82C C8 03 0A 01 	.db 200,3,10,1
   65 D1:B830 C8 07 0F 02 	.db 200,7,15,2
   66 D1:B834 C8 07 14 03 	.db 200,7,20,3
   67 D1:B838 C8 03 00 00 	.db 200,3,0,0
   68 D1:B83C -  -  -  -  	
   69 D1:B83C -  -  -  -  	
   70 D1:B83C -  -  -  -  	
   71 D1:B83C -  -  -  -  
   72 D1:B83C -  -  -  -  	
   73 D1:B83C -  -  -  -  	
   74 D1:B83C -  -  -  -  	
   75 D1:B83C -  -  -  -  	
   76 D1:B83C -  -  -  -  	
   77 D1:B83C -  -  -  -  	
   78 D1:B83C -  -  -  -  	
Listing for file "ascent.asm"
  285 D1:B83C -  -  -  -  
  286 D1:B83C -  -  -  -  #include "TestingSpriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingSpriteData.txt"
    1 D1:B83C -  -  -  -  
    2 D1:B83C -  -  -  -  
    3 D1:B83C -  -  -  -  
    4 D1:B83C -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
    5 D1:B83C -  -  -  -  Test_Sprite_1:
    6 D1:B83C 10 -  -  -  	.db %00010000
    7 D1:B83D 09 06 -  -  	.db 9,6
    8 D1:B83F 7C 86 -  -  	.db %01111100, %10000110
    9 D1:B841 F3 BF -  -  	.db %11110011, %10111111
   10 D1:B843 F0 E0 -  -  	.db %11110000, %11100000
   11 D1:B845 A8 -  -  -  	.db %10101000
   12 D1:B846 -  -  -  -  	
   13 D1:B846 64 -  -  -  	.db $64
   14 D1:B847 -  -  -  -  	
   15 D1:B847 AA -  -  -  	.db %10101010
   16 D1:B848 AA -  -  -  	.db %10101010
   17 D1:B849 AA -  -  -  	.db %10101010
   18 D1:B84A AA -  -  -  	.db %10101010
   19 D1:B84B AA -  -  -  	.db %10101010
   20 D1:B84C AA -  -  -  	.db %10101010
   21 D1:B84D AA -  -  -  	.db %10101010
   22 D1:B84E AA -  -  -  	.db %10101010
   23 D1:B84F AA -  -  -  	.db %10101010
   24 D1:B850 AA -  -  -  	.db %10101010
   25 D1:B851 -  -  -  -  	
   26 D1:B851 -  -  -  -  	
   27 D1:B851 -  -  -  -  ;0XXXXX00X
   28 D1:B851 -  -  -  -  ;0000XX0XX
   29 D1:B851 -  -  -  -  ;XX00XXX0X
   30 D1:B851 -  -  -  -  ;XXXXXXXXX
   31 D1:B851 -  -  -  -  ;0000XXX00
   32 D1:B851 -  -  -  -  ;000X0X0X0
   33 D1:B851 -  -  -  -  
   34 D1:B851 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 9 h = 6
   35 D1:B851 -  -  -  -  Test_Sprite_2:
   36 D1:B851 10 -  -  -  	.db %00010000
   37 D1:B852 09 06 -  -  	.db 9,6
   38 D1:B854 FF FF -  -  	.db %11111111, %11111111
   39 D1:B856 FF FF -  -  	.db %11111111, %11111111
   40 D1:B858 FF FF -  -  	.db %11111111, %11111111
   41 D1:B85A FC -  -  -  	.db %11111100
   42 D1:B85B -  -  -  -  	
   43 D1:B85B 01 -  -  -  	.db $01
   44 D1:B85C -  -  -  -  	
   45 D1:B85C AA -  -  -  	.db %10101010
   46 D1:B85D AA -  -  -  	.db %10101010
   47 D1:B85E AA -  -  -  	.db %10101010
   48 D1:B85F AA -  -  -  	.db %10101010
   49 D1:B860 AA -  -  -  	.db %10101010
   50 D1:B861 AA -  -  -  	.db %10101010
   51 D1:B862 AA -  -  -  	.db %10101010
   52 D1:B863 AA -  -  -  	.db %10101010
   53 D1:B864 AA -  -  -  	.db %10101010
   54 D1:B865 AA -  -  -  	.db %10101010
   55 D1:B866 AA -  -  -  	.db %10101010
   56 D1:B867 -  -  -  -  	
   57 D1:B867 -  -  -  -  	
   58 D1:B867 -  -  -  -  ;XXXXXXXXX
   59 D1:B867 -  -  -  -  ;XXXXXXXXX
   60 D1:B867 -  -  -  -  ;XXXXXXXXX
   61 D1:B867 -  -  -  -  ;XXXXXXXXX
   62 D1:B867 -  -  -  -  
   63 D1:B867 -  -  -  -  
   64 D1:B867 -  -  -  -  
   65 D1:B867 -  -  -  -  ;slow sprite, 1bpc, alpha  w = 8 h = 7
   66 D1:B867 -  -  -  -  Test_Sprite_3:
   67 D1:B867 10 -  -  -  	.db %00010000
   68 D1:B868 08 07 -  -  	.db 8,7
   69 D1:B86A FF FF -  -  	.db %11111111, %11111111
   70 D1:B86C FF 83 -  -  	.db %11111111, %10000011
   71 D1:B86E FB 01 -  -  	.db %11111011, %00000001
   72 D1:B870 80 -  -  -  	.db %10000000
   73 D1:B871 -  -  -  -  	
   74 D1:B871 64 -  -  -  	.db $64
   75 D1:B872 -  -  -  -  	
   76 D1:B872 AA -  -  -  	.db %10101010
   77 D1:B873 AA -  -  -  	.db %10101010
   78 D1:B874 AA -  -  -  	.db %10101010
   79 D1:B875 AA -  -  -  	.db %10101010
   80 D1:B876 AA -  -  -  	.db %10101010
   81 D1:B877 AA -  -  -  	.db %10101010
   82 D1:B878 AA -  -  -  	.db %10101010
   83 D1:B879 AA -  -  -  	.db %10101010
   84 D1:B87A AA -  -  -  	.db %10101010
   85 D1:B87B AA -  -  -  	.db %10101010
   86 D1:B87C AA -  -  -  	.db %10101010
   87 D1:B87D AA -  -  -  	.db %10101010
   88 D1:B87E -  -  -  -  	
   89 D1:B87E -  -  -  -  	
   90 D1:B87E -  -  -  -  
   91 D1:B87E -  -  -  -  ;slow, 3bpc, alpha, w = 16 h = 6
   92 D1:B87E -  -  -  -  Test_Sprite_4:
   93 D1:B87E 40 -  -  -  	.db %01000000
   94 D1:B87F 10 06 -  -  	.db 16,6
   95 D1:B881 3F F4 -  -  	.db %00111111, %11110100
   96 D1:B883 FF 00 -  -  	.db %11111111, %00000000
   97 D1:B885 55 55 -  -  	.db %01010101, %01010101
   98 D1:B887 03 8C -  -  	.db %00000011, %10001100
   99 D1:B889 20 F3 -  -  	.db %00100000, %11110011
  100 D1:B88B FC 4D -  -  	.db %11111100, %01001101
  101 D1:B88D -  -  -  -  	
  102 D1:B88D 13 68 AE -  	.db $13,$68,$AE
  103 D1:B890 -  -  -  -  	
  104 D1:B890 05 39 -  -  	.db %00000101,%00111001
  105 D1:B892 77 05 -  -  	.db %01110111,%00000101
  106 D1:B894 39 77 -  -  	.db %00111001,%01110111
  107 D1:B896 05 39 -  -  	.db %00000101,%00111001
  108 D1:B898 77 05 -  -  	.db %01110111,%00000101
  109 D1:B89A 39 77 -  -  	.db %00111001,%01110111
  110 D1:B89C 05 39 -  -  	.db %00000101,%00111001
  111 D1:B89E 77 05 -  -  	.db %01110111,%00000101
  112 D1:B8A0 39 77 -  -  	.db %00111001,%01110111
  113 D1:B8A2 05 39 -  -  	.db %00000101,%00111001
  114 D1:B8A4 77 05 -  -  	.db %01110111,%00000101
  115 D1:B8A6 39 77 -  -  	.db %00111001,%01110111
  116 D1:B8A8 05 39 -  -  	.db %00000101,%00111001
  117 D1:B8AA 77 05 -  -  	.db %01110111,%00000101
  118 D1:B8AC 39 77 -  -  	.db %00111001,%01110111
  119 D1:B8AE 05 39 -  -  	.db %00000101,%00111001
  120 D1:B8B0 77 05 -  -  	.db %01110111,%00000101
  121 D1:B8B2 39 77 -  -  	.db %00111001,%01110111
  122 D1:B8B4 05 39 -  -  	.db %00000101,%00111001
  123 D1:B8B6 77 05 -  -  	.db %01110111,%00000101
  124 D1:B8B8 39 77 -  -  	.db %00111001,%01110111
  125 D1:B8BA 05 39 -  -  	.db %00000101,%00111001
  126 D1:B8BC 77 05 -  -  	.db %01110111,%00000101
  127 D1:B8BE 39 77 -  -  	.db %00111001,%01110111
  128 D1:B8C0 05 39 -  -  	.db %00000101,%00111001
  129 D1:B8C2 77 05 -  -  	.db %01110111,%00000101
  130 D1:B8C4 39 77 -  -  	.db %00111001,%01110111
  131 D1:B8C6 05 39 -  -  	.db %00000101,%00111001
  132 D1:B8C8 77 05 -  -  	.db %01110111,%00000101
  133 D1:B8CA 39 77 -  -  	.db %00111001,%01110111
  134 D1:B8CC 05 39 -  -  	.db %00000101,%00111001
  135 D1:B8CE 77 05 -  -  	.db %01110111,%00000101
  136 D1:B8D0 39 77 -  -  	.db %00111001,%01110111
  137 D1:B8D2 05 39 -  -  	.db %00000101,%00111001
  138 D1:B8D4 77 05 -  -  	.db %01110111,%00000101
  139 D1:B8D6 39 77 -  -  	.db %00111001,%01110111
  140 D1:B8D8 05 39 -  -  	.db %00000101,%00111001
  141 D1:B8DA 77 05 -  -  	.db %01110111,%00000101
  142 D1:B8DC 39 77 -  -  	.db %00111001,%01110111
  143 D1:B8DE -  -  -  -  
  144 D1:B8DE -  -  -  -  
  145 D1:B8DE -  -  -  -  
  146 D1:B8DE -  -  -  -  Test_sprite_5: ;W = 11 h = 6, 2bpc 
  147 D1:B8DE 20 -  -  -  	.db %00100000
  148 D1:B8DF 0B 06 -  -  	.db 11,6
  149 D1:B8E1 1B -  -  -  	.db %00011011
  150 D1:B8E2 FA -  -  -  	.db %11111010
  151 D1:B8E3 AB -  -  -  	.db %10101011
  152 D1:B8E4 E0 -  -  -  	.db %11100000
  153 D1:B8E5 78 -  -  -  	.db %01111000
  154 D1:B8E6 00 -  -  -  	.db %00000000
  155 D1:B8E7 03 -  -  -  	.db %00000011
  156 D1:B8E8 07 -  -  -  	.db %00000111
  157 D1:B8E9 40 -  -  -  	.db %01000000
  158 D1:B8EA -  -  -  -  	
  159 D1:B8EA 67 59 -  -  	.db $67,89
  160 D1:B8EC 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  161 D1:B8EF 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  162 D1:B8F2 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  163 D1:B8F5 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  164 D1:B8F8 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  165 D1:B8FB 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  166 D1:B8FE 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  167 D1:B901 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  168 D1:B904 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  169 D1:B907 1B 1B 1B -  	.db %00011011, %00011011, %00011011
  170 D1:B90A -  -  -  -  	
  171 D1:B90A -  -  -  -  	
  172 D1:B90A -  -  -  -  	
  173 D1:B90A -  -  -  -  ;000xx0xxxxx
  174 D1:B90A -  -  -  -  ;xx0x0x0x0x0
  175 D1:B90A -  -  -  -  ;xxxxx000000
  176 D1:B90A -  -  -  -  ;xxxx0000000
  177 D1:B90A -  -  -  -  ;0000000000x
  178 D1:B90A -  -  -  -  ;x00000xxx0x
  179 D1:B90A -  -  -  -  	
  180 D1:B90A -  -  -  -  	
  181 D1:B90A -  -  -  -  	
  182 D1:B90A -  -  -  -  	
  183 D1:B90A -  -  -  -  	
  184 D1:B90A -  -  -  -  	
  185 D1:B90A -  -  -  -  
  186 D1:B90A -  -  -  -  Test_sprite_6: ;w = 6 h = 6, noalpha, 4bpc 
  187 D1:B90A 84 -  -  -  	.db %10000100
  188 D1:B90B 06 06 -  -  	.db 6,6
  189 D1:B90D 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  190 D1:B912 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  191 D1:B917 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  192 D1:B91C 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  193 D1:B921 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  194 D1:B926 01 23 45 67 
              89 -  -  -  	.db $01,$23,$45,$67,$89
  195 D1:B92B -  -  -  -  	
  196 D1:B92B -  -  -  -  
  197 D1:B92B -  -  -  -  Test_sprite_7: ;w=3 h=6 , 0bpc 
  198 D1:B92B 08 -  -  -  	.db %00001000
  199 D1:B92C 03 06 -  -  	.db 3,6
  200 D1:B92E E6 2B 80 -  	.db %11100110, %00101011,%10000000
  201 D1:B931 -  -  -  -  	
  202 D1:B931 33 -  -  -  	.db $33
  203 D1:B932 -  -  -  -  ;XXX
  204 D1:B932 -  -  -  -  ;00x
  205 D1:B932 -  -  -  -  ;x00
  206 D1:B932 -  -  -  -  ;0x0
  207 D1:B932 -  -  -  -  ;x0x
  208 D1:B932 -  -  -  -  ;xx0
  209 D1:B932 -  -  -  -  
  210 D1:B932 -  -  -  -  Test_sprite_8: ;w=2 h=6 , 0bpc 
  211 D1:B932 08 -  -  -  	.db %00001000
  212 D1:B933 02 08 -  -  	.db 2,8
  213 D1:B935 DB F5 -  -  	.db %11011011,%11110101
  214 D1:B937 -  -  -  -  	
  215 D1:B937 33 -  -  -  	.db $33
  216 D1:B938 -  -  -  -  
  217 D1:B938 -  -  -  -  ;XX
  218 D1:B938 -  -  -  -  ;0x 
  219 D1:B938 -  -  -  -  ;x0 
  220 D1:B938 -  -  -  -  ;xx 
  221 D1:B938 -  -  -  -  ;xx 
  222 D1:B938 -  -  -  -  ;xx 
  223 D1:B938 -  -  -  -  ;0x 
  224 D1:B938 -  -  -  -  ;0x
  225 D1:B938 -  -  -  -  
  226 D1:B938 -  -  -  -  Test_sprite_9: ;w=2 h=6 , 0bpc 
  227 D1:B938 0C -  -  -  	.db %00001100
  228 D1:B939 01 09 -  -  	.db 1,9
  229 D1:B93B 33 -  -  -  	.db $33
  230 D1:B93C -  -  -  -  
  231 D1:B93C -  -  -  -  
  232 D1:B93C -  -  -  -  
  233 D1:B93C -  -  -  -  
  234 D1:B93C -  -  -  -  
  235 D1:B93C -  -  -  -  
  236 D1:B93C -  -  -  -  
  237 D1:B93C -  -  -  -  
  238 D1:B93C -  -  -  -  
  239 D1:B93C -  -  -  -  
  240 D1:B93C -  -  -  -  
  241 D1:B93C -  -  -  -  
  242 D1:B93C -  -  -  -  
  243 D1:B93C -  -  -  -  
  244 D1:B93C -  -  -  -  Test_sprite_fast: ;w = 16, h = 8
  245 D1:B93C 10 -  -  -  	.db %00010000
  246 D1:B93D 10 08 -  -  	.db 16 , 8
  247 D1:B93F 0F FF -  -  	.db %00001111,%11111111
  248 D1:B941 3C F3 -  -  	.db %00111100,%11110011
  249 D1:B943 F0 3F -  -  	.db %11110000,%00111111
  250 D1:B945 FF FF -  -  	.db %11111111,%11111111
  251 D1:B947 CC CC -  -  	.db %11001100,%11001100
  252 D1:B949 33 33 -  -  	.db %00110011,%00110011
  253 D1:B94B C0 00 -  -  	.db %11000000,%00000000
  254 D1:B94D 03 C3 -  -  	.db %00000011,%11000011
  255 D1:B94F -  -  -  -  
  256 D1:B94F 64 -  -  -  	.db $64
  257 D1:B950 -  -  -  -  	
  258 D1:B950 AA -  -  -  	.db %10101010
  259 D1:B951 AA -  -  -  	.db %10101010
  260 D1:B952 AA -  -  -  	.db %10101010
  261 D1:B953 AA -  -  -  	.db %10101010
  262 D1:B954 AA -  -  -  	.db %10101010
  263 D1:B955 AA -  -  -  	.db %10101010
  264 D1:B956 AA -  -  -  	.db %10101010
  265 D1:B957 AA -  -  -  	.db %10101010
  266 D1:B958 AA -  -  -  	.db %10101010
  267 D1:B959 AA -  -  -  	.db %10101010
  268 D1:B95A AA -  -  -  	.db %10101010
  269 D1:B95B AA -  -  -  	.db %10101010
  270 D1:B95C AA -  -  -  	.db %10101010
  271 D1:B95D AA -  -  -  	.db %10101010
  272 D1:B95E AA -  -  -  	.db %10101010
  273 D1:B95F AA -  -  -  	.db %10101010
  274 D1:B960 AA -  -  -  	.db %10101010
  275 D1:B961 AA -  -  -  	.db %10101010
  276 D1:B962 AA -  -  -  	.db %10101010
  277 D1:B963 AA -  -  -  	.db %10101010
  278 D1:B964 AA -  -  -  	.db %10101010
  279 D1:B965 AA -  -  -  	.db %10101010
  280 D1:B966 -  -  -  -  
  281 D1:B966 -  -  -  -  
  282 D1:B966 -  -  -  -  
  283 D1:B966 -  -  -  -  
  284 D1:B966 -  -  -  -  
  285 D1:B966 -  -  -  -  
  286 D1:B966 -  -  -  -  
  287 D1:B966 -  -  -  -  
  288 D1:B966 -  -  -  -  
  289 D1:B966 -  -  -  -  
Listing for file "ascent.asm"
  287 D1:B966 -  -  -  -  #include "TestGeneratedSpriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestGeneratedSpriteData.txt"
    1 D1:B966 -  -  -  -  TestImage:
    2 D1:B966 40 -  -  -  	.db %01000000
    3 D1:B967 20 20 -  -  	.db 32, 32
    4 D1:B969 80 0F F0 01 
              00 7F FE 00 	.db %10000000, %00001111, %11110000, %00000001, %00000000, %01111111, %11111110, %00000000
    5 D1:B971 01 F3 CF 80 
              03 83 C1 C0 	.db %00000001, %11110011, %11001111, %10000000, %00000011, %10000011, %11000001, %11000000
    6 D1:B979 07 03 C0 E0 
              0C 03 C0 30 	.db %00000111, %00000011, %11000000, %11100000, %00001100, %00000011, %11000000, %00110000
    7 D1:B981 18 3F FC 18 
              38 3F FC 1C 	.db %00011000, %00111111, %11111100, %00011000, %00111000, %00111111, %11111100, %00011100
    8 D1:B989 30 3F FC 0C 
              60 3F FC 06 	.db %00110000, %00111111, %11111100, %00001100, %01100000, %00111111, %11111100, %00000110
    9 D1:B991 63 FF FF C6 
              63 FF FF C6 	.db %01100011, %11111111, %11111111, %11000110, %01100011, %11111111, %11111111, %11000110
   10 D1:B999 C3 FF FF C3 
              C3 FF FF C3 	.db %11000011, %11111111, %11111111, %11000011, %11000011, %11111111, %11111111, %11000011
   11 D1:B9A1 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   12 D1:B9A9 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   13 D1:B9B1 C3 FF FF C3 
              C3 FF FF C3 	.db %11000011, %11111111, %11111111, %11000011, %11000011, %11111111, %11111111, %11000011
   14 D1:B9B9 63 FF FF C6 
              63 FF FF C6 	.db %01100011, %11111111, %11111111, %11000110, %01100011, %11111111, %11111111, %11000110
   15 D1:B9C1 60 3F FC 06 
              30 3F FC 0C 	.db %01100000, %00111111, %11111100, %00000110, %00110000, %00111111, %11111100, %00001100
   16 D1:B9C9 38 3F FC 1C 
              18 3F FC 18 	.db %00111000, %00111111, %11111100, %00011100, %00011000, %00111111, %11111100, %00011000
   17 D1:B9D1 0C 03 C0 30 
              07 03 C0 E0 	.db %00001100, %00000011, %11000000, %00110000, %00000111, %00000011, %11000000, %11100000
   18 D1:B9D9 03 83 C1 C0 
              01 F3 CF 80 	.db %00000011, %10000011, %11000001, %11000000, %00000001, %11110011, %11001111, %10000000
   19 D1:B9E1 00 7F FE 00 
              80 0F F0 01 	.db %00000000, %01111111, %11111110, %00000000, %10000000, %00001111, %11110000, %00000001
   20 D1:B9E9 -  -  -  -  
   21 D1:B9E9 32 14 50 00 	.db %00110010, %00010100, %01010000, %00000000
   22 D1:B9ED -  -  -  -  
   23 D1:B9ED 00 00 00 00 
              00 49 24 92 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01001001, %00100100, %10010010
   24 D1:B9F5 00 00 92 92 
              44 90 01 29 	.db %00000000, %00000000, %10010010, %10010010, %01000100, %10010000, %00000001, %00101001
   25 D1:B9FD 24 48 04 A4 
              91 20 14 92 	.db %00100100, %01001000, %00000100, %10100100, %10010001, %00100000, %00010100, %10010010
   26 D1:BA05 20 16 DB 49 
              26 DB 20 12 	.db %00100000, %00010110, %11011011, %01001001, %00100110, %11011011, %00100000, %00010010
   27 D1:BA0D DB 69 24 DB 
              64 80 5B 6D 	.db %11011011, %01101001, %00100100, %11011011, %01100100, %10000000, %01011011, %01101101
   28 D1:BA15 24 9B 6C 80 
              5B 6D 24 9B 	.db %00100100, %10011011, %01101100, %10000000, %01011011, %01101101, %00100100, %10011011
   29 D1:BA1D 6C 80 4A 2A 
              49 0A 2A 49 	.db %01101100, %10000000, %01001010, %00101010, %01001001, %00001010, %00101010, %01001001
   30 D1:BA25 0A 28 80 51 
              46 49 11 46 	.db %00001010, %00101000, %10000000, %01010001, %01000110, %01001001, %00010001, %01000110
   31 D1:BA2D 49 11 44 80 
              4A 2A 49 0A 	.db %01001001, %00010001, %01000100, %10000000, %01001010, %00101010, %01001001, %00001010
   32 D1:BA35 2A 49 0A 28 
              80 51 46 49 	.db %00101010, %01001001, %00001010, %00101000, %10000000, %01010001, %01000110, %01001001
   33 D1:BA3D 11 46 49 11 
              44 80 52 49 	.db %00010001, %01000110, %01001001, %00010001, %01000100, %10000000, %01010010, %01001001
   34 D1:BA45 24 8A 2A 38 
              CA 29 24 92 	.db %00100100, %10001010, %00101010, %00111000, %11001010, %00101001, %00100100, %10010010
   35 D1:BA4D 48 80 52 49 
              24 91 45 C7 	.db %01001000, %10000000, %01010010, %01001001, %00100100, %10010001, %01000101, %11000111
   36 D1:BA55 11 45 24 92 
              48 80 52 49 	.db %00010001, %01000101, %00100100, %10010010, %01001000, %10000000, %01010010, %01001001
   37 D1:BA5D 24 8A 2A 38 
              CA 29 24 92 	.db %00100100, %10001010, %00101010, %00111000, %11001010, %00101001, %00100100, %10010010
   38 D1:BA65 48 80 52 49 
              24 91 45 C7 	.db %01001000, %10000000, %01010010, %01001001, %00100100, %10010001, %01000101, %11000111
   39 D1:BA6D 11 45 24 92 
              48 80 4A 2A 	.db %00010001, %01000101, %00100100, %10010010, %01001000, %10000000, %01001010, %00101010
   40 D1:BA75 49 0A 2A 49 
              0A 28 80 51 	.db %01001001, %00001010, %00101010, %01001001, %00001010, %00101000, %10000000, %01010001
   41 D1:BA7D 46 49 11 46 
              49 11 44 80 	.db %01000110, %01001001, %00010001, %01000110, %01001001, %00010001, %01000100, %10000000
   42 D1:BA85 4A 2A 49 0A 
              2A 49 0A 28 	.db %01001010, %00101010, %01001001, %00001010, %00101010, %01001001, %00001010, %00101000
   43 D1:BA8D 80 51 46 49 
              11 46 49 11 	.db %10000000, %01010001, %01000110, %01001001, %00010001, %01000110, %01001001, %00010001
   44 D1:BA95 44 80 5B 6D 
              24 9B 6C 80 	.db %01000100, %10000000, %01011011, %01101101, %00100100, %10011011, %01101100, %10000000
   45 D1:BA9D 5B 6D 24 9B 
              6C 80 4B 6D 	.db %01011011, %01101101, %00100100, %10011011, %01101100, %10000000, %01001011, %01101101
   46 D1:BAA5 A4 93 6D 92 
              01 6D B4 92 	.db %10100100, %10010011, %01101101, %10010010, %00000001, %01101101, %10110100, %10010010
   47 D1:BAAD 6D B2 01 49 
              22 01 29 24 	.db %01101101, %10110010, %00000001, %01001001, %00100010, %00000001, %00101001, %00100100
   48 D1:BAB5 48 04 A4 91 
              20 02 4A 49 	.db %01001000, %00000100, %10100100, %10010001, %00100000, %00000010, %01001010, %01001001
   49 D1:BABD 12 40 00 12 
              49 24 80 00 	.db %00010010, %01000000, %00000000, %00010010, %01001001, %00100100, %10000000, %00000000
   50 D1:BAC5 00 00 00 -  	.db %00000000, %00000000, %00000000
   51 D1:BAC8 -  -  -  -  
   52 D1:BAC8 -  -  -  -  
   53 D1:BAC8 -  -  -  -  testNoise1:
   54 D1:BAC8 08 -  -  -  	.db %00001000
   55 D1:BAC9 10 10 -  -  	.db 16, 16
   56 D1:BACB 1D 43 51 BF 
              F2 C3 B9 69 	.db %00011101, %01000011, %01010001, %10111111, %11110010, %11000011, %10111001, %01101001
   57 D1:BAD3 43 83 46 32 
              72 AE DA 64 	.db %01000011, %10000011, %01000110, %00110010, %01110010, %10101110, %11011010, %01100100
   58 D1:BADB 6D F1 63 5A 
              E1 B7 84 59 	.db %01101101, %11110001, %01100011, %01011010, %11100001, %10110111, %10000100, %01011001
   59 D1:BAE3 64 E1 89 3C 
              CE 51 D8 D8 	.db %01100100, %11100001, %10001001, %00111100, %11001110, %01010001, %11011000, %11011000
   60 D1:BAEB -  -  -  -  
   61 D1:BAEB 00 -  -  -  	.db %00000000
   62 D1:BAEC -  -  -  -  
   63 D1:BAEC -  -  -  -  
   64 D1:BAEC -  -  -  -  
   65 D1:BAEC -  -  -  -  TestImage5:
   66 D1:BAEC 24 -  -  -  	.db %00100100
   67 D1:BAED 10 10 -  -  	.db 16, 16
   68 D1:BAEF 31 24 -  -  	.db %00110001, %00100100
   69 D1:BAF1 -  -  -  -  
   70 D1:BAF1 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
   71 D1:BAF9 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
   72 D1:BB01 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
   73 D1:BB09 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
   74 D1:BB11 AA AA AA AA 
              AA AA AA AA 	.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010
   75 D1:BB19 AA AA AA AA 
              AA AA AA AA 	.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010
   76 D1:BB21 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   77 D1:BB29 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   78 D1:BB31 -  -  -  -  
   79 D1:BB31 -  -  -  -  
   80 D1:BB31 -  -  -  -  TestImage6:
   81 D1:BB31 24 -  -  -  	.db %00100100
   82 D1:BB32 10 10 -  -  	.db 16, 16
   83 D1:BB34 31 54 -  -  	.db %00110001, %01010100
   84 D1:BB36 -  -  -  -  
   85 D1:BB36 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
   86 D1:BB3E 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
   87 D1:BB46 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
   88 D1:BB4E 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
   89 D1:BB56 BB BB BB BB 
              EE EE EE EE 	.db %10111011, %10111011, %10111011, %10111011, %11101110, %11101110, %11101110, %11101110
   90 D1:BB5E BB BB BB BB 
              EE EE EE EE 	.db %10111011, %10111011, %10111011, %10111011, %11101110, %11101110, %11101110, %11101110
   91 D1:BB66 BB BB BB BB 
              EE EE EE EE 	.db %10111011, %10111011, %10111011, %10111011, %11101110, %11101110, %11101110, %11101110
   92 D1:BB6E BB BB BB BB 
              EE EE EE EE 	.db %10111011, %10111011, %10111011, %10111011, %11101110, %11101110, %11101110, %11101110
   93 D1:BB76 -  -  -  -  
   94 D1:BB76 -  -  -  -  
   95 D1:BB76 -  -  -  -  TestImage7:
   96 D1:BB76 20 -  -  -  	.db %00100000
   97 D1:BB77 10 10 -  -  	.db 16, 16
   98 D1:BB79 AA FF AA FF 
              AA C0 AA C0 	.db %10101010, %11111111, %10101010, %11111111, %10101010, %11000000, %10101010, %11000000
   99 D1:BB81 AA FF AA FF 
              AA C0 AA C0 	.db %10101010, %11111111, %10101010, %11111111, %10101010, %11000000, %10101010, %11000000
  100 D1:BB89 AA AA 55 55 
              FF FF FF FF 	.db %10101010, %10101010, %01010101, %01010101, %11111111, %11111111, %11111111, %11111111
  101 D1:BB91 40 02 FF FF 
              FF FF FF FF 	.db %01000000, %00000010, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  102 D1:BB99 -  -  -  -  
  103 D1:BB99 31 54 -  -  	.db %00110001, %01010100
  104 D1:BB9B -  -  -  -  
  105 D1:BB9B 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  106 D1:BBA3 00 55 55 55 
              55 55 55 55 	.db %00000000, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  107 D1:BBAB 55 55 AA AA 
              AA AA BB BB 	.db %01010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10111011, %10111011
  108 D1:BBB3 BB BB EE EE 
              EE EE FE EE 	.db %10111011, %10111011, %11101110, %11101110, %11101110, %11101110, %11111110, %11101110
  109 D1:BBBB EE EE EB BB 
              BB BB BE EE 	.db %11101110, %11101110, %11101011, %10111011, %10111011, %10111011, %10111110, %11101110
  110 D1:BBC3 EE EE E0 -  	.db %11101110, %11101110, %11100000
  111 D1:BBC6 -  -  -  -  
  112 D1:BBC6 -  -  -  -  
  113 D1:BBC6 -  -  -  -  TestImage3:
  114 D1:BBC6 08 -  -  -  	.db %00001000
  115 D1:BBC7 20 20 -  -  	.db 32, 32
  116 D1:BBC9 FF FF FF FF 
              80 70 0E 01 	.db %11111111, %11111111, %11111111, %11111111, %10000000, %01110000, %00001110, %00000001
  117 D1:BBD1 81 80 01 81 
              82 00 00 41 	.db %10000001, %10000000, %00000001, %10000001, %10000010, %00000000, %00000000, %01000001
  118 D1:BBD9 84 00 00 21 
              88 00 00 11 	.db %10000100, %00000000, %00000000, %00100001, %10001000, %00000000, %00000000, %00010001
  119 D1:BBE1 90 00 00 09 
              A0 00 00 05 	.db %10010000, %00000000, %00000000, %00001001, %10100000, %00000000, %00000000, %00000101
  120 D1:BBE9 A0 00 00 05 
              C0 00 00 03 	.db %10100000, %00000000, %00000000, %00000101, %11000000, %00000000, %00000000, %00000011
  121 D1:BBF1 C0 00 00 03 
              C0 00 00 03 	.db %11000000, %00000000, %00000000, %00000011, %11000000, %00000000, %00000000, %00000011
  122 D1:BBF9 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  123 D1:BC01 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  124 D1:BC09 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  125 D1:BC11 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  126 D1:BC19 C0 00 00 03 
              C0 00 00 03 	.db %11000000, %00000000, %00000000, %00000011, %11000000, %00000000, %00000000, %00000011
  127 D1:BC21 C0 00 00 03 
              A0 00 00 05 	.db %11000000, %00000000, %00000000, %00000011, %10100000, %00000000, %00000000, %00000101
  128 D1:BC29 A0 00 00 05 
              90 00 00 09 	.db %10100000, %00000000, %00000000, %00000101, %10010000, %00000000, %00000000, %00001001
  129 D1:BC31 88 00 00 11 
              84 00 00 21 	.db %10001000, %00000000, %00000000, %00010001, %10000100, %00000000, %00000000, %00100001
  130 D1:BC39 82 00 00 41 
              81 80 01 81 	.db %10000010, %00000000, %00000000, %01000001, %10000001, %10000000, %00000001, %10000001
  131 D1:BC41 80 70 0E 01 
              FF FF FF FF 	.db %10000000, %01110000, %00001110, %00000001, %11111111, %11111111, %11111111, %11111111
  132 D1:BC49 -  -  -  -  
  133 D1:BC49 00 -  -  -  	.db %00000000
  134 D1:BC4A -  -  -  -  
  135 D1:BC4A -  -  -  -  
  136 D1:BC4A -  -  -  -  
  137 D1:BC4A -  -  -  -  TestImage2:
  138 D1:BC4A 08 -  -  -  	.db %00001000
  139 D1:BC4B 20 20 -  -  	.db 32, 32
  140 D1:BC4D FF FF FF FF 
              80 00 00 01 	.db %11111111, %11111111, %11111111, %11111111, %10000000, %00000000, %00000000, %00000001
  141 D1:BC55 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  142 D1:BC5D 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  143 D1:BC65 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  144 D1:BC6D 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  145 D1:BC75 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  146 D1:BC7D 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  147 D1:BC85 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  148 D1:BC8D 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  149 D1:BC95 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  150 D1:BC9D 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  151 D1:BCA5 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  152 D1:BCAD 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  153 D1:BCB5 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  154 D1:BCBD 80 00 00 01 
              80 00 00 01 	.db %10000000, %00000000, %00000000, %00000001, %10000000, %00000000, %00000000, %00000001
  155 D1:BCC5 80 00 00 01 
              FF FF FF FF 	.db %10000000, %00000000, %00000000, %00000001, %11111111, %11111111, %11111111, %11111111
  156 D1:BCCD -  -  -  -  
  157 D1:BCCD 00 -  -  -  	.db %00000000
  158 D1:BCCE -  -  -  -  
  159 D1:BCCE -  -  -  -  
  160 D1:BCCE -  -  -  -  
  161 D1:BCCE -  -  -  -  testNoise2:
  162 D1:BCCE 08 -  -  -  	.db %00001000
  163 D1:BCCF 10 10 -  -  	.db 16, 16
  164 D1:BCD1 1D 43 51 B8 
              F2 C3 B9 00 	.db %00011101, %01000011, %01010001, %10111000, %11110010, %11000011, %10111001, %00000000
  165 D1:BCD9 43 83 46 32 
              72 AE DA 40 	.db %01000011, %10000011, %01000110, %00110010, %01110010, %10101110, %11011010, %01000000
  166 D1:BCE1 6D F1 63 5A 
              E1 B7 84 40 	.db %01101101, %11110001, %01100011, %01011010, %11100001, %10110111, %10000100, %01000000
  167 D1:BCE9 64 E0 89 3C 
              CE 51 D8 D8 	.db %01100100, %11100000, %10001001, %00111100, %11001110, %01010001, %11011000, %11011000
  168 D1:BCF1 -  -  -  -  
  169 D1:BCF1 00 -  -  -  	.db %00000000
  170 D1:BCF2 -  -  -  -  
  171 D1:BCF2 -  -  -  -  
  172 D1:BCF2 -  -  -  -  
  173 D1:BCF2 -  -  -  -  testNoise4:
  174 D1:BCF2 08 -  -  -  	.db %00001000
  175 D1:BCF3 10 10 -  -  	.db 16, 16
  176 D1:BCF5 B6 E6 79 21 
              D7 24 3C 82 	.db %10110110, %11100110, %01111001, %00100001, %11010111, %00100100, %00111100, %10000010
  177 D1:BCFD 56 D9 60 B0 
              C2 00 3D 98 	.db %01010110, %11011001, %01100000, %10110000, %11000010, %00000000, %00111101, %10011000
  178 D1:BD05 7C 1B 45 76 
              8F A8 F7 26 	.db %01111100, %00011011, %01000101, %01110110, %10001111, %10101000, %11110111, %00100110
  179 D1:BD0D DC C9 1A 52 
              56 F5 82 74 	.db %11011100, %11001001, %00011010, %01010010, %01010110, %11110101, %10000010, %01110100
  180 D1:BD15 -  -  -  -  
  181 D1:BD15 00 -  -  -  	.db %00000000
  182 D1:BD16 -  -  -  -  
  183 D1:BD16 -  -  -  -  
  184 D1:BD16 -  -  -  -  
  185 D1:BD16 -  -  -  -  testNoise7:
  186 D1:BD16 08 -  -  -  	.db %00001000
  187 D1:BD17 11 0F -  -  	.db 17, 15
  188 D1:BD19 8E 5D 8B 65 
              AA 2F 90 9A 	.db %10001110, %01011101, %10001011, %01100101, %10101010, %00101111, %10010000, %10011010
  189 D1:BD21 8D B7 04 F4 
              C6 37 24 20 	.db %10001101, %10110111, %00000100, %11110100, %11000110, %00110111, %00100100, %00100000
  190 D1:BD29 DB F2 64 BE 
              54 3F 22 7B 	.db %11011011, %11110010, %01100100, %10111110, %01010100, %00111111, %00100010, %01111011
  191 D1:BD31 C3 21 99 30 
              F2 DA 6C E8 	.db %11000011, %00100001, %10011001, %00110000, %11110010, %11011010, %01101100, %11101000
  192 D1:BD39 -  -  -  -  
  193 D1:BD39 00 -  -  -  	.db %00000000
  194 D1:BD3A -  -  -  -  
  195 D1:BD3A -  -  -  -  
  196 D1:BD3A -  -  -  -  
  197 D1:BD3A -  -  -  -  testNoise10:
  198 D1:BD3A 08 -  -  -  	.db %00001000
  199 D1:BD3B 2D 13 -  -  	.db 45, 19
  200 D1:BD3D 12 73 D8 F4 
              B5 63 6D 43 	.db %00010010, %01110011, %11011000, %11110100, %10110101, %01100011, %01101101, %01000011
  201 D1:BD45 7D DE 06 7E 
              76 38 7F 99 	.db %01111101, %11011110, %00000110, %01111110, %01110110, %00111000, %01111111, %10011001
  202 D1:BD4D 2B C7 45 51 
              0A 6A 3C 80 	.db %00101011, %11000111, %01000101, %01010001, %00001010, %01101010, %00111100, %10000000
  203 D1:BD55 4C B0 41 AB 
              EE CC 8C 6E 	.db %01001100, %10110000, %01000001, %10101011, %11101110, %11001100, %10001100, %01101110
  204 D1:BD5D 75 F4 65 37 
              58 0F EF 6C 	.db %01110101, %11110100, %01100101, %00110111, %01011000, %00001111, %11101111, %01101100
  205 D1:BD65 79 71 AA C2 
              DE BF 9E E1 	.db %01111001, %01110001, %10101010, %11000010, %11011110, %10111111, %10011110, %11100001
  206 D1:BD6D 4E 00 CC 30 
              20 0A 98 CC 	.db %01001110, %00000000, %11001100, %00110000, %00100000, %00001010, %10011000, %11001100
  207 D1:BD75 3F 4C EE 1E 
              77 C2 B2 95 	.db %00111111, %01001100, %11101110, %00011110, %01110111, %11000010, %10110010, %10010101
  208 D1:BD7D 9F 9E 6E 54 
              CB D8 B5 6B 	.db %10011111, %10011110, %01101110, %01010100, %11001011, %11011000, %10110101, %01101011
  209 D1:BD85 55 B9 59 72 
              3E C1 C7 8A 	.db %01010101, %10111001, %01011001, %01110010, %00111110, %11000001, %11000111, %10001010
  210 D1:BD8D 4B 9E 06 77 
              42 58 70 C8 	.db %01001011, %10011110, %00000110, %01110111, %01000010, %01011000, %01110000, %11001000
  211 D1:BD95 67 06 58 E8 
              87 64 49 F6 	.db %01100111, %00000110, %01011000, %11101000, %10000111, %01100100, %01001001, %11110110
  212 D1:BD9D 95 BB 44 51 
              14 5F EC 03 	.db %10010101, %10111011, %01000100, %01010001, %00010100, %01011111, %11101100, %00000011
  213 D1:BDA5 59 6D D0 -  	.db %01011001, %01101101, %11010000
  214 D1:BDA8 -  -  -  -  
  215 D1:BDA8 00 -  -  -  	.db %00000000
  216 D1:BDA9 -  -  -  -  
  217 D1:BDA9 -  -  -  -  
  218 D1:BDA9 -  -  -  -  
  219 D1:BDA9 -  -  -  -  testNoise11:
  220 D1:BDA9 08 -  -  -  	.db %00001000
  221 D1:BDAA 2E 13 -  -  	.db 46, 19
  222 D1:BDAC CB 92 B4 7F 
              D1 7D 70 E7 	.db %11001011, %10010010, %10110100, %01111111, %11010001, %01111101, %01110000, %11100111
  223 D1:BDB4 30 A6 B4 9C 
              BC 50 74 EB 	.db %00110000, %10100110, %10110100, %10011100, %10111100, %01010000, %01110100, %11101011
  224 D1:BDBC 9F 98 0D B1 
              5E 39 30 7C 	.db %10011111, %10011000, %00001101, %10110001, %01011110, %00111001, %00110000, %01111100
  225 D1:BDC4 2C 24 52 81 
              58 9E DE BA 	.db %00101100, %00100100, %01010010, %10000001, %01011000, %10011110, %11011110, %10111010
  226 D1:BDCC 38 BF 33 6F 
              04 D8 D8 ED 	.db %00111000, %10111111, %00110011, %01101111, %00000100, %11011000, %11011000, %11101101
  227 D1:BDD4 6C E2 4B BD 
              FD 1D EA E7 	.db %01101100, %11100010, %01001011, %10111101, %11111101, %00011101, %11101010, %11100111
  228 D1:BDDC 0C 12 08 22 
              E2 9C 0A 8F 	.db %00001100, %00010010, %00001000, %00100010, %11100010, %10011100, %00001010, %10001111
  229 D1:BDE4 E8 ED AC B7 
              0C 37 FF 6D 	.db %11101000, %11101101, %10101100, %10110111, %00001100, %00110111, %11111111, %01101101
  230 D1:BDEC 17 41 C2 E7 
              CF BB 8C E1 	.db %00010111, %01000001, %11000010, %11100111, %11001111, %10111011, %10001100, %11100001
  231 D1:BDF4 6F 8A 36 93 
              B5 31 A0 69 	.db %01101111, %10001010, %00110110, %10010011, %10110101, %00110001, %10100000, %01101001
  232 D1:BDFC 3F BB 5D BE 
              D6 1D FF 76 	.db %00111111, %10111011, %01011101, %10111110, %11010110, %00011101, %11111111, %01110110
  233 D1:BE04 69 86 91 F4 
              B0 A9 78 6E 	.db %01101001, %10000110, %10010001, %11110100, %10110000, %10101001, %01111000, %01101110
  234 D1:BE0C 79 E8 9A 81 
              5D 5E C4 91 	.db %01111001, %11101000, %10011010, %10000001, %01011101, %01011110, %11000100, %10010001
  235 D1:BE14 7E CD 14 04 
              FF 80 -  -  	.db %01111110, %11001101, %00010100, %00000100, %11111111, %10000000
  236 D1:BE1A -  -  -  -  
  237 D1:BE1A 00 -  -  -  	.db %00000000
  238 D1:BE1B -  -  -  -  
  239 D1:BE1B -  -  -  -  
  240 D1:BE1B -  -  -  -  
  241 D1:BE1B -  -  -  -  testNoiseFast1:
  242 D1:BE1B 08 -  -  -  	.db %00001000
  243 D1:BE1C 20 20 -  -  	.db 32, 32
  244 D1:BE1E C3 FF 33 FC 
              C3 FF 33 FC 	.db %11000011, %11111111, %00110011, %11111100, %11000011, %11111111, %00110011, %11111100
  245 D1:BE26 FC 3C 33 00 
              FC 3C 33 00 	.db %11111100, %00111100, %00110011, %00000000, %11111100, %00111100, %00110011, %00000000
  246 D1:BE2E 33 30 CF C0 
              33 30 CF C0 	.db %00110011, %00110000, %11001111, %11000000, %00110011, %00110000, %11001111, %11000000
  247 D1:BE36 0C C3 3F CF 
              0C C3 3F CF 	.db %00001100, %11000011, %00111111, %11001111, %00001100, %11000011, %00111111, %11001111
  248 D1:BE3E 00 3C 00 CF 
              00 3C 00 CF 	.db %00000000, %00111100, %00000000, %11001111, %00000000, %00111100, %00000000, %11001111
  249 D1:BE46 33 C0 33 33 
              33 C0 33 33 	.db %00110011, %11000000, %00110011, %00110011, %00110011, %11000000, %00110011, %00110011
  250 D1:BE4E CC C3 0F C3 
              CC C3 0F C3 	.db %11001100, %11000011, %00001111, %11000011, %11001100, %11000011, %00001111, %11000011
  251 D1:BE56 3C F3 0C 30 
              3C F3 0C 30 	.db %00111100, %11110011, %00001100, %00110000, %00111100, %11110011, %00001100, %00110000
  252 D1:BE5E F3 03 CC 0C 
              F3 03 CC 0C 	.db %11110011, %00000011, %11001100, %00001100, %11110011, %00000011, %11001100, %00001100
  253 D1:BE66 3C FC FC 00 
              3C FC FC 00 	.db %00111100, %11111100, %11111100, %00000000, %00111100, %11111100, %11111100, %00000000
  254 D1:BE6E 0F 30 F0 0C 
              0F 30 F0 0C 	.db %00001111, %00110000, %11110000, %00001100, %00001111, %00110000, %11110000, %00001100
  255 D1:BE76 C0 CF 03 F0 
              C0 CF 03 F0 	.db %11000000, %11001111, %00000011, %11110000, %11000000, %11001111, %00000011, %11110000
  256 D1:BE7E 0C 0C 3C CC 
              0C 0C 3C CC 	.db %00001100, %00001100, %00111100, %11001100, %00001100, %00001100, %00111100, %11001100
  257 D1:BE86 30 CC 3F F0 
              30 CC 3F F0 	.db %00110000, %11001100, %00111111, %11110000, %00110000, %11001100, %00111111, %11110000
  258 D1:BE8E 00 CC 3C FC 
              00 CC 3C FC 	.db %00000000, %11001100, %00111100, %11111100, %00000000, %11001100, %00111100, %11111100
  259 D1:BE96 30 3C 3F C3 
              30 3C 3F C3 	.db %00110000, %00111100, %00111111, %11000011, %00110000, %00111100, %00111111, %11000011
  260 D1:BE9E -  -  -  -  
  261 D1:BE9E 00 -  -  -  	.db %00000000
  262 D1:BE9F -  -  -  -  
  263 D1:BE9F -  -  -  -  
  264 D1:BE9F -  -  -  -  
  265 D1:BE9F -  -  -  -  testNoiseFast2:
  266 D1:BE9F 08 -  -  -  	.db %00001000
  267 D1:BEA0 20 20 -  -  	.db 32, 32
  268 D1:BEA2 FC FF 3F CC 
              FC FF 3F CC 	.db %11111100, %11111111, %00111111, %11001100, %11111100, %11111111, %00111111, %11001100
  269 D1:BEAA 03 F0 0F CC 
              03 F0 0F CC 	.db %00000011, %11110000, %00001111, %11001100, %00000011, %11110000, %00001111, %11001100
  270 D1:BEB2 C3 C0 33 C0 
              C3 C0 33 C0 	.db %11000011, %11000000, %00110011, %11000000, %11000011, %11000000, %00110011, %11000000
  271 D1:BEBA 0C 30 30 CF 
              0C 30 30 CF 	.db %00001100, %00110000, %00110000, %11001111, %00001100, %00110000, %00110000, %11001111
  272 D1:BEC2 0C F0 CC 0C 
              0C F0 CC 0C 	.db %00001100, %11110000, %11001100, %00001100, %00001100, %11110000, %11001100, %00001100
  273 D1:BECA CC 3F 00 33 
              CC 3F 00 33 	.db %11001100, %00111111, %00000000, %00110011, %11001100, %00111111, %00000000, %00110011
  274 D1:BED2 C0 CC CF FC 
              C0 CC CF FC 	.db %11000000, %11001100, %11001111, %11111100, %11000000, %11001100, %11001111, %11111100
  275 D1:BEDA 30 FF FC 0C 
              30 FF FC 0C 	.db %00110000, %11111111, %11111100, %00001100, %00110000, %11111111, %11111100, %00001100
  276 D1:BEE2 FC C0 3C 0C 
              FC C0 3C 0C 	.db %11111100, %11000000, %00111100, %00001100, %11111100, %11000000, %00111100, %00001100
  277 D1:BEEA 3C F3 03 C0 
              3C F3 03 C0 	.db %00111100, %11110011, %00000011, %11000000, %00111100, %11110011, %00000011, %11000000
  278 D1:BEF2 0C 00 0C 3F 
              0C 00 0C 3F 	.db %00001100, %00000000, %00001100, %00111111, %00001100, %00000000, %00001100, %00111111
  279 D1:BEFA FC 0F 03 0C 
              FC 0F 03 0C 	.db %11111100, %00001111, %00000011, %00001100, %11111100, %00001111, %00000011, %00001100
  280 D1:BF02 3F C3 FF 33 
              3F C3 FF 33 	.db %00111111, %11000011, %11111111, %00110011, %00111111, %11000011, %11111111, %00110011
  281 D1:BF0A 3C C0 CF C0 
              3C C0 CF C0 	.db %00111100, %11000000, %11001111, %11000000, %00111100, %11000000, %11001111, %11000000
  282 D1:BF12 FC 3C C3 03 
              FC 3C C3 03 	.db %11111100, %00111100, %11000011, %00000011, %11111100, %00111100, %11000011, %00000011
  283 D1:BF1A CF 3F C0 FF 
              CF 3F C0 FF 	.db %11001111, %00111111, %11000000, %11111111, %11001111, %00111111, %11000000, %11111111
  284 D1:BF22 -  -  -  -  
  285 D1:BF22 00 -  -  -  	.db %00000000
  286 D1:BF23 -  -  -  -  
  287 D1:BF23 -  -  -  -  
  288 D1:BF23 -  -  -  -  
  289 D1:BF23 -  -  -  -  testNoiseFast3:
  290 D1:BF23 08 -  -  -  	.db %00001000
  291 D1:BF24 20 20 -  -  	.db 32, 32
  292 D1:BF26 0C 00 FC 0C 
              0C 00 FC 0C 	.db %00001100, %00000000, %11111100, %00001100, %00001100, %00000000, %11111100, %00001100
  293 D1:BF2E 3C FF C3 03 
              3C FF C3 03 	.db %00111100, %11111111, %11000011, %00000011, %00111100, %11111111, %11000011, %00000011
  294 D1:BF36 33 00 C3 0C 
              33 00 C3 0C 	.db %00110011, %00000000, %11000011, %00001100, %00110011, %00000000, %11000011, %00001100
  295 D1:BF3E F3 C3 30 3C 
              F3 C3 30 3C 	.db %11110011, %11000011, %00110000, %00111100, %11110011, %11000011, %00110000, %00111100
  296 D1:BF46 C3 0F 3C FF 
              C3 0F 3C FF 	.db %11000011, %00001111, %00111100, %11111111, %11000011, %00001111, %00111100, %11111111
  297 D1:BF4E FC 00 00 C0 
              FC 00 00 C0 	.db %11111100, %00000000, %00000000, %11000000, %11111100, %00000000, %00000000, %11000000
  298 D1:BF56 F3 C3 CC CF 
              F3 C3 CC CF 	.db %11110011, %11000011, %11001100, %11001111, %11110011, %11000011, %11001100, %11001111
  299 D1:BF5E F0 03 3C F3 
              F0 03 3C F3 	.db %11110000, %00000011, %00111100, %11110011, %11110000, %00000011, %00111100, %11110011
  300 D1:BF66 CC 0F FC C3 
              CC 0F FC C3 	.db %11001100, %00001111, %11111100, %11000011, %11001100, %00001111, %11111100, %11000011
  301 D1:BF6E F0 FC 3C 30 
              F0 FC 3C 30 	.db %11110000, %11111100, %00111100, %00110000, %11110000, %11111100, %00111100, %00110000
  302 D1:BF76 30 F0 C0 F0 
              30 F0 C0 F0 	.db %00110000, %11110000, %11000000, %11110000, %00110000, %11110000, %11000000, %11110000
  303 D1:BF7E 3C CC FC C3 
              3C CC FC C3 	.db %00111100, %11001100, %11111100, %11000011, %00111100, %11001100, %11111100, %11000011
  304 D1:BF86 30 F0 F0 3F 
              30 F0 F0 3F 	.db %00110000, %11110000, %11110000, %00111111, %00110000, %11110000, %11110000, %00111111
  305 D1:BF8E C3 30 F3 0C 
              C3 30 F3 0C 	.db %11000011, %00110000, %11110011, %00001100, %11000011, %00110000, %11110011, %00001100
  306 D1:BF96 CC 0F 30 CF 
              CC 0F 30 CF 	.db %11001100, %00001111, %00110000, %11001111, %11001100, %00001111, %00110000, %11001111
  307 D1:BF9E 0F 0F 3C 03 
              0F 0F 3C 03 	.db %00001111, %00001111, %00111100, %00000011, %00001111, %00001111, %00111100, %00000011
  308 D1:BFA6 -  -  -  -  
  309 D1:BFA6 00 -  -  -  	.db %00000000
  310 D1:BFA7 -  -  -  -  
  311 D1:BFA7 -  -  -  -  
  312 D1:BFA7 -  -  -  -  
Listing for file "ascent.asm"
  288 D1:BFA7 -  -  -  -  #include "Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Data.txt"
    1 D1:BFA7 -  -  -  -  Banana1:
    2 D1:BFA7 20 -  -  -  	.db %00100000
    3 D1:BFA8 18 18 -  -  	.db 24, 24
    4 D1:BFAA E0 00 00 FC 
              00 00 7E 00 	.db %11100000, %00000000, %00000000, %11111100, %00000000, %00000000, %01111110, %00000000
    5 D1:BFB2 00 7F 00 00 
              7F 80 00 7F 	.db %00000000, %01111111, %00000000, %00000000, %01111111, %10000000, %00000000, %01111111
    6 D1:BFBA 80 00 7F 80 
              00 7F C0 00 	.db %10000000, %00000000, %01111111, %10000000, %00000000, %01111111, %11000000, %00000000
    7 D1:BFC2 7F E0 00 7F 
              F0 00 7F F8 	.db %01111111, %11100000, %00000000, %01111111, %11110000, %00000000, %01111111, %11111000
    8 D1:BFCA 00 3F FC 00 
              3F FF 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00111111, %11111111, %00000000, %00111111
    9 D1:BFD2 FF C0 1F FF 
              F0 0F FF F8 	.db %11111111, %11000000, %00011111, %11111111, %11110000, %00001111, %11111111, %11111000
   10 D1:BFDA 0F FF F8 07 
              FF FC 03 FF 	.db %00001111, %11111111, %11111000, %00000111, %11111111, %11111100, %00000011, %11111111
   11 D1:BFE2 FF 03 FF FF 
              01 FF FF 00 	.db %11111111, %00000011, %11111111, %11111111, %00000001, %11111111, %11111111, %00000000
   12 D1:BFEA 7F FF 00 7F 
              FF 00 1F FE 	.db %01111111, %11111111, %00000000, %01111111, %11111111, %00000000, %00011111, %11111110
   13 D1:BFF2 -  -  -  -  
   14 D1:BFF2 01 20 -  -  	.db %00000001, %00100000
   15 D1:BFF4 -  -  -  -  
   16 D1:BFF4 00 01 40 95 
              AA 56 A9 56 	.db %00000000, %00000001, %01000000, %10010101, %10101010, %01010110, %10101001, %01010110
   17 D1:BFFC AA 56 AA 56 
              AA 95 AA A9 	.db %10101010, %01010110, %10101010, %01010110, %10101010, %10010101, %10101010, %10101001
   18 D1:C004 5A AA A5 5A 
              5A A5 6A 6A 	.db %01011010, %10101010, %10100101, %01011010, %01011010, %10100101, %01101010, %01101010
   19 D1:C00C A5 6A 9A A9 
              55 A9 6A A9 	.db %10100101, %01101010, %10011010, %10101001, %01010101, %10101001, %01101010, %10101001
   20 D1:C014 56 A9 6A AA 
              55 AA AA AA 	.db %01010110, %10101001, %01101010, %10101010, %01010101, %10101010, %10101010, %10101010
   21 D1:C01C A5 5A A9 6A 
              AA 56 AA 5A 	.db %10100101, %01011010, %10101001, %01101010, %10101010, %01010110, %10101010, %01011010
   22 D1:C024 AA 56 AA AA 
              AA 95 5A AA 	.db %10101010, %01010110, %10101010, %10101010, %10101010, %10010101, %01011010, %10101010
   23 D1:C02C 56 AA 95 AA 
              A9 56 A5 AA 	.db %01010110, %10101010, %10010101, %10101010, %10101001, %01010110, %10100101, %10101010
   24 D1:C034 AA 96 95 6A 
              AA AA 55 55 	.db %10101010, %10010110, %10010101, %01101010, %10101010, %10101010, %01010101, %01010101
   25 D1:C03C 55 40 -  -  	.db %01010101, %01000000
   26 D1:C03E -  -  -  -  
   27 D1:C03E -  -  -  -  
   28 D1:C03E -  -  -  -  Banana1Large:
   29 D1:C03E 20 -  -  -  	.db %00100000
   30 D1:C03F 2E 2E -  -  	.db 46, 46
   31 D1:C041 FC 00 00 00 
              00 03 F0 00 	.db %11111100, %00000000, %00000000, %00000000, %00000000, %00000011, %11110000, %00000000
   32 D1:C049 00 00 00 0F 
              FF 00 00 00 	.db %00000000, %00000000, %00000000, %00001111, %11111111, %00000000, %00000000, %00000000
   33 D1:C051 00 3F FC 00 
              00 00 00 3F 	.db %00000000, %00111111, %11111100, %00000000, %00000000, %00000000, %00000000, %00111111
   34 D1:C059 F0 00 00 00 
              00 FF C0 00 	.db %11110000, %00000000, %00000000, %00000000, %00000000, %11111111, %11000000, %00000000
   35 D1:C061 00 00 03 FF 
              C0 00 00 00 	.db %00000000, %00000000, %00000011, %11111111, %11000000, %00000000, %00000000, %00000000
   36 D1:C069 0F FF 00 00 
              00 00 3F FF 	.db %00001111, %11111111, %00000000, %00000000, %00000000, %00000000, %00111111, %11111111
   37 D1:C071 00 00 00 00 
              FF FC 00 00 	.db %00000000, %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000
   38 D1:C079 00 03 FF F0 
              00 00 00 0F 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000000, %00000000, %00001111
   39 D1:C081 FF C0 00 00 
              00 3F FF 00 	.db %11111111, %11000000, %00000000, %00000000, %00000000, %00111111, %11111111, %00000000
   40 D1:C089 00 00 00 FF 
              FC 00 00 00 	.db %00000000, %00000000, %00000000, %11111111, %11111100, %00000000, %00000000, %00000000
   41 D1:C091 03 FF FC 00 
              00 00 0F FF 	.db %00000011, %11111111, %11111100, %00000000, %00000000, %00000000, %00001111, %11111111
   42 D1:C099 F0 00 00 00 
              3F FF F0 00 	.db %11110000, %00000000, %00000000, %00000000, %00111111, %11111111, %11110000, %00000000
   43 D1:C0A1 00 00 FF FF 
              C0 00 00 03 	.db %00000000, %00000000, %11111111, %11111111, %11000000, %00000000, %00000000, %00000011
   44 D1:C0A9 FF FF C0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11000000, %00000000, %00000000, %00001111, %11111111, %11111111
   45 D1:C0B1 00 00 00 3F 
              FF FF C0 00 	.db %00000000, %00000000, %00000000, %00111111, %11111111, %11111111, %11000000, %00000000
   46 D1:C0B9 00 3F FF FF 
              00 00 00 FF 	.db %00000000, %00111111, %11111111, %11111111, %00000000, %00000000, %00000000, %11111111
   47 D1:C0C1 FF FF 00 00 
              03 FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %00000011, %11111111, %11111111, %11111111
   48 D1:C0C9 00 00 0F FF 
              FF FF 00 00 	.db %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000
   49 D1:C0D1 3F FF FF FF 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111, %11111111
   50 D1:C0D9 FF FF 00 00 
              FF FF FF FF 	.db %11111111, %11111111, %00000000, %00000000, %11111111, %11111111, %11111111, %11111111
   51 D1:C0E1 00 03 FF FF 
              FF FC 00 03 	.db %00000000, %00000011, %11111111, %11111111, %11111111, %11111100, %00000000, %00000011
   52 D1:C0E9 FF FF FF FC 
              00 0F FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00000000, %00001111, %11111111, %11111111
   53 D1:C0F1 FF F0 00 3F 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111, %11000000
   54 D1:C0F9 00 FF FF FF 
              FF 00 00 FF 	.db %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000, %11111111
   55 D1:C101 FF FF FF 00 
              03 FF FF FF 	.db %11111111, %11111111, %11111111, %00000000, %00000011, %11111111, %11111111, %11111111
   56 D1:C109 FC 00 03 FF 
              FF FF FF 00 	.db %11111100, %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %00000000
   57 D1:C111 0F FF FF FF 
              FC 00 3F FF 	.db %00001111, %11111111, %11111111, %11111111, %11111100, %00000000, %00111111, %11111111
   58 D1:C119 FF FF F0 00 
              3F FF FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00111111, %11111111, %11111111, %11111111
   59 D1:C121 C0 00 FF FF 
              FF FF 00 00 	.db %11000000, %00000000, %11111111, %11111111, %11111111, %11111111, %00000000, %00000000
   60 D1:C129 3F FF FF FC 
              00 00 FF FF 	.db %00111111, %11111111, %11111111, %11111100, %00000000, %00000000, %11111111, %11111111
   61 D1:C131 FF F0 00 03 
              FF FF FF C0 	.db %11111111, %11110000, %00000000, %00000011, %11111111, %11111111, %11111111, %11000000
   62 D1:C139 00 0F FF FF 
              FF 00 00 03 	.db %00000000, %00001111, %11111111, %11111111, %11111111, %00000000, %00000000, %00000011
   63 D1:C141 FF FF F0 00 
              00 0F FF FF 	.db %11111111, %11111111, %11110000, %00000000, %00000000, %00001111, %11111111, %11111111
   64 D1:C149 C0 -  -  -  	.db %11000000
   65 D1:C14A -  -  -  -  
   66 D1:C14A 01 20 -  -  	.db %00000001, %00100000
   67 D1:C14C -  -  -  -  
   68 D1:C14C 00 00 00 00 
              00 55 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %01010101, %00000000, %00000000
   69 D1:C154 55 00 0A 50 
              00 A5 5A AA 	.db %01010101, %00000000, %00001010, %01010000, %00000000, %10100101, %01011010, %10101010
   70 D1:C15C A5 5A AA A5 
              5A AA A5 55 	.db %10100101, %01011010, %10101010, %10100101, %01011010, %10101010, %10100101, %01010101
   71 D1:C164 AA AA 55 5A 
              AA A9 55 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010101, %10101010
   72 D1:C16C AA 95 5A AA 
              A9 55 AA AA 	.db %10101010, %10010101, %01011010, %10101010, %10101001, %01010101, %10101010, %10101010
   73 D1:C174 A9 5A AA AA 
              95 5A AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10010101, %01011010, %10101010, %10101010
   74 D1:C17C A9 5A AA AA 
              A9 55 AA AA 	.db %10101001, %01011010, %10101010, %10101010, %10101001, %01010101, %10101010, %10101010
   75 D1:C184 AA A9 5A AA 
              AA AA 95 55 	.db %10101010, %10101001, %01011010, %10101010, %10101010, %10101010, %10010101, %01010101
   76 D1:C18C AA 56 AA A9 
              55 AA 56 AA 	.db %10101010, %01010110, %10101010, %10101001, %01010101, %10101010, %01010110, %10101010
   77 D1:C194 A9 55 5A AA 
              6A AA A9 55 	.db %10101001, %01010101, %01011010, %10101010, %01101010, %10101010, %10101001, %01010101
   78 D1:C19C AA A6 AA AA 
              95 55 AA A9 	.db %10101010, %10100110, %10101010, %10101010, %10010101, %01010101, %10101010, %10101001
   79 D1:C1A4 6A AA A9 55 
              5A AA 96 AA 	.db %01101010, %10101010, %10101001, %01010101, %01011010, %10101010, %10010110, %10101010
   80 D1:C1AC AA 95 55 55 
              AA 95 6A AA 	.db %10101010, %10010101, %01010101, %01010101, %10101010, %10010101, %01101010, %10101010
   81 D1:C1B4 AA 95 55 5A 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %01011010, %10101001, %01010110, %10101010, %10101010
   82 D1:C1BC A9 55 55 AA 
              A9 56 AA AA 	.db %10101001, %01010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   83 D1:C1C4 AA 95 55 AA 
              A9 56 AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101001, %01010110, %10101010, %10101010
   84 D1:C1CC AA 95 55 AA 
              AA AA AA AA 	.db %10101010, %10010101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   85 D1:C1D4 AA A5 55 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010101, %10101010, %10101010, %10101010, %10101010, %10101010
   86 D1:C1DC AA A5 55 5A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   87 D1:C1E4 AA AA 55 5A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01011010, %10101010, %10101001, %01010110, %10101010
   88 D1:C1EC AA AA 55 6A 
              AA A9 56 AA 	.db %10101010, %10101010, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   89 D1:C1F4 AA A5 55 6A 
              AA A9 56 AA 	.db %10101010, %10100101, %01010101, %01101010, %10101010, %10101001, %01010110, %10101010
   90 D1:C1FC AA A5 56 AA 
              AA AA AA AA 	.db %10101010, %10100101, %01010110, %10101010, %10101010, %10101010, %10101010, %10101010
   91 D1:C204 AA A5 55 56 
              AA AA A9 55 	.db %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101001, %01010101
   92 D1:C20C 6A AA AA 55 
              6A AA AA 95 	.db %01101010, %10101010, %10101010, %01010101, %01101010, %10101010, %10101010, %10010101
   93 D1:C214 56 AA AA A5 
              56 AA AA AA 	.db %01010110, %10101010, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   94 D1:C21C 95 55 AA A5 
              56 AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01010110, %10101010, %10101010, %10101010
   95 D1:C224 95 55 AA A5 
              5A AA AA AA 	.db %10010101, %01010101, %10101010, %10100101, %01011010, %10101010, %10101010, %10101010
   96 D1:C22C A5 5A A5 5A 
              AA AA AA A5 	.db %10100101, %01011010, %10100101, %01011010, %10101010, %10101010, %10101010, %10100101
   97 D1:C234 5A A5 55 6A 
              AA AA AA AA 	.db %01011010, %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010
   98 D1:C23C A5 55 6A AA 
              AA AA AA A5 	.db %10100101, %01010101, %01101010, %10101010, %10101010, %10101010, %10101010, %10100101
   99 D1:C244 55 55 55 55 
              55 55 55 55 	.db %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101, %01010101
  100 D1:C24C 55 55 55 -  	.db %01010101, %01010101, %01010101
  101 D1:C24F -  -  -  -  
  102 D1:C24F -  -  -  -  
  103 D1:C24F -  -  -  -  Shittlogo:
  104 D1:C24F 20 -  -  -  	.db %00100000
  105 D1:C250 30 30 -  -  	.db 48, 48
  106 D1:C252 00 00 40 02 
              00 00 00 60 	.db %00000000, %00000000, %01000000, %00000010, %00000000, %00000000, %00000000, %01100000
  107 D1:C25A 70 0E 06 00 
              00 70 78 1E 	.db %01110000, %00001110, %00000110, %00000000, %00000000, %01110000, %01111000, %00011110
  108 D1:C262 0E 00 00 78 
              7C 3E 1E 00 	.db %00001110, %00000000, %00000000, %01111000, %01111100, %00111110, %00011110, %00000000
  109 D1:C26A 00 7E 7E 7E 
              7E 00 00 7F 	.db %00000000, %01111110, %01111110, %01111110, %01111110, %00000000, %00000000, %01111111
  110 D1:C272 FF FF FE 00 
              1C 3F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00011100, %00111111, %11111111, %11111111
  111 D1:C27A FC 78 1F 9F 
              FF FF F9 F8 	.db %11111100, %01111000, %00011111, %10011111, %11111111, %11111111, %11111001, %11111000
  112 D1:C282 1F CF FF FF 
              F3 F8 07 FF 	.db %00011111, %11001111, %11111111, %11111111, %11110011, %11111000, %00000111, %11111111
  113 D1:C28A FF FF F7 E0 
              03 FF FF FF 	.db %11111111, %11111111, %11110111, %11100000, %00000011, %11111111, %11111111, %11111111
  114 D1:C292 FF C0 01 FF 
              FF FF FF 80 	.db %11111111, %11000000, %00000001, %11111111, %11111111, %11111111, %11111111, %10000000
  115 D1:C29A F8 FF FF FF 
              FF 1F FF FF 	.db %11111000, %11111111, %11111111, %11111111, %11111111, %00011111, %11111111, %11111111
  116 D1:C2A2 FF FF FE FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111110, %11111111, %11111111, %11111111, %11111111, %11111111
  117 D1:C2AA FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  118 D1:C2B2 7F FF FF FF 
              FF FE 1F FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00011111, %11111111
  119 D1:C2BA FF FF FF F8 
              0F FF FF FF 	.db %11111111, %11111111, %11111111, %11111000, %00001111, %11111111, %11111111, %11111111
  120 D1:C2C2 FF F0 07 FF 
              FF FF FF C0 	.db %11111111, %11110000, %00000111, %11111111, %11111111, %11111111, %11111111, %11000000
  121 D1:C2CA 7F FF FF FF 
              FF FE FF FF 	.db %01111111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111111, %11111111
  122 D1:C2D2 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  123 D1:C2DA FF FF 7F FF 
              FF FF FF FE 	.db %11111111, %11111111, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  124 D1:C2E2 3F FF FF FF 
              FF FC 0F FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00001111, %11111111
  125 D1:C2EA FF FF FF E0 
              1F FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00011111, %11111111, %11111111, %11111111
  126 D1:C2F2 FF F8 7F FF 
              FF FF FF FE 	.db %11111111, %11111000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111110
  127 D1:C2FA FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  128 D1:C302 FF FF FF FF 
              67 FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %01100111, %11111111, %11111111, %11111111
  129 D1:C30A FF E6 0F FF 
              FF FF FF F0 	.db %11111111, %11100110, %00001111, %11111111, %11111111, %11111111, %11111111, %11110000
  130 D1:C312 1F FF FF FF 
              FF F8 3F FF 	.db %00011111, %11111111, %11111111, %11111111, %11111111, %11111000, %00111111, %11111111
  131 D1:C31A FF FF FF FC 
              3F FF FF FF 	.db %11111111, %11111111, %11111111, %11111100, %00111111, %11111111, %11111111, %11111111
  132 D1:C322 FF FC 23 FF 
              FF FF FF C4 	.db %11111111, %11111100, %00100011, %11111111, %11111111, %11111111, %11111111, %11000100
  133 D1:C32A 03 FF FF FF 
              FF C0 07 FF 	.db %00000011, %11111111, %11111111, %11111111, %11111111, %11000000, %00000111, %11111111
  134 D1:C332 FF FF FF E0 
              05 FF FF FF 	.db %11111111, %11111111, %11111111, %11100000, %00000101, %11111111, %11111111, %11111111
  135 D1:C33A FF E0 0F 3F 
              FF FF FC F0 	.db %11111111, %11100000, %00001111, %00111111, %11111111, %11111111, %11111100, %11110000
  136 D1:C342 0C 7F FF FF 
              FE 30 00 7F 	.db %00001100, %01111111, %11111111, %11111111, %11111110, %00110000, %00000000, %01111111
  137 D1:C34A FF FF FE 00 
              00 7F FF FF 	.db %11111111, %11111111, %11111110, %00000000, %00000000, %01111111, %11111111, %11111111
  138 D1:C352 FE 00 00 67 
              FE 7F E6 00 	.db %11111110, %00000000, %00000000, %01100111, %11111110, %01111111, %11100110, %00000000
  139 D1:C35A 00 07 DE 7B 
              E0 00 00 07 	.db %00000000, %00000111, %11011110, %01111011, %11100000, %00000000, %00000000, %00000111
  140 D1:C362 9E 79 E0 00 
              00 07 0C 30 	.db %10011110, %01111001, %11100000, %00000000, %00000000, %00000111, %00001100, %00110000
  141 D1:C36A E0 00 00 00 
              04 20 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000100, %00100000, %00000000, %00000000
  142 D1:C372 -  -  -  -  
  143 D1:C372 95 D0 -  -  	.db %10010101, %11010000
  144 D1:C374 -  -  -  -  
  145 D1:C374 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  146 D1:C37C 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  147 D1:C384 00 00 00 05 
              AA 94 00 00 	.db %00000000, %00000000, %00000000, %00000101, %10101010, %10010100, %00000000, %00000000
  148 D1:C38C 00 00 00 15 
              AA 95 40 00 	.db %00000000, %00000000, %00000000, %00010101, %10101010, %10010101, %01000000, %00000000
  149 D1:C394 00 00 00 05 
              55 6A A5 55 	.db %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101, %01010101
  150 D1:C39C 40 00 00 00 
              01 55 56 56 	.db %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %01010110, %01010110
  151 D1:C3A4 55 55 00 00 
              00 01 55 55 	.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000001, %01010101, %01010101
  152 D1:C3AC A5 69 55 55 
              00 00 05 55 	.db %10100101, %01101001, %01010101, %01010101, %00000000, %00000000, %00000101, %01010101
  153 D1:C3B4 6A A5 6A A5 
              55 40 00 55 	.db %01101010, %10100101, %01101010, %10100101, %01010101, %01000000, %00000000, %01010101
  154 D1:C3BC 5A AA 95 AA 
              A9 55 40 00 	.db %01011010, %10101010, %10010101, %10101010, %10101001, %01010101, %01000000, %00000000
  155 D1:C3C4 05 56 AA A9 
              5A AA A5 54 	.db %00000101, %01010110, %10101010, %10101001, %01011010, %10101010, %10100101, %01010100
  156 D1:C3CC 00 00 00 05 
              56 AA AA 56 	.db %00000000, %00000000, %00000000, %00000101, %01010110, %10101010, %10101010, %01010110
  157 D1:C3D4 AA AA 55 40 
              00 00 00 15 	.db %10101010, %10101010, %01010101, %01000000, %00000000, %00000000, %00000000, %00010101
  158 D1:C3DC 6A AA A9 5A 
              AA AA 55 40 	.db %01101010, %10101010, %10101001, %01011010, %10101010, %10101010, %01010101, %01000000
  159 D1:C3E4 00 00 00 55 
              AA AA A9 5A 	.db %00000000, %00000000, %00000000, %01010101, %10101010, %10101010, %10101001, %01011010
  160 D1:C3EC AA AA 95 40 
              00 00 05 56 	.db %10101010, %10101010, %10010101, %01000000, %00000000, %00000000, %00000101, %01010110
  161 D1:C3F4 AA AA A5 6A 
              AA AA 55 40 	.db %10101010, %10101010, %10100101, %01101010, %10101010, %10101010, %01010101, %01000000
  162 D1:C3FC 00 05 5A AA 
              AA A5 6A AA 	.db %00000000, %00000101, %01011010, %10101010, %10101010, %10100101, %01101010, %10101010
  163 D1:C404 AA 95 40 01 
              56 AA AA A9 	.db %10101010, %10010101, %01000000, %00000001, %01010110, %10101010, %10101010, %10101001
  164 D1:C40C 5A AA AA A5 
              50 15 5A AA 	.db %01011010, %10101010, %10101010, %10100101, %01010000, %00010101, %01011010, %10101010
  165 D1:C414 AA A5 6A AA 
              AA 95 50 05 	.db %10101010, %10100101, %01101010, %10101010, %10101010, %10010101, %01010000, %00000101
  166 D1:C41C 5A AA AA A9 
              5A AA AA A9 	.db %01011010, %10101010, %10101010, %10101001, %01011010, %10101010, %10101010, %10101001
  167 D1:C424 54 00 00 2A 
              AA AA AA 55 	.db %01010100, %00000000, %00000000, %00101010, %10101010, %10101010, %10101010, %01010101
  168 D1:C42C 6A AA AA AA 
              A0 00 00 2A 	.db %01101010, %10101010, %10101010, %10101010, %10100000, %00000000, %00000000, %00101010
  169 D1:C434 AA AA A5 55 
              56 AA AA AA 	.db %10101010, %10101010, %10100101, %01010101, %01010110, %10101010, %10101010, %10101010
  170 D1:C43C A0 00 00 AA 
              AA AA 55 55 	.db %10100000, %00000000, %00000000, %10101010, %10101010, %10101010, %01010101, %01010101
  171 D1:C444 56 AA AA AA 
              80 00 2A AA 	.db %01010110, %10101010, %10101010, %10101010, %10000000, %00000000, %00101010, %10101010
  172 D1:C44C AA 55 55 55 
              5A AA AA A0 	.db %10101010, %01010101, %01010101, %01010101, %01011010, %10101010, %10101010, %10100000
  173 D1:C454 02 AA AA 95 
              65 56 95 5A 	.db %00000010, %10101010, %10101010, %10010101, %01100101, %01010110, %10010101, %01011010
  174 D1:C45C AA AA 01 56 
              AA 95 A5 55 	.db %10101010, %10101010, %00000001, %01010110, %10101010, %10010101, %10100101, %01010101
  175 D1:C464 A5 56 AA 55 
              00 01 55 AA 	.db %10100101, %01010110, %10101010, %01010101, %00000000, %00000001, %01010101, %10101010
  176 D1:C46C 56 95 55 AA 
              55 A9 55 00 	.db %01010110, %10010101, %01010101, %10101010, %01010101, %10101001, %01010101, %00000000
  177 D1:C474 00 01 56 A5 
              6A 55 55 A9 	.db %00000000, %00000001, %01010110, %10100101, %01101010, %01010101, %01010101, %10101001
  178 D1:C47C 55 A5 50 00 
              00 01 56 95 	.db %01010101, %10100101, %01010000, %00000000, %00000000, %00000001, %01010110, %10010101
  179 D1:C484 69 59 55 6A 
              55 A5 50 00 	.db %01101001, %01011001, %01010101, %01101010, %01010101, %10100101, %01010000, %00000000
  180 D1:C48C 00 15 65 AA 
              56 5A 5A A5 	.db %00000000, %00010101, %01100101, %10101010, %01010110, %01011010, %01011010, %10100101
  181 D1:C494 65 54 00 05 
              5A AA 56 9A 	.db %01100101, %01010100, %00000000, %00000101, %01011010, %10101010, %01010110, %10011010
  182 D1:C49C 95 AA 59 54 
              00 01 55 AA 	.db %10010101, %10101010, %01011001, %01010100, %00000000, %00000001, %01010101, %10101010
  183 D1:C4A4 56 A5 A9 5A 
              A9 55 00 00 	.db %01010110, %10100101, %10101001, %01011010, %10101001, %01010101, %00000000, %00000000
  184 D1:C4AC 01 55 A9 5A 
              96 A5 6A 95 	.db %00000001, %01010101, %10101001, %01011010, %10010110, %10100101, %01101010, %10010101
  185 D1:C4B4 50 00 00 00 
              55 6A AA 96 	.db %01010000, %00000000, %00000000, %00000000, %01010101, %01101010, %10101010, %10010110
  186 D1:C4BC A9 6A 55 40 
              00 00 15 56 	.db %10101001, %01101010, %01010101, %01000000, %00000000, %00000000, %00010101, %01010110
  187 D1:C4C4 AA AA AA AA 
              55 50 00 01 	.db %10101010, %10101010, %10101010, %10101010, %01010101, %01010000, %00000000, %00000001
  188 D1:C4CC 55 5A AA AA 
              A9 55 50 00 	.db %01010101, %01011010, %10101010, %10101010, %10101001, %01010101, %01010000, %00000000
  189 D1:C4D4 00 15 55 5A 
              AA 95 55 50 	.db %00000000, %00010101, %01010101, %01011010, %10101010, %10010101, %01010101, %01010000
  190 D1:C4DC 00 00 00 55 
              55 AA 95 55 	.db %00000000, %00000000, %00000000, %01010101, %01010101, %10101010, %10010101, %01010101
  191 D1:C4E4 40 00 00 00 
              05 55 6A A5 	.db %01000000, %00000000, %00000000, %00000000, %00000101, %01010101, %01101010, %10100101
  192 D1:C4EC 55 40 00 00 
              00 01 55 AA 	.db %01010101, %01000000, %00000000, %00000000, %00000000, %00000001, %01010101, %10101010
  193 D1:C4F4 95 50 00 00 
              00 00 05 AA 	.db %10010101, %01010000, %00000000, %00000000, %00000000, %00000000, %00000101, %10101010
  194 D1:C4FC 94 00 00 00 
              00 00 00 00 	.db %10010100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  195 D1:C504 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  196 D1:C50C 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  197 D1:C514 00 00 00 00 
              00 -  -  -  	.db %00000000, %00000000, %00000000, %00000000, %00000000
  198 D1:C519 -  -  -  -  
  199 D1:C519 -  -  -  -  
  200 D1:C519 -  -  -  -  OrangeDot:
  201 D1:C519 08 -  -  -  	.db %00001000
  202 D1:C51A 0F 0F -  -  	.db 15, 15
  203 D1:C51C 03 C0 0F C0 
              7F E1 FF E7 	.db %00000011, %11000000, %00001111, %11000000, %01111111, %11100001, %11111111, %11100111
  204 D1:C524 FF DF FF FF 
              FF FF FF FF 	.db %11111111, %11011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  205 D1:C52C FF FF FF FF 
              FB FF E3 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111011, %11111111, %11100011, %11111111
  206 D1:C534 C3 FF 01 F8 
              00 -  -  -  	.db %11000011, %11111111, %00000001, %11111000, %00000000
  207 D1:C539 -  -  -  -  
  208 D1:C539 B0 -  -  -  	.db %10110000
  209 D1:C53A -  -  -  -  
  210 D1:C53A -  -  -  -  
  211 D1:C53A -  -  -  -  
  212 D1:C53A -  -  -  -  SquiggleL:
  213 D1:C53A 08 -  -  -  	.db %00001000
  214 D1:C53B 26 18 -  -  	.db 38, 24
  215 D1:C53D 00 00 07 FF 
              80 00 00 1F 	.db %00000000, %00000000, %00000111, %11111111, %10000000, %00000000, %00000000, %00011111
  216 D1:C545 FE 00 00 00 
              7F FF C0 00 	.db %11111110, %00000000, %00000000, %00000000, %01111111, %11111111, %11000000, %00000000
  217 D1:C54D 01 FF FF 00 
              00 07 FF FC 	.db %00000001, %11111111, %11111111, %00000000, %00000000, %00000111, %11111111, %11111100
  218 D1:C555 00 00 1F 1F 
              F0 00 00 7C 	.db %00000000, %00000000, %00011111, %00011111, %11110000, %00000000, %00000000, %01111100
  219 D1:C55D 7F C1 FC 01 
              F0 1F 07 F0 	.db %01111111, %11000001, %11111100, %00000001, %11110000, %00011111, %00000111, %11110000
  220 D1:C565 07 C0 7C 1F 
              C0 1F 01 F3 	.db %00000111, %11000000, %01111100, %00011111, %11000000, %00011111, %00000001, %11110011
  221 D1:C56D FF F8 7C 07 
              CF FF E1 F0 	.db %11111111, %11111000, %01111100, %00000111, %11001111, %11111111, %11100001, %11110000
  222 D1:C575 1F 3F FF FF 
              C0 00 FF FF 	.db %00011111, %00111111, %11111111, %11111111, %11000000, %00000000, %11111111, %11111111
  223 D1:C57D FF 00 0F E0 
              FF F0 00 3F 	.db %11111111, %00000000, %00001111, %11100000, %11111111, %11110000, %00000000, %00111111
  224 D1:C585 83 FF C0 00 
              FE 0F FF 00 	.db %10000011, %11111111, %11000000, %00000000, %11111110, %00001111, %11111111, %00000000
  225 D1:C58D 03 F8 0F FC 
              00 0F E0 3F 	.db %00000011, %11111000, %00001111, %11111100, %00000000, %00001111, %11100000, %00111111
  226 D1:C595 F0 00 3E 00 
              1F C0 00 F8 	.db %11110000, %00000000, %00111110, %00000000, %00011111, %11000000, %00000000, %11111000
  227 D1:C59D 00 7F 00 03 
              E0 01 FC 00 	.db %00000000, %01111111, %00000000, %00000011, %11100000, %00000001, %11111100, %00000000
  228 D1:C5A5 0F 80 00 00 
              00 3E 00 00 	.db %00001111, %10000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000000
  229 D1:C5AD 00 00 -  -  	.db %00000000, %00000000
  230 D1:C5AF -  -  -  -  
  231 D1:C5AF 50 -  -  -  	.db %01010000
  232 D1:C5B0 -  -  -  -  
  233 D1:C5B0 -  -  -  -  
  234 D1:C5B0 -  -  -  -  
  235 D1:C5B0 -  -  -  -  Banana5:
  236 D1:C5B0 20 -  -  -  	.db %00100000
  237 D1:C5B1 20 20 -  -  	.db 32, 32
  238 D1:C5B3 00 00 00 3C 
              00 00 00 FC 	.db %00000000, %00000000, %00000000, %00111100, %00000000, %00000000, %00000000, %11111100
  239 D1:C5BB 00 00 03 FC 
              00 00 07 FC 	.db %00000000, %00000000, %00000011, %11111100, %00000000, %00000000, %00000111, %11111100
  240 D1:C5C3 00 00 0F FC 
              00 00 3F FC 	.db %00000000, %00000000, %00001111, %11111100, %00000000, %00000000, %00111111, %11111100
  241 D1:C5CB 00 00 7F FC 
              00 00 FF F8 	.db %00000000, %00000000, %01111111, %11111100, %00000000, %00000000, %11111111, %11111000
  242 D1:C5D3 00 03 FF F0 
              00 07 FF F0 	.db %00000000, %00000011, %11111111, %11110000, %00000000, %00000111, %11111111, %11110000
  243 D1:C5DB 00 1F FF E0 
              00 3F FF E0 	.db %00000000, %00011111, %11111111, %11100000, %00000000, %00111111, %11111111, %11100000
  244 D1:C5E3 00 7F FF C0 
              01 FF FF 80 	.db %00000000, %01111111, %11111111, %11000000, %00000001, %11111111, %11111111, %10000000
  245 D1:C5EB 01 FF FF 00 
              03 FF FE 00 	.db %00000001, %11111111, %11111111, %00000000, %00000011, %11111111, %11111110, %00000000
  246 D1:C5F3 07 FF FE 00 
              0F FF FC 00 	.db %00000111, %11111111, %11111110, %00000000, %00001111, %11111111, %11111100, %00000000
  247 D1:C5FB 1F FF F8 00 
              1F FF F0 00 	.db %00011111, %11111111, %11111000, %00000000, %00011111, %11111111, %11110000, %00000000
  248 D1:C603 3F FF C0 00 
              3F FF 80 00 	.db %00111111, %11111111, %11000000, %00000000, %00111111, %11111111, %10000000, %00000000
  249 D1:C60B 7F FF 00 00 
              7F FC 00 00 	.db %01111111, %11111111, %00000000, %00000000, %01111111, %11111100, %00000000, %00000000
  250 D1:C613 FF F8 00 00 
              FF E0 00 00 	.db %11111111, %11111000, %00000000, %00000000, %11111111, %11100000, %00000000, %00000000
  251 D1:C61B FF C0 00 00 
              FF 80 00 00 	.db %11111111, %11000000, %00000000, %00000000, %11111111, %10000000, %00000000, %00000000
  252 D1:C623 FF 00 00 00 
              FC 00 00 00 	.db %11111111, %00000000, %00000000, %00000000, %11111100, %00000000, %00000000, %00000000
  253 D1:C62B F8 00 00 00 
              F8 00 00 00 	.db %11111000, %00000000, %00000000, %00000000, %11111000, %00000000, %00000000, %00000000
  254 D1:C633 -  -  -  -  
  255 D1:C633 01 20 -  -  	.db %00000001, %00100000
  256 D1:C635 -  -  -  -  
  257 D1:C635 00 50 05 A0 
              05 A8 01 6A 	.db %00000000, %01010000, %00000101, %10100000, %00000101, %10101000, %00000001, %01101010
  258 D1:C63D 6A 55 A9 AA 
              56 A9 AA 55 	.db %01101010, %01010101, %10101001, %10101010, %01010110, %10101001, %10101010, %01010101
  259 D1:C645 AA 66 A5 5A 
              A6 6A 56 AA 	.db %10101010, %01100110, %10100101, %01011010, %10100110, %01101010, %01010110, %10101010
  260 D1:C64D 66 A5 5A AA 
              A6 A9 5A AA 	.db %01100110, %10100101, %01011010, %10101010, %10100110, %10101001, %01011010, %10101010
  261 D1:C655 66 A9 56 AA 
              99 9A 55 6A 	.db %01100110, %10101001, %01010110, %10101010, %10011001, %10011010, %01010101, %01101010
  262 D1:C65D AA 99 A9 6A 
              AA AA 6A 5A 	.db %10101010, %10011001, %10101001, %01101010, %10101010, %10101010, %01101010, %01011010
  263 D1:C665 AA AA 9A 96 
              AA AA A6 65 	.db %10101010, %10101010, %10011010, %10010110, %10101010, %10101010, %10100110, %01100101
  264 D1:C66D 6A AA AA 66 
              55 AA AA A6 	.db %01101010, %10101010, %10101010, %01100110, %01010101, %10101010, %10101010, %10100110
  265 D1:C675 65 6A AA A9 
              99 56 AA A6 	.db %01100101, %01101010, %10101010, %10101001, %10011001, %01010110, %10101010, %10100110
  266 D1:C67D 66 5A AA 99 
              95 5A A6 66 	.db %01100110, %01011010, %10101010, %10011001, %10010101, %01011010, %10100110, %01100110
  267 D1:C685 95 AA 66 A5 
              6A 99 A5 5A 	.db %10010101, %10101010, %01100110, %10100101, %01101010, %10011001, %10100101, %01011010
  268 D1:C68D 99 A5 59 9A 
              56 66 55 02 	.db %10011001, %10100101, %01011001, %10011010, %01010110, %01100110, %01010101, %00000010
  269 D1:C695 55 00 60 04 
              00 -  -  -  	.db %01010101, %00000000, %01100000, %00000100, %00000000
  270 D1:C69A -  -  -  -  
  271 D1:C69A -  -  -  -  
  272 D1:C69A -  -  -  -  GreenCurl1:
  273 D1:C69A 08 -  -  -  	.db %00001000
  274 D1:C69B 20 20 -  -  	.db 32, 32
  275 D1:C69D 00 0F E0 00 
              00 1F E0 00 	.db %00000000, %00001111, %11100000, %00000000, %00000000, %00011111, %11100000, %00000000
  276 D1:C6A5 00 FF E0 00 
              03 FE 00 00 	.db %00000000, %11111111, %11100000, %00000000, %00000011, %11111110, %00000000, %00000000
  277 D1:C6AD 07 F8 00 00 
              07 E0 00 00 	.db %00000111, %11111000, %00000000, %00000000, %00000111, %11100000, %00000000, %00000000
  278 D1:C6B5 1F 80 00 00 
              3F 00 00 00 	.db %00011111, %10000000, %00000000, %00000000, %00111111, %00000000, %00000000, %00000000
  279 D1:C6BD 3E 07 FE 00 
              7C 0F FF F8 	.db %00111110, %00000111, %11111110, %00000000, %01111100, %00001111, %11111111, %11111000
  280 D1:C6C5 78 1F FF FC 
              F0 3F 07 FE 	.db %01111000, %00011111, %11111111, %11111100, %11110000, %00111111, %00000111, %11111110
  281 D1:C6CD F0 3C 00 3F 
              E0 78 00 1F 	.db %11110000, %00111100, %00000000, %00111111, %11100000, %01111000, %00000000, %00011111
  282 D1:C6D5 E0 78 00 07 
              E0 78 0E 07 	.db %11100000, %01111000, %00000000, %00000111, %11100000, %01111000, %00001110, %00000111
  283 D1:C6DD E0 78 0E 07 
              E0 38 0E 03 	.db %11100000, %01111000, %00001110, %00000111, %11100000, %00111000, %00001110, %00000011
  284 D1:C6E5 F0 3C 1E 03 
              F8 3E 3E 07 	.db %11110000, %00111100, %00011110, %00000011, %11111000, %00111110, %00111110, %00000111
  285 D1:C6ED F8 1F FE 07 
              78 1F FC 07 	.db %11111000, %00011111, %11111110, %00000111, %01111000, %00011111, %11111100, %00000111
  286 D1:C6F5 3C 0F F8 0F 
              3E 00 70 1F 	.db %00111100, %00001111, %11111000, %00001111, %00111110, %00000000, %01110000, %00011111
  287 D1:C6FD 1F 00 00 3E 
              0F 80 00 FE 	.db %00011111, %00000000, %00000000, %00111110, %00001111, %10000000, %00000000, %11111110
  288 D1:C705 0F C0 01 FC 
              07 C0 03 F8 	.db %00001111, %11000000, %00000001, %11111100, %00000111, %11000000, %00000011, %11111000
  289 D1:C70D 03 E0 0F E0 
              01 FF FF C0 	.db %00000011, %11100000, %00001111, %11100000, %00000001, %11111111, %11111111, %11000000
  290 D1:C715 00 FF FF 00 
              00 7F FE 00 	.db %00000000, %11111111, %11111111, %00000000, %00000000, %01111111, %11111110, %00000000
  291 D1:C71D -  -  -  -  
  292 D1:C71D 50 -  -  -  	.db %01010000
  293 D1:C71E -  -  -  -  
  294 D1:C71E -  -  -  -  
  295 D1:C71E -  -  -  -  
  296 D1:C71E -  -  -  -  Bluecurl:
  297 D1:C71E 08 -  -  -  	.db %00001000
  298 D1:C71F 30 30 -  -  	.db 48, 48
  299 D1:C721 00 00 FF C0 
              00 00 00 01 	.db %00000000, %00000000, %11111111, %11000000, %00000000, %00000000, %00000000, %00000001
  300 D1:C729 FF FE 00 00 
              00 07 C0 7F 	.db %11111111, %11111110, %00000000, %00000000, %00000000, %00000111, %11000000, %01111111
  301 D1:C731 00 00 00 1F 
              00 07 C0 00 	.db %00000000, %00000000, %00000000, %00011111, %00000000, %00000111, %11000000, %00000000
  302 D1:C739 00 3E 00 01 
              F0 00 00 78 	.db %00000000, %00111110, %00000000, %00000001, %11110000, %00000000, %00000000, %01111000
  303 D1:C741 00 00 78 00 
              00 F0 00 00 	.db %00000000, %00000000, %01111000, %00000000, %00000000, %11110000, %00000000, %00000000
  304 D1:C749 1C 00 01 E0 
              00 00 0C 00 	.db %00011100, %00000000, %00000001, %11100000, %00000000, %00000000, %00001100, %00000000
  305 D1:C751 01 C0 00 00 
              0E 00 01 80 	.db %00000001, %11000000, %00000000, %00000000, %00001110, %00000000, %00000001, %10000000
  306 D1:C759 00 00 07 00 
              03 80 00 00 	.db %00000000, %00000000, %00000111, %00000000, %00000011, %10000000, %00000000, %00000000
  307 D1:C761 03 80 03 03 
              FF 80 01 C0 	.db %00000011, %10000000, %00000011, %00000011, %11111111, %10000000, %00000001, %11000000
  308 D1:C769 03 0F FF C0 
              00 E0 07 1F 	.db %00000011, %00001111, %11111111, %11000000, %00000000, %11100000, %00000111, %00011111
  309 D1:C771 00 F0 00 F0 
              0E 18 00 78 	.db %00000000, %11110000, %00000000, %11110000, %00001110, %00011000, %00000000, %01111000
  310 D1:C779 00 30 0E 38 
              00 1C 00 38 	.db %00000000, %00110000, %00001110, %00111000, %00000000, %00011100, %00000000, %00111000
  311 D1:C781 1C 30 00 0E 
              00 38 1C 30 	.db %00011100, %00110000, %00000000, %00001110, %00000000, %00111000, %00011100, %00110000
  312 D1:C789 00 0E 00 1C 
              18 30 00 06 	.db %00000000, %00001110, %00000000, %00011100, %00011000, %00110000, %00000000, %00000110
  313 D1:C791 00 0C 38 30 
              00 07 00 0E 	.db %00000000, %00001100, %00111000, %00110000, %00000000, %00000111, %00000000, %00001110
  314 D1:C799 70 30 1F 03 
              80 0E 60 30 	.db %01110000, %00110000, %00011111, %00000011, %10000000, %00001110, %01100000, %00110000
  315 D1:C7A1 1F 01 C0 06 
              E0 30 18 00 	.db %00011111, %00000001, %11000000, %00000110, %11100000, %00110000, %00011000, %00000000
  316 D1:C7A9 C0 06 E0 30 
              18 00 C0 07 	.db %11000000, %00000110, %11100000, %00110000, %00011000, %00000000, %11000000, %00000111
  317 D1:C7B1 C0 30 18 00 
              C0 07 C0 30 	.db %11000000, %00110000, %00011000, %00000000, %11000000, %00000111, %11000000, %00110000
  318 D1:C7B9 18 00 C0 03 
              C0 30 1C 00 	.db %00011000, %00000000, %11000000, %00000011, %11000000, %00110000, %00011100, %00000000
  319 D1:C7C1 C0 03 C0 30 
              0C 00 C0 03 	.db %11000000, %00000011, %11000000, %00110000, %00001100, %00000000, %11000000, %00000011
  320 D1:C7C9 C0 30 0E 00 
              C0 07 C0 38 	.db %11000000, %00110000, %00001110, %00000000, %11000000, %00000111, %11000000, %00111000
  321 D1:C7D1 07 00 C0 07 
              00 18 07 81 	.db %00000111, %00000000, %11000000, %00000111, %00000000, %00011000, %00000111, %10000001
  322 D1:C7D9 C0 06 00 18 
              01 E7 80 06 	.db %11000000, %00000110, %00000000, %00011000, %00000001, %11100111, %10000000, %00000110
  323 D1:C7E1 00 1C 01 FF 
              80 06 00 0C 	.db %00000000, %00011100, %00000001, %11111111, %10000000, %00000110, %00000000, %00001100
  324 D1:C7E9 00 3C 00 0E 
              00 0E 00 00 	.db %00000000, %00111100, %00000000, %00001110, %00000000, %00001110, %00000000, %00000000
  325 D1:C7F1 00 0E 00 06 
              00 00 00 0C 	.db %00000000, %00001110, %00000000, %00000110, %00000000, %00000000, %00000000, %00001100
  326 D1:C7F9 00 07 00 00 
              00 1C 00 03 	.db %00000000, %00000111, %00000000, %00000000, %00000000, %00011100, %00000000, %00000011
  327 D1:C801 80 00 00 38 
              00 01 80 00 	.db %10000000, %00000000, %00000000, %00111000, %00000000, %00000001, %10000000, %00000000
  328 D1:C809 00 78 00 01 
              C0 00 00 F0 	.db %00000000, %01111000, %00000000, %00000001, %11000000, %00000000, %00000000, %11110000
  329 D1:C811 00 00 E0 00 
              01 E0 00 00 	.db %00000000, %00000000, %11100000, %00000000, %00000001, %11100000, %00000000, %00000000
  330 D1:C819 70 00 03 80 
              00 00 78 00 	.db %01110000, %00000000, %00000011, %10000000, %00000000, %00000000, %01111000, %00000000
  331 D1:C821 07 80 00 00 
              18 00 1F 00 	.db %00000111, %10000000, %00000000, %00000000, %00011000, %00000000, %00011111, %00000000
  332 D1:C829 00 00 1C 00 
              7C 00 00 00 	.db %00000000, %00000000, %00011100, %00000000, %01111100, %00000000, %00000000, %00000000
  333 D1:C831 1E 01 F8 00 
              00 00 07 F7 	.db %00011110, %00000001, %11111000, %00000000, %00000000, %00000000, %00000111, %11110111
  334 D1:C839 E0 00 00 00 
              03 FF 00 00 	.db %11100000, %00000000, %00000000, %00000000, %00000011, %11111111, %00000000, %00000000
  335 D1:C841 -  -  -  -  
  336 D1:C841 60 -  -  -  	.db %01100000
  337 D1:C842 -  -  -  -  
  338 D1:C842 -  -  -  -  
  339 D1:C842 -  -  -  -  
Listing for file "ascent.asm"
  289 D1:C842 -  -  -  -  ;#include "FG_Data.txt"
  290 D1:C842 -  -  -  -  ;#include "MG_Data.txt"
  291 D1:C842 -  -  -  -  ;#include "BG_Data.txt"
  292 D1:C842 -  -  -  -  #include "Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Palette_Setup.txt"
    1 D1:C842 -  -  -  -  setup_palette_1:
    2 D1:C842 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:C846 3E FF -  -  	ld a,%11111111
    4 D1:C848 77 -  -  -  	ld (hl),a 
    5 D1:C849 23 -  -  -  	inc hl
    6 D1:C84A 3E FF -  -  	ld a,%11111111
    7 D1:C84C 77 -  -  -  	ld (hl),a 
    8 D1:C84D 23 -  -  -  	inc hl
    9 D1:C84E 3E A6 -  -  	ld a,%10100110
   10 D1:C850 77 -  -  -  	ld (hl),a 
   11 D1:C851 23 -  -  -  	inc hl
   12 D1:C852 3E 62 -  -  	ld a,%01100010
   13 D1:C854 77 -  -  -  	ld (hl),a 
   14 D1:C855 23 -  -  -  	inc hl
   15 D1:C856 3E D7 -  -  	ld a,%11010111
   16 D1:C858 77 -  -  -  	ld (hl),a 
   17 D1:C859 23 -  -  -  	inc hl
   18 D1:C85A 3E 81 -  -  	ld a,%10000001
   19 D1:C85C 77 -  -  -  	ld (hl),a 
   20 D1:C85D 23 -  -  -  	inc hl
   21 D1:C85E 3E EF -  -  	ld a,%11101111
   22 D1:C860 77 -  -  -  	ld (hl),a 
   23 D1:C861 23 -  -  -  	inc hl
   24 D1:C862 3E 82 -  -  	ld a,%10000010
   25 D1:C864 77 -  -  -  	ld (hl),a 
   26 D1:C865 23 -  -  -  	inc hl
   27 D1:C866 3E 56 -  -  	ld a,%01010110
   28 D1:C868 77 -  -  -  	ld (hl),a 
   29 D1:C869 23 -  -  -  	inc hl
   30 D1:C86A 3E F0 -  -  	ld a,%11110000
   31 D1:C86C 77 -  -  -  	ld (hl),a 
   32 D1:C86D 23 -  -  -  	inc hl
   33 D1:C86E 3E C6 -  -  	ld a,%11000110
   34 D1:C870 77 -  -  -  	ld (hl),a 
   35 D1:C871 23 -  -  -  	inc hl
   36 D1:C872 3E 60 -  -  	ld a,%01100000
   37 D1:C874 77 -  -  -  	ld (hl),a 
   38 D1:C875 23 -  -  -  	inc hl
   39 D1:C876 3E F9 -  -  	ld a,%11111001
   40 D1:C878 77 -  -  -  	ld (hl),a 
   41 D1:C879 23 -  -  -  	inc hl
   42 D1:C87A 3E 0A -  -  	ld a,%00001010
   43 D1:C87C 77 -  -  -  	ld (hl),a 
   44 D1:C87D 23 -  -  -  	inc hl
   45 D1:C87E 3E 1A -  -  	ld a,%00011010
   46 D1:C880 77 -  -  -  	ld (hl),a 
   47 D1:C881 23 -  -  -  	inc hl
   48 D1:C882 3E 31 -  -  	ld a,%00110001
   49 D1:C884 77 -  -  -  	ld (hl),a 
   50 D1:C885 23 -  -  -  	inc hl
   51 D1:C886 3E FF -  -  	ld a,%11111111
   52 D1:C888 77 -  -  -  	ld (hl),a 
   53 D1:C889 23 -  -  -  	inc hl
   54 D1:C88A 3E FF -  -  	ld a,%11111111
   55 D1:C88C 77 -  -  -  	ld (hl),a 
   56 D1:C88D 23 -  -  -  	inc hl
   57 D1:C88E 3E 1F -  -  	ld a,%00011111
   58 D1:C890 77 -  -  -  	ld (hl),a 
   59 D1:C891 23 -  -  -  	inc hl
   60 D1:C892 3E 81 -  -  	ld a,%10000001
   61 D1:C894 77 -  -  -  	ld (hl),a 
   62 D1:C895 23 -  -  -  	inc hl
   63 D1:C896 3E 1F -  -  	ld a,%00011111
   64 D1:C898 77 -  -  -  	ld (hl),a 
   65 D1:C899 23 -  -  -  	inc hl
   66 D1:C89A 3E 81 -  -  	ld a,%10000001
   67 D1:C89C 77 -  -  -  	ld (hl),a 
   68 D1:C89D 23 -  -  -  	inc hl
   69 D1:C89E 3E 1F -  -  	ld a,%00011111
   70 D1:C8A0 77 -  -  -  	ld (hl),a 
   71 D1:C8A1 23 -  -  -  	inc hl
   72 D1:C8A2 3E 81 -  -  	ld a,%10000001
   73 D1:C8A4 77 -  -  -  	ld (hl),a 
   74 D1:C8A5 23 -  -  -  	inc hl
   75 D1:C8A6 3E 1F -  -  	ld a,%00011111
   76 D1:C8A8 77 -  -  -  	ld (hl),a 
   77 D1:C8A9 23 -  -  -  	inc hl
   78 D1:C8AA 3E 81 -  -  	ld a,%10000001
   79 D1:C8AC 77 -  -  -  	ld (hl),a 
   80 D1:C8AD 23 -  -  -  	inc hl
   81 D1:C8AE 3E 1F -  -  	ld a,%00011111
   82 D1:C8B0 77 -  -  -  	ld (hl),a 
   83 D1:C8B1 23 -  -  -  	inc hl
   84 D1:C8B2 3E 81 -  -  	ld a,%10000001
   85 D1:C8B4 77 -  -  -  	ld (hl),a 
   86 D1:C8B5 23 -  -  -  	inc hl
   87 D1:C8B6 3E C6 -  -  	ld a,%11000110
   88 D1:C8B8 77 -  -  -  	ld (hl),a 
   89 D1:C8B9 23 -  -  -  	inc hl
   90 D1:C8BA 3E 98 -  -  	ld a,%10011000
   91 D1:C8BC 77 -  -  -  	ld (hl),a 
   92 D1:C8BD 23 -  -  -  	inc hl
   93 D1:C8BE 3E 07 -  -  	ld a,%00000111
   94 D1:C8C0 77 -  -  -  	ld (hl),a 
   95 D1:C8C1 23 -  -  -  	inc hl
   96 D1:C8C2 3E 1D -  -  	ld a,%00011101
   97 D1:C8C4 77 -  -  -  	ld (hl),a 
   98 D1:C8C5 23 -  -  -  	inc hl
   99 D1:C8C6 C9 -  -  -  	ret 
Listing for file "ascent.asm"
  293 D1:C8C7 -  -  -  -  #include "Equates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Equates.txt"
    1 D1:C8C7 -  -  -  -  Banana1_Slow .equ $d40001
    2 D1:C8C7 -  -  -  -  Banana1_Slow_F .equ $d40119
    3 D1:C8C7 -  -  -  -  Banana1_Slow_O .equ $d40231
    4 D1:C8C7 -  -  -  -  Banana1_Slow_O_F .equ $d40349
    5 D1:C8C7 -  -  -  -  Banana1Large_Slow_O .equ $d40461
    6 D1:C8C7 -  -  -  -  Banana1Large_Slow_O_F .equ $d4077d
    7 D1:C8C7 -  -  -  -  Banana1Large_Fast .equ $d40a98
    8 D1:C8C7 -  -  -  -  Banana1Large_Fast_F .equ $d40d2a
    9 D1:C8C7 -  -  -  -  Banana1Large_BG .equ $d40fbb
   10 D1:C8C7 -  -  -  -  Banana1Large_BG_O .equ $d41800
   11 D1:C8C7 -  -  -  -  Banana1Large_BG_F .equ $d420a1
   12 D1:C8C7 -  -  -  -  Banana1Large_BG_O_F .equ $d428e6
   13 D1:C8C7 -  -  -  -  Shittlogo_Slow .equ $d43187
   14 D1:C8C7 -  -  -  -  Shittlogo_Slow_O .equ $d436b7
   15 D1:C8C7 -  -  -  -  OrangeDot_Slow .equ $d43bd3
   16 D1:C8C7 -  -  -  -  OrangeDot_Slow_O .equ $d43c7f
   17 D1:C8C7 -  -  -  -  OrangeDot_BG .equ $d43d2a
   18 D1:C8C7 -  -  -  -  OrangeDot_BG_O .equ $d43e1b
   19 D1:C8C7 -  -  -  -  SquiggleL_Slow .equ $d43f0d
   20 D1:C8C7 -  -  -  -  SquiggleL_Slow_F .equ $d440ad
   21 D1:C8C7 -  -  -  -  SquiggleL_Slow_O .equ $d4424d
   22 D1:C8C7 -  -  -  -  SquiggleL_Slow_O_F .equ $d443f1
   23 D1:C8C7 -  -  -  -  Banana5_BG .equ $d44595
   24 D1:C8C7 -  -  -  -  Banana5_BG_O .equ $d44996
   25 D1:C8C7 -  -  -  -  Banana5_BG_F .equ $d44dd7
   26 D1:C8C7 -  -  -  -  Banana5_BG_O_F .equ $d451d8
   27 D1:C8C7 -  -  -  -  GreenCurl1_BG .equ $d45619
   28 D1:C8C7 -  -  -  -  GreenCurl1_BG_O .equ $d45a1a
   29 D1:C8C7 -  -  -  -  GreenCurl1_BG_F .equ $d45e5b
   30 D1:C8C7 -  -  -  -  GreenCurl1_BG_O_F .equ $d4625c
   31 D1:C8C7 -  -  -  -  Bluecurl_BG .equ $d4669d
   32 D1:C8C7 -  -  -  -  Bluecurl_BG_O .equ $d46f9e
Listing for file "ascent.asm"
  294 D1:C8C7 -  -  -  -  ;#include "Decompress_Calls.txt"
  295 D1:C8C7 -  -  -  -  #include "Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\Sprite_Tables.txt"
    1 D1:C8C7 -  -  -  -  Sprite_Table_0:
    2 D1:C8C7 19 01 D4 -  	.dl Banana1_Slow_F
    3 D1:C8CA 61 04 D4 -  	.dl Banana1Large_Slow_O
    4 D1:C8CD 98 0A D4 -  	.dl Banana1Large_Fast
    5 D1:C8D0 7D 07 D4 -  	.dl Banana1Large_Slow_O_F
    6 D1:C8D3 01 00 D4 -  	.dl Banana1_Slow
    7 D1:C8D6 49 03 D4 -  	.dl Banana1_Slow_O_F
    8 D1:C8D9 2A 0D D4 -  	.dl Banana1Large_Fast_F
    9 D1:C8DC 31 02 D4 -  	.dl Banana1_Slow_O
   10 D1:C8DF B7 36 D4 -  	.dl Shittlogo_Slow_O
   11 D1:C8E2 87 31 D4 -  	.dl Shittlogo_Slow
   12 D1:C8E5 7F 3C D4 -  	.dl OrangeDot_Slow_O
   13 D1:C8E8 D3 3B D4 -  	.dl OrangeDot_Slow
   14 D1:C8EB 4D 42 D4 -  	.dl SquiggleL_Slow_O
   15 D1:C8EE AD 40 D4 -  	.dl SquiggleL_Slow_F
   16 D1:C8F1 0D 3F D4 -  	.dl SquiggleL_Slow
   17 D1:C8F4 F1 43 D4 -  	.dl SquiggleL_Slow_O_F
   18 D1:C8F7 -  -  -  -  
   19 D1:C8F7 -  -  -  -  Sprite_Table_1:
   20 D1:C8F7 E6 28 D4 -  	.dl Banana1Large_BG_O_F
   21 D1:C8FA 00 18 D4 -  	.dl Banana1Large_BG_O
   22 D1:C8FD BB 0F D4 -  	.dl Banana1Large_BG
   23 D1:C900 96 49 D4 -  	.dl Banana5_BG_O
   24 D1:C903 95 45 D4 -  	.dl Banana5_BG
   25 D1:C906 5C 62 D4 -  	.dl GreenCurl1_BG_O_F
   26 D1:C909 1A 5A D4 -  	.dl GreenCurl1_BG_O
   27 D1:C90C 5B 5E D4 -  	.dl GreenCurl1_BG_F
   28 D1:C90F 9E 6F D4 -  	.dl Bluecurl_BG_O
   29 D1:C912 A1 20 D4 -  	.dl Banana1Large_BG_F
   30 D1:C915 D7 4D D4 -  	.dl Banana5_BG_F
   31 D1:C918 9D 66 D4 -  	.dl Bluecurl_BG
   32 D1:C91B 1B 3E D4 -  	.dl OrangeDot_BG_O
   33 D1:C91E 19 56 D4 -  	.dl GreenCurl1_BG
   34 D1:C921 2A 3D D4 -  	.dl OrangeDot_BG
   35 D1:C924 D8 51 D4 -  	.dl Banana5_BG_O_F
   36 D1:C927 -  -  -  -  
   37 D1:C927 -  -  -  -  Sprite_Table_2:
   38 D1:C927 -  -  -  -  
Listing for file "ascent.asm"
  296 D1:C927 -  -  -  -  #include "TestingBGData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingBGData.txt"
    1 D1:C927 -  -  -  -  
    2 D1:C927 -  -  -  -  
    3 D1:C927 -  -  -  -  
    4 D1:C927 -  -  -  -  
    5 D1:C927 -  -  -  -  
    6 D1:C927 -  -  -  -  
    7 D1:C927 -  -  -  -  
    8 D1:C927 -  -  -  -  TS_1 .equ vram + (160* 0) + 1 ;h = 6
    9 D1:C927 -  -  -  -  TS_1_F .equ vram + (160* 2)	 + 1
   10 D1:C927 -  -  -  -  TS_1_O .equ vram + (160* 4)	 + 1
   11 D1:C927 -  -  -  -  TS_1_FO .equ vram + (160* 6)	 + 1
   12 D1:C927 -  -  -  -  TS_2 .equ vram + (160* 8)	 + 1 ;h=6
   13 D1:C927 -  -  -  -  TS_2_F .equ vram + (160* 10)	 + 1
   14 D1:C927 -  -  -  -  TS_2_O .equ vram + (160* 12)	 + 1
   15 D1:C927 -  -  -  -  TS_2_FO .equ vram + (160* 14)	 + 1
   16 D1:C927 -  -  -  -  
   17 D1:C927 -  -  -  -  TS_3 .equ vram + (160* 16)	 + 1
   18 D1:C927 -  -  -  -  TS_3_F .equ vram + (160* 18)	 + 1 ;h=7
   19 D1:C927 -  -  -  -  TS_3_O .equ vram + (160* 20)	 + 1
   20 D1:C927 -  -  -  -  TS_3_FO .equ vram + (160* 22)	 + 1
   21 D1:C927 -  -  -  -  
   22 D1:C927 -  -  -  -  
   23 D1:C927 -  -  -  -  TS_Fast .equ vram + (160* 24)	;h = 8
   24 D1:C927 -  -  -  -  ;even = fast, odd = slow
   25 D1:C927 -  -  -  -  
   26 D1:C927 -  -  -  -  test_decompress_sprites:
   27 D1:C927 21 3C B8 D1 	ld hl, Test_Sprite_1
   28 D1:C92B 11 01 00 D4 	ld de, TS_1 
   29 D1:C92F CD 11 B0 D1 	call sprite_decompress
   30 D1:C933 -  -  -  -  	
   31 D1:C933 21 51 B8 D1 	ld hl, Test_Sprite_2
   32 D1:C937 11 01 05 D4 	ld de, TS_2
   33 D1:C93B CD 11 B0 D1 	call sprite_decompress
   34 D1:C93F -  -  -  -  	
   35 D1:C93F 21 67 B8 D1 	ld hl, Test_Sprite_3
   36 D1:C943 11 01 0A D4 	ld de, TS_3 
   37 D1:C947 CD 11 B0 D1 	call sprite_decompress
   38 D1:C94B -  -  -  -  
   39 D1:C94B CD BE B3 D1 	call sdcomp_set_flip
   40 D1:C94F -  -  -  -  
   41 D1:C94F 21 3C B8 D1 	ld hl, Test_Sprite_1
   42 D1:C953 11 41 01 D4 	ld de, TS_1_F 
   43 D1:C957 CD 11 B0 D1 	call sprite_decompress
   44 D1:C95B -  -  -  -  	
   45 D1:C95B 21 51 B8 D1 	ld hl, Test_Sprite_2
   46 D1:C95F 11 41 06 D4 	ld de, TS_2_F
   47 D1:C963 CD 11 B0 D1 	call sprite_decompress
   48 D1:C967 -  -  -  -  	
   49 D1:C967 21 67 B8 D1 	ld hl, Test_Sprite_3
   50 D1:C96B 11 41 0B D4 	ld de, TS_3_F
   51 D1:C96F CD 11 B0 D1 	call sprite_decompress
   52 D1:C973 -  -  -  -  
   53 D1:C973 CD 9C B3 D1 	call sdcomp_set_offset
   54 D1:C977 -  -  -  -  
   55 D1:C977 21 3C B8 D1 	ld hl, Test_Sprite_1
   56 D1:C97B 11 C1 03 D4 	ld de, TS_1_FO
   57 D1:C97F CD 11 B0 D1 	call sprite_decompress
   58 D1:C983 -  -  -  -  	
   59 D1:C983 21 51 B8 D1 	ld hl, Test_Sprite_2
   60 D1:C987 11 C1 08 D4 	ld de, TS_2_FO
   61 D1:C98B CD 11 B0 D1 	call sprite_decompress
   62 D1:C98F -  -  -  -  	
   63 D1:C98F 21 67 B8 D1 	ld hl, Test_Sprite_3
   64 D1:C993 11 C1 0D D4 	ld de, TS_3_FO
   65 D1:C997 CD 11 B0 D1 	call sprite_decompress
   66 D1:C99B -  -  -  -  
   67 D1:C99B CD E5 B3 D1 	call sdcomp_reset_flip
   68 D1:C99F -  -  -  -  	
   69 D1:C99F 21 3C B8 D1 	ld hl, Test_Sprite_1
   70 D1:C9A3 11 81 02 D4 	ld de, TS_1_O
   71 D1:C9A7 CD 11 B0 D1 	call sprite_decompress
   72 D1:C9AB -  -  -  -  	
   73 D1:C9AB 21 51 B8 D1 	ld hl, Test_Sprite_2
   74 D1:C9AF 11 81 07 D4 	ld de, TS_2_O
   75 D1:C9B3 CD 11 B0 D1 	call sprite_decompress
   76 D1:C9B7 -  -  -  -  	
   77 D1:C9B7 21 67 B8 D1 	ld hl, Test_Sprite_3
   78 D1:C9BB 11 81 0C D4 	ld de, TS_3_O
   79 D1:C9BF CD 11 B0 D1 	call sprite_decompress
   80 D1:C9C3 -  -  -  -  
   81 D1:C9C3 CD AD B3 D1 	call sdcomp_reset_offset
   82 D1:C9C7 -  -  -  -  	
   83 D1:C9C7 CD 0C B4 D1 	call sdcomp_set_fast
   84 D1:C9CB 21 3C B9 D1 	ld hl, Test_Sprite_Fast
   85 D1:C9CF 11 00 0F D4 	ld de, TS_Fast
   86 D1:C9D3 CD 11 B0 D1 	call sprite_decompress
   87 D1:C9D7 -  -  -  -  
   88 D1:C9D7 C9 -  -  -  	ret
   89 D1:C9D8 -  -  -  -  
   90 D1:C9D8 -  -  -  -  
   91 D1:C9D8 -  -  -  -  Testing_sprite_table:
   92 D1:C9D8 01 00 D4 -  	.dl TS_1 ;0
   93 D1:C9DB 41 01 D4 -   	.dl TS_1_F ;1
   94 D1:C9DE 81 02 D4 -  	.dl TS_1_O ;2
   95 D1:C9E1 C1 03 D4 -  	.dl TS_1_FO ;3
   96 D1:C9E4 01 05 D4 -  	.dl TS_2 ;4
   97 D1:C9E7 41 06 D4 -  	.dl TS_2_F ;5
   98 D1:C9EA 81 07 D4 -  	.dl TS_2_O;6
   99 D1:C9ED C1 08 D4 -  	.dl TS_2_FO;7
  100 D1:C9F0 01 0A D4 -  	.dl TS_3;8
  101 D1:C9F3 41 0B D4 -  	.dl TS_3_F;9
  102 D1:C9F6 81 0C D4 -  	.dl TS_3_O;10
  103 D1:C9F9 C1 0D D4 -  	.dl TS_3_FO;11
  104 D1:C9FC 00 0F D4 -  	.dl TS_Fast ;12
  105 D1:C9FF -  -  -  -  	
  106 D1:C9FF -  -  -  -  	
  107 D1:C9FF -  -  -  -  	
  108 D1:C9FF -  -  -  -  BG_Data_frame_table:
  109 D1:C9FF 4C CA D1 -  	.dl BG_Data_0
  110 D1:CA02 20 CA D1 -  	.dl BG_Data_1
  111 D1:CA05 08 CA D1 -  	.dl BG_Data_2
  112 D1:CA08 -  -  -  -  	
  113 D1:CA08 -  -  -  -  
  114 D1:CA08 -  -  -  -  BG_Data_2:
  115 D1:CA08 D8 C9 D1 -  	.dl Testing_sprite_table
  116 D1:CA0B 05 -  -  -  	.db 5
  117 D1:CA0C 05 06 0A 00 	.db 5,6,10,0 ;no overflow
  118 D1:CA10 01 06 14 01 	.db 1,6,20,1
  119 D1:CA14 00 06 1E 00 	.db 0,6,30,0
  120 D1:CA18 02 06 28 00 	.db 2,6,40,0
  121 D1:CA1C 09 08 3C 0C 	.db 9,8,60,12 ;no overflow
  122 D1:CA20 -  -  -  -  	
  123 D1:CA20 -  -  -  -  
  124 D1:CA20 -  -  -  -  BG_Data_1:
  125 D1:CA20 D8 C9 D1 -  	.dl Testing_sprite_table
  126 D1:CA23 0A -  -  -  	.db 10
  127 D1:CA24 05 06 0F 00 	.db 5,6,15,0
  128 D1:CA28 01 06 19 01 	.db 1,6,25,1
  129 D1:CA2C 00 06 23 00 	.db 0,6,35,0
  130 D1:CA30 14 06 2D 00 	.db 20,6,45,0
  131 D1:CA34 09 08 5F 0C 	.db 9,8,95,12
  132 D1:CA38 FF 06 37 00 	.db 255,6,55,0 ;L
  133 D1:CA3C FE 08 41 0C 	.db 254,8,65,12 ;L
  134 D1:CA40 5A 07 41 08 	.db 90,7,65,8
  135 D1:CA44 5B 07 2D 09 	.db 91,7,45,9
  136 D1:CA48 5C 07 55 0A 	.db 92,7,85,10
  137 D1:CA4C -  -  -  -  	
  138 D1:CA4C -  -  -  -  
  139 D1:CA4C -  -  -  -  BG_Data_0:
  140 D1:CA4C D8 C9 D1 -  	.dl Testing_sprite_table
  141 D1:CA4F 0B -  -  -  	.db 11
  142 D1:CA50 05 06 0A 00 	.db 5,6,10,0
  143 D1:CA54 01 06 14 01 	.db 1,6,20,1
  144 D1:CA58 FF 06 1E 00 	.db 255,6,30,0
  145 D1:CA5C EF 06 0A 00 	.db 239,6,10,0;ok
  146 D1:CA60 F0 06 14 01 	.db 240,6,20,1;ok 
  147 D1:CA64 F1 06 1E 00 	.db 241,6,30,0;ok 
  148 D1:CA68 FF 06 28 00 	.db 255,6,40,0
  149 D1:CA6C FE 08 3C 0C 	.db 254,8,60,12
  150 D1:CA70 00 06 1E 00 	.db 0,6,30,0
  151 D1:CA74 01 06 28 01 	.db 1,6,40,1
  152 D1:CA78 02 08 3C 0C 	.db 2,8,60,12
  153 D1:CA7C -  -  -  -  	
  154 D1:CA7C -  -  -  -  		
  155 D1:CA7C -  -  -  -  	
Listing for file "ascent.asm"
  297 D1:CA7C -  -  -  -  #include "TestingFGData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\TestingFGData.txt"
    1 D1:CA7C -  -  -  -  
    2 D1:CA7C -  -  -  -  
    3 D1:CA7C -  -  -  -  	
    4 D1:CA7C -  -  -  -  	
    5 D1:CA7C -  -  -  -  FG_Data_frame_table:
    6 D1:CA7C D0 CA D1 -  	.dl FG_Data_0
    7 D1:CA7F A4 CA D1 -  	.dl FG_Data_1
    8 D1:CA82 8C CA D1 -  	.dl FG_Data_2
    9 D1:CA85 88 CA D1 -  	.dl FG_Data_3
   10 D1:CA88 -  -  -  -  	
   11 D1:CA88 -  -  -  -  FG_Data_3:
   12 D1:CA88 D8 C9 D1 -  	.dl Testing_sprite_table
   13 D1:CA8B 00 -  -  -  	.db 0
   14 D1:CA8C -  -  -  -  	
   15 D1:CA8C -  -  -  -  
   16 D1:CA8C -  -  -  -  FG_Data_2:
   17 D1:CA8C D8 C9 D1 -  	.dl Testing_sprite_table
   18 D1:CA8F 05 -  -  -  	.db 5
   19 D1:CA90 05 06 0A 00 	.db 5,6,10,0 ;no overflow
   20 D1:CA94 01 06 14 01 	.db 1,6,20,1
   21 D1:CA98 00 06 1E 00 	.db 0,6,30,0
   22 D1:CA9C 02 06 28 00 	.db 2,6,40,0
   23 D1:CAA0 09 08 3C 0C 	.db 9,8,60,12 ;no overflow
   24 D1:CAA4 -  -  -  -  	
   25 D1:CAA4 -  -  -  -  
   26 D1:CAA4 -  -  -  -  FG_Data_1:
   27 D1:CAA4 D8 C9 D1 -  	.dl Testing_sprite_table
   28 D1:CAA7 0A -  -  -  	.db 10
   29 D1:CAA8 05 06 0F 00 	.db 5,6,15,0
   30 D1:CAAC 01 06 19 01 	.db 1,6,25,1
   31 D1:CAB0 00 06 23 00 	.db 0,6,35,0
   32 D1:CAB4 14 06 2D 00 	.db 20,6,45,0
   33 D1:CAB8 09 08 5F 0C 	.db 9,8,95,12
   34 D1:CABC FF 06 37 00 	.db 255,6,55,0 ;L
   35 D1:CAC0 FE 08 41 0C 	.db 254,8,65,12 ;L
   36 D1:CAC4 5A 07 41 08 	.db 90,7,65,8
   37 D1:CAC8 5B 07 2D 09 	.db 91,7,45,9
   38 D1:CACC 5C 07 55 0A 	.db 92,7,85,10
   39 D1:CAD0 -  -  -  -  	
   40 D1:CAD0 -  -  -  -  
   41 D1:CAD0 -  -  -  -  FG_Data_0:
   42 D1:CAD0 D8 C9 D1 -  	.dl Testing_sprite_table
   43 D1:CAD3 0B -  -  -  	.db 11
   44 D1:CAD4 05 06 0A 00 	.db 5,6,10,0
   45 D1:CAD8 01 06 14 01 	.db 1,6,20,1
   46 D1:CADC FF 06 1E 00 	.db 255,6,30,0
   47 D1:CAE0 EF 06 0A 00 	.db 239,6,10,0
   48 D1:CAE4 F0 06 14 01 	.db 240,6,20,1
   49 D1:CAE8 F1 06 1E 00 	.db 241,6,30,0
   50 D1:CAEC FF 06 28 00 	.db 255,6,40,0
   51 D1:CAF0 FE 08 3C 0C 	.db 254,8,60,12
   52 D1:CAF4 00 06 1E 00 	.db 0,6,30,0
   53 D1:CAF8 01 06 28 01 	.db 1,6,40,1
   54 D1:CAFC 02 08 3C 0C 	.db 2,8,60,12
   55 D1:CB00 -  -  -  -  	
Listing for file "ascent.asm"
  298 D1:CB00 -  -  -  -  
  299 D1:CB00 -  -  -  -  
