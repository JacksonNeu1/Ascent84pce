    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E -  -  -  -  	;jp time_test_start
   20 D1:A88E -  -  -  -  	
   21 D1:A88E 21 00 02 E3 	ld	hl,mpLcdPalette
   22 D1:A892 -  -  -  -  
   23 D1:A892 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   24 D1:A894 77 -  -  -  	ld	(hl),a
   25 D1:A895 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   26 D1:A897 23 -  -  -  	inc hl
   27 D1:A898 77 -  -  -  	ld	(hl),a
   28 D1:A899 23 -  -  -  	inc hl;1yellow
   29 D1:A89A 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   30 D1:A89C 77 -  -  -  	ld	(hl),a
   31 D1:A89D 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   32 D1:A89F 23 -  -  -  	inc hl
   33 D1:A8A0 77 -  -  -  	ld	(hl),a
   34 D1:A8A1 -  -  -  -  	
   35 D1:A8A1 23 -  -  -  	inc hl;2blue
   36 D1:A8A2 3E 1F -  -  	ld	a,%00011111 ;GGGBBBBB
   37 D1:A8A4 77 -  -  -  	ld	(hl),a
   38 D1:A8A5 3E 00 -  -  	ld  a,%00000000 ; GRRRRRGG
   39 D1:A8A7 23 -  -  -  	inc hl
   40 D1:A8A8 77 -  -  -  	ld	(hl),a
   41 D1:A8A9 -  -  -  -  	
   42 D1:A8A9 23 -  -  -  	inc hl;3r
   43 D1:A8AA 3E 00 -  -  	ld	a,%00000000 ;GGGBBBBB
   44 D1:A8AC 77 -  -  -  	ld	(hl),a
   45 D1:A8AD 3E 7C -  -  	ld  a,%01111100 ; GRRRRRGG
   46 D1:A8AF 23 -  -  -  	inc hl
   47 D1:A8B0 77 -  -  -  	ld	(hl),a
   48 D1:A8B1 -  -  -  -  	
   49 D1:A8B1 23 -  -  -  	inc hl;4g
   50 D1:A8B2 3E E0 -  -  	ld	a,%11100000 ;GGGBBBBB
   51 D1:A8B4 77 -  -  -  	ld	(hl),a
   52 D1:A8B5 3E 83 -  -  	ld  a,%10000011 ; GRRRRRGG
   53 D1:A8B7 23 -  -  -  	inc hl
   54 D1:A8B8 77 -  -  -  	ld	(hl),a
   55 D1:A8B9 -  -  -  -  	
   56 D1:A8B9 23 -  -  -  	inc hl;5 white
   57 D1:A8BA 3E FF -  -  	ld	a,%11111111 ;GGGBBBBB
   58 D1:A8BC 77 -  -  -  	ld	(hl),a
   59 D1:A8BD 3E FF -  -  	ld  a,%11111111 ; GRRRRRGG
   60 D1:A8BF 23 -  -  -  	inc hl
   61 D1:A8C0 77 -  -  -  	ld	(hl),a
   62 D1:A8C1 -  -  -  -  
   63 D1:A8C1 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
   64 D1:A8C5 3E 25 -  -  	ld	a,lcdBpp4
   65 D1:A8C7 32 18 00 E3 	ld (mpLcdCtrl),a	
   66 D1:A8CB -  -  -  -  	
   67 D1:A8CB -  -  -  -  	
   68 D1:A8CB -  -  -  -  	;call fast_fg_sprite_set_flip
   69 D1:A8CB -  -  -  -  	;jp time_test_start
   70 D1:A8CB CD 41 B4 D1 	call sdcomp_reset_bg_sprite
   71 D1:A8CF CD 1D B4 D1 	call sdcomp_reset_fast_sprite
   72 D1:A8D3 CD 75 B2 D1 	call sdcomp_reset_flip
   73 D1:A8D7 CD A0 B2 D1 	call sdcomp_set_offset
   74 D1:A8DB 21 B9 AD D1 	ld hl,testSpriteCompressed4
   75 D1:A8DF 11 00 00 D4 	ld de,vRam
   76 D1:A8E3 CD E5 AE D1 	call sprite_decompress
   77 D1:A8E7 -  -  -  -  	
   78 D1:A8E7 -  -  -  -  	
   79 D1:A8E7 CD 32 B2 D1 	call sdcomp_set_flip
   80 D1:A8EB CD A0 B2 D1 	call sdcomp_set_offset
   81 D1:A8EF 21 72 AD D1 	ld hl,testSpriteCompressed
   82 D1:A8F3 11 A0 00 D4 	ld de,vRam+160
   83 D1:A8F7 CD E5 AE D1 	call sprite_decompress
   84 D1:A8FB -  -  -  -  	
   85 D1:A8FB -  -  -  -  	
   86 D1:A8FB -  -  -  -  	
   87 D1:A8FB 11 00 19 D4 	ld de,vRam +(160*40)
   88 D1:A8FF 21 00 00 D4 	ld hl,vRam
   89 D1:A903 3E 02 -  -  	ld a,2
   90 D1:A905 CD 7B AC D1 	call draw_slow_sprite_bottom_cut
   91 D1:A909 -  -  -  -  	
   92 D1:A909 -  -  -  -  	
   93 D1:A909 11 C0 12 D4 	ld de,vRam +(160*30)
   94 D1:A90D 21 00 00 D4 	ld hl,vRam
   95 D1:A911 CD 17 AC D1 	call draw_slow_sprite_full
   96 D1:A915 -  -  -  -  	
   97 D1:A915 -  -  -  -  	
   98 D1:A915 11 05 19 D4 	ld de,vRam +(160*40)+5
   99 D1:A919 21 A0 00 D4 	ld hl,vRam+160
  100 D1:A91D 3E 03 -  -  	ld a,3
  101 D1:A91F CD 46 AC D1 	call draw_slow_sprite_top_cut
  102 D1:A923 -  -  -  -  	
  103 D1:A923 11 C5 12 D4 	ld de,vRam +(160*30)+5
  104 D1:A927 21 A0 00 D4 	ld hl,vRam+160
  105 D1:A92B CD 17 AC D1 	call draw_slow_sprite_full
  106 D1:A92F -  -  -  -  	
  107 D1:A92F -  -  -  -  	
  108 D1:A92F -  -  -  -  	
  109 D1:A92F -  -  -  -  	
  110 D1:A92F -  -  -  -  	
  111 D1:A92F -  -  -  -  ;	ld hl,vRam + (160*5)
  112 D1:A92F -  -  -  -  ;	ld (draw_bg_vram_addr),hl
  113 D1:A92F -  -  -  -  ;	ld hl,$000080
  114 D1:A92F -  -  -  -  ;	call draw_bg_line
  115 D1:A92F -  -  -  -  	
  116 D1:A92F -  -  -  -  	
  117 D1:A92F -  -  -  -  	
  118 D1:A92F -  -  -  -  	
  119 D1:A92F -  -  -  -  	;ld de,vram +(160*10)
  120 D1:A92F -  -  -  -  	;ld hl,testFastSprite+3
  121 D1:A92F -  -  -  -  	;exx
  122 D1:A92F -  -  -  -  	;ld b,8
  123 D1:A92F -  -  -  -  	;ld hl,8
  124 D1:A92F -  -  -  -  	;ld de,testFastSprite_t - 1
  125 D1:A92F -  -  -  -  	;ld c,%10000000
  126 D1:A92F -  -  -  -  	;call draw_fast_fg_sprite
  127 D1:A92F -  -  -  -  	
  128 D1:A92F -  -  -  -  	
  129 D1:A92F -  -  -  -  ;	ld de,vram +(160*20) - 1
  130 D1:A92F -  -  -  -  ;	ld hl,test_fast_sprite
  131 D1:A92F -  -  -  -  ;	ld a,1
  132 D1:A92F -  -  -  -  ;	call draw_fast_sprite_top_cut
  133 D1:A92F -  -  -  -  	
  134 D1:A92F -  -  -  -  	
  135 D1:A92F CD 75 B2 D1 	call sdcomp_reset_flip
  136 D1:A933 CD 0E B4 D1 	call sdcomp_set_fast_sprite
  137 D1:A937 21 D9 AD D1 	ld hl,testSpriteCompressedFast
  138 D1:A93B 11 E0 01 D4 	ld de,vRam + (160*3)
  139 D1:A93F CD E5 AE D1 	call sprite_decompress
  140 D1:A943 -  -  -  -  		
  141 D1:A943 11 BF 2B D4 	ld de,vRam +(160*70) - 1
  142 D1:A947 21 E0 01 D4 	ld hl,vRam + (160*3)
  143 D1:A94B 3E 03 -  -  	ld a,3
  144 D1:A94D CD B5 AB D1 	call draw_fast_sprite_bottom_cut
  145 D1:A951 -  -  -  -  	
  146 D1:A951 -  -  -  -  	
  147 D1:A951 -  -  -  -  	
  148 D1:A951 CD 32 B2 D1 	call sdcomp_set_flip
  149 D1:A955 -  -  -  -  ;	call sdcomp_set_fast_sprite
  150 D1:A955 21 D9 AD D1 	ld hl,testSpriteCompressedFast
  151 D1:A959 11 80 02 D4 	ld de,vRam + (160*4)
  152 D1:A95D CD E5 AE D1 	call sprite_decompress
  153 D1:A961 -  -  -  -  	
  154 D1:A961 -  -  -  -  		
  155 D1:A961 11 C5 2B D4 	ld de,vRam +(160*70) + 5
  156 D1:A965 21 80 02 D4 	ld hl,vRam + (160*4)
  157 D1:A969 3E 02 -  -  	ld a,2
  158 D1:A96B CD C8 AB D1 	call draw_fast_sprite_top_cut
  159 D1:A96F -  -  -  -  	
  160 D1:A96F -  -  -  -  	
  161 D1:A96F 11 65 31 D4 	ld de,vRam +(160*79) + 5
  162 D1:A973 21 80 02 D4 	ld hl,vRam + (160*4)
  163 D1:A977 3E 02 -  -  	ld a,2
  164 D1:A979 CD FE AB D1 	call draw_fast_sprite_full
  165 D1:A97D -  -  -  -  	
  166 D1:A97D -  -  -  -  	
  167 D1:A97D 21 8E AC D1 	ld hl,testBGSprite
  168 D1:A981 11 40 38 D4 	ld de,vRam + (160*90)
  169 D1:A985 3E 00 -  -  	ld a,0 
  170 D1:A987 CD 9F AB D1 	call draw_bg_sprite_line
  171 D1:A98B -  -  -  -  	
  172 D1:A98B 21 8E AC D1 	ld hl,testBGSprite
  173 D1:A98F 11 E0 38 D4 	ld de,vRam + (160*91)
  174 D1:A993 3E 01 -  -  	ld a,1
  175 D1:A995 CD 9F AB D1 	call draw_bg_sprite_line
  176 D1:A999 -  -  -  -  	
  177 D1:A999 21 8E AC D1 	ld hl,testBGSprite
  178 D1:A99D 11 80 39 D4 	ld de,vRam + (160*92)
  179 D1:A9A1 3E 02 -  -  	ld a,2 
  180 D1:A9A3 CD 9F AB D1 	call draw_bg_sprite_line
  181 D1:A9A7 -  -  -  -  	
  182 D1:A9A7 21 8E AC D1 	ld hl,testBGSprite
  183 D1:A9AB 11 20 3A D4 	ld de,vRam + (160*93)
  184 D1:A9AF 3E 03 -  -  	ld a,3 
  185 D1:A9B1 CD 9F AB D1 	call draw_bg_sprite_line
  186 D1:A9B5 -  -  -  -  	
  187 D1:A9B5 21 8E AC D1 	ld hl,testBGSprite
  188 D1:A9B9 11 C0 3A D4 	ld de,vRam + (160*94)
  189 D1:A9BD 3E 04 -  -  	ld a,4 
  190 D1:A9BF CD 9F AB D1 	call draw_bg_sprite_line
  191 D1:A9C3 -  -  -  -  	
  192 D1:A9C3 21 8E AC D1 	ld hl,testBGSprite
  193 D1:A9C7 11 A0 3C D4 	ld de,vRam + (160*97)
  194 D1:A9CB 3E 07 -  -  	ld a,7 
  195 D1:A9CD CD 9F AB D1 	call draw_bg_sprite_line
  196 D1:A9D1 -  -  -  -  	
  197 D1:A9D1 -  -  -  -  	
  198 D1:A9D1 -  -  -  -  	
  199 D1:A9D1 21 00 2C D5 	ld hl,vRam + (320*240)
  200 D1:A9D5 22 10 00 E3 	ld (mpLcdBase),hl
  201 D1:A9D9 -  -  -  -  	
  202 D1:A9D9 CD 1D B4 D1 	call sdcomp_reset_fast_sprite
  203 D1:A9DD CD 2C B4 D1 	call sdcomp_set_bg_sprite
  204 D1:A9E1 CD 75 B2 D1 	call sdcomp_reset_flip
  205 D1:A9E5 -  -  -  -  	;call sdcomp_set_offset
  206 D1:A9E5 21 72 AD D1 	ld hl,testSpriteCompressed
  207 D1:A9E9 11 C0 03 D4 	ld de,vRam+(160*6)
  208 D1:A9ED CD E5 AE D1 	call sprite_decompress
  209 D1:A9F1 -  -  -  -  	
  210 D1:A9F1 -  -  -  -  	
  211 D1:A9F1 -  -  -  -  testBG1 .equ vRam+(160*240)
  212 D1:A9F1 -  -  -  -  testBG2 .equ testBG1 + 160
  213 D1:A9F1 -  -  -  -  testBG3 .equ testBG2 + 160
  214 D1:A9F1 -  -  -  -  testBG4 .equ testBG3 + 160
  215 D1:A9F1 -  -  -  -  	
  216 D1:A9F1 21 23 AE D1 	ld hl,testBGSpriteComp
  217 D1:A9F5 11 00 96 D4 	ld de,testBG1
  218 D1:A9F9 CD E5 AE D1 	call sprite_decompress
  219 D1:A9FD -  -  -  -  	
  220 D1:A9FD 21 38 AE D1 	ld hl,testBGSpriteComp2
  221 D1:AA01 11 A0 96 D4 	ld de,testBG2
  222 D1:AA05 CD E5 AE D1 	call sprite_decompress
  223 D1:AA09 -  -  -  -  	
  224 D1:AA09 21 46 AE D1 	ld hl,testBGSpriteComp3
  225 D1:AA0D 11 40 97 D4 	ld de,testBG3
  226 D1:AA11 CD E5 AE D1 	call sprite_decompress
  227 D1:AA15 -  -  -  -  	
  228 D1:AA15 CD 41 B4 D1 	call sdcomp_reset_bg_sprite
  229 D1:AA19 -  -  -  -  	
  230 D1:AA19 -  -  -  -  	
  231 D1:AA19 3E 00 -  -  	ld a,0
  232 D1:AA1B 21 00 96 D4 	ld hl,$d49600
  233 D1:AA1F 11 00 2C D5 	ld de,vRam + (320*240)
  234 D1:AA23 CD 9F AB D1 	call draw_bg_sprite_line
  235 D1:AA27 -  -  -  -  	
  236 D1:AA27 -  -  -  -  	
  237 D1:AA27 3E FF -  -  	ld a,255
  238 D1:AA29 21 00 2C D5 	ld hl,vRam + (320*240)
  239 D1:AA2D 22 83 AB D1 	ld (dbgl_vram_line_start),hl
  240 D1:AA31 21 97 AE D1 	ld hl,bg_data_frame_1
  241 D1:AA35 CD 04 AB D1 	call draw_bg_line 
  242 D1:AA39 -  -  -  -  	
  243 D1:AA39 -  -  -  -  
  244 D1:AA39 -  -  -  -  	
  245 D1:AA39 -  -  -  -  	
  246 D1:AA39 3E FF -  -  	ld a,255
  247 D1:AA3B 21 00 2C D5 	ld hl,vRam + (320*240)
  248 D1:AA3F -  -  -  -  bg_draw_test_loop:
  249 D1:AA3F 22 83 AB D1 	ld (dbgl_vram_line_start),hl 
  250 D1:AA43 01 A0 00 00 	ld bc,160
  251 D1:AA47 09 -  -  -  	add hl,bc 
  252 D1:AA48 E5 -  -  -  	push hl
  253 D1:AA49 F5 -  -  -  	push af
  254 D1:AA4A 21 97 AE D1 	ld hl,bg_data_frame_1
  255 D1:AA4E CD 04 AB D1 	call draw_bg_line 
  256 D1:AA52 F1 -  -  -  	pop af
  257 D1:AA53 E1 -  -  -  	pop hl
  258 D1:AA54 3D -  -  -  	dec a
  259 D1:AA55 C2 3F AA D1 	jp nz,bg_draw_test_loop
  260 D1:AA59 -  -  -  -  
  261 D1:AA59 CD 9F AA D1 	call prgmpause
  262 D1:AA5D -  -  -  -  	
  263 D1:AA5D 21 00 00 D4 	ld hl,vRam
  264 D1:AA61 22 10 00 E3 	ld (mpLcdBase),hl
  265 D1:AA65 -  -  -  -  	
  266 D1:AA65 -  -  -  -  	
  267 D1:AA65 -  -  -  -  	
  268 D1:AA65 -  -  -  -  	
  269 D1:AA65 -  -  -  -  	
  270 D1:AA65 -  -  -  -  #comment 	ld hl,vRam+(160*6)
  271 D1:AA65             	ld de,vRam + (160*90) + 10
  272 D1:AA65             	ld a,0 
  273 D1:AA65             	call draw_bg_sprite_line
  274 D1:AA65             	
  275 D1:AA65             	ld hl,vRam+(160*6)
  276 D1:AA65             	ld de,vRam + (160*91) + 10
  277 D1:AA65             	ld a,1 
  278 D1:AA65             	call draw_bg_sprite_line
  279 D1:AA65             	
  280 D1:AA65             	ld hl,vRam+(160*6)
  281 D1:AA65             	ld de,vRam + (160*92) + 10
  282 D1:AA65             	ld a,2 
  283 D1:AA65             	call draw_bg_sprite_line
  284 D1:AA65             	ld hl,vRam+(160*6)
  285 D1:AA65             	ld de,vRam + (160*93) + 10
  286 D1:AA65             	ld a,3 
  287 D1:AA65             	call draw_bg_sprite_line
  288 D1:AA65             	ld hl,vRam+(160*6)
  289 D1:AA65             	ld de,vRam + (160*94) + 10
  290 D1:AA65             	ld a,4
  291 D1:AA65             	call draw_bg_sprite_line
  292 D1:AA65             	ld hl,vRam+(160*6)
  293 D1:AA65             	ld de,vRam + (160*95) + 10
  294 D1:AA65             	ld a,5 
  295 D1:AA65             	call draw_bg_sprite_line
  296 D1:AA65             	ld hl,vRam+(160*6)
  297 D1:AA65             	ld de,vRam + (160*96) + 10
  298 D1:AA65             	ld a,6 
  299 D1:AA65             	call draw_bg_sprite_line
  300 D1:AA65             	ld hl,vRam+(160*6)
  301 D1:AA65             	ld de,vRam + (160*97) + 10
  302 D1:AA65             	ld a,7 
  303 D1:AA65             	call draw_bg_sprite_line
  304 D1:AA65              #endcomment
  305 D1:AA65 -  -  -  -  	
  306 D1:AA65 -  -  -  -  	
  307 D1:AA65 -  -  -  -  	
  308 D1:AA65 -  -  -  -  	
  309 D1:AA65 -  -  -  -  	
  310 D1:AA65 -  -  -  -  
  311 D1:AA65 -  -  -  -  exit_prgm:
  312 D1:AA65 21 00 00 D4 	ld hl,vRam
  313 D1:AA69 22 10 00 E3 	ld (mpLcdBase),hl
  314 D1:AA6D CD 10 08 02 	call _ClrScrnFull
  315 D1:AA71 3E 2D -  -  	ld	a,lcdBpp16
  316 D1:AA73 32 18 00 E3 	ld	(mpLcdCtrl),a
  317 D1:AA77 CD 3C 1A 02 	call _DrawStatusBar
  318 D1:AA7B -  -  -  -  	
  319 D1:AA7B FB -  -  -  	ei				; reset screen back to normal
  320 D1:AA7C C9 -  -  -  	ret			; return to os
  321 D1:AA7D -  -  -  -  
  322 D1:AA7D -  -  -  -  
  323 D1:AA7D -  -  -  -  printHL:;=================REMOVE
  324 D1:AA7D E5 -  -  -  	push hl
  325 D1:AA7E 21 00 00 D4 	ld hl,vRam
  326 D1:AA82 22 10 00 E3 	ld (mpLcdBase),hl
  327 D1:AA86 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  328 D1:AA8A 3E 2D -  -  	ld	a,lcdBpp16
  329 D1:AA8C 32 18 00 E3 	ld (mpLcdCtrl),a
  330 D1:AA90 E1 -  -  -  	pop hl
  331 D1:AA91 CD E0 1E 02 	call _DispHL
  332 D1:AA95 FB -  -  -  	ei
  333 D1:AA96 CD 8C 0D 02 	call _GetKey
  334 D1:AA9A F3 -  -  -  	di
  335 D1:AA9B C3 65 AA D1 	jp exit_prgm
  336 D1:AA9F -  -  -  -  
  337 D1:AA9F -  -  -  -  
  338 D1:AA9F -  -  -  -  prgmpause:
  339 D1:AA9F D5 -  -  -  	push de 
  340 D1:AAA0 E5 -  -  -  	push hl 
  341 D1:AAA1 FB -  -  -  	ei
  342 D1:AAA2 CD 8C 0D 02 	call _GetKey
  343 D1:AAA6 F3 -  -  -  	di
  344 D1:AAA7 E1 -  -  -  	pop hl 
  345 D1:AAA8 D1 -  -  -  	pop de 
  346 D1:AAA9 C9 -  -  -  	ret
  347 D1:AAAA -  -  -  -  
  348 D1:AAAA -  -  -  -  test_addr:
  349 D1:AAAA 00 00 00 -  	.dl 0
  350 D1:AAAD -  -  -  -  
  351 D1:AAAD -  -  -  -  draw_buffer:
  352 D1:AAAD 00 00 00 -  	.dl 0
  353 D1:AAB0 -  -  -  -  
  354 D1:AAB0 -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:AAB0 -  -  -  -  
    2 D1:AAB0 -  -  -  -  
    3 D1:AAB0 -  -  -  -  
    4 D1:AAB0 -  -  -  -  time_test_start:
    5 D1:AAB0 -  -  -  -  
    6 D1:AAB0 -  -  -  -  		; 76543210	
    7 D1:AAB0 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:AAB2 32 30 00 F2 	ld ($F20030),a
    9 D1:AAB6 -  -  -  -  	;	  fedcba98
   10 D1:AAB6 3E 02 -  -  	ld a,%00000010;count up
   11 D1:AAB8 32 31 00 F2 	ld ($F20031),a
   12 D1:AABC 3E 00 -  -  	ld a,0
   13 D1:AABE 32 00 00 F2 	ld ($F20000),a
   14 D1:AAC2 32 01 00 F2 	ld ($F20001),a
   15 D1:AAC6 32 02 00 F2 	ld ($F20002),a
   16 D1:AACA 32 03 00 F2 	ld ($F20003),a
   17 D1:AACE -  -  -  -  	
   18 D1:AACE 21 2C 01 00 	ld hl,300
   19 D1:AAD2 -  -  -  -  	
   20 D1:AAD2 -  -  -  -  time_testing_loop:
   21 D1:AAD2 E5 -  -  -  	push hl
   22 D1:AAD3 01 E8 03 00 	ld bc,1000
   23 D1:AAD7 -  -  -  -  time_testing_loop_2:
   24 D1:AAD7 C5 -  -  -  	push bc
   25 D1:AAD8 -  -  -  -  	;instruction here
   26 D1:AAD8 11 C0 12 D4 	ld de,vram +(160*30)
   27 D1:AADC 21 DF AC D1 	ld hl,testSlowSprite
   28 D1:AAE0 3E 01 -  -  	ld a,1
   29 D1:AAE2 CD 46 AC D1 	call draw_slow_sprite_top_cut
   30 D1:AAE6 -  -  -  -  	;Instruction end
   31 D1:AAE6 C1 -  -  -  	pop bc
   32 D1:AAE7 0B -  -  -  	dec bc
   33 D1:AAE8 79 -  -  -  	ld a,c
   34 D1:AAE9 B0 -  -  -  	or b
   35 D1:AAEA C2 D7 AA D1 	jp nz,time_testing_loop_2
   36 D1:AAEE E1 -  -  -  	pop hl
   37 D1:AAEF 2B -  -  -  	dec hl
   38 D1:AAF0 7D -  -  -  	ld a,l
   39 D1:AAF1 B4 -  -  -  	or h
   40 D1:AAF2 C2 D2 AA D1 	jp nz,time_testing_loop
   41 D1:AAF6 -  -  -  -  	
   42 D1:AAF6 3A 01 00 F2 	ld a,($F20001);128hz
   43 D1:AAFA 6F -  -  -  	ld l,a
   44 D1:AAFB 3A 02 00 F2 	ld a,($F20002);0.5hz
   45 D1:AAFF 67 -  -  -  	ld h,a
   46 D1:AB00 C3 7D AA D1 	jp printHL;div by 128 for time
   47 D1:AB04 -  -  -  -  	
   48 D1:AB04 -  -  -  -  
   49 D1:AB04 -  -  -  -  ;60fps = .0166sec/f	
   50 D1:AB04 -  -  -  -  
   51 D1:AB04 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   52 D1:AB04 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   53 D1:AB04 -  -  -  -  
   54 D1:AB04 -  -  -  -  
   55 D1:AB04 -  -  -  -  ;10,000 draw 1 bg line very complex 
   56 D1:AB04 -  -  -  -  ;9 sec  .07 of frame/instruction
   57 D1:AB04 -  -  -  -  
   58 D1:AB04 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   59 D1:AB04 -  -  -  -  ;16.4RT, 14.8CLK
   60 D1:AB04 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   61 D1:AB04 -  -  -  -  ;.24 screens/frame
   62 D1:AB04 -  -  -  -  
   63 D1:AB04 -  -  -  -  
   64 D1:AB04 -  -  -  -  ;300k slow sprite best case 12*5px
   65 D1:AB04 -  -  -  -  ;8.75RT 7.6clk
   66 D1:AB04 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   67 D1:AB04 -  -  -  -  ;.446 screens/frame
   68 D1:AB04 -  -  -  -  
   69 D1:AB04 -  -  -  -  
   70 D1:AB04 -  -  -  -  
   71 D1:AB04 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   72 D1:AB04 -  -  -  -  ;22.15RT,20.35clk
   73 D1:AB04 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   74 D1:AB04 -  -  -  -  ;.78 screens/frame
   75 D1:AB04 -  -  -  -  
   76 D1:AB04 -  -  -  -  
   77 D1:AB04 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   78 D1:AB04 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   79 D1:AB04 -  -  -  -  ;.47 = FAST
   80 D1:AB04 -  -  -  -  
   81 D1:AB04 -  -  -  -  ;50% fast sprites, 50% slow sprites
   82 D1:AB04 -  -  -  -  
   83 D1:AB04 -  -  -  -  
   84 D1:AB04 -  -  -  -  
   85 D1:AB04 -  -  -  -  
   86 D1:AB04 -  -  -  -  
   87 D1:AB04 -  -  -  -  
   88 D1:AB04 -  -  -  -  
   89 D1:AB04 -  -  -  -  
   90 D1:AB04 -  -  -  -  
Listing for file "ascent.asm"
  355 D1:AB04 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AB04 -  -  -  -  
    2 D1:AB04 -  -  -  -  
    3 D1:AB04 -  -  -  -  
    4 D1:AB04 -  -  -  -  ;hl = upper data frame, a = line number in target frame
    5 D1:AB04 -  -  -  -  draw_bg_line:
    6 D1:AB04 32 26 AB D1 	ld (dbgl_line_num),a
    7 D1:AB08 32 59 AB D1 	ld (dbgl_line_num_2),a
    8 D1:AB0C ED 17 -  -  	ld de,(hl)
    9 D1:AB0E ED 53 89 AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de
   10 D1:AB13 23 -  -  -  	inc hl
   11 D1:AB14 23 -  -  -  	inc hl
   12 D1:AB15 23 -  -  -  	inc hl ;to frame data start 
   13 D1:AB16 11 00 00 00 	ld de,0
   14 D1:AB1A 01 00 00 00 	ld bc,0
   15 D1:AB1E -  -  -  -  	;upper frame, checking for sprites that carry into lower frame 
   16 D1:AB1E -  -  -  -  dbgl_upper_loop:
   17 D1:AB1E 7E -  -  -  	ld a,(hl);y
   18 D1:AB1F 23 -  -  -  	inc hl;to height
   19 D1:AB20 96 -  -  -  	sub (hl);subtract height
   20 D1:AB21 -  -  -  -  	;a is y value of bottom row of sprite
   21 D1:AB21 D2 2F AB D1 	jp nc,dbgl_upper_skip;if no carry into next frame
   22 D1:AB25 -  -  -  -  	;sprite extends into target frame
   23 D1:AB25 -  -  -  -  dbgl_line_num .equ $ + 1
   24 D1:AB25 D6 00 -  -  	sub 0 ;compare to line number in target frame
   25 D1:AB27 DA 3C AB D1 	jp c,dbgl_upper_cont;if linenum is >  bottom row
   26 D1:AB2B CA 3C AB D1 	jp z,dbgl_upper_cont;if = bottom row
   27 D1:AB2F -  -  -  -  dbgl_upper_skip:
   28 D1:AB2F 23 -  -  -  	inc hl;to x
   29 D1:AB30 23 -  -  -  	inc hl;to index 
   30 D1:AB31 7E -  -  -  	ld a,(hl);index
   31 D1:AB32 23 -  -  -  	inc hl;to y
   32 D1:AB33 B7 -  -  -  	or a 
   33 D1:AB34 C2 1E AB D1 	jp nz,dbgl_upper_loop
   34 D1:AB38 C3 48 AB D1 	jp dbgl_lower_start
   35 D1:AB3C -  -  -  -  dbgl_upper_cont:
   36 D1:AB3C -  -  -  -  	;a = bottom row - linenum
   37 D1:AB3C 86 -  -  -  	add a,(hl);add height-1 
   38 D1:AB3D -  -  -  -  	;a holds 0 indexed line num within sprite
   39 D1:AB3D CD 7D AB D1 	call dbgl_setup_and_draw
   40 D1:AB41 7E -  -  -  	ld a,(hl);index
   41 D1:AB42 23 -  -  -  	inc hl
   42 D1:AB43 B7 -  -  -  	or a 
   43 D1:AB44 C2 1E AB D1 	jp nz,dbgl_upper_loop
   44 D1:AB48 -  -  -  -  	
   45 D1:AB48 -  -  -  -  dbgl_lower_start:
   46 D1:AB48 -  -  -  -  ;LOWER FRAME START 
   47 D1:AB48 -  -  -  -  	;hl pointing to sprite data table 
   48 D1:AB48 ED 17 -  -  	ld de,(hl)
   49 D1:AB4A ED 53 89 AB 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de	
   50 D1:AB4F 11 00 00 00 	ld de,0
   51 D1:AB53 23 -  -  -  	inc hl
   52 D1:AB54 23 -  -  -  	inc hl
   53 D1:AB55 23 -  -  -  	inc hl;to y 
   54 D1:AB56 -  -  -  -  dbgl_lower_loop:
   55 D1:AB56 7E -  -  -  	ld a,(hl)
   56 D1:AB57 23 -  -  -  	inc hl;to height-1
   57 D1:AB58 -  -  -  -  dbgl_line_num_2 .equ $ + 1
   58 D1:AB58 D6 00 -  -  	sub 0;subtract line num 
   59 D1:AB5A DA 67 AB D1 	jp c,dbgl_lower_skip;target line num is above sprite 
   60 D1:AB5E -  -  -  -  	;target is below or = sprite y value 
   61 D1:AB5E -  -  -  -  	;a holds 0 indexed sprite row 
   62 D1:AB5E BE -  -  -  	cp (hl);compare to height
   63 D1:AB5F DA 71 AB D1 	jp c,dbgl_lower_cont ;if height >= a 
   64 D1:AB63 CA 71 AB D1 	jp z,dbgl_lower_cont
   65 D1:AB67 -  -  -  -  dbgl_lower_skip:
   66 D1:AB67 23 -  -  -  	inc hl;to x  
   67 D1:AB68 23 -  -  -  	inc hl; to index
   68 D1:AB69 7E -  -  -  	ld a,(hl);index
   69 D1:AB6A 23 -  -  -  	inc hl;to y
   70 D1:AB6B B7 -  -  -  	or a 
   71 D1:AB6C C2 56 AB D1 	jp nz,dbgl_lower_loop
   72 D1:AB70 C9 -  -  -  	ret
   73 D1:AB71 -  -  -  -  dbgl_lower_cont:
   74 D1:AB71 -  -  -  -  
   75 D1:AB71 CD 7D AB D1 	call dbgl_setup_and_draw
   76 D1:AB75 7E -  -  -  	ld a,(hl);index 
   77 D1:AB76 23 -  -  -  	inc hl;to y 
   78 D1:AB77 B7 -  -  -  	or a
   79 D1:AB78 C2 56 AB D1 	jp nz,dbgl_lower_loop
   80 D1:AB7C C9 -  -  -  	ret;end of target frame
   81 D1:AB7D -  -  -  -  
   82 D1:AB7D -  -  -  -  ;a holds 0 indexed line num, (hl) = height ,bc,de = 0
   83 D1:AB7D -  -  -  -  dbgl_setup_and_draw:
   84 D1:AB7D 23 -  -  -  	inc hl;to x pos
   85 D1:AB7E 5E -  -  -  	ld e,(hl)
   86 D1:AB7F 23 -  -  -  	inc hl 
   87 D1:AB80 4E -  -  -  	ld c,(hl);sprite index 
   88 D1:AB81 E5 -  -  -  	push hl
   89 D1:AB82 -  -  -  -  dbgl_vram_line_start .equ $ + 1	
   90 D1:AB82 21 00 00 00 	ld hl,0
   91 D1:AB86 19 -  -  -  	add hl,de;add x pos 
   92 D1:AB87 EB -  -  -  	ex de,hl;put vram pos into de 
   93 D1:AB88 -  -  -  -  dbgl_sprite_pointers .equ $ + 1
   94 D1:AB88 21 00 00 00 	ld hl,0
   95 D1:AB8C 09 -  -  -  	add hl,bc
   96 D1:AB8D 09 -  -  -  	add hl,bc 
   97 D1:AB8E 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
   98 D1:AB8F ED 27 -  -  	ld hl,(hl);hl holds sprite data
   99 D1:AB91 -  -  -  -  
  100 D1:AB91 CD 9F AB D1 	call draw_bg_sprite_line;draw sprite line 
  101 D1:AB95 11 00 00 00 	ld de,0;clear de 
  102 D1:AB99 01 00 00 00 	ld bc,0
  103 D1:AB9D E1 -  -  -  	pop hl;back to data
  104 D1:AB9E C9 -  -  -  	ret
  105 D1:AB9F -  -  -  -  	
  106 D1:AB9F -  -  -  -  
  107 D1:AB9F -  -  -  -  
  108 D1:AB9F -  -  -  -  
  109 D1:AB9F -  -  -  -  
  110 D1:AB9F -  -  -  -  
  111 D1:AB9F -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  112 D1:AB9F -  -  -  -  draw_bg_sprite_line:
  113 D1:AB9F E5 -  -  -  	push hl;save 
  114 D1:ABA0 6E -  -  -  	ld l,(hl);sprite width in px
  115 D1:ABA1 67 -  -  -  	ld h,a ;lines to skip
  116 D1:ABA2 7D -  -  -  	ld a,l;width 
  117 D1:ABA3 ED 6C -  -  	mlt hl;widt*lines skipped 
  118 D1:ABA5 C1 -  -  -  	pop bc 
  119 D1:ABA6 09 -  -  -  	add hl,bc;skip to target line data 
  120 D1:ABA7 23 -  -  -  	inc hl 
  121 D1:ABA8 -  -  -  -  	;hl is pointing to start of line data 
  122 D1:ABA8 CB 2F -  -  	sra a;divide width by 2 
  123 D1:ABAA 47 -  -  -  	ld b,a;b holds number of loops 
  124 D1:ABAB -  -  -  -  dbgsl_loop:
  125 D1:ABAB 1A -  -  -  	ld a,(de); load vram data 
  126 D1:ABAC A6 -  -  -  	and (hl);and with mask 
  127 D1:ABAD 23 -  -  -  	inc hl ;to color data 
  128 D1:ABAE B6 -  -  -  	or (hl);or w color data 
  129 D1:ABAF 12 -  -  -  	ld (de),a;write to vram  
  130 D1:ABB0 13 -  -  -  	inc de
  131 D1:ABB1 23 -  -  -  	inc hl;to mask data
  132 D1:ABB2 10 F7 -  -  	djnz dbgsl_loop
  133 D1:ABB4 C9 -  -  -  	ret 
  134 D1:ABB5 -  -  -  -  	
  135 D1:ABB5 -  -  -  -  
  136 D1:ABB5 -  -  -  -  
  137 D1:ABB5 -  -  -  -  
  138 D1:ABB5 -  -  -  -  
  139 D1:ABB5 -  -  -  -  
  140 D1:ABB5 -  -  -  -  
  141 D1:ABB5 -  -  -  -  
  142 D1:ABB5 -  -  -  -  
  143 D1:ABB5 -  -  -  -  
  144 D1:ABB5 -  -  -  -  
  145 D1:ABB5 -  -  -  -  
  146 D1:ABB5 -  -  -  -  
Listing for file "ascent.asm"
  356 D1:ABB5 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:ABB5 -  -  -  -  
    2 D1:ABB5 -  -  -  -  
    3 D1:ABB5 -  -  -  -  ;de = vram-1 , hl = data, a = number lines to draw
    4 D1:ABB5 -  -  -  -  draw_fast_sprite_bottom_cut:
    5 D1:ABB5 -  -  -  -  
    6 D1:ABB5 01 00 00 00 	ld bc,0
    7 D1:ABB9 4F -  -  -  	ld c,a
    8 D1:ABBA E5 -  -  -  	push hl
    9 D1:ABBB 7E -  -  -  	ld a,(hl);height
   10 D1:ABBC 09 -  -  -  	add hl,bc;hl points to num loops required
   11 D1:ABBD 4F -  -  -  	ld c,a;height
   12 D1:ABBE 7E -  -  -  	ld a,(hl);a holds num loops
   13 D1:ABBF E1 -  -  -  	pop hl
   14 D1:ABC0 23 -  -  -  	inc hl
   15 D1:ABC1 09 -  -  -  	add hl,bc;beginning of pixel data
   16 D1:ABC2 -  -  -  -  
   17 D1:ABC2 4E -  -  -  	ld c,(hl);load alpha length
   18 D1:ABC3 EB -  -  -  	ex de,hl;hl is vram, de is data
   19 D1:ABC4 C3 08 AC D1 	jp dfgs_loop
   20 D1:ABC8 -  -  -  -  	
   21 D1:ABC8 -  -  -  -  ;de = vram-1 , hl = data, a = top lines to skip	
   22 D1:ABC8 -  -  -  -  draw_fast_sprite_top_cut:
   23 D1:ABC8 -  -  -  -  	
   24 D1:ABC8 01 00 00 00 	ld bc,0
   25 D1:ABCC 4F -  -  -  	ld c,a
   26 D1:ABCD D5 -  -  -  	push de
   27 D1:ABCE 11 00 00 00 	ld de,0
   28 D1:ABD2 E5 -  -  -  	push hl
   29 D1:ABD3 5E -  -  -  	ld e,(hl);height
   30 D1:ABD4 09 -  -  -  	add hl,bc;hl points to num skip loops 
   31 D1:ABD5 -  -  -  -  
   32 D1:ABD5 4E -  -  -  	ld c,(hl);c holds num skip loops
   33 D1:ABD6 E1 -  -  -  	pop hl;start of data
   34 D1:ABD7 19 -  -  -  	add hl,de
   35 D1:ABD8 46 -  -  -  	ld b,(hl);total number of loops
   36 D1:ABD9 23 -  -  -  	inc hl;hl is pixel data
   37 D1:ABDA D1 -  -  -  	pop de
   38 D1:ABDB C5 -  -  -  	push bc;save total and skipped loops
   39 D1:ABDC 79 -  -  -  	ld a,c;loops to skip
   40 D1:ABDD 01 00 00 00 	ld bc,0
   41 D1:ABE1 -  -  -  -  	
   42 D1:ABE1 -  -  -  -  
   43 D1:ABE1 -  -  -  -  draw_fast_sprite_top_loop:
   44 D1:ABE1 4E -  -  -  	ld c,(hl);load with first gap length	
   45 D1:ABE2 EB -  -  -  	ex de,hl;hl is vram
   46 D1:ABE3 09 -  -  -  	add hl,bc
   47 D1:ABE4 EB -  -  -  	ex de,hl;hl is data
   48 D1:ABE5 23 -  -  -  	inc hl
   49 D1:ABE6 4E -  -  -  	ld c,(hl);ldir length
   50 D1:ABE7 09 -  -  -  	add hl,bc;add ldir length
   51 D1:ABE8 EB -  -  -  	ex de,hl;hl is vram
   52 D1:ABE9 09 -  -  -  	add hl,bc;add ldir length
   53 D1:ABEA 13 -  -  -  	inc de
   54 D1:ABEB EB -  -  -  	ex de,hl;hl is data
   55 D1:ABEC 3D -  -  -  	dec a
   56 D1:ABED C2 E1 AB D1 	jp nz,draw_fast_sprite_top_loop
   57 D1:ABF1 -  -  -  -  	
   58 D1:ABF1 -  -  -  -  	
   59 D1:ABF1 C1 -  -  -  	pop bc
   60 D1:ABF2 78 -  -  -  	ld a,b
   61 D1:ABF3 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
   62 D1:ABF4 -  -  -  -  		
   63 D1:ABF4 01 00 00 00 	ld bc,0
   64 D1:ABF8 4E -  -  -  	ld c,(hl)
   65 D1:ABF9 EB -  -  -  	ex de,hl
   66 D1:ABFA C3 08 AC D1 	jp dfgs_loop
   67 D1:ABFE -  -  -  -  
   68 D1:ABFE -  -  -  -  
   69 D1:ABFE -  -  -  -  ;de = vram-1 , hl = data
   70 D1:ABFE -  -  -  -  draw_fast_sprite_full:
   71 D1:ABFE 01 00 00 00 	ld bc,0
   72 D1:AC02 4E -  -  -  	ld c,(hl);height
   73 D1:AC03 09 -  -  -  	add hl,bc
   74 D1:AC04 7E -  -  -  	ld a,(hl);total loops
   75 D1:AC05 23 -  -  -  	inc hl
   76 D1:AC06 4E -  -  -  	ld c,(hl);first gap length
   77 D1:AC07 EB -  -  -  	ex de,hl
   78 D1:AC08 -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
   79 D1:AC08 -  -  -  -  dfgs_loop:;gap, colors
   80 D1:AC08 09 -  -  -  	add hl,bc;add alpha length
   81 D1:AC09 EB -  -  -  	ex de,hl;swap, hl is data, de is vram
   82 D1:AC0A 23 -  -  -  	inc hl
   83 D1:AC0B 4E -  -  -  	ld c,(hl);get ldir length
   84 D1:AC0C 23 -  -  -  	inc hl
   85 D1:AC0D ED B0 -  -  	ldir
   86 D1:AC0F 4E -  -  -  	ld c,(hl);load c with next alpha length
   87 D1:AC10 EB -  -  -  	ex de,hl;swap, hl is vram
   88 D1:AC11 3D -  -  -  	dec a
   89 D1:AC12 C2 08 AC D1 	jp nz,dfgs_loop
   90 D1:AC16 C9 -  -  -  	ret
   91 D1:AC17 -  -  -  -  	
   92 D1:AC17 -  -  -  -  	
   93 D1:AC17 -  -  -  -  	
   94 D1:AC17 -  -  -  -  	
   95 D1:AC17 -  -  -  -  
   96 D1:AC17 -  -  -  -  
   97 D1:AC17 -  -  -  -  ;hl = data, de = vram
   98 D1:AC17 -  -  -  -  draw_slow_sprite_full:
   99 D1:AC17 01 00 00 00 	ld bc,0
  100 D1:AC1B 4E -  -  -  	ld c,(hl);height
  101 D1:AC1C 09 -  -  -  	add hl,bc
  102 D1:AC1D 7E -  -  -  	ld a,(hl);num loops
  103 D1:AC1E D9 -  -  -  	exx
  104 D1:AC1F 4F -  -  -  	ld c,a
  105 D1:AC20 D9 -  -  -  	exx
  106 D1:AC21 1B -  -  -  	dec de
  107 D1:AC22 -  -  -  -  	;hl = (gap length) -1 de = vram-1 c' = loops
  108 D1:AC22 -  -  -  -  dsfgs_line_loop:
  109 D1:AC22 23 -  -  -  	inc hl;gap length
  110 D1:AC23 4E -  -  -  	ld c,(hl);gap length
  111 D1:AC24 EB -  -  -  	ex de,hl;hl is vram
  112 D1:AC25 09 -  -  -  	add hl,bc;add aplha gap
  113 D1:AC26 EB -  -  -  	ex de,hl;hl is data
  114 D1:AC27 23 -  -  -  	inc hl;hl points to single pix mask
  115 D1:AC28 1A -  -  -  	ld a,(de);vram data
  116 D1:AC29 A6 -  -  -  	and (hl)
  117 D1:AC2A 23 -  -  -  	inc hl;pixel data
  118 D1:AC2B B6 -  -  -  	or (hl)
  119 D1:AC2C 12 -  -  -  	ld (de),a
  120 D1:AC2D 23 -  -  -  	inc hl;ldir length
  121 D1:AC2E -  -  -  -  	
  122 D1:AC2E 13 -  -  -  	inc de;move to next pixel
  123 D1:AC2F -  -  -  -  	
  124 D1:AC2F 7E -  -  -  	ld a,(hl);ldir length
  125 D1:AC30 23 -  -  -  	inc hl;data
  126 D1:AC31 4F -  -  -  	ld c,a
  127 D1:AC32 B7 -  -  -  	or a
  128 D1:AC33 CA 39 AC D1 	jp z,dsfgs_ldir_skip
  129 D1:AC37 ED B0 -  -  	ldir
  130 D1:AC39 -  -  -  -  dsfgs_ldir_skip:
  131 D1:AC39 1A -  -  -  	ld a,(de);vram data
  132 D1:AC3A A6 -  -  -  	and (hl)
  133 D1:AC3B 23 -  -  -  	inc hl;pixel data
  134 D1:AC3C B6 -  -  -  	or (hl)
  135 D1:AC3D 12 -  -  -  	ld (de),a
  136 D1:AC3E -  -  -  -  	
  137 D1:AC3E D9 -  -  -  	exx 
  138 D1:AC3F 0D -  -  -  	dec c
  139 D1:AC40 D9 -  -  -  	exx
  140 D1:AC41 C2 22 AC D1 	jp nz,dsfgs_line_loop
  141 D1:AC45 C9 -  -  -  	ret
  142 D1:AC46 -  -  -  -  
  143 D1:AC46 -  -  -  -  
  144 D1:AC46 -  -  -  -  ;de = vram , hl = data, a = top lines to skip	
  145 D1:AC46 -  -  -  -  draw_slow_sprite_top_cut:
  146 D1:AC46 -  -  -  -  
  147 D1:AC46 E5 -  -  -  	push hl
  148 D1:AC47 01 00 00 00 	ld bc,0
  149 D1:AC4B 4F -  -  -  	ld c,a
  150 D1:AC4C 09 -  -  -  	add hl,bc
  151 D1:AC4D 7E -  -  -  	ld a,(hl);loops to skip
  152 D1:AC4E 32 71 AC D1 	ld (dsstc_loops_skipped),a
  153 D1:AC52 D9 -  -  -  	exx
  154 D1:AC53 47 -  -  -  	ld b,a;loops to skip
  155 D1:AC54 D9 -  -  -  	exx
  156 D1:AC55 E1 -  -  -  	pop hl
  157 D1:AC56 4E -  -  -  	ld c,(hl)
  158 D1:AC57 09 -  -  -  	add hl,bc;total loops
  159 D1:AC58 7E -  -  -  	ld a,(hl);total loops
  160 D1:AC59 23 -  -  -  	inc hl;gap length
  161 D1:AC5A -  -  -  -  
  162 D1:AC5A -  -  -  -  ;hl = data start, b' = num loops,bc = 0
  163 D1:AC5A D9 -  -  -  	exx
  164 D1:AC5B -  -  -  -  slow_sprite_data_traverse:
  165 D1:AC5B D9 -  -  -  	exx
  166 D1:AC5C 4E -  -  -  	ld c,(hl);gap length
  167 D1:AC5D EB -  -  -  	ex de,hl;hl is vram
  168 D1:AC5E 09 -  -  -  	add hl,bc
  169 D1:AC5F EB -  -  -  	ex de,hl
  170 D1:AC60 -  -  -  -  	
  171 D1:AC60 23 -  -  -  	inc hl
  172 D1:AC61 23 -  -  -  	inc hl
  173 D1:AC62 23 -  -  -  	inc hl;ldir length
  174 D1:AC63 4E -  -  -  	ld c,(hl)
  175 D1:AC64 09 -  -  -  	add hl,bc
  176 D1:AC65 EB -  -  -  	ex de,hl
  177 D1:AC66 09 -  -  -  	add hl,bc
  178 D1:AC67 EB -  -  -  	ex de,hl
  179 D1:AC68 13 -  -  -  	inc de;single pix
  180 D1:AC69 23 -  -  -  	inc hl
  181 D1:AC6A 23 -  -  -  	inc hl
  182 D1:AC6B 23 -  -  -  	inc hl;gap length
  183 D1:AC6C D9 -  -  -  	exx
  184 D1:AC6D 10 EC -  -  	djnz slow_sprite_data_traverse
  185 D1:AC6F D9 -  -  -  	exx
  186 D1:AC70 -  -  -  -  
  187 D1:AC70 -  -  -  -  dsstc_loops_skipped .equ $ + 1
  188 D1:AC70 D6 00 -  -  	sub a,0;loops skipped
  189 D1:AC72 D9 -  -  -  	exx
  190 D1:AC73 4F -  -  -  	ld c,a
  191 D1:AC74 D9 -  -  -  	exx
  192 D1:AC75 -  -  -  -  	
  193 D1:AC75 1B -  -  -  	dec de
  194 D1:AC76 2B -  -  -  	dec hl	
  195 D1:AC77 C3 22 AC D1 	jp dsfgs_line_loop
  196 D1:AC7B -  -  -  -  	
  197 D1:AC7B -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  198 D1:AC7B -  -  -  -  draw_slow_sprite_bottom_cut:
  199 D1:AC7B 01 00 00 00 	ld bc,0
  200 D1:AC7F E5 -  -  -  	push hl
  201 D1:AC80 4F -  -  -  	ld c,a;height
  202 D1:AC81 09 -  -  -  	add hl,bc
  203 D1:AC82 7E -  -  -  	ld a,(hl);num loops
  204 D1:AC83 D9 -  -  -  	exx
  205 D1:AC84 4F -  -  -  	ld c,a
  206 D1:AC85 D9 -  -  -  	exx
  207 D1:AC86 E1 -  -  -  	pop hl
  208 D1:AC87 4E -  -  -  	ld c,(hl)
  209 D1:AC88 09 -  -  -  	add hl,bc
  210 D1:AC89 -  -  -  -  
  211 D1:AC89 1B -  -  -  	dec de
  212 D1:AC8A C3 22 AC D1 	jp dsfgs_line_loop
  213 D1:AC8E -  -  -  -  
  214 D1:AC8E -  -  -  -  
  215 D1:AC8E -  -  -  -  
  216 D1:AC8E -  -  -  -  
  217 D1:AC8E -  -  -  -  
  218 D1:AC8E -  -  -  -  
  219 D1:AC8E -  -  -  -  
  220 D1:AC8E -  -  -  -  
  221 D1:AC8E -  -  -  -  
  222 D1:AC8E -  -  -  -  
  223 D1:AC8E -  -  -  -  
  224 D1:AC8E -  -  -  -  
  225 D1:AC8E -  -  -  -  
  226 D1:AC8E -  -  -  -  
  227 D1:AC8E -  -  -  -  
  228 D1:AC8E -  -  -  -  
  229 D1:AC8E -  -  -  -  
  230 D1:AC8E -  -  -  -  
  231 D1:AC8E -  -  -  -  
  232 D1:AC8E -  -  -  -  
  233 D1:AC8E -  -  -  -  
  234 D1:AC8E -  -  -  -  
  235 D1:AC8E -  -  -  -  
  236 D1:AC8E -  -  -  -  
  237 D1:AC8E -  -  -  -  
  238 D1:AC8E -  -  -  -  
  239 D1:AC8E -  -  -  -  
  240 D1:AC8E -  -  -  -  
  241 D1:AC8E -  -  -  -  
  242 D1:AC8E -  -  -  -  
  243 D1:AC8E -  -  -  -  
  244 D1:AC8E -  -  -  -  
  245 D1:AC8E -  -  -  -  
  246 D1:AC8E -  -  -  -  
  247 D1:AC8E -  -  -  -  
  248 D1:AC8E -  -  -  -   
  249 D1:AC8E -  -  -  -  
  250 D1:AC8E -  -  -  -  
  251 D1:AC8E -  -  -  -  
  252 D1:AC8E -  -  -  -  
  253 D1:AC8E -  -  -  -  
  254 D1:AC8E -  -  -  -  
  255 D1:AC8E -  -  -  -  
  256 D1:AC8E -  -  -  -  
  257 D1:AC8E -  -  -  -  
  258 D1:AC8E -  -  -  -  
  259 D1:AC8E -  -  -  -  
  260 D1:AC8E -  -  -  -  
  261 D1:AC8E -  -  -  -  
  262 D1:AC8E -  -  -  -  
  263 D1:AC8E -  -  -  -  
  264 D1:AC8E -  -  -  -  
  265 D1:AC8E -  -  -  -  
  266 D1:AC8E -  -  -  -  
  267 D1:AC8E -  -  -  -  
  268 D1:AC8E -  -  -  -  
  269 D1:AC8E -  -  -  -  
  270 D1:AC8E -  -  -  -  
  271 D1:AC8E -  -  -  -  
  272 D1:AC8E -  -  -  -  
  273 D1:AC8E -  -  -  -  
  274 D1:AC8E -  -  -  -  
  275 D1:AC8E -  -  -  -  
  276 D1:AC8E -  -  -  -  
  277 D1:AC8E -  -  -  -  
  278 D1:AC8E -  -  -  -  
  279 D1:AC8E -  -  -  -  
  280 D1:AC8E -  -  -  -  
  281 D1:AC8E -  -  -  -  
  282 D1:AC8E -  -  -  -  
  283 D1:AC8E -  -  -  -  
  284 D1:AC8E -  -  -  -  
  285 D1:AC8E -  -  -  -  
  286 D1:AC8E -  -  -  -  
  287 D1:AC8E -  -  -  -  
  288 D1:AC8E -  -  -  -  
  289 D1:AC8E -  -  -  -  
  290 D1:AC8E -  -  -  -  
  291 D1:AC8E -  -  -  -  
  292 D1:AC8E -  -  -  -  
  293 D1:AC8E -  -  -  -  
  294 D1:AC8E -  -  -  -  
  295 D1:AC8E -  -  -  -  
  296 D1:AC8E -  -  -  -  
  297 D1:AC8E -  -  -  -  
  298 D1:AC8E -  -  -  -  
  299 D1:AC8E -  -  -  -  
  300 D1:AC8E -  -  -  -  
  301 D1:AC8E -  -  -  -  
  302 D1:AC8E -  -  -  -  
  303 D1:AC8E -  -  -  -  
  304 D1:AC8E -  -  -  -  	
  305 D1:AC8E -  -  -  -  	
Listing for file "ascent.asm"
  357 D1:AC8E -  -  -  -  #include "spriteData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteData.txt"
    1 D1:AC8E -  -  -  -  
    2 D1:AC8E -  -  -  -  
    3 D1:AC8E -  -  -  -  
    4 D1:AC8E -  -  -  -  
    5 D1:AC8E -  -  -  -  ;BG SPRITES
    6 D1:AC8E -  -  -  -  ; width(px) rounded up
    7 D1:AC8E -  -  -  -  ;.db vram data mask, color data....
    8 D1:AC8E -  -  -  -  
    9 D1:AC8E -  -  -  -  testBGSprite:
   10 D1:AC8E 0A -  -  -  	.db 10
   11 D1:AC8F 00 35 FF 00 
              F0 03 0F 50 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$50,$F0,$05
   12 D1:AC99 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   13 D1:ACA3 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   14 D1:ACAD 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   15 D1:ACB7 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03
   16 D1:ACC1 00 22 00 22 
              00 33 0F 30 
              F0 02 -  -  	.db $00,$22,$00,$22,$00,$33,$0F,$30,$F0,$02
   17 D1:ACCB 00 35 FF 00 
              F0 03 0F 05 
              F0 05 -  -  	.db $00,$35,$FF,$00,$F0,$03,$0F,$05,$F0,$05
   18 D1:ACD5 FF 00 FF 00 
              FF 00 00 23 
              F0 03 -  -  	.db $FF,$00,$FF,$00,$FF,$00,$00,$23,$F0,$03	
   19 D1:ACDF -  -  -  -  ;53xx3xx55
   20 D1:ACDF -  -  -  -  ;xxxxxx323
   21 D1:ACDF -  -  -  -  ;222233x32
   22 D1:ACDF -  -  -  -  ;53xx3xx55
   23 D1:ACDF -  -  -  -  ;xxxxxx323	
   24 D1:ACDF -  -  -  -  ;222233x32
   25 D1:ACDF -  -  -  -  
   26 D1:ACDF -  -  -  -  
   27 D1:ACDF -  -  -  -  	
   28 D1:ACDF -  -  -  -  ;FG _ SPRITES
   29 D1:ACDF -  -  -  -  
   30 D1:ACDF -  -  -  -  ;YBRGW
   31 D1:ACDF -  -  -  -  
   32 D1:ACDF -  -  -  -  ;SLOW_Sprite,  even pixel start
   33 D1:ACDF -  -  -  -  ;.height
   34 D1:ACDF -  -  -  -  ;.num loops per num lines
   35 D1:ACDF -  -  -  -  
   36 D1:ACDF -  -  -  -  ;.db alpha length(gap between single pixels, 0 for a gap of -1, 1 for no gap),single pixel mask(%00001111) or (%11111111) single pixel data (%data0000) or (%00000000),
   37 D1:ACDF -  -  -  -  ; ldir length, main pixel data,pixel mask,pixel data.....
   38 D1:ACDF -  -  -  -  
   39 D1:ACDF -  -  -  -  testSlowSprite:
   40 D1:ACDF 05 -  -  -  	.db 5
   41 D1:ACE0 02 04 07 0B 
              0C -  -  -  	.db 2,4,7,11,12
   42 D1:ACE5 00 FF 00 02 
              35 35 FF 00 
              00 FF 00 02 
              24 24 FF 00 	.db 0,%11111111,%00000000,2,$35,$35,%11111111,%00000000,0,%11111111,%00000000,2,$24,$24,%11111111,%00000000
   43 D1:ACF5 9B FF 00 02 
              31 31 F0 01 
              01 FF 00 01 
              11 FF 00 -  	.db 155, %11111111,%00000000,2,$31,$31,%11110000,$01,1,%11111111,%00000000,1,$11,%11111111,%00000000
   44 D1:AD04 9A 0F 50 01 
              53 FF 00 00 
              FF 00 01 35 
              F0 05 01 0F 
              50 00 FF 00 	.db 154,%00001111,$50,1,$53,%11111111,%00000000,0,%11111111,%00000000,1,$35,%11110000,$05,1,%00001111,$50,0,%11111111,%00000000
   45 D1:AD18 9A 0F 30 00 
              F0 03 00 FF 
              00 00 F0 03 
              01 0F 30 00 
              7F 00 00 0F 
              30 00 FF 00 	.db 154,%00001111,$30,0,%11110000,$03,0,%11111111,%00000000,0,%11110000,$03,1,%00001111,$30,0,%1111111,00000000,0,%00001111,$30,0,%11111111,%00000000
   46 D1:AD30 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   47 D1:AD3A -  -  -  -  	
   48 D1:AD3A -  -  -  -  	;WRWRXXGBGBXX
   49 D1:AD3A -  -  -  -  	
   50 D1:AD3A -  -  -  -  	;XXYRYRYXXXYY
   51 D1:AD3A -  -  -  -  	
   52 D1:AD3A -  -  -  -  	;XW RW XX WR WX XW
   53 D1:AD3A -  -  -  -  	
   54 D1:AD3A -  -  -  -  	;XR RX RX XR XR XX
   55 D1:AD3A -  -  -  -  	
   56 D1:AD3A -  -  -  -  	;XW WW WW WW WW WX
   57 D1:AD3A -  -  -  -  	
   58 D1:AD3A -  -  -  -  	
   59 D1:AD3A -  -  -  -  testSlowSpriteBestCase:
   60 D1:AD3A 05 -  -  -  	.db 5
   61 D1:AD3B 01 02 03 04 
              05 -  -  -  	.db 1,2,3,4,5
   62 D1:AD40 00 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 0,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   63 D1:AD4A 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   64 D1:AD54 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   65 D1:AD5E 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   66 D1:AD68 9B 0F 50 04 
              55 55 55 55 
              F0 05 -  -  	.db 155,%00001111,$50,4,$55,$55,$55,$55,%11110000,$05
   67 D1:AD72 -  -  -  -  	
   68 D1:AD72 -  -  -  -  ;XW WW WW WW WW WX
   69 D1:AD72 -  -  -  -  ;XW WW WW WW WW WX
   70 D1:AD72 -  -  -  -  ;XW WW WW WW WW WX
   71 D1:AD72 -  -  -  -  ;XW WW WW WW WW WX
   72 D1:AD72 -  -  -  -  ;XW WW WW WW WW WX
   73 D1:AD72 -  -  -  -  
   74 D1:AD72 -  -  -  -  ;YBRGW
   75 D1:AD72 -  -  -  -  
   76 D1:AD72 -  -  -  -  ;.db flags ( 4bpc,3bpc,2bpc,1bpc,0bpc,noalpha
   77 D1:AD72 -  -  -  -  ;.db width(px),height
   78 D1:AD72 -  -  -  -  ;.db alpha data 
   79 D1:AD72 -  -  -  -  ;.db color data
   80 D1:AD72 -  -  -  -  
   81 D1:AD72 -  -  -  -  	
   82 D1:AD72 -  -  -  -  testSpriteCompressed:
   83 D1:AD72 80 -  -  -  	.db %10000000;4bpc
   84 D1:AD73 08 08 -  -  	.db 8,8
   85 D1:AD75 -  -  -  -  ;.db $33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22
   86 D1:AD75 7E -  -  -  	.db %01111110;1
   87 D1:AD76 66 -  -  -  	.db %01100110;2
   88 D1:AD77 CE -  -  -  	.db %11001110;2
   89 D1:AD78 55 -  -  -  	.db %01010101;2
   90 D1:AD79 AA -  -  -  	.db %10101010;2
   91 D1:AD7A 6E -  -  -  	.db %01101110;2
   92 D1:AD7B 3B -  -  -  	.db %00111011;2
   93 D1:AD7C 67 -  -  -  	.db %01100111;2
   94 D1:AD7D 53 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 11 
              22 33 55 -  	.db $53,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55,$11,$22,$33,$55;indexed color data
   95 D1:ADA4 -  -  -  -  	;1 3 5 7 9 11 13 15
   96 D1:ADA4 -  -  -  -  	
   97 D1:ADA4 -  -  -  -  testSpriteCompressed2:
   98 D1:ADA4 03 04 -  -  	.db 3,4
   99 D1:ADA6 CD 50 -  -  	.db %11001101,%01010000
  100 D1:ADA8 23 23 23 23 
              23 -  -  -  	.db $23,$23,$23,$23,$23
  101 D1:ADAD -  -  -  -  	;110
  102 D1:ADAD -  -  -  -  	;011
  103 D1:ADAD -  -  -  -  	;010
  104 D1:ADAD -  -  -  -  	;101
  105 D1:ADAD -  -  -  -  	
  106 D1:ADAD -  -  -  -  
  107 D1:ADAD -  -  -  -  testSpriteCompressed3:
  108 D1:ADAD 05 04 -  -  	.db 5,4
  109 D1:ADAF 76 B2 70 -  	.db %01110110,%10110010,%01110000
  110 D1:ADB2 55 55 55 55 
              55 55 55 -  	.db $55,$55,$55,$55,$55,$55,$55
  111 D1:ADB9 -  -  -  -  	;01110
  112 D1:ADB9 -  -  -  -  	;11010
  113 D1:ADB9 -  -  -  -  	;11001
  114 D1:ADB9 -  -  -  -  	;00111
  115 D1:ADB9 -  -  -  -  
  116 D1:ADB9 -  -  -  -  
  117 D1:ADB9 -  -  -  -  testSpriteCompressed4:
  118 D1:ADB9 40 -  -  -  	.db %01000000;3bpc
  119 D1:ADBA 09 04 -  -  	.db 9,4
  120 D1:ADBC 9D 5F F6 82 
              B0 -  -  -  	.db %10011101,%01011111,%11110110,%10000010,%10110000
  121 D1:ADC1 54 32 10 33 	.db $54,$32,$10,$33
  122 D1:ADC5 E3 8E 38 E3 
              8E 38 E3 8E 
              38 E3 E3 8E 
              38 E3 8E 38 
              E3 8E 38 E3 	.db %11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011,%10001110,%00111000,%11100011
  123 D1:ADD9 -  -  -  -  ;100111010  2 loop
  124 D1:ADD9 -  -  -  -  ;101111111  1 loop
  125 D1:ADD9 -  -  -  -  ;110110100  2 loop
  126 D1:ADD9 -  -  -  -  ;000101011  2 loop
  127 D1:ADD9 -  -  -  -  ;2357
  128 D1:ADD9 -  -  -  -  testSpriteCompressedFast:
  129 D1:ADD9 20 -  -  -  	.db %00100000;4bpc
  130 D1:ADDA 08 08 -  -  	.db 8,8
  131 D1:ADDC F0 -  -  -  	.db %11110000
  132 D1:ADDD 33 -  -  -  	.db %00110011
  133 D1:ADDE C3 -  -  -  	.db %11000011
  134 D1:ADDF FF -  -  -  	.db %11111111
  135 D1:ADE0 F3 -  -  -  	.db %11110011
  136 D1:ADE1 CC -  -  -  	.db %11001100
  137 D1:ADE2 C0 -  -  -  	.db %11000000
  138 D1:ADE3 3F -  -  -  	.db %00111111
  139 D1:ADE4 54 32 -  -  	.db $54,$32
  140 D1:ADE6 C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 C9 C9 C9 
              C9 -  -  -  	.db %11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001,%11001001
  141 D1:ADFF 55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 
              55 44 33 22 	.db $55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22,$55,$44,$33,$22
  142 D1:AE23 -  -  -  -  	
  143 D1:AE23 -  -  -  -  	
  144 D1:AE23 -  -  -  -  	
  145 D1:AE23 -  -  -  -  testBGSpriteComp:
  146 D1:AE23 24 -  -  -  	.db %00100100;2bpc noalpha
  147 D1:AE24 08 08 -  -  	.db 8,8;8 wide 
  148 D1:AE26 23 45 -  -  	.db $23,$45;brgw
  149 D1:AE28 00 00 55 55 
              AA AA FF FF 	.db %00000000,%00000000,%01010101,%01010101,%10101010,%10101010,%11111111,%11111111
  150 D1:AE30 00 55 55 00 
              00 AA AA 00 	.db %00000000,%01010101,%01010101,%00000000,%00000000,%10101010,%10101010,%00000000
  151 D1:AE38 -  -  -  -  	
  152 D1:AE38 -  -  -  -  	
  153 D1:AE38 -  -  -  -  testBGSpriteComp2:
  154 D1:AE38 24 -  -  -  	.db %00100100;2bpc noalpha
  155 D1:AE39 06 06 -  -  	.db 6,6;
  156 D1:AE3B 23 45 -  -  	.db $23,$45;brgw
  157 D1:AE3D 00 05 55 AA 
              AF FF -  -  	.db %00000000,%00000101,%01010101,%10101010,%10101111,%11111111
  158 D1:AE43 00 05 55 -  	.db %00000000,%00000101,%01010101
  159 D1:AE46 -  -  -  -  	
  160 D1:AE46 -  -  -  -  testBGSpriteComp3:
  161 D1:AE46 24 -  -  -  	.db %00100100;2bpc noalpha
  162 D1:AE47 06 01 -  -  	.db 6,1;
  163 D1:AE49 23 45 -  -  	.db $23,$45;brgw
  164 D1:AE4B 00 00 -  -  	.db %00000000,%00000000
  165 D1:AE4D -  -  -  -  
  166 D1:AE4D -  -  -  -  	
  167 D1:AE4D -  -  -  -  	
  168 D1:AE4D -  -  -  -  	
  169 D1:AE4D -  -  -  -  ;FAST_SPRITE	
  170 D1:AE4D -  -  -  -  ;double pixel transparency, no gaps
  171 D1:AE4D -  -  -  -  ;.db height
  172 D1:AE4D -  -  -  -  ;.db num loops for num lines
  173 D1:AE4D -  -  -  -  ;.db to next ldir start, color length, data
  174 D1:AE4D -  -  -  -  
  175 D1:AE4D -  -  -  -  test_fast_sprite:;20x4px,complex
  176 D1:AE4D 04 -  -  -  	.db 4
  177 D1:AE4E 02 06 07 09 	.db 2,6,7,9
  178 D1:AE52 02 02 12 45 
              03 04 33 32 
              45 44 -  -  	.db 2,2,%00010010,%01000101,3,4,%00110011,%00110010,%01000101,%01000100 ;gap, length,    						XXBYWGXXXXXXRRBRWGGG
  179 D1:AE5C 97 02 21 21 
              01 02 35 35 
              01 01 43 01 
              01 35 -  -  	.db 151,2,%00100001,%00100001,1,2,%00110101,%00110101,1,1,%01000011,1,1,%00110101; 								XXYBYBXXWRWRXXRGXXWR
  180 D1:AE6A 96 0A 35 35 
              45 45 12 12 
              34 34 34 34 	.db 150,10,%00110101,%00110101,%01000101,%01000101,%00010010,%00010010,%00110100,%00110100,%00110100,%00110100; WRWRWGWGBYBYGRGRGRGR
  181 D1:AE76 98 05 55 11 
              22 33 44 01 
              02 44 53 -  	.db 152,5,%01010101,%00010001,%00100010,%00110011,%01000100,1,2,%01000100,%01010011;							XXXXWWYYBBRRGGXXGGRW
  182 D1:AE81 -  -  -  -  
  183 D1:AE81 -  -  -  -  
  184 D1:AE81 -  -  -  -  
  185 D1:AE81 -  -  -  -  ;COMPLEX_SPRITE
  186 D1:AE81 -  -  -  -  ;16 color, per pixel transparency, even or odd start
  187 D1:AE81 -  -  -  -  
  188 D1:AE81 -  -  -  -  
  189 D1:AE81 -  -  -  -  
  190 D1:AE81 -  -  -  -  
  191 D1:AE81 -  -  -  -  
  192 D1:AE81 -  -  -  -  
  193 D1:AE81 -  -  -  -  
  194 D1:AE81 -  -  -  -  
  195 D1:AE81 -  -  -  -  
  196 D1:AE81 -  -  -  -  
  197 D1:AE81 -  -  -  -  
  198 D1:AE81 -  -  -  -  
  199 D1:AE81 -  -  -  -  
  200 D1:AE81 -  -  -  -  
  201 D1:AE81 -  -  -  -  
  202 D1:AE81 -  -  -  -  
  203 D1:AE81 -  -  -  -  
  204 D1:AE81 -  -  -  -  
  205 D1:AE81 -  -  -  -  	
Listing for file "ascent.asm"
  358 D1:AE81 -  -  -  -  #include "levelData.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\levelData.txt"
    1 D1:AE81 -  -  -  -  bg_sprite_pointers:;255 sprites max
    2 D1:AE81 -  -  -  -  	;.dl lastSprite
    3 D1:AE81 -  -  -  -  	;.dl lastSpritecopy
    4 D1:AE81 -  -  -  -  	;.dl sprite2
    5 D1:AE81 -  -  -  -  	;.dl sprite3
    6 D1:AE81 -  -  -  -  
    7 D1:AE81 -  -  -  -  
    8 D1:AE81 -  -  -  -  
    9 D1:AE81 -  -  -  -  
   10 D1:AE81 -  -  -  -  bg_data_frame:
   11 D1:AE81 -  -  -  -  	;.db sprite data table pointer
   12 D1:AE81 -  -  -  -  	;.db y (lsb) ,height-1,x,index(0 indicates end of data)
   13 D1:AE81 -  -  -  -  	
   14 D1:AE81 -  -  -  -  
   15 D1:AE81 -  -  -  -  bg_sprite_pointers_1:
   16 D1:AE81 00 96 D4 -  	.dl testBG1
   17 D1:AE84 00 96 D4 -  	.dl testBG1;h = 7
   18 D1:AE87 A0 96 D4 -  	.dl testBG2;h = 5
   19 D1:AE8A 40 97 D4 -  	.dl testBG3;h = 0
   20 D1:AE8D E0 97 D4 -  	.dl testBG4
   21 D1:AE90 -  -  -  -  
   22 D1:AE90 -  -  -  -  bg_data_frame_0:
   23 D1:AE90 81 AE D1 -  	.dl bg_sprite_pointers_1 
   24 D1:AE93 C8 07 05 00 	.db 200,7,5,0
   25 D1:AE97 -  -  -  -  	;upper 
   26 D1:AE97 -  -  -  -  bg_data_frame_1:
   27 D1:AE97 81 AE D1 -  	.dl bg_sprite_pointers_1
   28 D1:AE9A C8 07 05 01 	.db 200,7,5,1
   29 D1:AE9E 64 07 05 01 	.db 100,7,5,1
   30 D1:AEA2 08 07 05 01 	.db 8,7,5,1
   31 D1:AEA6 07 07 0A 01 	.db 7,7,10,1
   32 D1:AEAA 06 07 0F 01 	.db 6,7,15,1;X
   33 D1:AEAE 05 07 14 01 	.db 5,7,20,1;X
   34 D1:AEB2 05 05 19 02 	.db 5,5,25,2
   35 D1:AEB6 04 05 1E 02 	.db 4,5,30,2;X
   36 D1:AEBA 03 05 23 02 	.db 3,5,35,2;X
   37 D1:AEBE 00 05 28 02 	.db 0,5,40,2;X
   38 D1:AEC2 00 00 2D 03 	.db 0,0,45,3
   39 D1:AEC6 0A 00 32 03 	.db 10,0,50,3
   40 D1:AECA 32 07 05 00 	.db 50,7,5,0;end 
   41 D1:AECE -  -  -  -  	
   42 D1:AECE -  -  -  -  bg_data_frame_2:
   43 D1:AECE 81 AE D1 -  	.dl bg_sprite_pointers_1
   44 D1:AED1 FF 07 3C 01 	.db 255,7,60,1
   45 D1:AED5 FE 07 41 01 	.db 254,7,65,1
   46 D1:AED9 64 05 46 02 	.db 100,5,70,2
   47 D1:AEDD 64 00 4B 03 	.db 100,0,75,3
   48 D1:AEE1 32 07 50 00 	.db 50,7,80,0
   49 D1:AEE5 -  -  -  -  	
   50 D1:AEE5 -  -  -  -  	
Listing for file "ascent.asm"
  359 D1:AEE5 -  -  -  -  #include "spriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\spriteDecompress.txt"
    1 D1:AEE5 -  -  -  -  
    2 D1:AEE5 -  -  -  -  
    3 D1:AEE5 -  -  -  -  ;hl = sprite data start, de = main data decompress location de' = loops/line data location
    4 D1:AEE5 -  -  -  -  sprite_decompress:
    5 D1:AEE5 3E D2 -  -  	ld a,%11010010;jp nc 
    6 D1:AEE7 32 DA AF D1 	ld (sdcomp_end_reached_flag),a;reset end reached flag
    7 D1:AEEB 3E 00 -  -  	ld a,0
    8 D1:AEED 32 EA AF D1 	ld (sdcomp_loop_counter) ,a;reset loop counter
    9 D1:AEF1 CD FB B3 D1 	call sdcomp_reset_noalpha
   10 D1:AEF5 -  -  -  -  ;set bpc mode 
   11 D1:AEF5 CB 7E -  -  	bit 7,(hl)
   12 D1:AEF7 C4 A7 B2 D1 	call nz,sdcomp_set_4bpp 
   13 D1:AEFB CB 76 -  -  	bit 6,(hl)
   14 D1:AEFD C4 FA B2 D1 	call nz,sdcomp_set_3bpp 
   15 D1:AF01 CB 6E -  -  	bit 5,(hl)
   16 D1:AF03 C4 4B B3 D1 	call nz,sdcomp_set_2bpp 
   17 D1:AF07 CB 66 -  -  	bit 4,(hl)
   18 D1:AF09 C4 94 B3 D1 	call nz,sdcomp_set_1bpp 
   19 D1:AF0D CB 5E -  -  	bit 3,(hl)
   20 D1:AF0F C4 D3 B3 D1 	call nz,sdcomp_set_0bpp 
   21 D1:AF13 CB 56 -  -  	bit 2,(hl)
   22 D1:AF15 C4 EA B3 D1 	call nz,sdcomp_set_noalpha
   23 D1:AF19 23 -  -  -  	inc hl
   24 D1:AF1A -  -  -  -  	
   25 D1:AF1A -  -  -  -  	
   26 D1:AF1A -  -  -  -  ;set zeroes btwn lines
   27 D1:AF1A 7E -  -  -  	ld a,(hl);width,in px
   28 D1:AF1B E5 -  -  -  	push hl 
   29 D1:AF1C 21 40 01 00 	ld hl,320
   30 D1:AF20 01 00 00 00 	ld bc,0
   31 D1:AF24 4F -  -  -  	ld c,a 
   32 D1:AF25 37 -  -  -  	scf 
   33 D1:AF26 3F -  -  -  	ccf 
   34 D1:AF27 ED 42 -  -  	sbc hl,bc;320 - width
   35 D1:AF29 22 1C B1 D1 	ld (sdcomp_zeroes_between_lines),hl
   36 D1:AF2D E1 -  -  -  	pop hl 
   37 D1:AF2E 47 -  -  -  	ld b,a;width
   38 D1:AF2F 08 -  -  -  	ex af,af' ;'
   39 D1:AF30 78 -  -  -  	ld a,b
   40 D1:AF31 32 50 B1 D1 	ld (sdcomp_sprite_width),a
   41 D1:AF35 08 -  -  -  	ex af,af' ;'
   42 D1:AF36 -  -  -  -  
   43 D1:AF36 -  -  -  -  	
   44 D1:AF36 37 -  -  -  	scf 
   45 D1:AF37 -  -  -  -  sdcomp_bg_sprite_1 .equ $
   46 D1:AF37 DA 44 AF D1 	jp c,sdcomp_bg_sprite_1_skip
   47 D1:AF3B -  -  -  -  	;a holds width 
   48 D1:AF3B CB 47 -  -  	bit 0,a ;round up a 
   49 D1:AF3D CA 42 AF D1 	jp z,sdcomp_bg_sprite_1_round_skip
   50 D1:AF41 3C -  -  -  	inc a 
   51 D1:AF42 -  -  -  -  sdcomp_bg_sprite_1_round_skip:
   52 D1:AF42 12 -  -  -  	ld (de),a ;load width 
   53 D1:AF43 13 -  -  -  	inc de
   54 D1:AF44 -  -  -  -  sdcomp_bg_sprite_1_skip:
   55 D1:AF44 -  -  -  -  
   56 D1:AF44 -  -  -  -  
   57 D1:AF44 -  -  -  -  
   58 D1:AF44 -  -  -  -  
   59 D1:AF44 -  -  -  -  
   60 D1:AF44 23 -  -  -  	inc hl;to height
   61 D1:AF45 7E -  -  -  	ld a,(hl);height
   62 D1:AF46 32 0A B1 D1 	ld (sdcomp_lines_remaining),a;load remaining lines
   63 D1:AF4A -  -  -  -  	
   64 D1:AF4A 37 -  -  -  	scf 
   65 D1:AF4B -  -  -  -  sdcomp_bg_sprite_2 .equ $
   66 D1:AF4B D2 51 AF D1 	jp nc,sdcomp_bg_sprite_2_skip
   67 D1:AF4F 12 -  -  -  	ld (de),a;height
   68 D1:AF50 13 -  -  -  	inc de
   69 D1:AF51 -  -  -  -  sdcomp_bg_sprite_2_skip:
   70 D1:AF51 D5 -  -  -  	push de;loop/line data start 
   71 D1:AF52 D9 -  -  -  	exx;to shadow
   72 D1:AF53 D1 -  -  -  	pop de ;de' is loop/line data
   73 D1:AF54 D9 -  -  -  	exx
   74 D1:AF55 -  -  -  -  
   75 D1:AF55 -  -  -  -  ;find start of color data
   76 D1:AF55 23 -  -  -  	inc hl;alpha data start
   77 D1:AF56 E5 -  -  -  	push hl
   78 D1:AF57 -  -  -  -  	
   79 D1:AF57 37 -  -  -  	scf
   80 D1:AF58 -  -  -  -  sdcomp_no_alpha_1 .equ $
   81 D1:AF58 D2 71 AF D1 	jp nc, sdcomp_no_alpha_1_skip
   82 D1:AF5C E5 -  -  -  	push hl
   83 D1:AF5D 67 -  -  -  	ld h,a;height
   84 D1:AF5E 68 -  -  -  	ld l,b;width
   85 D1:AF5F ED 6C -  -  	mlt hl;number of pixels
   86 D1:AF61 2B -  -  -  	dec hl
   87 D1:AF62 CB 3C -  -  	srl h
   88 D1:AF64 CB 1D -  -  	rr l
   89 D1:AF66 CB 3C -  -  	srl h
   90 D1:AF68 CB 1D -  -  	rr l 
   91 D1:AF6A CB 3C -  -  	srl h 
   92 D1:AF6C CB 1D -  -  	rr l ;divide by 8
   93 D1:AF6E 23 -  -  -  	inc hl 
   94 D1:AF6F C1 -  -  -  	pop bc
   95 D1:AF70 09 -  -  -  	add hl,bc;hl holds start of color data
   96 D1:AF71 -  -  -  -  sdcomp_no_alpha_1_skip:
   97 D1:AF71 -  -  -  -  
   98 D1:AF71 -  -  -  -  	;HL POINTING TO COLOR DATA
   99 D1:AF71 -  -  -  -  
  100 D1:AF71 -  -  -  -  	
  101 D1:AF71 F5 -  -  -  	push af;save height
  102 D1:AF72 -  -  -  -  	
  103 D1:AF72 37 -  -  -  	scf 
  104 D1:AF73 -  -  -  -  sdcomp_get_indexed_color_1bpc .equ $ 
  105 D1:AF73 DA 7D AF D1 	jp c,sdcomp_get_indexed_color_1bpc_skip
  106 D1:AF77 7E -  -  -  	ld a,(hl);color data 
  107 D1:AF78 32 CD B1 D1 	ld (sdcomp_indexed_color_data),a 
  108 D1:AF7C 23 -  -  -  	inc hl 
  109 D1:AF7D -  -  -  -  sdcomp_get_indexed_color_1bpc_skip:
  110 D1:AF7D -  -  -  -  
  111 D1:AF7D 37 -  -  -  	scf 
  112 D1:AF7E -  -  -  -  sdcomp_get_indexed_color_2bpc .equ $ 
  113 D1:AF7E DA 88 AF D1 	jp c,sdcomp_get_indexed_color_2bpc_skip
  114 D1:AF82 7E -  -  -  	ld a,(hl);color data 
  115 D1:AF83 32 CE B1 D1 	ld (sdcomp_indexed_color_data+1),a 
  116 D1:AF87 23 -  -  -  	inc hl 
  117 D1:AF88 -  -  -  -  sdcomp_get_indexed_color_2bpc_skip:
  118 D1:AF88 -  -  -  -  
  119 D1:AF88 37 -  -  -  	scf 
  120 D1:AF89 -  -  -  -  sdcomp_get_indexed_color_3bpc .equ $ 
  121 D1:AF89 DA 99 AF D1 	jp c,sdcomp_get_indexed_color_3bpc_skip
  122 D1:AF8D 7E -  -  -  	ld a,(hl);color data 
  123 D1:AF8E 32 CF B1 D1 	ld (sdcomp_indexed_color_data+2),a 
  124 D1:AF92 23 -  -  -  	inc hl 
  125 D1:AF93 7E -  -  -  	ld a,(hl);color data 
  126 D1:AF94 32 D0 B1 D1 	ld (sdcomp_indexed_color_data+3),a 
  127 D1:AF98 23 -  -  -  	inc hl 
  128 D1:AF99 -  -  -  -  sdcomp_get_indexed_color_3bpc_skip:
  129 D1:AF99 -  -  -  -  
  130 D1:AF99 F1 -  -  -  	pop af
  131 D1:AF9A EB -  -  -  	ex de,hl
  132 D1:AF9B 01 00 00 00 	ld bc,0
  133 D1:AF9F 4F -  -  -  	ld c,a;height 
  134 D1:AFA0 09 -  -  -  	add hl,bc
  135 D1:AFA1 EB -  -  -  	ex de,hl;de points to data write location
  136 D1:AFA2 -  -  -  -  	
  137 D1:AFA2 -  -  -  -  	
  138 D1:AFA2 D9 -  -  -  	exx;to shadow 
  139 D1:AFA3 E1 -  -  -  	pop hl;alpha data	
  140 D1:AFA4 -  -  -  -  
  141 D1:AFA4 -  -  -  -  	;HL IS POINTING TO ALPHA DATA
  142 D1:AFA4 0E 80 -  -  	ld c,%10000000;alpha mask
  143 D1:AFA6 D9 -  -  -  	exx;out 
  144 D1:AFA7 0E 80 -  -  	ld c,%10000000;color mask
  145 D1:AFA9 -  -  -  -  	
  146 D1:AFA9 -  -  -  -  	
  147 D1:AFA9 -  -  -  -  	
  148 D1:AFA9 37 -  -  -  	scf 
  149 D1:AFAA -  -  -  -  sdcomp_flip_1 .equ $
  150 D1:AFAA DA CA AF D1 	jp c,sdcomp_find_gap_length;continue if no flip
  151 D1:AFAE -  -  -  -  
  152 D1:AFAE D9 -  -  -  	exx;to shadow 
  153 D1:AFAF 2B -  -  -  	dec hl;dec alpha pointer
  154 D1:AFB0 22 EE B1 D1 	ld (sdcomp_alpha_data_line_end_byte),hl 
  155 D1:AFB4 3E 01 -  -  	ld a,%00000001;alpha mask
  156 D1:AFB6 32 F2 B1 D1 	ld (sdcomp_alpha_data_line_end_mask),a 
  157 D1:AFBA D9 -  -  -  	exx ;out 
  158 D1:AFBB 2B -  -  -  	dec hl;dec color pointer
  159 D1:AFBC 22 E7 B1 D1 	ld (sdcomp_color_data_line_end_byte),hl 
  160 D1:AFC0 3E 01 -  -  	ld a,%00000001;color mask
  161 D1:AFC2 32 EB B1 D1 	ld (sdcomp_color_data_line_end_mask),a 
  162 D1:AFC6 -  -  -  -  	
  163 D1:AFC6 -  -  -  -  
  164 D1:AFC6 -  -  -  -  	
  165 D1:AFC6 -  -  -  -  	
  166 D1:AFC6 CD E6 B1 D1 	call sdcomp_traverse_line_data	
  167 D1:AFCA -  -  -  -  
  168 D1:AFCA -  -  -  -  ;START OF LOOP===================================================================================================
  169 D1:AFCA -  -  -  -  ;add amount to get from ending pixels to first nonzero pair
  170 D1:AFCA -  -  -  -  sdcomp_find_gap_length:
  171 D1:AFCA 37 -  -  -  	scf 
  172 D1:AFCB -  -  -  -  sdcomp_bg_sprite_3 .equ $
  173 D1:AFCB D2 56 B4 D1 	jp nc,sdcomp_bg_sprite_routine
  174 D1:AFCF -  -  -  -  	
  175 D1:AFCF D9 -  -  -  	exx ;toshadow
  176 D1:AFD0 06 00 -  -  	ld b,0;pairs found, always < 255 
  177 D1:AFD2 -  -  -  -  sdcomp_add_1_gap_length .equ $
  178 D1:AFD2 00 -  -  -  	nop
  179 D1:AFD3 3E 00 -  -  	ld a,0;nop
  180 D1:AFD5 32 D2 AF D1 	ld (sdcomp_add_1_gap_length),a
  181 D1:AFD9 -  -  -  -  sdcomp_find_gap_length_loop:
  182 D1:AFD9 -  -  -  -  	
  183 D1:AFD9 37 -  -  -  	scf 
  184 D1:AFDA -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  185 D1:AFDA D2 DF B1 D1 	jp nc,sdcomp_end
  186 D1:AFDE -  -  -  -  
  187 D1:AFDE CD B7 B0 D1 	call sdcomp_get_next_alpha_pair
  188 D1:AFE2 -  -  -  -  	;a holds alpha data 
  189 D1:AFE2 04 -  -  -  	inc b
  190 D1:AFE3 B7 -  -  -  	or a 
  191 D1:AFE4 CA D9 AF D1 	jp z,sdcomp_find_gap_length_loop
  192 D1:AFE8 -  -  -  -  	;END OF LOOP, B HOLDS NUMBER OF 00 PAIRS  +1
  193 D1:AFE8 -  -  -  -  		
  194 D1:AFE8 -  -  -  -  	
  195 D1:AFE8 F5 -  -  -  	push af;saves leading pixel alpha data
  196 D1:AFE9 -  -  -  -  	;inc loop counter 
  197 D1:AFE9 -  -  -  -  sdcomp_loop_counter .equ $ + 1
  198 D1:AFE9 3E 00 -  -  	ld a,0;inc number of loops
  199 D1:AFEB 3C -  -  -  	inc a 
  200 D1:AFEC 32 EA AF D1 	ld (sdcomp_loop_counter),a
  201 D1:AFF0 -  -  -  -  	
  202 D1:AFF0 78 -  -  -  	ld a,b 
  203 D1:AFF1 D9 -  -  -  	exx;out of shadow 
  204 D1:AFF2 12 -  -  -  	ld (de),a;GAP LENGTH 
  205 D1:AFF3 13 -  -  -  	inc de 
  206 D1:AFF4 D9 -  -  -  	exx;into shadow 	
  207 D1:AFF5 -  -  -  -  	
  208 D1:AFF5 F1 -  -  -  	pop af
  209 D1:AFF6 37 -  -  -  	scf
  210 D1:AFF7 -  -  -  -  sdcomp_fast_sprite_1 .equ $ 
  211 D1:AFF7 D2 2A B0 D1 	jp nc,sdcomp_ldir_start ;jp c if fast move to ldir loop 
  212 D1:AFFB -  -  -  -  
  213 D1:AFFB -  -  -  -  ;LEADING PIXELS
  214 D1:AFFB -  -  -  -  	;a holds alpha data after gap, 11 01 10
  215 D1:AFFB D9 -  -  -  	exx;out of shadow
  216 D1:AFFC D5 -  -  -  	push de 
  217 D1:AFFD -  -  -  -  	
  218 D1:AFFD 47 -  -  -  	ld b,a;save for later
  219 D1:AFFE CB 67 -  -  	bit 4,a ;check if first pixel has color 
  220 D1:B000 3E 00 -  -  	ld a,0
  221 D1:B002 16 FF -  -  	ld d,%11111111;assuming no colors 
  222 D1:B004 CA 0E B0 D1 	jp z,sdcomp_leading_pixel_first_skip
  223 D1:B008 -  -  -  -  	;has first color
  224 D1:B008 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  225 D1:B00A CD DA B1 D1 	call sdcomp_get_next_color_ending_nibble
  226 D1:B00E -  -  -  -  sdcomp_leading_pixel_first_skip:
  227 D1:B00E -  -  -  -  	;a is either $00 or $0color1
  228 D1:B00E -  -  -  -  	
  229 D1:B00E 1E FF -  -  	ld e,%11111111;assuming no colors
  230 D1:B010 -  -  -  -  	
  231 D1:B010 CB 40 -  -  	bit 0,b;check second pixel alpha
  232 D1:B012 47 -  -  -  	ld b,a;save for later 
  233 D1:B013 3E 00 -  -  	ld a,0
  234 D1:B015 CA 1F B0 D1 	jp z,sdcomp_leading_pixel_second_skip;
  235 D1:B019 -  -  -  -  	;has second color 
  236 D1:B019 CD D1 B1 D1 	call sdcomp_get_next_color_leading_nibble
  237 D1:B01D -  -  -  -  	;a = color2 0 
  238 D1:B01D 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  239 D1:B01F -  -  -  -  	
  240 D1:B01F -  -  -  -  sdcomp_leading_pixel_second_skip:
  241 D1:B01F -  -  -  -  	;a is either 00 or c2 0 
  242 D1:B01F -  -  -  -  	;b is either 00 or 0 c1 
  243 D1:B01F B0 -  -  -  	or b 
  244 D1:B020 47 -  -  -  	ld b,a;final color data
  245 D1:B021 7A -  -  -  	ld a,d 
  246 D1:B022 A3 -  -  -  	and e ;final mask data 
  247 D1:B023 -  -  -  -  	
  248 D1:B023 D1 -  -  -  	pop de;return to pointer 
  249 D1:B024 -  -  -  -  	
  250 D1:B024 12 -  -  -  	ld (de),a;write mask data 
  251 D1:B025 13 -  -  -  	inc de 
  252 D1:B026 78 -  -  -  	ld a,b;color data 
  253 D1:B027 12 -  -  -  	ld (de),a;write color data 
  254 D1:B028 13 -  -  -  	inc de 
  255 D1:B029 D9 -  -  -  	exx;into shadow 
  256 D1:B02A -  -  -  -  	
  257 D1:B02A -  -  -  -  sdcomp_ldir_start:
  258 D1:B02A -  -  -  -  ;CHECK FOR LDIR 
  259 D1:B02A 06 00 -  -  	ld b,0;pairs found 
  260 D1:B02C -  -  -  -  sdcomp_ldir_loop:
  261 D1:B02C CD B7 B0 D1 	call sdcomp_get_next_alpha_pair
  262 D1:B030 04 -  -  -  	inc b
  263 D1:B031 EE FF -  -  	xor %11111111;flip bits
  264 D1:B033 CA 2C B0 D1 	jp z,sdcomp_ldir_loop;alpha data was 11
  265 D1:B037 -  -  -  -  	;b holds pairs found+1
  266 D1:B037 -  -  -  -  	
  267 D1:B037 37 -  -  -  	scf 
  268 D1:B038 -  -  -  -  sdcomp_fast_sprite_2 .equ $
  269 D1:B038 D2 55 B0 D1 	jp nc,sdcomp_ldir_write
  270 D1:B03C -  -  -  -  	;fast mode 
  271 D1:B03C -  -  -  -  	;b holds ldir length 
  272 D1:B03C -  -  -  -  	
  273 D1:B03C -  -  -  -  sdcomp_ldir_not_fast:
  274 D1:B03C EE FF -  -  	xor %11111111;flip back
  275 D1:B03E -  -  -  -  	;a holds first non 11 pair 
  276 D1:B03E 05 -  -  -  	dec b ;b holds pairs found
  277 D1:B03F CA 64 B0 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  278 D1:B043 B7 -  -  -  	or a
  279 D1:B044 C2 55 B0 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  280 D1:B048 -  -  -  -  	;ends in 00,ending pixels will be 11 
  281 D1:B048 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  282 D1:B048 3E 04 -  -  	ld a,%00000100;inc b 
  283 D1:B04A 32 D2 AF D1 	ld (sdcomp_add_1_gap_length),a 
  284 D1:B04E 3E FF -  -  	ld a,$ff;ending pixels 11
  285 D1:B050 -  -  -  -  	
  286 D1:B050 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  287 D1:B051 CA 64 B0 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  288 D1:B055 -  -  -  -  	;b holds ldir length 
  289 D1:B055 -  -  -  -  	
  290 D1:B055 -  -  -  -  ;b holds ldir length, a holds ending pixels
  291 D1:B055 -  -  -  -  sdcomp_ldir_write:
  292 D1:B055 F5 -  -  -  	push af;save ending pixels
  293 D1:B056 78 -  -  -  	ld a,b
  294 D1:B057 D9 -  -  -  	exx ;out 
  295 D1:B058 12 -  -  -  	ld (de),a;write ldir length
  296 D1:B059 13 -  -  -  	inc de 
  297 D1:B05A CD A3 B0 D1 	call sdcomp_write_ldir_data_loop
  298 D1:B05E D9 -  -  -  	exx ;toshadow
  299 D1:B05F F1 -  -  -  	pop af;return ending pixels
  300 D1:B060 -  -  -  -  	
  301 D1:B060 -  -  -  -  	
  302 D1:B060 C3 6C B0 D1 	jp sdcomp_write_end_pixels
  303 D1:B064 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  304 D1:B064 F5 -  -  -  	push af;save end pixels
  305 D1:B065 -  -  -  -  	
  306 D1:B065 D9 -  -  -  	exx;out of shadow
  307 D1:B066 3E 00 -  -  	ld a,0
  308 D1:B068 12 -  -  -  	ld (de),a 
  309 D1:B069 13 -  -  -  	inc de 
  310 D1:B06A D9 -  -  -  	exx 
  311 D1:B06B F1 -  -  -  	pop af;return ending pixels
  312 D1:B06C -  -  -  -  
  313 D1:B06C -  -  -  -  
  314 D1:B06C -  -  -  -  ;WRITE ENDING PIXELS 
  315 D1:B06C -  -  -  -  
  316 D1:B06C -  -  -  -  sdcomp_write_end_pixels:;a holds end pixels
  317 D1:B06C -  -  -  -  	
  318 D1:B06C D9 -  -  -  	exx;out of shadow
  319 D1:B06D -  -  -  -  	
  320 D1:B06D 37 -  -  -  	scf 
  321 D1:B06E -  -  -  -  sdcomp_fast_sprite_3 .equ $
  322 D1:B06E D2 CA AF D1 	jp nc,sdcomp_find_gap_length;if fast, back to gap length
  323 D1:B072 -  -  -  -  	
  324 D1:B072 -  -  -  -  	
  325 D1:B072 D5 -  -  -  	push de 
  326 D1:B073 -  -  -  -  	
  327 D1:B073 47 -  -  -  	ld b,a;save for later
  328 D1:B074 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  329 D1:B076 3E 00 -  -  	ld a,0
  330 D1:B078 16 FF -  -  	ld d,%11111111;assuming no colors 
  331 D1:B07A CA 84 B0 D1 	jp z,sdcomp_ending_pixel_first_skip
  332 D1:B07E -  -  -  -  	;has first color
  333 D1:B07E 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  334 D1:B080 CD DA B1 D1 	call sdcomp_get_next_color_ending_nibble
  335 D1:B084 -  -  -  -  sdcomp_ending_pixel_first_skip:
  336 D1:B084 -  -  -  -  	;a is either $00 or $0color1
  337 D1:B084 -  -  -  -  	
  338 D1:B084 1E FF -  -  	ld e,%11111111;assuming no colors
  339 D1:B086 -  -  -  -  	
  340 D1:B086 CB 40 -  -  	bit 0,b;check second pixel alpha
  341 D1:B088 47 -  -  -  	ld b,a;save for later 
  342 D1:B089 3E 00 -  -  	ld a,0
  343 D1:B08B CA 95 B0 D1 	jp z,sdcomp_ending_pixel_second_skip;
  344 D1:B08F -  -  -  -  	;has second color 
  345 D1:B08F CD D1 B1 D1 	call sdcomp_get_next_color_leading_nibble
  346 D1:B093 -  -  -  -  	;a = color2 0 
  347 D1:B093 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  348 D1:B095 -  -  -  -  	
  349 D1:B095 -  -  -  -  sdcomp_ending_pixel_second_skip:
  350 D1:B095 -  -  -  -  	;a is either 00 or c2 0 
  351 D1:B095 -  -  -  -  	;b is either 00 or 0 c1 
  352 D1:B095 B0 -  -  -  	or b 
  353 D1:B096 47 -  -  -  	ld b,a;final color data
  354 D1:B097 7A -  -  -  	ld a,d 
  355 D1:B098 A3 -  -  -  	and e ;final mask data 
  356 D1:B099 -  -  -  -  	
  357 D1:B099 D1 -  -  -  	pop de;return to pointer 
  358 D1:B09A -  -  -  -  	
  359 D1:B09A 12 -  -  -  	ld (de),a;write mask data 
  360 D1:B09B 13 -  -  -  	inc de 
  361 D1:B09C 78 -  -  -  	ld a,b;color data 
  362 D1:B09D 12 -  -  -  	ld (de),a;write color data 
  363 D1:B09E 13 -  -  -  	inc de 
  364 D1:B09F -  -  -  -  	
  365 D1:B09F -  -  -  -  	
  366 D1:B09F C3 CA AF D1 	jp sdcomp_find_gap_length;BACK TO START
  367 D1:B0A3 -  -  -  -  	
  368 D1:B0A3 -  -  -  -  	
  369 D1:B0A3 -  -  -  -  
  370 D1:B0A3 -  -  -  -  
  371 D1:B0A3 -  -  -  -  
  372 D1:B0A3 -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  373 D1:B0A3 -  -  -  -  sdcomp_write_ldir_data_loop:
  374 D1:B0A3 CD DA B1 D1 	call sdcomp_get_next_color_ending_nibble	
  375 D1:B0A7 47 -  -  -  	ld b,a;first pixel
  376 D1:B0A8 CD D1 B1 D1 	call sdcomp_get_next_color_leading_nibble
  377 D1:B0AC B0 -  -  -  	or b
  378 D1:B0AD -  -  -  -  	
  379 D1:B0AD -  -  -  -  	
  380 D1:B0AD 12 -  -  -  	ld (de),a;write color data
  381 D1:B0AE 13 -  -  -  	inc de
  382 D1:B0AF D9 -  -  -  	exx;to shadow
  383 D1:B0B0 05 -  -  -  	dec b;ldir length counter
  384 D1:B0B1 D9 -  -  -  	exx
  385 D1:B0B2 C2 A3 B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  386 D1:B0B6 C9 -  -  -  	ret
  387 D1:B0B7 -  -  -  -  	
  388 D1:B0B7 -  -  -  -  	
  389 D1:B0B7 -  -  -  -  	
  390 D1:B0B7 -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  391 D1:B0B7 -  -  -  -  sdcomp_get_next_alpha_pair:
  392 D1:B0B7 CD E0 B0 D1 	call sdcomp_get_next_alpha_bit
  393 D1:B0BB B7 -  -  -  	or a 
  394 D1:B0BC CA C6 B0 D1 	jp z,sdcomp_get_next_alpha_pair0
  395 D1:B0C0 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  396 D1:B0C2 C3 C8 B0 D1 	jp sdcomp_get_next_alpha_pair1
  397 D1:B0C6 -  -  -  -  sdcomp_get_next_alpha_pair0:
  398 D1:B0C6 3E 00 -  -  	ld a,0
  399 D1:B0C8 -  -  -  -  sdcomp_get_next_alpha_pair1:
  400 D1:B0C8 32 DE B0 D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  401 D1:B0CC -  -  -  -  	
  402 D1:B0CC CD E0 B0 D1 	call sdcomp_get_next_alpha_bit
  403 D1:B0D0 B7 -  -  -  	or a 
  404 D1:B0D1 CA DB B0 D1 	jp z,sdcomp_get_next_alpha_pair2
  405 D1:B0D5 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  406 D1:B0D7 C3 DD B0 D1 	jp sdcomp_get_next_alpha_pair3
  407 D1:B0DB -  -  -  -  sdcomp_get_next_alpha_pair2:
  408 D1:B0DB 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  409 D1:B0DD -  -  -  -  sdcomp_get_next_alpha_pair3:	
  410 D1:B0DD -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  411 D1:B0DD F6 00 -  -  	or 0;AND WITH FIRST BIT 
  412 D1:B0DF -  -  -  -  	
  413 D1:B0DF C9 -  -  -  	ret 
  414 D1:B0E0 -  -  -  -  
  415 D1:B0E0 -  -  -  -  
  416 D1:B0E0 -  -  -  -  ;in shadow
  417 D1:B0E0 -  -  -  -  sdcomp_get_next_alpha_bit:
  418 D1:B0E0 -  -  -  -  	
  419 D1:B0E0 37 -  -  -  	scf
  420 D1:B0E1 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  421 D1:B0E1 DA EE B0 D1 	jp c,sdcomp_bit_offset_skip
  422 D1:B0E5 3E DA -  -  	ld a,%11011010;jp c 
  423 D1:B0E7 32 E1 B0 D1 	ld (sdcomp_bit_offset),a
  424 D1:B0EB 3E 00 -  -  	ld a,0
  425 D1:B0ED C9 -  -  -  	ret ;return 0 first bit
  426 D1:B0EE -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  427 D1:B0EE -  -  -  -  	;CHECKS IF OUTSIDE OF SPRITE,VIRTUAL 0s
  428 D1:B0EE 08 -  -  -  	ex af,af' ;'
  429 D1:B0EF B7 -  -  -  	or a
  430 D1:B0F0 CA 27 B1 D1 	jp z,sdcomp_line_end
  431 D1:B0F4 08 -  -  -  	ex af,af' ;'
  432 D1:B0F5 -  -  -  -  
  433 D1:B0F5 -  -  -  -  	;LOAD NEXT BIT
  434 D1:B0F5 -  -  -  -  	
  435 D1:B0F5 7E -  -  -  	ld a,(hl)
  436 D1:B0F6 A1 -  -  -  	and c 
  437 D1:B0F7 CD 55 B1 D1 	call sdcomp_next_in_bitstream;incs bitstream
  438 D1:B0FB -  -  -  -  	
  439 D1:B0FB 37 -  -  -  	scf 
  440 D1:B0FC -  -  -  -  sdcomp_no_alpha_2 .equ $
  441 D1:B0FC DA 02 B1 D1 	jp c,sdcomp_no_alpha_skip
  442 D1:B100 3E 01 -  -  	ld a,1
  443 D1:B102 -  -  -  -  sdcomp_no_alpha_skip:
  444 D1:B102 -  -  -  -  	
  445 D1:B102 -  -  -  -  	
  446 D1:B102 -  -  -  -  	;DEC WIDTH COUNTER
  447 D1:B102 08 -  -  -  	ex af,af' ;';to shadow
  448 D1:B103 3D -  -  -  	dec a;dec width counter
  449 D1:B104 C2 25 B1 D1 	jp nz,sdcomp_setup_line_gap_skip
  450 D1:B108 -  -  -  -  	
  451 D1:B108 -  -  -  -  	;END OF LINE REACHED, have just read alpha last bit of line
  452 D1:B108 -  -  -  -  	
  453 D1:B108 -  -  -  -  	;AT LINE END,WRITE LOOPS/LINE DATA
  454 D1:B108 F5 -  -  -  	push af;push shadow a 
  455 D1:B109 -  -  -  -  	;DEC NUMBER LINES REMAINING
  456 D1:B109 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  457 D1:B109 3E 00 -  -  	ld a,0
  458 D1:B10B 3D -  -  -  	dec a 
  459 D1:B10C 32 0A B1 D1 	ld (sdcomp_lines_remaining),a
  460 D1:B110 C2 1A B1 D1 	jp nz,sdcomp_set_end_flag_skip
  461 D1:B114 -  -  -  -  	;end of last line reached 
  462 D1:B114 3E DA -  -  	ld a,%11011010;jp c
  463 D1:B116 32 DA AF D1 	ld (sdcomp_end_reached_flag) , a
  464 D1:B11A -  -  -  -  sdcomp_set_end_flag_skip:
  465 D1:B11A -  -  -  -  	;SET UP NUMBER OF VIRTUAL ZEROES
  466 D1:B11A E5 -  -  -  	push hl
  467 D1:B11B -  -  -  -  sdcomp_zeroes_between_lines .equ $ + 1 
  468 D1:B11B 21 00 00 00 	ld hl,0;320-width
  469 D1:B11F 22 2A B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  470 D1:B123 E1 -  -  -  	pop hl
  471 D1:B124 F1 -  -  -  	pop af 
  472 D1:B125 -  -  -  -  	
  473 D1:B125 -  -  -  -  	
  474 D1:B125 -  -  -  -  sdcomp_setup_line_gap_skip:
  475 D1:B125 08 -  -  -  	ex af,af' ;';out of shadow
  476 D1:B126 C9 -  -  -  	ret;A HOLDS 0 OR NOT 0
  477 D1:B127 -  -  -  -  	
  478 D1:B127 -  -  -  -  	
  479 D1:B127 -  -  -  -  	;IF OUTSIDE OF SPRITE,RETURN VIRTUAL 0
  480 D1:B127 -  -  -  -  sdcomp_line_end:
  481 D1:B127 08 -  -  -  	ex af,af' ;';out of shadow keep a' at 0 until next line start reached 
  482 D1:B128 E5 -  -  -  	push hl
  483 D1:B129 -  -  -  -  	;DEC REMAINING ZEROES
  484 D1:B129 -  -  -  -  sdcomp_remaining_zeroes_between_lines .equ $ + 1 
  485 D1:B129 21 00 00 00 	ld hl,0;320 - width 
  486 D1:B12D 2B -  -  -  	dec hl
  487 D1:B12E 22 2A B1 D1 	ld (sdcomp_remaining_zeroes_between_lines),hl
  488 D1:B132 7D -  -  -  	ld a,l
  489 D1:B133 B4 -  -  -  	or h
  490 D1:B134 E1 -  -  -  	pop hl
  491 D1:B135 CA 3C B1 D1 	jp z,sdcomp_line_gap_end;IF END OF VIRTUAL ZEROES
  492 D1:B139 3E 00 -  -  	ld a,0
  493 D1:B13B C9 -  -  -  	ret;return 0
  494 D1:B13C -  -  -  -  	
  495 D1:B13C -  -  -  -  sdcomp_line_gap_end:
  496 D1:B13C -  -  -  -  	
  497 D1:B13C 37 -  -  -  	scf 
  498 D1:B13D -  -  -  -  sdcomp_bg_sprite_4 .equ $ 
  499 D1:B13D D2 47 B1 D1 	jp nc,sdcomp_bg_sprite_4_skip
  500 D1:B141 -  -  -  -  	
  501 D1:B141 3A EA AF D1 	ld a,(sdcomp_loop_counter)
  502 D1:B145 12 -  -  -  	ld (de),a;write loops per line data
  503 D1:B146 13 -  -  -  	inc de
  504 D1:B147 -  -  -  -  sdcomp_bg_sprite_4_skip:
  505 D1:B147 -  -  -  -  	
  506 D1:B147 D9 -  -  -  	exx;out
  507 D1:B148 -  -  -  -  
  508 D1:B148 37 -  -  -  	scf
  509 D1:B149 -  -  -  -  sdcomp_flip_7 .equ $ ;call c 
  510 D1:B149 D4 E6 B1 D1 	call nc,sdcomp_traverse_line_data
  511 D1:B14D -  -  -  -  
  512 D1:B14D D9 -  -  -  	exx ;in
  513 D1:B14E -  -  -  -  	
  514 D1:B14E 08 -  -  -  	ex af,af' ;';to shadow
  515 D1:B14F -  -  -  -  sdcomp_sprite_width .equ $ + 1
  516 D1:B14F 3E 00 -  -  	ld a,0;ld shadow a with width
  517 D1:B151 08 -  -  -  	ex af,af' ;';out of shadow
  518 D1:B152 3E 00 -  -  	ld a,0;ret 0
  519 D1:B154 C9 -  -  -  	ret
  520 D1:B155 -  -  -  -  
  521 D1:B155 -  -  -  -  
  522 D1:B155 -  -  -  -  
  523 D1:B155 -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
  524 D1:B155 -  -  -  -  sdcomp_next_in_bitstream:
  525 D1:B155 -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
  526 D1:B155 CB 09 -  -  	rrc c;rlc flip
  527 D1:B157 D0 -  -  -  	ret nc
  528 D1:B158 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
  529 D1:B158 23 -  -  -  	inc hl;dec hl flip
  530 D1:B159 C9 -  -  -  	ret
  531 D1:B15A -  -  -  -  
  532 D1:B15A -  -  -  -  
  533 D1:B15A -  -  -  -  
  534 D1:B15A -  -  -  -  
  535 D1:B15A -  -  -  -  
  536 D1:B15A -  -  -  -  
  537 D1:B15A -  -  -  -  ;bit orders
  538 D1:B15A -  -  -  -  ;	noflip   flip 
  539 D1:B15A -  -  -  -  ;4bpp 3210 	 0123
  540 D1:B15A -  -  -  -  ;3bpp 210	 012
  541 D1:B15A -  -  -  -  ;2bpp 10	 01
  542 D1:B15A -  -  -  -  ;1bpp 0		 0
  543 D1:B15A -  -  -  -  
  544 D1:B15A -  -  -  -  
  545 D1:B15A -  -  -  -  ;not in shadow,returns a=0000color
  546 D1:B15A -  -  -  -  sdcomp_get_color_data:
  547 D1:B15A D5 -  -  -  	push de 
  548 D1:B15B 1E 00 -  -  	ld e,0
  549 D1:B15D -  -  -  -  	
  550 D1:B15D 37 -  -  -  	scf
  551 D1:B15E -  -  -  -  sdcomp_0bpc .equ $ 
  552 D1:B15E D2 A8 B1 D1 	jp nc,sdcomp_get_color_from_index
  553 D1:B162 -  -  -  -  	
  554 D1:B162 7E -  -  -  	ld a,(hl)
  555 D1:B163 A1 -  -  -  	and c 
  556 D1:B164 CD 55 B1 D1 	call sdcomp_next_in_bitstream
  557 D1:B168 B7 -  -  -  	or a
  558 D1:B169 CA 6F B1 D1 	jp z,sdcomp_get_color_data_set_skip_1
  559 D1:B16D -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  560 D1:B16D CB C3 -  -  	set 0,e 
  561 D1:B16F -  -  -  -  sdcomp_get_color_data_set_skip_1:
  562 D1:B16F -  -  -  -  	
  563 D1:B16F 37 -  -  -  	scf
  564 D1:B170 -  -  -  -  sdcomp_1bpc .equ $
  565 D1:B170 D2 A8 B1 D1 	jp nc,sdcomp_get_color_from_index
  566 D1:B174 -  -  -  -  	
  567 D1:B174 -  -  -  -  	
  568 D1:B174 7E -  -  -  	ld a,(hl)
  569 D1:B175 A1 -  -  -  	and c 
  570 D1:B176 CD 55 B1 D1 	call sdcomp_next_in_bitstream
  571 D1:B17A B7 -  -  -  	or a
  572 D1:B17B CA 81 B1 D1 	jp z,sdcomp_get_color_data_set_skip_2
  573 D1:B17F -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  574 D1:B17F CB CB -  -  	set 1,e 
  575 D1:B181 -  -  -  -  sdcomp_get_color_data_set_skip_2:
  576 D1:B181 -  -  -  -  	
  577 D1:B181 37 -  -  -  	scf
  578 D1:B182 -  -  -  -  sdcomp_2bpc .equ $
  579 D1:B182 D2 A8 B1 D1 	jp nc,sdcomp_get_color_from_index
  580 D1:B186 -  -  -  -  	
  581 D1:B186 7E -  -  -  	ld a,(hl)
  582 D1:B187 A1 -  -  -  	and c 
  583 D1:B188 CD 55 B1 D1 	call sdcomp_next_in_bitstream
  584 D1:B18C B7 -  -  -  	or a
  585 D1:B18D CA 93 B1 D1 	jp z,sdcomp_get_color_data_set_skip_3
  586 D1:B191 -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  587 D1:B191 CB D3 -  -  	set 2,e 
  588 D1:B193 -  -  -  -  sdcomp_get_color_data_set_skip_3:
  589 D1:B193 -  -  -  -  	
  590 D1:B193 37 -  -  -  	scf
  591 D1:B194 -  -  -  -  sdcomp_3bpc .equ $
  592 D1:B194 D2 A8 B1 D1 	jp nc,sdcomp_get_color_from_index	
  593 D1:B198 -  -  -  -  
  594 D1:B198 7E -  -  -  	ld a,(hl)
  595 D1:B199 A1 -  -  -  	and c 
  596 D1:B19A CD 55 B1 D1 	call sdcomp_next_in_bitstream
  597 D1:B19E B7 -  -  -  	or a
  598 D1:B19F CA A5 B1 D1 	jp z,sdcomp_get_color_data_set_skip_4
  599 D1:B1A3 -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  600 D1:B1A3 CB DB -  -  	set 3,e 
  601 D1:B1A5 -  -  -  -  sdcomp_get_color_data_set_skip_4:
  602 D1:B1A5 -  -  -  -  ;4bpp, interpret as color data 
  603 D1:B1A5 7B -  -  -  	ld a,e 
  604 D1:B1A6 D1 -  -  -  	pop de 
  605 D1:B1A7 C9 -  -  -  	ret 
  606 D1:B1A8 -  -  -  -  
  607 D1:B1A8 -  -  -  -  sdcomp_get_color_from_index:
  608 D1:B1A8 E5 -  -  -  	push hl 
  609 D1:B1A9 C5 -  -  -  	push bc 
  610 D1:B1AA 01 00 00 00 	ld bc,0
  611 D1:B1AE 21 CD B1 D1 	ld hl,sdcomp_indexed_color_data
  612 D1:B1B2 4B -  -  -  	ld c,e ;index number
  613 D1:B1B3 CB 39 -  -  	srl c;div by 2
  614 D1:B1B5 09 -  -  -  	add hl,bc;add index
  615 D1:B1B6 7E -  -  -  	ld a,(hl)
  616 D1:B1B7 CB 43 -  -  	bit 0,e;check lsb
  617 D1:B1B9 CA C3 B1 D1 	jp z,sdcomp_get_color_from_index_and_msn
  618 D1:B1BD E6 0F -  -  	and %00001111;a holds 0000color
  619 D1:B1BF C1 -  -  -  	pop bc 
  620 D1:B1C0 E1 -  -  -  	pop hl 
  621 D1:B1C1 D1 -  -  -  	pop de 
  622 D1:B1C2 C9 -  -  -  	ret 
  623 D1:B1C3 -  -  -  -  	
  624 D1:B1C3 -  -  -  -  sdcomp_get_color_from_index_and_msn:
  625 D1:B1C3 E6 F0 -  -  	and %11110000
  626 D1:B1C5 0F -  -  -  	rrca 
  627 D1:B1C6 0F -  -  -  	rrca 
  628 D1:B1C7 0F -  -  -  	rrca 
  629 D1:B1C8 0F -  -  -  	rrca ;a holds 0000colro
  630 D1:B1C9 C1 -  -  -  	pop bc 
  631 D1:B1CA E1 -  -  -  	pop hl 
  632 D1:B1CB D1 -  -  -  	pop de 
  633 D1:B1CC C9 -  -  -  	ret
  634 D1:B1CD -  -  -  -  	
  635 D1:B1CD -  -  -  -  sdcomp_indexed_color_data:;4bpc
  636 D1:B1CD 00 00 00 00 	.db 0,0,0,0
  637 D1:B1D1 -  -  -  -  
  638 D1:B1D1 -  -  -  -  
  639 D1:B1D1 -  -  -  -  
  640 D1:B1D1 -  -  -  -  
  641 D1:B1D1 -  -  -  -  
  642 D1:B1D1 -  -  -  -  ;not in shadow, returns a = color0000
  643 D1:B1D1 -  -  -  -  sdcomp_get_next_color_leading_nibble:
  644 D1:B1D1 CD 5A B1 D1 	call sdcomp_get_color_data
  645 D1:B1D5 0F -  -  -  	rrca 
  646 D1:B1D6 0F -  -  -  	rrca 
  647 D1:B1D7 0F -  -  -  	rrca 
  648 D1:B1D8 0F -  -  -  	rrca
  649 D1:B1D9 C9 -  -  -  	ret 
  650 D1:B1DA -  -  -  -  
  651 D1:B1DA -  -  -  -  
  652 D1:B1DA -  -  -  -  ;not in shadow, returns a = 0000color
  653 D1:B1DA -  -  -  -  sdcomp_get_next_color_ending_nibble:
  654 D1:B1DA CD 5A B1 D1 	call sdcomp_get_color_data
  655 D1:B1DE C9 -  -  -  	ret
  656 D1:B1DF -  -  -  -  
  657 D1:B1DF -  -  -  -  sdcomp_end:
  658 D1:B1DF -  -  -  -  	;write final loop/line data
  659 D1:B1DF 3A EA AF D1 	ld a,(sdcomp_loop_counter)
  660 D1:B1E3 12 -  -  -  	ld (de),a;write loops per line data
  661 D1:B1E4 13 -  -  -  	inc de
  662 D1:B1E5 C9 -  -  -  	ret 
  663 D1:B1E6 -  -  -  -  
  664 D1:B1E6 -  -  -  -  
  665 D1:B1E6 -  -  -  -  
  666 D1:B1E6 -  -  -  -  
  667 D1:B1E6 -  -  -  -  
  668 D1:B1E6 -  -  -  -  
  669 D1:B1E6 -  -  -  -  
  670 D1:B1E6 -  -  -  -  ;not in shadow ,destroys a
  671 D1:B1E6 -  -  -  -  sdcomp_traverse_line_data:
  672 D1:B1E6 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  673 D1:B1E6 21 00 00 00 	ld hl,0
  674 D1:B1EA -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  675 D1:B1EA 0E 00 -  -  	ld c,0
  676 D1:B1EC D9 -  -  -  	exx;toshadow 
  677 D1:B1ED -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  678 D1:B1ED 21 00 00 00 	ld hl,0
  679 D1:B1F1 -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  680 D1:B1F1 0E 00 -  -  	ld c,0
  681 D1:B1F3 D5 -  -  -  	push de
  682 D1:B1F4 3A 50 B1 D1 	ld a,(sdcomp_sprite_width)
  683 D1:B1F8 5F -  -  -  	ld e,a
  684 D1:B1F9 -  -  -  -  sdcomp_traverse_line_data_loop:
  685 D1:B1F9 CB 09 -  -  	rrc c 
  686 D1:B1FB D2 00 B2 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip
  687 D1:B1FF 23 -  -  -  	inc hl
  688 D1:B200 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  689 D1:B200 7E -  -  -  	ld a,(hl)
  690 D1:B201 A1 -  -  -  	and c
  691 D1:B202 -  -  -  -  sdcomp_no_alpha_3 .equ $
  692 D1:B202 CA 18 B2 D1 	jp z,sdcomp_traverse_line_data_color_skip;jp c for no alpha
  693 D1:B206 D9 -  -  -  	exx;out of shadow 
  694 D1:B207 -  -  -  -  sdcomp_traverse_1bpp .equ $ + 1
  695 D1:B207 CB 09 -  -  	rrc c ;rotate mask
  696 D1:B209 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  697 D1:B209 CB 09 -  -  	rrc c ;rrc a for 1bpc
  698 D1:B20B -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  699 D1:B20B CB 09 -  -  	rrc c;rrc a for 2bpc
  700 D1:B20D -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  701 D1:B20D CB 09 -  -  	rrc c
  702 D1:B20F -  -  -  -  	
  703 D1:B20F 79 -  -  -  	ld a,c
  704 D1:B210 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  705 D1:B210 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000
  706 D1:B212 CA 17 B2 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  707 D1:B216 23 -  -  -  	inc hl
  708 D1:B217 -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  709 D1:B217 D9 -  -  -  	exx ;toshadow
  710 D1:B218 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  711 D1:B218 1D -  -  -  	dec e
  712 D1:B219 C2 F9 B1 D1 	jp nz,sdcomp_traverse_line_data_loop
  713 D1:B21D D1 -  -  -  	pop de  
  714 D1:B21E 22 EE B1 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  715 D1:B222 79 -  -  -  	ld a,c
  716 D1:B223 32 F2 B1 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  717 D1:B227 D9 -  -  -  	exx ;out
  718 D1:B228 22 E7 B1 D1 	ld (sdcomp_color_data_line_end_byte),hl
  719 D1:B22C 79 -  -  -  	ld a,c 
  720 D1:B22D 32 EB B1 D1 	ld (sdcomp_color_data_line_end_mask),a
  721 D1:B231 C9 -  -  -  	ret
  722 D1:B232 -  -  -  -  
  723 D1:B232 -  -  -  -  
  724 D1:B232 -  -  -  -  
  725 D1:B232 -  -  -  -  sdcomp_set_flip:
  726 D1:B232 3E D2 -  -  	ld a,%11010010;jp nc 
  727 D1:B234 32 AA AF D1 	ld (sdcomp_flip_1),a 
  728 D1:B238 -  -  -  -   
  729 D1:B238 3E DC -  -  	ld a,%11011100;call c 
  730 D1:B23A 32 49 B1 D1 	ld (sdcomp_flip_7),a
  731 D1:B23E -  -  -  -  	
  732 D1:B23E 3E 01 -  -  	ld a,%00000001;rlc 
  733 D1:B240 32 56 B1 D1 	ld (sdcomp_flip_bitstream),a
  734 D1:B244 3E 2B -  -  	ld a,%00101011;dec hl
  735 D1:B246 32 58 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  736 D1:B24A -  -  -  -  	
  737 D1:B24A -  -  -  -  	
  738 D1:B24A -  -  -  -  	;set reverse color reading
  739 D1:B24A 3E C3 -  -  	ld a,%11000011;set 0,e
  740 D1:B24C 32 6E B1 D1 	ld (sdcomp_color_bit_0),a 
  741 D1:B250 3E CB -  -  	ld a,%11001011;set 1,e
  742 D1:B252 32 80 B1 D1 	ld (sdcomp_color_bit_1),a 
  743 D1:B256 3E D3 -  -  	ld a,%11010011;set 2,e
  744 D1:B258 32 92 B1 D1 	ld (sdcomp_color_bit_2),a 
  745 D1:B25C 3E DB -  -  	ld a,%11011011;set 3,e
  746 D1:B25E 32 A4 B1 D1 	ld (sdcomp_color_bit_3),a 
  747 D1:B262 -  -  -  -  	
  748 D1:B262 3E D8 -  -  	ld a,%11011000;ret c 
  749 D1:B264 32 E0 B2 D1 	ld (sdcomp_flip_4),a
  750 D1:B268 32 37 B3 D1 	ld (sdcomp_flip_5),a
  751 D1:B26C 32 86 B3 D1 	ld (sdcomp_flip_6),a
  752 D1:B270 32 CB B3 D1 	ld (sdcomp_flip_8),a
  753 D1:B274 -  -  -  -  	
  754 D1:B274 C9 -  -  -  	ret 
  755 D1:B275 -  -  -  -  	
  756 D1:B275 -  -  -  -  	
  757 D1:B275 -  -  -  -  sdcomp_reset_flip:
  758 D1:B275 3E DA -  -  	ld a,%11011010;jp c 
  759 D1:B277 32 AA AF D1 	ld (sdcomp_flip_1),a 
  760 D1:B27B -  -  -  -  
  761 D1:B27B 3E D4 -  -  	ld a,%11010100;call nc 
  762 D1:B27D 32 49 B1 D1 	ld (sdcomp_flip_7),a
  763 D1:B281 -  -  -  -  	
  764 D1:B281 3E 09 -  -  	ld a,%00001001;rrc 
  765 D1:B283 32 56 B1 D1 	ld (sdcomp_flip_bitstream),a
  766 D1:B287 3E 23 -  -  	ld a,%00100011;inc hl
  767 D1:B289 32 58 B1 D1 	ld (sdcomp_flip_bitstream_2),a
  768 D1:B28D -  -  -  -  	
  769 D1:B28D -  -  -  -  	
  770 D1:B28D 3E D0 -  -  	ld a,%11010000;ret nc 
  771 D1:B28F 32 E0 B2 D1 	ld (sdcomp_flip_4),a
  772 D1:B293 32 37 B3 D1 	ld (sdcomp_flip_5),a
  773 D1:B297 32 86 B3 D1 	ld (sdcomp_flip_6),a
  774 D1:B29B 32 CB B3 D1 	ld (sdcomp_flip_8),a
  775 D1:B29F -  -  -  -  	
  776 D1:B29F -  -  -  -  	
  777 D1:B29F C9 -  -  -  	ret 
  778 D1:B2A0 -  -  -  -  
  779 D1:B2A0 -  -  -  -  
  780 D1:B2A0 -  -  -  -  
  781 D1:B2A0 -  -  -  -  sdcomp_set_offset:
  782 D1:B2A0 3E D2 -  -  	ld a,%11010010;jp nc 
  783 D1:B2A2 32 E1 B0 D1 	ld (sdcomp_bit_offset),a
  784 D1:B2A6 C9 -  -  -  	ret
  785 D1:B2A7 -  -  -  -  
  786 D1:B2A7 -  -  -  -  
  787 D1:B2A7 -  -  -  -  
  788 D1:B2A7 -  -  -  -  
  789 D1:B2A7 -  -  -  -  ;0,1,2,3,4bpp modes
  790 D1:B2A7 -  -  -  -  ;destroys a 
  791 D1:B2A7 -  -  -  -  sdcomp_set_4bpp:
  792 D1:B2A7 3E D2 -  -  	ld a,%11010010;jp nc
  793 D1:B2A9 32 5E B1 D1 	ld (sdcomp_0bpc),a
  794 D1:B2AD 32 70 B1 D1 	ld (sdcomp_1bpc),a
  795 D1:B2B1 32 82 B1 D1 	ld (sdcomp_2bpc),a
  796 D1:B2B5 32 94 B1 D1 	ld (sdcomp_3bpc),a
  797 D1:B2B9 -  -  -  -  	
  798 D1:B2B9 -  -  -  -  	
  799 D1:B2B9 -  -  -  -  ;traverse data 
  800 D1:B2B9 3E 09 -  -  	ld a,%00001001;rrc c
  801 D1:B2BB 32 08 B2 D1 	ld (sdcomp_traverse_1bpp),a
  802 D1:B2BF 32 0A B2 D1 	ld (sdcomp_traverse_2bpp),a
  803 D1:B2C3 32 0C B2 D1 	ld (sdcomp_traverse_3bpp),a
  804 D1:B2C7 32 0E B2 D1 	ld (sdcomp_traverse_4bpp),a
  805 D1:B2CB -  -  -  -  	
  806 D1:B2CB 3E F0 -  -  	ld a,%11110000
  807 D1:B2CD 32 11 B2 D1 	ld (sdcomp_traverse_bit_check),a
  808 D1:B2D1 -  -  -  -  	
  809 D1:B2D1 -  -  -  -  ;setting indexed colors 
  810 D1:B2D1 3E DA -  -  	ld a,%11011010;jp c 
  811 D1:B2D3 32 73 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  812 D1:B2D7 32 7E AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  813 D1:B2DB 32 89 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  814 D1:B2DF -  -  -  -  	
  815 D1:B2DF 37 -  -  -  	scf 
  816 D1:B2E0 -  -  -  -  sdcomp_flip_4 .equ $
  817 D1:B2E0 D0 -  -  -  	ret nc 
  818 D1:B2E1 -  -  -  -  	;not flipped
  819 D1:B2E1 -  -  -  -  	
  820 D1:B2E1 3E DB -  -  	ld a,%11011011;set 3,e
  821 D1:B2E3 32 6E B1 D1 	ld (sdcomp_color_bit_0),a 
  822 D1:B2E7 3E D3 -  -  	ld a,%11010011;set 2,e
  823 D1:B2E9 32 80 B1 D1 	ld (sdcomp_color_bit_1),a 
  824 D1:B2ED 3E CB -  -  	ld a,%11001011;set 1,e
  825 D1:B2EF 32 92 B1 D1 	ld (sdcomp_color_bit_2),a 
  826 D1:B2F3 3E C3 -  -  	ld a,%11000011;set 0,e
  827 D1:B2F5 32 A4 B1 D1 	ld (sdcomp_color_bit_3),a 
  828 D1:B2F9 C9 -  -  -  	ret 
  829 D1:B2FA -  -  -  -  	
  830 D1:B2FA -  -  -  -  
  831 D1:B2FA -  -  -  -  sdcomp_set_3bpp:
  832 D1:B2FA 3E D2 -  -  	ld a,%11010010;jp nc
  833 D1:B2FC 32 5E B1 D1 	ld (sdcomp_0bpc),a
  834 D1:B300 32 70 B1 D1 	ld (sdcomp_1bpc),a
  835 D1:B304 32 82 B1 D1 	ld (sdcomp_2bpc),a
  836 D1:B308 -  -  -  -  	
  837 D1:B308 3E DA -  -  	ld a,%11011010;jp c 
  838 D1:B30A 32 94 B1 D1 	ld (sdcomp_3bpc),a
  839 D1:B30E -  -  -  -  	
  840 D1:B30E -  -  -  -  ;traverse data	
  841 D1:B30E 3E 09 -  -  	ld a,%00001001;rrc c
  842 D1:B310 32 08 B2 D1 	ld (sdcomp_traverse_1bpp),a
  843 D1:B314 32 0A B2 D1 	ld (sdcomp_traverse_2bpp),a
  844 D1:B318 32 0C B2 D1 	ld (sdcomp_traverse_3bpp),a
  845 D1:B31C 3E 0F -  -  	ld a,%00001111;rrc a
  846 D1:B31E 32 0E B2 D1 	ld (sdcomp_traverse_4bpp),a
  847 D1:B322 -  -  -  -  	
  848 D1:B322 3E E0 -  -  	ld a,%11100000
  849 D1:B324 32 11 B2 D1 	ld (sdcomp_traverse_bit_check),a
  850 D1:B328 -  -  -  -  	
  851 D1:B328 -  -  -  -  ;setting indexed colors 
  852 D1:B328 3E D2 -  -  	ld a,%11010010;jp nc 
  853 D1:B32A 32 73 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  854 D1:B32E 32 7E AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  855 D1:B332 32 89 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a
  856 D1:B336 -  -  -  -  	
  857 D1:B336 -  -  -  -  	
  858 D1:B336 -  -  -  -  	
  859 D1:B336 37 -  -  -  	scf 
  860 D1:B337 -  -  -  -  sdcomp_flip_5 .equ $
  861 D1:B337 D0 -  -  -  	ret nc 
  862 D1:B338 -  -  -  -  	;not flipped
  863 D1:B338 -  -  -  -  	
  864 D1:B338 3E D3 -  -  	ld a,%11010011;set 2,e
  865 D1:B33A 32 6E B1 D1 	ld (sdcomp_color_bit_0),a 
  866 D1:B33E 3E CB -  -  	ld a,%11001011;set 1,e
  867 D1:B340 32 80 B1 D1 	ld (sdcomp_color_bit_1),a 
  868 D1:B344 3E C3 -  -  	ld a,%11000011;set 0,e
  869 D1:B346 32 92 B1 D1 	ld (sdcomp_color_bit_2),a 
  870 D1:B34A -  -  -  -  
  871 D1:B34A C9 -  -  -  	ret 
  872 D1:B34B -  -  -  -  
  873 D1:B34B -  -  -  -  sdcomp_set_2bpp:
  874 D1:B34B 3E D2 -  -  	ld a,%11010010;jp nc
  875 D1:B34D 32 5E B1 D1 	ld (sdcomp_0bpc),a
  876 D1:B351 32 70 B1 D1 	ld (sdcomp_1bpc),a
  877 D1:B355 -  -  -  -  	
  878 D1:B355 3E DA -  -  	ld a,%11011010;jp c 
  879 D1:B357 32 82 B1 D1 	ld (sdcomp_2bpc),a
  880 D1:B35B -  -  -  -  	
  881 D1:B35B -  -  -  -  ;traverse data	
  882 D1:B35B 3E 09 -  -  	ld a,%00001001;rrc c
  883 D1:B35D 32 08 B2 D1 	ld (sdcomp_traverse_1bpp),a
  884 D1:B361 32 0A B2 D1 	ld (sdcomp_traverse_2bpp),a
  885 D1:B365 3E 0F -  -  	ld a,%00001111;rrc a
  886 D1:B367 32 0C B2 D1 	ld (sdcomp_traverse_3bpp),a
  887 D1:B36B 32 0E B2 D1 	ld (sdcomp_traverse_4bpp),a
  888 D1:B36F -  -  -  -  	
  889 D1:B36F 3E C0 -  -  	ld a,%11000000 
  890 D1:B371 32 11 B2 D1 	ld (sdcomp_traverse_bit_check),a
  891 D1:B375 -  -  -  -  ;setting indexed colors 
  892 D1:B375 3E D2 -  -  	ld a,%11010010;jp nc 
  893 D1:B377 32 73 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  894 D1:B37B 32 7E AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  895 D1:B37F 3E DA -  -  	ld a,%11011010;jp c 
  896 D1:B381 32 89 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  897 D1:B385 -  -  -  -  	
  898 D1:B385 37 -  -  -  	scf 
  899 D1:B386 -  -  -  -  sdcomp_flip_6 .equ $
  900 D1:B386 D0 -  -  -  	ret nc 
  901 D1:B387 -  -  -  -  	;not flipped
  902 D1:B387 -  -  -  -  	
  903 D1:B387 -  -  -  -  
  904 D1:B387 3E CB -  -  	ld a,%11001011;set 1,e
  905 D1:B389 32 6E B1 D1 	ld (sdcomp_color_bit_0),a 
  906 D1:B38D 3E C3 -  -  	ld a,%11000011;set 0,e
  907 D1:B38F 32 80 B1 D1 	ld (sdcomp_color_bit_1),a 
  908 D1:B393 -  -  -  -  
  909 D1:B393 C9 -  -  -  	ret 
  910 D1:B394 -  -  -  -  
  911 D1:B394 -  -  -  -  
  912 D1:B394 -  -  -  -  
  913 D1:B394 -  -  -  -  sdcomp_set_1bpp:
  914 D1:B394 3E D2 -  -  	ld a,%11010010;jp nc
  915 D1:B396 32 5E B1 D1 	ld (sdcomp_0bpc),a
  916 D1:B39A -  -  -  -  	
  917 D1:B39A 3E DA -  -  	ld a,%11011010;jp c 
  918 D1:B39C 32 70 B1 D1 	ld (sdcomp_1bpc),a
  919 D1:B3A0 -  -  -  -  	
  920 D1:B3A0 -  -  -  -  ;traverse data	
  921 D1:B3A0 3E 09 -  -  	ld a,%00001001;rrc c
  922 D1:B3A2 32 08 B2 D1 	ld (sdcomp_traverse_1bpp),a
  923 D1:B3A6 3E 0F -  -  	ld a,%00001111;rrc a
  924 D1:B3A8 32 0A B2 D1 	ld (sdcomp_traverse_2bpp),a
  925 D1:B3AC 32 0C B2 D1 	ld (sdcomp_traverse_3bpp),a
  926 D1:B3B0 32 0E B2 D1 	ld (sdcomp_traverse_4bpp),a
  927 D1:B3B4 3E 80 -  -  	ld a,%10000000
  928 D1:B3B6 32 11 B2 D1 	ld (sdcomp_traverse_bit_check),a
  929 D1:B3BA -  -  -  -  ;setting indexed colors 
  930 D1:B3BA 3E D2 -  -  	ld a,%11010010;jp nc 
  931 D1:B3BC 32 73 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  932 D1:B3C0 3E DA -  -  	ld a,%11011010;jp c 
  933 D1:B3C2 32 7E AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  934 D1:B3C6 32 89 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  935 D1:B3CA -  -  -  -  	
  936 D1:B3CA -  -  -  -  
  937 D1:B3CA 37 -  -  -  	scf 
  938 D1:B3CB -  -  -  -  sdcomp_flip_8 .equ $
  939 D1:B3CB D0 -  -  -  	ret nc 
  940 D1:B3CC -  -  -  -  	;not flipped
  941 D1:B3CC -  -  -  -  	
  942 D1:B3CC -  -  -  -  
  943 D1:B3CC 3E C3 -  -  	ld a,%11000011;set 0,e
  944 D1:B3CE 32 6E B1 D1 	ld (sdcomp_color_bit_0),a 
  945 D1:B3D2 -  -  -  -  
  946 D1:B3D2 C9 -  -  -  	ret 
  947 D1:B3D3 -  -  -  -  	
  948 D1:B3D3 -  -  -  -  
  949 D1:B3D3 -  -  -  -  sdcomp_set_0bpp:
  950 D1:B3D3 3E DA -  -  	ld a,%11011010;jp c 
  951 D1:B3D5 32 5E B1 D1 	ld (sdcomp_0bpc),a
  952 D1:B3D9 -  -  -  -  
  953 D1:B3D9 -  -  -  -  
  954 D1:B3D9 3E D2 -  -  	ld a,%11010010;jp nc 
  955 D1:B3DB 32 73 AF D1 	ld (sdcomp_get_indexed_color_1bpc),a
  956 D1:B3DF 3E DA -  -  	ld a,%11011010;jp c 
  957 D1:B3E1 32 7E AF D1 	ld (sdcomp_get_indexed_color_2bpc),a
  958 D1:B3E5 32 89 AF D1 	ld (sdcomp_get_indexed_color_3bpc),a	
  959 D1:B3E9 -  -  -  -  	
  960 D1:B3E9 C9 -  -  -  	ret 
  961 D1:B3EA -  -  -  -  	
  962 D1:B3EA -  -  -  -  sdcomp_set_noalpha:
  963 D1:B3EA 3E DA -  -  	ld a,%11011010;jp c 
  964 D1:B3EC 32 58 AF D1 	ld (sdcomp_no_alpha_1),a 
  965 D1:B3F0 32 02 B2 D1 	ld (sdcomp_no_alpha_3),a 
  966 D1:B3F4 3E D2 -  -  	ld a,%11010010;jp nc 
  967 D1:B3F6 32 FC B0 D1 	ld (sdcomp_no_alpha_2),a 
  968 D1:B3FA C9 -  -  -  	ret 
  969 D1:B3FB -  -  -  -  	
  970 D1:B3FB -  -  -  -  sdcomp_reset_noalpha:
  971 D1:B3FB 3E DA -  -  	ld a,%11011010;jp c 
  972 D1:B3FD 32 FC B0 D1 	ld (sdcomp_no_alpha_2),a 
  973 D1:B401 3E D2 -  -  	ld a,%11010010;jp nc 
  974 D1:B403 32 58 AF D1 	ld (sdcomp_no_alpha_1),a 
  975 D1:B407 3E CA -  -  	ld a,%11001010;jp z
  976 D1:B409 32 02 B2 D1 	ld (sdcomp_no_alpha_3),a 
  977 D1:B40D C9 -  -  -  	ret 
  978 D1:B40E -  -  -  -  
  979 D1:B40E -  -  -  -  
  980 D1:B40E -  -  -  -  sdcomp_set_fast_sprite:
  981 D1:B40E 3E DA -  -  	ld a,%11011010;jp c 
  982 D1:B410 32 F7 AF D1 	ld (sdcomp_fast_sprite_1),a 
  983 D1:B414 32 38 B0 D1 	ld (sdcomp_fast_sprite_2),a
  984 D1:B418 32 6E B0 D1 	ld (sdcomp_fast_sprite_3),a
  985 D1:B41C C9 -  -  -  	ret
  986 D1:B41D -  -  -  -  sdcomp_reset_fast_sprite:
  987 D1:B41D 3E D2 -  -  	ld a,%11010010;jp nc
  988 D1:B41F 32 F7 AF D1 	ld (sdcomp_fast_sprite_1),a 
  989 D1:B423 32 38 B0 D1 	ld (sdcomp_fast_sprite_2),a
  990 D1:B427 32 6E B0 D1 	ld (sdcomp_fast_sprite_3),a
  991 D1:B42B C9 -  -  -  	ret
  992 D1:B42C -  -  -  -  	
  993 D1:B42C -  -  -  -  	
  994 D1:B42C -  -  -  -  sdcomp_set_bg_sprite:
  995 D1:B42C 3E D2 -  -  	ld a,%11010010;jp nc
  996 D1:B42E 32 37 AF D1 	ld (sdcomp_bg_sprite_1),a 
  997 D1:B432 3E DA -  -  	ld a,%11011010;jp c 
  998 D1:B434 32 4B AF D1 	ld (sdcomp_bg_sprite_2),a
  999 D1:B438 32 CB AF D1 	ld (sdcomp_bg_sprite_3),a
 1000 D1:B43C 32 3D B1 D1 	ld (sdcomp_bg_sprite_4),a
 1001 D1:B440 C9 -  -  -  	ret
 1002 D1:B441 -  -  -  -  
 1003 D1:B441 -  -  -  -  	
 1004 D1:B441 -  -  -  -  sdcomp_reset_bg_sprite:
 1005 D1:B441 3E DA -  -  	ld a,%11011010;jp c 
 1006 D1:B443 32 37 AF D1 	ld (sdcomp_bg_sprite_1),a 
 1007 D1:B447 3E D2 -  -  	ld a,%11010010;jp nc
 1008 D1:B449 32 4B AF D1 	ld (sdcomp_bg_sprite_2),a
 1009 D1:B44D 32 CB AF D1 	ld (sdcomp_bg_sprite_3),a
 1010 D1:B451 32 3D B1 D1 	ld (sdcomp_bg_sprite_4),a
 1011 D1:B455 C9 -  -  -  	ret
 1012 D1:B456 -  -  -  -  
 1013 D1:B456 -  -  -  -  ;not in shadow 
 1014 D1:B456 -  -  -  -  sdcomp_bg_sprite_routine:
 1015 D1:B456 D9 -  -  -  	exx ;in 
 1016 D1:B457 D5 -  -  -  	push de 
 1017 D1:B458 D9 -  -  -  	exx ;out 
 1018 D1:B459 D1 -  -  -  	pop de ;transfer loops/line write location to be main write location
 1019 D1:B45A -  -  -  -  
 1020 D1:B45A -  -  -  -  ;not in shadow 
 1021 D1:B45A -  -  -  -  sdcomp_bg_sprite_loop:
 1022 D1:B45A D9 -  -  -  	exx;toshadow 
 1023 D1:B45B -  -  -  -  	
 1024 D1:B45B 08 -  -  -  	ex af,af' ;'
 1025 D1:B45C B7 -  -  -  	or a ;check if a' is zero, indicating virtual zeroes
 1026 D1:B45D F5 -  -  -  	push af 
 1027 D1:B45E 08 -  -  -  	ex af,af' ;'
 1028 D1:B45F F1 -  -  -  	pop af 
 1029 D1:B460 C2 6D B4 D1 	jp nz,sdcomp_bg_sprite_loop_skip
 1030 D1:B464 CD B7 B0 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1031 D1:B468 D9 -  -  -  	exx;out 
 1032 D1:B469 -  -  -  -  
 1033 D1:B469 C3 5A B4 D1 	jp sdcomp_bg_sprite_loop;keep looping until out of virtual 0s 
 1034 D1:B46D -  -  -  -  sdcomp_bg_sprite_loop_skip:;not in virt 0s 
 1035 D1:B46D CD B7 B0 D1 	call sdcomp_get_next_alpha_pair;read next alpha pair 
 1036 D1:B471 D9 -  -  -  	exx;out 
 1037 D1:B472 -  -  -  -  	
 1038 D1:B472 -  -  -  -  	;write mask and color data 
 1039 D1:B472 D5 -  -  -  	push de 
 1040 D1:B473 -  -  -  -  	
 1041 D1:B473 47 -  -  -  	ld b,a;save for later
 1042 D1:B474 CB 67 -  -  	bit 4,a ;check if first pixel has color 
 1043 D1:B476 3E 00 -  -  	ld a,0
 1044 D1:B478 16 FF -  -  	ld d,%11111111;assuming no colors 
 1045 D1:B47A CA 84 B4 D1 	jp z,sdcomp_bg_pixel_first_skip
 1046 D1:B47E -  -  -  -  	;has first color
 1047 D1:B47E 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
 1048 D1:B480 CD DA B1 D1 	call sdcomp_get_next_color_ending_nibble
 1049 D1:B484 -  -  -  -  sdcomp_bg_pixel_first_skip:
 1050 D1:B484 -  -  -  -  	;a is either $00 or $0color1
 1051 D1:B484 -  -  -  -  	
 1052 D1:B484 1E FF -  -  	ld e,%11111111;assuming no colors
 1053 D1:B486 -  -  -  -  	
 1054 D1:B486 CB 40 -  -  	bit 0,b;check second pixel alpha
 1055 D1:B488 47 -  -  -  	ld b,a;save for later 
 1056 D1:B489 3E 00 -  -  	ld a,0
 1057 D1:B48B CA 95 B4 D1 	jp z,sdcomp_bg_pixel_second_skip;
 1058 D1:B48F -  -  -  -  	;has second color 
 1059 D1:B48F CD D1 B1 D1 	call sdcomp_get_next_color_leading_nibble
 1060 D1:B493 -  -  -  -  	;a = color2 0 
 1061 D1:B493 1E 0F -  -  	ld e,%00001111;save first pixel of bg
 1062 D1:B495 -  -  -  -  	
 1063 D1:B495 -  -  -  -  sdcomp_bg_pixel_second_skip:
 1064 D1:B495 -  -  -  -  	;a is either 00 or c2 0 
 1065 D1:B495 -  -  -  -  	;b is either 00 or 0 c1 
 1066 D1:B495 B0 -  -  -  	or b 
 1067 D1:B496 47 -  -  -  	ld b,a;final color data
 1068 D1:B497 7A -  -  -  	ld a,d 
 1069 D1:B498 A3 -  -  -  	and e ;final mask data 
 1070 D1:B499 -  -  -  -  	
 1071 D1:B499 D1 -  -  -  	pop de;return to pointer 
 1072 D1:B49A 12 -  -  -  	ld (de),a;write mask data 
 1073 D1:B49B 13 -  -  -  	inc de 
 1074 D1:B49C 78 -  -  -  	ld a,b;color data 
 1075 D1:B49D 12 -  -  -  	ld (de),a;write color data 
 1076 D1:B49E 13 -  -  -  	inc de 
 1077 D1:B49F -  -  -  -  	
 1078 D1:B49F -  -  -  -  	;check if end reached 
 1079 D1:B49F 3A DA AF D1 	ld a,(sdcomp_end_reached_flag)
 1080 D1:B4A3 FE DA -  -  	cp %11011010;jp c
 1081 D1:B4A5 C2 5A B4 D1 	jp nz,sdcomp_bg_sprite_loop 
 1082 D1:B4A9 C9 -  -  -  	ret 
 1083 D1:B4AA -  -  -  -  
 1084 D1:B4AA -  -  -  -  ;FIND GAP LENGTH
 1085 D1:B4AA -  -  -  -  ;read bitsteam in pairs
 1086 D1:B4AA -  -  -  -  ;gap length = number of full pairs found 
 1087 D1:B4AA -  -  -  -  
 1088 D1:B4AA -  -  -  -  ;STARTING PIXEL(S);have read either 11,01,10 in bitstream
 1089 D1:B4AA -  -  -  -  ;write either both, start,or end pixel 
 1090 D1:B4AA -  -  -  -  
 1091 D1:B4AA -  -  -  -  ;LDIR
 1092 D1:B4AA -  -  -  -  ;read number of pairs of 11 in bitstream 
 1093 D1:B4AA -  -  -  -  ;if 0 move to ending pixels
 1094 D1:B4AA -  -  -  -  ;if ends in 00, last full 11 pair will be ending pixels 
 1095 D1:B4AA -  -  -  -  ;write ldir length 
 1096 D1:B4AA -  -  -  -  ;if 0 move to next step
 1097 D1:B4AA -  -  -  -  ;else write ldir data 
 1098 D1:B4AA -  -  -  -  
 1099 D1:B4AA -  -  -  -  
 1100 D1:B4AA -  -  -  -  ;ENDING PIXEL(S)
 1101 D1:B4AA -  -  -  -  ;00 if there is nothing after leading pixels 
 1102 D1:B4AA -  -  -  -  ;11 10 01 otherwise
 1103 D1:B4AA -  -  -  -  
 1104 D1:B4AA -  -  -  -  ;BACK TO GAP LENGTH
 1105 D1:B4AA -  -  -  -  
 1106 D1:B4AA -  -  -  -  
 1107 D1:B4AA -  -  -  -  
 1108 D1:B4AA -  -  -  -  
 1109 D1:B4AA -  -  -  -  
 1110 D1:B4AA -  -  -  -  
 1111 D1:B4AA -  -  -  -  
 1112 D1:B4AA -  -  -  -  
 1113 D1:B4AA -  -  -  -  
 1114 D1:B4AA -  -  -  -  
 1115 D1:B4AA -  -  -  -  
 1116 D1:B4AA -  -  -  -  
 1117 D1:B4AA -  -  -  -  
 1118 D1:B4AA -  -  -  -  
 1119 D1:B4AA -  -  -  -  
 1120 D1:B4AA -  -  -  -  
 1121 D1:B4AA -  -  -  -  
 1122 D1:B4AA -  -  -  -  
 1123 D1:B4AA -  -  -  -  
 1124 D1:B4AA -  -  -  -  
 1125 D1:B4AA -  -  -  -  
 1126 D1:B4AA -  -  -  -  	
 1127 D1:B4AA -  -  -  -  	
 1128 D1:B4AA -  -  -  -  	
 1129 D1:B4AA -  -  -  -  	
Listing for file "ascent.asm"
