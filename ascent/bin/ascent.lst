    1 00:0000 -  -  -  -  
    2 00:0000 -  -  -  -  #include "includes\ti84pce.inc"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\includes\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "ascent.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  
    9 D1:A881 -  -  -  -  
   10 D1:A881 -  -  -  -  ;0E30000h + 0200h
   11 D1:A881 -  -  -  -  
   12 D1:A881 CD 28 08 02 	call _homeup
   13 D1:A885 CD 10 08 02 	call _ClrScrnFull
   14 D1:A889 -  -  -  -  
   15 D1:A889 CD 48 08 02 	call _RunIndicOff		; turn off run indicator
   16 D1:A88D F3 -  -  -  	di			
   17 D1:A88E -  -  -  -  	
   18 D1:A88E -  -  -  -  	
   19 D1:A88E CD 28 C1 D1 	call setup_palette_1
   20 D1:A892 -  -  -  -  
   21 D1:A892 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255
   22 D1:A896 3E 25 -  -  	ld	a,lcdBpp4
   23 D1:A898 32 18 00 E3 	ld (mpLcdCtrl),a	
   24 D1:A89C -  -  -  -  
   25 D1:A89C -  -  -  -  
   26 D1:A89C -  -  -  -  
   27 D1:A89C -  -  -  -  
   28 D1:A89C -  -  -  -  	;call sdcomp_set_fast
   29 D1:A89C -  -  -  -  	;call sdcomp_set_flip
   30 D1:A89C -  -  -  -  	;call sdcomp_reset_offset
   31 D1:A89C -  -  -  -  	;ld hl, Tree_5 
   32 D1:A89C -  -  -  -  	;ld de, Tree_5_Fast_F_0
   33 D1:A89C -  -  -  -  	;call sdcomp_set_2bpc
   34 D1:A89C -  -  -  -  	;call sprite_decompress
   35 D1:A89C -  -  -  -  	
   36 D1:A89C -  -  -  -  	;call sdcomp_set_fast
   37 D1:A89C -  -  -  -  	;call sdcomp_reset_flip
   38 D1:A89C -  -  -  -  	;call sdcomp_reset_offset
   39 D1:A89C -  -  -  -  	;ld hl, Moss_0 
   40 D1:A89C -  -  -  -  	;ld de, Moss_0_Fast_0
   41 D1:A89C -  -  -  -  	;call sprite_decompress
   42 D1:A89C -  -  -  -  	
   43 D1:A89C -  -  -  -  	;call prgmpause
   44 D1:A89C -  -  -  -  	;call prgmpause
   45 D1:A89C -  -  -  -  
   46 D1:A89C CD 49 B8 D1 	call setup_decompress_queue
   47 D1:A8A0 -  -  -  -  	
   48 D1:A8A0 -  -  -  -  	
   49 D1:A8A0 -  -  -  -  	;call draw_fg
   50 D1:A8A0 -  -  -  -  	
   51 D1:A8A0 3E 00 -  -  	ld a,0
   52 D1:A8A2 CD 2F B9 D1 	call cfdc_cam_move_up ;need to skip here for frame 0
   53 D1:A8A6 -  -  -  -  	
   54 D1:A8A6 -  -  -  -  	;call prgmpause
   55 D1:A8A6 -  -  -  -  
   56 D1:A8A6 CD 84 B8 D1 	call continue_decompressions
   57 D1:A8AA -  -  -  -  	
   58 D1:A8AA -  -  -  -  	
   59 D1:A8AA -  -  -  -  ;	call decompress_calls
   60 D1:A8AA -  -  -  -  	
   61 D1:A8AA -  -  -  -  
   62 D1:A8AA -  -  -  -  	
   63 D1:A8AA -  -  -  -  	;gen purp timers
   64 D1:A8AA -  -  -  -  		; 76543210	
   65 D1:A8AA 3E 03 -  -  	ld a,%00000011;enable, 32768hz
   66 D1:A8AC 32 30 00 F2 	ld ($F20030),a
   67 D1:A8B0 -  -  -  -  	;	  fedcba98
   68 D1:A8B0 3E 02 -  -  	ld a,%00000010;count up
   69 D1:A8B2 32 31 00 F2 	ld ($F20031),a
   70 D1:A8B6 -  -  -  -  	
   71 D1:A8B6 21 00 2C D5 	ld hl,vRam + (160*240*2)
   72 D1:A8BA 22 BF AB D1 	ld (draw_buffer),hl
   73 D1:A8BE 21 00 C2 D5 	ld hl,vRam + (160*240*3)
   74 D1:A8C2 22 10 00 E3 	ld (mpLcdBase),hl
   75 D1:A8C6 -  -  -  -  	
   76 D1:A8C6 -  -  -  -  
   77 D1:A8C6 -  -  -  -  	
   78 D1:A8C6 21 28 00 00 	ld hl,40
   79 D1:A8CA 22 B9 AB D1 	ld (cam_pos),hl
   80 D1:A8CE -  -  -  -  
   81 D1:A8CE CD 0E AD D1 	call setup_bg ;after initial decompressions and cam setup
   82 D1:A8D2 -  -  -  -  
   83 D1:A8D2 -  -  -  -  	
   84 D1:A8D2 -  -  -  -  main_loop:
   85 D1:A8D2 -  -  -  -  
   86 D1:A8D2 -  -  -  -  	
   87 D1:A8D2 -  -  -  -  
   88 D1:A8D2 -  -  -  -  	;clear timer
   89 D1:A8D2 3E 00 -  -  	ld a,0
   90 D1:A8D4 32 00 00 F2 	ld ($F20000),a;32768hz
   91 D1:A8D8 32 01 00 F2 	ld ($F20001),a;128hz
   92 D1:A8DC 32 02 00 F2 	ld ($F20002),a;0.5hz
   93 D1:A8E0 32 03 00 F2 	ld ($F20003),a
   94 D1:A8E4 -  -  -  -  	
   95 D1:A8E4 -  -  -  -  	;Instructions here 
   96 D1:A8E4 -  -  -  -  	
   97 D1:A8E4 -  -  -  -  	
   98 D1:A8E4 -  -  -  -  	;call input_cam_up
   99 D1:A8E4 CD 5D B9 D1 	call get_inputs
  100 D1:A8E8 -  -  -  -  	
  101 D1:A8E8 CD 56 AC D1 	call move_bg
  102 D1:A8EC -  -  -  -  
  103 D1:A8EC -  -  -  -  
  104 D1:A8EC -  -  -  -  	; TESTING move bg time
  105 D1:A8EC 21 00 00 00 	ld hl,0
  106 D1:A8F0 3A 00 00 F2 	ld a,($F20000);32768hz
  107 D1:A8F4 6F -  -  -  	ld l,a
  108 D1:A8F5 3A 01 00 F2 	ld a,($F20001);128hz 
  109 D1:A8F9 67 -  -  -  	ld h,a
  110 D1:A8FA CB 3C -  -  	srl h ;div by 8
  111 D1:A8FC CB 1D -  -  	rr l 
  112 D1:A8FE CB 3C -  -  	srl h
  113 D1:A900 CB 1D -  -  	rr l 
  114 D1:A902 CB 3C -  -  	srl h
  115 D1:A904 CB 1D -  -  	rr l 
  116 D1:A906 7D -  -  -  	ld a,l
  117 D1:A907 3C -  -  -  	inc a ;Cant have time be 1, BC must be >1 for _MemSet
  118 D1:A908 3C -  -  -  	inc a
  119 D1:A909 3C -  -  -  	inc a
  120 D1:A90A 32 C5 AB D1 	ld (move_bg_time),a
  121 D1:A90E -  -  -  -  
  122 D1:A90E -  -  -  -  	
  123 D1:A90E -  -  -  -  	
  124 D1:A90E CD 22 AC D1 	call draw_bg
  125 D1:A912 -  -  -  -  
  126 D1:A912 -  -  -  -  	
  127 D1:A912 -  -  -  -  	
  128 D1:A912 -  -  -  -  	;TEsting
  129 D1:A912 21 00 00 00 	ld hl,0
  130 D1:A916 3A 00 00 F2 	ld a,($F20000);32768hz
  131 D1:A91A 6F -  -  -  	ld l,a
  132 D1:A91B 3A 01 00 F2 	ld a,($F20001);128hz 
  133 D1:A91F 67 -  -  -  	ld h,a
  134 D1:A920 CB 3C -  -  	srl h ;div by 8
  135 D1:A922 CB 1D -  -  	rr l 
  136 D1:A924 CB 3C -  -  	srl h
  137 D1:A926 CB 1D -  -  	rr l 
  138 D1:A928 CB 3C -  -  	srl h
  139 D1:A92A CB 1D -  -  	rr l 
  140 D1:A92C 7D -  -  -  	ld a,l
  141 D1:A92D 32 C6 AB D1 	ld (draw_bg_time),a
  142 D1:A931 -  -  -  -  	
  143 D1:A931 -  -  -  -  	;TEST CLEAR BUFFER
  144 D1:A931 -  -  -  -  	;ld hl,BG_buffer
  145 D1:A931 -  -  -  -  	;ld de,(draw_buffer)
  146 D1:A931 -  -  -  -  	;ld bc, 160*240
  147 D1:A931 -  -  -  -  	;ldir
  148 D1:A931 -  -  -  -  	
  149 D1:A931 CD 0C B5 D1 	call draw_mg
  150 D1:A935 -  -  -  -  	
  151 D1:A935 -  -  -  -  	;TEsting
  152 D1:A935 21 00 00 00 	ld hl,0
  153 D1:A939 3A 00 00 F2 	ld a,($F20000);32768hz
  154 D1:A93D 6F -  -  -  	ld l,a
  155 D1:A93E 3A 01 00 F2 	ld a,($F20001);128hz 
  156 D1:A942 67 -  -  -  	ld h,a
  157 D1:A943 CB 3C -  -  	srl h ;div by 8
  158 D1:A945 CB 1D -  -  	rr l 
  159 D1:A947 CB 3C -  -  	srl h
  160 D1:A949 CB 1D -  -  	rr l 
  161 D1:A94B CB 3C -  -  	srl h
  162 D1:A94D CB 1D -  -  	rr l 
  163 D1:A94F 7D -  -  -  	ld a,l
  164 D1:A950 32 C7 AB D1 	ld (draw_mg_time),a
  165 D1:A954 -  -  -  -  	
  166 D1:A954 CD 61 B5 D1 	call draw_fg
  167 D1:A958 -  -  -  -  	
  168 D1:A958 -  -  -  -  	
  169 D1:A958 -  -  -  -  	;TEsting
  170 D1:A958 21 00 00 00 	ld hl,0
  171 D1:A95C 3A 00 00 F2 	ld a,($F20000);32768hz
  172 D1:A960 6F -  -  -  	ld l,a
  173 D1:A961 3A 01 00 F2 	ld a,($F20001);128hz 
  174 D1:A965 67 -  -  -  	ld h,a
  175 D1:A966 CB 3C -  -  	srl h ;div by 8
  176 D1:A968 CB 1D -  -  	rr l 
  177 D1:A96A CB 3C -  -  	srl h
  178 D1:A96C CB 1D -  -  	rr l 
  179 D1:A96E CB 3C -  -  	srl h
  180 D1:A970 CB 1D -  -  	rr l 
  181 D1:A972 7D -  -  -  	ld a,l
  182 D1:A973 32 C8 AB D1 	ld (draw_fg_time),a
  183 D1:A977 -  -  -  -  	
  184 D1:A977 21 00 00 00 	ld hl,0
  185 D1:A97B -  -  -  -  	
  186 D1:A97B -  -  -  -  	; for debug longest frame draw time
  187 D1:A97B 3A 00 00 F2 	ld a,($F20000)
  188 D1:A97F 6F -  -  -  	ld l,a
  189 D1:A980 3A 01 00 F2 	ld a,($F20001);128hz 
  190 D1:A984 67 -  -  -  	ld h,a
  191 D1:A985 E5 -  -  -  	push hl
  192 D1:A986 ED 4B CA AB 
              D1 -  -  -  	ld bc,(longestFrame)
  193 D1:A98B ED 42 -  -  	sbc hl,bc 
  194 D1:A98D DA 9F A9 D1 	jp c,longest_frame_skip
  195 D1:A991 -  -  -  -  	
  196 D1:A991 E1 -  -  -  	pop hl 
  197 D1:A992 E5 -  -  -  	push hl 
  198 D1:A993 22 CA AB D1 	ld (longestFrame),hl 
  199 D1:A997 2A B9 AB D1 	ld hl,(cam_pos)
  200 D1:A99B 22 CD AB D1 	ld (longestFramePos),hl
  201 D1:A99F -  -  -  -  longest_frame_skip:
  202 D1:A99F E1 -  -  -  	pop hl 
  203 D1:A9A0 -  -  -  -  	
  204 D1:A9A0 -  -  -  -  		
  205 D1:A9A0 2A D3 AB D1 	ld hl,(frameCount)
  206 D1:A9A4 23 -  -  -  	inc hl
  207 D1:A9A5 22 D3 AB D1 	ld (frameCount),hl
  208 D1:A9A9 -  -  -  -  	
  209 D1:A9A9 -  -  -  -  
  210 D1:A9A9 -  -  -  -  	
  211 D1:A9A9 -  -  -  -  	;check if lcd has drawn first frame
  212 D1:A9A9 -  -  -  -  
  213 D1:A9A9 CD 14 B9 D1 	call check_for_decompress_calls
  214 D1:A9AD -  -  -  -  	;Sprite decompression will occur here
  215 D1:A9AD CD 84 B8 D1 	call continue_decompressions
  216 D1:A9B1 -  -  -  -  	
  217 D1:A9B1 -  -  -  -  	;TEsting
  218 D1:A9B1 21 00 00 00 	ld hl,0
  219 D1:A9B5 3A 00 00 F2 	ld a,($F20000);32768hz
  220 D1:A9B9 6F -  -  -  	ld l,a
  221 D1:A9BA 3A 01 00 F2 	ld a,($F20001);128hz 
  222 D1:A9BE 67 -  -  -  	ld h,a
  223 D1:A9BF CB 3C -  -  	srl h ;div by 4
  224 D1:A9C1 CB 1D -  -  	rr l 
  225 D1:A9C3 CB 3C -  -  	srl h
  226 D1:A9C5 CB 1D -  -  	rr l 
  227 D1:A9C7 CB 3C -  -  	srl h
  228 D1:A9C9 CB 1D -  -  	rr l 
  229 D1:A9CB 7D -  -  -  	ld a,l
  230 D1:A9CC 32 C9 AB D1 	ld (decompress_time),a
  231 D1:A9D0 -  -  -  -  
  232 D1:A9D0 -  -  -  -  
  233 D1:A9D0 -  -  -  -  	
  234 D1:A9D0 -  -  -  -  
  235 D1:A9D0 -  -  -  -  	;Draw time bar at top of screen 
  236 D1:A9D0 2A BF AB D1 	ld hl, (draw_buffer)
  237 D1:A9D4 01 00 00 00 	ld bc,0 
  238 D1:A9D8 3A C9 AB D1 	ld a,(decompress_time)
  239 D1:A9DC 4F -  -  -  	ld c,a 
  240 D1:A9DD 3E 55 -  -  	ld a, $55
  241 D1:A9DF CD E0 10 02 	call _MemSet
  242 D1:A9E3 -  -  -  -  	
  243 D1:A9E3 2A BF AB D1 	ld hl, (draw_buffer)
  244 D1:A9E7 01 00 00 00 	ld bc,0 
  245 D1:A9EB 3A C8 AB D1 	ld a,(draw_fg_time)
  246 D1:A9EF 4F -  -  -  	ld c,a 
  247 D1:A9F0 3E 44 -  -  	ld a, $44
  248 D1:A9F2 CD E0 10 02 	call _MemSet
  249 D1:A9F6 -  -  -  -  	
  250 D1:A9F6 2A BF AB D1 	ld hl, (draw_buffer)
  251 D1:A9FA 01 00 00 00 	ld bc,0 
  252 D1:A9FE 3A C7 AB D1 	ld a,(draw_mg_time)
  253 D1:AA02 4F -  -  -  	ld c,a 
  254 D1:AA03 3E 33 -  -  	ld a, $33
  255 D1:AA05 CD E0 10 02 	call _MemSet
  256 D1:AA09 -  -  -  -  
  257 D1:AA09 2A BF AB D1 	ld hl, (draw_buffer)
  258 D1:AA0D 01 00 00 00 	ld bc,0 
  259 D1:AA11 3A C6 AB D1 	ld a,(draw_bg_time)
  260 D1:AA15 4F -  -  -  	ld c,a 
  261 D1:AA16 3E 22 -  -  	ld a, $22
  262 D1:AA18 CD E0 10 02 	call _MemSet
  263 D1:AA1C -  -  -  -  	
  264 D1:AA1C -  -  -  -  	
  265 D1:AA1C -  -  -  -  	
  266 D1:AA1C 2A BF AB D1 	ld hl, (draw_buffer)
  267 D1:AA20 01 00 00 00 	ld bc,0 
  268 D1:AA24 3A C5 AB D1 	ld a,(move_bg_time)
  269 D1:AA28 4F -  -  -  	ld c,a 
  270 D1:AA29 3E 11 -  -  	ld a, $11
  271 D1:AA2B CD E0 10 02 	call _MemSet
  272 D1:AA2F -  -  -  -  
  273 D1:AA2F -  -  -  -  	
  274 D1:AA2F 2A BF AB D1 	ld hl, (draw_buffer)
  275 D1:AA33 01 88 00 00 	ld bc, 136  ; =1000/4 /2 for 2pix/bit 
  276 D1:AA37 09 -  -  -  	add hl,bc 
  277 D1:AA38 3E 55 -  -  	ld a,$55
  278 D1:AA3A 77 -  -  -  	ld (hl),a 
  279 D1:AA3B -  -  -  -  	
  280 D1:AA3B -  -  -  -  	
  281 D1:AA3B -  -  -  -  	;Again for thick line
  282 D1:AA3B -  -  -  -  	
  283 D1:AA3B 2A BF AB D1 	ld hl, (draw_buffer)
  284 D1:AA3F 01 A0 00 00 	ld bc,160
  285 D1:AA43 09 -  -  -  	add hl,bc 
  286 D1:AA44 3A C9 AB D1 	ld a,(decompress_time)
  287 D1:AA48 4F -  -  -  	ld c,a 
  288 D1:AA49 3E 55 -  -  	ld a, $55
  289 D1:AA4B CD E0 10 02 	call _MemSet
  290 D1:AA4F -  -  -  -  	
  291 D1:AA4F 2A BF AB D1 	ld hl, (draw_buffer)
  292 D1:AA53 01 A0 00 00 	ld bc,160
  293 D1:AA57 09 -  -  -  	add hl,bc 
  294 D1:AA58 3A C8 AB D1 	ld a,(draw_fg_time)
  295 D1:AA5C 4F -  -  -  	ld c,a 
  296 D1:AA5D 3E 44 -  -  	ld a, $44
  297 D1:AA5F CD E0 10 02 	call _MemSet
  298 D1:AA63 -  -  -  -  	
  299 D1:AA63 2A BF AB D1 	ld hl, (draw_buffer)
  300 D1:AA67 01 A0 00 00 	ld bc,160
  301 D1:AA6B 09 -  -  -  	add hl,bc
  302 D1:AA6C 3A C7 AB D1 	ld a,(draw_mg_time)
  303 D1:AA70 4F -  -  -  	ld c,a 
  304 D1:AA71 3E 33 -  -  	ld a, $33
  305 D1:AA73 CD E0 10 02 	call _MemSet
  306 D1:AA77 -  -  -  -  
  307 D1:AA77 2A BF AB D1 	ld hl, (draw_buffer)
  308 D1:AA7B 01 A0 00 00 	ld bc,160
  309 D1:AA7F 09 -  -  -  	add hl,bc
  310 D1:AA80 3A C6 AB D1 	ld a,(draw_bg_time)
  311 D1:AA84 4F -  -  -  	ld c,a 
  312 D1:AA85 3E 22 -  -  	ld a, $22
  313 D1:AA87 CD E0 10 02 	call _MemSet
  314 D1:AA8B -  -  -  -  	
  315 D1:AA8B 2A BF AB D1 	ld hl, (draw_buffer)
  316 D1:AA8F 01 A0 00 00 	ld bc,160
  317 D1:AA93 09 -  -  -  	add hl,bc
  318 D1:AA94 3A C5 AB D1 	ld a,(move_bg_time)
  319 D1:AA98 4F -  -  -  	ld c,a 
  320 D1:AA99 3E 11 -  -  	ld a, $11
  321 D1:AA9B CD E0 10 02 	call _MemSet
  322 D1:AA9F -  -  -  -  
  323 D1:AA9F 2A BF AB D1 	ld hl, (draw_buffer)
  324 D1:AAA3 01 28 01 00 	ld bc,296
  325 D1:AAA7 09 -  -  -  	add hl,bc 
  326 D1:AAA8 3E 55 -  -  	ld a,$55
  327 D1:AAAA 77 -  -  -  	ld (hl),a 
  328 D1:AAAB -  -  -  -  	
  329 D1:AAAB -  -  -  -  	
  330 D1:AAAB -  -  -  -  
  331 D1:AAAB -  -  -  -  
  332 D1:AAAB -  -  -  -  	
  333 D1:AAAB -  -  -  -  
  334 D1:AAAB -  -  -  -  	;swap draw buffers
  335 D1:AAAB 2A 10 00 E3 	ld hl,(mpLcdBase)
  336 D1:AAAF ED 5B BF AB 
              D1 -  -  -  	ld de,(draw_buffer)
  337 D1:AAB4 ED 53 10 00 
              E3 -  -  -  	ld (mpLcdBase),de
  338 D1:AAB9 22 BF AB D1 	ld (draw_buffer),hl
  339 D1:AABD -  -  -  -  
  340 D1:AABD -  -  -  -  
  341 D1:AABD -  -  -  -  	;wait until finished drawing second frame
  342 D1:AABD -  -  -  -  	;Need to check clock here, there wont always be decompression to wait for
  343 D1:AABD -  -  -  -  main_clock_check_loop:
  344 D1:AABD 3A 01 00 F2 	ld a,($F20001);128hz clock
  345 D1:AAC1 FE 03 -  -  	cp %00000011 ;check if reached 3 
  346 D1:AAC3 DA BD AA D1 	jp c,main_clock_check_loop ;msb <= 2, can continue  
  347 D1:AAC7 3A 00 00 F2 	ld a,($F20000);32768hz clock
  348 D1:AACB FE E8 -  -  	cp %11101000;check if reached value 
  349 D1:AACD DA BD AA D1 	jp c,main_clock_check_loop ;msb = 3 and lsb < value, can continue
  350 D1:AAD1 -  -  -  -  	
  351 D1:AAD1 -  -  -  -  
  352 D1:AAD1 -  -  -  -  
  353 D1:AAD1 -  -  -  -  clear_int:      
  354 D1:AAD1 21 28 00 E3     ld hl, mpLcdIcr
  355 D1:AAD5 CB D6 -  -      set 2, (hl)            ; clear interrupt
  356 D1:AAD7 21 20 00 E3     ld hl, mpLcdRis
  357 D1:AADB -  -  -  -  wait_int:
  358 D1:AADB CB 56 -  -      bit 2, (hl)
  359 D1:AADD 28 FC -  -      jr z, wait_int  
  360 D1:AADF -  -  -  -  
  361 D1:AADF -  -  -  -  
  362 D1:AADF 21 00 00 00 	ld hl,0
  363 D1:AAE3 -  -  -  -  	
  364 D1:AAE3 3A 02 00 F2 	ld a,($F20002)
  365 D1:AAE7 67 -  -  -  	ld h,a
  366 D1:AAE8 3A 01 00 F2 	ld a,($F20001)
  367 D1:AAEC 6F -  -  -  	ld l,a
  368 D1:AAED ED 4B D0 AB 
              D1 -  -  -  	ld bc,(totalTime)
  369 D1:AAF2 09 -  -  -  	add hl,bc 
  370 D1:AAF3 22 D0 AB D1 	ld (totalTime),hl 
  371 D1:AAF7 -  -  -  -  	
  372 D1:AAF7 -  -  -  -  	
  373 D1:AAF7 -  -  -  -  	
  374 D1:AAF7 -  -  -  -  	
  375 D1:AAF7 -  -  -  -  
  376 D1:AAF7 -  -  -  -  	
  377 D1:AAF7 -  -  -  -  
  378 D1:AAF7 C2 D2 A8 D1 	jp nz,main_loop
  379 D1:AAFB -  -  -  -  		
  380 D1:AAFB -  -  -  -  	;print debug times 
  381 D1:AAFB 21 00 00 D4 	ld hl,vRam
  382 D1:AAFF 22 10 00 E3 	ld (mpLcdBase),hl
  383 D1:AB03 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  384 D1:AB07 3E 2D -  -  	ld	a,lcdBpp16
  385 D1:AB09 32 18 00 E3 	ld (mpLcdCtrl),a
  386 D1:AB0D -  -  -  -  	
  387 D1:AB0D 3E 00 -  -  	ld a,0
  388 D1:AB0F 32 95 05 D0 	ld (curRow),a
  389 D1:AB13 32 96 05 D0 	ld (curCol),a
  390 D1:AB17 2A CA AB D1 	ld hl,(longestFrame)
  391 D1:AB1B CD E0 1E 02 	call _DispHL
  392 D1:AB1F 3E 01 -  -  	ld a,1
  393 D1:AB21 32 95 05 D0 	ld (curRow),a
  394 D1:AB25 3E 00 -  -  	ld a,0
  395 D1:AB27 32 96 05 D0 	ld (curCol),a
  396 D1:AB2B 2A CD AB D1 	ld hl,(longestFramePos)
  397 D1:AB2F CD E0 1E 02 	call _DispHL
  398 D1:AB33 3E 02 -  -  	ld a,2
  399 D1:AB35 32 95 05 D0 	ld (curRow),a
  400 D1:AB39 3E 00 -  -  	ld a,0
  401 D1:AB3B 32 96 05 D0 	ld (curCol),a
  402 D1:AB3F 2A D0 AB D1 	ld hl,(totalTime)
  403 D1:AB43 CD E0 1E 02 	call _DispHL
  404 D1:AB47 3E 03 -  -  	ld a,3
  405 D1:AB49 32 95 05 D0 	ld (curRow),a
  406 D1:AB4D 3E 00 -  -  	ld a,0
  407 D1:AB4F 32 96 05 D0 	ld (curCol),a
  408 D1:AB53 2A D3 AB D1 	ld hl,(frameCount)
  409 D1:AB57 CD E0 1E 02 	call _DispHL
  410 D1:AB5B -  -  -  -  	
  411 D1:AB5B CD AC AB D1 	call prgmpause
  412 D1:AB5F CD AC AB D1 	call prgmpause
  413 D1:AB63 -  -  -  -  	
  414 D1:AB63 -  -  -  -  	
  415 D1:AB63 -  -  -  -  exit_prgm:
  416 D1:AB63 21 00 00 D4 	ld hl,vRam
  417 D1:AB67 22 10 00 E3 	ld (mpLcdBase),hl
  418 D1:AB6B CD 10 08 02 	call _ClrScrnFull
  419 D1:AB6F 3E 2D -  -  	ld	a,lcdBpp16
  420 D1:AB71 32 18 00 E3 	ld	(mpLcdCtrl),a
  421 D1:AB75 CD 3C 1A 02 	call _DrawStatusBar
  422 D1:AB79 -  -  -  -  	
  423 D1:AB79 FB -  -  -  	ei				; reset screen back to normal
  424 D1:AB7A C9 -  -  -  	ret			; return to os
  425 D1:AB7B -  -  -  -  
  426 D1:AB7B -  -  -  -  
  427 D1:AB7B -  -  -  -  printHL:;=================REMOVE
  428 D1:AB7B E5 -  -  -  	push hl
  429 D1:AB7C 21 00 00 D4 	ld hl,vRam
  430 D1:AB80 22 10 00 E3 	ld (mpLcdBase),hl
  431 D1:AB84 CD E0 1D 02 	call _os_ClearVRAMLines	; set all of vram to index 255 (white)
  432 D1:AB88 3E 2D -  -  	ld	a,lcdBpp16
  433 D1:AB8A 32 18 00 E3 	ld (mpLcdCtrl),a
  434 D1:AB8E E1 -  -  -  	pop hl
  435 D1:AB8F CD E0 1E 02 	call _DispHL
  436 D1:AB93 FB -  -  -  	ei
  437 D1:AB94 CD 8C 0D 02 	call _GetKey
  438 D1:AB98 F3 -  -  -  	di
  439 D1:AB99 C3 63 AB D1 	jp exit_prgm
  440 D1:AB9D -  -  -  -  
  441 D1:AB9D -  -  -  -  
  442 D1:AB9D -  -  -  -  write_a_to_ram:
  443 D1:AB9D F5 -  -  -  	push af 
  444 D1:AB9E E5 -  -  -  	push hl 
  445 D1:AB9F -  -  -  -  write_a_to_ram_addr .equ $ + 1 
  446 D1:AB9F 21 00 60 D4 	ld hl, $d46000
  447 D1:ABA3 77 -  -  -  	ld (hl),a 
  448 D1:ABA4 23 -  -  -  	inc hl 
  449 D1:ABA5 22 A0 AB D1 	ld (write_a_to_ram_addr),hl 
  450 D1:ABA9 E1 -  -  -  	pop hl 
  451 D1:ABAA F1 -  -  -  	pop af 
  452 D1:ABAB C9 -  -  -  	ret 
  453 D1:ABAC -  -  -  -  
  454 D1:ABAC -  -  -  -  prgmpause: ;for testing, interrupts code until key pressed. will destroy af register
  455 D1:ABAC F5 -  -  -  	push af
  456 D1:ABAD D5 -  -  -  	push de 
  457 D1:ABAE E5 -  -  -  	push hl 
  458 D1:ABAF FB -  -  -  	ei
  459 D1:ABB0 CD 8C 0D 02 	call _GetKey
  460 D1:ABB4 F3 -  -  -  	di
  461 D1:ABB5 E1 -  -  -  	pop hl 
  462 D1:ABB6 D1 -  -  -  	pop de 
  463 D1:ABB7 F1 -  -  -  	pop af
  464 D1:ABB8 C9 -  -  -  	ret
  465 D1:ABB9 -  -  -  -  
  466 D1:ABB9 -  -  -  -  cam_pos:;y position of lowest visible line in fg layer
  467 D1:ABB9 00 00 00 -  	.dl 0
  468 D1:ABBC -  -  -  -  bg_cam_pos: ;y position of lowest visible line in bg layer (= cam pos / 4)
  469 D1:ABBC 00 00 00 -  	.dl 0
  470 D1:ABBF -  -  -  -  
  471 D1:ABBF -  -  -  -  
  472 D1:ABBF -  -  -  -  draw_buffer:;where new frame is drawn before lcd pointer is swapped 
  473 D1:ABBF 00 2C D5 -  	.dl $d52c00
  474 D1:ABC2 -  -  -  -  	
  475 D1:ABC2 -  -  -  -  BG_draw_buffer: ;Address of the uppermost line of the background buffer. This is where new lines of bg are drawn to 
  476 D1:ABC2 00 00 00 -  	.dl 0
  477 D1:ABC5 -  -  -  -  BG_buffer .equ vram + (160*240) ;Start of BG buffer 
  478 D1:ABC5 -  -  -  -  
  479 D1:ABC5 -  -  -  -  
  480 D1:ABC5 -  -  -  -  ;d40000 = Decompressed sprite data
  481 D1:ABC5 -  -  -  -  ;d49600 = BG buffer
  482 D1:ABC5 -  -  -  -  ;d52c00 = Frame draw buffer 1 
  483 D1:ABC5 -  -  -  -  ;d5c200 = frame draw buffer 2
  484 D1:ABC5 -  -  -  -  
  485 D1:ABC5 -  -  -  -  ;pixelShadow .equ $D031F6 
  486 D1:ABC5 -  -  -  -  
  487 D1:ABC5 -  -  -  -  move_bg_time:
  488 D1:ABC5 00 -  -  -  	.db 0
  489 D1:ABC6 -  -  -  -  draw_bg_time:
  490 D1:ABC6 00 -  -  -  	.db 0
  491 D1:ABC7 -  -  -  -  draw_mg_time:
  492 D1:ABC7 00 -  -  -  	.db 0
  493 D1:ABC8 -  -  -  -  draw_fg_time:
  494 D1:ABC8 00 -  -  -  	.db 0
  495 D1:ABC9 -  -  -  -  decompress_time:
  496 D1:ABC9 00 -  -  -  	.db 0
  497 D1:ABCA -  -  -  -  
  498 D1:ABCA -  -  -  -  
  499 D1:ABCA -  -  -  -  longestFrame:
  500 D1:ABCA 00 00 00 -  	.dl 0
  501 D1:ABCD -  -  -  -  longestFramePos:
  502 D1:ABCD 00 00 00 -  	.dl 0
  503 D1:ABD0 -  -  -  -  totalTime:
  504 D1:ABD0 00 00 00 -  	.dl 0
  505 D1:ABD3 -  -  -  -  frameCount:
  506 D1:ABD3 00 00 00 -  	.dl 0
  507 D1:ABD6 -  -  -  -  hasLagged:
  508 D1:ABD6 00 00 00 -  	.dl 0
  509 D1:ABD9 -  -  -  -  
  510 D1:ABD9 -  -  -  -  sd_test_a:
  511 D1:ABD9 00 00 00 -  	.dl 0 
  512 D1:ABDC -  -  -  -  
  513 D1:ABDC -  -  -  -  
  514 D1:ABDC -  -  -  -  
  515 D1:ABDC -  -  -  -  #include "timeTesting.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\timeTesting.txt"
    1 D1:ABDC -  -  -  -  
    2 D1:ABDC -  -  -  -  
    3 D1:ABDC -  -  -  -  
    4 D1:ABDC -  -  -  -  time_test_start:
    5 D1:ABDC -  -  -  -  
    6 D1:ABDC -  -  -  -  		; 76543210	
    7 D1:ABDC 3E 03 -  -  	ld a,%00000011;enable, 32768hz
    8 D1:ABDE 32 30 00 F2 	ld ($F20030),a
    9 D1:ABE2 -  -  -  -  	;	  fedcba98
   10 D1:ABE2 3E 02 -  -  	ld a,%00000010;count up
   11 D1:ABE4 32 31 00 F2 	ld ($F20031),a
   12 D1:ABE8 3E 00 -  -  	ld a,0
   13 D1:ABEA 32 00 00 F2 	ld ($F20000),a
   14 D1:ABEE 32 01 00 F2 	ld ($F20001),a
   15 D1:ABF2 32 02 00 F2 	ld ($F20002),a
   16 D1:ABF6 32 03 00 F2 	ld ($F20003),a
   17 D1:ABFA -  -  -  -  	
   18 D1:ABFA 21 2C 01 00 	ld hl,300
   19 D1:ABFE -  -  -  -  	
   20 D1:ABFE -  -  -  -  time_testing_loop:
   21 D1:ABFE E5 -  -  -  	push hl
   22 D1:ABFF 01 E8 03 00 	ld bc,1000
   23 D1:AC03 -  -  -  -  time_testing_loop_2:
   24 D1:AC03 C5 -  -  -  	push bc
   25 D1:AC04 -  -  -  -  	;instruction here
   26 D1:AC04 -  -  -  -  	
   27 D1:AC04 -  -  -  -  	
   28 D1:AC04 -  -  -  -  	;Instruction end
   29 D1:AC04 C1 -  -  -  	pop bc
   30 D1:AC05 0B -  -  -  	dec bc
   31 D1:AC06 79 -  -  -  	ld a,c
   32 D1:AC07 B0 -  -  -  	or b
   33 D1:AC08 C2 03 AC D1 	jp nz,time_testing_loop_2
   34 D1:AC0C E1 -  -  -  	pop hl
   35 D1:AC0D 2B -  -  -  	dec hl
   36 D1:AC0E 7D -  -  -  	ld a,l
   37 D1:AC0F B4 -  -  -  	or h
   38 D1:AC10 C2 FE AB D1 	jp nz,time_testing_loop
   39 D1:AC14 -  -  -  -  	
   40 D1:AC14 3A 01 00 F2 	ld a,($F20001);128hz
   41 D1:AC18 6F -  -  -  	ld l,a
   42 D1:AC19 3A 02 00 F2 	ld a,($F20002);0.5hz
   43 D1:AC1D 67 -  -  -  	ld h,a
   44 D1:AC1E C3 7B AB D1 	jp printHL;div by 128 for time
   45 D1:AC22 -  -  -  -  	
   46 D1:AC22 -  -  -  -  
   47 D1:AC22 -  -  -  -  ;60fps = .0166sec/f	
   48 D1:AC22 -  -  -  -  
   49 D1:AC22 -  -  -  -  ;1000 ldir in vram of 160*240 bytes
   50 D1:AC22 -  -  -  -  ;6.8sec, .0068 sec/instruction   0.4 of a frame
   51 D1:AC22 -  -  -  -  
   52 D1:AC22 -  -  -  -  
   53 D1:AC22 -  -  -  -  ;10,000 draw 1 bg line very complex 
   54 D1:AC22 -  -  -  -  ;9 sec  .07 of frame/instruction
   55 D1:AC22 -  -  -  -  
   56 D1:AC22 -  -  -  -  ;300k draw slow sprite 12*5 px complex
   57 D1:AC22 -  -  -  -  ;16.4RT, 14.8CLK
   58 D1:AC22 -  -  -  -  ;.00328 frames/sprite, 4.19 frames / screen
   59 D1:AC22 -  -  -  -  ;.24 screens/frame
   60 D1:AC22 -  -  -  -  
   61 D1:AC22 -  -  -  -  
   62 D1:AC22 -  -  -  -  ;300k slow sprite best case 12*5px
   63 D1:AC22 -  -  -  -  ;8.75RT 7.6clk
   64 D1:AC22 -  -  -  -  ;.00175 frames/spr 2.24 frames/screen
   65 D1:AC22 -  -  -  -  ;.446 screens/frame
   66 D1:AC22 -  -  -  -  
   67 D1:AC22 -  -  -  -  
   68 D1:AC22 -  -  -  -  
   69 D1:AC22 -  -  -  -  ;1,000,000 fast fg sprite 20*4 px
   70 D1:AC22 -  -  -  -  ;22.15RT,20.35clk
   71 D1:AC22 -  -  -  -  ;.00133 frames/spr 1.275 frames/screen
   72 D1:AC22 -  -  -  -  ;.78 screens/frame
   73 D1:AC22 -  -  -  -  
   74 D1:AC22 -  -  -  -  
   75 D1:AC22 -  -  -  -  ;for 60% of screen with fg sprites in 1 frame
   76 D1:AC22 -  -  -  -  ;.6 = .78*fast + .44*(1-fast)
   77 D1:AC22 -  -  -  -  ;.47 = FAST
   78 D1:AC22 -  -  -  -  
   79 D1:AC22 -  -  -  -  ;50% fast sprites, 50% slow sprites
   80 D1:AC22 -  -  -  -  
   81 D1:AC22 -  -  -  -  
   82 D1:AC22 -  -  -  -  
   83 D1:AC22 -  -  -  -  
   84 D1:AC22 -  -  -  -  
   85 D1:AC22 -  -  -  -  
   86 D1:AC22 -  -  -  -  
   87 D1:AC22 -  -  -  -  
   88 D1:AC22 -  -  -  -  
Listing for file "ascent.asm"
  516 D1:AC22 -  -  -  -  #include "drawBGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawBGSprite.txt"
    1 D1:AC22 -  -  -  -  
    2 D1:AC22 -  -  -  -  
    3 D1:AC22 -  -  -  -  BGMaxSpriteHeight .equ 120
    4 D1:AC22 -  -  -  -  
    5 D1:AC22 -  -  -  -  
    6 D1:AC22 -  -  -  -  draw_bg:; function for drawing background buffer to the draw buffer, clearing the frame for fg sprites to be drawn over 
    7 D1:AC22 CD 56 AC D1 	call move_bg
    8 D1:AC26 21 00 2C D5 	ld hl,$d52c00;BG_buffer_end
    9 D1:AC2A ED 4B C2 AB 
              D1 -  -  -  	ld bc,(BG_draw_buffer)
   10 D1:AC2F 37 -  -  -  	scf 
   11 D1:AC30 3F -  -  -  	ccf 
   12 D1:AC31 ED 42 -  -  	sbc hl,bc ;get number of bytes from the loop point in the buffer to end of the buffer 
   13 D1:AC33 E5 -  -  -  	push hl 
   14 D1:AC34 C1 -  -  -  	pop bc	;put into bc for ldir 
   15 D1:AC35 2A C2 AB D1 	ld hl,(BG_draw_buffer)
   16 D1:AC39 ED 5B BF AB 
              D1 -  -  -  	ld de,(draw_buffer)
   17 D1:AC3E ED B0 -  -  	ldir
   18 D1:AC40 2A C2 AB D1 	ld hl,(BG_draw_buffer) ;loop point in buffer
   19 D1:AC44 01 00 96 D4 	ld bc,BG_buffer ;start of buffer
   20 D1:AC48 37 -  -  -  	scf 
   21 D1:AC49 3F -  -  -  	ccf 
   22 D1:AC4A ED 42 -  -  	sbc hl,bc ;number of bytes from start to loop point 
   23 D1:AC4C C8 -  -  -  	ret z ;if bg buffer line is at top of buffer, no second ldir
   24 D1:AC4D E5 -  -  -  	push hl 
   25 D1:AC4E C1 -  -  -  	pop bc
   26 D1:AC4F 21 00 96 D4 	ld hl,BG_buffer 
   27 D1:AC53 ED B0 -  -  	ldir 
   28 D1:AC55 C9 -  -  -  	ret 
   29 D1:AC56 -  -  -  -  	
   30 D1:AC56 -  -  -  -  	
   31 D1:AC56 -  -  -  -  ;function for moving the backgrond buffer. checks if camera has moved since the buffer was last updated.
   32 D1:AC56 -  -  -  -  ;if so will draw new lines of the bg buffer to move it up or down until it is in the correct position
   33 D1:AC56 -  -  -  -  move_bg:
   34 D1:AC56 2A B9 AB D1 	ld hl,(cam_pos);load cam pos 
   35 D1:AC5A CB 3C -  -  	srl h
   36 D1:AC5C CB 1D -  -  	rr l
   37 D1:AC5E CB 3C -  -  	srl h
   38 D1:AC60 CB 1D -  -  	rr l ;div by 4 to get location of BG layer
   39 D1:AC62 -  -  -  -  	;hl holds bg cam pos, lowest visible line of bg layer 
   40 D1:AC62 ED 4B BC AB 
              D1 -  -  -  	ld bc,(bg_cam_pos);previous BG cam location 
   41 D1:AC67 37 -  -  -  	scf
   42 D1:AC68 3F -  -  -  	ccf
   43 D1:AC69 ED 42 -  -  	sbc hl,bc ;compare to the updated location
   44 D1:AC6B C8 -  -  -  	ret z ;if 0, the bg buffer does not need to be moved 
   45 D1:AC6C DA 78 AC D1 	jp c,move_bg_down ;if previous cam pos id above current pos, screen has moved down, go to move bg down 1 line
   46 D1:AC70 CD C7 AC D1 	call inc_bg ;otherwise, screen has moved up, need to move bg up 1 line
   47 D1:AC74 C3 56 AC D1 	jp move_bg ;repeat until bg is in correct pos
   48 D1:AC78 -  -  -  -  move_bg_down:
   49 D1:AC78 CD 80 AC D1 	call dec_bg
   50 D1:AC7C C3 56 AC D1 	jp move_bg ;repeat until bg is in correct pos
   51 D1:AC80 -  -  -  -  
   52 D1:AC80 -  -  -  -  
   53 D1:AC80 -  -  -  -  dec_bg:;move bg cam down 1px 
   54 D1:AC80 -  -  -  -  
   55 D1:AC80 -  -  -  -  	
   56 D1:AC80 -  -  -  -  	;Testibng
   57 D1:AC80 -  -  -  -  	;ld a,$AD
   58 D1:AC80 -  -  -  -  	;call write_a_to_ram
   59 D1:AC80 -  -  -  -  	
   60 D1:AC80 -  -  -  -  
   61 D1:AC80 -  -  -  -  	;write on draw buffer line 
   62 D1:AC80 2A C2 AB D1 	ld hl,(BG_draw_buffer) ;topmost line of bg buffer will be overwritten with new bottom line 
   63 D1:AC84 22 0D AE D1 	ld (dbgl_vram_line_start),hl 
   64 D1:AC88 -  -  -  -  	
   65 D1:AC88 2A BC AB D1 	ld hl,(bg_cam_pos)
   66 D1:AC8C 2B -  -  -  	dec hl ;dec bg cam pos by 1 
   67 D1:AC8D 22 BC AB D1 	ld (bg_cam_pos),hl 
   68 D1:AC91 -  -  -  -  	
   69 D1:AC91 01 00 00 00 	ld bc,0 ;clear bc reg
   70 D1:AC95 4C -  -  -  	ld c,h;bottom y value msb 
   71 D1:AC96 7D -  -  -  	ld a,l ;bottom y value lsb 
   72 D1:AC97 21 9E B9 D1 	ld hl,BG_Data_frame_table
   73 D1:AC9B 0C -  -  -  	inc c 
   74 D1:AC9C 09 -  -  -  	add hl,bc 
   75 D1:AC9D 09 -  -  -  	add hl,bc 
   76 D1:AC9E 09 -  -  -  	add hl,bc ;add 3*frame number to get to correct frame pointer
   77 D1:AC9F ED 27 -  -  	ld hl,(hl) ;hl now points to bg frame data 
   78 D1:ACA1 CD 65 AD D1 	call draw_bg_line
   79 D1:ACA5 -  -  -  -  	
   80 D1:ACA5 -  -  -  -  
   81 D1:ACA5 -  -  -  -  	;move buffer pos
   82 D1:ACA5 2A C2 AB D1 	ld hl,(BG_draw_buffer)
   83 D1:ACA9 01 60 2B D5 	ld bc,$d52b60;BG_buffer_end, start of last line of vram buffer 
   84 D1:ACAD 37 -  -  -  	scf 
   85 D1:ACAE 3F -  -  -  	ccf 
   86 D1:ACAF ED 42 -  -  	sbc hl,bc ;compare to current line 
   87 D1:ACB1 2A C2 AB D1 	ld hl,(BG_draw_buffer)
   88 D1:ACB5 C2 BD AC D1 	jp nz,dec_bg_bottom_skip
   89 D1:ACB9 21 60 95 D4 	ld hl,$d49560;1 row above top of bg buffer 
   90 D1:ACBD -  -  -  -  dec_bg_bottom_skip:
   91 D1:ACBD 01 A0 00 00 	ld bc,160 
   92 D1:ACC1 09 -  -  -  	add hl,bc
   93 D1:ACC2 22 C2 AB D1 	ld (BG_draw_buffer),hl 
   94 D1:ACC6 C9 -  -  -  	ret
   95 D1:ACC7 -  -  -  -  
   96 D1:ACC7 -  -  -  -  
   97 D1:ACC7 -  -  -  -  inc_bg:;move cam up 
   98 D1:ACC7 -  -  -  -  
   99 D1:ACC7 -  -  -  -  	
  100 D1:ACC7 -  -  -  -  	;Testibng
  101 D1:ACC7 -  -  -  -  	;ld a,$AC
  102 D1:ACC7 -  -  -  -  	;call write_a_to_ram
  103 D1:ACC7 -  -  -  -  	
  104 D1:ACC7 -  -  -  -  
  105 D1:ACC7 2A C2 AB D1 	ld hl,(BG_draw_buffer)
  106 D1:ACCB 01 00 96 D4 	ld bc,BG_buffer
  107 D1:ACCF 37 -  -  -  	scf 
  108 D1:ACD0 3F -  -  -  	ccf 
  109 D1:ACD1 ED 42 -  -  	sbc hl,bc ;compare current drawing line to top of bg buffer 
  110 D1:ACD3 2A C2 AB D1 	ld hl,(BG_draw_buffer)
  111 D1:ACD7 C2 DF AC D1 	jp nz,inc_bg_top_skip ;if they are not equal, continue
  112 D1:ACDB 21 00 2C D5 	ld hl,$d52c00;otherwise need to wrap back to bottom of buffer, set hl to 1 below bottom of bg buffer 
  113 D1:ACDF -  -  -  -  inc_bg_top_skip:
  114 D1:ACDF 01 A0 00 00 	ld bc,160 
  115 D1:ACE3 37 -  -  -  	scf
  116 D1:ACE4 3F -  -  -  	ccf 
  117 D1:ACE5 ED 42 -  -  	sbc hl,bc ;move up line, hl now points to line drawing location in vram 
  118 D1:ACE7 22 C2 AB D1 	ld (BG_draw_buffer),hl 
  119 D1:ACEB 22 0D AE D1 	ld (dbgl_vram_line_start),hl 
  120 D1:ACEF 2A BC AB D1 	ld hl,(bg_cam_pos)
  121 D1:ACF3 23 -  -  -  	inc hl 
  122 D1:ACF4 22 BC AB D1 	ld (bg_cam_pos),hl ;incremnet cam pos 
  123 D1:ACF8 01 EF 00 00 	ld bc,239
  124 D1:ACFC 09 -  -  -  	add hl,bc ;gets uppermost visible line y value in bg layer
  125 D1:ACFD 4C -  -  -  	ld c,h;cam pos msb 
  126 D1:ACFE 7D -  -  -  	ld a,l ;a holds line number in target frame 
  127 D1:ACFF 21 9E B9 D1 	ld hl,BG_Data_frame_table
  128 D1:AD03 0C -  -  -  	inc c ;inc to get to upper frame 
  129 D1:AD04 09 -  -  -  	add hl,bc 
  130 D1:AD05 09 -  -  -  	add hl,bc 
  131 D1:AD06 09 -  -  -  	add hl,bc 
  132 D1:AD07 ED 27 -  -  	ld hl,(hl)
  133 D1:AD09 CD 65 AD D1 	call draw_bg_line
  134 D1:AD0D C9 -  -  -  	ret
  135 D1:AD0E -  -  -  -  	
  136 D1:AD0E -  -  -  -  
  137 D1:AD0E -  -  -  -  
  138 D1:AD0E -  -  -  -  
  139 D1:AD0E -  -  -  -  
  140 D1:AD0E -  -  -  -  setup_bg: ;Draws entire BG buffer when loading game 
  141 D1:AD0E 2A B9 AB D1 	ld hl,(cam_pos)
  142 D1:AD12 CB 3C -  -  	srl h
  143 D1:AD14 CB 1D -  -  	rr l
  144 D1:AD16 CB 3C -  -  	srl h
  145 D1:AD18 CB 1D -  -  	rr l ;div by 4
  146 D1:AD1A -  -  -  -  	;hl holds bg cam pos 
  147 D1:AD1A 22 BC AB D1 	ld (bg_cam_pos),hl
  148 D1:AD1E -  -  -  -  	
  149 D1:AD1E 01 EF 00 00 	ld bc,239
  150 D1:AD22 09 -  -  -  	add hl,bc;hl holds y position of uppermost visible line in bg layer 
  151 D1:AD23 -  -  -  -  	
  152 D1:AD23 23 -  -  -  	inc hl;to be dec in loop
  153 D1:AD24 E5 -  -  -  	push hl ;save uppermost line y val
  154 D1:AD25 21 00 96 D4 	ld hl,BG_buffer ;start of bg drawing buffer 
  155 D1:AD29 22 C2 AB D1 	ld (BG_draw_buffer),hl ;set current bg line drawing location 
  156 D1:AD2D E5 -  -  -  	push hl 
  157 D1:AD2E -  -  -  -  	
  158 D1:AD2E 3E F0 -  -  	ld a,240 ;num loops
  159 D1:AD30 32 58 AD D1 	ld (setup_bg_loop_count),a
  160 D1:AD34 -  -  -  -  setup_bg_loop:
  161 D1:AD34 -  -  -  -  
  162 D1:AD34 E1 -  -  -  	pop hl;vram draw pos, next line of bg drawn here 
  163 D1:AD35 22 0D AE D1 	ld (dbgl_vram_line_start),hl ;set drawing pos 
  164 D1:AD39 01 A0 00 00 	ld bc,160
  165 D1:AD3D 09 -  -  -  	add hl,bc 
  166 D1:AD3E EB -  -  -  	ex de,hl ;put next vram pos in de 
  167 D1:AD3F E1 -  -  -  	pop hl;uppermost line y val
  168 D1:AD40 2B -  -  -  	dec hl ;dec line y value (move to next lowest line)
  169 D1:AD41 E5 -  -  -  	push hl;push uppermost line y val
  170 D1:AD42 D5 -  -  -  	push de ;push vram pos 
  171 D1:AD43 01 00 00 00 	ld bc,0
  172 D1:AD47 4C -  -  -  	ld c,h;cam pos msb 
  173 D1:AD48 7D -  -  -  	ld a,l ;a holds line number in current frame 
  174 D1:AD49 21 9E B9 D1 	ld hl,BG_Data_frame_table
  175 D1:AD4D 0C -  -  -  	inc c ;add 1 to get to upper frame
  176 D1:AD4E 09 -  -  -  	add hl,bc 
  177 D1:AD4F 09 -  -  -  	add hl,bc 
  178 D1:AD50 09 -  -  -  	add hl,bc 
  179 D1:AD51 ED 27 -  -  	ld hl,(hl) ;hl now points to upper frame data 
  180 D1:AD53 CD 65 AD D1 	call draw_bg_line ;hl pts to upper frame data, a = line num in target frame
  181 D1:AD57 -  -  -  -  	
  182 D1:AD57 -  -  -  -  setup_bg_loop_count .equ $ + 1
  183 D1:AD57 3E 00 -  -  	ld a,0
  184 D1:AD59 3D -  -  -  	dec a ;dec loop counter
  185 D1:AD5A 32 58 AD D1 	ld (setup_bg_loop_count),a
  186 D1:AD5E C2 34 AD D1 	jp nz,setup_bg_loop 
  187 D1:AD62 E1 -  -  -  	pop hl ;pop vram pos 
  188 D1:AD63 E1 -  -  -  	pop hl ;pop current line number 
  189 D1:AD64 C9 -  -  -  	ret 
  190 D1:AD65 -  -  -  -  
  191 D1:AD65 -  -  -  -  
  192 D1:AD65 -  -  -  -  
  193 D1:AD65 -  -  -  -  
  194 D1:AD65 -  -  -  -  
  195 D1:AD65 -  -  -  -  
  196 D1:AD65 -  -  -  -  ;hl = upper data frame, a = line number in target frame
  197 D1:AD65 -  -  -  -  ;for drawing BG, only 1 line is drawn at a time.
  198 D1:AD65 -  -  -  -  ;therefore only check sprites in the above frame that may extend downwards, 
  199 D1:AD65 -  -  -  -  ;and the sprites in the target frame which contains the y position of the line being drawn
  200 D1:AD65 -  -  -  -  ;set dbgl_vram_line_start before calling 
  201 D1:AD65 -  -  -  -  draw_bg_line:
  202 D1:AD65 E5 -  -  -  	push hl ;upper frame sprite table pointer 
  203 D1:AD66 F5 -  -  -  	push af ;save line number 
  204 D1:AD67 3E FF -  -  	ld a,$FF ;Set all of line to FF to clear it with color 16
  205 D1:AD69 01 A0 00 00 	ld bc,160
  206 D1:AD6D 2A 0D AE D1 	ld hl,(dbgl_vram_line_start) ;Drawing address of line 
  207 D1:AD71 CD E0 10 02 	call _MemSet ;Clear all of line 
  208 D1:AD75 F1 -  -  -  	pop af ;return line number 
  209 D1:AD76 E1 -  -  -  	pop hl ;return upper frame ptr 
  210 D1:AD77 -  -  -  -  
  211 D1:AD77 -  -  -  -  
  212 D1:AD77 -  -  -  -  
  213 D1:AD77 32 EF AD D1 	ld (dbgl_line_num),a ;write line num to required positions 
  214 D1:AD7B -  -  -  -  	
  215 D1:AD7B ED 44 -  -  	neg
  216 D1:AD7D CA 8B AD D1 	jp z, dbgl_skip_upper_loop ;need to check 0 case, negative 0 = 0
  217 D1:AD81 32 BC AD D1 	ld (dbgl_lines_to_top_of_target_frame),a ;a holds lines from top of frame (1 indexed)
  218 D1:AD85 FE 78 -  -  	cp BGMaxSpriteHeight
  219 D1:AD87 DA 9B AD D1 	jp c, dbgl_do_upper_loop
  220 D1:AD8B -  -  -  -  dbgl_skip_upper_loop:
  221 D1:AD8B -  -  -  -  	;Upper sprites are too far to be seen in this line, skip upper loop 
  222 D1:AD8B 23 -  -  -  	inc hl 
  223 D1:AD8C 23 -  -  -  	inc hl
  224 D1:AD8D 23 -  -  -  	inc hl ;hl points to number of elements 
  225 D1:AD8E 01 00 00 00 	ld bc,0
  226 D1:AD92 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  227 D1:AD93 09 -  -  -  	add hl,bc 
  228 D1:AD94 09 -  -  -  	add hl,bc 
  229 D1:AD95 09 -  -  -  	add hl,bc 
  230 D1:AD96 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  231 D1:AD97 C3 D4 AD D1 	jp dbgl_lower_start ;skip upper loop
  232 D1:AD9B -  -  -  -  	
  233 D1:AD9B -  -  -  -  dbgl_do_upper_loop:
  234 D1:AD9B ED 17 -  -  	ld de,(hl) ;DE points to sprite table 
  235 D1:AD9D ED 53 1E AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr
  236 D1:ADA2 23 -  -  -  	inc hl
  237 D1:ADA3 23 -  -  -  	inc hl
  238 D1:ADA4 23 -  -  -  	inc hl ;to frame data start 
  239 D1:ADA5 08 -  -  -  	ex af,af' ;'
  240 D1:ADA6 7E -  -  -  	ld a,(hl);number of elements = num loops
  241 D1:ADA7 3C -  -  -  	inc a ;add 1 bc termination is checked at start of loop 
  242 D1:ADA8 08 -  -  -  	ex af,af' ;'
  243 D1:ADA9 -  -  -  -  	
  244 D1:ADA9 11 00 00 00 	ld de,0
  245 D1:ADAD 01 00 00 00 	ld bc,0
  246 D1:ADB1 -  -  -  -  	;upper frame, checking for sprites that carry into lower frame
  247 D1:ADB1 -  -  -  -  dbgl_upper_loop:
  248 D1:ADB1 08 -  -  -  	ex af,af' ;'
  249 D1:ADB2 3D -  -  -  	dec a 
  250 D1:ADB3 CA D4 AD D1 	jp z,dbgl_lower_start
  251 D1:ADB7 08 -  -  -  	ex af,af' ;'
  252 D1:ADB8 23 -  -  -  	inc hl ;to Y
  253 D1:ADB9 7E -  -  -  	ld a,(hl); y value of sprite in upper frame 
  254 D1:ADBA 23 -  -  -  	inc hl;to height
  255 D1:ADBB -  -  -  -  dbgl_lines_to_top_of_target_frame .equ $ + 1
  256 D1:ADBB C6 00 -  -  	add a,0 ;a holds line number in sprite to draw (0 indexed)
  257 D1:ADBD DA CE AD D1 	jp c,dbgl_upper_skip_sprite ; if line to draw >255, skip (happens if sprite has large y val)
  258 D1:ADC1 BE -  -  -  	cp (hl) ;compare to sprite height 
  259 D1:ADC2 D2 CE AD D1 	jp nc, dbgl_upper_skip_sprite; Skip drawing, sprite does not extend to target line 
  260 D1:ADC6 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  261 D1:ADC6 CD 07 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  262 D1:ADCA -  -  -  -  	;hl pts to sprite index
  263 D1:ADCA C3 B1 AD D1 	jp dbgl_upper_loop
  264 D1:ADCE -  -  -  -  	
  265 D1:ADCE -  -  -  -  dbgl_upper_skip_sprite:
  266 D1:ADCE 23 -  -  -  	inc hl ;to x 
  267 D1:ADCF 23 -  -  -  	inc hl ;to index 
  268 D1:ADD0 C3 B1 AD D1 	jp dbgl_upper_loop
  269 D1:ADD4 -  -  -  -  	
  270 D1:ADD4 -  -  -  -  	
  271 D1:ADD4 -  -  -  -  dbgl_lower_start:
  272 D1:ADD4 -  -  -  -  ;LOWER FRAME START 
  273 D1:ADD4 -  -  -  -  	;After breaking upper loop, hl is pointing to the sprite index of the last element in the upper frame 
  274 D1:ADD4 23 -  -  -  	inc hl ;hl now points to sprite table of the lower frame 
  275 D1:ADD5 ED 17 -  -  	ld de,(hl)
  276 D1:ADD7 ED 53 1E AE 
              D1 -  -  -  	ld (dbgl_sprite_pointers),de ;write sprite table ptr 
  277 D1:ADDC 11 00 00 00 	ld de,0;clear d upper 
  278 D1:ADE0 23 -  -  -  	inc hl
  279 D1:ADE1 23 -  -  -  	inc hl
  280 D1:ADE2 23 -  -  -  	inc hl;to num elements
  281 D1:ADE3 -  -  -  -  	
  282 D1:ADE3 08 -  -  -  	ex af,af' ;'
  283 D1:ADE4 7E -  -  -  	ld a,(hl);number of elements
  284 D1:ADE5 3C -  -  -  	inc a 
  285 D1:ADE6 08 -  -  -  	ex af,af' ;'
  286 D1:ADE7 -  -  -  -  	
  287 D1:ADE7 -  -  -  -  	
  288 D1:ADE7 -  -  -  -  dbgl_lower_loop:
  289 D1:ADE7 08 -  -  -  	ex af,af' ;'
  290 D1:ADE8 3D -  -  -  	dec a 
  291 D1:ADE9 C8 -  -  -  	ret z
  292 D1:ADEA 08 -  -  -  	ex af,af' ;'
  293 D1:ADEB 23 -  -  -  	inc hl ;to y
  294 D1:ADEC 7E -  -  -  	ld a,(hl) ;y pos of sprite in lower frame 
  295 D1:ADED 23 -  -  -  	inc hl;to height
  296 D1:ADEE -  -  -  -  dbgl_line_num .equ $ + 1
  297 D1:ADEE D6 00 -  -  	sub 0;subtract line num 
  298 D1:ADF0 DA 01 AE D1 	jp c, dbgl_lower_skip_sprite ;if carry, line number was above sprite y pos 
  299 D1:ADF4 -  -  -  -  	;if a is 0, we draw first line of sprite, if a is 1, draw second... a holds line num of sprite to draw (0 indexed) 
  300 D1:ADF4 BE -  -  -  	cp (hl) ;compare to sprite height -1
  301 D1:ADF5 D2 01 AE D1 	jp nc, dbgl_lower_skip_sprite; Skip drawing, sprite does not extend to target line 
  302 D1:ADF9 -  -  -  -  	
  303 D1:ADF9 -  -  -  -  	;Sprite is to be drawn, a holds line number 
  304 D1:ADF9 CD 07 AE D1 	call dbgl_setup_and_draw ;draw sprite line 
  305 D1:ADFD -  -  -  -  	;hl pts to sprite index
  306 D1:ADFD C3 E7 AD D1 	jp dbgl_lower_loop
  307 D1:AE01 -  -  -  -  	
  308 D1:AE01 -  -  -  -  dbgl_lower_skip_sprite:
  309 D1:AE01 23 -  -  -  	inc hl ;to x 
  310 D1:AE02 23 -  -  -  	inc hl ;to index 
  311 D1:AE03 C3 E7 AD D1 	jp dbgl_lower_loop
  312 D1:AE07 -  -  -  -  
  313 D1:AE07 -  -  -  -  ;a holds 0 indexed line num of sprite, (hl) = height ,bc,de = 0
  314 D1:AE07 -  -  -  -  dbgl_setup_and_draw:
  315 D1:AE07 23 -  -  -  	inc hl;to x pos
  316 D1:AE08 5E -  -  -  	ld e,(hl);e holds x pos 
  317 D1:AE09 23 -  -  -  	inc hl 
  318 D1:AE0A 4E -  -  -  	ld c,(hl);sprite index 
  319 D1:AE0B E5 -  -  -  	push hl ;save location in data 
  320 D1:AE0C -  -  -  -  dbgl_vram_line_start .equ $ + 1	
  321 D1:AE0C 21 00 00 00 	ld hl,0
  322 D1:AE10 19 -  -  -  	add hl,de;add x pos 
  323 D1:AE11 EB -  -  -  	ex de,hl;put vram pos into de 
  324 D1:AE12 -  -  -  -  	
  325 D1:AE12 26 A0 -  -  	ld h,160
  326 D1:AE14 6F -  -  -  	ld l,a ;number of lines to subtract 
  327 D1:AE15 ED 6C -  -  	mlt hl;bytes to subtract from vram
  328 D1:AE17 37 -  -  -  	scf 
  329 D1:AE18 3F -  -  -  	ccf
  330 D1:AE19 EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  331 D1:AE1A ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  332 D1:AE1C EB -  -  -  	ex de,hl;put in de
  333 D1:AE1D -  -  -  -  	
  334 D1:AE1D -  -  -  -  dbgl_sprite_pointers .equ $ + 1
  335 D1:AE1D 21 00 00 00 	ld hl,0
  336 D1:AE21 09 -  -  -  	add hl,bc
  337 D1:AE22 09 -  -  -  	add hl,bc 
  338 D1:AE23 09 -  -  -  	add hl,bc ;hl points to sprite data pointer 
  339 D1:AE24 ED 27 -  -  	ld hl,(hl);hl holds sprite data
  340 D1:AE26 -  -  -  -  
  341 D1:AE26 -  -  -  -  
  342 D1:AE26 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  343 D1:AE28 CA 34 AE D1 	jp z,dbgl_fast_sprite ;if even address, fast sprite 
  344 D1:AE2C CD 06 AF D1 	call draw_slow_sprite_single_line
  345 D1:AE30 C3 38 AE D1 	jp dbgl_slow_sprite
  346 D1:AE34 -  -  -  -  dbgl_fast_sprite:
  347 D1:AE34 CD 88 AE D1 	call draw_fast_sprite_single_line
  348 D1:AE38 -  -  -  -  dbgl_slow_sprite:
  349 D1:AE38 -  -  -  -  	
  350 D1:AE38 11 00 00 00 	ld de,0;clear de 
  351 D1:AE3C 01 00 00 00 	ld bc,0
  352 D1:AE40 E1 -  -  -  	pop hl;back to data
  353 D1:AE41 C9 -  -  -  	ret
  354 D1:AE42 -  -  -  -  	
  355 D1:AE42 -  -  -  -  
  356 D1:AE42 -  -  -  -  
  357 D1:AE42 -  -  -  -  
  358 D1:AE42 -  -  -  -  
  359 D1:AE42 -  -  -  -  
  360 D1:AE42 -  -  -  -  
  361 D1:AE42 -  -  -  -  
  362 D1:AE42 -  -  -  -  
  363 D1:AE42 -  -  -  -  
  364 D1:AE42 -  -  -  -  ; dbgl_upper_loop:
  365 D1:AE42 -  -  -  -  	; ld a,(hl);y
  366 D1:AE42 -  -  -  -  	; inc hl;to height
  367 D1:AE42 -  -  -  -  	; sub (hl);subtract height
  368 D1:AE42 -  -  -  -  	;a is y value of bottom row of sprite
  369 D1:AE42 -  -  -  -  	; jp nc,dbgl_upper_skip;if no carry into next frame (most sprites will do this so want this to be fast)
  370 D1:AE42 -  -  -  -  	
  371 D1:AE42 -  -  -  -  	;sprite extends into target frame
  372 D1:AE42 -  -  -  -  ; dbgl_line_num .equ $ + 1
  373 D1:AE42 -  -  -  -  	; sub 0 ;compare to line number in target frame
  374 D1:AE42 -  -  -  -  	; jp c,dbgl_upper_cont;if linenum is >  bottom row
  375 D1:AE42 -  -  -  -  	; jp z,dbgl_upper_cont;if = bottom row
  376 D1:AE42 -  -  -  -  ; dbgl_upper_skip:
  377 D1:AE42 -  -  -  -  	; inc hl;to x
  378 D1:AE42 -  -  -  -  	; inc hl;to index 
  379 D1:AE42 -  -  -  -  	; inc hl;to y
  380 D1:AE42 -  -  -  -  	; ex af,af';'
  381 D1:AE42 -  -  -  -  	; dec a ;dec number of loops 
  382 D1:AE42 -  -  -  -  	; jp z,dbgl_lower_start 
  383 D1:AE42 -  -  -  -  	; ex af,af';'
  384 D1:AE42 -  -  -  -  	; jp dbgl_upper_loop
  385 D1:AE42 -  -  -  -  	
  386 D1:AE42 -  -  -  -  ; dbgl_upper_cont:
  387 D1:AE42 -  -  -  -  	;a = bottom row - linenum
  388 D1:AE42 -  -  -  -  	; add a,(hl);add height-1 
  389 D1:AE42 -  -  -  -  	;a holds 0 indexed line num within sprite
  390 D1:AE42 -  -  -  -  	; call dbgl_setup_and_draw
  391 D1:AE42 -  -  -  -  	; inc hl;to y
  392 D1:AE42 -  -  -  -  	; ex af,af';'
  393 D1:AE42 -  -  -  -  	; dec a 
  394 D1:AE42 -  -  -  -  	; jp z,dbgl_lower_start 
  395 D1:AE42 -  -  -  -  	; ex af,af';'
  396 D1:AE42 -  -  -  -  	; jp dbgl_upper_loop
  397 D1:AE42 -  -  -  -  
  398 D1:AE42 -  -  -  -  
  399 D1:AE42 -  -  -  -  
  400 D1:AE42 -  -  -  -  
  401 D1:AE42 -  -  -  -  
  402 D1:AE42 -  -  -  -  
  403 D1:AE42 -  -  -  -  
  404 D1:AE42 -  -  -  -  ;hl = data, de = vram, a = linenum (0 indexed from top)
  405 D1:AE42 -  -  -  -  ; draw_bg_sprite_line:
  406 D1:AE42 -  -  -  -  	; push hl;save 
  407 D1:AE42 -  -  -  -  	; ld l,(hl);sprite width in px
  408 D1:AE42 -  -  -  -  	; ld h,a ;lines to skip
  409 D1:AE42 -  -  -  -  	; ld a,l;width 
  410 D1:AE42 -  -  -  -  	; mlt hl;widt*lines skipped 
  411 D1:AE42 -  -  -  -  	; pop bc 
  412 D1:AE42 -  -  -  -  	; add hl,bc;skip to target line data 
  413 D1:AE42 -  -  -  -  	; inc hl 
  414 D1:AE42 -  -  -  -  	;hl is pointing to start of line data 
  415 D1:AE42 -  -  -  -  	; sra a;divide width by 2 
  416 D1:AE42 -  -  -  -  	; ld b,a;b holds number of loops 
  417 D1:AE42 -  -  -  -  ; dbgsl_loop:
  418 D1:AE42 -  -  -  -  	; ld a,(de); load vram data 
  419 D1:AE42 -  -  -  -  	; and (hl);and with mask 
  420 D1:AE42 -  -  -  -  	; inc hl ;to color data 
  421 D1:AE42 -  -  -  -  	; or (hl);or w color data 
  422 D1:AE42 -  -  -  -  	; ld (de),a;write to vram  
  423 D1:AE42 -  -  -  -  	; inc de
  424 D1:AE42 -  -  -  -  	; inc hl;to mask data
  425 D1:AE42 -  -  -  -  	; djnz dbgsl_loop
  426 D1:AE42 -  -  -  -  	; ret 
  427 D1:AE42 -  -  -  -  	
  428 D1:AE42 -  -  -  -  
  429 D1:AE42 -  -  -  -  
  430 D1:AE42 -  -  -  -  
  431 D1:AE42 -  -  -  -  
  432 D1:AE42 -  -  -  -  
  433 D1:AE42 -  -  -  -  
  434 D1:AE42 -  -  -  -  
  435 D1:AE42 -  -  -  -  
  436 D1:AE42 -  -  -  -  
  437 D1:AE42 -  -  -  -  
  438 D1:AE42 -  -  -  -  
  439 D1:AE42 -  -  -  -  
Listing for file "ascent.asm"
  517 D1:AE42 -  -  -  -  #include "drawFGSprite.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFGSprite.txt"
    1 D1:AE42 -  -  -  -  
    2 D1:AE42 -  -  -  -  ;hl = data, a = lines to draw. returns a = num loops to draw, hl = 1 before first gap length
    3 D1:AE42 -  -  -  -  setup_sprite_bottom_cut:
    4 D1:AE42 1B -  -  -  	dec de
    5 D1:AE43 01 00 00 00 	ld bc,0 ;clear bc
    6 D1:AE47 4F -  -  -  	ld c,a;c = lines to draw
    7 D1:AE48 E5 -  -  -  	push hl ;save data 
    8 D1:AE49 09 -  -  -  	add hl,bc
    9 D1:AE4A 7E -  -  -  	ld a,(hl);num loops to draw
   10 D1:AE4B E1 -  -  -  	pop hl ;return to start of data
   11 D1:AE4C 4E -  -  -  	ld c,(hl) ;height
   12 D1:AE4D 09 -  -  -  	add hl,bc ;hl now points to 1 before first gap length
   13 D1:AE4E C9 -  -  -  	ret 
   14 D1:AE4F -  -  -  -  
   15 D1:AE4F -  -  -  -  setup_sprite_top_cut:
   16 D1:AE4F 1B -  -  -  	dec de ;move to correct vram pos 
   17 D1:AE50 01 00 00 00 	ld bc,0
   18 D1:AE54 4F -  -  -  	ld c,a ;lines to skip (1 indexed)
   19 D1:AE55 D5 -  -  -  	push de
   20 D1:AE56 11 00 00 00 	ld de,0
   21 D1:AE5A E5 -  -  -  	push hl
   22 D1:AE5B 5E -  -  -  	ld e,(hl);height
   23 D1:AE5C 09 -  -  -  	add hl,bc;hl points to num skip loops 
   24 D1:AE5D 4E -  -  -  	ld c,(hl);c holds num skip loops
   25 D1:AE5E E1 -  -  -  	pop hl;start of data
   26 D1:AE5F 19 -  -  -  	add hl,de
   27 D1:AE60 46 -  -  -  	ld b,(hl);total number of loops
   28 D1:AE61 23 -  -  -  	inc hl;hl is pixel data
   29 D1:AE62 D1 -  -  -  	pop de;back to vram
   30 D1:AE63 79 -  -  -  	ld a,c;loops to skip
   31 D1:AE64 C9 -  -  -  	ret 
   32 D1:AE65 -  -  -  -  
   33 D1:AE65 -  -  -  -  ;hl = data, a = line number to draw. returns a = c = number of loops to skip, b = loops to skip + loops to draw. HL = gap length  
   34 D1:AE65 -  -  -  -  setup_sprite_single_line: ;sets up for single line drawing mode 
   35 D1:AE65 1B -  -  -  	dec de
   36 D1:AE66 01 00 00 00 	ld bc,0
   37 D1:AE6A 4F -  -  -  	ld c,a ;line to draw
   38 D1:AE6B D5 -  -  -  	push de ;save vram 
   39 D1:AE6C 11 00 00 00 	ld de,0
   40 D1:AE70 E5 -  -  -  	push hl
   41 D1:AE71 5E -  -  -  	ld e,(hl);height
   42 D1:AE72 09 -  -  -  	add hl,bc;hl points to num skip loops 
   43 D1:AE73 4E -  -  -  	ld c,(hl);c holds num skip loops
   44 D1:AE74 23 -  -  -  	inc hl 
   45 D1:AE75 46 -  -  -  	ld b,(hl);b holds num loops after drawn line 
   46 D1:AE76 E1 -  -  -  	pop hl;start of data
   47 D1:AE77 19 -  -  -  	add hl,de
   48 D1:AE78 23 -  -  -  	inc hl;hl is pixel data points to gap length 
   49 D1:AE79 D1 -  -  -  	pop de;back to vram
   50 D1:AE7A 79 -  -  -  	ld a,c;loops to skip
   51 D1:AE7B C9 -  -  -  	ret 
   52 D1:AE7C -  -  -  -  
   53 D1:AE7C -  -  -  -  
   54 D1:AE7C -  -  -  -  
   55 D1:AE7C -  -  -  -  draw_fast_sprite_bottom_cut_from_line:
   56 D1:AE7C 3C -  -  -  	inc a 
   57 D1:AE7D -  -  -  -  ;de = vram , hl = data, a = number lines to draw
   58 D1:AE7D -  -  -  -  draw_fast_sprite_bottom_cut:
   59 D1:AE7D CD 42 AE D1 	call setup_sprite_bottom_cut
   60 D1:AE81 23 -  -  -  	inc hl ;hl points to gap length 
   61 D1:AE82 4E -  -  -  	ld c,(hl);load alpha length
   62 D1:AE83 EB -  -  -  	ex de,hl;hl is vram, de is data
   63 D1:AE84 C3 CB AE D1 	jp dfgs_loop
   64 D1:AE88 -  -  -  -  
   65 D1:AE88 -  -  -  -  
   66 D1:AE88 -  -  -  -  ;de = vram , hl = data, a = line to draw (starting from 0)
   67 D1:AE88 -  -  -  -  draw_fast_sprite_single_line:
   68 D1:AE88 B7 -  -  -  	or a 
   69 D1:AE89 CA 7C AE D1 	jp z,draw_fast_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
   70 D1:AE8D -  -  -  -  	;we know a is not 0 here 
   71 D1:AE8D CD 65 AE D1 	call setup_sprite_single_line
   72 D1:AE91 -  -  -  -  	
   73 D1:AE91 C5 -  -  -  	push bc;save total and skipped loops
   74 D1:AE92 01 00 00 00 	ld bc,0
   75 D1:AE96 -  -  -  -  	
   76 D1:AE96 C3 A3 AE D1 	jp draw_fast_sprite_top_loop 
   77 D1:AE9A -  -  -  -  
   78 D1:AE9A -  -  -  -  
   79 D1:AE9A -  -  -  -  
   80 D1:AE9A -  -  -  -  ;de = vram , hl = data, a = top lines to skip (1 indexed)
   81 D1:AE9A -  -  -  -  draw_fast_sprite_top_cut:
   82 D1:AE9A CD 4F AE D1 	call setup_sprite_top_cut
   83 D1:AE9E C5 -  -  -  	push bc ;save total and skipped loops 
   84 D1:AE9F 01 00 00 00 	ld bc,0 
   85 D1:AEA3 -  -  -  -  	
   86 D1:AEA3 -  -  -  -  draw_fast_sprite_top_loop:; need to follow through gap and drawn lengths to find start of drawing
   87 D1:AEA3 4E -  -  -  	ld c,(hl);load with first gap length	
   88 D1:AEA4 EB -  -  -  	ex de,hl;hl is vram
   89 D1:AEA5 09 -  -  -  	add hl,bc
   90 D1:AEA6 EB -  -  -  	ex de,hl;hl is data
   91 D1:AEA7 23 -  -  -  	inc hl
   92 D1:AEA8 4E -  -  -  	ld c,(hl);ldir length
   93 D1:AEA9 09 -  -  -  	add hl,bc;add ldir length
   94 D1:AEAA EB -  -  -  	ex de,hl;hl is vram
   95 D1:AEAB 09 -  -  -  	add hl,bc;add ldir length
   96 D1:AEAC 13 -  -  -  	inc de
   97 D1:AEAD EB -  -  -  	ex de,hl;hl is data
   98 D1:AEAE 3D -  -  -  	dec a
   99 D1:AEAF C2 A3 AE D1 	jp nz,draw_fast_sprite_top_loop
  100 D1:AEB3 -  -  -  -  	
  101 D1:AEB3 -  -  -  -  	
  102 D1:AEB3 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  103 D1:AEB4 78 -  -  -  	ld a,b
  104 D1:AEB5 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  105 D1:AEB6 -  -  -  -  		
  106 D1:AEB6 01 00 00 00 	ld bc,0
  107 D1:AEBA 4E -  -  -  	ld c,(hl);load c with gap length
  108 D1:AEBB EB -  -  -  	ex de,hl ;setup for loop 
  109 D1:AEBC C3 CB AE D1 	jp dfgs_loop
  110 D1:AEC0 -  -  -  -  
  111 D1:AEC0 -  -  -  -  
  112 D1:AEC0 -  -  -  -  ;de = vram , hl = data
  113 D1:AEC0 -  -  -  -  draw_fast_sprite_full:
  114 D1:AEC0 1B -  -  -  	dec de
  115 D1:AEC1 01 00 00 00 	ld bc,0
  116 D1:AEC5 4E -  -  -  	ld c,(hl);height
  117 D1:AEC6 09 -  -  -  	add hl,bc
  118 D1:AEC7 7E -  -  -  	ld a,(hl);total loops
  119 D1:AEC8 23 -  -  -  	inc hl
  120 D1:AEC9 4E -  -  -  	ld c,(hl);first gap length
  121 D1:AECA EB -  -  -  	ex de,hl
  122 D1:AECB -  -  -  -  ;a = num loops, c = alphaLength,hl = vram
  123 D1:AECB -  -  -  -  dfgs_loop:;gap, colors
  124 D1:AECB 09 -  -  -  	add hl,bc;add alpha length
  125 D1:AECC EB -  -  -  	ex de,hl;swap, hl is data, de is vram
  126 D1:AECD 23 -  -  -  	inc hl
  127 D1:AECE 4E -  -  -  	ld c,(hl);get ldir length
  128 D1:AECF 23 -  -  -  	inc hl
  129 D1:AED0 ED B0 -  -  	ldir
  130 D1:AED2 4E -  -  -  	ld c,(hl);load c with next alpha length
  131 D1:AED3 EB -  -  -  	ex de,hl;swap, hl is vram
  132 D1:AED4 3D -  -  -  	dec a
  133 D1:AED5 C2 CB AE D1 	jp nz,dfgs_loop
  134 D1:AED9 C9 -  -  -  	ret
  135 D1:AEDA -  -  -  -  	
  136 D1:AEDA -  -  -  -  	
  137 D1:AEDA -  -  -  -  	
  138 D1:AEDA -  -  -  -  	
  139 D1:AEDA -  -  -  -  
  140 D1:AEDA -  -  -  -  
  141 D1:AEDA -  -  -  -  ;hl = data, de = vram
  142 D1:AEDA -  -  -  -  draw_slow_sprite_full:
  143 D1:AEDA 01 00 00 00 	ld bc,0
  144 D1:AEDE 4E -  -  -  	ld c,(hl);height
  145 D1:AEDF 09 -  -  -  	add hl,bc
  146 D1:AEE0 7E -  -  -  	ld a,(hl);num loops
  147 D1:AEE1 1B -  -  -  	dec de ;correct vram pos 
  148 D1:AEE2 D9 -  -  -  	exx;into shadow 
  149 D1:AEE3 47 -  -  -  	ld b,a ;number of loops
  150 D1:AEE4 -  -  -  -  	;hl = (gap length) -1 de = vram-1 b' = loops
  151 D1:AEE4 -  -  -  -  dsfgs_line_loop:
  152 D1:AEE4 D9 -  -  -  	exx;out of shadow
  153 D1:AEE5 23 -  -  -  	inc hl;gap length
  154 D1:AEE6 4E -  -  -  	ld c,(hl);gap length
  155 D1:AEE7 EB -  -  -  	ex de,hl;hl is vram
  156 D1:AEE8 09 -  -  -  	add hl,bc;add aplha gap
  157 D1:AEE9 EB -  -  -  	ex de,hl;hl is data
  158 D1:AEEA 23 -  -  -  	inc hl;hl points to single pix mask
  159 D1:AEEB 1A -  -  -  	ld a,(de);vram data
  160 D1:AEEC A6 -  -  -  	and (hl)
  161 D1:AEED 23 -  -  -  	inc hl;pixel data
  162 D1:AEEE B6 -  -  -  	or (hl)
  163 D1:AEEF 12 -  -  -  	ld (de),a
  164 D1:AEF0 23 -  -  -  	inc hl;ldir length
  165 D1:AEF1 -  -  -  -  	
  166 D1:AEF1 13 -  -  -  	inc de;move to next pixel
  167 D1:AEF2 -  -  -  -  	
  168 D1:AEF2 7E -  -  -  	ld a,(hl);ldir length
  169 D1:AEF3 23 -  -  -  	inc hl;data
  170 D1:AEF4 4F -  -  -  	ld c,a
  171 D1:AEF5 B7 -  -  -  	or a
  172 D1:AEF6 CA FC AE D1 	jp z,dsfgs_ldir_skip
  173 D1:AEFA ED B0 -  -  	ldir
  174 D1:AEFC -  -  -  -  dsfgs_ldir_skip:
  175 D1:AEFC 1A -  -  -  	ld a,(de);vram data
  176 D1:AEFD A6 -  -  -  	and (hl)
  177 D1:AEFE 23 -  -  -  	inc hl;pixel data
  178 D1:AEFF B6 -  -  -  	or (hl)
  179 D1:AF00 12 -  -  -  	ld (de),a
  180 D1:AF01 -  -  -  -  	
  181 D1:AF01 D9 -  -  -  	exx ;into shadow
  182 D1:AF02 10 E0 -  -  	djnz dsfgs_line_loop
  183 D1:AF04 D9 -  -  -  	exx ;out 
  184 D1:AF05 C9 -  -  -  	ret
  185 D1:AF06 -  -  -  -  
  186 D1:AF06 -  -  -  -  
  187 D1:AF06 -  -  -  -  
  188 D1:AF06 -  -  -  -  ;de = vram , hl = data, a = line to draw (from 0)
  189 D1:AF06 -  -  -  -  draw_slow_sprite_single_line:
  190 D1:AF06 -  -  -  -  
  191 D1:AF06 B7 -  -  -  	or a 
  192 D1:AF07 CA 44 AF D1 	jp z,draw_slow_sprite_bottom_cut_from_line ; if a is 0, same as drawing bottom cut
  193 D1:AF0B -  -  -  -  	;we know a is not 0 here
  194 D1:AF0B CD 65 AE D1 	call setup_sprite_single_line
  195 D1:AF0F C5 -  -  -  	push bc;save total and skipped loops
  196 D1:AF10 01 00 00 00 	ld bc,0
  197 D1:AF14 -  -  -  -  	
  198 D1:AF14 C3 21 AF D1 	jp slow_sprite_data_traverse 
  199 D1:AF18 -  -  -  -  	
  200 D1:AF18 -  -  -  -  
  201 D1:AF18 -  -  -  -  ;de = vram , hl = data, a = top lines to skip (from 1)
  202 D1:AF18 -  -  -  -  draw_slow_sprite_top_cut:
  203 D1:AF18 CD 4F AE D1 	call setup_sprite_top_cut
  204 D1:AF1C C5 -  -  -  	push bc;save total and skipped loops
  205 D1:AF1D 01 00 00 00 	ld bc,0
  206 D1:AF21 -  -  -  -  ;hl = data start, a = num loops to skip, bc = 0
  207 D1:AF21 -  -  -  -  slow_sprite_data_traverse:
  208 D1:AF21 4E -  -  -  	ld c,(hl);gap length
  209 D1:AF22 EB -  -  -  	ex de,hl;hl is vram
  210 D1:AF23 09 -  -  -  	add hl,bc
  211 D1:AF24 EB -  -  -  	ex de,hl
  212 D1:AF25 -  -  -  -  	
  213 D1:AF25 23 -  -  -  	inc hl ;inc past leading pixels
  214 D1:AF26 23 -  -  -  	inc hl
  215 D1:AF27 23 -  -  -  	inc hl;ldir length
  216 D1:AF28 4E -  -  -  	ld c,(hl)
  217 D1:AF29 09 -  -  -  	add hl,bc
  218 D1:AF2A EB -  -  -  	ex de,hl
  219 D1:AF2B 09 -  -  -  	add hl,bc
  220 D1:AF2C EB -  -  -  	ex de,hl
  221 D1:AF2D 13 -  -  -  	inc de;inc for leading pix 
  222 D1:AF2E 23 -  -  -  	inc hl;inc past ending pixels
  223 D1:AF2F 23 -  -  -  	inc hl
  224 D1:AF30 23 -  -  -  	inc hl;gap length
  225 D1:AF31 -  -  -  -  	
  226 D1:AF31 3D -  -  -  	dec a 
  227 D1:AF32 C2 21 AF D1 	jp nz,slow_sprite_data_traverse
  228 D1:AF36 -  -  -  -  
  229 D1:AF36 -  -  -  -  
  230 D1:AF36 C1 -  -  -  	pop bc ;b is total loops, c is skipped loops 
  231 D1:AF37 78 -  -  -  	ld a,b
  232 D1:AF38 91 -  -  -  	sub a,c;subtract skipped from total, a holds remaining number of loops
  233 D1:AF39 01 00 00 00 	ld bc,0;clear bc 
  234 D1:AF3D 2B -  -  -  	dec hl	;hl points to 1 before gaplength
  235 D1:AF3E D9 -  -  -  	exx ;toshadow
  236 D1:AF3F 47 -  -  -  	ld b,a 
  237 D1:AF40 C3 E4 AE D1 	jp dsfgs_line_loop
  238 D1:AF44 -  -  -  -  	
  239 D1:AF44 -  -  -  -  	
  240 D1:AF44 -  -  -  -  	
  241 D1:AF44 -  -  -  -  draw_slow_sprite_bottom_cut_from_line:
  242 D1:AF44 3C -  -  -  	inc a 
  243 D1:AF45 -  -  -  -  ;de = vram , hl = data, a = number lines to draw
  244 D1:AF45 -  -  -  -  draw_slow_sprite_bottom_cut:
  245 D1:AF45 -  -  -  -  
  246 D1:AF45 CD 42 AE D1 	call setup_sprite_bottom_cut
  247 D1:AF49 -  -  -  -  	;a = loops to draw, hl = 1 before gap length 
  248 D1:AF49 D9 -  -  -  	exx ;toshadow
  249 D1:AF4A 47 -  -  -  	ld b,a
  250 D1:AF4B C3 E4 AE D1 	jp dsfgs_line_loop
  251 D1:AF4F -  -  -  -  
  252 D1:AF4F -  -  -  -  
  253 D1:AF4F -  -  -  -  
  254 D1:AF4F -  -  -  -  
  255 D1:AF4F -  -  -  -  
  256 D1:AF4F -  -  -  -  
  257 D1:AF4F -  -  -  -  
  258 D1:AF4F -  -  -  -  
  259 D1:AF4F -  -  -  -  
  260 D1:AF4F -  -  -  -  
  261 D1:AF4F -  -  -  -  
  262 D1:AF4F -  -  -  -  
  263 D1:AF4F -  -  -  -  
  264 D1:AF4F -  -  -  -  
  265 D1:AF4F -  -  -  -  
  266 D1:AF4F -  -  -  -  
  267 D1:AF4F -  -  -  -  
  268 D1:AF4F -  -  -  -  
  269 D1:AF4F -  -  -  -  
  270 D1:AF4F -  -  -  -  
  271 D1:AF4F -  -  -  -  
  272 D1:AF4F -  -  -  -  
  273 D1:AF4F -  -  -  -  
  274 D1:AF4F -  -  -  -  
  275 D1:AF4F -  -  -  -  
  276 D1:AF4F -  -  -  -  
  277 D1:AF4F -  -  -  -  
  278 D1:AF4F -  -  -  -  
  279 D1:AF4F -  -  -  -  
  280 D1:AF4F -  -  -  -  
  281 D1:AF4F -  -  -  -  
  282 D1:AF4F -  -  -  -  
  283 D1:AF4F -  -  -  -  
  284 D1:AF4F -  -  -  -  
  285 D1:AF4F -  -  -  -  
  286 D1:AF4F -  -  -  -  
  287 D1:AF4F -  -  -  -   
  288 D1:AF4F -  -  -  -  
  289 D1:AF4F -  -  -  -  
  290 D1:AF4F -  -  -  -  
  291 D1:AF4F -  -  -  -  
  292 D1:AF4F -  -  -  -  
  293 D1:AF4F -  -  -  -  
  294 D1:AF4F -  -  -  -  
  295 D1:AF4F -  -  -  -  
  296 D1:AF4F -  -  -  -  
  297 D1:AF4F -  -  -  -  
  298 D1:AF4F -  -  -  -  
  299 D1:AF4F -  -  -  -  
  300 D1:AF4F -  -  -  -  
  301 D1:AF4F -  -  -  -  
  302 D1:AF4F -  -  -  -  
  303 D1:AF4F -  -  -  -  
  304 D1:AF4F -  -  -  -  
  305 D1:AF4F -  -  -  -  
  306 D1:AF4F -  -  -  -  
  307 D1:AF4F -  -  -  -  
  308 D1:AF4F -  -  -  -  
  309 D1:AF4F -  -  -  -  
  310 D1:AF4F -  -  -  -  
  311 D1:AF4F -  -  -  -  
  312 D1:AF4F -  -  -  -  
  313 D1:AF4F -  -  -  -  
  314 D1:AF4F -  -  -  -  
  315 D1:AF4F -  -  -  -  
  316 D1:AF4F -  -  -  -  
  317 D1:AF4F -  -  -  -  
  318 D1:AF4F -  -  -  -  
  319 D1:AF4F -  -  -  -  
  320 D1:AF4F -  -  -  -  
  321 D1:AF4F -  -  -  -  
  322 D1:AF4F -  -  -  -  
  323 D1:AF4F -  -  -  -  
  324 D1:AF4F -  -  -  -  
  325 D1:AF4F -  -  -  -  
  326 D1:AF4F -  -  -  -  
  327 D1:AF4F -  -  -  -  
  328 D1:AF4F -  -  -  -  
  329 D1:AF4F -  -  -  -  
  330 D1:AF4F -  -  -  -  
  331 D1:AF4F -  -  -  -  
  332 D1:AF4F -  -  -  -  
  333 D1:AF4F -  -  -  -  
  334 D1:AF4F -  -  -  -  
  335 D1:AF4F -  -  -  -  
  336 D1:AF4F -  -  -  -  
  337 D1:AF4F -  -  -  -  
  338 D1:AF4F -  -  -  -  
  339 D1:AF4F -  -  -  -  
  340 D1:AF4F -  -  -  -  
  341 D1:AF4F -  -  -  -  
  342 D1:AF4F -  -  -  -  
  343 D1:AF4F -  -  -  -  	
  344 D1:AF4F -  -  -  -  	
Listing for file "ascent.asm"
  518 D1:AF4F -  -  -  -  #include "BetterSpriteDecompress.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\BetterSpriteDecompress.txt"
    1 D1:AF4F -  -  -  -  
    2 D1:AF4F -  -  -  -  
    3 D1:AF4F -  -  -  -  
    4 D1:AF4F -  -  -  -  
    5 D1:AF4F -  -  -  -  
    6 D1:AF4F -  -  -  -  
    7 D1:AF4F -  -  -  -  
    8 D1:AF4F -  -  -  -  
    9 D1:AF4F -  -  -  -  ;REGISTER USEAGE
   10 D1:AF4F -  -  -  -  ;HL = sprite color data byte
   11 D1:AF4F -  -  -  -  ;C = bit selector for color data 
   12 D1:AF4F -  -  -  -  ;HL' = alpha data byte
   13 D1:AF4F -  -  -  -  ;C' = bit selector for alpha data
   14 D1:AF4F -  -  -  -  ;DE = output sprite data location
   15 D1:AF4F -  -  -  -  ;DE' = loops/line write location 
   16 D1:AF4F -  -  -  -  ;A' = alpha bits remaining to read in row
   17 D1:AF4F -  -  -  -  
   18 D1:AF4F -  -  -  -  ;SETUP ----------------
   19 D1:AF4F -  -  -  -  ;SET UP BPC MODE AND ALPHA/NOALPHA
   20 D1:AF4F -  -  -  -  ;write height or width(BG) data to decompressed sprite 
   21 D1:AF4F -  -  -  -  ;GET PER SPRITE PALETTE DATA
   22 D1:AF4F -  -  -  -  ;set registers to point to correct locations for decompression
   23 D1:AF4F -  -  -  -  ;------------
   24 D1:AF4F -  -  -  -  
   25 D1:AF4F -  -  -  -  ;GO TO EITHER FAST, SLOW, or BG SPRITE ALGORITHMS
   26 D1:AF4F -  -  -  -  
   27 D1:AF4F -  -  -  -  
   28 D1:AF4F -  -  -  -  ;FAST / SLOW ROUTINE ---------------------------
   29 D1:AF4F -  -  -  -  ;Parse through alpha data, count number of 00 pairs (gap length)
   30 D1:AF4F -  -  -  -  ;IF FAST, GOTO LDIR ROUTINE
   31 D1:AF4F -  -  -  -  ;leading pixel(s), either 11, 01, 10 in alpha data. 
   32 D1:AF4F -  -  -  -  ;write pixel mask and color data
   33 D1:AF4F -  -  -  -  
   34 D1:AF4F -  -  -  -  ;LDIR ROUTINE
   35 D1:AF4F -  -  -  -  ;Count number of 11 pairs in alpha data (LDIR length)
   36 D1:AF4F -  -  -  -  ;if slow and alpha data ends with 00, the last 11 pair becomes trailing pixels
   37 D1:AF4F -  -  -  -  ;Write LDIR length to sprite data 
   38 D1:AF4F -  -  -  -  ;Write LDIR pixel data (if nonzero)
   39 D1:AF4F -  -  -  -  ;IF FAST, GOTO END
   40 D1:AF4F -  -  -  -  
   41 D1:AF4F -  -  -  -  ;trailing pixels
   42 D1:AF4F -  -  -  -  ;11,10,01 in alpha data 
   43 D1:AF4F -  -  -  -  
   44 D1:AF4F -  -  -  -  ;END AND RESTART
   45 D1:AF4F -  -  -  -  ;Increment loops/line counter
   46 D1:AF4F -  -  -  -  ;check if end of line and write loops/line
   47 D1:AF4F -  -  -  -  
   48 D1:AF4F -  -  -  -  ;store registers and check if interrupt is required
   49 D1:AF4F -  -  -  -  ;if interruption required, return to main loop to draw next frame
   50 D1:AF4F -  -  -  -  ;otherwise return to start of loop
   51 D1:AF4F -  -  -  -  
   52 D1:AF4F -  -  -  -  ;
   53 D1:AF4F -  -  -  -  
   54 D1:AF4F -  -  -  -  
   55 D1:AF4F -  -  -  -  
   56 D1:AF4F -  -  -  -  
   57 D1:AF4F -  -  -  -  
   58 D1:AF4F -  -  -  -  
   59 D1:AF4F -  -  -  -  ;rotates c and incs hl if needed to point to next bit. can be flipped to dec bit 
   60 D1:AF4F -  -  -  -  sdcomp_next_in_bitstream:
   61 D1:AF4F -  -  -  -  sdcomp_flip_bitstream .equ $ + 1
   62 D1:AF4F CB 09 -  -  	rrc c;rlc flip
   63 D1:AF51 D0 -  -  -  	ret nc
   64 D1:AF52 -  -  -  -  sdcomp_flip_bitstream_2 .equ $
   65 D1:AF52 23 -  -  -  	inc hl;dec hl flip
   66 D1:AF53 C9 -  -  -  	ret
   67 D1:AF54 -  -  -  -  
   68 D1:AF54 -  -  -  -  ;ALPHA HELPER FUNCS ================================================================================================	
   69 D1:AF54 -  -  -  -  
   70 D1:AF54 -  -  -  -  ;IN SHADOW
   71 D1:AF54 -  -  -  -  ;HL POINTS TO PIXEL ALPHA DATA
   72 D1:AF54 -  -  -  -  ;C IS BITMASK
   73 D1:AF54 -  -  -  -  ;RETURNS 0 OR nonzero IN A 
   74 D1:AF54 -  -  -  -  ;If final alpha bit in line is read, writes loop/line data, ...
   75 D1:AF54 -  -  -  -  ; sets some flags, decrements remaining lines, traverses sprite data if flip, returns the read data 
   76 D1:AF54 -  -  -  -  ; next call returns first bit in next row  
   77 D1:AF54 -  -  -  -  sdcomp_get_next_alpha:
   78 D1:AF54 -  -  -  -  	;ld a,$A2;test 
   79 D1:AF54 -  -  -  -  	;call write_a_to_ram
   80 D1:AF54 79 -  -  -  	ld a,c 
   81 D1:AF55 -  -  -  -  	;call write_a_to_ram 
   82 D1:AF55 7E -  -  -  	ld a,(hl)
   83 D1:AF56 -  -  -  -  	;call write_a_to_ram
   84 D1:AF56 -  -  -  -  	
   85 D1:AF56 37 -  -  -  	scf 
   86 D1:AF57 -  -  -  -  sdcomp_end_of_line_alp .equ $
   87 D1:AF57 DA 64 AF D1 	jp c, sdcomp_end_of_line_alp_skip
   88 D1:AF5B -  -  -  -  
   89 D1:AF5B -  -  -  -  	;ld a,$A3
   90 D1:AF5B -  -  -  -  	;call write_a_to_ram 
   91 D1:AF5B -  -  -  -  	
   92 D1:AF5B 3E D2 -  -  	ld a, %11010010 ;jp nc 
   93 D1:AF5D 32 C7 AF D1 	ld (sdcomp_end_vitrual_zero_read),a 
   94 D1:AF61 -  -  -  -  	
   95 D1:AF61 3E 00 -  -  	ld a,0
   96 D1:AF63 C9 -  -  -  	ret ;returns virtual 0, outside of data range 
   97 D1:AF64 -  -  -  -  
   98 D1:AF64 -  -  -  -  sdcomp_end_of_line_alp_skip:
   99 D1:AF64 -  -  -  -  	
  100 D1:AF64 -  -  -  -  	
  101 D1:AF64 -  -  -  -  	
  102 D1:AF64 -  -  -  -  ;MUST BE RESET EVERY ROW
  103 D1:AF64 37 -  -  -  	scf
  104 D1:AF65 -  -  -  -  sdcomp_bit_offset .equ $ ;jp nc for offset
  105 D1:AF65 DA 72 AF D1 	jp c,sdcomp_bit_offset_skip
  106 D1:AF69 3E DA -  -  	ld a,%11011010;jp c 
  107 D1:AF6B 32 65 AF D1 	ld (sdcomp_bit_offset),a
  108 D1:AF6F -  -  -  -  	;ld a,$A9
  109 D1:AF6F -  -  -  -  	;call write_a_to_ram
  110 D1:AF6F 3E 00 -  -  	ld a,0
  111 D1:AF71 C9 -  -  -  	ret ;return 0 first bit
  112 D1:AF72 -  -  -  -  sdcomp_bit_offset_skip:;skip bit offset
  113 D1:AF72 -  -  -  -  		
  114 D1:AF72 -  -  -  -  	;ld a,$EF
  115 D1:AF72 -  -  -  -  	;call write_a_to_ram
  116 D1:AF72 7E -  -  -  	ld a,(hl)
  117 D1:AF73 -  -  -  -  	;push af 
  118 D1:AF73 -  -  -  -  	;call write_a_to_ram
  119 D1:AF73 -  -  -  -  	;ld a,c
  120 D1:AF73 -  -  -  -  	;call write_a_to_ram
  121 D1:AF73 -  -  -  -  	;pop af 
  122 D1:AF73 -  -  -  -  	
  123 D1:AF73 -  -  -  -  	
  124 D1:AF73 A1 -  -  -  	and c 
  125 D1:AF74 CD 4F AF D1 	call sdcomp_next_in_bitstream;incs bitstream
  126 D1:AF78 -  -  -  -  	;a holds data to return
  127 D1:AF78 -  -  -  -  	;call write_a_to_ram
  128 D1:AF78 37 -  -  -  	scf 
  129 D1:AF79 -  -  -  -  sdcomp_no_alpha_1 .equ $;Load a with 1 if no alpha
  130 D1:AF79 DA 7F AF D1 	jp c,sdcomp_no_alpha_1_skip
  131 D1:AF7D 3E 01 -  -  	ld a,1
  132 D1:AF7F -  -  -  -  sdcomp_no_alpha_1_skip:
  133 D1:AF7F -  -  -  -  	
  134 D1:AF7F -  -  -  -  	
  135 D1:AF7F 08 -  -  -  	ex af,af' ;';into shadow
  136 D1:AF80 3D -  -  -  	dec a 
  137 D1:AF81 -  -  -  -  	;call write_a_to_ram
  138 D1:AF81 C2 AD AF D1 	jp nz, sdcomp_end_of_line_skip
  139 D1:AF85 -  -  -  -  	
  140 D1:AF85 -  -  -  -  	;HAve read last bit in line  
  141 D1:AF85 -  -  -  -  	
  142 D1:AF85 -  -  -  -  	;ld a,$AC;Test
  143 D1:AF85 -  -  -  -  	;call write_a_to_ram;Test
  144 D1:AF85 -  -  -  -  	;Decrement lines remaining in sprite
  145 D1:AF85 -  -  -  -  sdcomp_lines_remaining .equ $ + 1
  146 D1:AF85 3E 00 -  -  	ld a,0
  147 D1:AF87 3D -  -  -  	dec a 
  148 D1:AF88 32 86 AF D1 	ld (sdcomp_lines_remaining),a
  149 D1:AF8C -  -  -  -  	;call write_a_to_ram
  150 D1:AF8C C2 96 AF D1 	jp nz,sdcomp_set_end_flag_skip
  151 D1:AF90 -  -  -  -  	;end of last line reached 
  152 D1:AF90 3E DA -  -  	ld a,%11011010;jp c
  153 D1:AF92 32 0C B2 D1 	ld (sdcomp_end_reached_flag) , a ;set end reached flag to indicate sprite is done decompressing TODO 
  154 D1:AF96 -  -  -  -  	;ld a,$E9
  155 D1:AF96 -  -  -  -  	;call write_a_to_ram;TEST 
  156 D1:AF96 -  -  -  -  sdcomp_set_end_flag_skip:
  157 D1:AF96 -  -  -  -  	
  158 D1:AF96 -  -  -  -  
  159 D1:AF96 -  -  -  -  	
  160 D1:AF96 3E D2 -  -  	ld a, %11010010 ;jp nc 
  161 D1:AF98 32 E7 B1 D1 	ld (sdcomp_end_of_line_gaplength),a
  162 D1:AF9C 32 57 AF D1 	ld (sdcomp_end_of_line_alp),a
  163 D1:AFA0 -  -  -  -  	;ld (sdcomp_write_loops_per_line_flag),a 
  164 D1:AFA0 37 -  -  -  	scf ;Set offset bit for next line
  165 D1:AFA1 -  -  -  -  sdcomp_offset_1 .equ $
  166 D1:AFA1 DA AB AF D1 	jp c,sdcomp_offset_1_skip
  167 D1:AFA5 3E D2 -  -  	ld a, %11010010 ;jp nc 
  168 D1:AFA7 32 65 AF D1 	ld (sdcomp_bit_offset),a
  169 D1:AFAB -  -  -  -  sdcomp_offset_1_skip:
  170 D1:AFAB -  -  -  -  	
  171 D1:AFAB -  -  -  -  sdcomp_sprite_width_2 .equ $+1
  172 D1:AFAB 3E 00 -  -  	ld a,0 ;Return sprite width to a'
  173 D1:AFAD -  -  -  -  	
  174 D1:AFAD -  -  -  -  	;call write_a_to_ram
  175 D1:AFAD -  -  -  -  	
  176 D1:AFAD -  -  -  -  sdcomp_end_of_line_skip:
  177 D1:AFAD 08 -  -  -  	ex af,af' ;' ;out
  178 D1:AFAE -  -  -  -  	
  179 D1:AFAE -  -  -  -  	;push af ;testing
  180 D1:AFAE -  -  -  -  	;ld a,$A0
  181 D1:AFAE -  -  -  -  	;call write_a_to_ram
  182 D1:AFAE -  -  -  -  	;pop af 
  183 D1:AFAE -  -  -  -  	;call write_a_to_ram
  184 D1:AFAE -  -  -  -  	
  185 D1:AFAE C9 -  -  -  	ret 
  186 D1:AFAF -  -  -  -  	
  187 D1:AFAF -  -  -  -  
  188 D1:AFAF -  -  -  -  
  189 D1:AFAF -  -  -  -  ;in shadow,returns a $FF,$0F,$F0,$00
  190 D1:AFAF -  -  -  -  sdcomp_get_next_alpha_pair:
  191 D1:AFAF -  -  -  -  	;ld a,$A1
  192 D1:AFAF -  -  -  -  	;call write_a_to_ram
  193 D1:AFAF -  -  -  -  	
  194 D1:AFAF -  -  -  -  	;ld a,c ;test
  195 D1:AFAF -  -  -  -  	;call write_a_to_ram 
  196 D1:AFAF -  -  -  -  	;ld a,(hl) ;test
  197 D1:AFAF -  -  -  -  	;call write_a_to_ram
  198 D1:AFAF -  -  -  -  	
  199 D1:AFAF 3E DA -  -  	ld a,%11011010;jp c 
  200 D1:AFB1 32 C7 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  201 D1:AFB5 -  -  -  -  	
  202 D1:AFB5 CD 54 AF D1 	call sdcomp_get_next_alpha
  203 D1:AFB9 B7 -  -  -  	or a 
  204 D1:AFBA CA C4 AF D1 	jp z,sdcomp_get_next_alpha_pair0
  205 D1:AFBE 3E F0 -  -  	ld a,$F0;FIRST BIT WAS 1
  206 D1:AFC0 -  -  -  -  	;call write_a_to_ram
  207 D1:AFC0 C3 D3 AF D1 	jp sdcomp_get_next_alpha_pair1
  208 D1:AFC4 -  -  -  -  sdcomp_get_next_alpha_pair0:
  209 D1:AFC4 3E 00 -  -  	ld a,0
  210 D1:AFC6 -  -  -  -  	
  211 D1:AFC6 37 -  -  -  	scf 
  212 D1:AFC7 -  -  -  -  sdcomp_end_vitrual_zero_read .equ $
  213 D1:AFC7 DA D3 AF D1 	jp c,sdcomp_get_next_alpha_pair1
  214 D1:AFCB F5 -  -  -  	push af 
  215 D1:AFCC -  -  -  -  	;This gets triggered when we have read a vitrual 0 (outside of line) as the first bit in an alpha pair 
  216 D1:AFCC -  -  -  -  	
  217 D1:AFCC 3E 3D -  -  	ld a,%00111101 ;dec a 
  218 D1:AFCE 32 EE B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a 
  219 D1:AFD2 -  -  -  -  	;We should subtract 1 from the next interline gap length whenever a virtual 00 is read.
  220 D1:AFD2 -  -  -  -  	;ld a,$A4
  221 D1:AFD2 -  -  -  -  	;call write_a_to_ram
  222 D1:AFD2 F1 -  -  -  	pop af 
  223 D1:AFD3 -  -  -  -  	
  224 D1:AFD3 -  -  -  -  sdcomp_get_next_alpha_pair1:
  225 D1:AFD3 -  -  -  -  
  226 D1:AFD3 -  -  -  -  	
  227 D1:AFD3 32 E9 AF D1 	ld (sdcomp_get_next_alpha_pair_or),a 
  228 D1:AFD7 -  -  -  -  	
  229 D1:AFD7 CD 54 AF D1 	call sdcomp_get_next_alpha
  230 D1:AFDB B7 -  -  -  	or a 
  231 D1:AFDC CA E6 AF D1 	jp z,sdcomp_get_next_alpha_pair2
  232 D1:AFE0 3E 0F -  -  	ld a,$0F;SECOND BIT WAS 1
  233 D1:AFE2 C3 E8 AF D1 	jp sdcomp_get_next_alpha_pair3
  234 D1:AFE6 -  -  -  -  sdcomp_get_next_alpha_pair2:
  235 D1:AFE6 3E 00 -  -  	ld a,0;SECOND BIT WAS 0
  236 D1:AFE8 -  -  -  -  sdcomp_get_next_alpha_pair3:	
  237 D1:AFE8 -  -  -  -  sdcomp_get_next_alpha_pair_or .equ $ + 1
  238 D1:AFE8 F6 00 -  -  	or 0;OR WITH FIRST BIT 
  239 D1:AFEA -  -  -  -  	
  240 D1:AFEA C9 -  -  -  	ret 
  241 D1:AFEB -  -  -  -  	
  242 D1:AFEB -  -  -  -  ;COLOR HELPER FUNCS =================================================================================================
  243 D1:AFEB -  -  -  -  
  244 D1:AFEB -  -  -  -  ;not in shadow, returns a = color0000
  245 D1:AFEB -  -  -  -  sdcomp_get_next_color_leading_nibble:
  246 D1:AFEB CD F4 AF D1 	call sdcomp_get_next_color
  247 D1:AFEF 0F -  -  -  	rrca 
  248 D1:AFF0 0F -  -  -  	rrca 
  249 D1:AFF1 0F -  -  -  	rrca 
  250 D1:AFF2 0F -  -  -  	rrca
  251 D1:AFF3 C9 -  -  -  	ret 
  252 D1:AFF4 -  -  -  -  
  253 D1:AFF4 -  -  -  -  
  254 D1:AFF4 -  -  -  -  
  255 D1:AFF4 -  -  -  -  ;bit orders
  256 D1:AFF4 -  -  -  -  ;	noflip   flip 
  257 D1:AFF4 -  -  -  -  ;4bpp 3210 	 0123
  258 D1:AFF4 -  -  -  -  ;3bpp 210	 012
  259 D1:AFF4 -  -  -  -  ;2bpp 10	 01
  260 D1:AFF4 -  -  -  -  ;1bpp 0		 0
  261 D1:AFF4 -  -  -  -  
  262 D1:AFF4 -  -  -  -  ;not in shadow, returns a = 0000color
  263 D1:AFF4 -  -  -  -  sdcomp_get_next_color:
  264 D1:AFF4 D5 -  -  -  	push de ;save data write location
  265 D1:AFF5 1E 00 -  -  	ld e,0;E will store the final color data
  266 D1:AFF7 -  -  -  -  	
  267 D1:AFF7 37 -  -  -  	scf
  268 D1:AFF8 -  -  -  -  sdcomp_0bpc .equ $ ;if sprite is 0bpc, skip reading bitstream, set to jp c 
  269 D1:AFF8 D2 42 B0 D1 	jp nc,sdcomp_get_color_from_index
  270 D1:AFFC -  -  -  -  	
  271 D1:AFFC -  -  -  -  	;ld a,$C1
  272 D1:AFFC -  -  -  -  	;call write_a_to_ram
  273 D1:AFFC -  -  -  -  	
  274 D1:AFFC 7E -  -  -  	ld a,(hl) ;read next bit 
  275 D1:AFFD -  -  -  -  	;call write_a_to_ram ;TEST
  276 D1:AFFD A1 -  -  -  	and c
  277 D1:AFFE -  -  -  -  	;call write_a_to_ram ;TEST
  278 D1:AFFE CD 4F AF D1 	call sdcomp_next_in_bitstream  ;inc bitstream 
  279 D1:B002 B7 -  -  -  	or a
  280 D1:B003 CA 09 B0 D1 	jp z,sdcomp_get_color_data_set_skip_1
  281 D1:B007 -  -  -  -  sdcomp_color_bit_0 .equ $ + 1 
  282 D1:B007 CB CB -  -  	set 1,e  ;set bit of e reg to color, 0 for flip, else depends on bpc 
  283 D1:B009 -  -  -  -  sdcomp_get_color_data_set_skip_1:
  284 D1:B009 -  -  -  -  	
  285 D1:B009 37 -  -  -  	scf
  286 D1:B00A -  -  -  -  sdcomp_1bpc .equ $
  287 D1:B00A D2 42 B0 D1 	jp nc,sdcomp_get_color_from_index ;if 1bpc jump to end 
  288 D1:B00E -  -  -  -  
  289 D1:B00E -  -  -  -  	;ld a,$C2
  290 D1:B00E -  -  -  -  	;call write_a_to_ram
  291 D1:B00E -  -  -  -  	
  292 D1:B00E 7E -  -  -  	ld a,(hl)
  293 D1:B00F -  -  -  -  	;call write_a_to_ram ;TEST
  294 D1:B00F A1 -  -  -  	and c 
  295 D1:B010 -  -  -  -  	;call write_a_to_ram ;TEST
  296 D1:B010 CD 4F AF D1 	call sdcomp_next_in_bitstream
  297 D1:B014 B7 -  -  -  	or a
  298 D1:B015 CA 1B B0 D1 	jp z,sdcomp_get_color_data_set_skip_2
  299 D1:B019 -  -  -  -  sdcomp_color_bit_1 .equ $ + 1 	
  300 D1:B019 CB C3 -  -  	set 0,e ;store next bit of color data in e  
  301 D1:B01B -  -  -  -  sdcomp_get_color_data_set_skip_2:
  302 D1:B01B -  -  -  -  	
  303 D1:B01B 37 -  -  -  	scf
  304 D1:B01C -  -  -  -  sdcomp_2bpc .equ $ ;if 2bpc jump to end
  305 D1:B01C D2 42 B0 D1 	jp nc,sdcomp_get_color_from_index
  306 D1:B020 -  -  -  -  	
  307 D1:B020 7E -  -  -  	ld a,(hl)
  308 D1:B021 A1 -  -  -  	and c 
  309 D1:B022 CD 4F AF D1 	call sdcomp_next_in_bitstream
  310 D1:B026 B7 -  -  -  	or a
  311 D1:B027 CA 2D B0 D1 	jp z,sdcomp_get_color_data_set_skip_3
  312 D1:B02B -  -  -  -  sdcomp_color_bit_2 .equ $ + 1 
  313 D1:B02B CB D3 -  -  	set 2,e 
  314 D1:B02D -  -  -  -  sdcomp_get_color_data_set_skip_3:
  315 D1:B02D -  -  -  -  	
  316 D1:B02D 37 -  -  -  	scf
  317 D1:B02E -  -  -  -  sdcomp_3bpc .equ $
  318 D1:B02E D2 42 B0 D1 	jp nc,sdcomp_get_color_from_index	
  319 D1:B032 -  -  -  -  
  320 D1:B032 -  -  -  -  ;4bpp, interpret as color data, not indexed	
  321 D1:B032 7E -  -  -  	ld a,(hl)
  322 D1:B033 A1 -  -  -  	and c 
  323 D1:B034 CD 4F AF D1 	call sdcomp_next_in_bitstream
  324 D1:B038 B7 -  -  -  	or a
  325 D1:B039 CA 3F B0 D1 	jp z,sdcomp_get_color_data_set_skip_4
  326 D1:B03D -  -  -  -  sdcomp_color_bit_3 .equ $ + 1 
  327 D1:B03D CB DB -  -  	set 3,e 
  328 D1:B03F -  -  -  -  sdcomp_get_color_data_set_skip_4:
  329 D1:B03F -  -  -  -  ;4bpp, interpret as color data, not indexed
  330 D1:B03F 7B -  -  -  	ld a,e 
  331 D1:B040 D1 -  -  -  	pop de 
  332 D1:B041 C9 -  -  -  	ret 
  333 D1:B042 -  -  -  -  
  334 D1:B042 -  -  -  -  sdcomp_get_color_from_index: ; e holds index of color data, 1-8
  335 D1:B042 -  -  -  -  	
  336 D1:B042 -  -  -  -  	;ld a,$DD
  337 D1:B042 -  -  -  -  	;call write_a_to_ram
  338 D1:B042 -  -  -  -  	;ld a,e 
  339 D1:B042 -  -  -  -  	;call write_a_to_ram
  340 D1:B042 -  -  -  -  	
  341 D1:B042 -  -  -  -  	
  342 D1:B042 CB 53 -  -  	bit 2,e 
  343 D1:B044 CA 66 B0 D1 	jp z, sdcomp_get_color_from_index_2l
  344 D1:B048 -  -  -  -  	
  345 D1:B048 -  -  -  -  	;Bit 2 = 1 
  346 D1:B048 CB 4B -  -  	bit 1,e 
  347 D1:B04A CA 5A B0 D1 	jp z,sdcomp_get_color_from_index_2h1l
  348 D1:B04E -  -  -  -  
  349 D1:B04E -  -  -  -  	;bit 2 = 1 1 = 1
  350 D1:B04E -  -  -  -  sdcomp_indexed_color_data_4 .equ $ + 1	
  351 D1:B04E 3E 00 -  -  	ld a,0
  352 D1:B050 CB 43 -  -  	bit 0,e 
  353 D1:B052 CA 88 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  354 D1:B056 C3 84 B0 D1 	jp sdcomp_get_color_from_index_lsn
  355 D1:B05A -  -  -  -  
  356 D1:B05A -  -  -  -  sdcomp_get_color_from_index_2h1l:
  357 D1:B05A -  -  -  -  	;2 = 1 1 = 0 
  358 D1:B05A -  -  -  -  sdcomp_indexed_color_data_3 .equ $ + 1	
  359 D1:B05A 3E 00 -  -  	ld a,0
  360 D1:B05C CB 43 -  -  	bit 0,e 
  361 D1:B05E CA 88 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  362 D1:B062 C3 84 B0 D1 	jp sdcomp_get_color_from_index_lsn
  363 D1:B066 -  -  -  -  	
  364 D1:B066 -  -  -  -  sdcomp_get_color_from_index_2l:
  365 D1:B066 -  -  -  -  	;bit 2 was 0 
  366 D1:B066 CB 4B -  -  	bit 1,e 
  367 D1:B068 CA 78 B0 D1 	jp z,sdcomp_get_color_from_index_2l1l
  368 D1:B06C -  -  -  -  	
  369 D1:B06C -  -  -  -  	;bit 2 = 0 1 = 1
  370 D1:B06C -  -  -  -  sdcomp_indexed_color_data_2 .equ $ + 1	
  371 D1:B06C 3E 00 -  -  	ld a,0
  372 D1:B06E CB 43 -  -  	bit 0,e 
  373 D1:B070 CA 88 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  374 D1:B074 C3 84 B0 D1 	jp sdcomp_get_color_from_index_lsn
  375 D1:B078 -  -  -  -  	
  376 D1:B078 -  -  -  -  sdcomp_get_color_from_index_2l1l:
  377 D1:B078 -  -  -  -  	;bit 2 =0  1 = 0
  378 D1:B078 -  -  -  -  sdcomp_indexed_color_data_1 .equ $ + 1	
  379 D1:B078 3E 00 -  -  	ld a,0
  380 D1:B07A -  -  -  -  	
  381 D1:B07A CB 43 -  -  	bit 0,e 
  382 D1:B07C CA 88 B0 D1 	jp z,sdcomp_get_color_from_index_msn
  383 D1:B080 C3 84 B0 D1 	jp sdcomp_get_color_from_index_lsn
  384 D1:B084 -  -  -  -  sdcomp_get_color_from_index_lsn:
  385 D1:B084 E6 0F -  -  	and %00001111;and with least significant nibble 
  386 D1:B086 D1 -  -  -  	pop de 
  387 D1:B087 -  -  -  -  	
  388 D1:B087 -  -  -  -  	;push af 
  389 D1:B087 -  -  -  -  	;ld a,$C0
  390 D1:B087 -  -  -  -  	;call write_a_to_ram
  391 D1:B087 -  -  -  -  	;pop af 
  392 D1:B087 -  -  -  -  	;call write_a_to_ram
  393 D1:B087 -  -  -  -  	
  394 D1:B087 C9 -  -  -  	ret 
  395 D1:B088 -  -  -  -  	
  396 D1:B088 -  -  -  -  sdcomp_get_color_from_index_msn:
  397 D1:B088 E6 F0 -  -  	and %11110000;and with most significant nibble 
  398 D1:B08A 0F -  -  -  	rrca 
  399 D1:B08B 0F -  -  -  	rrca 
  400 D1:B08C 0F -  -  -  	rrca 
  401 D1:B08D 0F -  -  -  	rrca 
  402 D1:B08E D1 -  -  -  	pop de 
  403 D1:B08F -  -  -  -  	
  404 D1:B08F -  -  -  -  	;push af 
  405 D1:B08F -  -  -  -  	;ld a,$C0
  406 D1:B08F -  -  -  -  	;call write_a_to_ram
  407 D1:B08F -  -  -  -  	;pop af 
  408 D1:B08F -  -  -  -  	;call write_a_to_ram
  409 D1:B08F -  -  -  -  	
  410 D1:B08F C9 -  -  -  	ret 
  411 D1:B090 -  -  -  -  
  412 D1:B090 -  -  -  -  
  413 D1:B090 -  -  -  -  
  414 D1:B090 -  -  -  -  ;function for traversing sprite data for reversed sprites.
  415 D1:B090 -  -  -  -  ;Reads forward through alpha and color data to end of line, so that it can then be read backwards 
  416 D1:B090 -  -  -  -  ;in shadow ,destroys a
  417 D1:B090 -  -  -  -  sdcomp_traverse_line_data:
  418 D1:B090 D9 -  -  -  	exx ;OUT 
  419 D1:B091 -  -  -  -  sdcomp_color_data_line_end_byte .equ $ + 1
  420 D1:B091 21 00 00 00 	ld hl,0 ;load end of previous color data line 
  421 D1:B095 -  -  -  -  sdcomp_color_data_line_end_mask .equ $ + 1
  422 D1:B095 0E 00 -  -  	ld c,0 ;load end of previous color data line
  423 D1:B097 D9 -  -  -  	exx;toshadow 
  424 D1:B098 -  -  -  -  	
  425 D1:B098 -  -  -  -  	;load end of previous alpha data line 
  426 D1:B098 -  -  -  -  sdcomp_alpha_data_line_end_byte .equ $ + 1
  427 D1:B098 21 00 00 00 	ld hl,0
  428 D1:B09C -  -  -  -  sdcomp_alpha_data_line_end_mask .equ $ + 1
  429 D1:B09C 0E 00 -  -  	ld c,0
  430 D1:B09E -  -  -  -  sdcomp_traverse_initial:
  431 D1:B09E D5 -  -  -  	push de
  432 D1:B09F -  -  -  -  sdcomp_sprite_width .equ $ + 1
  433 D1:B09F 1E 00 -  -  	ld e, 0
  434 D1:B0A1 -  -  -  -  	;e holds sprite width 
  435 D1:B0A1 -  -  -  -  	
  436 D1:B0A1 -  -  -  -  	;Read forward through alpha data and inc color pointer if alpha is 1 
  437 D1:B0A1 -  -  -  -  sdcomp_traverse_line_data_loop:
  438 D1:B0A1 CB 09 -  -  	rrc c 
  439 D1:B0A3 D2 A8 B0 D1 	jp nc,sdcomp_traverse_line_data_alpha_inc_skip ;if not reached end of byte, skip
  440 D1:B0A7 23 -  -  -  	inc hl ;have reached end of alpha byte, inc hl 
  441 D1:B0A8 -  -  -  -  sdcomp_traverse_line_data_alpha_inc_skip:
  442 D1:B0A8 7E -  -  -  	ld a,(hl)
  443 D1:B0A9 A1 -  -  -  	and c ;read alpha data 
  444 D1:B0AA -  -  -  -  sdcomp_no_alpha_3 .equ $ ;jp c for no alpha sprites to always inc color 
  445 D1:B0AA CA C0 B0 D1 	jp z,sdcomp_traverse_line_data_color_skip;if no alpha skip incrementing color. 
  446 D1:B0AE D9 -  -  -  	exx;out of shadow 
  447 D1:B0AF -  -  -  -  
  448 D1:B0AF CB 09 -  -  	rrc c ;rotate mask
  449 D1:B0B1 -  -  -  -  sdcomp_traverse_2bpp .equ $ + 1
  450 D1:B0B1 CB 0F -  -  	rrc a ;replace with rrc c for 2bpc (not nop because rrc c is 2 byte operation)
  451 D1:B0B3 -  -  -  -  sdcomp_traverse_3bpp .equ $ + 1
  452 D1:B0B3 CB 0F -  -  	rrc a;rrc c for 3bpc
  453 D1:B0B5 -  -  -  -  sdcomp_traverse_4bpp .equ $ + 1
  454 D1:B0B5 CB 0F -  -  	rrc a;rrc c for 4 bpc 
  455 D1:B0B7 -  -  -  -  	
  456 D1:B0B7 -  -  -  -  	;check if end of byte was reached during rotations
  457 D1:B0B7 79 -  -  -  	ld a,c
  458 D1:B0B8 -  -  -  -  sdcomp_traverse_bit_check .equ $ + 1
  459 D1:B0B8 E6 F0 -  -  	and %11110000 ; 4bpc = 11110000 3bpc = 11100000, 2bpc 11000000 1bpc 10000000 TODO 
  460 D1:B0BA CA BF B0 D1 	jp z,sdcomp_traverse_line_data_color_inc_skip
  461 D1:B0BE 23 -  -  -  	inc hl ;inc hl if end of byte was reached 
  462 D1:B0BF -  -  -  -  sdcomp_traverse_line_data_color_inc_skip:
  463 D1:B0BF D9 -  -  -  	exx ;toshadow
  464 D1:B0C0 -  -  -  -  sdcomp_traverse_line_data_color_skip:
  465 D1:B0C0 1D -  -  -  	dec e ;e holds sprite width 
  466 D1:B0C1 C2 A1 B0 D1 	jp nz,sdcomp_traverse_line_data_loop ;loop until end of line reached 
  467 D1:B0C5 D1 -  -  -  	pop de  ;back to write location 
  468 D1:B0C6 -  -  -  -  	;set new end of line pointers 
  469 D1:B0C6 -  -  -  -  	
  470 D1:B0C6 -  -  -  -  	;ld a,$BB 
  471 D1:B0C6 -  -  -  -  	;call write_a_to_ram 
  472 D1:B0C6 -  -  -  -  	;ld a,(hl) 
  473 D1:B0C6 -  -  -  -  	;call write_a_to_ram 
  474 D1:B0C6 -  -  -  -  	;ld a,c 
  475 D1:B0C6 -  -  -  -  	;call write_a_to_ram 
  476 D1:B0C6 -  -  -  -  	
  477 D1:B0C6 -  -  -  -  	
  478 D1:B0C6 22 99 B0 D1 	ld (sdcomp_alpha_data_line_end_byte),hl
  479 D1:B0CA 79 -  -  -  	ld a,c
  480 D1:B0CB 32 9D B0 D1 	ld (sdcomp_alpha_data_line_end_mask),a
  481 D1:B0CF D9 -  -  -  	exx ;out
  482 D1:B0D0 22 92 B0 D1 	ld (sdcomp_color_data_line_end_byte),hl
  483 D1:B0D4 79 -  -  -  	ld a,c 
  484 D1:B0D5 32 96 B0 D1 	ld (sdcomp_color_data_line_end_mask),a
  485 D1:B0D9 -  -  -  -  	
  486 D1:B0D9 -  -  -  -  	;ld a,(hl) 
  487 D1:B0D9 -  -  -  -  	;call write_a_to_ram 
  488 D1:B0D9 -  -  -  -  	;ld a,c 
  489 D1:B0D9 -  -  -  -  	;call write_a_to_ram 
  490 D1:B0D9 -  -  -  -  	
  491 D1:B0D9 D9 -  -  -  	exx;to shadow 
  492 D1:B0DA C9 -  -  -  	ret
  493 D1:B0DB -  -  -  -  
  494 D1:B0DB -  -  -  -  
  495 D1:B0DB -  -  -  -  
  496 D1:B0DB -  -  -  -  
  497 D1:B0DB -  -  -  -  
  498 D1:B0DB -  -  -  -  ;hl/c is color data, de is ldir write pos, b' is ldir length, not in shadow 
  499 D1:B0DB -  -  -  -  sdcomp_write_ldir_data_loop:
  500 D1:B0DB CD F4 AF D1 	call sdcomp_get_next_color
  501 D1:B0DF 47 -  -  -  	ld b,a;first pixel
  502 D1:B0E0 CD EB AF D1 	call sdcomp_get_next_color_leading_nibble
  503 D1:B0E4 B0 -  -  -  	or b
  504 D1:B0E5 -  -  -  -  	
  505 D1:B0E5 -  -  -  -  	
  506 D1:B0E5 12 -  -  -  	ld (de),a;write color data
  507 D1:B0E6 13 -  -  -  	inc de
  508 D1:B0E7 D9 -  -  -  	exx;to shadow
  509 D1:B0E8 05 -  -  -  	dec b;ldir length counter
  510 D1:B0E9 D9 -  -  -  	exx
  511 D1:B0EA C2 DB B0 D1 	jp nz,sdcomp_write_ldir_data_loop
  512 D1:B0EE C9 -  -  -  	ret
  513 D1:B0EF -  -  -  -  	
  514 D1:B0EF -  -  -  -  
  515 D1:B0EF -  -  -  -  ;Not in shadow, a holds alpha data pair, writes color and mask data to output 
  516 D1:B0EF -  -  -  -  sdcomp_write_leading_or_end_pixels:
  517 D1:B0EF D5 -  -  -  	push de ;output location	
  518 D1:B0F0 47 -  -  -  	ld b,a;save for later
  519 D1:B0F1 CB 67 -  -  	bit 4,a ;check if first pixel has color 
  520 D1:B0F3 3E 00 -  -  	ld a,0
  521 D1:B0F5 16 FF -  -  	ld d,%11111111;pixel data mask assuming no colors 
  522 D1:B0F7 CA 01 B1 D1 	jp z,sdcomp_leading_pixel_first_skip
  523 D1:B0FB -  -  -  -  	;has first color
  524 D1:B0FB 16 F0 -  -  	ld d,%11110000;save second pixel of bg 
  525 D1:B0FD CD F4 AF D1 	call sdcomp_get_next_color
  526 D1:B101 -  -  -  -  sdcomp_leading_pixel_first_skip:
  527 D1:B101 -  -  -  -  	;a is either $00 or $0color1
  528 D1:B101 -  -  -  -  	
  529 D1:B101 1E FF -  -  	ld e,%11111111;assuming no colors
  530 D1:B103 -  -  -  -  	
  531 D1:B103 CB 40 -  -  	bit 0,b;check second pixel alpha
  532 D1:B105 47 -  -  -  	ld b,a;save for later 
  533 D1:B106 3E 00 -  -  	ld a,0
  534 D1:B108 CA 12 B1 D1 	jp z,sdcomp_leading_pixel_second_skip;
  535 D1:B10C -  -  -  -  	;has second color 
  536 D1:B10C CD EB AF D1 	call sdcomp_get_next_color_leading_nibble
  537 D1:B110 -  -  -  -  	;a = color2 0 
  538 D1:B110 1E 0F -  -  	ld e,%00001111;save first pixel of bg
  539 D1:B112 -  -  -  -  	
  540 D1:B112 -  -  -  -  sdcomp_leading_pixel_second_skip:
  541 D1:B112 -  -  -  -  	;a is either 00 or c2 0 
  542 D1:B112 -  -  -  -  	;b is either 00 or 0 c1 
  543 D1:B112 B0 -  -  -  	or b 
  544 D1:B113 47 -  -  -  	ld b,a;final color data
  545 D1:B114 7A -  -  -  	ld a,d 
  546 D1:B115 A3 -  -  -  	and e ;final mask data 
  547 D1:B116 -  -  -  -  	
  548 D1:B116 D1 -  -  -  	pop de;return to pointer 
  549 D1:B117 -  -  -  -  	
  550 D1:B117 12 -  -  -  	ld (de),a;write mask data 
  551 D1:B118 13 -  -  -  	inc de 
  552 D1:B119 78 -  -  -  	ld a,b;color data 
  553 D1:B11A 12 -  -  -  	ld (de),a;write color data 
  554 D1:B11B -  -  -  -  	
  555 D1:B11B -  -  -  -  	
  556 D1:B11B -  -  -  -  	
  557 D1:B11B -  -  -  -  	;call write_a_to_ram
  558 D1:B11B -  -  -  -  	
  559 D1:B11B 13 -  -  -  	inc de 
  560 D1:B11C C9 -  -  -  	ret 
  561 D1:B11D -  -  -  -  
  562 D1:B11D -  -  -  -  
  563 D1:B11D -  -  -  -  
  564 D1:B11D -  -  -  -  ;ENTRY POINT 
  565 D1:B11D -  -  -  -  
  566 D1:B11D -  -  -  -  
  567 D1:B11D -  -  -  -  ;hl = sprite data start, de = main data decompress location
  568 D1:B11D -  -  -  -  sprite_decompress:
  569 D1:B11D -  -  -  -  
  570 D1:B11D -  -  -  -  
  571 D1:B11D -  -  -  -  	;SETUP ===========================================================================================================
  572 D1:B11D -  -  -  -  
  573 D1:B11D -  -  -  -  	;SET UP BPC MODE AND ALPHA/NOALPHA
  574 D1:B11D -  -  -  -  
  575 D1:B11D -  -  -  -  	;HL pointing to flags registers
  576 D1:B11D -  -  -  -  	;TODO set up bpc and alpha modes, Sprite type and offset. Write conditional jumps where needed
  577 D1:B11D -  -  -  -  	;set bpc mode 
  578 D1:B11D CB 7E -  -  	bit 7,(hl)
  579 D1:B11F C4 F3 B3 D1 	call nz,sdcomp_set_4bpc
  580 D1:B123 CB 76 -  -  	bit 6,(hl)
  581 D1:B125 C4 90 B3 D1 	call nz,sdcomp_set_3bpc 
  582 D1:B129 CB 6E -  -  	bit 5,(hl)
  583 D1:B12B C4 3D B3 D1 	call nz,sdcomp_set_2bpc 
  584 D1:B12F CB 66 -  -  	bit 4,(hl)
  585 D1:B131 C4 08 B3 D1 	call nz,sdcomp_set_1bpc 
  586 D1:B135 CB 5E -  -  	bit 3,(hl)
  587 D1:B137 C4 ED B2 D1 	call nz,sdcomp_set_0bpc 
  588 D1:B13B CB 56 -  -  	bit 2,(hl)
  589 D1:B13D C4 5A B4 D1 	call nz,sdcomp_set_noalpha
  590 D1:B141 CB 56 -  -  	bit 2,(hl)
  591 D1:B143 CC 6B B4 D1 	call z,sdcomp_reset_noalpha
  592 D1:B147 -  -  -  -  	
  593 D1:B147 -  -  -  -  	
  594 D1:B147 3E 00 -  -  	ld a,0
  595 D1:B149 32 75 B2 D1 	ld (sdcomp_loops_per_line_counter),a ;reset loops counter
  596 D1:B14D 3E DA -  -  	ld a,%11011010;jp c 
  597 D1:B14F 32 C7 AF D1 	ld(sdcomp_end_vitrual_zero_read),a ;reset vitrual zero read flag
  598 D1:B153 -  -  -  -  	;write height or width(BG) data to decompressed sprite 
  599 D1:B153 -  -  -  -  	
  600 D1:B153 23 -  -  -  	inc hl ;hl points to width in px 
  601 D1:B154 -  -  -  -  	
  602 D1:B154 -  -  -  -  	
  603 D1:B154 7E -  -  -  	ld a,(hl) 
  604 D1:B155 32 A0 B0 D1 	ld (sdcomp_sprite_width),a ;TODO set width in required locations
  605 D1:B159 32 AC AF D1 	ld (sdcomp_sprite_width_2),a
  606 D1:B15D 47 -  -  -  	ld b,a;width
  607 D1:B15E 08 -  -  -  	ex af,af' ;'
  608 D1:B15F 78 -  -  -  	ld a,b;Number of alpha bits remaining in row
  609 D1:B160 08 -  -  -  	ex af,af' ;' 
  610 D1:B161 -  -  -  -  
  611 D1:B161 -  -  -  -  
  612 D1:B161 -  -  -  -  sdcomp_offset_2 .equ $ 
  613 D1:B161 00 -  -  -  	nop ;replace with inc b for offset 
  614 D1:B162 -  -  -  -  
  615 D1:B162 -  -  -  -  	;Calculate number of bytes to skip between rows for gap length  
  616 D1:B162 04 -  -  -  	inc b ;round up on odd sprites
  617 D1:B163 CB 38 -  -  	srl b;divide by 2
  618 D1:B165 -  -  -  -  	
  619 D1:B165 -  -  -  -  	
  620 D1:B165 3E A0 -  -  	ld a,160
  621 D1:B167 90 -  -  -  	sub b ;a holds 160 - (width in pairs)
  622 D1:B168 32 EC B1 D1 	ld (sdcomp_gap_btwn_rows),a 
  623 D1:B16C -  -  -  -  	
  624 D1:B16C -  -  -  -  	;call write_a_to_ram
  625 D1:B16C -  -  -  -  	;ld a,$BE
  626 D1:B16C -  -  -  -  	;call write_a_to_ram
  627 D1:B16C -  -  -  -  	;ld a,b 
  628 D1:B16C -  -  -  -  	;call write_a_to_ram
  629 D1:B16C -  -  -  -  	
  630 D1:B16C -  -  -  -  	
  631 D1:B16C 7E -  -  -  	ld a,(hl);load width again
  632 D1:B16D -  -  -  -  	
  633 D1:B16D 47 -  -  -  	ld b,a 
  634 D1:B16E -  -  -  -  	
  635 D1:B16E -  -  -  -  
  636 D1:B16E 23 -  -  -  	inc hl ;hl points to height 
  637 D1:B16F 7E -  -  -  	ld a,(hl);height
  638 D1:B170 32 86 AF D1 	ld (sdcomp_lines_remaining),a ;write height to lines remaining counter
  639 D1:B174 -  -  -  -  	
  640 D1:B174 -  -  -  -  	
  641 D1:B174 -  -  -  -  
  642 D1:B174 12 -  -  -  	ld (de), a ;write height to first byte of sprite data 
  643 D1:B175 13 -  -  -  	inc de 
  644 D1:B176 -  -  -  -  	
  645 D1:B176 23 -  -  -  	inc hl ;HL points to start of alpha data 
  646 D1:B177 -  -  -  -  
  647 D1:B177 E5 -  -  -  	push hl ;Save alpha data 
  648 D1:B178 -  -  -  -  	
  649 D1:B178 -  -  -  -  	
  650 D1:B178 -  -  -  -  	;Need to find start of color data
  651 D1:B178 -  -  -  -  	;at this point a = height, b = width 
  652 D1:B178 -  -  -  -  	
  653 D1:B178 37 -  -  -  	scf
  654 D1:B179 -  -  -  -  	
  655 D1:B179 -  -  -  -  sdcomp_no_alpha_2 .equ $
  656 D1:B179 D2 92 B1 D1 	jp nc,sdcomp_no_alpha_2_skip ; if no alpha skip this part
  657 D1:B17D -  -  -  -  	
  658 D1:B17D -  -  -  -  	;need to find number of pixels, div by 8 and skip that many bytes
  659 D1:B17D -  -  -  -  	
  660 D1:B17D E5 -  -  -  	push hl
  661 D1:B17E 67 -  -  -  	ld h,a;height
  662 D1:B17F 68 -  -  -  	ld l,b;width
  663 D1:B180 ED 6C -  -  	mlt hl;number of pixels
  664 D1:B182 -  -  -  -  	;rounds up to nearest multiple of 8
  665 D1:B182 2B -  -  -  	dec hl
  666 D1:B183 CB 3C -  -  	srl h
  667 D1:B185 CB 1D -  -  	rr l
  668 D1:B187 CB 3C -  -  	srl h
  669 D1:B189 CB 1D -  -  	rr l 
  670 D1:B18B CB 3C -  -  	srl h 
  671 D1:B18D CB 1D -  -  	rr l 
  672 D1:B18F 23 -  -  -  	inc hl 
  673 D1:B190 C1 -  -  -  	pop bc ;initial hl location
  674 D1:B191 -  -  -  -  	;add number of bytes to skip 
  675 D1:B191 09 -  -  -  	add hl,bc ;HL points to start of color data 
  676 D1:B192 -  -  -  -  	
  677 D1:B192 -  -  -  -  	
  678 D1:B192 -  -  -  -  	
  679 D1:B192 -  -  -  -  sdcomp_no_alpha_2_skip:
  680 D1:B192 -  -  -  -  
  681 D1:B192 -  -  -  -  	
  682 D1:B192 -  -  -  -  	;HL POINTING TO COLOR PALETTE DATA
  683 D1:B192 -  -  -  -  
  684 D1:B192 -  -  -  -  	
  685 D1:B192 47 -  -  -  	ld b,a ;save for after
  686 D1:B193 -  -  -  -  	;GET LOCAL PALETTE DATA
  687 D1:B193 -  -  -  -  	
  688 D1:B193 37 -  -  -  	scf 
  689 D1:B194 -  -  -  -  sdcomp_1bpc_1 .equ $ 
  690 D1:B194 D2 9E B1 D1 	jp nc,sdcomp_1bpc_1_skip ;skip if not 1bpc or 2bpc or 3bpc
  691 D1:B198 -  -  -  -  	
  692 D1:B198 7E -  -  -  	ld a,(hl);color data 	
  693 D1:B199 32 79 B0 D1 	ld (sdcomp_indexed_color_data_1),a 
  694 D1:B19D 23 -  -  -  	inc hl 
  695 D1:B19E -  -  -  -  	
  696 D1:B19E -  -  -  -  sdcomp_1bpc_1_skip:	
  697 D1:B19E -  -  -  -  
  698 D1:B19E -  -  -  -  
  699 D1:B19E 37 -  -  -  	scf 
  700 D1:B19F -  -  -  -  sdcomp_2bpc_1 .equ $ 
  701 D1:B19F D2 A9 B1 D1 	jp nc,sdcomp_2bpc_1_skip ;skip if not 2bpc or 3bpc
  702 D1:B1A3 -  -  -  -  	
  703 D1:B1A3 7E -  -  -  	ld a,(hl);color data 
  704 D1:B1A4 32 6D B0 D1 	ld (sdcomp_indexed_color_data_2),a 
  705 D1:B1A8 23 -  -  -  	inc hl 
  706 D1:B1A9 -  -  -  -  	
  707 D1:B1A9 -  -  -  -  sdcomp_2bpc_1_skip:	
  708 D1:B1A9 -  -  -  -  
  709 D1:B1A9 -  -  -  -  
  710 D1:B1A9 37 -  -  -  	scf 
  711 D1:B1AA -  -  -  -  sdcomp_3bpc_1 .equ $ 
  712 D1:B1AA DA BA B1 D1 	jp c,sdcomp_3bpc_1_skip ;skip if not 3bpc
  713 D1:B1AE -  -  -  -  	
  714 D1:B1AE 7E -  -  -  	ld a,(hl);color data 
  715 D1:B1AF 32 5B B0 D1 	ld (sdcomp_indexed_color_data_3),a 
  716 D1:B1B3 23 -  -  -  	inc hl 
  717 D1:B1B4 7E -  -  -  	ld a,(hl);color data 
  718 D1:B1B5 32 4F B0 D1 	ld (sdcomp_indexed_color_data_4),a 
  719 D1:B1B9 23 -  -  -  	inc hl 
  720 D1:B1BA -  -  -  -  	
  721 D1:B1BA -  -  -  -  sdcomp_3bpc_1_skip:	
  722 D1:B1BA -  -  -  -  
  723 D1:B1BA -  -  -  -  	
  724 D1:B1BA D5 -  -  -  	push de ;loops/line data location
  725 D1:B1BB EB -  -  -  	ex de,hl
  726 D1:B1BC 78 -  -  -  	ld a,b
  727 D1:B1BD 01 00 00 00 	ld bc,0
  728 D1:B1C1 4F -  -  -  	ld c,a;height 
  729 D1:B1C2 09 -  -  -  	add hl,bc
  730 D1:B1C3 EB -  -  -  	ex de,hl;de points to data write location
  731 D1:B1C4 -  -  -  -  	
  732 D1:B1C4 -  -  -  -  	
  733 D1:B1C4 D9 -  -  -  	exx;in to shadow
  734 D1:B1C5 D1 -  -  -  	pop de 
  735 D1:B1C6 E1 -  -  -  	pop hl ;alpha data stored from earlier
  736 D1:B1C7 0E 80 -  -  	ld c,%10000000;alpha mask
  737 D1:B1C9 D9 -  -  -  	exx;out 
  738 D1:B1CA 0E 80 -  -  	ld c,%10000000;color mask
  739 D1:B1CC -  -  -  -  	
  740 D1:B1CC -  -  -  -  	;HL now points to pixel color data 
  741 D1:B1CC -  -  -  -  	;HL' points to pixel alpha data 
  742 D1:B1CC -  -  -  -  	;C holds color mask
  743 D1:B1CC -  -  -  -  	;C' holds alpha mask
  744 D1:B1CC -  -  -  -  	;DE' holds loops/line output data location
  745 D1:B1CC -  -  -  -  	;DE holds main data output location
  746 D1:B1CC -  -  -  -  	;A holds height
  747 D1:B1CC -  -  -  -  	;A' holds bits remaining in row
  748 D1:B1CC -  -  -  -  
  749 D1:B1CC -  -  -  -  
  750 D1:B1CC 37 -  -  -  	scf 
  751 D1:B1CD -  -  -  -  sdcomp_flip_setup .equ $
  752 D1:B1CD DA DD B1 D1 	jp c,sdcomp_find_gap_length;continue if no flip
  753 D1:B1D1 -  -  -  -  
  754 D1:B1D1 -  -  -  -  	
  755 D1:B1D1 2B -  -  -  	dec hl;dec color pointer
  756 D1:B1D2 0E 01 -  -  	ld c, %00000001
  757 D1:B1D4 D9 -  -  -  	exx;to shadow 
  758 D1:B1D5 2B -  -  -  	dec hl;dec alpha pointer
  759 D1:B1D6 0E 01 -  -  	ld c, %00000001;alpha mask
  760 D1:B1D8 CD 9E B0 D1 	call sdcomp_traverse_initial
  761 D1:B1DC D9 -  -  -  	exx ;out of shadow 
  762 D1:B1DD -  -  -  -  	
  763 D1:B1DD -  -  -  -  	
  764 D1:B1DD -  -  -  -  
  765 D1:B1DD -  -  -  -  	;TODO jump to BG routine here
  766 D1:B1DD -  -  -  -  	;END SETUP ======================================================================================================
  767 D1:B1DD -  -  -  -  	
  768 D1:B1DD -  -  -  -  	
  769 D1:B1DD -  -  -  -  sdcomp_find_gap_length:
  770 D1:B1DD -  -  -  -  	
  771 D1:B1DD -  -  -  -  	
  772 D1:B1DD -  -  -  -  	
  773 D1:B1DD -  -  -  -  ;If virtual 0 was read as the start of an alpha pair, remove 1 from next gap length 
  774 D1:B1DD -  -  -  -  ;this will occur if:
  775 D1:B1DD -  -  -  -  ;Starting pixels are at the end of line, eg :00000001. ldir length = 0 as virtual 0s are read. interline length should be reduced by 1 
  776 D1:B1DD -  -  -  -  ;
  777 D1:B1DD -  -  -  -  ;if during ldir search, line data ends in 11, followed by virtual 00. In this case the 11 is the ending pixels if slow sprite, so gap length should not be reduced
  778 D1:B1DD -  -  -  -  ; This is done from the addition of 1 gap length whenever the 11->00 case occurs, canceling the interline reduction due to reading vitrual 00. 
  779 D1:B1DD -  -  -  -  	
  780 D1:B1DD D9 -  -  -  	exx ;to shadow
  781 D1:B1DE -  -  -  -  	
  782 D1:B1DE -  -  -  -  sdcomp_add_1_gap_length .equ $ + 1
  783 D1:B1DE 06 00 -  -  	ld b,0;00 pairs found 
  784 D1:B1E0 3E 00 -  -  	ld a,0 ;reset
  785 D1:B1E2 32 DF B1 D1 	ld (sdcomp_add_1_gap_length),a 
  786 D1:B1E6 -  -  -  -  
  787 D1:B1E6 -  -  -  -  sdcomp_find_gap_length_loop:
  788 D1:B1E6 -  -  -  -  
  789 D1:B1E6 37 -  -  -  	scf 
  790 D1:B1E7 -  -  -  -  sdcomp_end_of_line_gaplength .equ $ 
  791 D1:B1E7 DA 10 B2 D1 	jp c, sdcomp_end_of_line_gaplength_skip
  792 D1:B1EB -  -  -  -  	
  793 D1:B1EB -  -  -  -  	;We have reached the end of the alpha data, add between line gap length 
  794 D1:B1EB -  -  -  -  sdcomp_gap_btwn_rows .equ $ + 1
  795 D1:B1EB 3E 00 -  -  	ld a,0
  796 D1:B1ED 80 -  -  -  	add a,b 
  797 D1:B1EE -  -  -  -  sdcomp_dec_gap_btwn_rows .equ $ 	
  798 D1:B1EE 00 -  -  -  	nop ;replace with dec a to decrease gap length 
  799 D1:B1EF 47 -  -  -  	ld b,a 
  800 D1:B1F0 3E 00 -  -  	ld a,%00000000 ;nop 
  801 D1:B1F2 32 EE B1 D1 	ld (sdcomp_dec_gap_btwn_rows),a ;reset dec gap
  802 D1:B1F6 3E DA -  -  	ld a,%11011010;jp c
  803 D1:B1F8 32 57 AF D1 	ld (sdcomp_end_of_line_alp),a ;Reset virtual zero flag, reading alpha data will now be the next line 
  804 D1:B1FC 32 E7 B1 D1 	ld (sdcomp_end_of_line_gaplength),a ;Reset flag for adding interline gaplength 
  805 D1:B200 -  -  -  -  	
  806 D1:B200 37 -  -  -  	scf
  807 D1:B201 -  -  -  -  sdcomp_flip_traverse .equ $
  808 D1:B201 D4 90 B0 D1 	call nc,sdcomp_traverse_line_data ;call line data traverse if flip
  809 D1:B205 -  -  -  -  		
  810 D1:B205 -  -  -  -  	;Write loops/line data as we have reached a gap btwn lines 
  811 D1:B205 3A 75 B2 D1 	ld a,(sdcomp_loops_per_line_counter)
  812 D1:B209 12 -  -  -  	ld (de),a ;write loops/line data 
  813 D1:B20A 13 -  -  -  	inc de
  814 D1:B20B -  -  -  -  	
  815 D1:B20B -  -  -  -  	
  816 D1:B20B 37 -  -  -  	scf 
  817 D1:B20C -  -  -  -  sdcomp_end_reached_flag .equ $;check if end of sprite reached
  818 D1:B20C D2 E4 B2 D1 	jp nc,sdcomp_end
  819 D1:B210 -  -  -  -  
  820 D1:B210 -  -  -  -  	
  821 D1:B210 -  -  -  -  sdcomp_end_of_line_gaplength_skip:
  822 D1:B210 CD AF AF D1 	call sdcomp_get_next_alpha_pair
  823 D1:B214 -  -  -  -  	;call write_a_to_ram
  824 D1:B214 04 -  -  -  	inc b 
  825 D1:B215 -  -  -  -  
  826 D1:B215 -  -  -  -  	;push af ;TEST
  827 D1:B215 -  -  -  -  	;ld a,$AB;TEST
  828 D1:B215 -  -  -  -  	;call write_a_to_ram
  829 D1:B215 -  -  -  -  	
  830 D1:B215 -  -  -  -  	;call write_a_to_ram
  831 D1:B215 -  -  -  -  	;pop af ;TEST
  832 D1:B215 -  -  -  -  	
  833 D1:B215 B7 -  -  -  	or a
  834 D1:B216 CA E6 B1 D1 	jp z,sdcomp_find_gap_length_loop
  835 D1:B21A -  -  -  -  	
  836 D1:B21A -  -  -  -  ;END OF GAP LENGTH LOOP =====================	
  837 D1:B21A -  -  -  -  	
  838 D1:B21A F5 -  -  -  	push af; save leading pixel alpha data 
  839 D1:B21B -  -  -  -  	;B holds number of 00 pairs + 1
  840 D1:B21B -  -  -  -  	
  841 D1:B21B -  -  -  -  	;ld a,$AA ;test
  842 D1:B21B -  -  -  -  	;call write_a_to_ram
  843 D1:B21B -  -  -  -  	;ld a,b ;test
  844 D1:B21B -  -  -  -  	;call write_a_to_ram
  845 D1:B21B -  -  -  -  	
  846 D1:B21B -  -  -  -  	
  847 D1:B21B -  -  -  -  	
  848 D1:B21B -  -  -  -  	;Write gap length data to output
  849 D1:B21B 78 -  -  -  	ld a,b 
  850 D1:B21C D9 -  -  -  	exx;out of shadow 
  851 D1:B21D 12 -  -  -  	ld (de),a;GAP LENGTH 
  852 D1:B21E 13 -  -  -  	inc de 
  853 D1:B21F D9 -  -  -  	exx;into shadow 	
  854 D1:B220 -  -  -  -  	
  855 D1:B220 -  -  -  -  	
  856 D1:B220 -  -  -  -  ;LEADING PIXELS ===================================================================================================
  857 D1:B220 F1 -  -  -  	pop af ;a holds leading pixel pair alpha data (FF,0F,F0)
  858 D1:B221 -  -  -  -  	
  859 D1:B221 37 -  -  -  	scf 
  860 D1:B222 -  -  -  -  sdcomp_fast_1 .equ $ 
  861 D1:B222 D2 2C B2 D1 	jp nc, sdcomp_ldir_start 
  862 D1:B226 -  -  -  -  	
  863 D1:B226 D9 -  -  -  	exx;out of shadow
  864 D1:B227 CD EF B0 D1 	call sdcomp_write_leading_or_end_pixels
  865 D1:B22B D9 -  -  -  	exx;into shadow 
  866 D1:B22C -  -  -  -  	
  867 D1:B22C -  -  -  -  
  868 D1:B22C -  -  -  -  	
  869 D1:B22C -  -  -  -  ;LDIR ==============================================================================================================	
  870 D1:B22C -  -  -  -  	;Count number of 11 pairs for LDIR section
  871 D1:B22C -  -  -  -  	;If end of line reached we know last pixels must be the ending pair
  872 D1:B22C -  -  -  -  	;
  873 D1:B22C -  -  -  -  	
  874 D1:B22C -  -  -  -  	;If ending is 11 -> 00 
  875 D1:B22C -  -  -  -  	;11 pair will need to become ending pixels if slow sprite
  876 D1:B22C -  -  -  -  	;Will need to reduce b by 1 
  877 D1:B22C -  -  -  -  	
  878 D1:B22C -  -  -  -  	;If ending is 11 ->01/10
  879 D1:B22C -  -  -  -  	;last pair wil become ending pixels, dont reduce b 
  880 D1:B22C -  -  -  -  	
  881 D1:B22C -  -  -  -  sdcomp_ldir_start:
  882 D1:B22C -  -  -  -  
  883 D1:B22C -  -  -  -  ;	ld a, %11010010 ;jp nc 
  884 D1:B22C -  -  -  -  ;	ld (sdcomp_end_of_line_2) , a ;reset end of line flag 
  885 D1:B22C -  -  -  -  
  886 D1:B22C 06 00 -  -  	ld b,0; will hold number of 11 pairs found
  887 D1:B22E -  -  -  -  sdcomp_ldir_loop:
  888 D1:B22E CD AF AF D1 	call sdcomp_get_next_alpha_pair ;get alpha data
  889 D1:B232 04 -  -  -  	inc b 
  890 D1:B233 -  -  -  -  	
  891 D1:B233 -  -  -  -  	;push af 
  892 D1:B233 -  -  -  -  	;ld a,$DE 
  893 D1:B233 -  -  -  -  	;call write_a_to_ram
  894 D1:B233 -  -  -  -  	;pop af
  895 D1:B233 -  -  -  -  	;call write_a_to_ram
  896 D1:B233 -  -  -  -  	
  897 D1:B233 -  -  -  -  ;	scf 
  898 D1:B233 -  -  -  -  ;sdcomp_end_of_line_2 .equ $ ;set when end of line reached 
  899 D1:B233 -  -  -  -  ;	jp nc, sdcomp_ldir_loop_end;If read last in line
  900 D1:B233 -  -  -  -  	
  901 D1:B233 EE FF -  -  	xor %11111111 ;flip all bits  (CPL does not set flags :(  )
  902 D1:B235 CA 2E B2 D1 	jp z, sdcomp_ldir_loop; if a is 0 means a was $FF 
  903 D1:B239 2F -  -  -  	cpl ; flip back 
  904 D1:B23A -  -  -  -  sdcomp_ldir_loop_end:
  905 D1:B23A -  -  -  -  
  906 D1:B23A -  -  -  -  	
  907 D1:B23A -  -  -  -  	;at this point b holds # 11 pairs +1 
  908 D1:B23A 37 -  -  -  	scf 
  909 D1:B23B -  -  -  -  sdcomp_fast_2 .equ $ 
  910 D1:B23B D2 56 B2 D1 	jp nc,sdcomp_ldir_write ;jump before dec b because we have read first 11 pair in searching for gaplength 
  911 D1:B23F -  -  -  -  
  912 D1:B23F -  -  -  -  	
  913 D1:B23F -  -  -  -  	
  914 D1:B23F 05 -  -  -  	dec b ;b holds # 11 pairs 
  915 D1:B240 CA 69 B2 D1 	jp z,sdcomp_no_ldir;no pairs found,no ldir length
  916 D1:B244 B7 -  -  -  	or a
  917 D1:B245 C2 56 B2 D1 	jp nz,sdcomp_ldir_write;ends not in 00, has single ending pixel
  918 D1:B249 -  -  -  -  	
  919 D1:B249 -  -  -  -  	;ends in 11 -> 00,ending pixels will be 11 if slow sprite. If fast, jump to ldir write here 
  920 D1:B249 -  -  -  -  	
  921 D1:B249 -  -  -  -  	;ld a,$DF
  922 D1:B249 -  -  -  -  	;call write_a_to_ram
  923 D1:B249 -  -  -  -  	
  924 D1:B249 -  -  -  -  	;must add 1 to next gap length, have already read first 00
  925 D1:B249 -  -  -  -  	;for the case with virtual 00, this cancels the decrease in gap length 
  926 D1:B249 3E 01 -  -  	ld a,1;start w 1 gap len
  927 D1:B24B 32 DF B1 D1 	ld (sdcomp_add_1_gap_length),a 
  928 D1:B24F 3E FF -  -  	ld a,$ff;ending pixels 11
  929 D1:B251 -  -  -  -  	
  930 D1:B251 05 -  -  -  	dec b;reduce length by 1, final pair is end pixels
  931 D1:B252 CA 69 B2 D1 	jp z,sdcomp_no_ldir;no ldir length,ending pixels is 11 
  932 D1:B256 -  -  -  -  	;b holds ldir length 
  933 D1:B256 -  -  -  -  	
  934 D1:B256 -  -  -  -  
  935 D1:B256 -  -  -  -  ;b holds ldir length, a holds ending pixels
  936 D1:B256 -  -  -  -  sdcomp_ldir_write:
  937 D1:B256 -  -  -  -  
  938 D1:B256 -  -  -  -  	;b holds 11 pairs found 
  939 D1:B256 -  -  -  -  	
  940 D1:B256 -  -  -  -  	;push af;TEST
  941 D1:B256 -  -  -  -  	;ld a,$DA 
  942 D1:B256 -  -  -  -  	;call write_a_to_ram
  943 D1:B256 -  -  -  -  	;ld a,b 
  944 D1:B256 -  -  -  -  	;call write_a_to_ram
  945 D1:B256 -  -  -  -  	;pop af ;TEST
  946 D1:B256 -  -  -  -  
  947 D1:B256 F5 -  -  -  	push af;save ending pixels
  948 D1:B257 78 -  -  -  	ld a,b
  949 D1:B258 D9 -  -  -  	exx ;out 
  950 D1:B259 12 -  -  -  	ld (de),a;write ldir length
  951 D1:B25A 13 -  -  -  	inc de 
  952 D1:B25B CD DB B0 D1 	call sdcomp_write_ldir_data_loop
  953 D1:B25F -  -  -  -  
  954 D1:B25F F1 -  -  -  	pop af;return ending pixels
  955 D1:B260 -  -  -  -  	
  956 D1:B260 37 -  -  -  	scf
  957 D1:B261 -  -  -  -  sdcomp_fast_3 .equ $ 
  958 D1:B261 D2 74 B2 D1 	jp nc,sdcomp_inc_loops_per_line ;skip ending pixels
  959 D1:B265 -  -  -  -  	
  960 D1:B265 C3 70 B2 D1 	jp sdcomp_write_end_pixels
  961 D1:B269 -  -  -  -  sdcomp_no_ldir:;no ldir length, a holds ending pixels,00,10,01,11
  962 D1:B269 -  -  -  -  
  963 D1:B269 -  -  -  -  
  964 D1:B269 -  -  -  -  	;push af ;TEST
  965 D1:B269 -  -  -  -  	;ld a,$DB
  966 D1:B269 -  -  -  -  	;call write_a_to_ram
  967 D1:B269 -  -  -  -  	;pop af ;TEST
  968 D1:B269 -  -  -  -  	;call write_a_to_ram
  969 D1:B269 -  -  -  -  
  970 D1:B269 F5 -  -  -  	push af;save end pixels
  971 D1:B26A -  -  -  -  	
  972 D1:B26A D9 -  -  -  	exx;out of shadow
  973 D1:B26B 3E 00 -  -  	ld a,0
  974 D1:B26D 12 -  -  -  	ld (de),a ;write 0 as ldir length
  975 D1:B26E 13 -  -  -  	inc de 
  976 D1:B26F F1 -  -  -  	pop af;return ending pixels
  977 D1:B270 -  -  -  -  
  978 D1:B270 -  -  -  -  ;WRITE ENDING PIXELS ======================================================================================
  979 D1:B270 -  -  -  -  
  980 D1:B270 -  -  -  -  sdcomp_write_end_pixels:
  981 D1:B270 -  -  -  -  ;not in shadow
  982 D1:B270 -  -  -  -  	
  983 D1:B270 -  -  -  -  	;test
  984 D1:B270 -  -  -  -  	;push af 
  985 D1:B270 -  -  -  -  	;ld a,$E0
  986 D1:B270 -  -  -  -  	;call write_a_to_ram
  987 D1:B270 -  -  -  -  	;pop af 
  988 D1:B270 -  -  -  -  	
  989 D1:B270 -  -  -  -  
  990 D1:B270 CD EF B0 D1 	call sdcomp_write_leading_or_end_pixels
  991 D1:B274 -  -  -  -  	
  992 D1:B274 -  -  -  -  	
  993 D1:B274 -  -  -  -  ;sdcomp_test_lines_stop .equ $ + 1 
  994 D1:B274 -  -  -  -  	;ld a,2
  995 D1:B274 -  -  -  -  	;dec a 
  996 D1:B274 -  -  -  -  	;jp z,sdcomp_end
  997 D1:B274 -  -  -  -  	;ld (sdcomp_test_lines_stop),a 
  998 D1:B274 -  -  -  -  
  999 D1:B274 -  -  -  -  sdcomp_inc_loops_per_line:	
 1000 D1:B274 -  -  -  -  	;INC LOOP/LINE count
 1001 D1:B274 -  -  -  -  sdcomp_loops_per_line_counter .equ $ + 1
 1002 D1:B274 3E 00 -  -  	ld a,0;inc number of loops
 1003 D1:B276 3C -  -  -  	inc a 
 1004 D1:B277 32 75 B2 D1 	ld (sdcomp_loops_per_line_counter),a
 1005 D1:B27B -  -  -  -  
 1006 D1:B27B -  -  -  -  
 1007 D1:B27B -  -  -  -  	;jp sdcomp_find_gap_length ;TESTING REMOVE
 1008 D1:B27B -  -  -  -  	
 1009 D1:B27B -  -  -  -  	;Check the timer to see if we need to begin rendering next frame 
 1010 D1:B27B -  -  -  -  	;1090 cycles @ 32768hz ~= 1 frame (1/30s)
 1011 D1:B27B -  -  -  -  	;Should stop decompressions at 1000 cycles?
 1012 D1:B27B -  -  -  -  	; = %00000011, 11101000
 1013 D1:B27B -  -  -  -  sdcomp_clock_check_loop:
 1014 D1:B27B 3A 01 00 F2 	ld a,($F20001);128hz clock
 1015 D1:B27F FE 03 -  -  	cp %00000011 ;check if reached 3 
 1016 D1:B281 DA DD B1 D1 	jp c,sdcomp_find_gap_length ;msb <= 2, can continue  
 1017 D1:B285 3A 00 00 F2 	ld a,($F20000);32768hz clock
 1018 D1:B289 FE E8 -  -  	cp %11101000;check if reached value 
 1019 D1:B28B DA DD B1 D1 	jp c,sdcomp_find_gap_length ;msb = 3 and lsb < value, can continue
 1020 D1:B28F -  -  -  -  	
 1021 D1:B28F -  -  -  -  	;Past clock threshold, need to stop decompressions
 1022 D1:B28F -  -  -  -  
 1023 D1:B28F -  -  -  -  
 1024 D1:B28F -  -  -  -  	;TODO can prob not need to save (a) register
 1025 D1:B28F -  -  -  -  sdcomp_interrupt:
 1026 D1:B28F -  -  -  -  
 1027 D1:B28F -  -  -  -  
 1028 D1:B28F -  -  -  -  	;not in shadow 
 1029 D1:B28F 22 C1 B2 D1 	ld (sdcomp_cont_hl),hl 
 1030 D1:B293 EB -  -  -  	ex de,hl
 1031 D1:B294 22 C5 B2 D1 	ld (sdcomp_cont_de),hl 
 1032 D1:B298 C5 -  -  -  	push bc
 1033 D1:B299 E1 -  -  -  	pop hl
 1034 D1:B29A 22 C9 B2 D1 	ld (sdcomp_cont_bc),hl
 1035 D1:B29E 32 CD B2 D1 	ld (sdcomp_cont_a),a 
 1036 D1:B2A2 D9 -  -  -  	exx 
 1037 D1:B2A3 08 -  -  -  	ex af,af' ;'
 1038 D1:B2A4 22 D1 B2 D1 	ld (sdcomp_cont_hlP),hl 
 1039 D1:B2A8 EB -  -  -  	ex de,hl
 1040 D1:B2A9 22 D5 B2 D1 	ld (sdcomp_cont_deP),hl 
 1041 D1:B2AD C5 -  -  -  	push bc 
 1042 D1:B2AE E1 -  -  -  	pop hl
 1043 D1:B2AF 22 D9 B2 D1 	ld (sdcomp_cont_bcP),hl
 1044 D1:B2B3 32 DD B2 D1 	ld (sdcomp_cont_aP),a 
 1045 D1:B2B7 -  -  -  -  	
 1046 D1:B2B7 -  -  -  -  	
 1047 D1:B2B7 3E AA -  -  	ld a, $AA
 1048 D1:B2B9 CD 9D AB D1 	call write_a_to_ram
 1049 D1:B2BD -  -  -  -  	
 1050 D1:B2BD 3E 01 -  -  	ld a,1 ;Return 1 if interrupted
 1051 D1:B2BF C9 -  -  -  	ret 
 1052 D1:B2C0 -  -  -  -  	
 1053 D1:B2C0 -  -  -  -  sdcomp_continue:
 1054 D1:B2C0 -  -  -  -  	;not in shadow 
 1055 D1:B2C0 -  -  -  -  sdcomp_cont_hl .equ $ + 1
 1056 D1:B2C0 21 00 00 00 	ld hl,0
 1057 D1:B2C4 -  -  -  -  sdcomp_cont_de .equ $ + 1
 1058 D1:B2C4 11 00 00 00 	ld de,0
 1059 D1:B2C8 -  -  -  -  sdcomp_cont_bc .equ $ + 1
 1060 D1:B2C8 01 00 00 00 	ld bc,0
 1061 D1:B2CC -  -  -  -  sdcomp_cont_a .equ $ + 1
 1062 D1:B2CC 3E 00 -  -  	ld a,0
 1063 D1:B2CE D9 -  -  -  	exx 
 1064 D1:B2CF 08 -  -  -  	ex af,af' ;'
 1065 D1:B2D0 -  -  -  -  sdcomp_cont_hlP .equ $ + 1
 1066 D1:B2D0 21 00 00 00 	ld hl,0
 1067 D1:B2D4 -  -  -  -  sdcomp_cont_deP .equ $ + 1
 1068 D1:B2D4 11 00 00 00 	ld de,0
 1069 D1:B2D8 -  -  -  -  sdcomp_cont_bcP .equ $ + 1
 1070 D1:B2D8 01 00 00 00 	ld bc,0
 1071 D1:B2DC -  -  -  -  sdcomp_cont_aP .equ $ + 1
 1072 D1:B2DC 3E 00 -  -  	ld a,0	
 1073 D1:B2DE -  -  -  -  	
 1074 D1:B2DE D9 -  -  -  	exx ;out of shadow 
 1075 D1:B2DF 08 -  -  -  	ex af,af' ;'
 1076 D1:B2E0 -  -  -  -  
 1077 D1:B2E0 C3 DD B1 D1 	jp sdcomp_find_gap_length
 1078 D1:B2E4 -  -  -  -  
 1079 D1:B2E4 -  -  -  -  	
 1080 D1:B2E4 -  -  -  -  
 1081 D1:B2E4 -  -  -  -  sdcomp_end:
 1082 D1:B2E4 -  -  -  -  	
 1083 D1:B2E4 -  -  -  -  	;ld a,$69
 1084 D1:B2E4 -  -  -  -  	;call write_a_to_ram
 1085 D1:B2E4 -  -  -  -  	
 1086 D1:B2E4 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1087 D1:B2E6 32 0C B2 D1 	ld (sdcomp_end_reached_flag),a 
 1088 D1:B2EA -  -  -  -  	
 1089 D1:B2EA 3E 00 -  -  	ld a,0 ;return 0 if finished decompressing 
 1090 D1:B2EC C9 -  -  -  	ret 
 1091 D1:B2ED -  -  -  -  
 1092 D1:B2ED -  -  -  -  
 1093 D1:B2ED -  -  -  -  ;bit orders
 1094 D1:B2ED -  -  -  -  ;	noflip   flip 
 1095 D1:B2ED -  -  -  -  ;4bpp 3210 	 0123
 1096 D1:B2ED -  -  -  -  ;3bpp 210	 012
 1097 D1:B2ED -  -  -  -  ;2bpp 10	 01
 1098 D1:B2ED -  -  -  -  ;1bpp 0		 0
 1099 D1:B2ED -  -  -  -  
 1100 D1:B2ED -  -  -  -  
 1101 D1:B2ED -  -  -  -  sdcomp_set_0bpc:
 1102 D1:B2ED 3E DA -  -  	ld a,%11011010;jp c
 1103 D1:B2EF 32 F8 AF D1 	ld (sdcomp_0bpc),a
 1104 D1:B2F3 -  -  -  -  	
 1105 D1:B2F3 32 9F B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1106 D1:B2F7 32 AA B1 D1 	ld (sdcomp_3bpc_1),a 
 1107 D1:B2FB -  -  -  -  	
 1108 D1:B2FB 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1109 D1:B2FD 32 94 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1110 D1:B301 3E 00 -  -  	ld a,%00000000
 1111 D1:B303 32 B9 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1112 D1:B307 C9 -  -  -  	ret 
 1113 D1:B308 -  -  -  -  	
 1114 D1:B308 -  -  -  -  sdcomp_set_1bpc:
 1115 D1:B308 3E D2 -  -  	ld a,%11010010;jp nc
 1116 D1:B30A 32 F8 AF D1 	ld (sdcomp_0bpc),a
 1117 D1:B30E 3E DA -  -  	ld a,%11011010;jp c
 1118 D1:B310 32 0A B0 D1 	ld (sdcomp_1bpc),a
 1119 D1:B314 -  -  -  -  	
 1120 D1:B314 32 9F B1 D1 	ld (sdcomp_2bpc_1),a ;for setting local pallete data
 1121 D1:B318 32 AA B1 D1 	ld (sdcomp_3bpc_1),a 
 1122 D1:B31C -  -  -  -  	
 1123 D1:B31C 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1124 D1:B31E 32 94 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1125 D1:B322 -  -  -  -  	
 1126 D1:B322 -  -  -  -  	
 1127 D1:B322 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1128 D1:B324 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1129 D1:B328 -  -  -  -  	
 1130 D1:B328 3E 80 -  -  	ld a,%10000000
 1131 D1:B32A 32 B9 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1132 D1:B32E -  -  -  -  	
 1133 D1:B32E 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1134 D1:B330 32 B2 B0 D1 	ld (sdcomp_traverse_2bpp),a
 1135 D1:B334 32 B4 B0 D1 	ld (sdcomp_traverse_3bpp),a
 1136 D1:B338 32 B6 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1137 D1:B33C C9 -  -  -  	ret 
 1138 D1:B33D -  -  -  -  
 1139 D1:B33D -  -  -  -  sdcomp_set_2bpc:
 1140 D1:B33D 3E D2 -  -  	ld a,%11010010;jp nc
 1141 D1:B33F 32 F8 AF D1 	ld (sdcomp_0bpc),a
 1142 D1:B343 32 0A B0 D1 	ld (sdcomp_1bpc),a
 1143 D1:B347 -  -  -  -  	
 1144 D1:B347 3E DA -  -  	ld a,%11011010;jp c
 1145 D1:B349 32 1C B0 D1 	ld (sdcomp_2bpc),a
 1146 D1:B34D -  -  -  -  	
 1147 D1:B34D 32 AA B1 D1 	ld (sdcomp_3bpc_1),a ;for setting local pallete data
 1148 D1:B351 -  -  -  -  	
 1149 D1:B351 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1150 D1:B353 32 94 B1 D1 	ld (sdcomp_1bpc_1),a;for setting local pallete data
 1151 D1:B357 32 9F B1 D1 	ld (sdcomp_2bpc_1),a 
 1152 D1:B35B -  -  -  -  	
 1153 D1:B35B 37 -  -  -  	scf 
 1154 D1:B35C -  -  -  -  sdcomp_flip_2bpc .equ $ 
 1155 D1:B35C D2 6D B3 D1 	jp nc, sdcomp_2bpc_flip
 1156 D1:B360 -  -  -  -  	
 1157 D1:B360 3E CB -  -  	ld a,%11001011 ;set 1,e
 1158 D1:B362 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1159 D1:B366 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1160 D1:B368 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1161 D1:B36C -  -  -  -  	
 1162 D1:B36C C9 -  -  -  	ret 
 1163 D1:B36D -  -  -  -  	
 1164 D1:B36D -  -  -  -  sdcomp_2bpc_flip:
 1165 D1:B36D 3E CB -  -  	ld a,%11001011 ;set 1,e
 1166 D1:B36F 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1167 D1:B373 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1168 D1:B375 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1169 D1:B379 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1170 D1:B37B 32 B2 B0 D1 	ld (sdcomp_traverse_2bpp),a
 1171 D1:B37F -  -  -  -  
 1172 D1:B37F 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1173 D1:B381 32 B4 B0 D1 	ld (sdcomp_traverse_3bpp),a
 1174 D1:B385 32 B6 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1175 D1:B389 -  -  -  -  	
 1176 D1:B389 3E C0 -  -  	ld a,%11000000
 1177 D1:B38B 32 B9 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1178 D1:B38F C9 -  -  -  	ret 
 1179 D1:B390 -  -  -  -  
 1180 D1:B390 -  -  -  -  
 1181 D1:B390 -  -  -  -  sdcomp_set_3bpc:
 1182 D1:B390 -  -  -  -  	
 1183 D1:B390 3E D2 -  -  	ld a,%11010010;jp nc
 1184 D1:B392 32 F8 AF D1 	ld (sdcomp_0bpc),a
 1185 D1:B396 32 0A B0 D1 	ld (sdcomp_1bpc),a
 1186 D1:B39A 32 1C B0 D1 	ld (sdcomp_2bpc),a
 1187 D1:B39E -  -  -  -  	
 1188 D1:B39E 3E DA -  -  	ld a,%11011010;jp c
 1189 D1:B3A0 32 2E B0 D1 	ld (sdcomp_3bpc),a
 1190 D1:B3A4 -  -  -  -  	
 1191 D1:B3A4 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1192 D1:B3A6 32 94 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1193 D1:B3AA 32 9F B1 D1 	ld (sdcomp_2bpc_1),a 
 1194 D1:B3AE 32 AA B1 D1 	ld (sdcomp_3bpc_1),a 
 1195 D1:B3B2 -  -  -  -  	
 1196 D1:B3B2 37 -  -  -  	scf 
 1197 D1:B3B3 -  -  -  -  sdcomp_flip_3bpc .equ $ 
 1198 D1:B3B3 D2 CA B3 D1 	jp nc, sdcomp_3bpc_flip	
 1199 D1:B3B7 -  -  -  -  	
 1200 D1:B3B7 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1201 D1:B3B9 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1202 D1:B3BD 3E CB -  -  	ld a,%11001011 ;set 1,e
 1203 D1:B3BF 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1204 D1:B3C3 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1205 D1:B3C5 32 2C B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1206 D1:B3C9 -  -  -  -  	
 1207 D1:B3C9 C9 -  -  -  	ret 
 1208 D1:B3CA -  -  -  -  	
 1209 D1:B3CA -  -  -  -  sdcomp_3bpc_flip:
 1210 D1:B3CA 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1211 D1:B3CC 32 2C B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1212 D1:B3D0 3E CB -  -  	ld a,%11001011 ;set 1,e
 1213 D1:B3D2 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1214 D1:B3D6 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1215 D1:B3D8 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1216 D1:B3DC -  -  -  -  	
 1217 D1:B3DC 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1218 D1:B3DE 32 B2 B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1219 D1:B3E2 32 B4 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1220 D1:B3E6 -  -  -  -  	
 1221 D1:B3E6 3E 0F -  -  	ld a, %00001111 ;rrc a 
 1222 D1:B3E8 32 B6 B0 D1 	ld (sdcomp_traverse_4bpp),a
 1223 D1:B3EC -  -  -  -  	
 1224 D1:B3EC 3E E0 -  -  	ld a,%11100000
 1225 D1:B3EE 32 B9 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1226 D1:B3F2 -  -  -  -  	
 1227 D1:B3F2 C9 -  -  -  	ret 
 1228 D1:B3F3 -  -  -  -  
 1229 D1:B3F3 -  -  -  -  sdcomp_set_4bpc:
 1230 D1:B3F3 -  -  -  -  
 1231 D1:B3F3 3E D2 -  -  	ld a,%11010010;jp nc
 1232 D1:B3F5 32 F8 AF D1 	ld (sdcomp_0bpc),a
 1233 D1:B3F9 32 0A B0 D1 	ld (sdcomp_1bpc),a
 1234 D1:B3FD 32 1C B0 D1 	ld (sdcomp_2bpc),a
 1235 D1:B401 -  -  -  -  
 1236 D1:B401 3E DA -  -  	ld a,%11011010;jp c
 1237 D1:B403 -  -  -  -  
 1238 D1:B403 32 94 B1 D1 	ld (sdcomp_1bpc_1),a ;for setting local pallete data
 1239 D1:B407 32 9F B1 D1 	ld (sdcomp_2bpc_1),a 
 1240 D1:B40B 32 AA B1 D1 	ld (sdcomp_3bpc_1),a 
 1241 D1:B40F -  -  -  -  	
 1242 D1:B40F 37 -  -  -  	scf 
 1243 D1:B410 -  -  -  -  sdcomp_flip_4bpc .equ $ 
 1244 D1:B410 D2 2D B4 D1 	jp nc, sdcomp_4bpc_flip	
 1245 D1:B414 3E DB -  -  	ld a,%11011011 ;set 3,e
 1246 D1:B416 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1247 D1:B41A 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1248 D1:B41C 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1249 D1:B420 3E CB -  -  	ld a,%11001011 ;set 1,e
 1250 D1:B422 32 2C B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1251 D1:B426 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1252 D1:B428 32 3E B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1253 D1:B42C C9 -  -  -  	ret 
 1254 D1:B42D -  -  -  -  sdcomp_4bpc_flip:
 1255 D1:B42D 3E DB -  -  	ld a,%11011011 ;set 3,e
 1256 D1:B42F 32 3E B0 D1 	ld(sdcomp_color_bit_3),a ;for setting correct bit in e when reading color 
 1257 D1:B433 3E D3 -  -  	ld a,%11010011 ;set 2,e
 1258 D1:B435 32 2C B0 D1 	ld(sdcomp_color_bit_2),a ;for setting correct bit in e when reading color 
 1259 D1:B439 3E CB -  -  	ld a,%11001011 ;set 1,e
 1260 D1:B43B 32 1A B0 D1 	ld(sdcomp_color_bit_1),a ;for setting correct bit in e when reading color 
 1261 D1:B43F 3E C3 -  -  	ld a,%11000011 ;set 0,e
 1262 D1:B441 32 08 B0 D1 	ld(sdcomp_color_bit_0),a ;for setting correct bit in e when reading color 
 1263 D1:B445 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1264 D1:B447 32 B2 B0 D1 	ld (sdcomp_traverse_2bpp),a 
 1265 D1:B44B 32 B4 B0 D1 	ld (sdcomp_traverse_3bpp),a 
 1266 D1:B44F 32 B6 B0 D1 	ld (sdcomp_traverse_4bpp),a 
 1267 D1:B453 -  -  -  -  	
 1268 D1:B453 3E F0 -  -  	ld a,%11110000
 1269 D1:B455 32 B9 B0 D1 	ld (sdcomp_traverse_bit_check),a 
 1270 D1:B459 -  -  -  -  	
 1271 D1:B459 C9 -  -  -  	ret 
 1272 D1:B45A -  -  -  -  	
 1273 D1:B45A -  -  -  -  	
 1274 D1:B45A -  -  -  -  sdcomp_set_noalpha:
 1275 D1:B45A 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1276 D1:B45C 32 79 AF D1 	ld (sdcomp_no_alpha_1),a 
 1277 D1:B460 3E DA -  -  	ld a,%11011010;jp c
 1278 D1:B462 32 79 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1279 D1:B466 32 AA B0 D1 	ld (sdcomp_no_alpha_3),a 
 1280 D1:B46A C9 -  -  -  	ret
 1281 D1:B46B -  -  -  -  	
 1282 D1:B46B -  -  -  -  sdcomp_reset_noalpha:
 1283 D1:B46B -  -  -  -  
 1284 D1:B46B 3E DA -  -  	ld a,%11011010;jp c
 1285 D1:B46D 32 79 AF D1 	ld (sdcomp_no_alpha_1),a 
 1286 D1:B471 3E D2 -  -  	ld a, %11010010 ;jp nc
 1287 D1:B473 32 79 B1 D1 	ld (sdcomp_no_alpha_2),a 
 1288 D1:B477 3E CA -  -  	ld a, %11001010 ;jp z
 1289 D1:B479 32 AA B0 D1 	ld (sdcomp_no_alpha_3),a 
 1290 D1:B47D C9 -  -  -  	ret
 1291 D1:B47E -  -  -  -  
 1292 D1:B47E -  -  -  -  
 1293 D1:B47E -  -  -  -  sdcomp_set_offset:
 1294 D1:B47E 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1295 D1:B480 32 A1 AF D1 	ld (sdcomp_offset_1),a 
 1296 D1:B484 32 65 AF D1 	ld (sdcomp_bit_offset),a 
 1297 D1:B488 3E 04 -  -  	ld a,%00000100 ;inc b 
 1298 D1:B48A 32 61 B1 D1 	ld (sdcomp_offset_2),a 
 1299 D1:B48E -  -  -  -  	
 1300 D1:B48E C9 -  -  -  	ret 
 1301 D1:B48F -  -  -  -  
 1302 D1:B48F -  -  -  -  sdcomp_reset_offset:
 1303 D1:B48F 3E DA -  -  	ld a,%11011010;jp c
 1304 D1:B491 32 A1 AF D1 	ld (sdcomp_offset_1),a 
 1305 D1:B495 32 65 AF D1 	ld (sdcomp_bit_offset),a 
 1306 D1:B499 3E 00 -  -  	ld a,%00000000 ;nop
 1307 D1:B49B 32 61 B1 D1 	ld (sdcomp_offset_2),a 
 1308 D1:B49F C9 -  -  -  	ret 
 1309 D1:B4A0 -  -  -  -  	
 1310 D1:B4A0 -  -  -  -  sdcomp_set_flip:
 1311 D1:B4A0 3E 01 -  -  	ld a, %00000001 ;rlc c 
 1312 D1:B4A2 32 50 AF D1 	ld (sdcomp_flip_bitstream),a
 1313 D1:B4A6 3E 2B -  -  	ld a, %00101011 ;dec hl 
 1314 D1:B4A8 32 52 AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1315 D1:B4AC 3E DC -  -  	ld a, %11011100 ;call c 
 1316 D1:B4AE 32 01 B2 D1 	ld (sdcomp_flip_traverse),a 
 1317 D1:B4B2 -  -  -  -  	
 1318 D1:B4B2 3E DA -  -  	ld a,%11011010;jp c
 1319 D1:B4B4 32 5C B3 D1 	ld (sdcomp_flip_2bpc),a
 1320 D1:B4B8 32 B3 B3 D1 	ld (sdcomp_flip_3bpc),a
 1321 D1:B4BC 32 10 B4 D1 	ld (sdcomp_flip_4bpc),a
 1322 D1:B4C0 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1323 D1:B4C2 32 CD B1 D1 	ld (sdcomp_flip_setup),a 
 1324 D1:B4C6 -  -  -  -  	
 1325 D1:B4C6 C9 -  -  -  	ret 
 1326 D1:B4C7 -  -  -  -  
 1327 D1:B4C7 -  -  -  -  sdcomp_reset_flip:
 1328 D1:B4C7 3E 09 -  -  	ld a, %00001001 ;rrc c 
 1329 D1:B4C9 32 50 AF D1 	ld (sdcomp_flip_bitstream),a
 1330 D1:B4CD 3E 23 -  -  	ld a, %00100011 ;inc hl 
 1331 D1:B4CF 32 52 AF D1 	ld (sdcomp_flip_bitstream_2),a 
 1332 D1:B4D3 3E D4 -  -  	ld a, %11010100 ;call nc 
 1333 D1:B4D5 32 01 B2 D1 	ld (sdcomp_flip_traverse),a 
 1334 D1:B4D9 -  -  -  -  	
 1335 D1:B4D9 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1336 D1:B4DB 32 5C B3 D1 	ld (sdcomp_flip_2bpc),a
 1337 D1:B4DF 32 B3 B3 D1 	ld (sdcomp_flip_3bpc),a
 1338 D1:B4E3 32 10 B4 D1 	ld (sdcomp_flip_4bpc),a
 1339 D1:B4E7 3E DA -  -  	ld a,%11011010;jp c
 1340 D1:B4E9 32 CD B1 D1 	ld (sdcomp_flip_setup),a 
 1341 D1:B4ED C9 -  -  -  	ret 
 1342 D1:B4EE -  -  -  -  
 1343 D1:B4EE -  -  -  -  
 1344 D1:B4EE -  -  -  -  sdcomp_set_fast:
 1345 D1:B4EE 3E DA -  -  	ld a,%11011010;jp c
 1346 D1:B4F0 32 22 B2 D1 	ld(sdcomp_fast_1),a 
 1347 D1:B4F4 32 3B B2 D1 	ld(sdcomp_fast_2),a 
 1348 D1:B4F8 32 61 B2 D1 	ld(sdcomp_fast_3),a 
 1349 D1:B4FC -  -  -  -  	
 1350 D1:B4FC C9 -  -  -  	ret 
 1351 D1:B4FD -  -  -  -  
 1352 D1:B4FD -  -  -  -  sdcomp_reset_fast:
 1353 D1:B4FD 3E D2 -  -  	ld a, %11010010 ;jp nc 
 1354 D1:B4FF 32 22 B2 D1 	ld(sdcomp_fast_1),a 
 1355 D1:B503 32 3B B2 D1 	ld(sdcomp_fast_2),a 
 1356 D1:B507 32 61 B2 D1 	ld(sdcomp_fast_3),a 
 1357 D1:B50B -  -  -  -  	
 1358 D1:B50B C9 -  -  -  	ret 
 1359 D1:B50C -  -  -  -  
 1360 D1:B50C -  -  -  -  
 1361 D1:B50C -  -  -  -  
 1362 D1:B50C -  -  -  -  
 1363 D1:B50C -  -  -  -  
 1364 D1:B50C -  -  -  -  
Listing for file "ascent.asm"
  519 D1:B50C -  -  -  -  #include "drawFG.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\drawFG.txt"
    1 D1:B50C -  -  -  -  
    2 D1:B50C -  -  -  -  FGMaxSpriteHeight .equ 120
    3 D1:B50C -  -  -  -  
    4 D1:B50C -  -  -  -  draw_mg:
    5 D1:B50C 2A BF AB D1 	ld hl,(draw_buffer)
    6 D1:B510 22 03 B6 D1 	ld (dfgs_vram_top_1),hl
    7 D1:B514 22 AD B6 D1 	ld (dfgs_vram_top_2),hl
    8 D1:B518 01 00 96 00 	ld bc,160*240
    9 D1:B51C 09 -  -  -  	add hl,bc
   10 D1:B51D 22 68 B6 D1 	ld (dfgs_vram_bottom_1),hl 
   11 D1:B521 22 88 B6 D1 	ld (dfgs_vram_bottom_2),hl 
   12 D1:B525 22 0E B7 D1 	ld (dfgs_vram_bottom_3),hl 
   13 D1:B529 22 2E B7 D1 	ld (dfgs_vram_bottom_4),hl 
   14 D1:B52D -  -  -  -  	
   15 D1:B52D 2A B9 AB D1 	ld hl,(cam_pos)
   16 D1:B531 CB 3C -  -  	srl h ;div by 2
   17 D1:B533 CB 1D -  -  	rr l 
   18 D1:B535 -  -  -  -  	
   19 D1:B535 01 EF 00 00 	ld bc,239
   20 D1:B539 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   21 D1:B53A 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   22 D1:B53B 32 C6 B5 D1 	ld (dfgs_cam_height_1),a
   23 D1:B53F 32 52 B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   24 D1:B543 32 E5 B6 D1 	ld (dfgs_cam_height_3),a
   25 D1:B547 -  -  -  -  		
   26 D1:B547 ED 44 -  -  	neg 
   27 D1:B549 32 F8 B5 D1 	ld (dfgs_viewport_to_upper_frame),a
   28 D1:B54D -  -  -  -  	
   29 D1:B54D 01 00 00 00 	ld bc,0
   30 D1:B551 4C -  -  -  	ld c,h;msb ccam pos 
   31 D1:B552 0C -  -  -  	inc c 
   32 D1:B553 21 E0 B9 D1 	ld hl,MG_Data_frame_table
   33 D1:B557 09 -  -  -  	add hl,bc
   34 D1:B558 09 -  -  -  	add hl,bc 
   35 D1:B559 09 -  -  -  	add hl,bc 	
   36 D1:B55A ED 27 -  -  	ld hl,(hl);upper frame 
   37 D1:B55C -  -  -  -  	
   38 D1:B55C CD B2 B5 D1 	call draw_fg_sprites
   39 D1:B560 C9 -  -  -  	ret
   40 D1:B561 -  -  -  -  
   41 D1:B561 -  -  -  -  
   42 D1:B561 -  -  -  -  
   43 D1:B561 -  -  -  -  draw_fg:
   44 D1:B561 2A BF AB D1 	ld hl,(draw_buffer)
   45 D1:B565 22 03 B6 D1 	ld (dfgs_vram_top_1),hl
   46 D1:B569 22 AD B6 D1 	ld (dfgs_vram_top_2),hl
   47 D1:B56D 01 00 96 00 	ld bc,160*240
   48 D1:B571 09 -  -  -  	add hl,bc
   49 D1:B572 22 68 B6 D1 	ld (dfgs_vram_bottom_1),hl 
   50 D1:B576 22 88 B6 D1 	ld (dfgs_vram_bottom_2),hl 
   51 D1:B57A 22 0E B7 D1 	ld (dfgs_vram_bottom_3),hl 
   52 D1:B57E 22 2E B7 D1 	ld (dfgs_vram_bottom_4),hl 
   53 D1:B582 -  -  -  -  	
   54 D1:B582 2A B9 AB D1 	ld hl,(cam_pos)
   55 D1:B586 01 EF 00 00 	ld bc,239
   56 D1:B58A 09 -  -  -  	add hl,bc ;y-value of uppermost visible line of fg layer
   57 D1:B58B 7D -  -  -  	ld a,l ;lsb cam pos, = line number in middle frame
   58 D1:B58C 32 C6 B5 D1 	ld (dfgs_cam_height_1),a
   59 D1:B590 32 52 B6 D1 	ld (dfgs_cam_height_2),a ;y value in dataframe of uppermost line of viewport
   60 D1:B594 32 E5 B6 D1 	ld (dfgs_cam_height_3),a
   61 D1:B598 -  -  -  -  		
   62 D1:B598 ED 44 -  -  	neg 
   63 D1:B59A 32 F8 B5 D1 	ld (dfgs_viewport_to_upper_frame),a ; 1 = vp bound is on frame separator
   64 D1:B59E -  -  -  -  	
   65 D1:B59E 01 00 00 00 	ld bc,0
   66 D1:B5A2 4C -  -  -  	ld c,h;msb ccam pos 
   67 D1:B5A3 0C -  -  -  	inc c 
   68 D1:B5A4 21 0D BD D1 	ld hl,FG_Data_frame_table
   69 D1:B5A8 09 -  -  -  	add hl,bc
   70 D1:B5A9 09 -  -  -  	add hl,bc 
   71 D1:B5AA 09 -  -  -  	add hl,bc 	
   72 D1:B5AB -  -  -  -  
   73 D1:B5AB ED 27 -  -  	ld hl,(hl);upper frame 
   74 D1:B5AD -  -  -  -  
   75 D1:B5AD CD B2 B5 D1 	call draw_fg_sprites
   76 D1:B5B1 C9 -  -  -  	ret
   77 D1:B5B2 -  -  -  -  
   78 D1:B5B2 -  -  -  -  
   79 D1:B5B2 -  -  -  -  ; Upper Frame =======================================================================================================
   80 D1:B5B2 -  -  -  -  ; Upper Frame =======================================================================================================
   81 D1:B5B2 -  -  -  -  ;hl = upper frame data
   82 D1:B5B2 -  -  -  -   
   83 D1:B5B2 -  -  -  -  ;load cam height 123,vram top 12 vram bottom 1234
   84 D1:B5B2 -  -  -  -  draw_fg_sprites:
   85 D1:B5B2 -  -  -  -  	;UPPER FRAME, bottom of upper frame is not on screen, bottom of mid frame is on screen bottom of lower is not on screen
   86 D1:B5B2 ED 17 -  -  	ld de,(hl)
   87 D1:B5B4 ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de ;write sprite table ptr to required locations 
   88 D1:B5B9 ED 53 9E B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_2),de 
   89 D1:B5BE -  -  -  -  	
   90 D1:B5BE 11 00 00 00 	ld de,0
   91 D1:B5C2 23 -  -  -  	inc hl 
   92 D1:B5C3 23 -  -  -  	inc hl
   93 D1:B5C4 23 -  -  -  	inc hl;past data table 
   94 D1:B5C5 -  -  -  -  	;hl is number of elements
   95 D1:B5C5 -  -  -  -  	
   96 D1:B5C5 -  -  -  -  	
   97 D1:B5C5 -  -  -  -  	;if cam is far below upper frame, can skip upper frame 
   98 D1:B5C5 -  -  -  -  dfgs_cam_height_1 .equ $ + 1
   99 D1:B5C5 3E 00 -  -  	ld a,0 
  100 D1:B5C7 FE 78 -  -  	cp FGMaxSpriteHeight
  101 D1:B5C9 D2 DB B5 D1 	jp nc, dfgs_do_upper_loop
  102 D1:B5CD -  -  -  -  	;cam too low for upper frame sprites to be drawn
  103 D1:B5CD 01 00 00 00 	ld bc,0
  104 D1:B5D1 4E -  -  -  	ld c,(hl) ;bc holds number of elements
  105 D1:B5D2 09 -  -  -  	add hl,bc 
  106 D1:B5D3 09 -  -  -  	add hl,bc 
  107 D1:B5D4 09 -  -  -  	add hl,bc 
  108 D1:B5D5 09 -  -  -  	add hl,bc;hl points to end of current frame data 
  109 D1:B5D6 23 -  -  -  	inc hl;start of next frame
  110 D1:B5D7 C3 22 B6 D1 	jp dfgs_mid_start ;skip upper loop
  111 D1:B5DB -  -  -  -  	
  112 D1:B5DB -  -  -  -  	
  113 D1:B5DB -  -  -  -  dfgs_do_upper_loop:	
  114 D1:B5DB 08 -  -  -  	ex af,af' ;'
  115 D1:B5DC -  -  -  -  	
  116 D1:B5DC 7E -  -  -  	ld a,(hl);number of elements
  117 D1:B5DD -  -  -  -  	;TESTING
  118 D1:B5DD -  -  -  -  	;call write_a_to_ram
  119 D1:B5DD -  -  -  -  	;call prgmpause
  120 D1:B5DD -  -  -  -  	;TESTING
  121 D1:B5DD -  -  -  -  	
  122 D1:B5DD 3C -  -  -  	inc a
  123 D1:B5DE 08 -  -  -  	ex af,af' ;'
  124 D1:B5DF 23 -  -  -  	inc hl;hl points to first sprite in upper frame  
  125 D1:B5E0 -  -  -  -  
  126 D1:B5E0 -  -  -  -  dfgs_upper_loop:;Want to check for sprites in upper frame that extend to lower frame 
  127 D1:B5E0 -  -  -  -  
  128 D1:B5E0 08 -  -  -  	ex af,af';'
  129 D1:B5E1 3D -  -  -  	dec a ;dec number of elements
  130 D1:B5E2 -  -  -  -  	;call write_a_to_ram
  131 D1:B5E2 -  -  -  -  	
  132 D1:B5E2 CA 22 B6 D1 	jp z,dfgs_mid_start 
  133 D1:B5E6 08 -  -  -  	ex af,af';'
  134 D1:B5E7 -  -  -  -  
  135 D1:B5E7 7E -  -  -  	ld a,(hl);sprite y value 
  136 D1:B5E8 23 -  -  -  	inc hl ;to height
  137 D1:B5E9 -  -  -  -  	
  138 D1:B5E9 -  -  -  -  	;call write_a_to_ram
  139 D1:B5E9 -  -  -  -  	;call prgmpause
  140 D1:B5E9 CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  141 D1:B5EB C2 6D B7 D1 	jp nz, dfgs_sg_upper ;goto group loop 
  142 D1:B5EF -  -  -  -  	
  143 D1:B5EF -  -  -  -  	;otherwise single sprite, call draw routine 
  144 D1:B5EF CD F7 B5 D1 	call dfgs_draw_upper_sprite
  145 D1:B5F3 -  -  -  -  	
  146 D1:B5F3 C3 E0 B5 D1 	jp dfgs_upper_loop
  147 D1:B5F7 -  -  -  -  	
  148 D1:B5F7 -  -  -  -  
  149 D1:B5F7 -  -  -  -  ;Can be used for normal sprites and in sprite groups 
  150 D1:B5F7 -  -  -  -  ;a holds y pos in upper frame, hl pts to sprite height 
  151 D1:B5F7 -  -  -  -  dfgs_draw_upper_sprite:
  152 D1:B5F7 -  -  -  -  
  153 D1:B5F7 -  -  -  -  dfgs_viewport_to_upper_frame .equ $ + 1
  154 D1:B5F7 C6 00 -  -  	add a,0 ;a now holds number of lines to skip in current sprite (1 indexed)
  155 D1:B5F9 DA 1E B6 D1 	jp c, dfgs_upper_skip ;if sprite has large y pos, can carry over
  156 D1:B5FD BE -  -  -  	cp (hl) ;compare to sprite height 
  157 D1:B5FE D2 1E B6 D1 	jp nc, dfgs_upper_skip ;skips drawing too many lines, sprite is not on screen
  158 D1:B602 -  -  -  -  	;a holds number of lines to skip drawing
  159 D1:B602 -  -  -  -  
  160 D1:B602 -  -  -  -  dfgs_vram_top_1 .equ $ + 1 
  161 D1:B602 11 00 00 00 	ld de,0;load top of vram 
  162 D1:B606 E5 -  -  -  	push hl ;save height ptr
  163 D1:B607 CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  164 D1:B60B -  -  -  -  	
  165 D1:B60B CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  166 D1:B60D CA 19 B6 D1 	jp z,dfgs_upper_fast
  167 D1:B611 CD 18 AF D1 	call draw_slow_sprite_top_cut
  168 D1:B615 C3 1D B6 D1 	jp dfgs_upper_skip_2
  169 D1:B619 -  -  -  -  dfgs_upper_fast:
  170 D1:B619 CD 9A AE D1 	call draw_fast_sprite_top_cut
  171 D1:B61D -  -  -  -  dfgs_upper_skip_2:
  172 D1:B61D E1 -  -  -  	pop hl ;hl holds (height)
  173 D1:B61E -  -  -  -  	
  174 D1:B61E -  -  -  -  
  175 D1:B61E -  -  -  -  dfgs_upper_skip:
  176 D1:B61E 23 -  -  -  	inc hl ;to x
  177 D1:B61F 23 -  -  -  	inc hl ;to index 
  178 D1:B620 23 -  -  -  	inc hl;to y 
  179 D1:B621 -  -  -  -  	
  180 D1:B621 C9 -  -  -  	ret ;end of dfgs_draw_upper_sprite
  181 D1:B622 -  -  -  -  	
  182 D1:B622 -  -  -  -  	;ld a,$AA
  183 D1:B622 -  -  -  -  	;call write_a_to_ram
  184 D1:B622 -  -  -  -  	;call prgmpause
  185 D1:B622 -  -  -  -  	
  186 D1:B622 -  -  -  -  
  187 D1:B622 -  -  -  -  ;MIDDLE FRAME ====================================================================================================
  188 D1:B622 -  -  -  -  	
  189 D1:B622 -  -  -  -  dfgs_mid_start:;MIDDLE FRAME, can be top cut, no cut, or bottom cut ===============================================
  190 D1:B622 -  -  -  -  	
  191 D1:B622 ED 17 -  -  	ld de,(hl) ;load sprite table ptr 
  192 D1:B624 ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  193 D1:B629 ED 53 DB B7 
              D1 -  -  -  	ld (dfgs_sprite_pointers_3),de 
  194 D1:B62E 11 00 00 00 	ld de,0
  195 D1:B632 23 -  -  -  	inc hl 
  196 D1:B633 23 -  -  -  	inc hl
  197 D1:B634 23 -  -  -  	inc hl;past sprite table ptr
  198 D1:B635 08 -  -  -  	ex af,af' ;'
  199 D1:B636 7E -  -  -  	ld a,(hl);number of elements
  200 D1:B637 3C -  -  -  	inc a 
  201 D1:B638 08 -  -  -  	ex af,af' ;'
  202 D1:B639 -  -  -  -  	
  203 D1:B639 23 -  -  -  	inc hl ;to first y val 
  204 D1:B63A -  -  -  -  dfgs_mid_loop:
  205 D1:B63A -  -  -  -  	
  206 D1:B63A 08 -  -  -  	ex af,af';'
  207 D1:B63B 3D -  -  -  	dec a 
  208 D1:B63C -  -  -  -  	;call write_a_to_ram
  209 D1:B63C CA CC B6 D1 	jp z,dfgs_lower_start ;check for end of data
  210 D1:B640 08 -  -  -  	ex af,af';'
  211 D1:B641 -  -  -  -  
  212 D1:B641 -  -  -  -  	;ld a, $AB
  213 D1:B641 -  -  -  -  	;call write_a_to_ram
  214 D1:B641 -  -  -  -  
  215 D1:B641 7E -  -  -  	ld a,(hl);y val of sprite in dataframe
  216 D1:B642 -  -  -  -  	;call write_a_to_ram
  217 D1:B642 23 -  -  -  	inc hl ;to height
  218 D1:B643 -  -  -  -  	
  219 D1:B643 CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  220 D1:B645 C2 AA B7 D1 	jp nz, dfgs_sg_mid ;goto group loop 
  221 D1:B649 -  -  -  -  	
  222 D1:B649 -  -  -  -  	;otherwise, draw single sprite 
  223 D1:B649 CD 51 B6 D1 	call dfgs_draw_mid_sprite
  224 D1:B64D -  -  -  -  	
  225 D1:B64D C3 3A B6 D1 	jp dfgs_mid_loop
  226 D1:B651 -  -  -  -  	
  227 D1:B651 -  -  -  -  	
  228 D1:B651 -  -  -  -  	
  229 D1:B651 -  -  -  -  	;a = ypos in mid frame, hl pts to height
  230 D1:B651 -  -  -  -  dfgs_draw_mid_sprite:	
  231 D1:B651 -  -  -  -  	
  232 D1:B651 -  -  -  -  dfgs_cam_height_2 .equ $ + 1 ;y value in dataframe of uppermost line of viewport
  233 D1:B651 D6 00 -  -  	sub 0;subtract cam pos
  234 D1:B653 CA 5B B6 D1 	jp z, dfgs_mid_sprite_topline ;check case where sprite is on top line of viewport
  235 D1:B657 D2 A7 B6 D1 	jp nc, dfgs_mid_sprite_above ; carried, sprite is above viewport boundary, a holds num lines to skip
  236 D1:B65B -  -  -  -  dfgs_mid_sprite_topline:
  237 D1:B65B -  -  -  -  
  238 D1:B65B -  -  -  -  	;Sprite is below viewport bound, either full or bottom cut 
  239 D1:B65B -  -  -  -  	
  240 D1:B65B -  -  -  -  	;neg ;a holds number of lines sprite is below top of viewport 
  241 D1:B65B -  -  -  -  
  242 D1:B65B -  -  -  -  	;need to check if sprite is partially or entirely below veiwport
  243 D1:B65B -  -  -  -  	
  244 D1:B65B -  -  -  -  	;sub 240
  245 D1:B65B -  -  -  -  	;jp nc, dfgs_mid_skip ;sprite is entirely below viewport 
  246 D1:B65B -  -  -  -  	;otherwise, a holds -lines to draw 
  247 D1:B65B -  -  -  -  	;neg ;a holds lines above viewport bottom (1 indexed) 
  248 D1:B65B -  -  -  -  
  249 D1:B65B -  -  -  -  	;Different setup 
  250 D1:B65B -  -  -  -  	;a = sprite y - cam pos 
  251 D1:B65B C6 EF -  -  	add a,239 
  252 D1:B65D D2 83 B6 D1 	jp nc, dfgs_mid_skip
  253 D1:B661 -  -  -  -  	
  254 D1:B661 -  -  -  -  	;a holds y pos above bottom of vp (0 indexed )
  255 D1:B661 3C -  -  -  	inc a 
  256 D1:B662 BE -  -  -  	cp (hl) ;compare to sprite height 
  257 D1:B663 DA 87 B6 D1 	jp c, dfgs_mid_bottom_cut ;height > lines to draw, bottom is cut off 
  258 D1:B667 -  -  -  -  	;otherwise, draw full sprite 
  259 D1:B667 -  -  -  -  	
  260 D1:B667 -  -  -  -  dfgs_vram_bottom_1 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  261 D1:B667 11 00 00 00 	ld de,0;load bottom of vram 
  262 D1:B66B E5 -  -  -  	push hl ;save height ptr
  263 D1:B66C CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  264 D1:B670 -  -  -  -  	
  265 D1:B670 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  266 D1:B672 CA 7E B6 D1 	jp z,dfgs_mid_full_fast
  267 D1:B676 CD DA AE D1 	call draw_slow_sprite_full
  268 D1:B67A C3 82 B6 D1 	jp dfgs_mid_skip_1
  269 D1:B67E -  -  -  -  dfgs_mid_full_fast:
  270 D1:B67E CD C0 AE D1 	call draw_fast_sprite_full
  271 D1:B682 -  -  -  -  dfgs_mid_skip_1:
  272 D1:B682 E1 -  -  -  	pop hl ;hl holds (height)
  273 D1:B683 -  -  -  -  	
  274 D1:B683 -  -  -  -  dfgs_mid_skip:;sprite is entirely above or below cam pos 
  275 D1:B683 23 -  -  -  	inc hl ;x
  276 D1:B684 23 -  -  -  	inc hl ;index 
  277 D1:B685 23 -  -  -  	inc hl;to y 
  278 D1:B686 -  -  -  -  	
  279 D1:B686 C9 -  -  -  	ret
  280 D1:B687 -  -  -  -  	
  281 D1:B687 -  -  -  -  
  282 D1:B687 -  -  -  -  dfgs_mid_bottom_cut:
  283 D1:B687 -  -  -  -  dfgs_vram_bottom_2 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  284 D1:B687 11 00 00 00 	ld de,0;load bottom of vram 
  285 D1:B68B E5 -  -  -  	push hl ;save height ptr
  286 D1:B68C CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  287 D1:B690 -  -  -  -  	
  288 D1:B690 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  289 D1:B692 CA 9E B6 D1 	jp z,dfgs_mid_bcut_fast
  290 D1:B696 CD 45 AF D1 	call draw_slow_sprite_bottom_cut
  291 D1:B69A C3 A2 B6 D1 	jp dfgs_mid_skip_2
  292 D1:B69E -  -  -  -  dfgs_mid_bcut_fast:
  293 D1:B69E CD 7D AE D1 	call draw_fast_sprite_bottom_cut
  294 D1:B6A2 -  -  -  -  dfgs_mid_skip_2:
  295 D1:B6A2 E1 -  -  -  	pop hl ;hl holds (height)
  296 D1:B6A3 C3 83 B6 D1 	jp dfgs_mid_skip
  297 D1:B6A7 -  -  -  -  
  298 D1:B6A7 -  -  -  -  dfgs_mid_sprite_above:
  299 D1:B6A7 -  -  -  -  	;a holds lines to skip 
  300 D1:B6A7 BE -  -  -  	cp (hl) ;compare to height
  301 D1:B6A8 D2 83 B6 D1 	jp nc, dfgs_mid_skip ;skip sprite, entirely above viewport
  302 D1:B6AC -  -  -  -  
  303 D1:B6AC -  -  -  -  dfgs_vram_top_2 .equ $ + 1
  304 D1:B6AC 11 00 00 00 	ld de,0;top of vram 
  305 D1:B6B0 E5 -  -  -  	push hl ;save height ptr
  306 D1:B6B1 CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  307 D1:B6B5 -  -  -  -  	
  308 D1:B6B5 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  309 D1:B6B7 CA C3 B6 D1 	jp z,dfgs_mid_tcut_fast
  310 D1:B6BB CD 18 AF D1 	call draw_slow_sprite_top_cut
  311 D1:B6BF C3 C7 B6 D1 	jp dfgs_mid_skip_3
  312 D1:B6C3 -  -  -  -  dfgs_mid_tcut_fast:
  313 D1:B6C3 CD 9A AE D1 	call draw_fast_sprite_top_cut
  314 D1:B6C7 -  -  -  -  dfgs_mid_skip_3:
  315 D1:B6C7 E1 -  -  -  	pop hl ;hl holds (height)
  316 D1:B6C8 C3 83 B6 D1 	jp dfgs_mid_skip
  317 D1:B6CC -  -  -  -  	
  318 D1:B6CC -  -  -  -  	
  319 D1:B6CC -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================		
  320 D1:B6CC -  -  -  -  ;BOTTOM FRAME, FULL OR BOTTOM CUT===========================================================================	
  321 D1:B6CC -  -  -  -  dfgs_lower_start:
  322 D1:B6CC -  -  -  -  	
  323 D1:B6CC ED 17 -  -  	ld de,(hl) ;load sprite table ptr
  324 D1:B6CE ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de
  325 D1:B6D3 ED 53 14 B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_4),de
  326 D1:B6D8 11 00 00 00 	ld de,0
  327 D1:B6DC 23 -  -  -  	inc hl 
  328 D1:B6DD 23 -  -  -  	inc hl
  329 D1:B6DE 23 -  -  -  	inc hl;past data table 
  330 D1:B6DF -  -  -  -  	
  331 D1:B6DF 08 -  -  -  	ex af,af' ;'
  332 D1:B6E0 7E -  -  -  	ld a,(hl);number of elements
  333 D1:B6E1 3C -  -  -  	inc a 
  334 D1:B6E2 08 -  -  -  	ex af,af' ;'
  335 D1:B6E3 23 -  -  -  	inc hl
  336 D1:B6E4 -  -  -  -  	
  337 D1:B6E4 -  -  -  -  
  338 D1:B6E4 -  -  -  -  dfgs_cam_height_3 .equ $ + 1 
  339 D1:B6E4 3E 00 -  -  	ld a, 0
  340 D1:B6E6 D6 EF -  -  	sub 239
  341 D1:B6E8 D0 -  -  -  	ret nc;if bottom frame is offscreen 
  342 D1:B6E9 -  -  -  -  
  343 D1:B6E9 -  -  -  -  	;a holds y value of viewport bottom line in lower frame 
  344 D1:B6E9 32 02 B7 D1 	ld (dfgs_viewport_bottom_y),a
  345 D1:B6ED -  -  -  -  
  346 D1:B6ED -  -  -  -  dfgs_lower_loop:
  347 D1:B6ED -  -  -  -  
  348 D1:B6ED 08 -  -  -  	ex af,af';'
  349 D1:B6EE 3D -  -  -  	dec a 
  350 D1:B6EF C8 -  -  -  	ret z
  351 D1:B6F0 08 -  -  -  	ex af,af';'
  352 D1:B6F1 -  -  -  -  	
  353 D1:B6F1 7E -  -  -  	ld a,(hl);y
  354 D1:B6F2 23 -  -  -  	inc hl ;inc to height
  355 D1:B6F3 -  -  -  -  	
  356 D1:B6F3 CB 7E -  -  	bit 7, (hl) ;Check for sprite group
  357 D1:B6F5 C2 E7 B7 D1 	jp nz, dfgs_sg_lower ;goto group loop 
  358 D1:B6F9 -  -  -  -  	
  359 D1:B6F9 -  -  -  -  	;otherwise, draw single sprite 
  360 D1:B6F9 CD 01 B7 D1 	call dfgs_draw_lower_sprite
  361 D1:B6FD -  -  -  -  	
  362 D1:B6FD C3 ED B6 D1 	jp dfgs_lower_loop
  363 D1:B701 -  -  -  -  
  364 D1:B701 -  -  -  -  	
  365 D1:B701 -  -  -  -  dfgs_draw_lower_sprite: ;a = ypos, hl pts to height
  366 D1:B701 -  -  -  -  dfgs_viewport_bottom_y .equ $ + 1
  367 D1:B701 D6 00 -  -  	sub a,0;subtract y val of viewport bottom
  368 D1:B703 DA 29 B7 D1 	jp c,dfgs_lower_skip;sprite below screen
  369 D1:B707 -  -  -  -  	
  370 D1:B707 3C -  -  -  	inc a
  371 D1:B708 -  -  -  -  	;a holds number of lines to draw 
  372 D1:B708 BE -  -  -  	cp (hl) ;compare to sprite height 
  373 D1:B709 DA 2D B7 D1 	jp c, dfgs_lower_bottom_cut ;bottom is below viewport 
  374 D1:B70D -  -  -  -  	
  375 D1:B70D -  -  -  -  	;draw full sprite 
  376 D1:B70D -  -  -  -  dfgs_vram_bottom_3 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  377 D1:B70D 11 00 00 00 	ld de,0;load bottom of vram 
  378 D1:B711 E5 -  -  -  	push hl ;save height ptr
  379 D1:B712 CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  380 D1:B716 -  -  -  -  	
  381 D1:B716 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  382 D1:B718 CA 24 B7 D1 	jp z,dfgs_lower_full_fast
  383 D1:B71C CD DA AE D1 	call draw_slow_sprite_full
  384 D1:B720 C3 28 B7 D1 	jp dfgs_lower_skip_1
  385 D1:B724 -  -  -  -  dfgs_lower_full_fast:
  386 D1:B724 CD C0 AE D1 	call draw_fast_sprite_full
  387 D1:B728 -  -  -  -  dfgs_lower_skip_1:
  388 D1:B728 E1 -  -  -  	pop hl ;hl holds (height)
  389 D1:B729 -  -  -  -  
  390 D1:B729 -  -  -  -  dfgs_lower_skip:;sprite offscreen
  391 D1:B729 23 -  -  -  	inc hl ;x 
  392 D1:B72A 23 -  -  -  	inc hl ;index 
  393 D1:B72B 23 -  -  -  	inc hl;to y 
  394 D1:B72C -  -  -  -  
  395 D1:B72C C9 -  -  -  	ret
  396 D1:B72D -  -  -  -  	
  397 D1:B72D -  -  -  -  dfgs_lower_bottom_cut: 
  398 D1:B72D -  -  -  -  dfgs_vram_bottom_4 .equ $ + 1  ;FULL SPRITE, a = lines above bottom of viewport
  399 D1:B72D 11 00 00 00 	ld de,0;load bottom of vram 
  400 D1:B731 E5 -  -  -  	push hl ;save height ptr
  401 D1:B732 CD 20 B8 D1 	call dfgs_setup_draw;hl = sprite ptr, de = vram addr
  402 D1:B736 -  -  -  -  	
  403 D1:B736 CB 45 -  -  	bit 0,l ;location of sprite data in vram indicates fast or slow sprite
  404 D1:B738 CA 44 B7 D1 	jp z,dfgs_lower_bcut_fast ;even= fast
  405 D1:B73C CD 45 AF D1 	call draw_slow_sprite_bottom_cut
  406 D1:B740 C3 48 B7 D1 	jp dfgs_lower_skip_2
  407 D1:B744 -  -  -  -  dfgs_lower_bcut_fast:
  408 D1:B744 CD 7D AE D1 	call draw_fast_sprite_bottom_cut
  409 D1:B748 -  -  -  -  dfgs_lower_skip_2:
  410 D1:B748 E1 -  -  -  	pop hl ;hl holds (height)
  411 D1:B749 C3 29 B7 D1 	jp dfgs_lower_skip
  412 D1:B74D -  -  -  -  	
  413 D1:B74D -  -  -  -  
  414 D1:B74D -  -  -  -  ;===================================================================================================================
  415 D1:B74D -  -  -  -  ;SPRITE GROUPS =====================================================================================================
  416 D1:B74D -  -  -  -  
  417 D1:B74D -  -  -  -  dfgs_sg_setup:
  418 D1:B74D 23 -  -  -  	inc hl ;hl points to xPos of sprite group 
  419 D1:B74E 7E -  -  -  	ld a,(hl)
  420 D1:B74F 32 34 B8 D1 	ld (dfgs_sg_x_origin),a ;TODO set back to 0 after sprite group is done 
  421 D1:B753 -  -  -  -  	
  422 D1:B753 23 -  -  -  	inc hl ; index 
  423 D1:B754 4E -  -  -  	ld c,(hl) ;sprite group index 
  424 D1:B755 23 -  -  -  	inc hl; to next sprite 
  425 D1:B756 E5 -  -  -  	push hl ;save frame data location 
  426 D1:B757 -  -  -  -  			
  427 D1:B757 2A 6E CA D1 	ld hl, (Sprite_Groups_Table)
  428 D1:B75B 09 -  -  -  	add hl,bc 
  429 D1:B75C 09 -  -  -  	add hl,bc 
  430 D1:B75D 09 -  -  -  	add hl,bc 
  431 D1:B75E -  -  -  -  	;hl now points to correct sprite group ptr 
  432 D1:B75E ED 27 -  -  	ld hl, (hl)
  433 D1:B760 -  -  -  -  	;hl pts to sprite table for this group 
  434 D1:B760 ED 17 -  -  	ld de,(hl)
  435 D1:B762 ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1), de ;NEed to undo after loop is done 
  436 D1:B767 -  -  -  -  	
  437 D1:B767 23 -  -  -  	inc hl 
  438 D1:B768 23 -  -  -  	inc hl 
  439 D1:B769 23 -  -  -  	inc hl ;to num sprites 
  440 D1:B76A 7E -  -  -  	ld a,(hl) ;num sprites in group
  441 D1:B76B 23 -  -  -  	inc hl;first sprite y 
  442 D1:B76C C9 -  -  -  	ret
  443 D1:B76D -  -  -  -  	
  444 D1:B76D -  -  -  -  	;Sprite group in upper frame. a holds y pos of sprite group. HL points to height (unused)
  445 D1:B76D -  -  -  -  dfgs_sg_upper:	
  446 D1:B76D 32 7A B7 D1 	ld (dfgs_sg_upper_y_origin),a
  447 D1:B771 CD 4D B7 D1 	call dfgs_sg_setup ;returns with a = num sprites
  448 D1:B775 32 8E B7 D1 	ld (dfgs_sg_upper_count),a 
  449 D1:B779 -  -  -  -  	
  450 D1:B779 -  -  -  -  dfgs_sg_upper_loop:
  451 D1:B779 -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  452 D1:B779 -  -  -  -  	;if no carry, sprite is still in upper frame, a holds pos in upper frame 
  453 D1:B779 -  -  -  -  	;if carry sprite is entirely in mid frame, a holds y pos in mid frame 
  454 D1:B779 -  -  -  -  dfgs_sg_upper_y_origin .equ $ + 1 
  455 D1:B779 3E 00 -  -  	ld a, 0
  456 D1:B77B 96 -  -  -  	sub a,(hl)
  457 D1:B77C 23 -  -  -  	inc hl ;to height
  458 D1:B77D D2 89 B7 D1 	jp nc, dfgs_sg_upper_draw_upper
  459 D1:B781 -  -  -  -  	
  460 D1:B781 CD 51 B6 D1 	call dfgs_draw_mid_sprite
  461 D1:B785 C3 8D B7 D1 	jp dfgs_sg_upper_continue
  462 D1:B789 -  -  -  -  	;otherwise, sprite is entirely in mid frame, a holds y pos in mid frame
  463 D1:B789 -  -  -  -  	
  464 D1:B789 -  -  -  -  	
  465 D1:B789 -  -  -  -  dfgs_sg_upper_draw_upper:
  466 D1:B789 CD F7 B5 D1 	call dfgs_draw_upper_sprite
  467 D1:B78D -  -  -  -  dfgs_sg_upper_continue:
  468 D1:B78D -  -  -  -  dfgs_sg_upper_count .equ $ + 1
  469 D1:B78D 3E 00 -  -  	ld a, 0
  470 D1:B78F 3D -  -  -  	dec a 
  471 D1:B790 32 8E B7 D1 	ld (dfgs_sg_upper_count),a 
  472 D1:B794 C2 79 B7 D1 	jp nz, dfgs_sg_upper_loop 
  473 D1:B798 -  -  -  -  	;otherwise, end of sprite group 
  474 D1:B798 32 34 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  475 D1:B79C E1 -  -  -  	pop hl ;start of next sprite in data frame
  476 D1:B79D -  -  -  -  dfgs_sprite_pointers_2 .equ $ + 1
  477 D1:B79D 11 00 00 00 	ld de, 0
  478 D1:B7A1 ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  479 D1:B7A6 -  -  -  -  
  480 D1:B7A6 C3 E0 B5 D1 	jp dfgs_upper_loop
  481 D1:B7AA -  -  -  -  	
  482 D1:B7AA -  -  -  -  
  483 D1:B7AA -  -  -  -  
  484 D1:B7AA -  -  -  -  ;SG MID =========================================================================================================
  485 D1:B7AA -  -  -  -  	;Sprite group in middle frame. a holds y pos of sprite group. HL points to height (unused)
  486 D1:B7AA -  -  -  -  dfgs_sg_mid:	
  487 D1:B7AA 32 B7 B7 D1 	ld (dfgs_sg_mid_y_origin),a
  488 D1:B7AE CD 4D B7 D1 	call dfgs_sg_setup 
  489 D1:B7B2 32 CB B7 D1 	ld (dfgs_sg_mid_count),a
  490 D1:B7B6 -  -  -  -  dfgs_sg_mid_loop:
  491 D1:B7B6 -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  492 D1:B7B6 -  -  -  -  	;if no carry, sprite is still in mid frame, a holds pos in mid frame 
  493 D1:B7B6 -  -  -  -  	;if carry sprite is entirely in lower frame, a holds y pos in lower frame 
  494 D1:B7B6 -  -  -  -  dfgs_sg_mid_y_origin .equ $ + 1 
  495 D1:B7B6 3E 00 -  -  	ld a, 0
  496 D1:B7B8 96 -  -  -  	sub a,(hl)
  497 D1:B7B9 23 -  -  -  	inc hl ;to height
  498 D1:B7BA D2 C6 B7 D1 	jp nc, dfgs_sg_mid_draw_mid
  499 D1:B7BE -  -  -  -  	
  500 D1:B7BE CD 01 B7 D1 	call dfgs_draw_lower_sprite
  501 D1:B7C2 C3 CA B7 D1 	jp dfgs_sg_mid_continue
  502 D1:B7C6 -  -  -  -  	;otherwise, sprite is entirely in mid frame, a holds y pos in mid frame
  503 D1:B7C6 -  -  -  -  	
  504 D1:B7C6 -  -  -  -  	
  505 D1:B7C6 -  -  -  -  dfgs_sg_mid_draw_mid:
  506 D1:B7C6 CD 51 B6 D1 	call dfgs_draw_mid_sprite
  507 D1:B7CA -  -  -  -  dfgs_sg_mid_continue:
  508 D1:B7CA -  -  -  -  dfgs_sg_mid_count .equ $ + 1
  509 D1:B7CA 3E 00 -  -  	ld a, 0
  510 D1:B7CC 3D -  -  -  	dec a 
  511 D1:B7CD 32 CB B7 D1 	ld (dfgs_sg_mid_count),a 
  512 D1:B7D1 C2 B6 B7 D1 	jp nz, dfgs_sg_mid_loop 
  513 D1:B7D5 -  -  -  -  	;otherwise, end of sprite group 
  514 D1:B7D5 32 34 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  515 D1:B7D9 E1 -  -  -  	pop hl ;start of next sprite in data frame
  516 D1:B7DA -  -  -  -  dfgs_sprite_pointers_3 .equ $ + 1
  517 D1:B7DA 11 00 00 00 	ld de, 0
  518 D1:B7DE ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  519 D1:B7E3 -  -  -  -  
  520 D1:B7E3 C3 3A B6 D1 	jp dfgs_mid_loop
  521 D1:B7E7 -  -  -  -  	
  522 D1:B7E7 -  -  -  -  	
  523 D1:B7E7 -  -  -  -  	
  524 D1:B7E7 -  -  -  -  ;SG Lower =========================================================================================================
  525 D1:B7E7 -  -  -  -  	;Sprite group in lower frame. a holds y pos of sprite group. HL points to height (unused)
  526 D1:B7E7 -  -  -  -  dfgs_sg_lower:	
  527 D1:B7E7 32 F4 B7 D1 	ld (dfgs_sg_lower_y_origin),a
  528 D1:B7EB CD 4D B7 D1 	call dfgs_sg_setup 
  529 D1:B7EF 32 04 B8 D1 	ld (dfgs_sg_lower_count),a
  530 D1:B7F3 -  -  -  -  dfgs_sg_lower_loop:
  531 D1:B7F3 -  -  -  -  	;take y pos of group origin, subtract y offset of sprite 
  532 D1:B7F3 -  -  -  -  	;if no carry, sprite is still in lower frame, a holds pos in lower frame 
  533 D1:B7F3 -  -  -  -  	;if carry sprite is offscreen
  534 D1:B7F3 -  -  -  -  dfgs_sg_lower_y_origin .equ $ + 1 
  535 D1:B7F3 3E 00 -  -  	ld a, 0
  536 D1:B7F5 96 -  -  -  	sub a,(hl)
  537 D1:B7F6 23 -  -  -  	inc hl ;to height
  538 D1:B7F7 D2 FF B7 D1 	jp nc, dfgs_sg_lower_draw_lower
  539 D1:B7FB -  -  -  -  	
  540 D1:B7FB C3 03 B8 D1 	jp dfgs_sg_lower_continue
  541 D1:B7FF -  -  -  -  	;otherwise, sprite is entirely in mid frame, a holds y pos in mid frame
  542 D1:B7FF -  -  -  -  	
  543 D1:B7FF -  -  -  -  	
  544 D1:B7FF -  -  -  -  dfgs_sg_lower_draw_lower:
  545 D1:B7FF CD 01 B7 D1 	call dfgs_draw_lower_sprite
  546 D1:B803 -  -  -  -  dfgs_sg_lower_continue:
  547 D1:B803 -  -  -  -  dfgs_sg_lower_count .equ $ + 1
  548 D1:B803 3E 00 -  -  	ld a, 0
  549 D1:B805 3D -  -  -  	dec a 
  550 D1:B806 32 04 B8 D1 	ld (dfgs_sg_lower_count),a 
  551 D1:B80A C2 F3 B7 D1 	jp nz, dfgs_sg_lower_loop 
  552 D1:B80E -  -  -  -  	;otherwise, end of sprite group 
  553 D1:B80E 32 34 B8 D1 	ld (dfgs_sg_x_origin),a  ;already 0 
  554 D1:B812 E1 -  -  -  	pop hl ;start of next sprite in data frame
  555 D1:B813 -  -  -  -  dfgs_sprite_pointers_4 .equ $ + 1
  556 D1:B813 11 00 00 00 	ld de, 0
  557 D1:B817 ED 53 3A B8 
              D1 -  -  -  	ld (dfgs_sprite_pointers_1),de 
  558 D1:B81C -  -  -  -  
  559 D1:B81C C3 ED B6 D1 	jp dfgs_lower_loop
  560 D1:B820 -  -  -  -  	
  561 D1:B820 -  -  -  -  	
  562 D1:B820 -  -  -  -  	
  563 D1:B820 -  -  -  -  	
  564 D1:B820 -  -  -  -  ;a holds distance from bottom of screen, starting from 0, or for top cut dist above screen = num lines to skip 
  565 D1:B820 -  -  -  -  ;(hl) = height 	
  566 D1:B820 -  -  -  -  ;de = initial vram, top for top cut, otherwise bottom
  567 D1:B820 -  -  -  -  
  568 D1:B820 -  -  -  -  ;Subtracts a lines from de (initial vram pos),
  569 D1:B820 -  -  -  -  ;returns hl = sprite data, de = new vram position
  570 D1:B820 -  -  -  -  dfgs_setup_draw:
  571 D1:B820 23 -  -  -  	inc hl ;x pos 
  572 D1:B821 01 00 00 00 	ld bc,0
  573 D1:B825 4E -  -  -  	ld c,(hl); x pos
  574 D1:B826 23 -  -  -  	inc hl;to index
  575 D1:B827 E5 -  -  -  	push hl;save sprite index 
  576 D1:B828 26 A0 -  -  	ld h,160
  577 D1:B82A 6F -  -  -  	ld l,a ;number of lines to subtract 
  578 D1:B82B ED 6C -  -  	mlt hl;subtract from vram
  579 D1:B82D 37 -  -  -  	scf 
  580 D1:B82E 3F -  -  -  	ccf
  581 D1:B82F EB -  -  -  	ex de,hl;hl holds initial vram pos, de is lines to subtract  
  582 D1:B830 ED 52 -  -  	sbc hl,de ;subtract to get sprite draw start line 
  583 D1:B832 09 -  -  -  	add hl,bc;add x pos ;hl now holds sprite draw start pos 
  584 D1:B833 -  -  -  -  dfgs_sg_x_origin .equ $ + 1 ;TODO set
  585 D1:B833 0E 00 -  -  	ld c, 0
  586 D1:B835 09 -  -  -  	add hl,bc;add sprite group x pos offset (if applicable)
  587 D1:B836 EB -  -  -  	ex de,hl;put in de
  588 D1:B837 E1 -  -  -  	pop hl;back to frame data 
  589 D1:B838 4E -  -  -  	ld c,(hl);sprite index
  590 D1:B839 -  -  -  -  dfgs_sprite_pointers_1 .equ $ + 1	
  591 D1:B839 21 00 00 00 	ld hl,0 ;load sprite table 
  592 D1:B83D 09 -  -  -  	add hl,bc
  593 D1:B83E 09 -  -  -  	add hl,bc 
  594 D1:B83F 09 -  -  -  	add hl,bc;move to sprite ptr
  595 D1:B840 -  -  -  -  	;call prgmpause
  596 D1:B840 ED 27 -  -  	ld hl,(hl);hl holds sprite data, if even = fast sprite 
  597 D1:B842 -  -  -  -  
  598 D1:B842 C9 -  -  -  	ret
  599 D1:B843 -  -  -  -  
  600 D1:B843 -  -  -  -  	
  601 D1:B843 -  -  -  -  	
  602 D1:B843 -  -  -  -  	
  603 D1:B843 -  -  -  -  	
  604 D1:B843 -  -  -  -  	
  605 D1:B843 -  -  -  -  	
  606 D1:B843 -  -  -  -  	
  607 D1:B843 -  -  -  -  	
  608 D1:B843 -  -  -  -  	
  609 D1:B843 -  -  -  -  	
  610 D1:B843 -  -  -  -  	
  611 D1:B843 -  -  -  -  	
Listing for file "ascent.asm"
  520 D1:B843 -  -  -  -  #include "SpriteDecompressManager.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\SpriteDecompressManager.txt"
    1 D1:B843 -  -  -  -  
    2 D1:B843 -  -  -  -  
    3 D1:B843 -  -  -  -  decompress_queue_start .equ vram
    4 D1:B843 -  -  -  -  
    5 D1:B843 -  -  -  -  decompress_queue_end .equ vram + (7*64) ;Max queue length of 64 TODO change back
    6 D1:B843 -  -  -  -  
    7 D1:B843 -  -  -  -  decompress_tail_ptr:
    8 D1:B843 06 00 D4 -  	.dl decompress_queue_start + 6  ;points to sprite being currently decompressed (parameters byte)
    9 D1:B846 -  -  -  -  
   10 D1:B846 -  -  -  -  decompress_head_ptr: ;points to where next element will be added to queue
   11 D1:B846 00 00 D4 -  	.dl decompress_queue_start
   12 D1:B849 -  -  -  -  
   13 D1:B849 -  -  -  -  ;Decompress queue format
   14 D1:B849 -  -  -  -  ; .dl Sprite data ptr, decompress location, parameters (7 = fast, 6 = offset, 5 = flip, 4 =started decompressing 3 = finished decompressing )
   15 D1:B849 -  -  -  -  
   16 D1:B849 -  -  -  -  setup_decompress_queue: ;clears memory in queue
   17 D1:B849 3E FF -  -  	ld a,$FF
   18 D1:B84B 01 C0 01 00 	ld bc, 7*64
   19 D1:B84F 21 00 00 D4 	ld hl, decompress_queue_start
   20 D1:B853 CD E0 10 02 	call _MemSet
   21 D1:B857 C9 -  -  -  	ret 
   22 D1:B858 -  -  -  -  
   23 D1:B858 -  -  -  -  ;bc = sprite data ptr, de = decompress location, a = params
   24 D1:B858 -  -  -  -  ;adds sprite to queue
   25 D1:B858 -  -  -  -  add_to_decompress_queue:
   26 D1:B858 2A 46 B8 D1 	ld hl, (decompress_head_ptr)
   27 D1:B85C ED 0F -  -  	ld (hl), bc 
   28 D1:B85E 23 -  -  -  	inc hl
   29 D1:B85F 23 -  -  -  	inc hl 
   30 D1:B860 23 -  -  -  	inc hl 
   31 D1:B861 -  -  -  -  
   32 D1:B861 ED 1F -  -  	ld (hl),de
   33 D1:B863 -  -  -  -  	
   34 D1:B863 23 -  -  -  	inc hl 
   35 D1:B864 23 -  -  -  	inc hl 
   36 D1:B865 23 -  -  -  	inc hl 
   37 D1:B866 -  -  -  -  	
   38 D1:B866 77 -  -  -  	ld (hl), a 
   39 D1:B867 23 -  -  -  	inc hl ;start of next element 
   40 D1:B868 -  -  -  -  	
   41 D1:B868 E5 -  -  -  	push hl 
   42 D1:B869 11 C0 01 D4 	ld de, decompress_queue_end
   43 D1:B86D 37 -  -  -  	scf
   44 D1:B86E 3F -  -  -  	ccf
   45 D1:B86F ED 52 -  -  	sbc hl,de ;check if we have reached end of queue to wrap around
   46 D1:B871 E1 -  -  -  	pop hl
   47 D1:B872 CA 7B B8 D1 	jp z, a2dq_back_to_start
   48 D1:B876 -  -  -  -  	
   49 D1:B876 22 46 B8 D1 	ld (decompress_head_ptr),hl
   50 D1:B87A -  -  -  -  	;ld a,$AB ;testing
   51 D1:B87A -  -  -  -  	;call write_a_to_ram
   52 D1:B87A C9 -  -  -  	ret
   53 D1:B87B -  -  -  -  	
   54 D1:B87B -  -  -  -  a2dq_back_to_start:
   55 D1:B87B -  -  -  -  	;ld a,$AA ;testing
   56 D1:B87B -  -  -  -  	;call write_a_to_ram
   57 D1:B87B -  -  -  -  
   58 D1:B87B 21 00 00 D4 	ld hl,decompress_queue_start
   59 D1:B87F 22 46 B8 D1 	ld (decompress_head_ptr),hl
   60 D1:B883 C9 -  -  -  	ret
   61 D1:B884 -  -  -  -  	
   62 D1:B884 -  -  -  -  	
   63 D1:B884 -  -  -  -  
   64 D1:B884 -  -  -  -  
   65 D1:B884 -  -  -  -  ;Runs after frame has been rendered. Checks through decompress queue and continues sprite decompressions
   66 D1:B884 -  -  -  -  	;if has ended, return. at end of queue
   67 D1:B884 -  -  -  -  	;if not started, begin decompression and set start flag
   68 D1:B884 -  -  -  -  	;if has started, but not ended, continue decompression 
   69 D1:B884 -  -  -  -  	;if started and ended, move to next element 
   70 D1:B884 -  -  -  -  continue_decompressions:
   71 D1:B884 2A 43 B8 D1 	ld hl, (decompress_tail_ptr)
   72 D1:B888 7E -  -  -  	ld a,(hl) ;decompress params 
   73 D1:B889 CB 5F -  -  	bit 3,a 
   74 D1:B88B C0 -  -  -  	ret nz ;sprite is done decompressing, at end of queue 
   75 D1:B88C -  -  -  -  	
   76 D1:B88C -  -  -  -  	;testing
   77 D1:B88C -  -  -  -  	;push af
   78 D1:B88C -  -  -  -  	;ld a,$55
   79 D1:B88C -  -  -  -  	;call write_a_to_ram
   80 D1:B88C -  -  -  -  	;pop af
   81 D1:B88C -  -  -  -  	
   82 D1:B88C -  -  -  -  	
   83 D1:B88C -  -  -  -  	
   84 D1:B88C -  -  -  -  	
   85 D1:B88C CB 67 -  -  	bit 4,a
   86 D1:B88E CA CA B8 D1 	jp z, cd_begin_decompression
   87 D1:B892 -  -  -  -  	
   88 D1:B892 -  -  -  -  	;has started,not ended 
   89 D1:B892 CD C0 B2 D1 	call sdcomp_continue 
   90 D1:B896 B7 -  -  -  	or a 
   91 D1:B897 C0 -  -  -  	ret nz ;sprite not yet done decompressing 
   92 D1:B898 -  -  -  -  
   93 D1:B898 -  -  -  -  cd_done_decompressing:
   94 D1:B898 -  -  -  -  	;sprite finished decompressing
   95 D1:B898 2A 43 B8 D1 	ld hl, (decompress_tail_ptr)	
   96 D1:B89C CB DE -  -  	set 3,(hl) ;set finished flag
   97 D1:B89E 11 07 00 00 	ld de,7 
   98 D1:B8A2 19 -  -  -  	add hl,de ;points to next element in queue
   99 D1:B8A3 -  -  -  -  	
  100 D1:B8A3 E5 -  -  -  	push hl 
  101 D1:B8A4 11 C0 01 D4 	ld de, decompress_queue_end
  102 D1:B8A8 37 -  -  -  	scf
  103 D1:B8A9 3F -  -  -  	ccf
  104 D1:B8AA ED 52 -  -  	sbc hl,de ;check if need to wrap to start of queue
  105 D1:B8AC E1 -  -  -  	pop hl
  106 D1:B8AD D2 B9 B8 D1 	jp nc, cd_back_to_start
  107 D1:B8B1 22 43 B8 D1 	ld (decompress_tail_ptr),hl
  108 D1:B8B5 C3 84 B8 D1 	jp continue_decompressions ;Move on to next sprite 
  109 D1:B8B9 -  -  -  -  	
  110 D1:B8B9 -  -  -  -  cd_back_to_start:
  111 D1:B8B9 21 00 00 D4 	ld hl,decompress_queue_start
  112 D1:B8BD 11 06 00 00 	ld de,6 ;tail points to the parameters byte
  113 D1:B8C1 19 -  -  -  	add hl,de
  114 D1:B8C2 22 43 B8 D1 	ld (decompress_tail_ptr),hl
  115 D1:B8C6 C3 84 B8 D1 	jp continue_decompressions ;Move on to next sprite 
  116 D1:B8CA -  -  -  -  
  117 D1:B8CA -  -  -  -  cd_begin_decompression:
  118 D1:B8CA -  -  -  -  
  119 D1:B8CA -  -  -  -  	;testing
  120 D1:B8CA -  -  -  -  	;push af 
  121 D1:B8CA -  -  -  -  	;ld a,$AA
  122 D1:B8CA -  -  -  -  	;call write_a_to_ram
  123 D1:B8CA -  -  -  -  	;pop af
  124 D1:B8CA -  -  -  -  	
  125 D1:B8CA -  -  -  -  	;setup and begin decompressing
  126 D1:B8CA CB E6 -  -  	set 4,(hl) ;set start flag
  127 D1:B8CC F5 -  -  -  	push af 
  128 D1:B8CD CB 7F -  -  	bit 7,a 
  129 D1:B8CF C4 EE B4 D1 	call nz, sdcomp_set_fast
  130 D1:B8D3 F1 -  -  -  	pop af 
  131 D1:B8D4 -  -  -  -  	
  132 D1:B8D4 F5 -  -  -  	push af 
  133 D1:B8D5 CB 7F -  -  	bit 7,a 
  134 D1:B8D7 CC FD B4 D1 	call z, sdcomp_reset_fast
  135 D1:B8DB F1 -  -  -  	pop af 
  136 D1:B8DC -  -  -  -  	
  137 D1:B8DC F5 -  -  -  	push af 
  138 D1:B8DD CB 77 -  -  	bit 6,a 
  139 D1:B8DF C4 7E B4 D1 	call nz, sdcomp_set_offset
  140 D1:B8E3 F1 -  -  -  	pop af 
  141 D1:B8E4 -  -  -  -  	
  142 D1:B8E4 F5 -  -  -  	push af 
  143 D1:B8E5 CB 77 -  -  	bit 6,a 
  144 D1:B8E7 CC 8F B4 D1 	call z, sdcomp_reset_offset
  145 D1:B8EB F1 -  -  -  	pop af 
  146 D1:B8EC -  -  -  -  	
  147 D1:B8EC F5 -  -  -  	push af 
  148 D1:B8ED CB 6F -  -  	bit 5,a 
  149 D1:B8EF C4 A0 B4 D1 	call nz, sdcomp_set_flip
  150 D1:B8F3 F1 -  -  -  	pop af 
  151 D1:B8F4 -  -  -  -  	
  152 D1:B8F4 F5 -  -  -  	push af 
  153 D1:B8F5 CB 6F -  -  	bit 5,a 
  154 D1:B8F7 CC C7 B4 D1 	call z, sdcomp_reset_flip
  155 D1:B8FB F1 -  -  -  	pop af 
  156 D1:B8FC -  -  -  -  	
  157 D1:B8FC 2A 43 B8 D1 	ld hl, (decompress_tail_ptr) ;may be unnessecary
  158 D1:B900 -  -  -  -  	
  159 D1:B900 2B -  -  -  	dec hl 
  160 D1:B901 2B -  -  -  	dec hl 
  161 D1:B902 2B -  -  -  	dec hl 
  162 D1:B903 ED 17 -  -  	ld de,(hl) ;load decompress location
  163 D1:B905 -  -  -  -  
  164 D1:B905 2B -  -  -  	dec hl 
  165 D1:B906 2B -  -  -  	dec hl 
  166 D1:B907 2B -  -  -  	dec hl 
  167 D1:B908 ED 27 -  -  	ld hl,(hl) ;load sprite data ptr
  168 D1:B90A -  -  -  -  
  169 D1:B90A CD 1D B1 D1 	call sprite_decompress
  170 D1:B90E B7 -  -  -  	or a 
  171 D1:B90F C0 -  -  -  	ret nz ;sprite not yet done decompressing 
  172 D1:B910 C3 98 B8 D1 	jp cd_done_decompressing
  173 D1:B914 -  -  -  -  
  174 D1:B914 -  -  -  -  
  175 D1:B914 -  -  -  -  ;Checks to see if cam has moved to a new frame and decompressions need to be added to queue
  176 D1:B914 -  -  -  -  check_for_decompress_calls:
  177 D1:B914 3A 5C B9 D1 	ld a, (last_decompressed_cam_pos)
  178 D1:B918 47 -  -  -  	ld b,a ;put last decompressed pos in b
  179 D1:B919 3A BA AB D1 	ld a, (cam_pos + 1) ;Current frame cam is in
  180 D1:B91D 32 5C B9 D1 	ld (last_decompressed_cam_pos),a ;store this frame as the last decompressed frame 
  181 D1:B921 -  -  -  -  	;need to check if cam has moved up or down since last time
  182 D1:B921 B8 -  -  -  	cp a,b 
  183 D1:B922 -  -  -  -  	
  184 D1:B922 -  -  -  -  	
  185 D1:B922 C8 -  -  -  	ret z ;if same, no new things to add to queue 
  186 D1:B923 D2 2F B9 D1 	jp nc, cfdc_cam_move_up ;camera has moved up since last time 
  187 D1:B927 -  -  -  -  	
  188 D1:B927 -  -  -  -  	;cam has moved down since last time 
  189 D1:B927 21 03 BE D1 	ld hl, decompress_calls_table_down
  190 D1:B92B C3 33 B9 D1 	jp cfdc_add_calls_to_queue
  191 D1:B92F -  -  -  -  	
  192 D1:B92F -  -  -  -  	
  193 D1:B92F -  -  -  -  cfdc_cam_move_up:
  194 D1:B92F 21 AF BD D1 	ld hl, decompress_calls_table_up
  195 D1:B933 -  -  -  -  
  196 D1:B933 -  -  -  -  	;a = cam frame, hl = decompress call table (up or down)
  197 D1:B933 -  -  -  -  cfdc_add_calls_to_queue:
  198 D1:B933 -  -  -  -  
  199 D1:B933 -  -  -  -  	;call write_a_to_ram
  200 D1:B933 -  -  -  -  
  201 D1:B933 01 00 00 00 	ld bc,0
  202 D1:B937 4F -  -  -  	ld c,a
  203 D1:B938 09 -  -  -  	add hl,bc 
  204 D1:B939 09 -  -  -  	add hl,bc 
  205 D1:B93A 09 -  -  -  	add hl,bc 
  206 D1:B93B ED 27 -  -  	ld hl,(hl) ;hl now points to correct decompress frame 
  207 D1:B93D -  -  -  -  	
  208 D1:B93D 08 -  -  -  	ex af,af' ;'
  209 D1:B93E 7E -  -  -  	ld a,(hl) ;a' holds num elements 
  210 D1:B93F -  -  -  -  	
  211 D1:B93F -  -  -  -  	;call write_a_to_ram
  212 D1:B93F -  -  -  -  	
  213 D1:B93F -  -  -  -  	;call prgmpause
  214 D1:B93F -  -  -  -  	
  215 D1:B93F 3C -  -  -  	inc a ;to be decd later
  216 D1:B940 08 -  -  -  	ex af,af' ;'
  217 D1:B941 -  -  -  -  	
  218 D1:B941 23 -  -  -  	inc hl ;points to first sprite data 
  219 D1:B942 -  -  -  -  cfdc_add_to_queue_loop:
  220 D1:B942 08 -  -  -  	ex af,af' ;'
  221 D1:B943 -  -  -  -  	;call write_a_to_ram
  222 D1:B943 3D -  -  -  	dec a ;account for cases where frame has 0 elements 
  223 D1:B944 C8 -  -  -  	ret z
  224 D1:B945 08 -  -  -  	ex af,af' ;'
  225 D1:B946 ED 07 -  -  	ld bc ,(hl) ;load sprite data 
  226 D1:B948 23 -  -  -  	inc hl 
  227 D1:B949 23 -  -  -  	inc hl
  228 D1:B94A 23 -  -  -  	inc hl 
  229 D1:B94B ED 17 -  -  	ld de,(hl) ;load decomp location 
  230 D1:B94D 23 -  -  -  	inc hl 
  231 D1:B94E 23 -  -  -  	inc hl
  232 D1:B94F 23 -  -  -  	inc hl 
  233 D1:B950 7E -  -  -  	ld a,(hl) ;ld params
  234 D1:B951 23 -  -  -  	inc hl 
  235 D1:B952 E5 -  -  -  	push hl
  236 D1:B953 CD 58 B8 D1 	call add_to_decompress_queue
  237 D1:B957 E1 -  -  -  	pop hl
  238 D1:B958 C3 42 B9 D1 	jp cfdc_add_to_queue_loop
  239 D1:B95C -  -  -  -  	
  240 D1:B95C -  -  -  -  	
  241 D1:B95C -  -  -  -  
  242 D1:B95C -  -  -  -  
  243 D1:B95C -  -  -  -  last_decompressed_cam_pos:
  244 D1:B95C 00 -  -  -  	.db 0 ;camera frame last time checking for decomp was called 
  245 D1:B95D -  -  -  -  	
  246 D1:B95D -  -  -  -  	
  247 D1:B95D -  -  -  -  
  248 D1:B95D -  -  -  -  
  249 D1:B95D -  -  -  -  
  250 D1:B95D -  -  -  -  
  251 D1:B95D -  -  -  -  
  252 D1:B95D -  -  -  -  
  253 D1:B95D -  -  -  -  
  254 D1:B95D -  -  -  -  
  255 D1:B95D -  -  -  -  
  256 D1:B95D -  -  -  -  
  257 D1:B95D -  -  -  -  
  258 D1:B95D -  -  -  -  
  259 D1:B95D -  -  -  -  
  260 D1:B95D -  -  -  -  
  261 D1:B95D -  -  -  -  
  262 D1:B95D -  -  -  -  
  263 D1:B95D -  -  -  -  
  264 D1:B95D -  -  -  -  
  265 D1:B95D -  -  -  -  
  266 D1:B95D -  -  -  -  
  267 D1:B95D -  -  -  -  
  268 D1:B95D -  -  -  -  
  269 D1:B95D -  -  -  -  
  270 D1:B95D -  -  -  -  
  271 D1:B95D -  -  -  -  
Listing for file "ascent.asm"
  521 D1:B95D -  -  -  -  #include "getInputs.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\getInputs.txt"
    1 D1:B95D -  -  -  -  
    2 D1:B95D -  -  -  -  
    3 D1:B95D -  -  -  -  
    4 D1:B95D -  -  -  -  get_inputs:
    5 D1:B95D 21 00 00 F5 	ld	hl,DI_Mode		; register for keypad mode
    6 D1:B961 36 02 -  -  	ld	(hl),2			; set single scan mode
    7 D1:B963 -  -  -  -  
    8 D1:B963 AF -  -  -  	xor	a,a
    9 D1:B964 -  -  -  -  scan_wait:
   10 D1:B964 BE -  -  -  	cp	a,(hl)			; wait for keypad idle mode
   11 D1:B965 20 FD -  -  	jr	nz,scan_wait
   12 D1:B967 -  -  -  -  	
   13 D1:B967 -  -  -  -  	; https://wikiti.brandonw.net/index.php?title=84PCE:Ports:A000
   14 D1:B967 -  -  -  -  	
   15 D1:B967 3A 1E 00 F5 	ld	a,(kbdG7) ; $F5001E
   16 D1:B96B CB 5F -  -   	bit	kbitUp,a
   17 D1:B96D C2 78 B9 D1 	jp nz, input_cam_up
   18 D1:B971 -  -  -  -  	
   19 D1:B971 -  -  -  -  	
   20 D1:B971 CB 47 -  -  	bit	kbitDown,a
   21 D1:B973 C2 8B B9 D1 	jp nz, input_cam_down
   22 D1:B977 C9 -  -  -  	ret
   23 D1:B978 -  -  -  -  	
   24 D1:B978 -  -  -  -  	
   25 D1:B978 -  -  -  -  input_cam_up:
   26 D1:B978 -  -  -  -  	;Move cam
   27 D1:B978 2A B9 AB D1 	ld hl,(cam_pos)
   28 D1:B97C -  -  -  -  	
   29 D1:B97C E5 -  -  -  	push hl 
   30 D1:B97D 01 D0 07 00 	ld bc,2000
   31 D1:B981 ED 42 -  -  	sbc hl,bc 
   32 D1:B983 E1 -  -  -  	pop hl 
   33 D1:B984 D0 -  -  -  	ret nc
   34 D1:B985 -  -  -  -  	
   35 D1:B985 -  -  -  -  
   36 D1:B985 23 -  -  -  	inc hl
   37 D1:B986 22 B9 AB D1 	ld (cam_pos),hl
   38 D1:B98A C9 -  -  -  	ret
   39 D1:B98B -  -  -  -  
   40 D1:B98B -  -  -  -  
   41 D1:B98B -  -  -  -  input_cam_down:
   42 D1:B98B -  -  -  -  	;Move cam
   43 D1:B98B 2A B9 AB D1 	ld hl,(cam_pos)
   44 D1:B98F -  -  -  -  	
   45 D1:B98F E5 -  -  -  	push hl 
   46 D1:B990 01 01 00 00 	ld bc,1 
   47 D1:B994 ED 42 -  -  	sbc hl,bc 
   48 D1:B996 E1 -  -  -  	pop hl 
   49 D1:B997 D8 -  -  -  	ret c 
   50 D1:B998 -  -  -  -  	
   51 D1:B998 2B -  -  -  	dec hl
   52 D1:B999 22 B9 AB D1 	ld (cam_pos),hl
   53 D1:B99D C9 -  -  -  	ret
   54 D1:B99E -  -  -  -  	
   55 D1:B99E -  -  -  -  	
   56 D1:B99E -  -  -  -  	
Listing for file "ascent.asm"
  522 D1:B99E -  -  -  -  ;#include "levelData.txt"
  523 D1:B99E -  -  -  -  ;#include "FGLevelData.txt"
  524 D1:B99E -  -  -  -  
  525 D1:B99E -  -  -  -  #include "generated/BG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\BG_Data.txt"
    1 D1:B99E -  -  -  -  BG_Data_frame_table:
    2 D1:B99E D8 B9 D1 -  	.dl BG_Data_0
    3 D1:B9A1 D0 B9 D1 -  	.dl BG_Data_1
    4 D1:B9A4 C8 B9 D1 -  	.dl BG_Data_2
    5 D1:B9A7 C0 B9 D1 -  	.dl BG_Data_3
    6 D1:B9AA B8 B9 D1 -  	.dl BG_Data_4
    7 D1:B9AD B0 B9 D1 -  	.dl BG_Data_5
    8 D1:B9B0 -  -  -  -  
    9 D1:B9B0 -  -  -  -  
   10 D1:B9B0 -  -  -  -  
   11 D1:B9B0 -  -  -  -  BG_Data_5:
   12 D1:B9B0 AD C1 D1 -  	.dl Sprite_Table_0
   13 D1:B9B3 01 -  -  -  	.db 1
   14 D1:B9B4 3F 10 14 2F 	.db 63, 16, 20, 47
   15 D1:B9B8 -  -  -  -  
   16 D1:B9B8 -  -  -  -  BG_Data_4:
   17 D1:B9B8 AD C1 D1 -  	.dl Sprite_Table_0
   18 D1:B9BB 01 -  -  -  	.db 1
   19 D1:B9BC 73 10 0E 2F 	.db 115, 16, 14, 47
   20 D1:B9C0 -  -  -  -  
   21 D1:B9C0 -  -  -  -  BG_Data_3:
   22 D1:B9C0 AD C1 D1 -  	.dl Sprite_Table_0
   23 D1:B9C3 01 -  -  -  	.db 1
   24 D1:B9C4 3E 10 17 28 	.db 62, 16, 23, 40
   25 D1:B9C8 -  -  -  -  
   26 D1:B9C8 -  -  -  -  BG_Data_2:
   27 D1:B9C8 AD C1 D1 -  	.dl Sprite_Table_0
   28 D1:B9CB 01 -  -  -  	.db 1
   29 D1:B9CC 37 10 0F 2F 	.db 55, 16, 15, 47
   30 D1:B9D0 -  -  -  -  
   31 D1:B9D0 -  -  -  -  BG_Data_1:
   32 D1:B9D0 AD C1 D1 -  	.dl Sprite_Table_0
   33 D1:B9D3 01 -  -  -  	.db 1
   34 D1:B9D4 63 10 13 28 	.db 99, 16, 19, 40
   35 D1:B9D8 -  -  -  -  
   36 D1:B9D8 -  -  -  -  BG_Data_0:
   37 D1:B9D8 AD C1 D1 -  	.dl Sprite_Table_0
   38 D1:B9DB 01 -  -  -  	.db 1
   39 D1:B9DC 1F 10 13 28 	.db 31, 16, 19, 40
   40 D1:B9E0 -  -  -  -  
   41 D1:B9E0 -  -  -  -  
   42 D1:B9E0 -  -  -  -  
Listing for file "ascent.asm"
  526 D1:B9E0 -  -  -  -  #include "generated/MG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\MG_Data.txt"
    1 D1:B9E0 -  -  -  -  MG_Data_frame_table:
    2 D1:B9E0 25 BA D1 -  	.dl MG_Data_0
    3 D1:B9E3 1D BA D1 -  	.dl MG_Data_1
    4 D1:B9E6 15 BA D1 -  	.dl MG_Data_2
    5 D1:B9E9 0D BA D1 -  	.dl MG_Data_3
    6 D1:B9EC 05 BA D1 -  	.dl MG_Data_4
    7 D1:B9EF FD B9 D1 -  	.dl MG_Data_5
    8 D1:B9F2 F5 B9 D1 -  	.dl MG_Data_6
    9 D1:B9F5 -  -  -  -  
   10 D1:B9F5 -  -  -  -  
   11 D1:B9F5 -  -  -  -  
   12 D1:B9F5 -  -  -  -  MG_Data_6:
   13 D1:B9F5 AD C1 D1 -  	.dl Sprite_Table_0
   14 D1:B9F8 01 -  -  -  	.db 1
   15 D1:B9F9 32 10 0F 28 	.db 50, 16, 15, 40
   16 D1:B9FD -  -  -  -  
   17 D1:B9FD -  -  -  -  MG_Data_5:
   18 D1:B9FD AD C1 D1 -  	.dl Sprite_Table_0
   19 D1:BA00 01 -  -  -  	.db 1
   20 D1:BA01 29 10 0F 28 	.db 41, 16, 15, 40
   21 D1:BA05 -  -  -  -  
   22 D1:BA05 -  -  -  -  MG_Data_4:
   23 D1:BA05 AD C1 D1 -  	.dl Sprite_Table_0
   24 D1:BA08 01 -  -  -  	.db 1
   25 D1:BA09 56 10 0F 28 	.db 86, 16, 15, 40
   26 D1:BA0D -  -  -  -  
   27 D1:BA0D -  -  -  -  MG_Data_3:
   28 D1:BA0D AD C1 D1 -  	.dl Sprite_Table_0
   29 D1:BA10 01 -  -  -  	.db 1
   30 D1:BA11 42 10 0C 2F 	.db 66, 16, 12, 47
   31 D1:BA15 -  -  -  -  
   32 D1:BA15 -  -  -  -  MG_Data_2:
   33 D1:BA15 AD C1 D1 -  	.dl Sprite_Table_0
   34 D1:BA18 01 -  -  -  	.db 1
   35 D1:BA19 37 10 16 2F 	.db 55, 16, 22, 47
   36 D1:BA1D -  -  -  -  
   37 D1:BA1D -  -  -  -  MG_Data_1:
   38 D1:BA1D AD C1 D1 -  	.dl Sprite_Table_0
   39 D1:BA20 01 -  -  -  	.db 1
   40 D1:BA21 3C 10 1B 2F 	.db 60, 16, 27, 47
   41 D1:BA25 -  -  -  -  
   42 D1:BA25 -  -  -  -  MG_Data_0:
   43 D1:BA25 AD C1 D1 -  	.dl Sprite_Table_0
   44 D1:BA28 B9 -  -  -  	.db 185
   45 D1:BA29 CD 09 20 02 	.db 205, 9, 32, 2
   46 D1:BA2D D6 10 14 03 	.db 214, 16, 20, 3
   47 D1:BA31 E7 13 0A 04 	.db 231, 19, 10, 4
   48 D1:BA35 F8 13 00 04 	.db 248, 19, 0, 4
   49 D1:BA39 5E 10 71 05 	.db 94, 16, 113, 5
   50 D1:BA3D 56 09 7D 06 	.db 86, 9, 125, 6
   51 D1:BA41 71 13 95 07 	.db 113, 19, 149, 7
   52 D1:BA45 60 10 89 08 	.db 96, 16, 137, 8
   53 D1:BA49 0B 0C 23 09 	.db 11, 12, 35, 9
   54 D1:BA4D B3 0C 30 0A 	.db 179, 12, 48, 10
   55 D1:BA51 B3 0C 3C 0B 	.db 179, 12, 60, 11
   56 D1:BA55 B3 0C 48 0C 	.db 179, 12, 72, 12
   57 D1:BA59 B3 0C 54 0D 	.db 179, 12, 84, 13
   58 D1:BA5D B3 0C 60 0E 	.db 179, 12, 96, 14
   59 D1:BA61 B3 0C 6C 0F 	.db 179, 12, 108, 15
   60 D1:BA65 BF 0C 53 10 	.db 191, 12, 83, 16
   61 D1:BA69 BF 0C 2F 11 	.db 191, 12, 47, 17
   62 D1:BA6D BF 0C 3B 12 	.db 191, 12, 59, 18
   63 D1:BA71 BF 0C 47 13 	.db 191, 12, 71, 19
   64 D1:BA75 B3 0C 24 14 	.db 179, 12, 36, 20
   65 D1:BA79 BF 0C 5F 15 	.db 191, 12, 95, 21
   66 D1:BA7D BF 0C 6B 0F 	.db 191, 12, 107, 15
   67 D1:BA81 BF 0C 23 14 	.db 191, 12, 35, 20
   68 D1:BA85 A7 0C 6B 0F 	.db 167, 12, 107, 15
   69 D1:BA89 A7 0C 23 14 	.db 167, 12, 35, 20
   70 D1:BA8D A7 0C 53 10 	.db 167, 12, 83, 16
   71 D1:BA91 8F 0C 46 13 	.db 143, 12, 70, 19
   72 D1:BA95 8F 0C 5E 0E 	.db 143, 12, 94, 14
   73 D1:BA99 8F 0C 6A 16 	.db 143, 12, 106, 22
   74 D1:BA9D 8F 0C 52 10 	.db 143, 12, 82, 16
   75 D1:BAA1 9B 0C 24 09 	.db 155, 12, 36, 9
   76 D1:BAA5 9B 0C 30 11 	.db 155, 12, 48, 17
   77 D1:BAA9 A7 0C 5F 15 	.db 167, 12, 95, 21
   78 D1:BAAD 9B 0C 3C 0B 	.db 155, 12, 60, 11
   79 D1:BAB1 9B 0C 54 10 	.db 155, 12, 84, 16
   80 D1:BAB5 9B 0C 60 17 	.db 155, 12, 96, 23
   81 D1:BAB9 9B 0C 6C 16 	.db 155, 12, 108, 22
   82 D1:BABD CB 0C 22 18 	.db 203, 12, 34, 24
   83 D1:BAC1 A7 0C 3B 12 	.db 167, 12, 59, 18
   84 D1:BAC5 A7 0C 47 13 	.db 167, 12, 71, 19
   85 D1:BAC9 9B 0C 48 13 	.db 155, 12, 72, 19
   86 D1:BACD CB 0C 2E 11 	.db 203, 12, 46, 17
   87 D1:BAD1 CB 0C 6A 16 	.db 203, 12, 106, 22
   88 D1:BAD5 CB 0C 46 13 	.db 203, 12, 70, 19
   89 D1:BAD9 FB 0C 6C 16 	.db 251, 12, 108, 22
   90 D1:BADD FB 0C 60 17 	.db 251, 12, 96, 23
   91 D1:BAE1 FB 0C 54 10 	.db 251, 12, 84, 16
   92 D1:BAE5 FB 0C 48 13 	.db 251, 12, 72, 19
   93 D1:BAE9 FB 0C 3C 0B 	.db 251, 12, 60, 11
   94 D1:BAED FB 0C 30 11 	.db 251, 12, 48, 17
   95 D1:BAF1 FB 0C 24 09 	.db 251, 12, 36, 9
   96 D1:BAF5 EF 0C 6C 0F 	.db 239, 12, 108, 15
   97 D1:BAF9 EF 0C 60 17 	.db 239, 12, 96, 23
   98 D1:BAFD EF 0C 54 10 	.db 239, 12, 84, 16
   99 D1:BB01 EF 0C 48 19 	.db 239, 12, 72, 25
  100 D1:BB05 EF 0C 3C 0B 	.db 239, 12, 60, 11
  101 D1:BB09 EF 0C 30 11 	.db 239, 12, 48, 17
  102 D1:BB0D EF 0C 24 14 	.db 239, 12, 36, 20
  103 D1:BB11 E3 0C 6B 16 	.db 227, 12, 107, 22
  104 D1:BB15 E3 0C 53 0D 	.db 227, 12, 83, 13
  105 D1:BB19 E3 0C 5F 0E 	.db 227, 12, 95, 14
  106 D1:BB1D CB 0C 5E 0E 	.db 203, 12, 94, 14
  107 D1:BB21 8F 0C 3A 0B 	.db 143, 12, 58, 11
  108 D1:BB25 CB 0C 52 10 	.db 203, 12, 82, 16
  109 D1:BB29 D7 0C 22 09 	.db 215, 12, 34, 9
  110 D1:BB2D D7 0C 2E 0A 	.db 215, 12, 46, 10
  111 D1:BB31 D7 0C 3A 12 	.db 215, 12, 58, 18
  112 D1:BB35 CB 0C 3A 0B 	.db 203, 12, 58, 11
  113 D1:BB39 D7 0C 46 1A 	.db 215, 12, 70, 26
  114 D1:BB3D D7 0C 5E 15 	.db 215, 12, 94, 21
  115 D1:BB41 D7 0C 6A 1B 	.db 215, 12, 106, 27
  116 D1:BB45 E3 0C 23 09 	.db 227, 12, 35, 9
  117 D1:BB49 E3 0C 2F 11 	.db 227, 12, 47, 17
  118 D1:BB4D E3 0C 3B 12 	.db 227, 12, 59, 18
  119 D1:BB51 E3 0C 47 19 	.db 227, 12, 71, 25
  120 D1:BB55 D7 0C 52 0D 	.db 215, 12, 82, 13
  121 D1:BB59 8F 0C 2E 11 	.db 143, 12, 46, 17
  122 D1:BB5D A7 0C 2F 11 	.db 167, 12, 47, 17
  123 D1:BB61 83 0C 6B 0F 	.db 131, 12, 107, 15
  124 D1:BB65 2F 0C 23 14 	.db 47, 12, 35, 20
  125 D1:BB69 2F 0C 2F 11 	.db 47, 12, 47, 17
  126 D1:BB6D 2F 0C 3B 0B 	.db 47, 12, 59, 11
  127 D1:BB71 8F 0C 22 18 	.db 143, 12, 34, 24
  128 D1:BB75 2F 0C 53 10 	.db 47, 12, 83, 16
  129 D1:BB79 2F 0C 5F 17 	.db 47, 12, 95, 23
  130 D1:BB7D 2F 0C 6B 0F 	.db 47, 12, 107, 15
  131 D1:BB81 23 0C 6B 0F 	.db 35, 12, 107, 15
  132 D1:BB85 3B 0C 24 09 	.db 59, 12, 36, 9
  133 D1:BB89 3B 0C 3C 0B 	.db 59, 12, 60, 11
  134 D1:BB8D 3B 0C 48 13 	.db 59, 12, 72, 19
  135 D1:BB91 3B 0C 54 10 	.db 59, 12, 84, 16
  136 D1:BB95 3B 0C 60 17 	.db 59, 12, 96, 23
  137 D1:BB99 3B 0C 6C 16 	.db 59, 12, 108, 22
  138 D1:BB9D 47 0C 25 09 	.db 71, 12, 37, 9
  139 D1:BBA1 47 0C 31 0A 	.db 71, 12, 49, 10
  140 D1:BBA5 3B 0C 30 11 	.db 59, 12, 48, 17
  141 D1:BBA9 47 0C 3D 12 	.db 71, 12, 61, 18
  142 D1:BBAD 23 0C 5F 0E 	.db 35, 12, 95, 14
  143 D1:BBB1 23 0C 47 0C 	.db 35, 12, 71, 12
  144 D1:BBB5 0B 0C 2F 11 	.db 11, 12, 47, 17
  145 D1:BBB9 0B 0C 3B 12 	.db 11, 12, 59, 18
  146 D1:BBBD 0B 0C 47 19 	.db 11, 12, 71, 25
  147 D1:BBC1 0B 0C 5F 0E 	.db 11, 12, 95, 14
  148 D1:BBC5 0B 0C 53 0D 	.db 11, 12, 83, 13
  149 D1:BBC9 0B 0C 6B 16 	.db 11, 12, 107, 22
  150 D1:BBCD 17 0C 22 18 	.db 23, 12, 34, 24
  151 D1:BBD1 23 0C 53 0D 	.db 35, 12, 83, 13
  152 D1:BBD5 17 0C 2E 11 	.db 23, 12, 46, 17
  153 D1:BBD9 17 0C 46 13 	.db 23, 12, 70, 19
  154 D1:BBDD 17 0C 5E 0E 	.db 23, 12, 94, 14
  155 D1:BBE1 17 0C 6A 16 	.db 23, 12, 106, 22
  156 D1:BBE5 17 0C 52 10 	.db 23, 12, 82, 16
  157 D1:BBE9 23 0C 23 14 	.db 35, 12, 35, 20
  158 D1:BBED 23 0C 2F 0A 	.db 35, 12, 47, 10
  159 D1:BBF1 23 0C 3B 0B 	.db 35, 12, 59, 11
  160 D1:BBF5 17 0C 3A 0B 	.db 23, 12, 58, 11
  161 D1:BBF9 47 0C 49 1A 	.db 71, 12, 73, 26
  162 D1:BBFD 2F 0C 47 19 	.db 47, 12, 71, 25
  163 D1:BC01 47 0C 61 15 	.db 71, 12, 97, 21
  164 D1:BC05 6B 0C 5F 0E 	.db 107, 12, 95, 14
  165 D1:BC09 6B 0C 6B 0F 	.db 107, 12, 107, 15
  166 D1:BC0D 77 0C 22 09 	.db 119, 12, 34, 9
  167 D1:BC11 77 0C 3A 12 	.db 119, 12, 58, 18
  168 D1:BC15 77 0C 46 19 	.db 119, 12, 70, 25
  169 D1:BC19 77 0C 5E 0E 	.db 119, 12, 94, 14
  170 D1:BC1D 47 0C 55 0D 	.db 71, 12, 85, 13
  171 D1:BC21 77 0C 52 0D 	.db 119, 12, 82, 13
  172 D1:BC25 77 0C 6A 16 	.db 119, 12, 106, 22
  173 D1:BC29 83 0C 23 14 	.db 131, 12, 35, 20
  174 D1:BC2D 83 0C 2F 11 	.db 131, 12, 47, 17
  175 D1:BC31 83 0C 3B 0B 	.db 131, 12, 59, 11
  176 D1:BC35 83 0C 47 19 	.db 131, 12, 71, 25
  177 D1:BC39 83 0C 53 10 	.db 131, 12, 83, 16
  178 D1:BC3D 83 0C 5F 17 	.db 131, 12, 95, 23
  179 D1:BC41 6B 0C 53 0D 	.db 107, 12, 83, 13
  180 D1:BC45 6B 0C 47 0C 	.db 107, 12, 71, 12
  181 D1:BC49 77 0C 2E 11 	.db 119, 12, 46, 17
  182 D1:BC4D 6B 0C 2F 0A 	.db 107, 12, 47, 10
  183 D1:BC51 53 0C 5F 15 	.db 83, 12, 95, 21
  184 D1:BC55 53 0C 53 10 	.db 83, 12, 83, 16
  185 D1:BC59 6B 0C 3B 0B 	.db 107, 12, 59, 11
  186 D1:BC5D 5F 0C 23 09 	.db 95, 12, 35, 9
  187 D1:BC61 53 0C 47 13 	.db 83, 12, 71, 19
  188 D1:BC65 53 0C 3B 12 	.db 83, 12, 59, 18
  189 D1:BC69 53 0C 2F 11 	.db 83, 12, 47, 17
  190 D1:BC6D 53 0C 23 14 	.db 83, 12, 35, 20
  191 D1:BC71 5F 0C 2F 0A 	.db 95, 12, 47, 10
  192 D1:BC75 5F 0C 3B 12 	.db 95, 12, 59, 18
  193 D1:BC79 5F 0C 47 1A 	.db 95, 12, 71, 26
  194 D1:BC7D 47 0C 6D 1B 	.db 71, 12, 109, 27
  195 D1:BC81 5F 0C 53 0D 	.db 95, 12, 83, 13
  196 D1:BC85 5F 0C 5F 15 	.db 95, 12, 95, 21
  197 D1:BC89 5F 0C 6B 1B 	.db 95, 12, 107, 27
  198 D1:BC8D 6B 0C 23 14 	.db 107, 12, 35, 20
  199 D1:BC91 53 0C 6B 0F 	.db 83, 12, 107, 15
  200 D1:BC95 A4 18 22 1C 	.db 164, 24, 34, 28
  201 D1:BC99 8C 18 24 1D 	.db 140, 24, 36, 29
  202 D1:BC9D 4D 0D 53 1E 	.db 77, 13, 83, 30
  203 D1:BCA1 60 13 31 04 	.db 96, 19, 49, 4
  204 D1:BCA5 4F 10 3B 05 	.db 79, 16, 59, 5
  205 D1:BCA9 46 09 47 06 	.db 70, 9, 71, 6
  206 D1:BCAD 56 0B 5F 1F 	.db 86, 11, 95, 31
  207 D1:BCB1 56 0E 6B 20 	.db 86, 14, 107, 32
  208 D1:BCB5 87 17 67 21 	.db 135, 23, 103, 33
  209 D1:BCB9 86 14 73 22 	.db 134, 20, 115, 34
  210 D1:BCBD DF 17 6C 23 	.db 223, 23, 108, 35
  211 D1:BCC1 84 12 7F 24 	.db 132, 18, 127, 36
  212 D1:BCC5 75 17 27 25 	.db 117, 23, 39, 37
  213 D1:BCC9 89 10 53 26 	.db 137, 16, 83, 38
  214 D1:BCCD 2E 10 34 01 	.db 46, 16, 52, 1
  215 D1:BCD1 B1 18 68 27 	.db 177, 24, 104, 39
  216 D1:BCD5 C9 18 6A 27 	.db 201, 24, 106, 39
  217 D1:BCD9 CB 10 2C 01 	.db 203, 16, 44, 1
  218 D1:BCDD CA 10 33 28 	.db 202, 16, 51, 40
  219 D1:BCE1 8E 10 4C 29 	.db 142, 16, 76, 41
  220 D1:BCE5 81 10 4D 29 	.db 129, 16, 77, 41
  221 D1:BCE9 87 10 54 01 	.db 135, 16, 84, 1
  222 D1:BCED 30 10 2D 2A 	.db 48, 16, 45, 42
  223 D1:BCF1 2D 10 3B 28 	.db 45, 16, 59, 40
  224 D1:BCF5 3D 10 56 29 	.db 61, 16, 86, 41
  225 D1:BCF9 41 10 5D 01 	.db 65, 16, 93, 1
  226 D1:BCFD 35 10 5D 2B 	.db 53, 16, 93, 43
  227 D1:BD01 8B 17 8A 2C 	.db 139, 23, 138, 44
  228 D1:BD05 9A 13 5E 2D 	.db 154, 19, 94, 45
  229 D1:BD09 8A 0E 94 2E 	.db 138, 14, 148, 46
  230 D1:BD0D -  -  -  -  
  231 D1:BD0D -  -  -  -  
  232 D1:BD0D -  -  -  -  
Listing for file "ascent.asm"
  527 D1:BD0D -  -  -  -  #include "generated/FG_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\FG_Data.txt"
    1 D1:BD0D -  -  -  -  FG_Data_frame_table:
    2 D1:BD0D A3 BD D1 -  	.dl FG_Data_0
    3 D1:BD10 97 BD D1 -  	.dl FG_Data_1
    4 D1:BD13 8F BD D1 -  	.dl FG_Data_2
    5 D1:BD16 87 BD D1 -  	.dl FG_Data_3
    6 D1:BD19 7F BD D1 -  	.dl FG_Data_4
    7 D1:BD1C 77 BD D1 -  	.dl FG_Data_5
    8 D1:BD1F 6F BD D1 -  	.dl FG_Data_6
    9 D1:BD22 67 BD D1 -  	.dl FG_Data_7
   10 D1:BD25 5F BD D1 -  	.dl FG_Data_8
   11 D1:BD28 57 BD D1 -  	.dl FG_Data_9
   12 D1:BD2B 4F BD D1 -  	.dl FG_Data_10
   13 D1:BD2E 47 BD D1 -  	.dl FG_Data_11
   14 D1:BD31 3F BD D1 -  	.dl FG_Data_12
   15 D1:BD34 37 BD D1 -  	.dl FG_Data_13
   16 D1:BD37 -  -  -  -  
   17 D1:BD37 -  -  -  -  
   18 D1:BD37 -  -  -  -  
   19 D1:BD37 -  -  -  -  FG_Data_13:
   20 D1:BD37 AD C1 D1 -  	.dl Sprite_Table_0
   21 D1:BD3A 01 -  -  -  	.db 1
   22 D1:BD3B 4D 10 0F 01 	.db 77, 16, 15, 1
   23 D1:BD3F -  -  -  -  
   24 D1:BD3F -  -  -  -  FG_Data_12:
   25 D1:BD3F AD C1 D1 -  	.dl Sprite_Table_0
   26 D1:BD42 01 -  -  -  	.db 1
   27 D1:BD43 29 10 11 01 	.db 41, 16, 17, 1
   28 D1:BD47 -  -  -  -  
   29 D1:BD47 -  -  -  -  FG_Data_11:
   30 D1:BD47 AD C1 D1 -  	.dl Sprite_Table_0
   31 D1:BD4A 01 -  -  -  	.db 1
   32 D1:BD4B 41 10 11 01 	.db 65, 16, 17, 1
   33 D1:BD4F -  -  -  -  
   34 D1:BD4F -  -  -  -  FG_Data_10:
   35 D1:BD4F AD C1 D1 -  	.dl Sprite_Table_0
   36 D1:BD52 01 -  -  -  	.db 1
   37 D1:BD53 4F 10 11 01 	.db 79, 16, 17, 1
   38 D1:BD57 -  -  -  -  
   39 D1:BD57 -  -  -  -  FG_Data_9:
   40 D1:BD57 AD C1 D1 -  	.dl Sprite_Table_0
   41 D1:BD5A 01 -  -  -  	.db 1
   42 D1:BD5B 52 10 0B 00 	.db 82, 16, 11, 0
   43 D1:BD5F -  -  -  -  
   44 D1:BD5F -  -  -  -  FG_Data_8:
   45 D1:BD5F AD C1 D1 -  	.dl Sprite_Table_0
   46 D1:BD62 01 -  -  -  	.db 1
   47 D1:BD63 39 10 14 00 	.db 57, 16, 20, 0
   48 D1:BD67 -  -  -  -  
   49 D1:BD67 -  -  -  -  FG_Data_7:
   50 D1:BD67 AD C1 D1 -  	.dl Sprite_Table_0
   51 D1:BD6A 01 -  -  -  	.db 1
   52 D1:BD6B 35 10 0F 00 	.db 53, 16, 15, 0
   53 D1:BD6F -  -  -  -  
   54 D1:BD6F -  -  -  -  FG_Data_6:
   55 D1:BD6F AD C1 D1 -  	.dl Sprite_Table_0
   56 D1:BD72 01 -  -  -  	.db 1
   57 D1:BD73 51 10 0D 00 	.db 81, 16, 13, 0
   58 D1:BD77 -  -  -  -  
   59 D1:BD77 -  -  -  -  FG_Data_5:
   60 D1:BD77 AD C1 D1 -  	.dl Sprite_Table_0
   61 D1:BD7A 01 -  -  -  	.db 1
   62 D1:BD7B 3B 10 0F 00 	.db 59, 16, 15, 0
   63 D1:BD7F -  -  -  -  
   64 D1:BD7F -  -  -  -  FG_Data_4:
   65 D1:BD7F AD C1 D1 -  	.dl Sprite_Table_0
   66 D1:BD82 01 -  -  -  	.db 1
   67 D1:BD83 69 10 11 01 	.db 105, 16, 17, 1
   68 D1:BD87 -  -  -  -  
   69 D1:BD87 -  -  -  -  FG_Data_3:
   70 D1:BD87 AD C1 D1 -  	.dl Sprite_Table_0
   71 D1:BD8A 01 -  -  -  	.db 1
   72 D1:BD8B 2C 10 0A 01 	.db 44, 16, 10, 1
   73 D1:BD8F -  -  -  -  
   74 D1:BD8F -  -  -  -  FG_Data_2:
   75 D1:BD8F AD C1 D1 -  	.dl Sprite_Table_0
   76 D1:BD92 01 -  -  -  	.db 1
   77 D1:BD93 29 10 0B 01 	.db 41, 16, 11, 1
   78 D1:BD97 -  -  -  -  
   79 D1:BD97 -  -  -  -  FG_Data_1:
   80 D1:BD97 AD C1 D1 -  	.dl Sprite_Table_0
   81 D1:BD9A 02 -  -  -  	.db 2
   82 D1:BD9B 42 10 0F 01 	.db 66, 16, 15, 1
   83 D1:BD9F AF 10 0A 01 	.db 175, 16, 10, 1
   84 D1:BDA3 -  -  -  -  
   85 D1:BDA3 -  -  -  -  FG_Data_0:
   86 D1:BDA3 AD C1 D1 -  	.dl Sprite_Table_0
   87 D1:BDA6 02 -  -  -  	.db 2
   88 D1:BDA7 31 10 06 00 	.db 49, 16, 6, 0
   89 D1:BDAB 31 10 06 00 	.db 49, 16, 6, 0
   90 D1:BDAF -  -  -  -  
   91 D1:BDAF -  -  -  -  
   92 D1:BDAF -  -  -  -  
Listing for file "ascent.asm"
  528 D1:BDAF -  -  -  -  #include "generated/DecompressCalls.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\DecompressCalls.txt"
    1 D1:BDAF -  -  -  -  decompress_calls_table_up:
    2 D1:BDAF 57 BE D1 -  	.dl decompress_frame_up_0
    3 D1:BDB2 A8 BF D1 -  	.dl decompress_frame_up_1
    4 D1:BDB5 A9 BF D1 -  	.dl decompress_frame_up_2
    5 D1:BDB8 AA BF D1 -  	.dl decompress_frame_up_3
    6 D1:BDBB AB BF D1 -  	.dl decompress_frame_up_4
    7 D1:BDBE AC BF D1 -  	.dl decompress_frame_up_5
    8 D1:BDC1 AD BF D1 -  	.dl decompress_frame_up_6
    9 D1:BDC4 AE BF D1 -  	.dl decompress_frame_up_7
   10 D1:BDC7 AF BF D1 -  	.dl decompress_frame_up_8
   11 D1:BDCA B0 BF D1 -  	.dl decompress_frame_up_9
   12 D1:BDCD B1 BF D1 -  	.dl decompress_frame_up_10
   13 D1:BDD0 B2 BF D1 -  	.dl decompress_frame_up_11
   14 D1:BDD3 B3 BF D1 -  	.dl decompress_frame_up_12
   15 D1:BDD6 B4 BF D1 -  	.dl decompress_frame_up_13
   16 D1:BDD9 B5 BF D1 -  	.dl decompress_frame_up_14
   17 D1:BDDC B6 BF D1 -  	.dl decompress_frame_up_15
   18 D1:BDDF B7 BF D1 -  	.dl decompress_frame_up_16
   19 D1:BDE2 B8 BF D1 -  	.dl decompress_frame_up_17
   20 D1:BDE5 B9 BF D1 -  	.dl decompress_frame_up_18
   21 D1:BDE8 BA BF D1 -  	.dl decompress_frame_up_19
   22 D1:BDEB BB BF D1 -  	.dl decompress_frame_up_20
   23 D1:BDEE BC BF D1 -  	.dl decompress_frame_up_21
   24 D1:BDF1 BD BF D1 -  	.dl decompress_frame_up_22
   25 D1:BDF4 BE BF D1 -  	.dl decompress_frame_up_23
   26 D1:BDF7 BF BF D1 -  	.dl decompress_frame_up_24
   27 D1:BDFA C0 BF D1 -  	.dl decompress_frame_up_25
   28 D1:BDFD C1 BF D1 -  	.dl decompress_frame_up_26
   29 D1:BE00 C2 BF D1 -  	.dl decompress_frame_up_27
   30 D1:BE03 -  -  -  -  
   31 D1:BE03 -  -  -  -  
   32 D1:BE03 -  -  -  -  decompress_calls_table_down:
   33 D1:BE03 C3 BF D1 -  	.dl decompress_frame_down_0
   34 D1:BE06 C4 BF D1 -  	.dl decompress_frame_down_1
   35 D1:BE09 C5 BF D1 -  	.dl decompress_frame_down_2
   36 D1:BE0C C6 BF D1 -  	.dl decompress_frame_down_3
   37 D1:BE0F C7 BF D1 -  	.dl decompress_frame_down_4
   38 D1:BE12 FC C0 D1 -  	.dl decompress_frame_down_5
   39 D1:BE15 FD C0 D1 -  	.dl decompress_frame_down_6
   40 D1:BE18 FE C0 D1 -  	.dl decompress_frame_down_7
   41 D1:BE1B FF C0 D1 -  	.dl decompress_frame_down_8
   42 D1:BE1E 00 C1 D1 -  	.dl decompress_frame_down_9
   43 D1:BE21 01 C1 D1 -  	.dl decompress_frame_down_10
   44 D1:BE24 02 C1 D1 -  	.dl decompress_frame_down_11
   45 D1:BE27 0A C1 D1 -  	.dl decompress_frame_down_12
   46 D1:BE2A 0B C1 D1 -  	.dl decompress_frame_down_13
   47 D1:BE2D 0C C1 D1 -  	.dl decompress_frame_down_14
   48 D1:BE30 0D C1 D1 -  	.dl decompress_frame_down_15
   49 D1:BE33 15 C1 D1 -  	.dl decompress_frame_down_16
   50 D1:BE36 16 C1 D1 -  	.dl decompress_frame_down_17
   51 D1:BE39 17 C1 D1 -  	.dl decompress_frame_down_18
   52 D1:BE3C 18 C1 D1 -  	.dl decompress_frame_down_19
   53 D1:BE3F 19 C1 D1 -  	.dl decompress_frame_down_20
   54 D1:BE42 21 C1 D1 -  	.dl decompress_frame_down_21
   55 D1:BE45 22 C1 D1 -  	.dl decompress_frame_down_22
   56 D1:BE48 23 C1 D1 -  	.dl decompress_frame_down_23
   57 D1:BE4B 24 C1 D1 -  	.dl decompress_frame_down_24
   58 D1:BE4E 25 C1 D1 -  	.dl decompress_frame_down_25
   59 D1:BE51 26 C1 D1 -  	.dl decompress_frame_down_26
   60 D1:BE54 27 C1 D1 -  	.dl decompress_frame_down_27
   61 D1:BE57 -  -  -  -  
   62 D1:BE57 -  -  -  -  
   63 D1:BE57 -  -  -  -  
   64 D1:BE57 -  -  -  -  decompress_frame_up_0:
   65 D1:BE57 30 -  -  -  	.db 48
   66 D1:BE58 3D C2 D1 C1 
              01 D4 -  -  	.dl Moss_1, Moss_1_Slow_O_0
   67 D1:BE5E 40 -  -  -  	.db %01000000
   68 D1:BE5F 3D C2 D1 9E 
              02 D4 -  -  	.dl Moss_1, Moss_1_Fast_0
   69 D1:BE65 80 -  -  -  	.db %10000000
   70 D1:BE66 74 C2 D1 2C 
              03 D4 -  -  	.dl Tree_0, Tree_0_Fast_0
   71 D1:BE6C 80 -  -  -  	.db %10000000
   72 D1:BE6D C0 C2 D1 DE 
              03 D4 -  -  	.dl Tree_3, Tree_3_Fast_0
   73 D1:BE73 80 -  -  -  	.db %10000000
   74 D1:BE74 0D C3 D1 94 
              04 D4 -  -  	.dl Tree_6, Tree_6_Fast_0
   75 D1:BE7A 80 -  -  -  	.db %10000000
   76 D1:BE7B 35 C3 D1 4A 
              05 D4 -  -  	.dl Tree_8, Tree_8_Fast_0
   77 D1:BE81 80 -  -  -  	.db %10000000
   78 D1:BE82 5D C3 D1 00 
              06 D4 -  -  	.dl Tree_5, Tree_5_Fast_F_0
   79 D1:BE88 A0 -  -  -  	.db %10100000
   80 D1:BE89 0D C3 D1 B6 
              06 D4 -  -  	.dl Tree_6, Tree_6_Fast_F_0
   81 D1:BE8F A0 -  -  -  	.db %10100000
   82 D1:BE90 AA C3 D1 6C 
              07 D4 -  -  	.dl Tree_2, Tree_2_Fast_F_0
   83 D1:BE96 A0 -  -  -  	.db %10100000
   84 D1:BE97 F5 C3 D1 1E 
              08 D4 -  -  	.dl Tree_1, Tree_1_Fast_0
   85 D1:BE9D 80 -  -  -  	.db %10000000
   86 D1:BE9E 41 C4 D1 D2 
              08 D4 -  -  	.dl Tree_7, Tree_7_Fast_0
   87 D1:BEA4 80 -  -  -  	.db %10000000
   88 D1:BEA5 69 C4 D1 88 
              09 D4 -  -  	.dl Tree_9, Tree_9_Fast_0
   89 D1:BEAB 80 -  -  -  	.db %10000000
   90 D1:BEAC 41 C4 D1 3E 
              0A D4 -  -  	.dl Tree_7, Tree_7_Fast_F_0
   91 D1:BEB2 A0 -  -  -  	.db %10100000
   92 D1:BEB3 AA C3 D1 F4 
              0A D4 -  -  	.dl Tree_2, Tree_2_Fast_0
   93 D1:BEB9 80 -  -  -  	.db %10000000
   94 D1:BEBA 91 C4 D1 A6 
              0B D4 -  -  	.dl Tree_4, Tree_4_Fast_0
   95 D1:BEC0 80 -  -  -  	.db %10000000
   96 D1:BEC1 69 C4 D1 5C 
              0C D4 -  -  	.dl Tree_9, Tree_9_Fast_F_0
   97 D1:BEC7 A0 -  -  -  	.db %10100000
   98 D1:BEC8 F5 C3 D1 12 
              0D D4 -  -  	.dl Tree_1, Tree_1_Fast_F_0
   99 D1:BECE A0 -  -  -  	.db %10100000
  100 D1:BECF C0 C2 D1 C6 
              0D D4 -  -  	.dl Tree_3, Tree_3_Fast_F_0
  101 D1:BED5 A0 -  -  -  	.db %10100000
  102 D1:BED6 35 C3 D1 7C 
              0E D4 -  -  	.dl Tree_8, Tree_8_Fast_F_0
  103 D1:BEDC A0 -  -  -  	.db %10100000
  104 D1:BEDD 91 C4 D1 32 
              0F D4 -  -  	.dl Tree_4, Tree_4_Fast_F_0
  105 D1:BEE3 A0 -  -  -  	.db %10100000
  106 D1:BEE4 74 C2 D1 E8 
              0F D4 -  -  	.dl Tree_0, Tree_0_Fast_F_0
  107 D1:BEEA A0 -  -  -  	.db %10100000
  108 D1:BEEB DE C4 D1 9A 
              10 D4 -  -  	.dl Moss_0, Moss_0_Fast_0
  109 D1:BEF1 80 -  -  -  	.db %10000000
  110 D1:BEF2 DE C4 D1 24 
              11 D4 -  -  	.dl Moss_0, Moss_0_Fast_F_0
  111 D1:BEF8 A0 -  -  -  	.db %10100000
  112 D1:BEF9 14 C5 D1 AE 
              11 D4 -  -  	.dl Moss_2, Moss_2_Fast_0
  113 D1:BEFF 80 -  -  -  	.db %10000000
  114 D1:BF00 14 C5 D1 46 
              12 D4 -  -  	.dl Moss_2, Moss_2_Fast_F_0
  115 D1:BF06 A0 -  -  -  	.db %10100000
  116 D1:BF07 4E C5 D1 DD 
              12 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_0
  117 D1:BF0D 40 -  -  -  	.db %01000000
  118 D1:BF0E 8E C5 D1 93 
              13 D4 -  -  	.dl Vines_2, Vines_2_Slow_0
  119 D1:BF14 00 -  -  -  	.db %00000000
  120 D1:BF15 D5 C5 D1 6F 
              14 D4 -  -  	.dl Vines_1, Vines_1_Slow_O_0
  121 D1:BF1B 40 -  -  -  	.db %01000000
  122 D1:BF1C 4E C5 D1 FB 
              14 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_F_0
  123 D1:BF22 60 -  -  -  	.db %01100000
  124 D1:BF23 8E C5 D1 B1 
              15 D4 -  -  	.dl Vines_2, Vines_2_Slow_F_0
  125 D1:BF29 20 -  -  -  	.db %00100000
  126 D1:BF2A 4E C5 D1 8B 
              16 D4 -  -  	.dl Vines_3, Vines_3_Slow_F_0
  127 D1:BF30 20 -  -  -  	.db %00100000
  128 D1:BF31 D5 C5 D1 3B 
              17 D4 -  -  	.dl Vines_1, Vines_1_Slow_0
  129 D1:BF37 00 -  -  -  	.db %00000000
  130 D1:BF38 FF C5 D1 CB 
              17 D4 -  -  	.dl Vines_8, Vines_8_Slow_0
  131 D1:BF3E 00 -  -  -  	.db %00000000
  132 D1:BF3F 8E C5 D1 95 
              18 D4 -  -  	.dl Vines_2, Vines_2_Slow_O_0
  133 D1:BF45 40 -  -  -  	.db %01000000
  134 D1:BF46 4E C5 D1 6D 
              19 D4 -  -  	.dl Vines_3, Vines_3_Slow_0
  135 D1:BF4C 00 -  -  -  	.db %00000000
  136 D1:BF4D 2D C6 D1 1D 
              1A D4 -  -  	.dl Vines_5, Vines_5_Slow_O_0
  137 D1:BF53 40 -  -  -  	.db %01000000
  138 D1:BF54 7A C6 D1 0D 
              1B D4 -  -  	.dl Vines_7, Vines_7_Slow_0
  139 D1:BF5A 00 -  -  -  	.db %00000000
  140 D1:BF5B FF C5 D1 CD 
              1B D4 -  -  	.dl Vines_8, Vines_8_Slow_F_0
  141 D1:BF61 20 -  -  -  	.db %00100000
  142 D1:BF62 2D C6 D1 97 
              1C D4 -  -  	.dl Vines_5, Vines_5_Slow_O_F_0
  143 D1:BF68 60 -  -  -  	.db %01100000
  144 D1:BF69 A6 C6 D1 85 
              1D D4 -  -  	.dl Vines_4, Vines_4_Slow_O_0
  145 D1:BF6F 40 -  -  -  	.db %01000000
  146 D1:BF70 DD C6 D1 37 
              1E D4 -  -  	.dl Vines_9, Vines_9_Slow_O_0
  147 D1:BF76 40 -  -  -  	.db %01000000
  148 D1:BF77 10 C7 D1 E9 
              1E D4 -  -  	.dl Vines_10, Vines_10_Slow_O_0
  149 D1:BF7D 40 -  -  -  	.db %01000000
  150 D1:BF7E 4D C7 D1 A8 
              1F D4 -  -  	.dl Branches_15, Branches_15_Fast_0
  151 D1:BF84 80 -  -  -  	.db %10000000
  152 D1:BF85 0F C8 D1 E4 
              20 D4 -  -  	.dl Branches_3, Branches_3_Fast_F_0
  153 D1:BF8B A0 -  -  -  	.db %10100000
  154 D1:BF8C BB C8 D1 FE 
              21 D4 -  -  	.dl Branches_5, Branches_5_Fast_0
  155 D1:BF92 80 -  -  -  	.db %10000000
  156 D1:BF93 51 C9 D1 F0 
              22 D4 -  -  	.dl Branches_11, Branches_11_Fast_0
  157 D1:BF99 80 -  -  -  	.db %10000000
  158 D1:BF9A FA C9 D1 F8 
              23 D4 -  -  	.dl Branches_6, Branches_6_Fast_F_0
  159 D1:BFA0 A0 -  -  -  	.db %10100000
  160 D1:BFA1 14 C5 D1 B5 
              24 D4 -  -  	.dl Moss_2, Moss_2_Slow_O_0
  161 D1:BFA7 40 -  -  -  	.db %01000000
  162 D1:BFA8 -  -  -  -  
  163 D1:BFA8 -  -  -  -  decompress_frame_up_1:
  164 D1:BFA8 00 -  -  -  	.db 0
  165 D1:BFA9 -  -  -  -  
  166 D1:BFA9 -  -  -  -  decompress_frame_up_2:
  167 D1:BFA9 00 -  -  -  	.db 0
  168 D1:BFAA -  -  -  -  
  169 D1:BFAA -  -  -  -  decompress_frame_up_3:
  170 D1:BFAA 00 -  -  -  	.db 0
  171 D1:BFAB -  -  -  -  
  172 D1:BFAB -  -  -  -  decompress_frame_up_4:
  173 D1:BFAB 00 -  -  -  	.db 0
  174 D1:BFAC -  -  -  -  
  175 D1:BFAC -  -  -  -  decompress_frame_up_5:
  176 D1:BFAC 00 -  -  -  	.db 0
  177 D1:BFAD -  -  -  -  
  178 D1:BFAD -  -  -  -  decompress_frame_up_6:
  179 D1:BFAD 00 -  -  -  	.db 0
  180 D1:BFAE -  -  -  -  
  181 D1:BFAE -  -  -  -  decompress_frame_up_7:
  182 D1:BFAE 00 -  -  -  	.db 0
  183 D1:BFAF -  -  -  -  
  184 D1:BFAF -  -  -  -  decompress_frame_up_8:
  185 D1:BFAF 00 -  -  -  	.db 0
  186 D1:BFB0 -  -  -  -  
  187 D1:BFB0 -  -  -  -  decompress_frame_up_9:
  188 D1:BFB0 00 -  -  -  	.db 0
  189 D1:BFB1 -  -  -  -  
  190 D1:BFB1 -  -  -  -  decompress_frame_up_10:
  191 D1:BFB1 00 -  -  -  	.db 0
  192 D1:BFB2 -  -  -  -  
  193 D1:BFB2 -  -  -  -  decompress_frame_up_11:
  194 D1:BFB2 00 -  -  -  	.db 0
  195 D1:BFB3 -  -  -  -  
  196 D1:BFB3 -  -  -  -  decompress_frame_up_12:
  197 D1:BFB3 00 -  -  -  	.db 0
  198 D1:BFB4 -  -  -  -  
  199 D1:BFB4 -  -  -  -  decompress_frame_up_13:
  200 D1:BFB4 00 -  -  -  	.db 0
  201 D1:BFB5 -  -  -  -  
  202 D1:BFB5 -  -  -  -  decompress_frame_up_14:
  203 D1:BFB5 00 -  -  -  	.db 0
  204 D1:BFB6 -  -  -  -  
  205 D1:BFB6 -  -  -  -  decompress_frame_up_15:
  206 D1:BFB6 00 -  -  -  	.db 0
  207 D1:BFB7 -  -  -  -  
  208 D1:BFB7 -  -  -  -  decompress_frame_up_16:
  209 D1:BFB7 00 -  -  -  	.db 0
  210 D1:BFB8 -  -  -  -  
  211 D1:BFB8 -  -  -  -  decompress_frame_up_17:
  212 D1:BFB8 00 -  -  -  	.db 0
  213 D1:BFB9 -  -  -  -  
  214 D1:BFB9 -  -  -  -  decompress_frame_up_18:
  215 D1:BFB9 00 -  -  -  	.db 0
  216 D1:BFBA -  -  -  -  
  217 D1:BFBA -  -  -  -  decompress_frame_up_19:
  218 D1:BFBA 00 -  -  -  	.db 0
  219 D1:BFBB -  -  -  -  
  220 D1:BFBB -  -  -  -  decompress_frame_up_20:
  221 D1:BFBB 00 -  -  -  	.db 0
  222 D1:BFBC -  -  -  -  
  223 D1:BFBC -  -  -  -  decompress_frame_up_21:
  224 D1:BFBC 00 -  -  -  	.db 0
  225 D1:BFBD -  -  -  -  
  226 D1:BFBD -  -  -  -  decompress_frame_up_22:
  227 D1:BFBD 00 -  -  -  	.db 0
  228 D1:BFBE -  -  -  -  
  229 D1:BFBE -  -  -  -  decompress_frame_up_23:
  230 D1:BFBE 00 -  -  -  	.db 0
  231 D1:BFBF -  -  -  -  
  232 D1:BFBF -  -  -  -  decompress_frame_up_24:
  233 D1:BFBF 00 -  -  -  	.db 0
  234 D1:BFC0 -  -  -  -  
  235 D1:BFC0 -  -  -  -  decompress_frame_up_25:
  236 D1:BFC0 00 -  -  -  	.db 0
  237 D1:BFC1 -  -  -  -  
  238 D1:BFC1 -  -  -  -  decompress_frame_up_26:
  239 D1:BFC1 00 -  -  -  	.db 0
  240 D1:BFC2 -  -  -  -  
  241 D1:BFC2 -  -  -  -  decompress_frame_up_27:
  242 D1:BFC2 00 -  -  -  	.db 0
  243 D1:BFC3 -  -  -  -  
  244 D1:BFC3 -  -  -  -  
  245 D1:BFC3 -  -  -  -  
  246 D1:BFC3 -  -  -  -  decompress_frame_down_0:
  247 D1:BFC3 00 -  -  -  	.db 0
  248 D1:BFC4 -  -  -  -  
  249 D1:BFC4 -  -  -  -  decompress_frame_down_1:
  250 D1:BFC4 00 -  -  -  	.db 0
  251 D1:BFC5 -  -  -  -  
  252 D1:BFC5 -  -  -  -  decompress_frame_down_2:
  253 D1:BFC5 00 -  -  -  	.db 0
  254 D1:BFC6 -  -  -  -  
  255 D1:BFC6 -  -  -  -  decompress_frame_down_3:
  256 D1:BFC6 00 -  -  -  	.db 0
  257 D1:BFC7 -  -  -  -  
  258 D1:BFC7 -  -  -  -  decompress_frame_down_4:
  259 D1:BFC7 2C -  -  -  	.db 44
  260 D1:BFC8 74 C2 D1 2C 
              03 D4 -  -  	.dl Tree_0, Tree_0_Fast_0
  261 D1:BFCE 80 -  -  -  	.db %10000000
  262 D1:BFCF C0 C2 D1 DE 
              03 D4 -  -  	.dl Tree_3, Tree_3_Fast_0
  263 D1:BFD5 80 -  -  -  	.db %10000000
  264 D1:BFD6 0D C3 D1 94 
              04 D4 -  -  	.dl Tree_6, Tree_6_Fast_0
  265 D1:BFDC 80 -  -  -  	.db %10000000
  266 D1:BFDD 35 C3 D1 4A 
              05 D4 -  -  	.dl Tree_8, Tree_8_Fast_0
  267 D1:BFE3 80 -  -  -  	.db %10000000
  268 D1:BFE4 5D C3 D1 00 
              06 D4 -  -  	.dl Tree_5, Tree_5_Fast_F_0
  269 D1:BFEA A0 -  -  -  	.db %10100000
  270 D1:BFEB 0D C3 D1 B6 
              06 D4 -  -  	.dl Tree_6, Tree_6_Fast_F_0
  271 D1:BFF1 A0 -  -  -  	.db %10100000
  272 D1:BFF2 AA C3 D1 6C 
              07 D4 -  -  	.dl Tree_2, Tree_2_Fast_F_0
  273 D1:BFF8 A0 -  -  -  	.db %10100000
  274 D1:BFF9 F5 C3 D1 1E 
              08 D4 -  -  	.dl Tree_1, Tree_1_Fast_0
  275 D1:BFFF 80 -  -  -  	.db %10000000
  276 D1:C000 41 C4 D1 D2 
              08 D4 -  -  	.dl Tree_7, Tree_7_Fast_0
  277 D1:C006 80 -  -  -  	.db %10000000
  278 D1:C007 69 C4 D1 88 
              09 D4 -  -  	.dl Tree_9, Tree_9_Fast_0
  279 D1:C00D 80 -  -  -  	.db %10000000
  280 D1:C00E 41 C4 D1 3E 
              0A D4 -  -  	.dl Tree_7, Tree_7_Fast_F_0
  281 D1:C014 A0 -  -  -  	.db %10100000
  282 D1:C015 AA C3 D1 F4 
              0A D4 -  -  	.dl Tree_2, Tree_2_Fast_0
  283 D1:C01B 80 -  -  -  	.db %10000000
  284 D1:C01C 91 C4 D1 A6 
              0B D4 -  -  	.dl Tree_4, Tree_4_Fast_0
  285 D1:C022 80 -  -  -  	.db %10000000
  286 D1:C023 69 C4 D1 5C 
              0C D4 -  -  	.dl Tree_9, Tree_9_Fast_F_0
  287 D1:C029 A0 -  -  -  	.db %10100000
  288 D1:C02A F5 C3 D1 12 
              0D D4 -  -  	.dl Tree_1, Tree_1_Fast_F_0
  289 D1:C030 A0 -  -  -  	.db %10100000
  290 D1:C031 C0 C2 D1 C6 
              0D D4 -  -  	.dl Tree_3, Tree_3_Fast_F_0
  291 D1:C037 A0 -  -  -  	.db %10100000
  292 D1:C038 35 C3 D1 7C 
              0E D4 -  -  	.dl Tree_8, Tree_8_Fast_F_0
  293 D1:C03E A0 -  -  -  	.db %10100000
  294 D1:C03F 91 C4 D1 32 
              0F D4 -  -  	.dl Tree_4, Tree_4_Fast_F_0
  295 D1:C045 A0 -  -  -  	.db %10100000
  296 D1:C046 74 C2 D1 E8 
              0F D4 -  -  	.dl Tree_0, Tree_0_Fast_F_0
  297 D1:C04C A0 -  -  -  	.db %10100000
  298 D1:C04D DE C4 D1 9A 
              10 D4 -  -  	.dl Moss_0, Moss_0_Fast_0
  299 D1:C053 80 -  -  -  	.db %10000000
  300 D1:C054 DE C4 D1 24 
              11 D4 -  -  	.dl Moss_0, Moss_0_Fast_F_0
  301 D1:C05A A0 -  -  -  	.db %10100000
  302 D1:C05B 14 C5 D1 46 
              12 D4 -  -  	.dl Moss_2, Moss_2_Fast_F_0
  303 D1:C061 A0 -  -  -  	.db %10100000
  304 D1:C062 4E C5 D1 DD 
              12 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_0
  305 D1:C068 40 -  -  -  	.db %01000000
  306 D1:C069 8E C5 D1 93 
              13 D4 -  -  	.dl Vines_2, Vines_2_Slow_0
  307 D1:C06F 00 -  -  -  	.db %00000000
  308 D1:C070 D5 C5 D1 6F 
              14 D4 -  -  	.dl Vines_1, Vines_1_Slow_O_0
  309 D1:C076 40 -  -  -  	.db %01000000
  310 D1:C077 4E C5 D1 FB 
              14 D4 -  -  	.dl Vines_3, Vines_3_Slow_O_F_0
  311 D1:C07D 60 -  -  -  	.db %01100000
  312 D1:C07E 8E C5 D1 B1 
              15 D4 -  -  	.dl Vines_2, Vines_2_Slow_F_0
  313 D1:C084 20 -  -  -  	.db %00100000
  314 D1:C085 4E C5 D1 8B 
              16 D4 -  -  	.dl Vines_3, Vines_3_Slow_F_0
  315 D1:C08B 20 -  -  -  	.db %00100000
  316 D1:C08C D5 C5 D1 3B 
              17 D4 -  -  	.dl Vines_1, Vines_1_Slow_0
  317 D1:C092 00 -  -  -  	.db %00000000
  318 D1:C093 FF C5 D1 CB 
              17 D4 -  -  	.dl Vines_8, Vines_8_Slow_0
  319 D1:C099 00 -  -  -  	.db %00000000
  320 D1:C09A 8E C5 D1 95 
              18 D4 -  -  	.dl Vines_2, Vines_2_Slow_O_0
  321 D1:C0A0 40 -  -  -  	.db %01000000
  322 D1:C0A1 4E C5 D1 6D 
              19 D4 -  -  	.dl Vines_3, Vines_3_Slow_0
  323 D1:C0A7 00 -  -  -  	.db %00000000
  324 D1:C0A8 2D C6 D1 1D 
              1A D4 -  -  	.dl Vines_5, Vines_5_Slow_O_0
  325 D1:C0AE 40 -  -  -  	.db %01000000
  326 D1:C0AF 7A C6 D1 0D 
              1B D4 -  -  	.dl Vines_7, Vines_7_Slow_0
  327 D1:C0B5 00 -  -  -  	.db %00000000
  328 D1:C0B6 FF C5 D1 CD 
              1B D4 -  -  	.dl Vines_8, Vines_8_Slow_F_0
  329 D1:C0BC 20 -  -  -  	.db %00100000
  330 D1:C0BD 2D C6 D1 97 
              1C D4 -  -  	.dl Vines_5, Vines_5_Slow_O_F_0
  331 D1:C0C3 60 -  -  -  	.db %01100000
  332 D1:C0C4 A6 C6 D1 85 
              1D D4 -  -  	.dl Vines_4, Vines_4_Slow_O_0
  333 D1:C0CA 40 -  -  -  	.db %01000000
  334 D1:C0CB DD C6 D1 37 
              1E D4 -  -  	.dl Vines_9, Vines_9_Slow_O_0
  335 D1:C0D1 40 -  -  -  	.db %01000000
  336 D1:C0D2 10 C7 D1 E9 
              1E D4 -  -  	.dl Vines_10, Vines_10_Slow_O_0
  337 D1:C0D8 40 -  -  -  	.db %01000000
  338 D1:C0D9 4D C7 D1 A8 
              1F D4 -  -  	.dl Branches_15, Branches_15_Fast_0
  339 D1:C0DF 80 -  -  -  	.db %10000000
  340 D1:C0E0 0F C8 D1 E4 
              20 D4 -  -  	.dl Branches_3, Branches_3_Fast_F_0
  341 D1:C0E6 A0 -  -  -  	.db %10100000
  342 D1:C0E7 BB C8 D1 FE 
              21 D4 -  -  	.dl Branches_5, Branches_5_Fast_0
  343 D1:C0ED 80 -  -  -  	.db %10000000
  344 D1:C0EE 51 C9 D1 F0 
              22 D4 -  -  	.dl Branches_11, Branches_11_Fast_0
  345 D1:C0F4 80 -  -  -  	.db %10000000
  346 D1:C0F5 FA C9 D1 F8 
              23 D4 -  -  	.dl Branches_6, Branches_6_Fast_F_0
  347 D1:C0FB A0 -  -  -  	.db %10100000
  348 D1:C0FC -  -  -  -  
  349 D1:C0FC -  -  -  -  decompress_frame_down_5:
  350 D1:C0FC 00 -  -  -  	.db 0
  351 D1:C0FD -  -  -  -  
  352 D1:C0FD -  -  -  -  decompress_frame_down_6:
  353 D1:C0FD 00 -  -  -  	.db 0
  354 D1:C0FE -  -  -  -  
  355 D1:C0FE -  -  -  -  decompress_frame_down_7:
  356 D1:C0FE 00 -  -  -  	.db 0
  357 D1:C0FF -  -  -  -  
  358 D1:C0FF -  -  -  -  decompress_frame_down_8:
  359 D1:C0FF 00 -  -  -  	.db 0
  360 D1:C100 -  -  -  -  
  361 D1:C100 -  -  -  -  decompress_frame_down_9:
  362 D1:C100 00 -  -  -  	.db 0
  363 D1:C101 -  -  -  -  
  364 D1:C101 -  -  -  -  decompress_frame_down_10:
  365 D1:C101 00 -  -  -  	.db 0
  366 D1:C102 -  -  -  -  
  367 D1:C102 -  -  -  -  decompress_frame_down_11:
  368 D1:C102 01 -  -  -  	.db 1
  369 D1:C103 3D C2 D1 C1 
              01 D4 -  -  	.dl Moss_1, Moss_1_Slow_O_0
  370 D1:C109 40 -  -  -  	.db %01000000
  371 D1:C10A -  -  -  -  
  372 D1:C10A -  -  -  -  decompress_frame_down_12:
  373 D1:C10A 00 -  -  -  	.db 0
  374 D1:C10B -  -  -  -  
  375 D1:C10B -  -  -  -  decompress_frame_down_13:
  376 D1:C10B 00 -  -  -  	.db 0
  377 D1:C10C -  -  -  -  
  378 D1:C10C -  -  -  -  decompress_frame_down_14:
  379 D1:C10C 00 -  -  -  	.db 0
  380 D1:C10D -  -  -  -  
  381 D1:C10D -  -  -  -  decompress_frame_down_15:
  382 D1:C10D 01 -  -  -  	.db 1
  383 D1:C10E 3D C2 D1 9E 
              02 D4 -  -  	.dl Moss_1, Moss_1_Fast_0
  384 D1:C114 80 -  -  -  	.db %10000000
  385 D1:C115 -  -  -  -  
  386 D1:C115 -  -  -  -  decompress_frame_down_16:
  387 D1:C115 00 -  -  -  	.db 0
  388 D1:C116 -  -  -  -  
  389 D1:C116 -  -  -  -  decompress_frame_down_17:
  390 D1:C116 00 -  -  -  	.db 0
  391 D1:C117 -  -  -  -  
  392 D1:C117 -  -  -  -  decompress_frame_down_18:
  393 D1:C117 00 -  -  -  	.db 0
  394 D1:C118 -  -  -  -  
  395 D1:C118 -  -  -  -  decompress_frame_down_19:
  396 D1:C118 00 -  -  -  	.db 0
  397 D1:C119 -  -  -  -  
  398 D1:C119 -  -  -  -  decompress_frame_down_20:
  399 D1:C119 01 -  -  -  	.db 1
  400 D1:C11A 14 C5 D1 AE 
              11 D4 -  -  	.dl Moss_2, Moss_2_Fast_0
  401 D1:C120 80 -  -  -  	.db %10000000
  402 D1:C121 -  -  -  -  
  403 D1:C121 -  -  -  -  decompress_frame_down_21:
  404 D1:C121 00 -  -  -  	.db 0
  405 D1:C122 -  -  -  -  
  406 D1:C122 -  -  -  -  decompress_frame_down_22:
  407 D1:C122 00 -  -  -  	.db 0
  408 D1:C123 -  -  -  -  
  409 D1:C123 -  -  -  -  decompress_frame_down_23:
  410 D1:C123 00 -  -  -  	.db 0
  411 D1:C124 -  -  -  -  
  412 D1:C124 -  -  -  -  decompress_frame_down_24:
  413 D1:C124 00 -  -  -  	.db 0
  414 D1:C125 -  -  -  -  
  415 D1:C125 -  -  -  -  decompress_frame_down_25:
  416 D1:C125 00 -  -  -  	.db 0
  417 D1:C126 -  -  -  -  
  418 D1:C126 -  -  -  -  decompress_frame_down_26:
  419 D1:C126 00 -  -  -  	.db 0
  420 D1:C127 -  -  -  -  
  421 D1:C127 -  -  -  -  decompress_frame_down_27:
  422 D1:C127 00 -  -  -  	.db 0
Listing for file "ascent.asm"
  529 D1:C128 -  -  -  -  #include "generated/Palette_Setup.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Palette_Setup.txt"
    1 D1:C128 -  -  -  -  setup_palette_1:
    2 D1:C128 21 00 02 E3 	ld hl,mpLcdPalette
    3 D1:C12C 3E 40 -  -  	ld a,%01000000
    4 D1:C12E 77 -  -  -  	ld (hl),a 
    5 D1:C12F 23 -  -  -  	inc hl
    6 D1:C130 3E 10 -  -  	ld a,%00010000
    7 D1:C132 77 -  -  -  	ld (hl),a 
    8 D1:C133 23 -  -  -  	inc hl
    9 D1:C134 3E C1 -  -  	ld a,%11000001
   10 D1:C136 77 -  -  -  	ld (hl),a 
   11 D1:C137 23 -  -  -  	inc hl
   12 D1:C138 3E A8 -  -  	ld a,%10101000
   13 D1:C13A 77 -  -  -  	ld (hl),a 
   14 D1:C13B 23 -  -  -  	inc hl
   15 D1:C13C 3E C6 -  -  	ld a,%11000110
   16 D1:C13E 77 -  -  -  	ld (hl),a 
   17 D1:C13F 23 -  -  -  	inc hl
   18 D1:C140 3E D1 -  -  	ld a,%11010001
   19 D1:C142 77 -  -  -  	ld (hl),a 
   20 D1:C143 23 -  -  -  	inc hl
   21 D1:C144 3E 2A -  -  	ld a,%00101010
   22 D1:C146 77 -  -  -  	ld (hl),a 
   23 D1:C147 23 -  -  -  	inc hl
   24 D1:C148 3E 2E -  -  	ld a,%00101110
   25 D1:C14A 77 -  -  -  	ld (hl),a 
   26 D1:C14B 23 -  -  -  	inc hl
   27 D1:C14C 3E 65 -  -  	ld a,%01100101
   28 D1:C14E 77 -  -  -  	ld (hl),a 
   29 D1:C14F 23 -  -  -  	inc hl
   30 D1:C150 3E 95 -  -  	ld a,%10010101
   31 D1:C152 77 -  -  -  	ld (hl),a 
   32 D1:C153 23 -  -  -  	inc hl
   33 D1:C154 3E A2 -  -  	ld a,%10100010
   34 D1:C156 77 -  -  -  	ld (hl),a 
   35 D1:C157 23 -  -  -  	inc hl
   36 D1:C158 3E 12 -  -  	ld a,%00010010
   37 D1:C15A 77 -  -  -  	ld (hl),a 
   38 D1:C15B 23 -  -  -  	inc hl
   39 D1:C15C 3E 00 -  -  	ld a,%00000000
   40 D1:C15E 77 -  -  -  	ld (hl),a 
   41 D1:C15F 23 -  -  -  	inc hl
   42 D1:C160 3E 00 -  -  	ld a,%00000000
   43 D1:C162 77 -  -  -  	ld (hl),a 
   44 D1:C163 23 -  -  -  	inc hl
   45 D1:C164 3E F9 -  -  	ld a,%11111001
   46 D1:C166 77 -  -  -  	ld (hl),a 
   47 D1:C167 23 -  -  -  	inc hl
   48 D1:C168 3E 0A -  -  	ld a,%00001010
   49 D1:C16A 77 -  -  -  	ld (hl),a 
   50 D1:C16B 23 -  -  -  	inc hl
   51 D1:C16C 3E FF -  -  	ld a,%11111111
   52 D1:C16E 77 -  -  -  	ld (hl),a 
   53 D1:C16F 23 -  -  -  	inc hl
   54 D1:C170 3E FF -  -  	ld a,%11111111
   55 D1:C172 77 -  -  -  	ld (hl),a 
   56 D1:C173 23 -  -  -  	inc hl
   57 D1:C174 3E 20 -  -  	ld a,%00100000
   58 D1:C176 77 -  -  -  	ld (hl),a 
   59 D1:C177 23 -  -  -  	inc hl
   60 D1:C178 3E 6A -  -  	ld a,%01101010
   61 D1:C17A 77 -  -  -  	ld (hl),a 
   62 D1:C17B 23 -  -  -  	inc hl
   63 D1:C17C 3E 1F -  -  	ld a,%00011111
   64 D1:C17E 77 -  -  -  	ld (hl),a 
   65 D1:C17F 23 -  -  -  	inc hl
   66 D1:C180 3E 81 -  -  	ld a,%10000001
   67 D1:C182 77 -  -  -  	ld (hl),a 
   68 D1:C183 23 -  -  -  	inc hl
   69 D1:C184 3E 1F -  -  	ld a,%00011111
   70 D1:C186 77 -  -  -  	ld (hl),a 
   71 D1:C187 23 -  -  -  	inc hl
   72 D1:C188 3E 81 -  -  	ld a,%10000001
   73 D1:C18A 77 -  -  -  	ld (hl),a 
   74 D1:C18B 23 -  -  -  	inc hl
   75 D1:C18C 3E 1F -  -  	ld a,%00011111
   76 D1:C18E 77 -  -  -  	ld (hl),a 
   77 D1:C18F 23 -  -  -  	inc hl
   78 D1:C190 3E 81 -  -  	ld a,%10000001
   79 D1:C192 77 -  -  -  	ld (hl),a 
   80 D1:C193 23 -  -  -  	inc hl
   81 D1:C194 3E 1F -  -  	ld a,%00011111
   82 D1:C196 77 -  -  -  	ld (hl),a 
   83 D1:C197 23 -  -  -  	inc hl
   84 D1:C198 3E 81 -  -  	ld a,%10000001
   85 D1:C19A 77 -  -  -  	ld (hl),a 
   86 D1:C19B 23 -  -  -  	inc hl
   87 D1:C19C 3E C6 -  -  	ld a,%11000110
   88 D1:C19E 77 -  -  -  	ld (hl),a 
   89 D1:C19F 23 -  -  -  	inc hl
   90 D1:C1A0 3E 98 -  -  	ld a,%10011000
   91 D1:C1A2 77 -  -  -  	ld (hl),a 
   92 D1:C1A3 23 -  -  -  	inc hl
   93 D1:C1A4 3E 07 -  -  	ld a,%00000111
   94 D1:C1A6 77 -  -  -  	ld (hl),a 
   95 D1:C1A7 23 -  -  -  	inc hl
   96 D1:C1A8 3E 1D -  -  	ld a,%00011101
   97 D1:C1AA 77 -  -  -  	ld (hl),a 
   98 D1:C1AB 23 -  -  -  	inc hl
   99 D1:C1AC C9 -  -  -  	ret 
Listing for file "ascent.asm"
  530 D1:C1AD -  -  -  -  #include "generated/Sprite_Tables.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Tables.txt"
    1 D1:C1AD -  -  -  -  Sprite_Table_0:
    2 D1:C1AD C1 01 D4 -  	.dl Moss_1_Slow_O_0
    3 D1:C1B0 9E 02 D4 -  	.dl Moss_1_Fast_0
    4 D1:C1B3 3B 17 D4 -  	.dl Vines_1_Slow_0
    5 D1:C1B6 8B 16 D4 -  	.dl Vines_3_Slow_F_0
    6 D1:C1B9 B1 15 D4 -  	.dl Vines_2_Slow_F_0
    7 D1:C1BC FB 14 D4 -  	.dl Vines_3_Slow_O_F_0
    8 D1:C1BF 6F 14 D4 -  	.dl Vines_1_Slow_O_0
    9 D1:C1C2 93 13 D4 -  	.dl Vines_2_Slow_0
   10 D1:C1C5 DD 12 D4 -  	.dl Vines_3_Slow_O_0
   11 D1:C1C8 2C 03 D4 -  	.dl Tree_0_Fast_0
   12 D1:C1CB A6 0B D4 -  	.dl Tree_4_Fast_0
   13 D1:C1CE D2 08 D4 -  	.dl Tree_7_Fast_0
   14 D1:C1D1 5C 0C D4 -  	.dl Tree_9_Fast_F_0
   15 D1:C1D4 B6 06 D4 -  	.dl Tree_6_Fast_F_0
   16 D1:C1D7 00 06 D4 -  	.dl Tree_5_Fast_F_0
   17 D1:C1DA 12 0D D4 -  	.dl Tree_1_Fast_F_0
   18 D1:C1DD 3E 0A D4 -  	.dl Tree_7_Fast_F_0
   19 D1:C1E0 DE 03 D4 -  	.dl Tree_3_Fast_0
   20 D1:C1E3 94 04 D4 -  	.dl Tree_6_Fast_0
   21 D1:C1E6 88 09 D4 -  	.dl Tree_9_Fast_0
   22 D1:C1E9 F4 0A D4 -  	.dl Tree_2_Fast_0
   23 D1:C1EC 32 0F D4 -  	.dl Tree_4_Fast_F_0
   24 D1:C1EF 6C 07 D4 -  	.dl Tree_2_Fast_F_0
   25 D1:C1F2 C6 0D D4 -  	.dl Tree_3_Fast_F_0
   26 D1:C1F5 1E 08 D4 -  	.dl Tree_1_Fast_0
   27 D1:C1F8 4A 05 D4 -  	.dl Tree_8_Fast_0
   28 D1:C1FB 7C 0E D4 -  	.dl Tree_8_Fast_F_0
   29 D1:C1FE E8 0F D4 -  	.dl Tree_0_Fast_F_0
   30 D1:C201 0D 1B D4 -  	.dl Vines_7_Slow_0
   31 D1:C204 CD 1B D4 -  	.dl Vines_8_Slow_F_0
   32 D1:C207 85 1D D4 -  	.dl Vines_4_Slow_O_0
   33 D1:C20A 37 1E D4 -  	.dl Vines_9_Slow_O_0
   34 D1:C20D E9 1E D4 -  	.dl Vines_10_Slow_O_0
   35 D1:C210 A8 1F D4 -  	.dl Branches_15_Fast_0
   36 D1:C213 E4 20 D4 -  	.dl Branches_3_Fast_F_0
   37 D1:C216 1D 1A D4 -  	.dl Vines_5_Slow_O_0
   38 D1:C219 FE 21 D4 -  	.dl Branches_5_Fast_0
   39 D1:C21C 97 1C D4 -  	.dl Vines_5_Slow_O_F_0
   40 D1:C21F 6D 19 D4 -  	.dl Vines_3_Slow_0
   41 D1:C222 CB 17 D4 -  	.dl Vines_8_Slow_0
   42 D1:C225 AE 11 D4 -  	.dl Moss_2_Fast_0
   43 D1:C228 24 11 D4 -  	.dl Moss_0_Fast_F_0
   44 D1:C22B 46 12 D4 -  	.dl Moss_2_Fast_F_0
   45 D1:C22E 9A 10 D4 -  	.dl Moss_0_Fast_0
   46 D1:C231 F0 22 D4 -  	.dl Branches_11_Fast_0
   47 D1:C234 95 18 D4 -  	.dl Vines_2_Slow_O_0
   48 D1:C237 F8 23 D4 -  	.dl Branches_6_Fast_F_0
   49 D1:C23A B5 24 D4 -  	.dl Moss_2_Slow_O_0
   50 D1:C23D -  -  -  -  
   51 D1:C23D -  -  -  -  Sprite_Table_1:
   52 D1:C23D -  -  -  -  
Listing for file "ascent.asm"
  531 D1:C23D -  -  -  -  #include "generated/Sprite_Data.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\Sprite_Data.txt"
    1 D1:C23D -  -  -  -  Moss_1:
    2 D1:C23D 10 -  -  -  	.db %00010000
    3 D1:C23E 10 10 -  -  	.db 16, 16
    4 D1:C240 00 3C 30 FC 
              30 FC 3F CC 	.db %00000000, %00111100, %00110000, %11111100, %00110000, %11111100, %00111111, %11001100
    5 D1:C248 FC FC FC C0 
              FF FC 33 CF 	.db %11111100, %11111100, %11111100, %11000000, %11111111, %11111100, %00110011, %11001111
    6 D1:C250 3F C3 3F FF 
              3F 3C 3F 3C 	.db %00111111, %11000011, %00111111, %11111111, %00111111, %00111100, %00111111, %00111100
    7 D1:C258 3F F0 3F F0 
              3C 00 3C 00 	.db %00111111, %11110000, %00111111, %11110000, %00111100, %00000000, %00111100, %00000000
    8 D1:C260 -  -  -  -  
    9 D1:C260 34 -  -  -  	.db %00110100
   10 D1:C261 -  -  -  -  
   11 D1:C261 10 14 10 04 
              10 41 B1 41 	.db %00010000, %00010100, %00010000, %00000100, %00010000, %01000001, %10110001, %01000001
   12 D1:C269 00 0E 23 0F 
              41 00 2C 01 	.db %00000000, %00001110, %00100011, %00001111, %01000001, %00000000, %00101100, %00000001
   13 D1:C271 03 44 40 -  	.db %00000011, %01000100, %01000000
   14 D1:C274 -  -  -  -  
   15 D1:C274 -  -  -  -  
   16 D1:C274 -  -  -  -  Tree_0:
   17 D1:C274 10 -  -  -  	.db %00010000
   18 D1:C275 18 0C -  -  	.db 24, 12
   19 D1:C277 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   20 D1:C27F FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   21 D1:C287 FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
   22 D1:C28F 3F FF FF FF 
              FF FF FF FF 	.db %00111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   23 D1:C297 FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
   24 D1:C29B -  -  -  -  
   25 D1:C29B 01 -  -  -  	.db %00000001
   26 D1:C29C -  -  -  -  
   27 D1:C29C 00 06 04 00 
              06 32 01 82 	.db %00000000, %00000110, %00000100, %00000000, %00000110, %00110010, %00000001, %10000010
   28 D1:C2A4 10 01 86 00 
              01 04 31 00 	.db %00010000, %00000001, %10000110, %00000000, %00000001, %00000100, %00110001, %00000000
   29 D1:C2AC 08 40 10 62 
              0C 43 80 30 	.db %00001000, %01000000, %00010000, %01100010, %00001100, %01000011, %10000000, %00110000
   30 D1:C2B4 0C 0D 00 0C 
              1C 00 50 38 	.db %00001100, %00001101, %00000000, %00001100, %00011100, %00000000, %01010000, %00111000
   31 D1:C2BC 00 00 30 80 	.db %00000000, %00000000, %00110000, %10000000
   32 D1:C2C0 -  -  -  -  
   33 D1:C2C0 -  -  -  -  
   34 D1:C2C0 -  -  -  -  Tree_3:
   35 D1:C2C0 24 -  -  -  	.db %00100100
   36 D1:C2C1 18 0C -  -  	.db 24, 12
   37 D1:C2C3 01 20 -  -  	.db %00000001, %00100000
   38 D1:C2C5 -  -  -  -  
   39 D1:C2C5 14 00 05 14 
              01 5A 14 01 	.db %00010100, %00000000, %00000101, %00010100, %00000001, %01011010, %00010100, %00000001
   40 D1:C2CD 15 15 01 5A 
              15 04 14 15 	.db %00010101, %00010101, %00000001, %01011010, %00010101, %00000100, %00010100, %00010101
   41 D1:C2D5 01 66 05 10 
              00 15 81 65 	.db %00000001, %01100110, %00000101, %00010000, %00000000, %00010101, %10000001, %01100101
   42 D1:C2DD 05 00 00 51 
              85 69 05 05 	.db %00000101, %00000000, %00000000, %01010001, %10000101, %01101001, %00000101, %00000101
   43 D1:C2E5 01 51 85 59 
              14 15 00 51 	.db %00000001, %01010001, %10000101, %01011001, %00010100, %00010101, %00000000, %01010001
   44 D1:C2ED 45 55 14 14 
              00 54 45 65 	.db %01000101, %01010101, %00010100, %00010100, %00000000, %01010100, %01000101, %01100101
   45 D1:C2F5 10 50 00 54 
              85 65 04 50 	.db %00010000, %01010000, %00000000, %01010100, %10000101, %01100101, %00000100, %01010000
   46 D1:C2FD 50 14 06 25 
              14 40 54 04 	.db %01010000, %00010100, %00000110, %00100101, %00010100, %01000000, %01010100, %00000100
   47 D1:C305 00 55 00 10 
              14 00 00 55 	.db %00000000, %01010101, %00000000, %00010000, %00010100, %00000000, %00000000, %01010101
   48 D1:C30D -  -  -  -  
   49 D1:C30D -  -  -  -  
   50 D1:C30D -  -  -  -  Tree_6:
   51 D1:C30D 14 -  -  -  	.db %00010100
   52 D1:C30E 18 0C -  -  	.db 24, 12
   53 D1:C310 12 -  -  -  	.db %00010010
   54 D1:C311 -  -  -  -  
   55 D1:C311 10 04 63 10 
              0C 67 10 4C 	.db %00010000, %00000100, %01100011, %00010000, %00001100, %01100111, %00010000, %01001100
   56 D1:C319 67 10 4D 67 
              20 CC 77 01 	.db %01100111, %00010000, %01001101, %01100111, %00100000, %11001100, %01110111, %00000001
   57 D1:C321 CC 77 11 8E 
              77 53 86 4F 	.db %11001100, %01110111, %00010001, %10001110, %01110111, %01010011, %10000110, %01001111
   58 D1:C329 53 80 4F 43 
              10 9F 02 18 	.db %01010011, %10000000, %01001111, %01000011, %00010000, %10011111, %00000010, %00011000
   59 D1:C331 BF 00 19 34 	.db %10111111, %00000000, %00011001, %00110100
   60 D1:C335 -  -  -  -  
   61 D1:C335 -  -  -  -  
   62 D1:C335 -  -  -  -  Tree_8:
   63 D1:C335 14 -  -  -  	.db %00010100
   64 D1:C336 18 0C -  -  	.db 24, 12
   65 D1:C338 21 -  -  -  	.db %00100001
   66 D1:C339 -  -  -  -  
   67 D1:C339 40 20 22 50 
              20 30 58 20 	.db %01000000, %00100000, %00100010, %01010000, %00100000, %00110000, %01011000, %00100000
   68 D1:C341 30 58 20 39 
              18 A0 39 18 	.db %00110000, %01011000, %00100000, %00111001, %00011000, %10100000, %00111001, %00011000
   69 D1:C349 C0 18 1C 80 
              88 0D 00 CC 	.db %11000000, %00011000, %00011100, %10000000, %10001000, %00001101, %00000000, %11001100
   70 D1:C351 0C 01 CC 0C 
              00 CC 08 20 	.db %00001100, %00000001, %11001100, %00001100, %00000000, %11001100, %00001000, %00100000
   71 D1:C359 C9 00 60 C0 	.db %11001001, %00000000, %01100000, %11000000
   72 D1:C35D -  -  -  -  
   73 D1:C35D -  -  -  -  
   74 D1:C35D -  -  -  -  Tree_5:
   75 D1:C35D 24 -  -  -  	.db %00100100
   76 D1:C35E 18 0C -  -  	.db 24, 12
   77 D1:C360 01 20 -  -  	.db %00000001, %00100000
   78 D1:C362 -  -  -  -  
   79 D1:C362 05 00 01 05 
              11 95 01 05 	.db %00000101, %00000000, %00000001, %00000101, %00010001, %10010101, %00000001, %00000101
   80 D1:C36A 41 54 41 95 
              01 45 41 54 	.db %01000001, %01010100, %01000001, %10010101, %00000001, %01000101, %01000001, %01010100
   81 D1:C372 50 65 01 04 
              41 80 50 55 	.db %01010000, %01100101, %00000001, %00000100, %01000001, %10000000, %01010000, %01010101
   82 D1:C37A 51 01 40 00 
              54 15 11 01 	.db %01010001, %00000001, %01000000, %00000000, %01010100, %00010101, %00010001, %00000001
   83 D1:C382 40 10 58 55 
              05 41 10 50 	.db %01000000, %00010000, %01011000, %01010101, %00000101, %01000001, %00010000, %01010000
   84 D1:C38A 50 55 05 00 
              55 10 60 59 	.db %01010000, %01010101, %00000101, %00000000, %01010101, %00010000, %01100000, %01011001
   85 D1:C392 05 01 45 10 
              61 65 15 01 	.db %00000101, %00000001, %01000101, %00010000, %01100001, %01100101, %00010101, %00000001
   86 D1:C39A 45 41 61 95 
              05 11 05 51 	.db %01000101, %01000001, %01100001, %10010101, %00000101, %00010001, %00000101, %01010001
   87 D1:C3A2 55 95 05 45 
              04 11 11 45 	.db %01010101, %10010101, %00000101, %01000101, %00000100, %00010001, %00010001, %01000101
   88 D1:C3AA -  -  -  -  
   89 D1:C3AA -  -  -  -  
   90 D1:C3AA -  -  -  -  Tree_2:
   91 D1:C3AA 10 -  -  -  	.db %00010000
   92 D1:C3AB 18 0C -  -  	.db 24, 12
   93 D1:C3AD FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   94 D1:C3B5 FF FF FF FF 
              3F FF FF 3F 	.db %11111111, %11111111, %11111111, %11111111, %00111111, %11111111, %11111111, %00111111
   95 D1:C3BD FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
   96 D1:C3C5 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   97 D1:C3CD FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
   98 D1:C3D1 -  -  -  -  
   99 D1:C3D1 01 -  -  -  	.db %00000001
  100 D1:C3D2 -  -  -  -  
  101 D1:C3D2 00 00 06 00 
              40 C6 04 60 	.db %00000000, %00000000, %00000110, %00000000, %01000000, %11000110, %00000100, %01100000
  102 D1:C3DA CC 04 70 CC 
              01 C7 90 03 	.db %11001100, %00000100, %01110000, %11001100, %00000001, %11000111, %10010000, %00000011
  103 D1:C3E2 2E 00 0F 18 
              40 0C 60 00 	.db %00101110, %00000000, %00001111, %00011000, %01000000, %00001100, %01100000, %00000000
  104 D1:C3EA 00 33 00 06 
              37 00 C6 06 	.db %00000000, %00110011, %00000000, %00000110, %00110111, %00000000, %11000110, %00000110
  105 D1:C3F2 00 C1 00 -  	.db %00000000, %11000001, %00000000
  106 D1:C3F5 -  -  -  -  
  107 D1:C3F5 -  -  -  -  
  108 D1:C3F5 -  -  -  -  Tree_1:
  109 D1:C3F5 10 -  -  -  	.db %00010000
  110 D1:C3F6 18 0C -  -  	.db 24, 12
  111 D1:C3F8 3F FF FF 3F 
              FF FF FF FF 	.db %00111111, %11111111, %11111111, %00111111, %11111111, %11111111, %11111111, %11111111
  112 D1:C400 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  113 D1:C408 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  114 D1:C410 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  115 D1:C418 FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111
  116 D1:C41C -  -  -  -  
  117 D1:C41C 01 -  -  -  	.db %00000001
  118 D1:C41D -  -  -  -  
  119 D1:C41D 04 38 0C 00 
              E0 30 00 C6 	.db %00000100, %00111000, %00001100, %00000000, %11100000, %00110000, %00000000, %11000110
  120 D1:C425 60 00 C6 00 
              0C 27 00 1C 	.db %01100000, %00000000, %11000110, %00000000, %00001100, %00100111, %00000000, %00011100
  121 D1:C42D 13 00 1C 00 
              00 18 31 A0 	.db %00010011, %00000000, %00011100, %00000000, %00000000, %00011000, %00110001, %10100000
  122 D1:C435 08 71 90 08 
              E1 C0 00 C8 	.db %00001000, %01110001, %10010000, %00001000, %11100001, %11000000, %00000000, %11001000
  123 D1:C43D C0 00 04 00 	.db %11000000, %00000000, %00000100, %00000000
  124 D1:C441 -  -  -  -  
  125 D1:C441 -  -  -  -  
  126 D1:C441 -  -  -  -  Tree_7:
  127 D1:C441 14 -  -  -  	.db %00010100
  128 D1:C442 18 0C -  -  	.db 24, 12
  129 D1:C444 12 -  -  -  	.db %00010010
  130 D1:C445 -  -  -  -  
  131 D1:C445 70 60 19 70 
              64 19 3A 64 	.db %01110000, %01100000, %00011001, %01110000, %01100100, %00011001, %00111010, %01100100
  132 D1:C44D 3F 5B 46 3F 
              21 4E 37 28 	.db %00111111, %01011011, %01000110, %00111111, %00100001, %01001110, %00110111, %00101000
  133 D1:C455 4E 67 08 DE 
              67 18 DD 76 	.db %01001110, %01100111, %00001000, %11011110, %01100111, %00011000, %11011101, %01110110
  134 D1:C45D 00 D8 F6 00 
              19 66 19 08 	.db %00000000, %11011000, %11110110, %00000000, %00011001, %01100110, %00011001, %00001000
  135 D1:C465 66 10 08 06 	.db %01100110, %00010000, %00001000, %00000110
  136 D1:C469 -  -  -  -  
  137 D1:C469 -  -  -  -  
  138 D1:C469 -  -  -  -  Tree_9:
  139 D1:C469 14 -  -  -  	.db %00010100
  140 D1:C46A 18 0C -  -  	.db 24, 12
  141 D1:C46C 21 -  -  -  	.db %00100001
  142 D1:C46D -  -  -  -  
  143 D1:C46D 00 00 18 34 
              00 1C 38 01 	.db %00000000, %00000000, %00011000, %00110100, %00000000, %00011100, %00111000, %00000001
  144 D1:C475 3F 30 01 0E 
              30 00 0C 31 	.db %00111111, %00110000, %00000001, %00001110, %00110000, %00000000, %00001100, %00110001
  145 D1:C47D 00 0C 39 00 
              4C 19 80 44 	.db %00000000, %00001100, %00111001, %00000000, %01001100, %00011001, %10000000, %01000100
  146 D1:C485 18 C0 40 13 
              C0 70 C3 80 	.db %00011000, %11000000, %01000000, %00010011, %11000000, %01110000, %11000011, %10000000
  147 D1:C48D 70 40 00 30 	.db %01110000, %01000000, %00000000, %00110000
  148 D1:C491 -  -  -  -  
  149 D1:C491 -  -  -  -  
  150 D1:C491 -  -  -  -  Tree_4:
  151 D1:C491 24 -  -  -  	.db %00100100
  152 D1:C492 18 0C -  -  	.db 24, 12
  153 D1:C494 01 20 -  -  	.db %00000001, %00100000
  154 D1:C496 -  -  -  -  
  155 D1:C496 10 51 00 50 
              11 16 14 51 	.db %00010000, %01010001, %00000000, %01010000, %00010001, %00010110, %00010100, %01010001
  156 D1:C49E 01 50 95 56 
              14 51 05 50 	.db %00000001, %01010000, %10010101, %01010110, %00010100, %01010001, %00000101, %01010000
  157 D1:C4A6 52 55 04 51 
              55 48 52 55 	.db %01010010, %01010101, %00000100, %01010001, %01010101, %01001000, %01010010, %01010101
  158 D1:C4AE 14 51 01 48 
              52 55 14 51 	.db %00010100, %01010001, %00000001, %01001000, %01010010, %01010101, %00010100, %01010001
  159 D1:C4B6 41 05 19 55 
              10 41 41 45 	.db %01000001, %00000101, %00011001, %01010101, %00010000, %01000001, %01000001, %01000101
  160 D1:C4BE 19 56 00 45 
              41 46 18 56 	.db %00011001, %01010110, %00000000, %01000101, %01000001, %01000110, %00011000, %01010110
  161 D1:C4C6 05 51 41 42 
              16 15 45 51 	.db %00000101, %01010001, %01000001, %01000010, %00010110, %00010101, %01000101, %01010001
  162 D1:C4CE 01 42 11 59 
              00 11 00 42 	.db %00000001, %01000010, %00010001, %01011001, %00000000, %00010001, %00000000, %01000010
  163 D1:C4D6 14 15 00 01 
              00 44 15 55 	.db %00010100, %00010101, %00000000, %00000001, %00000000, %01000100, %00010101, %01010101
  164 D1:C4DE -  -  -  -  
  165 D1:C4DE -  -  -  -  
  166 D1:C4DE -  -  -  -  Moss_0:
  167 D1:C4DE 10 -  -  -  	.db %00010000
  168 D1:C4DF 10 10 -  -  	.db 16, 16
  169 D1:C4E1 00 03 00 33 
              00 F3 3C FF 	.db %00000000, %00000011, %00000000, %00110011, %00000000, %11110011, %00111100, %11111111
  170 D1:C4E9 FC CF 3F FF 
              F3 FC F3 FC 	.db %11111100, %11001111, %00111111, %11111111, %11110011, %11111100, %11110011, %11111100
  171 D1:C4F1 FF FF FF FF 
              FF 0C FF 0C 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00001100, %11111111, %00001100
  172 D1:C4F9 3F 00 3C 00 
              0C 00 0C 00 	.db %00111111, %00000000, %00111100, %00000000, %00001100, %00000000, %00001100, %00000000
  173 D1:C501 -  -  -  -  
  174 D1:C501 34 -  -  -  	.db %00110100
  175 D1:C502 -  -  -  -  
  176 D1:C502 54 51 01 46 
              90 04 42 04 	.db %01010100, %01010001, %00000001, %01000110, %10010000, %00000100, %01000010, %00000100
  177 D1:C50A 60 41 80 40 
              3C 40 50 1C 	.db %01100000, %01000001, %10000000, %01000000, %00111100, %01000000, %01010000, %00011100
  178 D1:C512 1D 50 -  -  	.db %00011101, %01010000
  179 D1:C514 -  -  -  -  
  180 D1:C514 -  -  -  -  
  181 D1:C514 -  -  -  -  Moss_2:
  182 D1:C514 10 -  -  -  	.db %00010000
  183 D1:C515 10 10 -  -  	.db 16, 16
  184 D1:C517 3F 00 3F F0 
              3F F0 3F FC 	.db %00111111, %00000000, %00111111, %11110000, %00111111, %11110000, %00111111, %11111100
  185 D1:C51F FC FC FC FC 
              0F FC 03 FC 	.db %11111100, %11111100, %11111100, %11111100, %00001111, %11111100, %00000011, %11111100
  186 D1:C527 FF FC FF FF 
              FF F3 FF 3F 	.db %11111111, %11111100, %11111111, %11111111, %11111111, %11110011, %11111111, %00111111
  187 D1:C52F FF FF 33 FF 
              30 F0 30 30 	.db %11111111, %11111111, %00110011, %11111111, %00110000, %11110000, %00110000, %00110000
  188 D1:C537 -  -  -  -  
  189 D1:C537 34 -  -  -  	.db %00110100
  190 D1:C538 -  -  -  -  
  191 D1:C538 00 08 00 06 
              04 18 50 84 	.db %00000000, %00001000, %00000000, %00000110, %00000100, %00011000, %01010000, %10000100
  192 D1:C540 21 81 7C 04 
              C0 10 00 50 	.db %00100001, %10000001, %01111100, %00000100, %11000000, %00010000, %00000000, %01010000
  193 D1:C548 08 40 00 4C 
              05 D7 -  -  	.db %00001000, %01000000, %00000000, %01001100, %00000101, %11010111
  194 D1:C54E -  -  -  -  
  195 D1:C54E -  -  -  -  
  196 D1:C54E -  -  -  -  Vines_3:
  197 D1:C54E 10 -  -  -  	.db %00010000
  198 D1:C54F 18 10 -  -  	.db 24, 16
  199 D1:C551 00 00 01 00 
              00 03 00 00 	.db %00000000, %00000000, %00000001, %00000000, %00000000, %00000011, %00000000, %00000000
  200 D1:C559 37 00 00 3E 
              00 00 1C 00 	.db %00110111, %00000000, %00000000, %00111110, %00000000, %00000000, %00011100, %00000000
  201 D1:C561 10 78 00 30 
              F8 00 1F EC 	.db %00010000, %01111000, %00000000, %00110000, %11111000, %00000000, %00011111, %11101100
  202 D1:C569 18 0F CC 18 
              3F 80 0B FE 	.db %00011000, %00001111, %11001100, %00011000, %00111111, %10000000, %00001011, %11111110
  203 D1:C571 00 FF F8 00 
              FF C0 00 01 	.db %00000000, %11111111, %11111000, %00000000, %11111111, %11000000, %00000000, %00000001
  204 D1:C579 00 00 03 00 
              00 03 00 00 	.db %00000000, %00000000, %00000011, %00000000, %00000000, %00000011, %00000000, %00000000
  205 D1:C581 -  -  -  -  
  206 D1:C581 34 -  -  -  	.db %00110100
  207 D1:C582 -  -  -  -  
  208 D1:C582 03 1B 18 70 
              3C 1F 07 81 	.db %00000011, %00011011, %00011000, %01110000, %00111100, %00011111, %00000111, %10000001
  209 D1:C58A E0 7F FF FE 	.db %11100000, %01111111, %11111111, %11111110
  210 D1:C58E -  -  -  -  
  211 D1:C58E -  -  -  -  
  212 D1:C58E -  -  -  -  Vines_2:
  213 D1:C58E 10 -  -  -  	.db %00010000
  214 D1:C58F 16 13 -  -  	.db 22, 19
  215 D1:C591 00 00 04 00 
              00 30 00 39 	.db %00000000, %00000000, %00000100, %00000000, %00000000, %00110000, %00000000, %00111001
  216 D1:C599 C0 00 6F 00 
              10 78 00 63 	.db %11000000, %00000000, %01101111, %00000000, %00010000, %01111000, %00000000, %01100011
  217 D1:C5A1 C0 01 9F 00 
              07 F0 00 0F 	.db %11000000, %00000001, %10011111, %00000000, %00000111, %11110000, %00000000, %00001111
  218 D1:C5A9 C0 00 7D 80 
              63 E6 01 DF 	.db %11000000, %00000000, %01111101, %10000000, %01100011, %11100110, %00000001, %11011111
  219 D1:C5B1 80 01 F6 00 
              0F 80 00 F8 	.db %10000000, %00000001, %11110110, %00000000, %00001111, %10000000, %00000000, %11111000
  220 D1:C5B9 00 1F F8 00 
              3C E0 01 E0 	.db %00000000, %00011111, %11111000, %00000000, %00111100, %11100000, %00000001, %11100000
  221 D1:C5C1 00 0E 00 00 
              00 -  -  -  	.db %00000000, %00001110, %00000000, %00000000, %00000000
  222 D1:C5C6 -  -  -  -  
  223 D1:C5C6 34 -  -  -  	.db %00110100
  224 D1:C5C7 -  -  -  -  
  225 D1:C5C7 21 86 30 C3 
              83 3C F8 7C 	.db %00100001, %10000110, %00110000, %11000011, %10000011, %00111100, %11111000, %01111100
  226 D1:C5CF 1E 7C E7 0F 
              CF 9B -  -  	.db %00011110, %01111100, %11100111, %00001111, %11001111, %10011011
  227 D1:C5D5 -  -  -  -  
  228 D1:C5D5 -  -  -  -  
  229 D1:C5D5 -  -  -  -  Vines_1:
  230 D1:C5D5 10 -  -  -  	.db %00010000
  231 D1:C5D6 18 09 -  -  	.db 24, 9
  232 D1:C5D8 00 06 30 18 
              0E 33 F8 0C 	.db %00000000, %00000110, %00110000, %00011000, %00001110, %00110011, %11111000, %00001100
  233 D1:C5E0 1F FC 07 FF 
              FF FF F0 1F 	.db %00011111, %11111100, %00000111, %11111111, %11111111, %11111111, %11110000, %00011111
  234 D1:C5E8 FE 80 30 00 
              E0 30 00 60 	.db %11111110, %10000000, %00110000, %00000000, %11100000, %00110000, %00000000, %01100000
  235 D1:C5F0 30 00 00 -  	.db %00110000, %00000000, %00000000
  236 D1:C5F3 -  -  -  -  
  237 D1:C5F3 34 -  -  -  	.db %00110100
  238 D1:C5F4 -  -  -  -  
  239 D1:C5F4 00 00 00 F0 
              03 FF 00 FF 	.db %00000000, %00000000, %00000000, %11110000, %00000011, %11111111, %00000000, %11111111
  240 D1:C5FC FF FF FC -  	.db %11111111, %11111111, %11111100
  241 D1:C5FF -  -  -  -  
  242 D1:C5FF -  -  -  -  
  243 D1:C5FF -  -  -  -  Vines_8:
  244 D1:C5FF 10 -  -  -  	.db %00010000
  245 D1:C600 0A 18 -  -  	.db 10, 24
  246 D1:C602 07 01 C1 F0 
              3C 07 01 C1 	.db %00000111, %00000001, %11000001, %11110000, %00111100, %00000111, %00000001, %11000001
  247 D1:C60A FC 3B 0E 03 
              80 E0 38 0E 	.db %11111100, %00111011, %00001110, %00000011, %10000000, %11100000, %00111000, %00001110
  248 D1:C612 07 A1 FB 78 
              FC 07 03 80 	.db %00000111, %10100001, %11111011, %01111000, %11111100, %00000111, %00000011, %10000000
  249 D1:C61A E0 3E 0D 87 
              01 C0 -  -  	.db %11100000, %00111110, %00001101, %10000111, %00000001, %11000000
  250 D1:C620 -  -  -  -  
  251 D1:C620 34 -  -  -  	.db %00110100
  252 D1:C621 -  -  -  -  
  253 D1:C621 24 66 D8 F7 
              B6 DB 3B E3 	.db %00100100, %01100110, %11011000, %11110111, %10110110, %11011011, %00111011, %11100011
  254 D1:C629 86 C9 7B B6 	.db %10000110, %11001001, %01111011, %10110110
  255 D1:C62D -  -  -  -  
  256 D1:C62D -  -  -  -  
  257 D1:C62D -  -  -  -  Vines_5:
  258 D1:C62D 10 -  -  -  	.db %00010000
  259 D1:C62E 14 17 -  -  	.db 20, 23
  260 D1:C630 00 00 30 00 
              1B 00 01 B0 	.db %00000000, %00000000, %00110000, %00000000, %00011011, %00000000, %00000001, %10110000
  261 D1:C638 00 07 00 00 
              F0 00 0E 00 	.db %00000000, %00000111, %00000000, %00000000, %11110000, %00000000, %00001110, %00000000
  262 D1:C640 31 C0 01 B8 
              00 0F 80 01 	.db %00110001, %11000000, %00000001, %10111000, %00000000, %00001111, %10000000, %00000001
  263 D1:C648 F0 00 3E 00 
              47 E0 0F F8 	.db %11110000, %00000000, %00111110, %00000000, %01000111, %11100000, %00001111, %11111000
  264 D1:C650 00 5F 00 03 
              E8 00 3C C0 	.db %00000000, %01011111, %00000000, %00000011, %11101000, %00000000, %00111100, %11000000
  265 D1:C658 0F 8C 00 F0 
              00 3D 00 07 	.db %00001111, %10001100, %00000000, %11110000, %00000000, %00111101, %00000000, %00000111
  266 D1:C660 D8 00 79 00 
              0F 00 00 E0 	.db %11011000, %00000000, %01111001, %00000000, %00001111, %00000000, %00000000, %11100000
  267 D1:C668 00 00 -  -  	.db %00000000, %00000000
  268 D1:C66A -  -  -  -  
  269 D1:C66A 34 -  -  -  	.db %00110100
  270 D1:C66B -  -  -  -  
  271 D1:C66B 00 59 B0 84 
              67 38 F0 38 	.db %00000000, %01011001, %10110000, %10000100, %01100111, %00111000, %11110000, %00111000
  272 D1:C673 E7 BE 7D C6 
              7D E6 C0 -  	.db %11100111, %10111110, %01111101, %11000110, %01111101, %11100110, %11000000
  273 D1:C67A -  -  -  -  
  274 D1:C67A -  -  -  -  
  275 D1:C67A -  -  -  -  Vines_7:
  276 D1:C67A 10 -  -  -  	.db %00010000
  277 D1:C67B 0A 18 -  -  	.db 10, 24
  278 D1:C67D C0 30 0C 03 
              90 EC 3F 07 	.db %11000000, %00110000, %00001100, %00000011, %10010000, %11101100, %00111111, %00000111
  279 D1:C685 00 C0 78 1E 
              03 80 E0 3C 	.db %00000000, %11000000, %01111000, %00011110, %00000011, %10000000, %11100000, %00111100
  280 D1:C68D 07 00 C0 F0 
              3C 03 B0 7C 	.db %00000111, %00000000, %11000000, %11110000, %00111100, %00000011, %10110000, %01111100
  281 D1:C695 1C 03 00 E0 
              38 06 -  -  	.db %00011100, %00000011, %00000000, %11100000, %00111000, %00000110
  282 D1:C69B -  -  -  -  
  283 D1:C69B 43 -  -  -  	.db %01000011
  284 D1:C69C -  -  -  -  
  285 D1:C69C 54 CE 79 6F 
              49 36 FE 9D 	.db %01010100, %11001110, %01111001, %01101111, %01001001, %00110110, %11111110, %10011101
  286 D1:C6A4 EF 4A -  -  	.db %11101111, %01001010
  287 D1:C6A6 -  -  -  -  
  288 D1:C6A6 -  -  -  -  
  289 D1:C6A6 -  -  -  -  Vines_4:
  290 D1:C6A6 10 -  -  -  	.db %00010000
  291 D1:C6A7 18 0D -  -  	.db 24, 13
  292 D1:C6A9 00 00 C7 00 
              00 DF 00 00 	.db %00000000, %00000000, %11000111, %00000000, %00000000, %11011111, %00000000, %00000000
  293 D1:C6B1 3F 00 00 FC 
              00 61 F8 20 	.db %00111111, %00000000, %00000000, %11111100, %00000000, %01100001, %11111000, %00100000
  294 D1:C6B9 6F E0 60 3F 
              80 41 FE 80 	.db %01101111, %11100000, %01100000, %00111111, %10000000, %01000001, %11111110, %10000000
  295 D1:C6C1 CF F8 C0 FF 
              C0 40 7C C0 	.db %11001111, %11111000, %11000000, %11111111, %11000000, %01000000, %01111100, %11000000
  296 D1:C6C9 00 01 80 00 
              00 80 00 -  	.db %00000000, %00000001, %10000000, %00000000, %00000000, %10000000, %00000000
  297 D1:C6D0 -  -  -  -  
  298 D1:C6D0 34 -  -  -  	.db %00110100
  299 D1:C6D1 -  -  -  -  
  300 D1:C6D1 00 33 C7 0F 
              01 C1 E0 F8 	.db %00000000, %00110011, %11000111, %00001111, %00000001, %11000001, %11100000, %11111000
  301 D1:C6D9 1F F1 FF FE 	.db %00011111, %11110001, %11111111, %11111110
  302 D1:C6DD -  -  -  -  
  303 D1:C6DD -  -  -  -  
  304 D1:C6DD -  -  -  -  Vines_9:
  305 D1:C6DD 10 -  -  -  	.db %00010000
  306 D1:C6DE 18 0B -  -  	.db 24, 11
  307 D1:C6E0 00 18 60 00 
              38 27 0C 27 	.db %00000000, %00011000, %01100000, %00000000, %00111000, %00100111, %00001100, %00100111
  308 D1:C6E8 FF 0C 3F FF 
              07 FF F8 1F 	.db %11111111, %00001100, %00111111, %11111111, %00000111, %11111111, %11111000, %00011111
  309 D1:C6F0 FE 08 7F F7 
              00 FE 43 00 	.db %11111110, %00001000, %01111111, %11110111, %00000000, %11111110, %01000011, %00000000
  310 D1:C6F8 F0 C0 00 E0 
              C0 00 C0 00 	.db %11110000, %11000000, %00000000, %11100000, %11000000, %00000000, %11000000, %00000000
  311 D1:C700 00 -  -  -  	.db %00000000
  312 D1:C701 -  -  -  -  
  313 D1:C701 34 -  -  -  	.db %00110100
  314 D1:C702 -  -  -  -  
  315 D1:C702 00 00 03 81 
              FF 81 FF 8F 	.db %00000000, %00000000, %00000011, %10000001, %11111111, %10000001, %11111111, %10001111
  316 D1:C70A FC 7F F3 FF 
              FF E0 -  -  	.db %11111100, %01111111, %11110011, %11111111, %11111111, %11100000
  317 D1:C710 -  -  -  -  
  318 D1:C710 -  -  -  -  
  319 D1:C710 -  -  -  -  Vines_10:
  320 D1:C710 10 -  -  -  	.db %00010000
  321 D1:C711 18 0E -  -  	.db 24, 14
  322 D1:C713 00 40 00 FC 
              E0 00 FF 80 	.db %00000000, %01000000, %00000000, %11111100, %11100000, %00000000, %11111111, %10000000
  323 D1:C71B 00 FF 83 00 
              1F E6 00 33 	.db %00000000, %11111111, %10000011, %00000000, %00011111, %11100110, %00000000, %00110011
  324 D1:C723 FC 00 10 FF 
              0C 00 1F CC 	.db %11111100, %00000000, %00010000, %11111111, %00001100, %00000000, %00011111, %11001100
  325 D1:C72B 00 37 E8 00 
              31 F8 00 01 	.db %00000000, %00110111, %11101000, %00000000, %00110001, %11111000, %00000000, %00000001
  326 D1:C733 FC 00 03 3F 
              00 03 9F 00 	.db %11111100, %00000000, %00000011, %00111111, %00000000, %00000011, %10011111, %00000000
  327 D1:C73B 00 07 -  -  	.db %00000000, %00000111
  328 D1:C73D -  -  -  -  
  329 D1:C73D 34 -  -  -  	.db %00110100
  330 D1:C73E -  -  -  -  
  331 D1:C73E 00 3E 1F C3 
              F0 FE 3F 07 	.db %00000000, %00111110, %00011111, %11000011, %11110000, %11111110, %00111111, %00000111
  332 D1:C746 83 F1 F9 F3 
              E3 FF 80 -  	.db %10000011, %11110001, %11111001, %11110011, %11100011, %11111111, %10000000
  333 D1:C74D -  -  -  -  
  334 D1:C74D -  -  -  -  
  335 D1:C74D -  -  -  -  Branches_15:
  336 D1:C74D 20 -  -  -  	.db %00100000
  337 D1:C74E 18 17 -  -  	.db 24, 23
  338 D1:C750 00 CF 0F 00 
              FF FF 03 FF 	.db %00000000, %11001111, %00001111, %00000000, %11111111, %11111111, %00000011, %11111111
  339 D1:C758 FF 0F FF FF 
              0F FF FF 3F 	.db %11111111, %00001111, %11111111, %11111111, %00001111, %11111111, %11111111, %00111111
  340 D1:C760 FF FF 3F FF 
              FF 3F FF FF 	.db %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111, %11111111
  341 D1:C768 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  342 D1:C770 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  343 D1:C778 FF FF FF FF 
              FF 3F FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00111111, %11111111, %11111111
  344 D1:C780 3F FF FF 3F 
              FF FF 3F FF 	.db %00111111, %11111111, %11111111, %00111111, %11111111, %11111111, %00111111, %11111111
  345 D1:C788 FF 0F FF FF 
              0F FF FF 0F 	.db %11111111, %00001111, %11111111, %11111111, %00001111, %11111111, %11111111, %00001111
  346 D1:C790 FF FF 03 C3 
              FC -  -  -  	.db %11111111, %11111111, %00000011, %11000011, %11111100
  347 D1:C795 -  -  -  -  
  348 D1:C795 01 20 -  -  	.db %00000001, %00100000
  349 D1:C797 -  -  -  -  
  350 D1:C797 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  351 D1:C79F 01 41 55 00 
              00 10 14 00 	.db %00000001, %01000001, %01010101, %00000000, %00000000, %00010000, %00010100, %00000000
  352 D1:C7A7 04 54 05 55 
              55 01 40 55 	.db %00000100, %01010100, %00000101, %01010101, %01010101, %00000001, %01000000, %01010101
  353 D1:C7AF 55 55 50 01 
              05 55 55 55 	.db %01010101, %01010101, %01010000, %00000001, %00000101, %01010101, %01010101, %01010101
  354 D1:C7B7 01 05 5A A9 
              55 50 00 15 	.db %00000001, %00000101, %01011010, %10101001, %01010101, %01010000, %00000000, %00010101
  355 D1:C7BF 55 5A AA A0 
              01 55 A9 6A 	.db %01010101, %01011010, %10101010, %10100000, %00000001, %01010101, %10101001, %01101010
  356 D1:C7C7 55 A0 00 55 
              AA AA AA A0 	.db %01010101, %10100000, %00000000, %01010101, %10101010, %10101010, %10101010, %10100000
  357 D1:C7CF 00 5A AA AA 
              AA A0 00 5A 	.db %00000000, %01011010, %10101010, %10101010, %10101010, %10100000, %00000000, %01011010
  358 D1:C7D7 AA AA AA 50 
              05 55 55 56 	.db %10101010, %10101010, %10101010, %01010000, %00000101, %01010101, %01010101, %01010110
  359 D1:C7DF AA A0 04 55 
              6A A5 55 50 	.db %10101010, %10100000, %00000100, %01010101, %01101010, %10100101, %01010101, %01010000
  360 D1:C7E7 11 55 55 55 
              55 00 04 01 	.db %00010001, %01010101, %01010101, %01010101, %01010101, %00000000, %00000100, %00000001
  361 D1:C7EF 55 55 50 10 
              15 50 15 40 	.db %01010101, %01010101, %01010000, %00010000, %00010101, %01010000, %00010101, %01000000
  362 D1:C7F7 00 04 01 40 
              01 50 01 50 	.db %00000000, %00000100, %00000001, %01000000, %00000001, %01010000, %00000001, %01010000
  363 D1:C7FF 55 55 40 01 
              05 00 11 00 	.db %01010101, %01010101, %01000000, %00000001, %00000101, %00000000, %00010001, %00000000
  364 D1:C807 00 00 14 00 
              00 00 00 00 	.db %00000000, %00000000, %00010100, %00000000, %00000000, %00000000, %00000000, %00000000
  365 D1:C80F -  -  -  -  
  366 D1:C80F -  -  -  -  
  367 D1:C80F -  -  -  -  Branches_3:
  368 D1:C80F 20 -  -  -  	.db %00100000
  369 D1:C810 18 14 -  -  	.db 24, 20
  370 D1:C812 00 00 0F 03 
              CC FF 0F FF 	.db %00000000, %00000000, %00001111, %00000011, %11001100, %11111111, %00001111, %11111111
  371 D1:C81A FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  372 D1:C822 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  373 D1:C82A FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  374 D1:C832 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  375 D1:C83A FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  376 D1:C842 FF FF FF FF 
              FF FF 30 FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %00110000, %11111111
  377 D1:C84A FF 00 0F 3F 	.db %11111111, %00000000, %00001111, %00111111
  378 D1:C84E -  -  -  -  
  379 D1:C84E 01 20 -  -  	.db %00000001, %00100000
  380 D1:C850 -  -  -  -  
  381 D1:C850 00 00 00 01 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000001, %00000000, %00000000, %00000000, %00000000
  382 D1:C858 05 00 05 00 
              14 00 51 50 	.db %00000101, %00000000, %00000101, %00000000, %00010100, %00000000, %01010001, %01010000
  383 D1:C860 00 15 55 55 
              55 05 55 40 	.db %00000000, %00010101, %01010101, %01010101, %01010101, %00000101, %01010101, %01000000
  384 D1:C868 00 00 69 55 
              55 55 55 55 	.db %00000000, %00000000, %01101001, %01010101, %01010101, %01010101, %01010101, %01010101
  385 D1:C870 15 5A A9 AA 
              AA A9 55 5A 	.db %00010101, %01011010, %10101001, %10101010, %10101010, %10101001, %01010101, %01011010
  386 D1:C878 AA 95 69 55 
              6A AA AA AA 	.db %10101010, %10010101, %01101001, %01010101, %01101010, %10101010, %10101010, %10101010
  387 D1:C880 AA AA AA AA 
              AA AA AA 9A 	.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10011010
  388 D1:C888 AA AA AA 95 
              AA AA 95 5A 	.db %10101010, %10101010, %10101010, %10010101, %10101010, %10101010, %10010101, %01011010
  389 D1:C890 55 AA AA 55 
              AA A5 A9 55 	.db %01010101, %10101010, %10101010, %01010101, %10101010, %10100101, %10101001, %01010101
  390 D1:C898 55 55 55 55 
              54 05 55 54 	.db %01010101, %01010101, %01010101, %01010101, %01010100, %00000101, %01010101, %01010100
  391 D1:C8A0 15 54 55 54 
              00 15 40 10 	.db %00010101, %01010100, %01010101, %01010100, %00000000, %00010101, %01000000, %00010000
  392 D1:C8A8 04 00 54 00 
              55 40 00 00 	.db %00000100, %00000000, %01010100, %00000000, %01010101, %01000000, %00000000, %00000000
  393 D1:C8B0 01 50 00 00 
              00 00 00 00 	.db %00000001, %01010000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  394 D1:C8B8 00 00 00 -  	.db %00000000, %00000000, %00000000
  395 D1:C8BB -  -  -  -  
  396 D1:C8BB -  -  -  -  
  397 D1:C8BB -  -  -  -  Branches_5:
  398 D1:C8BB 20 -  -  -  	.db %00100000
  399 D1:C8BC 18 12 -  -  	.db 24, 18
  400 D1:C8BE 00 0F 00 0F 
              FF CF FF FF 	.db %00000000, %00001111, %00000000, %00001111, %11111111, %11001111, %11111111, %11111111
  401 D1:C8C6 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  402 D1:C8CE FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  403 D1:C8D6 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  404 D1:C8DE FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  405 D1:C8E6 FF FF FF FF 
              FF 3C FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %00111100, %11111111, %11111111
  406 D1:C8EE 00 3F C0 00 
              0C 00 -  -  	.db %00000000, %00111111, %11000000, %00000000, %00001100, %00000000
  407 D1:C8F4 -  -  -  -  
  408 D1:C8F4 01 20 -  -  	.db %00000001, %00100000
  409 D1:C8F6 -  -  -  -  
  410 D1:C8F6 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  411 D1:C8FE 00 01 04 00 
              05 40 55 40 	.db %00000000, %00000001, %00000100, %00000000, %00000101, %01000000, %01010101, %01000000
  412 D1:C906 00 05 40 15 
              55 55 01 50 	.db %00000000, %00000101, %01000000, %00010101, %01010101, %01010101, %00000001, %01010000
  413 D1:C90E 55 50 00 05 
              55 55 55 55 	.db %01010101, %01010000, %00000000, %00000101, %01010101, %01010101, %01010101, %01010101
  414 D1:C916 55 55 59 5A 
              AA AA A5 AA 	.db %01010101, %01010101, %01011001, %01011010, %10101010, %10101010, %10100101, %10101010
  415 D1:C91E AA AA 56 AA 
              6A AA 95 AA 	.db %10101010, %10101010, %01010110, %10101010, %01101010, %10101010, %10010101, %10101010
  416 D1:C926 A9 96 56 5A 
              AA A6 6A AA 	.db %10101001, %10010110, %01010110, %01011010, %10101010, %10100110, %01101010, %10101010
  417 D1:C92E A5 AA A9 A5 
              54 05 55 55 	.db %10100101, %10101010, %10101001, %10100101, %01010100, %00000101, %01010101, %01010101
  418 D1:C936 55 50 55 55 
              45 55 00 50 	.db %01010101, %01010000, %01010101, %01010101, %01000101, %01010101, %00000000, %01010000
  419 D1:C93E 00 00 14 01 
              55 50 00 00 	.db %00000000, %00000000, %00010100, %00000001, %01010101, %01010000, %00000000, %00000000
  420 D1:C946 01 55 00 00 
              00 00 00 00 	.db %00000001, %01010101, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  421 D1:C94E 00 00 00 -  	.db %00000000, %00000000, %00000000
  422 D1:C951 -  -  -  -  
  423 D1:C951 -  -  -  -  
  424 D1:C951 -  -  -  -  Branches_11:
  425 D1:C951 20 -  -  -  	.db %00100000
  426 D1:C952 18 17 -  -  	.db 24, 23
  427 D1:C954 00 00 03 00 
              00 0F 00 00 	.db %00000000, %00000000, %00000011, %00000000, %00000000, %00001111, %00000000, %00000000
  428 D1:C95C 3F 00 00 FF 
              00 0C FF 00 	.db %00111111, %00000000, %00000000, %11111111, %00000000, %00001100, %11111111, %00000000
  429 D1:C964 3F FF 0F FF 
              FF FF FF FF 	.db %00111111, %11111111, %00001111, %11111111, %11111111, %11111111, %11111111, %11111111
  430 D1:C96C FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  431 D1:C974 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  432 D1:C97C FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  433 D1:C984 FF FF FF FF 
              FF FC FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111100, %11111111, %11111111
  434 D1:C98C 30 FF FC 00 
              FF F0 00 FC 	.db %00110000, %11111111, %11111100, %00000000, %11111111, %11110000, %00000000, %11111100
  435 D1:C994 00 00 F0 00 
              00 -  -  -  	.db %00000000, %00000000, %11110000, %00000000, %00000000
  436 D1:C999 -  -  -  -  
  437 D1:C999 01 20 -  -  	.db %00000001, %00100000
  438 D1:C99B -  -  -  -  
  439 D1:C99B 00 00 10 00 
              01 00 01 50 	.db %00000000, %00000000, %00010000, %00000000, %00000001, %00000000, %00000001, %01010000
  440 D1:C9A3 00 01 01 00 
              00 00 51 55 	.db %00000000, %00000001, %00000001, %00000000, %00000000, %00000000, %01010001, %01010101
  441 D1:C9AB 00 00 10 04 
              41 55 15 00 	.db %00000000, %00000000, %00010000, %00000100, %01000001, %01010101, %00010101, %00000000
  442 D1:C9B3 01 51 55 5A 
              40 15 55 01 	.db %00000001, %01010001, %01010101, %01011010, %01000000, %00010101, %01010101, %00000001
  443 D1:C9BB 55 A5 05 50 
              15 55 AA A6 	.db %01010101, %10100101, %00000101, %01010000, %00010101, %01010101, %10101010, %10100110
  444 D1:C9C3 50 55 55 5A 
              5A AA 55 A9 	.db %01010000, %01010101, %01010101, %01011010, %01011010, %10101010, %01010101, %10101001
  445 D1:C9CB 6A A5 6A 95 
              59 56 AA AA 	.db %01101010, %10100101, %01101010, %10010101, %01011001, %01010110, %10101010, %10101010
  446 D1:C9D3 A9 55 55 AA 
              9A AA 55 41 	.db %10101001, %01010101, %01010101, %10101010, %10011010, %10101010, %01010101, %01000001
  447 D1:C9DB 6A AA 99 55 
              10 14 A9 69 	.db %01101010, %10101010, %10011001, %01010101, %00010000, %00010100, %10101001, %01101001
  448 D1:C9E3 55 01 14 00 
              96 A5 51 55 	.db %01010101, %00000001, %00010100, %00000000, %10010110, %10100101, %01010001, %01010101
  449 D1:C9EB 00 05 55 10 
              40 00 51 11 	.db %00000000, %00000101, %01010101, %00010000, %01000000, %00000000, %01010001, %00010001
  450 D1:C9F3 50 05 50 00 
              00 00 00 -  	.db %01010000, %00000101, %01010000, %00000000, %00000000, %00000000, %00000000
  451 D1:C9FA -  -  -  -  
  452 D1:C9FA -  -  -  -  
  453 D1:C9FA -  -  -  -  Branches_6:
  454 D1:C9FA 20 -  -  -  	.db %00100000
  455 D1:C9FB 18 0E -  -  	.db 24, 14
  456 D1:C9FD 00 00 0C 00 
              00 3F 0F 33 	.db %00000000, %00000000, %00001100, %00000000, %00000000, %00111111, %00001111, %00110011
  457 D1:CA05 FF 3F FF FF 
              FF FF FF FF 	.db %11111111, %00111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  458 D1:CA0D FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  459 D1:CA15 FF FF FF FF 
              FF FF FF FF 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
  460 D1:CA1D FF FF FF FF 
              FF FF FF 0C 	.db %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %00001100
  461 D1:CA25 3C 3F -  -  	.db %00111100, %00111111
  462 D1:CA27 -  -  -  -  
  463 D1:CA27 01 20 -  -  	.db %00000001, %00100000
  464 D1:CA29 -  -  -  -  
  465 D1:CA29 00 00 00 00 
              00 00 00 00 	.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
  466 D1:CA31 00 10 50 10 
              00 54 10 04 	.db %00000000, %00010000, %01010000, %00010000, %00000000, %01010100, %00010000, %00000100
  467 D1:CA39 05 50 00 01 
              55 55 55 05 	.db %00000101, %01010000, %00000000, %00000001, %01010101, %01010101, %01010101, %00000101
  468 D1:CA41 55 55 69 55 
              6A A5 AA AA 	.db %01010101, %01010101, %01101001, %01010101, %01101010, %10100101, %10101010, %10101010
  469 D1:CA49 96 96 A5 AA 
              A5 A5 6A AA 	.db %10010110, %10010110, %10100101, %10101010, %10100101, %10100101, %01101010, %10101010
  470 D1:CA51 A6 95 6A 55 
              55 55 55 55 	.db %10100110, %10010101, %01101010, %01010101, %01010101, %01010101, %01010101, %01010101
  471 D1:CA59 55 54 40 01 
              45 01 40 00 	.db %01010101, %01010100, %01000000, %00000001, %01000101, %00000001, %01000000, %00000000
  472 D1:CA61 55 50 00 40 
              00 00 00 00 	.db %01010101, %01010000, %00000000, %01000000, %00000000, %00000000, %00000000, %00000000
  473 D1:CA69 05 50 00 00 
              00 -  -  -  	.db %00000101, %01010000, %00000000, %00000000, %00000000
  474 D1:CA6E -  -  -  -  
  475 D1:CA6E -  -  -  -  
Listing for file "ascent.asm"
  532 D1:CA6E -  -  -  -  #include "generated/SpriteEquates.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\generated\SpriteEquates.txt"
    1 D1:CA6E -  -  -  -  Moss_1_Slow_O_0 .equ 13894081 ; vRam + 1 - 221
    2 D1:CA6E -  -  -  -  Moss_1_Fast_0 .equ 13894302 ; vRam + 222 - 364
    3 D1:CA6E -  -  -  -  Tree_0_Fast_0 .equ 13894444 ; vRam + 364 - 542
    4 D1:CA6E -  -  -  -  Tree_3_Fast_0 .equ 13894622 ; vRam + 542 - 723
    5 D1:CA6E -  -  -  -  Tree_6_Fast_0 .equ 13894804 ; vRam + 724 - 905
    6 D1:CA6E -  -  -  -  Tree_8_Fast_0 .equ 13894986 ; vRam + 906 - 1087
    7 D1:CA6E -  -  -  -  Tree_5_Fast_F_0 .equ 13895168 ; vRam + 1088 - 1269
    8 D1:CA6E -  -  -  -  Tree_6_Fast_F_0 .equ 13895350 ; vRam + 1270 - 1451
    9 D1:CA6E -  -  -  -  Tree_2_Fast_F_0 .equ 13895532 ; vRam + 1452 - 1629
   10 D1:CA6E -  -  -  -  Tree_1_Fast_0 .equ 13895710 ; vRam + 1630 - 1809
   11 D1:CA6E -  -  -  -  Tree_7_Fast_0 .equ 13895890 ; vRam + 1810 - 1991
   12 D1:CA6E -  -  -  -  Tree_9_Fast_0 .equ 13896072 ; vRam + 1992 - 2173
   13 D1:CA6E -  -  -  -  Tree_7_Fast_F_0 .equ 13896254 ; vRam + 2174 - 2355
   14 D1:CA6E -  -  -  -  Tree_2_Fast_0 .equ 13896436 ; vRam + 2356 - 2533
   15 D1:CA6E -  -  -  -  Tree_4_Fast_0 .equ 13896614 ; vRam + 2534 - 2715
   16 D1:CA6E -  -  -  -  Tree_9_Fast_F_0 .equ 13896796 ; vRam + 2716 - 2897
   17 D1:CA6E -  -  -  -  Tree_1_Fast_F_0 .equ 13896978 ; vRam + 2898 - 3077
   18 D1:CA6E -  -  -  -  Tree_3_Fast_F_0 .equ 13897158 ; vRam + 3078 - 3259
   19 D1:CA6E -  -  -  -  Tree_8_Fast_F_0 .equ 13897340 ; vRam + 3260 - 3441
   20 D1:CA6E -  -  -  -  Tree_4_Fast_F_0 .equ 13897522 ; vRam + 3442 - 3623
   21 D1:CA6E -  -  -  -  Tree_0_Fast_F_0 .equ 13897704 ; vRam + 3624 - 3802
   22 D1:CA6E -  -  -  -  Moss_0_Fast_0 .equ 13897882 ; vRam + 3802 - 3939
   23 D1:CA6E -  -  -  -  Moss_0_Fast_F_0 .equ 13898020 ; vRam + 3940 - 4077
   24 D1:CA6E -  -  -  -  Moss_2_Fast_0 .equ 13898158 ; vRam + 4078 - 4229
   25 D1:CA6E -  -  -  -  Moss_2_Fast_F_0 .equ 13898310 ; vRam + 4230 - 4381
   26 D1:CA6E -  -  -  -  Vines_3_Slow_O_0 .equ 13898461 ; vRam + 4381 - 4562
   27 D1:CA6E -  -  -  -  Vines_2_Slow_0 .equ 13898643 ; vRam + 4563 - 4782
   28 D1:CA6E -  -  -  -  Vines_1_Slow_O_0 .equ 13898863 ; vRam + 4783 - 4923
   29 D1:CA6E -  -  -  -  Vines_3_Slow_O_F_0 .equ 13899003 ; vRam + 4923 - 5105
   30 D1:CA6E -  -  -  -  Vines_2_Slow_F_0 .equ 13899185 ; vRam + 5105 - 5323
   31 D1:CA6E -  -  -  -  Vines_3_Slow_F_0 .equ 13899403 ; vRam + 5323 - 5498
   32 D1:CA6E -  -  -  -  Vines_1_Slow_0 .equ 13899579 ; vRam + 5499 - 5643
   33 D1:CA6E -  -  -  -  Vines_8_Slow_0 .equ 13899723 ; vRam + 5643 - 5844
   34 D1:CA6E -  -  -  -  Vines_2_Slow_O_0 .equ 13899925 ; vRam + 5845 - 6061
   35 D1:CA6E -  -  -  -  Vines_3_Slow_0 .equ 13900141 ; vRam + 6061 - 6237
   36 D1:CA6E -  -  -  -  Vines_5_Slow_O_0 .equ 13900317 ; vRam + 6237 - 6477
   37 D1:CA6E -  -  -  -  Vines_7_Slow_0 .equ 13900557 ; vRam + 6477 - 6668
   38 D1:CA6E -  -  -  -  Vines_8_Slow_F_0 .equ 13900749 ; vRam + 6669 - 6870
   39 D1:CA6E -  -  -  -  Vines_5_Slow_O_F_0 .equ 13900951 ; vRam + 6871 - 7109
   40 D1:CA6E -  -  -  -  Vines_4_Slow_O_0 .equ 13901189 ; vRam + 7109 - 7287
   41 D1:CA6E -  -  -  -  Vines_9_Slow_O_0 .equ 13901367 ; vRam + 7287 - 7464
   42 D1:CA6E -  -  -  -  Vines_10_Slow_O_0 .equ 13901545 ; vRam + 7465 - 7656
   43 D1:CA6E -  -  -  -  Branches_15_Fast_0 .equ 13901736 ; vRam + 7656 - 7971
   44 D1:CA6E -  -  -  -  Branches_3_Fast_F_0 .equ 13902052 ; vRam + 7972 - 8254
   45 D1:CA6E -  -  -  -  Branches_5_Fast_0 .equ 13902334 ; vRam + 8254 - 8495
   46 D1:CA6E -  -  -  -  Branches_11_Fast_0 .equ 13902576 ; vRam + 8496 - 8760
   47 D1:CA6E -  -  -  -  Branches_6_Fast_F_0 .equ 13902840 ; vRam + 8760 - 8948
   48 D1:CA6E -  -  -  -  Moss_2_Slow_O_0 .equ 13903029 ; vRam + 8949 - 9169
Listing for file "ascent.asm"
  533 D1:CA6E -  -  -  -  
  534 D1:CA6E -  -  -  -  
  535 D1:CA6E -  -  -  -  #include "testing/SpriteGroups.txt"
Listing for file "C:\Users\jax9h\OneDrive\Desktop\ti84\ascent\testing\SpriteGroups.txt"
    1 D1:CA6E -  -  -  -  Sprite_Groups_Table:
    2 D1:CA6E 71 CA D1 -  	.dl sprite_group_test_1
    3 D1:CA71 -  -  -  -  	
    4 D1:CA71 -  -  -  -  	
    5 D1:CA71 -  -  -  -  	
    6 D1:CA71 -  -  -  -  	
    7 D1:CA71 -  -  -  -  	
    8 D1:CA71 -  -  -  -  	
    9 D1:CA71 -  -  -  -  	
   10 D1:CA71 -  -  -  -  	
   11 D1:CA71 -  -  -  -  sprite_group_test_1:
   12 D1:CA71 -  -  -  -  	;.dl sprite table (All sprites in a group must share a table)
   13 D1:CA71 -  -  -  -  	;.db num sprites 
   14 D1:CA71 -  -  -  -  	;.db yOffset, height, xOffset, sprite index
   15 D1:CA71 -  -  -  -  	;yOffset can range from 0 to 128 (px below origin) 
   16 D1:CA71 -  -  -  -  	;Origin is in topleft of all sprites in group 
   17 D1:CA71 -  -  -  -  	
   18 D1:CA71 -  -  -  -  	
   19 D1:CA71 -  -  -  -  	
Listing for file "ascent.asm"
  536 D1:CA71 -  -  -  -  ;#include "TestingSpriteData.txt"
  537 D1:CA71 -  -  -  -  ;#include "TestGeneratedSpriteData.txt"
  538 D1:CA71 -  -  -  -  ;#include "Sprite_Data.txt"
  539 D1:CA71 -  -  -  -  ;#include "FG_Data.txt"
  540 D1:CA71 -  -  -  -  ;#include "MG_Data.txt"
  541 D1:CA71 -  -  -  -  ;#include "BG_Data.txt"
  542 D1:CA71 -  -  -  -  ;#include "Palette_Setup.txt"
  543 D1:CA71 -  -  -  -  ;#include "Equates.txt"
  544 D1:CA71 -  -  -  -  ;#include "Decompress_Calls.txt"
  545 D1:CA71 -  -  -  -  ;#include "Sprite_Tables.txt"
  546 D1:CA71 -  -  -  -  ;#include "TestingBGData.txt"
  547 D1:CA71 -  -  -  -  ;#include "TestingFGData.txt"
  548 D1:CA71 -  -  -  -  
  549 D1:CA71 -  -  -  -  
